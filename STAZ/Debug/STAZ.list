
STAZ.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006eb4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000428  08006f74  08006f74  00016f74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800739c  0800739c  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  0800739c  0800739c  0001739c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080073a4  080073a4  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080073a4  080073a4  000173a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080073a8  080073a8  000173a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  080073ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002e8  20000078  08007424  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000360  08007424  00020360  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 13 .debug_info   000100c8  00000000  00000000  000200e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002efb  00000000  00000000  000301ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f58  00000000  00000000  000330a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000bc0  00000000  00000000  00034000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016fce  00000000  00000000  00034bc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013795  00000000  00000000  0004bb8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00087bbd  00000000  00000000  0005f323  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004384  00000000  00000000  000e6ee0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  000eb264  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000078 	.word	0x20000078
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08006f5c 	.word	0x08006f5c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000007c 	.word	0x2000007c
 8000104:	08006f5c 	.word	0x08006f5c

08000108 <strcmp>:
 8000108:	7802      	ldrb	r2, [r0, #0]
 800010a:	780b      	ldrb	r3, [r1, #0]
 800010c:	2a00      	cmp	r2, #0
 800010e:	d003      	beq.n	8000118 <strcmp+0x10>
 8000110:	3001      	adds	r0, #1
 8000112:	3101      	adds	r1, #1
 8000114:	429a      	cmp	r2, r3
 8000116:	d0f7      	beq.n	8000108 <strcmp>
 8000118:	1ad0      	subs	r0, r2, r3
 800011a:	4770      	bx	lr

0800011c <strlen>:
 800011c:	2300      	movs	r3, #0
 800011e:	5cc2      	ldrb	r2, [r0, r3]
 8000120:	3301      	adds	r3, #1
 8000122:	2a00      	cmp	r2, #0
 8000124:	d1fb      	bne.n	800011e <strlen+0x2>
 8000126:	1e58      	subs	r0, r3, #1
 8000128:	4770      	bx	lr
	...

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	; 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f806 	bl	8000254 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			; (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__aeabi_idiv0>:
 8000254:	4770      	bx	lr
 8000256:	46c0      	nop			; (mov r8, r8)

08000258 <__aeabi_uldivmod>:
 8000258:	2b00      	cmp	r3, #0
 800025a:	d111      	bne.n	8000280 <__aeabi_uldivmod+0x28>
 800025c:	2a00      	cmp	r2, #0
 800025e:	d10f      	bne.n	8000280 <__aeabi_uldivmod+0x28>
 8000260:	2900      	cmp	r1, #0
 8000262:	d100      	bne.n	8000266 <__aeabi_uldivmod+0xe>
 8000264:	2800      	cmp	r0, #0
 8000266:	d002      	beq.n	800026e <__aeabi_uldivmod+0x16>
 8000268:	2100      	movs	r1, #0
 800026a:	43c9      	mvns	r1, r1
 800026c:	0008      	movs	r0, r1
 800026e:	b407      	push	{r0, r1, r2}
 8000270:	4802      	ldr	r0, [pc, #8]	; (800027c <__aeabi_uldivmod+0x24>)
 8000272:	a102      	add	r1, pc, #8	; (adr r1, 800027c <__aeabi_uldivmod+0x24>)
 8000274:	1840      	adds	r0, r0, r1
 8000276:	9002      	str	r0, [sp, #8]
 8000278:	bd03      	pop	{r0, r1, pc}
 800027a:	46c0      	nop			; (mov r8, r8)
 800027c:	ffffffd9 	.word	0xffffffd9
 8000280:	b403      	push	{r0, r1}
 8000282:	4668      	mov	r0, sp
 8000284:	b501      	push	{r0, lr}
 8000286:	9802      	ldr	r0, [sp, #8]
 8000288:	f000 f84c 	bl	8000324 <__udivmoddi4>
 800028c:	9b01      	ldr	r3, [sp, #4]
 800028e:	469e      	mov	lr, r3
 8000290:	b002      	add	sp, #8
 8000292:	bc0c      	pop	{r2, r3}
 8000294:	4770      	bx	lr
 8000296:	46c0      	nop			; (mov r8, r8)

08000298 <__aeabi_lmul>:
 8000298:	b5f0      	push	{r4, r5, r6, r7, lr}
 800029a:	46ce      	mov	lr, r9
 800029c:	4699      	mov	r9, r3
 800029e:	0c03      	lsrs	r3, r0, #16
 80002a0:	469c      	mov	ip, r3
 80002a2:	0413      	lsls	r3, r2, #16
 80002a4:	4647      	mov	r7, r8
 80002a6:	0c1b      	lsrs	r3, r3, #16
 80002a8:	001d      	movs	r5, r3
 80002aa:	000e      	movs	r6, r1
 80002ac:	4661      	mov	r1, ip
 80002ae:	0404      	lsls	r4, r0, #16
 80002b0:	0c24      	lsrs	r4, r4, #16
 80002b2:	b580      	push	{r7, lr}
 80002b4:	0007      	movs	r7, r0
 80002b6:	0c10      	lsrs	r0, r2, #16
 80002b8:	434b      	muls	r3, r1
 80002ba:	4365      	muls	r5, r4
 80002bc:	4341      	muls	r1, r0
 80002be:	4360      	muls	r0, r4
 80002c0:	0c2c      	lsrs	r4, r5, #16
 80002c2:	18c0      	adds	r0, r0, r3
 80002c4:	1820      	adds	r0, r4, r0
 80002c6:	468c      	mov	ip, r1
 80002c8:	4283      	cmp	r3, r0
 80002ca:	d903      	bls.n	80002d4 <__aeabi_lmul+0x3c>
 80002cc:	2380      	movs	r3, #128	; 0x80
 80002ce:	025b      	lsls	r3, r3, #9
 80002d0:	4698      	mov	r8, r3
 80002d2:	44c4      	add	ip, r8
 80002d4:	4649      	mov	r1, r9
 80002d6:	4379      	muls	r1, r7
 80002d8:	4356      	muls	r6, r2
 80002da:	0c03      	lsrs	r3, r0, #16
 80002dc:	042d      	lsls	r5, r5, #16
 80002de:	0c2d      	lsrs	r5, r5, #16
 80002e0:	1989      	adds	r1, r1, r6
 80002e2:	4463      	add	r3, ip
 80002e4:	0400      	lsls	r0, r0, #16
 80002e6:	1940      	adds	r0, r0, r5
 80002e8:	18c9      	adds	r1, r1, r3
 80002ea:	bcc0      	pop	{r6, r7}
 80002ec:	46b9      	mov	r9, r7
 80002ee:	46b0      	mov	r8, r6
 80002f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002f2:	46c0      	nop			; (mov r8, r8)

080002f4 <__aeabi_f2uiz>:
 80002f4:	219e      	movs	r1, #158	; 0x9e
 80002f6:	b510      	push	{r4, lr}
 80002f8:	05c9      	lsls	r1, r1, #23
 80002fa:	1c04      	adds	r4, r0, #0
 80002fc:	f000 fd7e 	bl	8000dfc <__aeabi_fcmpge>
 8000300:	2800      	cmp	r0, #0
 8000302:	d103      	bne.n	800030c <__aeabi_f2uiz+0x18>
 8000304:	1c20      	adds	r0, r4, #0
 8000306:	f000 fce1 	bl	8000ccc <__aeabi_f2iz>
 800030a:	bd10      	pop	{r4, pc}
 800030c:	219e      	movs	r1, #158	; 0x9e
 800030e:	1c20      	adds	r0, r4, #0
 8000310:	05c9      	lsls	r1, r1, #23
 8000312:	f000 fb3b 	bl	800098c <__aeabi_fsub>
 8000316:	f000 fcd9 	bl	8000ccc <__aeabi_f2iz>
 800031a:	2380      	movs	r3, #128	; 0x80
 800031c:	061b      	lsls	r3, r3, #24
 800031e:	469c      	mov	ip, r3
 8000320:	4460      	add	r0, ip
 8000322:	e7f2      	b.n	800030a <__aeabi_f2uiz+0x16>

08000324 <__udivmoddi4>:
 8000324:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000326:	4657      	mov	r7, sl
 8000328:	464e      	mov	r6, r9
 800032a:	4645      	mov	r5, r8
 800032c:	46de      	mov	lr, fp
 800032e:	b5e0      	push	{r5, r6, r7, lr}
 8000330:	0004      	movs	r4, r0
 8000332:	000d      	movs	r5, r1
 8000334:	4692      	mov	sl, r2
 8000336:	4699      	mov	r9, r3
 8000338:	b083      	sub	sp, #12
 800033a:	428b      	cmp	r3, r1
 800033c:	d830      	bhi.n	80003a0 <__udivmoddi4+0x7c>
 800033e:	d02d      	beq.n	800039c <__udivmoddi4+0x78>
 8000340:	4649      	mov	r1, r9
 8000342:	4650      	mov	r0, sl
 8000344:	f000 fd82 	bl	8000e4c <__clzdi2>
 8000348:	0029      	movs	r1, r5
 800034a:	0006      	movs	r6, r0
 800034c:	0020      	movs	r0, r4
 800034e:	f000 fd7d 	bl	8000e4c <__clzdi2>
 8000352:	1a33      	subs	r3, r6, r0
 8000354:	4698      	mov	r8, r3
 8000356:	3b20      	subs	r3, #32
 8000358:	d434      	bmi.n	80003c4 <__udivmoddi4+0xa0>
 800035a:	469b      	mov	fp, r3
 800035c:	4653      	mov	r3, sl
 800035e:	465a      	mov	r2, fp
 8000360:	4093      	lsls	r3, r2
 8000362:	4642      	mov	r2, r8
 8000364:	001f      	movs	r7, r3
 8000366:	4653      	mov	r3, sl
 8000368:	4093      	lsls	r3, r2
 800036a:	001e      	movs	r6, r3
 800036c:	42af      	cmp	r7, r5
 800036e:	d83b      	bhi.n	80003e8 <__udivmoddi4+0xc4>
 8000370:	42af      	cmp	r7, r5
 8000372:	d100      	bne.n	8000376 <__udivmoddi4+0x52>
 8000374:	e079      	b.n	800046a <__udivmoddi4+0x146>
 8000376:	465b      	mov	r3, fp
 8000378:	1ba4      	subs	r4, r4, r6
 800037a:	41bd      	sbcs	r5, r7
 800037c:	2b00      	cmp	r3, #0
 800037e:	da00      	bge.n	8000382 <__udivmoddi4+0x5e>
 8000380:	e076      	b.n	8000470 <__udivmoddi4+0x14c>
 8000382:	2200      	movs	r2, #0
 8000384:	2300      	movs	r3, #0
 8000386:	9200      	str	r2, [sp, #0]
 8000388:	9301      	str	r3, [sp, #4]
 800038a:	2301      	movs	r3, #1
 800038c:	465a      	mov	r2, fp
 800038e:	4093      	lsls	r3, r2
 8000390:	9301      	str	r3, [sp, #4]
 8000392:	2301      	movs	r3, #1
 8000394:	4642      	mov	r2, r8
 8000396:	4093      	lsls	r3, r2
 8000398:	9300      	str	r3, [sp, #0]
 800039a:	e029      	b.n	80003f0 <__udivmoddi4+0xcc>
 800039c:	4282      	cmp	r2, r0
 800039e:	d9cf      	bls.n	8000340 <__udivmoddi4+0x1c>
 80003a0:	2200      	movs	r2, #0
 80003a2:	2300      	movs	r3, #0
 80003a4:	9200      	str	r2, [sp, #0]
 80003a6:	9301      	str	r3, [sp, #4]
 80003a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	d001      	beq.n	80003b2 <__udivmoddi4+0x8e>
 80003ae:	601c      	str	r4, [r3, #0]
 80003b0:	605d      	str	r5, [r3, #4]
 80003b2:	9800      	ldr	r0, [sp, #0]
 80003b4:	9901      	ldr	r1, [sp, #4]
 80003b6:	b003      	add	sp, #12
 80003b8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ba:	46bb      	mov	fp, r7
 80003bc:	46b2      	mov	sl, r6
 80003be:	46a9      	mov	r9, r5
 80003c0:	46a0      	mov	r8, r4
 80003c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80003c4:	4642      	mov	r2, r8
 80003c6:	469b      	mov	fp, r3
 80003c8:	2320      	movs	r3, #32
 80003ca:	1a9b      	subs	r3, r3, r2
 80003cc:	4652      	mov	r2, sl
 80003ce:	40da      	lsrs	r2, r3
 80003d0:	4641      	mov	r1, r8
 80003d2:	0013      	movs	r3, r2
 80003d4:	464a      	mov	r2, r9
 80003d6:	408a      	lsls	r2, r1
 80003d8:	0017      	movs	r7, r2
 80003da:	4642      	mov	r2, r8
 80003dc:	431f      	orrs	r7, r3
 80003de:	4653      	mov	r3, sl
 80003e0:	4093      	lsls	r3, r2
 80003e2:	001e      	movs	r6, r3
 80003e4:	42af      	cmp	r7, r5
 80003e6:	d9c3      	bls.n	8000370 <__udivmoddi4+0x4c>
 80003e8:	2200      	movs	r2, #0
 80003ea:	2300      	movs	r3, #0
 80003ec:	9200      	str	r2, [sp, #0]
 80003ee:	9301      	str	r3, [sp, #4]
 80003f0:	4643      	mov	r3, r8
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d0d8      	beq.n	80003a8 <__udivmoddi4+0x84>
 80003f6:	07fb      	lsls	r3, r7, #31
 80003f8:	0872      	lsrs	r2, r6, #1
 80003fa:	431a      	orrs	r2, r3
 80003fc:	4646      	mov	r6, r8
 80003fe:	087b      	lsrs	r3, r7, #1
 8000400:	e00e      	b.n	8000420 <__udivmoddi4+0xfc>
 8000402:	42ab      	cmp	r3, r5
 8000404:	d101      	bne.n	800040a <__udivmoddi4+0xe6>
 8000406:	42a2      	cmp	r2, r4
 8000408:	d80c      	bhi.n	8000424 <__udivmoddi4+0x100>
 800040a:	1aa4      	subs	r4, r4, r2
 800040c:	419d      	sbcs	r5, r3
 800040e:	2001      	movs	r0, #1
 8000410:	1924      	adds	r4, r4, r4
 8000412:	416d      	adcs	r5, r5
 8000414:	2100      	movs	r1, #0
 8000416:	3e01      	subs	r6, #1
 8000418:	1824      	adds	r4, r4, r0
 800041a:	414d      	adcs	r5, r1
 800041c:	2e00      	cmp	r6, #0
 800041e:	d006      	beq.n	800042e <__udivmoddi4+0x10a>
 8000420:	42ab      	cmp	r3, r5
 8000422:	d9ee      	bls.n	8000402 <__udivmoddi4+0xde>
 8000424:	3e01      	subs	r6, #1
 8000426:	1924      	adds	r4, r4, r4
 8000428:	416d      	adcs	r5, r5
 800042a:	2e00      	cmp	r6, #0
 800042c:	d1f8      	bne.n	8000420 <__udivmoddi4+0xfc>
 800042e:	9800      	ldr	r0, [sp, #0]
 8000430:	9901      	ldr	r1, [sp, #4]
 8000432:	465b      	mov	r3, fp
 8000434:	1900      	adds	r0, r0, r4
 8000436:	4169      	adcs	r1, r5
 8000438:	2b00      	cmp	r3, #0
 800043a:	db24      	blt.n	8000486 <__udivmoddi4+0x162>
 800043c:	002b      	movs	r3, r5
 800043e:	465a      	mov	r2, fp
 8000440:	4644      	mov	r4, r8
 8000442:	40d3      	lsrs	r3, r2
 8000444:	002a      	movs	r2, r5
 8000446:	40e2      	lsrs	r2, r4
 8000448:	001c      	movs	r4, r3
 800044a:	465b      	mov	r3, fp
 800044c:	0015      	movs	r5, r2
 800044e:	2b00      	cmp	r3, #0
 8000450:	db2a      	blt.n	80004a8 <__udivmoddi4+0x184>
 8000452:	0026      	movs	r6, r4
 8000454:	409e      	lsls	r6, r3
 8000456:	0033      	movs	r3, r6
 8000458:	0026      	movs	r6, r4
 800045a:	4647      	mov	r7, r8
 800045c:	40be      	lsls	r6, r7
 800045e:	0032      	movs	r2, r6
 8000460:	1a80      	subs	r0, r0, r2
 8000462:	4199      	sbcs	r1, r3
 8000464:	9000      	str	r0, [sp, #0]
 8000466:	9101      	str	r1, [sp, #4]
 8000468:	e79e      	b.n	80003a8 <__udivmoddi4+0x84>
 800046a:	42a3      	cmp	r3, r4
 800046c:	d8bc      	bhi.n	80003e8 <__udivmoddi4+0xc4>
 800046e:	e782      	b.n	8000376 <__udivmoddi4+0x52>
 8000470:	4642      	mov	r2, r8
 8000472:	2320      	movs	r3, #32
 8000474:	2100      	movs	r1, #0
 8000476:	1a9b      	subs	r3, r3, r2
 8000478:	2200      	movs	r2, #0
 800047a:	9100      	str	r1, [sp, #0]
 800047c:	9201      	str	r2, [sp, #4]
 800047e:	2201      	movs	r2, #1
 8000480:	40da      	lsrs	r2, r3
 8000482:	9201      	str	r2, [sp, #4]
 8000484:	e785      	b.n	8000392 <__udivmoddi4+0x6e>
 8000486:	4642      	mov	r2, r8
 8000488:	2320      	movs	r3, #32
 800048a:	1a9b      	subs	r3, r3, r2
 800048c:	002a      	movs	r2, r5
 800048e:	4646      	mov	r6, r8
 8000490:	409a      	lsls	r2, r3
 8000492:	0023      	movs	r3, r4
 8000494:	40f3      	lsrs	r3, r6
 8000496:	4644      	mov	r4, r8
 8000498:	4313      	orrs	r3, r2
 800049a:	002a      	movs	r2, r5
 800049c:	40e2      	lsrs	r2, r4
 800049e:	001c      	movs	r4, r3
 80004a0:	465b      	mov	r3, fp
 80004a2:	0015      	movs	r5, r2
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	dad4      	bge.n	8000452 <__udivmoddi4+0x12e>
 80004a8:	4642      	mov	r2, r8
 80004aa:	002f      	movs	r7, r5
 80004ac:	2320      	movs	r3, #32
 80004ae:	0026      	movs	r6, r4
 80004b0:	4097      	lsls	r7, r2
 80004b2:	1a9b      	subs	r3, r3, r2
 80004b4:	40de      	lsrs	r6, r3
 80004b6:	003b      	movs	r3, r7
 80004b8:	4333      	orrs	r3, r6
 80004ba:	e7cd      	b.n	8000458 <__udivmoddi4+0x134>

080004bc <__aeabi_fdiv>:
 80004bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004be:	464f      	mov	r7, r9
 80004c0:	4646      	mov	r6, r8
 80004c2:	46d6      	mov	lr, sl
 80004c4:	0245      	lsls	r5, r0, #9
 80004c6:	b5c0      	push	{r6, r7, lr}
 80004c8:	0047      	lsls	r7, r0, #1
 80004ca:	1c0c      	adds	r4, r1, #0
 80004cc:	0a6d      	lsrs	r5, r5, #9
 80004ce:	0e3f      	lsrs	r7, r7, #24
 80004d0:	0fc6      	lsrs	r6, r0, #31
 80004d2:	2f00      	cmp	r7, #0
 80004d4:	d100      	bne.n	80004d8 <__aeabi_fdiv+0x1c>
 80004d6:	e06f      	b.n	80005b8 <__aeabi_fdiv+0xfc>
 80004d8:	2fff      	cmp	r7, #255	; 0xff
 80004da:	d100      	bne.n	80004de <__aeabi_fdiv+0x22>
 80004dc:	e074      	b.n	80005c8 <__aeabi_fdiv+0x10c>
 80004de:	2300      	movs	r3, #0
 80004e0:	2280      	movs	r2, #128	; 0x80
 80004e2:	4699      	mov	r9, r3
 80004e4:	469a      	mov	sl, r3
 80004e6:	00ed      	lsls	r5, r5, #3
 80004e8:	04d2      	lsls	r2, r2, #19
 80004ea:	4315      	orrs	r5, r2
 80004ec:	3f7f      	subs	r7, #127	; 0x7f
 80004ee:	0263      	lsls	r3, r4, #9
 80004f0:	0a5b      	lsrs	r3, r3, #9
 80004f2:	4698      	mov	r8, r3
 80004f4:	0063      	lsls	r3, r4, #1
 80004f6:	0e1b      	lsrs	r3, r3, #24
 80004f8:	0fe4      	lsrs	r4, r4, #31
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	d04d      	beq.n	800059a <__aeabi_fdiv+0xde>
 80004fe:	2bff      	cmp	r3, #255	; 0xff
 8000500:	d045      	beq.n	800058e <__aeabi_fdiv+0xd2>
 8000502:	4642      	mov	r2, r8
 8000504:	2180      	movs	r1, #128	; 0x80
 8000506:	00d2      	lsls	r2, r2, #3
 8000508:	04c9      	lsls	r1, r1, #19
 800050a:	4311      	orrs	r1, r2
 800050c:	4688      	mov	r8, r1
 800050e:	2200      	movs	r2, #0
 8000510:	3b7f      	subs	r3, #127	; 0x7f
 8000512:	0031      	movs	r1, r6
 8000514:	1aff      	subs	r7, r7, r3
 8000516:	464b      	mov	r3, r9
 8000518:	4061      	eors	r1, r4
 800051a:	b2c9      	uxtb	r1, r1
 800051c:	2b0f      	cmp	r3, #15
 800051e:	d900      	bls.n	8000522 <__aeabi_fdiv+0x66>
 8000520:	e0b8      	b.n	8000694 <__aeabi_fdiv+0x1d8>
 8000522:	4870      	ldr	r0, [pc, #448]	; (80006e4 <__aeabi_fdiv+0x228>)
 8000524:	009b      	lsls	r3, r3, #2
 8000526:	58c3      	ldr	r3, [r0, r3]
 8000528:	469f      	mov	pc, r3
 800052a:	2300      	movs	r3, #0
 800052c:	4698      	mov	r8, r3
 800052e:	0026      	movs	r6, r4
 8000530:	4645      	mov	r5, r8
 8000532:	4692      	mov	sl, r2
 8000534:	4653      	mov	r3, sl
 8000536:	2b02      	cmp	r3, #2
 8000538:	d100      	bne.n	800053c <__aeabi_fdiv+0x80>
 800053a:	e08d      	b.n	8000658 <__aeabi_fdiv+0x19c>
 800053c:	2b03      	cmp	r3, #3
 800053e:	d100      	bne.n	8000542 <__aeabi_fdiv+0x86>
 8000540:	e0a1      	b.n	8000686 <__aeabi_fdiv+0x1ca>
 8000542:	2b01      	cmp	r3, #1
 8000544:	d018      	beq.n	8000578 <__aeabi_fdiv+0xbc>
 8000546:	003b      	movs	r3, r7
 8000548:	337f      	adds	r3, #127	; 0x7f
 800054a:	2b00      	cmp	r3, #0
 800054c:	dd6d      	ble.n	800062a <__aeabi_fdiv+0x16e>
 800054e:	076a      	lsls	r2, r5, #29
 8000550:	d004      	beq.n	800055c <__aeabi_fdiv+0xa0>
 8000552:	220f      	movs	r2, #15
 8000554:	402a      	ands	r2, r5
 8000556:	2a04      	cmp	r2, #4
 8000558:	d000      	beq.n	800055c <__aeabi_fdiv+0xa0>
 800055a:	3504      	adds	r5, #4
 800055c:	012a      	lsls	r2, r5, #4
 800055e:	d503      	bpl.n	8000568 <__aeabi_fdiv+0xac>
 8000560:	4b61      	ldr	r3, [pc, #388]	; (80006e8 <__aeabi_fdiv+0x22c>)
 8000562:	401d      	ands	r5, r3
 8000564:	003b      	movs	r3, r7
 8000566:	3380      	adds	r3, #128	; 0x80
 8000568:	2bfe      	cmp	r3, #254	; 0xfe
 800056a:	dd00      	ble.n	800056e <__aeabi_fdiv+0xb2>
 800056c:	e074      	b.n	8000658 <__aeabi_fdiv+0x19c>
 800056e:	01aa      	lsls	r2, r5, #6
 8000570:	0a52      	lsrs	r2, r2, #9
 8000572:	b2d8      	uxtb	r0, r3
 8000574:	e002      	b.n	800057c <__aeabi_fdiv+0xc0>
 8000576:	000e      	movs	r6, r1
 8000578:	2000      	movs	r0, #0
 800057a:	2200      	movs	r2, #0
 800057c:	05c0      	lsls	r0, r0, #23
 800057e:	07f6      	lsls	r6, r6, #31
 8000580:	4310      	orrs	r0, r2
 8000582:	4330      	orrs	r0, r6
 8000584:	bce0      	pop	{r5, r6, r7}
 8000586:	46ba      	mov	sl, r7
 8000588:	46b1      	mov	r9, r6
 800058a:	46a8      	mov	r8, r5
 800058c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800058e:	4643      	mov	r3, r8
 8000590:	2b00      	cmp	r3, #0
 8000592:	d13f      	bne.n	8000614 <__aeabi_fdiv+0x158>
 8000594:	2202      	movs	r2, #2
 8000596:	3fff      	subs	r7, #255	; 0xff
 8000598:	e003      	b.n	80005a2 <__aeabi_fdiv+0xe6>
 800059a:	4643      	mov	r3, r8
 800059c:	2b00      	cmp	r3, #0
 800059e:	d12d      	bne.n	80005fc <__aeabi_fdiv+0x140>
 80005a0:	2201      	movs	r2, #1
 80005a2:	0031      	movs	r1, r6
 80005a4:	464b      	mov	r3, r9
 80005a6:	4061      	eors	r1, r4
 80005a8:	b2c9      	uxtb	r1, r1
 80005aa:	4313      	orrs	r3, r2
 80005ac:	2b0f      	cmp	r3, #15
 80005ae:	d838      	bhi.n	8000622 <__aeabi_fdiv+0x166>
 80005b0:	484e      	ldr	r0, [pc, #312]	; (80006ec <__aeabi_fdiv+0x230>)
 80005b2:	009b      	lsls	r3, r3, #2
 80005b4:	58c3      	ldr	r3, [r0, r3]
 80005b6:	469f      	mov	pc, r3
 80005b8:	2d00      	cmp	r5, #0
 80005ba:	d113      	bne.n	80005e4 <__aeabi_fdiv+0x128>
 80005bc:	2304      	movs	r3, #4
 80005be:	4699      	mov	r9, r3
 80005c0:	3b03      	subs	r3, #3
 80005c2:	2700      	movs	r7, #0
 80005c4:	469a      	mov	sl, r3
 80005c6:	e792      	b.n	80004ee <__aeabi_fdiv+0x32>
 80005c8:	2d00      	cmp	r5, #0
 80005ca:	d105      	bne.n	80005d8 <__aeabi_fdiv+0x11c>
 80005cc:	2308      	movs	r3, #8
 80005ce:	4699      	mov	r9, r3
 80005d0:	3b06      	subs	r3, #6
 80005d2:	27ff      	movs	r7, #255	; 0xff
 80005d4:	469a      	mov	sl, r3
 80005d6:	e78a      	b.n	80004ee <__aeabi_fdiv+0x32>
 80005d8:	230c      	movs	r3, #12
 80005da:	4699      	mov	r9, r3
 80005dc:	3b09      	subs	r3, #9
 80005de:	27ff      	movs	r7, #255	; 0xff
 80005e0:	469a      	mov	sl, r3
 80005e2:	e784      	b.n	80004ee <__aeabi_fdiv+0x32>
 80005e4:	0028      	movs	r0, r5
 80005e6:	f000 fc13 	bl	8000e10 <__clzsi2>
 80005ea:	2776      	movs	r7, #118	; 0x76
 80005ec:	1f43      	subs	r3, r0, #5
 80005ee:	409d      	lsls	r5, r3
 80005f0:	2300      	movs	r3, #0
 80005f2:	427f      	negs	r7, r7
 80005f4:	4699      	mov	r9, r3
 80005f6:	469a      	mov	sl, r3
 80005f8:	1a3f      	subs	r7, r7, r0
 80005fa:	e778      	b.n	80004ee <__aeabi_fdiv+0x32>
 80005fc:	4640      	mov	r0, r8
 80005fe:	f000 fc07 	bl	8000e10 <__clzsi2>
 8000602:	4642      	mov	r2, r8
 8000604:	1f43      	subs	r3, r0, #5
 8000606:	409a      	lsls	r2, r3
 8000608:	2376      	movs	r3, #118	; 0x76
 800060a:	425b      	negs	r3, r3
 800060c:	4690      	mov	r8, r2
 800060e:	1a1b      	subs	r3, r3, r0
 8000610:	2200      	movs	r2, #0
 8000612:	e77e      	b.n	8000512 <__aeabi_fdiv+0x56>
 8000614:	2303      	movs	r3, #3
 8000616:	464a      	mov	r2, r9
 8000618:	431a      	orrs	r2, r3
 800061a:	4691      	mov	r9, r2
 800061c:	33fc      	adds	r3, #252	; 0xfc
 800061e:	2203      	movs	r2, #3
 8000620:	e777      	b.n	8000512 <__aeabi_fdiv+0x56>
 8000622:	000e      	movs	r6, r1
 8000624:	20ff      	movs	r0, #255	; 0xff
 8000626:	2200      	movs	r2, #0
 8000628:	e7a8      	b.n	800057c <__aeabi_fdiv+0xc0>
 800062a:	2201      	movs	r2, #1
 800062c:	1ad3      	subs	r3, r2, r3
 800062e:	2b1b      	cmp	r3, #27
 8000630:	dca2      	bgt.n	8000578 <__aeabi_fdiv+0xbc>
 8000632:	379e      	adds	r7, #158	; 0x9e
 8000634:	002a      	movs	r2, r5
 8000636:	40bd      	lsls	r5, r7
 8000638:	40da      	lsrs	r2, r3
 800063a:	1e6b      	subs	r3, r5, #1
 800063c:	419d      	sbcs	r5, r3
 800063e:	4315      	orrs	r5, r2
 8000640:	076a      	lsls	r2, r5, #29
 8000642:	d004      	beq.n	800064e <__aeabi_fdiv+0x192>
 8000644:	220f      	movs	r2, #15
 8000646:	402a      	ands	r2, r5
 8000648:	2a04      	cmp	r2, #4
 800064a:	d000      	beq.n	800064e <__aeabi_fdiv+0x192>
 800064c:	3504      	adds	r5, #4
 800064e:	016a      	lsls	r2, r5, #5
 8000650:	d544      	bpl.n	80006dc <__aeabi_fdiv+0x220>
 8000652:	2001      	movs	r0, #1
 8000654:	2200      	movs	r2, #0
 8000656:	e791      	b.n	800057c <__aeabi_fdiv+0xc0>
 8000658:	20ff      	movs	r0, #255	; 0xff
 800065a:	2200      	movs	r2, #0
 800065c:	e78e      	b.n	800057c <__aeabi_fdiv+0xc0>
 800065e:	2280      	movs	r2, #128	; 0x80
 8000660:	2600      	movs	r6, #0
 8000662:	20ff      	movs	r0, #255	; 0xff
 8000664:	03d2      	lsls	r2, r2, #15
 8000666:	e789      	b.n	800057c <__aeabi_fdiv+0xc0>
 8000668:	2300      	movs	r3, #0
 800066a:	4698      	mov	r8, r3
 800066c:	2280      	movs	r2, #128	; 0x80
 800066e:	03d2      	lsls	r2, r2, #15
 8000670:	4215      	tst	r5, r2
 8000672:	d008      	beq.n	8000686 <__aeabi_fdiv+0x1ca>
 8000674:	4643      	mov	r3, r8
 8000676:	4213      	tst	r3, r2
 8000678:	d105      	bne.n	8000686 <__aeabi_fdiv+0x1ca>
 800067a:	431a      	orrs	r2, r3
 800067c:	0252      	lsls	r2, r2, #9
 800067e:	0026      	movs	r6, r4
 8000680:	20ff      	movs	r0, #255	; 0xff
 8000682:	0a52      	lsrs	r2, r2, #9
 8000684:	e77a      	b.n	800057c <__aeabi_fdiv+0xc0>
 8000686:	2280      	movs	r2, #128	; 0x80
 8000688:	03d2      	lsls	r2, r2, #15
 800068a:	432a      	orrs	r2, r5
 800068c:	0252      	lsls	r2, r2, #9
 800068e:	20ff      	movs	r0, #255	; 0xff
 8000690:	0a52      	lsrs	r2, r2, #9
 8000692:	e773      	b.n	800057c <__aeabi_fdiv+0xc0>
 8000694:	4642      	mov	r2, r8
 8000696:	016b      	lsls	r3, r5, #5
 8000698:	0155      	lsls	r5, r2, #5
 800069a:	42ab      	cmp	r3, r5
 800069c:	d21a      	bcs.n	80006d4 <__aeabi_fdiv+0x218>
 800069e:	201b      	movs	r0, #27
 80006a0:	2200      	movs	r2, #0
 80006a2:	3f01      	subs	r7, #1
 80006a4:	2601      	movs	r6, #1
 80006a6:	001c      	movs	r4, r3
 80006a8:	0052      	lsls	r2, r2, #1
 80006aa:	005b      	lsls	r3, r3, #1
 80006ac:	2c00      	cmp	r4, #0
 80006ae:	db01      	blt.n	80006b4 <__aeabi_fdiv+0x1f8>
 80006b0:	429d      	cmp	r5, r3
 80006b2:	d801      	bhi.n	80006b8 <__aeabi_fdiv+0x1fc>
 80006b4:	1b5b      	subs	r3, r3, r5
 80006b6:	4332      	orrs	r2, r6
 80006b8:	3801      	subs	r0, #1
 80006ba:	2800      	cmp	r0, #0
 80006bc:	d1f3      	bne.n	80006a6 <__aeabi_fdiv+0x1ea>
 80006be:	1e58      	subs	r0, r3, #1
 80006c0:	4183      	sbcs	r3, r0
 80006c2:	4313      	orrs	r3, r2
 80006c4:	001d      	movs	r5, r3
 80006c6:	003b      	movs	r3, r7
 80006c8:	337f      	adds	r3, #127	; 0x7f
 80006ca:	000e      	movs	r6, r1
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	dd00      	ble.n	80006d2 <__aeabi_fdiv+0x216>
 80006d0:	e73d      	b.n	800054e <__aeabi_fdiv+0x92>
 80006d2:	e7aa      	b.n	800062a <__aeabi_fdiv+0x16e>
 80006d4:	201a      	movs	r0, #26
 80006d6:	2201      	movs	r2, #1
 80006d8:	1b5b      	subs	r3, r3, r5
 80006da:	e7e3      	b.n	80006a4 <__aeabi_fdiv+0x1e8>
 80006dc:	01aa      	lsls	r2, r5, #6
 80006de:	2000      	movs	r0, #0
 80006e0:	0a52      	lsrs	r2, r2, #9
 80006e2:	e74b      	b.n	800057c <__aeabi_fdiv+0xc0>
 80006e4:	080070cc 	.word	0x080070cc
 80006e8:	f7ffffff 	.word	0xf7ffffff
 80006ec:	0800710c 	.word	0x0800710c

080006f0 <__aeabi_fmul>:
 80006f0:	0243      	lsls	r3, r0, #9
 80006f2:	0a5b      	lsrs	r3, r3, #9
 80006f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006f6:	464f      	mov	r7, r9
 80006f8:	4646      	mov	r6, r8
 80006fa:	4699      	mov	r9, r3
 80006fc:	46d6      	mov	lr, sl
 80006fe:	0fc3      	lsrs	r3, r0, #31
 8000700:	0045      	lsls	r5, r0, #1
 8000702:	4698      	mov	r8, r3
 8000704:	b5c0      	push	{r6, r7, lr}
 8000706:	464b      	mov	r3, r9
 8000708:	1c0f      	adds	r7, r1, #0
 800070a:	0e2d      	lsrs	r5, r5, #24
 800070c:	d100      	bne.n	8000710 <__aeabi_fmul+0x20>
 800070e:	e0cb      	b.n	80008a8 <__aeabi_fmul+0x1b8>
 8000710:	2dff      	cmp	r5, #255	; 0xff
 8000712:	d100      	bne.n	8000716 <__aeabi_fmul+0x26>
 8000714:	e0cf      	b.n	80008b6 <__aeabi_fmul+0x1c6>
 8000716:	2280      	movs	r2, #128	; 0x80
 8000718:	00db      	lsls	r3, r3, #3
 800071a:	04d2      	lsls	r2, r2, #19
 800071c:	431a      	orrs	r2, r3
 800071e:	2300      	movs	r3, #0
 8000720:	4691      	mov	r9, r2
 8000722:	2600      	movs	r6, #0
 8000724:	469a      	mov	sl, r3
 8000726:	3d7f      	subs	r5, #127	; 0x7f
 8000728:	027c      	lsls	r4, r7, #9
 800072a:	007b      	lsls	r3, r7, #1
 800072c:	0a64      	lsrs	r4, r4, #9
 800072e:	0e1b      	lsrs	r3, r3, #24
 8000730:	0fff      	lsrs	r7, r7, #31
 8000732:	2b00      	cmp	r3, #0
 8000734:	d100      	bne.n	8000738 <__aeabi_fmul+0x48>
 8000736:	e0a9      	b.n	800088c <__aeabi_fmul+0x19c>
 8000738:	2bff      	cmp	r3, #255	; 0xff
 800073a:	d011      	beq.n	8000760 <__aeabi_fmul+0x70>
 800073c:	2280      	movs	r2, #128	; 0x80
 800073e:	00e4      	lsls	r4, r4, #3
 8000740:	04d2      	lsls	r2, r2, #19
 8000742:	4314      	orrs	r4, r2
 8000744:	4642      	mov	r2, r8
 8000746:	3b7f      	subs	r3, #127	; 0x7f
 8000748:	195b      	adds	r3, r3, r5
 800074a:	407a      	eors	r2, r7
 800074c:	2000      	movs	r0, #0
 800074e:	b2d2      	uxtb	r2, r2
 8000750:	1c5d      	adds	r5, r3, #1
 8000752:	2e0a      	cmp	r6, #10
 8000754:	dd13      	ble.n	800077e <__aeabi_fmul+0x8e>
 8000756:	003a      	movs	r2, r7
 8000758:	2e0b      	cmp	r6, #11
 800075a:	d047      	beq.n	80007ec <__aeabi_fmul+0xfc>
 800075c:	4647      	mov	r7, r8
 800075e:	e03f      	b.n	80007e0 <__aeabi_fmul+0xf0>
 8000760:	002b      	movs	r3, r5
 8000762:	33ff      	adds	r3, #255	; 0xff
 8000764:	2c00      	cmp	r4, #0
 8000766:	d11e      	bne.n	80007a6 <__aeabi_fmul+0xb6>
 8000768:	2202      	movs	r2, #2
 800076a:	4316      	orrs	r6, r2
 800076c:	4642      	mov	r2, r8
 800076e:	3501      	adds	r5, #1
 8000770:	407a      	eors	r2, r7
 8000772:	b2d2      	uxtb	r2, r2
 8000774:	35ff      	adds	r5, #255	; 0xff
 8000776:	2e0a      	cmp	r6, #10
 8000778:	dd00      	ble.n	800077c <__aeabi_fmul+0x8c>
 800077a:	e0e4      	b.n	8000946 <__aeabi_fmul+0x256>
 800077c:	2002      	movs	r0, #2
 800077e:	2e02      	cmp	r6, #2
 8000780:	dc1c      	bgt.n	80007bc <__aeabi_fmul+0xcc>
 8000782:	3e01      	subs	r6, #1
 8000784:	2e01      	cmp	r6, #1
 8000786:	d842      	bhi.n	800080e <__aeabi_fmul+0x11e>
 8000788:	2802      	cmp	r0, #2
 800078a:	d03d      	beq.n	8000808 <__aeabi_fmul+0x118>
 800078c:	2801      	cmp	r0, #1
 800078e:	d166      	bne.n	800085e <__aeabi_fmul+0x16e>
 8000790:	2000      	movs	r0, #0
 8000792:	2100      	movs	r1, #0
 8000794:	05c0      	lsls	r0, r0, #23
 8000796:	4308      	orrs	r0, r1
 8000798:	07d2      	lsls	r2, r2, #31
 800079a:	4310      	orrs	r0, r2
 800079c:	bce0      	pop	{r5, r6, r7}
 800079e:	46ba      	mov	sl, r7
 80007a0:	46b1      	mov	r9, r6
 80007a2:	46a8      	mov	r8, r5
 80007a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007a6:	2203      	movs	r2, #3
 80007a8:	4316      	orrs	r6, r2
 80007aa:	4642      	mov	r2, r8
 80007ac:	3501      	adds	r5, #1
 80007ae:	407a      	eors	r2, r7
 80007b0:	b2d2      	uxtb	r2, r2
 80007b2:	35ff      	adds	r5, #255	; 0xff
 80007b4:	2e0a      	cmp	r6, #10
 80007b6:	dd00      	ble.n	80007ba <__aeabi_fmul+0xca>
 80007b8:	e0e4      	b.n	8000984 <__aeabi_fmul+0x294>
 80007ba:	2003      	movs	r0, #3
 80007bc:	2101      	movs	r1, #1
 80007be:	40b1      	lsls	r1, r6
 80007c0:	26a6      	movs	r6, #166	; 0xa6
 80007c2:	00f6      	lsls	r6, r6, #3
 80007c4:	4231      	tst	r1, r6
 80007c6:	d10a      	bne.n	80007de <__aeabi_fmul+0xee>
 80007c8:	2690      	movs	r6, #144	; 0x90
 80007ca:	00b6      	lsls	r6, r6, #2
 80007cc:	4231      	tst	r1, r6
 80007ce:	d116      	bne.n	80007fe <__aeabi_fmul+0x10e>
 80007d0:	3eb9      	subs	r6, #185	; 0xb9
 80007d2:	3eff      	subs	r6, #255	; 0xff
 80007d4:	420e      	tst	r6, r1
 80007d6:	d01a      	beq.n	800080e <__aeabi_fmul+0x11e>
 80007d8:	46a1      	mov	r9, r4
 80007da:	4682      	mov	sl, r0
 80007dc:	e000      	b.n	80007e0 <__aeabi_fmul+0xf0>
 80007de:	0017      	movs	r7, r2
 80007e0:	4653      	mov	r3, sl
 80007e2:	003a      	movs	r2, r7
 80007e4:	2b02      	cmp	r3, #2
 80007e6:	d00f      	beq.n	8000808 <__aeabi_fmul+0x118>
 80007e8:	464c      	mov	r4, r9
 80007ea:	4650      	mov	r0, sl
 80007ec:	2803      	cmp	r0, #3
 80007ee:	d1cd      	bne.n	800078c <__aeabi_fmul+0x9c>
 80007f0:	2180      	movs	r1, #128	; 0x80
 80007f2:	03c9      	lsls	r1, r1, #15
 80007f4:	4321      	orrs	r1, r4
 80007f6:	0249      	lsls	r1, r1, #9
 80007f8:	20ff      	movs	r0, #255	; 0xff
 80007fa:	0a49      	lsrs	r1, r1, #9
 80007fc:	e7ca      	b.n	8000794 <__aeabi_fmul+0xa4>
 80007fe:	2180      	movs	r1, #128	; 0x80
 8000800:	2200      	movs	r2, #0
 8000802:	20ff      	movs	r0, #255	; 0xff
 8000804:	03c9      	lsls	r1, r1, #15
 8000806:	e7c5      	b.n	8000794 <__aeabi_fmul+0xa4>
 8000808:	20ff      	movs	r0, #255	; 0xff
 800080a:	2100      	movs	r1, #0
 800080c:	e7c2      	b.n	8000794 <__aeabi_fmul+0xa4>
 800080e:	0c20      	lsrs	r0, r4, #16
 8000810:	4649      	mov	r1, r9
 8000812:	0424      	lsls	r4, r4, #16
 8000814:	0c24      	lsrs	r4, r4, #16
 8000816:	0027      	movs	r7, r4
 8000818:	0c0e      	lsrs	r6, r1, #16
 800081a:	0409      	lsls	r1, r1, #16
 800081c:	0c09      	lsrs	r1, r1, #16
 800081e:	4374      	muls	r4, r6
 8000820:	434f      	muls	r7, r1
 8000822:	4346      	muls	r6, r0
 8000824:	4348      	muls	r0, r1
 8000826:	0c39      	lsrs	r1, r7, #16
 8000828:	1900      	adds	r0, r0, r4
 800082a:	1809      	adds	r1, r1, r0
 800082c:	428c      	cmp	r4, r1
 800082e:	d903      	bls.n	8000838 <__aeabi_fmul+0x148>
 8000830:	2080      	movs	r0, #128	; 0x80
 8000832:	0240      	lsls	r0, r0, #9
 8000834:	4684      	mov	ip, r0
 8000836:	4466      	add	r6, ip
 8000838:	043f      	lsls	r7, r7, #16
 800083a:	0408      	lsls	r0, r1, #16
 800083c:	0c3f      	lsrs	r7, r7, #16
 800083e:	19c0      	adds	r0, r0, r7
 8000840:	0184      	lsls	r4, r0, #6
 8000842:	1e67      	subs	r7, r4, #1
 8000844:	41bc      	sbcs	r4, r7
 8000846:	0c09      	lsrs	r1, r1, #16
 8000848:	0e80      	lsrs	r0, r0, #26
 800084a:	1989      	adds	r1, r1, r6
 800084c:	4304      	orrs	r4, r0
 800084e:	0189      	lsls	r1, r1, #6
 8000850:	430c      	orrs	r4, r1
 8000852:	0109      	lsls	r1, r1, #4
 8000854:	d571      	bpl.n	800093a <__aeabi_fmul+0x24a>
 8000856:	2301      	movs	r3, #1
 8000858:	0861      	lsrs	r1, r4, #1
 800085a:	401c      	ands	r4, r3
 800085c:	430c      	orrs	r4, r1
 800085e:	002b      	movs	r3, r5
 8000860:	337f      	adds	r3, #127	; 0x7f
 8000862:	2b00      	cmp	r3, #0
 8000864:	dd51      	ble.n	800090a <__aeabi_fmul+0x21a>
 8000866:	0761      	lsls	r1, r4, #29
 8000868:	d004      	beq.n	8000874 <__aeabi_fmul+0x184>
 800086a:	210f      	movs	r1, #15
 800086c:	4021      	ands	r1, r4
 800086e:	2904      	cmp	r1, #4
 8000870:	d000      	beq.n	8000874 <__aeabi_fmul+0x184>
 8000872:	3404      	adds	r4, #4
 8000874:	0121      	lsls	r1, r4, #4
 8000876:	d503      	bpl.n	8000880 <__aeabi_fmul+0x190>
 8000878:	4b43      	ldr	r3, [pc, #268]	; (8000988 <__aeabi_fmul+0x298>)
 800087a:	401c      	ands	r4, r3
 800087c:	002b      	movs	r3, r5
 800087e:	3380      	adds	r3, #128	; 0x80
 8000880:	2bfe      	cmp	r3, #254	; 0xfe
 8000882:	dcc1      	bgt.n	8000808 <__aeabi_fmul+0x118>
 8000884:	01a1      	lsls	r1, r4, #6
 8000886:	0a49      	lsrs	r1, r1, #9
 8000888:	b2d8      	uxtb	r0, r3
 800088a:	e783      	b.n	8000794 <__aeabi_fmul+0xa4>
 800088c:	2c00      	cmp	r4, #0
 800088e:	d12c      	bne.n	80008ea <__aeabi_fmul+0x1fa>
 8000890:	2301      	movs	r3, #1
 8000892:	4642      	mov	r2, r8
 8000894:	431e      	orrs	r6, r3
 8000896:	002b      	movs	r3, r5
 8000898:	407a      	eors	r2, r7
 800089a:	2001      	movs	r0, #1
 800089c:	b2d2      	uxtb	r2, r2
 800089e:	1c5d      	adds	r5, r3, #1
 80008a0:	2e0a      	cmp	r6, #10
 80008a2:	dd00      	ble.n	80008a6 <__aeabi_fmul+0x1b6>
 80008a4:	e757      	b.n	8000756 <__aeabi_fmul+0x66>
 80008a6:	e76a      	b.n	800077e <__aeabi_fmul+0x8e>
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d110      	bne.n	80008ce <__aeabi_fmul+0x1de>
 80008ac:	2301      	movs	r3, #1
 80008ae:	2604      	movs	r6, #4
 80008b0:	2500      	movs	r5, #0
 80008b2:	469a      	mov	sl, r3
 80008b4:	e738      	b.n	8000728 <__aeabi_fmul+0x38>
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d104      	bne.n	80008c4 <__aeabi_fmul+0x1d4>
 80008ba:	2302      	movs	r3, #2
 80008bc:	2608      	movs	r6, #8
 80008be:	25ff      	movs	r5, #255	; 0xff
 80008c0:	469a      	mov	sl, r3
 80008c2:	e731      	b.n	8000728 <__aeabi_fmul+0x38>
 80008c4:	2303      	movs	r3, #3
 80008c6:	260c      	movs	r6, #12
 80008c8:	25ff      	movs	r5, #255	; 0xff
 80008ca:	469a      	mov	sl, r3
 80008cc:	e72c      	b.n	8000728 <__aeabi_fmul+0x38>
 80008ce:	4648      	mov	r0, r9
 80008d0:	f000 fa9e 	bl	8000e10 <__clzsi2>
 80008d4:	464a      	mov	r2, r9
 80008d6:	1f43      	subs	r3, r0, #5
 80008d8:	2576      	movs	r5, #118	; 0x76
 80008da:	409a      	lsls	r2, r3
 80008dc:	2300      	movs	r3, #0
 80008de:	426d      	negs	r5, r5
 80008e0:	4691      	mov	r9, r2
 80008e2:	2600      	movs	r6, #0
 80008e4:	469a      	mov	sl, r3
 80008e6:	1a2d      	subs	r5, r5, r0
 80008e8:	e71e      	b.n	8000728 <__aeabi_fmul+0x38>
 80008ea:	0020      	movs	r0, r4
 80008ec:	f000 fa90 	bl	8000e10 <__clzsi2>
 80008f0:	4642      	mov	r2, r8
 80008f2:	1f43      	subs	r3, r0, #5
 80008f4:	409c      	lsls	r4, r3
 80008f6:	1a2b      	subs	r3, r5, r0
 80008f8:	3b76      	subs	r3, #118	; 0x76
 80008fa:	407a      	eors	r2, r7
 80008fc:	2000      	movs	r0, #0
 80008fe:	b2d2      	uxtb	r2, r2
 8000900:	1c5d      	adds	r5, r3, #1
 8000902:	2e0a      	cmp	r6, #10
 8000904:	dd00      	ble.n	8000908 <__aeabi_fmul+0x218>
 8000906:	e726      	b.n	8000756 <__aeabi_fmul+0x66>
 8000908:	e739      	b.n	800077e <__aeabi_fmul+0x8e>
 800090a:	2101      	movs	r1, #1
 800090c:	1acb      	subs	r3, r1, r3
 800090e:	2b1b      	cmp	r3, #27
 8000910:	dd00      	ble.n	8000914 <__aeabi_fmul+0x224>
 8000912:	e73d      	b.n	8000790 <__aeabi_fmul+0xa0>
 8000914:	359e      	adds	r5, #158	; 0x9e
 8000916:	0021      	movs	r1, r4
 8000918:	40ac      	lsls	r4, r5
 800091a:	40d9      	lsrs	r1, r3
 800091c:	1e63      	subs	r3, r4, #1
 800091e:	419c      	sbcs	r4, r3
 8000920:	4321      	orrs	r1, r4
 8000922:	074b      	lsls	r3, r1, #29
 8000924:	d004      	beq.n	8000930 <__aeabi_fmul+0x240>
 8000926:	230f      	movs	r3, #15
 8000928:	400b      	ands	r3, r1
 800092a:	2b04      	cmp	r3, #4
 800092c:	d000      	beq.n	8000930 <__aeabi_fmul+0x240>
 800092e:	3104      	adds	r1, #4
 8000930:	014b      	lsls	r3, r1, #5
 8000932:	d504      	bpl.n	800093e <__aeabi_fmul+0x24e>
 8000934:	2001      	movs	r0, #1
 8000936:	2100      	movs	r1, #0
 8000938:	e72c      	b.n	8000794 <__aeabi_fmul+0xa4>
 800093a:	001d      	movs	r5, r3
 800093c:	e78f      	b.n	800085e <__aeabi_fmul+0x16e>
 800093e:	0189      	lsls	r1, r1, #6
 8000940:	2000      	movs	r0, #0
 8000942:	0a49      	lsrs	r1, r1, #9
 8000944:	e726      	b.n	8000794 <__aeabi_fmul+0xa4>
 8000946:	2302      	movs	r3, #2
 8000948:	2e0f      	cmp	r6, #15
 800094a:	d10c      	bne.n	8000966 <__aeabi_fmul+0x276>
 800094c:	2180      	movs	r1, #128	; 0x80
 800094e:	464b      	mov	r3, r9
 8000950:	03c9      	lsls	r1, r1, #15
 8000952:	420b      	tst	r3, r1
 8000954:	d00d      	beq.n	8000972 <__aeabi_fmul+0x282>
 8000956:	420c      	tst	r4, r1
 8000958:	d10b      	bne.n	8000972 <__aeabi_fmul+0x282>
 800095a:	4321      	orrs	r1, r4
 800095c:	0249      	lsls	r1, r1, #9
 800095e:	003a      	movs	r2, r7
 8000960:	20ff      	movs	r0, #255	; 0xff
 8000962:	0a49      	lsrs	r1, r1, #9
 8000964:	e716      	b.n	8000794 <__aeabi_fmul+0xa4>
 8000966:	2e0b      	cmp	r6, #11
 8000968:	d000      	beq.n	800096c <__aeabi_fmul+0x27c>
 800096a:	e6f7      	b.n	800075c <__aeabi_fmul+0x6c>
 800096c:	46a1      	mov	r9, r4
 800096e:	469a      	mov	sl, r3
 8000970:	e736      	b.n	80007e0 <__aeabi_fmul+0xf0>
 8000972:	2180      	movs	r1, #128	; 0x80
 8000974:	464b      	mov	r3, r9
 8000976:	03c9      	lsls	r1, r1, #15
 8000978:	4319      	orrs	r1, r3
 800097a:	0249      	lsls	r1, r1, #9
 800097c:	4642      	mov	r2, r8
 800097e:	20ff      	movs	r0, #255	; 0xff
 8000980:	0a49      	lsrs	r1, r1, #9
 8000982:	e707      	b.n	8000794 <__aeabi_fmul+0xa4>
 8000984:	2303      	movs	r3, #3
 8000986:	e7df      	b.n	8000948 <__aeabi_fmul+0x258>
 8000988:	f7ffffff 	.word	0xf7ffffff

0800098c <__aeabi_fsub>:
 800098c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800098e:	46c6      	mov	lr, r8
 8000990:	0243      	lsls	r3, r0, #9
 8000992:	0a5b      	lsrs	r3, r3, #9
 8000994:	0045      	lsls	r5, r0, #1
 8000996:	00da      	lsls	r2, r3, #3
 8000998:	0fc4      	lsrs	r4, r0, #31
 800099a:	0248      	lsls	r0, r1, #9
 800099c:	004f      	lsls	r7, r1, #1
 800099e:	4694      	mov	ip, r2
 80009a0:	0a42      	lsrs	r2, r0, #9
 80009a2:	001e      	movs	r6, r3
 80009a4:	4690      	mov	r8, r2
 80009a6:	b500      	push	{lr}
 80009a8:	0e2d      	lsrs	r5, r5, #24
 80009aa:	0e3f      	lsrs	r7, r7, #24
 80009ac:	0fc9      	lsrs	r1, r1, #31
 80009ae:	0980      	lsrs	r0, r0, #6
 80009b0:	2fff      	cmp	r7, #255	; 0xff
 80009b2:	d059      	beq.n	8000a68 <__aeabi_fsub+0xdc>
 80009b4:	2201      	movs	r2, #1
 80009b6:	4051      	eors	r1, r2
 80009b8:	428c      	cmp	r4, r1
 80009ba:	d039      	beq.n	8000a30 <__aeabi_fsub+0xa4>
 80009bc:	1bea      	subs	r2, r5, r7
 80009be:	2a00      	cmp	r2, #0
 80009c0:	dd58      	ble.n	8000a74 <__aeabi_fsub+0xe8>
 80009c2:	2f00      	cmp	r7, #0
 80009c4:	d068      	beq.n	8000a98 <__aeabi_fsub+0x10c>
 80009c6:	2dff      	cmp	r5, #255	; 0xff
 80009c8:	d100      	bne.n	80009cc <__aeabi_fsub+0x40>
 80009ca:	e0d1      	b.n	8000b70 <__aeabi_fsub+0x1e4>
 80009cc:	2380      	movs	r3, #128	; 0x80
 80009ce:	04db      	lsls	r3, r3, #19
 80009d0:	4318      	orrs	r0, r3
 80009d2:	2a1b      	cmp	r2, #27
 80009d4:	dc00      	bgt.n	80009d8 <__aeabi_fsub+0x4c>
 80009d6:	e0e3      	b.n	8000ba0 <__aeabi_fsub+0x214>
 80009d8:	2301      	movs	r3, #1
 80009da:	4662      	mov	r2, ip
 80009dc:	1ad3      	subs	r3, r2, r3
 80009de:	015a      	lsls	r2, r3, #5
 80009e0:	d400      	bmi.n	80009e4 <__aeabi_fsub+0x58>
 80009e2:	e0ac      	b.n	8000b3e <__aeabi_fsub+0x1b2>
 80009e4:	019b      	lsls	r3, r3, #6
 80009e6:	099e      	lsrs	r6, r3, #6
 80009e8:	0030      	movs	r0, r6
 80009ea:	f000 fa11 	bl	8000e10 <__clzsi2>
 80009ee:	0033      	movs	r3, r6
 80009f0:	3805      	subs	r0, #5
 80009f2:	4083      	lsls	r3, r0
 80009f4:	4285      	cmp	r5, r0
 80009f6:	dc00      	bgt.n	80009fa <__aeabi_fsub+0x6e>
 80009f8:	e0c6      	b.n	8000b88 <__aeabi_fsub+0x1fc>
 80009fa:	4ab2      	ldr	r2, [pc, #712]	; (8000cc4 <__aeabi_fsub+0x338>)
 80009fc:	1a2d      	subs	r5, r5, r0
 80009fe:	4013      	ands	r3, r2
 8000a00:	075a      	lsls	r2, r3, #29
 8000a02:	d004      	beq.n	8000a0e <__aeabi_fsub+0x82>
 8000a04:	220f      	movs	r2, #15
 8000a06:	401a      	ands	r2, r3
 8000a08:	2a04      	cmp	r2, #4
 8000a0a:	d000      	beq.n	8000a0e <__aeabi_fsub+0x82>
 8000a0c:	3304      	adds	r3, #4
 8000a0e:	015a      	lsls	r2, r3, #5
 8000a10:	d400      	bmi.n	8000a14 <__aeabi_fsub+0x88>
 8000a12:	e097      	b.n	8000b44 <__aeabi_fsub+0x1b8>
 8000a14:	1c6a      	adds	r2, r5, #1
 8000a16:	2dfe      	cmp	r5, #254	; 0xfe
 8000a18:	d100      	bne.n	8000a1c <__aeabi_fsub+0x90>
 8000a1a:	e084      	b.n	8000b26 <__aeabi_fsub+0x19a>
 8000a1c:	019b      	lsls	r3, r3, #6
 8000a1e:	0a5e      	lsrs	r6, r3, #9
 8000a20:	b2d2      	uxtb	r2, r2
 8000a22:	05d0      	lsls	r0, r2, #23
 8000a24:	4330      	orrs	r0, r6
 8000a26:	07e4      	lsls	r4, r4, #31
 8000a28:	4320      	orrs	r0, r4
 8000a2a:	bc80      	pop	{r7}
 8000a2c:	46b8      	mov	r8, r7
 8000a2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a30:	1bea      	subs	r2, r5, r7
 8000a32:	2a00      	cmp	r2, #0
 8000a34:	dd41      	ble.n	8000aba <__aeabi_fsub+0x12e>
 8000a36:	2f00      	cmp	r7, #0
 8000a38:	d06b      	beq.n	8000b12 <__aeabi_fsub+0x186>
 8000a3a:	2dff      	cmp	r5, #255	; 0xff
 8000a3c:	d100      	bne.n	8000a40 <__aeabi_fsub+0xb4>
 8000a3e:	e097      	b.n	8000b70 <__aeabi_fsub+0x1e4>
 8000a40:	2380      	movs	r3, #128	; 0x80
 8000a42:	04db      	lsls	r3, r3, #19
 8000a44:	4318      	orrs	r0, r3
 8000a46:	2a1b      	cmp	r2, #27
 8000a48:	dc00      	bgt.n	8000a4c <__aeabi_fsub+0xc0>
 8000a4a:	e0cc      	b.n	8000be6 <__aeabi_fsub+0x25a>
 8000a4c:	2301      	movs	r3, #1
 8000a4e:	4463      	add	r3, ip
 8000a50:	015a      	lsls	r2, r3, #5
 8000a52:	d574      	bpl.n	8000b3e <__aeabi_fsub+0x1b2>
 8000a54:	3501      	adds	r5, #1
 8000a56:	2dff      	cmp	r5, #255	; 0xff
 8000a58:	d065      	beq.n	8000b26 <__aeabi_fsub+0x19a>
 8000a5a:	2201      	movs	r2, #1
 8000a5c:	499a      	ldr	r1, [pc, #616]	; (8000cc8 <__aeabi_fsub+0x33c>)
 8000a5e:	401a      	ands	r2, r3
 8000a60:	085b      	lsrs	r3, r3, #1
 8000a62:	400b      	ands	r3, r1
 8000a64:	4313      	orrs	r3, r2
 8000a66:	e7cb      	b.n	8000a00 <__aeabi_fsub+0x74>
 8000a68:	2800      	cmp	r0, #0
 8000a6a:	d01f      	beq.n	8000aac <__aeabi_fsub+0x120>
 8000a6c:	428c      	cmp	r4, r1
 8000a6e:	d022      	beq.n	8000ab6 <__aeabi_fsub+0x12a>
 8000a70:	002a      	movs	r2, r5
 8000a72:	3aff      	subs	r2, #255	; 0xff
 8000a74:	2a00      	cmp	r2, #0
 8000a76:	d035      	beq.n	8000ae4 <__aeabi_fsub+0x158>
 8000a78:	1b7a      	subs	r2, r7, r5
 8000a7a:	2d00      	cmp	r5, #0
 8000a7c:	d000      	beq.n	8000a80 <__aeabi_fsub+0xf4>
 8000a7e:	e099      	b.n	8000bb4 <__aeabi_fsub+0x228>
 8000a80:	4663      	mov	r3, ip
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d100      	bne.n	8000a88 <__aeabi_fsub+0xfc>
 8000a86:	e0dd      	b.n	8000c44 <__aeabi_fsub+0x2b8>
 8000a88:	1e53      	subs	r3, r2, #1
 8000a8a:	2a01      	cmp	r2, #1
 8000a8c:	d100      	bne.n	8000a90 <__aeabi_fsub+0x104>
 8000a8e:	e105      	b.n	8000c9c <__aeabi_fsub+0x310>
 8000a90:	2aff      	cmp	r2, #255	; 0xff
 8000a92:	d06b      	beq.n	8000b6c <__aeabi_fsub+0x1e0>
 8000a94:	001a      	movs	r2, r3
 8000a96:	e094      	b.n	8000bc2 <__aeabi_fsub+0x236>
 8000a98:	2800      	cmp	r0, #0
 8000a9a:	d073      	beq.n	8000b84 <__aeabi_fsub+0x1f8>
 8000a9c:	1e51      	subs	r1, r2, #1
 8000a9e:	2a01      	cmp	r2, #1
 8000aa0:	d100      	bne.n	8000aa4 <__aeabi_fsub+0x118>
 8000aa2:	e0df      	b.n	8000c64 <__aeabi_fsub+0x2d8>
 8000aa4:	2aff      	cmp	r2, #255	; 0xff
 8000aa6:	d063      	beq.n	8000b70 <__aeabi_fsub+0x1e4>
 8000aa8:	000a      	movs	r2, r1
 8000aaa:	e792      	b.n	80009d2 <__aeabi_fsub+0x46>
 8000aac:	2201      	movs	r2, #1
 8000aae:	4051      	eors	r1, r2
 8000ab0:	42a1      	cmp	r1, r4
 8000ab2:	d000      	beq.n	8000ab6 <__aeabi_fsub+0x12a>
 8000ab4:	e782      	b.n	80009bc <__aeabi_fsub+0x30>
 8000ab6:	002a      	movs	r2, r5
 8000ab8:	3aff      	subs	r2, #255	; 0xff
 8000aba:	2a00      	cmp	r2, #0
 8000abc:	d036      	beq.n	8000b2c <__aeabi_fsub+0x1a0>
 8000abe:	1b7a      	subs	r2, r7, r5
 8000ac0:	2d00      	cmp	r5, #0
 8000ac2:	d100      	bne.n	8000ac6 <__aeabi_fsub+0x13a>
 8000ac4:	e0aa      	b.n	8000c1c <__aeabi_fsub+0x290>
 8000ac6:	2fff      	cmp	r7, #255	; 0xff
 8000ac8:	d100      	bne.n	8000acc <__aeabi_fsub+0x140>
 8000aca:	e0da      	b.n	8000c82 <__aeabi_fsub+0x2f6>
 8000acc:	2380      	movs	r3, #128	; 0x80
 8000ace:	4661      	mov	r1, ip
 8000ad0:	04db      	lsls	r3, r3, #19
 8000ad2:	4319      	orrs	r1, r3
 8000ad4:	468c      	mov	ip, r1
 8000ad6:	2a1b      	cmp	r2, #27
 8000ad8:	dc00      	bgt.n	8000adc <__aeabi_fsub+0x150>
 8000ada:	e0d4      	b.n	8000c86 <__aeabi_fsub+0x2fa>
 8000adc:	2301      	movs	r3, #1
 8000ade:	003d      	movs	r5, r7
 8000ae0:	181b      	adds	r3, r3, r0
 8000ae2:	e7b5      	b.n	8000a50 <__aeabi_fsub+0xc4>
 8000ae4:	27fe      	movs	r7, #254	; 0xfe
 8000ae6:	1c6a      	adds	r2, r5, #1
 8000ae8:	4217      	tst	r7, r2
 8000aea:	d171      	bne.n	8000bd0 <__aeabi_fsub+0x244>
 8000aec:	2d00      	cmp	r5, #0
 8000aee:	d000      	beq.n	8000af2 <__aeabi_fsub+0x166>
 8000af0:	e09e      	b.n	8000c30 <__aeabi_fsub+0x2a4>
 8000af2:	4663      	mov	r3, ip
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d100      	bne.n	8000afa <__aeabi_fsub+0x16e>
 8000af8:	e0d5      	b.n	8000ca6 <__aeabi_fsub+0x31a>
 8000afa:	2200      	movs	r2, #0
 8000afc:	2800      	cmp	r0, #0
 8000afe:	d100      	bne.n	8000b02 <__aeabi_fsub+0x176>
 8000b00:	e78f      	b.n	8000a22 <__aeabi_fsub+0x96>
 8000b02:	1a1b      	subs	r3, r3, r0
 8000b04:	015e      	lsls	r6, r3, #5
 8000b06:	d400      	bmi.n	8000b0a <__aeabi_fsub+0x17e>
 8000b08:	e0d6      	b.n	8000cb8 <__aeabi_fsub+0x32c>
 8000b0a:	4663      	mov	r3, ip
 8000b0c:	000c      	movs	r4, r1
 8000b0e:	1ac3      	subs	r3, r0, r3
 8000b10:	e776      	b.n	8000a00 <__aeabi_fsub+0x74>
 8000b12:	2800      	cmp	r0, #0
 8000b14:	d036      	beq.n	8000b84 <__aeabi_fsub+0x1f8>
 8000b16:	1e51      	subs	r1, r2, #1
 8000b18:	2a01      	cmp	r2, #1
 8000b1a:	d100      	bne.n	8000b1e <__aeabi_fsub+0x192>
 8000b1c:	e09a      	b.n	8000c54 <__aeabi_fsub+0x2c8>
 8000b1e:	2aff      	cmp	r2, #255	; 0xff
 8000b20:	d026      	beq.n	8000b70 <__aeabi_fsub+0x1e4>
 8000b22:	000a      	movs	r2, r1
 8000b24:	e78f      	b.n	8000a46 <__aeabi_fsub+0xba>
 8000b26:	22ff      	movs	r2, #255	; 0xff
 8000b28:	2600      	movs	r6, #0
 8000b2a:	e77a      	b.n	8000a22 <__aeabi_fsub+0x96>
 8000b2c:	27fe      	movs	r7, #254	; 0xfe
 8000b2e:	1c6a      	adds	r2, r5, #1
 8000b30:	4217      	tst	r7, r2
 8000b32:	d062      	beq.n	8000bfa <__aeabi_fsub+0x26e>
 8000b34:	2aff      	cmp	r2, #255	; 0xff
 8000b36:	d0f6      	beq.n	8000b26 <__aeabi_fsub+0x19a>
 8000b38:	0015      	movs	r5, r2
 8000b3a:	4460      	add	r0, ip
 8000b3c:	0843      	lsrs	r3, r0, #1
 8000b3e:	075a      	lsls	r2, r3, #29
 8000b40:	d000      	beq.n	8000b44 <__aeabi_fsub+0x1b8>
 8000b42:	e75f      	b.n	8000a04 <__aeabi_fsub+0x78>
 8000b44:	08db      	lsrs	r3, r3, #3
 8000b46:	2dff      	cmp	r5, #255	; 0xff
 8000b48:	d012      	beq.n	8000b70 <__aeabi_fsub+0x1e4>
 8000b4a:	025b      	lsls	r3, r3, #9
 8000b4c:	0a5e      	lsrs	r6, r3, #9
 8000b4e:	b2ea      	uxtb	r2, r5
 8000b50:	e767      	b.n	8000a22 <__aeabi_fsub+0x96>
 8000b52:	4662      	mov	r2, ip
 8000b54:	2a00      	cmp	r2, #0
 8000b56:	d100      	bne.n	8000b5a <__aeabi_fsub+0x1ce>
 8000b58:	e093      	b.n	8000c82 <__aeabi_fsub+0x2f6>
 8000b5a:	2800      	cmp	r0, #0
 8000b5c:	d008      	beq.n	8000b70 <__aeabi_fsub+0x1e4>
 8000b5e:	2280      	movs	r2, #128	; 0x80
 8000b60:	03d2      	lsls	r2, r2, #15
 8000b62:	4213      	tst	r3, r2
 8000b64:	d004      	beq.n	8000b70 <__aeabi_fsub+0x1e4>
 8000b66:	4640      	mov	r0, r8
 8000b68:	4210      	tst	r0, r2
 8000b6a:	d101      	bne.n	8000b70 <__aeabi_fsub+0x1e4>
 8000b6c:	000c      	movs	r4, r1
 8000b6e:	4643      	mov	r3, r8
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d0d8      	beq.n	8000b26 <__aeabi_fsub+0x19a>
 8000b74:	2680      	movs	r6, #128	; 0x80
 8000b76:	03f6      	lsls	r6, r6, #15
 8000b78:	431e      	orrs	r6, r3
 8000b7a:	0276      	lsls	r6, r6, #9
 8000b7c:	22ff      	movs	r2, #255	; 0xff
 8000b7e:	0a76      	lsrs	r6, r6, #9
 8000b80:	e74f      	b.n	8000a22 <__aeabi_fsub+0x96>
 8000b82:	4643      	mov	r3, r8
 8000b84:	0015      	movs	r5, r2
 8000b86:	e7de      	b.n	8000b46 <__aeabi_fsub+0x1ba>
 8000b88:	2220      	movs	r2, #32
 8000b8a:	1b40      	subs	r0, r0, r5
 8000b8c:	3001      	adds	r0, #1
 8000b8e:	1a12      	subs	r2, r2, r0
 8000b90:	0019      	movs	r1, r3
 8000b92:	4093      	lsls	r3, r2
 8000b94:	40c1      	lsrs	r1, r0
 8000b96:	1e5a      	subs	r2, r3, #1
 8000b98:	4193      	sbcs	r3, r2
 8000b9a:	2500      	movs	r5, #0
 8000b9c:	430b      	orrs	r3, r1
 8000b9e:	e72f      	b.n	8000a00 <__aeabi_fsub+0x74>
 8000ba0:	2320      	movs	r3, #32
 8000ba2:	1a9b      	subs	r3, r3, r2
 8000ba4:	0001      	movs	r1, r0
 8000ba6:	4098      	lsls	r0, r3
 8000ba8:	0003      	movs	r3, r0
 8000baa:	40d1      	lsrs	r1, r2
 8000bac:	1e5a      	subs	r2, r3, #1
 8000bae:	4193      	sbcs	r3, r2
 8000bb0:	430b      	orrs	r3, r1
 8000bb2:	e712      	b.n	80009da <__aeabi_fsub+0x4e>
 8000bb4:	2fff      	cmp	r7, #255	; 0xff
 8000bb6:	d0d9      	beq.n	8000b6c <__aeabi_fsub+0x1e0>
 8000bb8:	2380      	movs	r3, #128	; 0x80
 8000bba:	4664      	mov	r4, ip
 8000bbc:	04db      	lsls	r3, r3, #19
 8000bbe:	431c      	orrs	r4, r3
 8000bc0:	46a4      	mov	ip, r4
 8000bc2:	2a1b      	cmp	r2, #27
 8000bc4:	dd52      	ble.n	8000c6c <__aeabi_fsub+0x2e0>
 8000bc6:	2301      	movs	r3, #1
 8000bc8:	000c      	movs	r4, r1
 8000bca:	003d      	movs	r5, r7
 8000bcc:	1ac3      	subs	r3, r0, r3
 8000bce:	e706      	b.n	80009de <__aeabi_fsub+0x52>
 8000bd0:	4663      	mov	r3, ip
 8000bd2:	1a1e      	subs	r6, r3, r0
 8000bd4:	0173      	lsls	r3, r6, #5
 8000bd6:	d439      	bmi.n	8000c4c <__aeabi_fsub+0x2c0>
 8000bd8:	2e00      	cmp	r6, #0
 8000bda:	d000      	beq.n	8000bde <__aeabi_fsub+0x252>
 8000bdc:	e704      	b.n	80009e8 <__aeabi_fsub+0x5c>
 8000bde:	2400      	movs	r4, #0
 8000be0:	2200      	movs	r2, #0
 8000be2:	2600      	movs	r6, #0
 8000be4:	e71d      	b.n	8000a22 <__aeabi_fsub+0x96>
 8000be6:	2320      	movs	r3, #32
 8000be8:	1a9b      	subs	r3, r3, r2
 8000bea:	0001      	movs	r1, r0
 8000bec:	4098      	lsls	r0, r3
 8000bee:	0003      	movs	r3, r0
 8000bf0:	40d1      	lsrs	r1, r2
 8000bf2:	1e5a      	subs	r2, r3, #1
 8000bf4:	4193      	sbcs	r3, r2
 8000bf6:	430b      	orrs	r3, r1
 8000bf8:	e729      	b.n	8000a4e <__aeabi_fsub+0xc2>
 8000bfa:	2d00      	cmp	r5, #0
 8000bfc:	d1a9      	bne.n	8000b52 <__aeabi_fsub+0x1c6>
 8000bfe:	4663      	mov	r3, ip
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d056      	beq.n	8000cb2 <__aeabi_fsub+0x326>
 8000c04:	2200      	movs	r2, #0
 8000c06:	2800      	cmp	r0, #0
 8000c08:	d100      	bne.n	8000c0c <__aeabi_fsub+0x280>
 8000c0a:	e70a      	b.n	8000a22 <__aeabi_fsub+0x96>
 8000c0c:	0003      	movs	r3, r0
 8000c0e:	4463      	add	r3, ip
 8000c10:	015a      	lsls	r2, r3, #5
 8000c12:	d594      	bpl.n	8000b3e <__aeabi_fsub+0x1b2>
 8000c14:	4a2b      	ldr	r2, [pc, #172]	; (8000cc4 <__aeabi_fsub+0x338>)
 8000c16:	3501      	adds	r5, #1
 8000c18:	4013      	ands	r3, r2
 8000c1a:	e790      	b.n	8000b3e <__aeabi_fsub+0x1b2>
 8000c1c:	4663      	mov	r3, ip
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d0af      	beq.n	8000b82 <__aeabi_fsub+0x1f6>
 8000c22:	1e53      	subs	r3, r2, #1
 8000c24:	2a01      	cmp	r2, #1
 8000c26:	d015      	beq.n	8000c54 <__aeabi_fsub+0x2c8>
 8000c28:	2aff      	cmp	r2, #255	; 0xff
 8000c2a:	d02a      	beq.n	8000c82 <__aeabi_fsub+0x2f6>
 8000c2c:	001a      	movs	r2, r3
 8000c2e:	e752      	b.n	8000ad6 <__aeabi_fsub+0x14a>
 8000c30:	4662      	mov	r2, ip
 8000c32:	2a00      	cmp	r2, #0
 8000c34:	d191      	bne.n	8000b5a <__aeabi_fsub+0x1ce>
 8000c36:	2800      	cmp	r0, #0
 8000c38:	d198      	bne.n	8000b6c <__aeabi_fsub+0x1e0>
 8000c3a:	2680      	movs	r6, #128	; 0x80
 8000c3c:	2400      	movs	r4, #0
 8000c3e:	22ff      	movs	r2, #255	; 0xff
 8000c40:	03f6      	lsls	r6, r6, #15
 8000c42:	e6ee      	b.n	8000a22 <__aeabi_fsub+0x96>
 8000c44:	000c      	movs	r4, r1
 8000c46:	4643      	mov	r3, r8
 8000c48:	0015      	movs	r5, r2
 8000c4a:	e77c      	b.n	8000b46 <__aeabi_fsub+0x1ba>
 8000c4c:	4663      	mov	r3, ip
 8000c4e:	000c      	movs	r4, r1
 8000c50:	1ac6      	subs	r6, r0, r3
 8000c52:	e6c9      	b.n	80009e8 <__aeabi_fsub+0x5c>
 8000c54:	0003      	movs	r3, r0
 8000c56:	4463      	add	r3, ip
 8000c58:	2501      	movs	r5, #1
 8000c5a:	015a      	lsls	r2, r3, #5
 8000c5c:	d400      	bmi.n	8000c60 <__aeabi_fsub+0x2d4>
 8000c5e:	e76e      	b.n	8000b3e <__aeabi_fsub+0x1b2>
 8000c60:	2502      	movs	r5, #2
 8000c62:	e6fa      	b.n	8000a5a <__aeabi_fsub+0xce>
 8000c64:	4663      	mov	r3, ip
 8000c66:	2501      	movs	r5, #1
 8000c68:	1a1b      	subs	r3, r3, r0
 8000c6a:	e6b8      	b.n	80009de <__aeabi_fsub+0x52>
 8000c6c:	4664      	mov	r4, ip
 8000c6e:	2320      	movs	r3, #32
 8000c70:	40d4      	lsrs	r4, r2
 8000c72:	1a9b      	subs	r3, r3, r2
 8000c74:	4662      	mov	r2, ip
 8000c76:	409a      	lsls	r2, r3
 8000c78:	0013      	movs	r3, r2
 8000c7a:	1e5a      	subs	r2, r3, #1
 8000c7c:	4193      	sbcs	r3, r2
 8000c7e:	4323      	orrs	r3, r4
 8000c80:	e7a2      	b.n	8000bc8 <__aeabi_fsub+0x23c>
 8000c82:	4643      	mov	r3, r8
 8000c84:	e774      	b.n	8000b70 <__aeabi_fsub+0x1e4>
 8000c86:	4661      	mov	r1, ip
 8000c88:	2320      	movs	r3, #32
 8000c8a:	40d1      	lsrs	r1, r2
 8000c8c:	1a9b      	subs	r3, r3, r2
 8000c8e:	4662      	mov	r2, ip
 8000c90:	409a      	lsls	r2, r3
 8000c92:	0013      	movs	r3, r2
 8000c94:	1e5a      	subs	r2, r3, #1
 8000c96:	4193      	sbcs	r3, r2
 8000c98:	430b      	orrs	r3, r1
 8000c9a:	e720      	b.n	8000ade <__aeabi_fsub+0x152>
 8000c9c:	4663      	mov	r3, ip
 8000c9e:	000c      	movs	r4, r1
 8000ca0:	2501      	movs	r5, #1
 8000ca2:	1ac3      	subs	r3, r0, r3
 8000ca4:	e69b      	b.n	80009de <__aeabi_fsub+0x52>
 8000ca6:	2800      	cmp	r0, #0
 8000ca8:	d099      	beq.n	8000bde <__aeabi_fsub+0x252>
 8000caa:	000c      	movs	r4, r1
 8000cac:	4646      	mov	r6, r8
 8000cae:	2200      	movs	r2, #0
 8000cb0:	e6b7      	b.n	8000a22 <__aeabi_fsub+0x96>
 8000cb2:	4646      	mov	r6, r8
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	e6b4      	b.n	8000a22 <__aeabi_fsub+0x96>
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d000      	beq.n	8000cbe <__aeabi_fsub+0x332>
 8000cbc:	e73f      	b.n	8000b3e <__aeabi_fsub+0x1b2>
 8000cbe:	2400      	movs	r4, #0
 8000cc0:	2600      	movs	r6, #0
 8000cc2:	e6ae      	b.n	8000a22 <__aeabi_fsub+0x96>
 8000cc4:	fbffffff 	.word	0xfbffffff
 8000cc8:	7dffffff 	.word	0x7dffffff

08000ccc <__aeabi_f2iz>:
 8000ccc:	0241      	lsls	r1, r0, #9
 8000cce:	0042      	lsls	r2, r0, #1
 8000cd0:	0fc3      	lsrs	r3, r0, #31
 8000cd2:	0a49      	lsrs	r1, r1, #9
 8000cd4:	2000      	movs	r0, #0
 8000cd6:	0e12      	lsrs	r2, r2, #24
 8000cd8:	2a7e      	cmp	r2, #126	; 0x7e
 8000cda:	dd03      	ble.n	8000ce4 <__aeabi_f2iz+0x18>
 8000cdc:	2a9d      	cmp	r2, #157	; 0x9d
 8000cde:	dd02      	ble.n	8000ce6 <__aeabi_f2iz+0x1a>
 8000ce0:	4a09      	ldr	r2, [pc, #36]	; (8000d08 <__aeabi_f2iz+0x3c>)
 8000ce2:	1898      	adds	r0, r3, r2
 8000ce4:	4770      	bx	lr
 8000ce6:	2080      	movs	r0, #128	; 0x80
 8000ce8:	0400      	lsls	r0, r0, #16
 8000cea:	4301      	orrs	r1, r0
 8000cec:	2a95      	cmp	r2, #149	; 0x95
 8000cee:	dc07      	bgt.n	8000d00 <__aeabi_f2iz+0x34>
 8000cf0:	2096      	movs	r0, #150	; 0x96
 8000cf2:	1a82      	subs	r2, r0, r2
 8000cf4:	40d1      	lsrs	r1, r2
 8000cf6:	4248      	negs	r0, r1
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d1f3      	bne.n	8000ce4 <__aeabi_f2iz+0x18>
 8000cfc:	0008      	movs	r0, r1
 8000cfe:	e7f1      	b.n	8000ce4 <__aeabi_f2iz+0x18>
 8000d00:	3a96      	subs	r2, #150	; 0x96
 8000d02:	4091      	lsls	r1, r2
 8000d04:	e7f7      	b.n	8000cf6 <__aeabi_f2iz+0x2a>
 8000d06:	46c0      	nop			; (mov r8, r8)
 8000d08:	7fffffff 	.word	0x7fffffff

08000d0c <__aeabi_ui2f>:
 8000d0c:	b570      	push	{r4, r5, r6, lr}
 8000d0e:	1e04      	subs	r4, r0, #0
 8000d10:	d00e      	beq.n	8000d30 <__aeabi_ui2f+0x24>
 8000d12:	f000 f87d 	bl	8000e10 <__clzsi2>
 8000d16:	239e      	movs	r3, #158	; 0x9e
 8000d18:	0001      	movs	r1, r0
 8000d1a:	1a1b      	subs	r3, r3, r0
 8000d1c:	2b96      	cmp	r3, #150	; 0x96
 8000d1e:	dc0c      	bgt.n	8000d3a <__aeabi_ui2f+0x2e>
 8000d20:	2808      	cmp	r0, #8
 8000d22:	d02c      	beq.n	8000d7e <__aeabi_ui2f+0x72>
 8000d24:	3908      	subs	r1, #8
 8000d26:	408c      	lsls	r4, r1
 8000d28:	0264      	lsls	r4, r4, #9
 8000d2a:	0a64      	lsrs	r4, r4, #9
 8000d2c:	b2d8      	uxtb	r0, r3
 8000d2e:	e001      	b.n	8000d34 <__aeabi_ui2f+0x28>
 8000d30:	2000      	movs	r0, #0
 8000d32:	2400      	movs	r4, #0
 8000d34:	05c0      	lsls	r0, r0, #23
 8000d36:	4320      	orrs	r0, r4
 8000d38:	bd70      	pop	{r4, r5, r6, pc}
 8000d3a:	2b99      	cmp	r3, #153	; 0x99
 8000d3c:	dd0a      	ble.n	8000d54 <__aeabi_ui2f+0x48>
 8000d3e:	0002      	movs	r2, r0
 8000d40:	0020      	movs	r0, r4
 8000d42:	321b      	adds	r2, #27
 8000d44:	4090      	lsls	r0, r2
 8000d46:	0002      	movs	r2, r0
 8000d48:	1e50      	subs	r0, r2, #1
 8000d4a:	4182      	sbcs	r2, r0
 8000d4c:	2005      	movs	r0, #5
 8000d4e:	1a40      	subs	r0, r0, r1
 8000d50:	40c4      	lsrs	r4, r0
 8000d52:	4314      	orrs	r4, r2
 8000d54:	2905      	cmp	r1, #5
 8000d56:	dc16      	bgt.n	8000d86 <__aeabi_ui2f+0x7a>
 8000d58:	0022      	movs	r2, r4
 8000d5a:	480f      	ldr	r0, [pc, #60]	; (8000d98 <__aeabi_ui2f+0x8c>)
 8000d5c:	4002      	ands	r2, r0
 8000d5e:	0765      	lsls	r5, r4, #29
 8000d60:	d009      	beq.n	8000d76 <__aeabi_ui2f+0x6a>
 8000d62:	250f      	movs	r5, #15
 8000d64:	402c      	ands	r4, r5
 8000d66:	2c04      	cmp	r4, #4
 8000d68:	d005      	beq.n	8000d76 <__aeabi_ui2f+0x6a>
 8000d6a:	3204      	adds	r2, #4
 8000d6c:	0154      	lsls	r4, r2, #5
 8000d6e:	d502      	bpl.n	8000d76 <__aeabi_ui2f+0x6a>
 8000d70:	239f      	movs	r3, #159	; 0x9f
 8000d72:	4002      	ands	r2, r0
 8000d74:	1a5b      	subs	r3, r3, r1
 8000d76:	0192      	lsls	r2, r2, #6
 8000d78:	0a54      	lsrs	r4, r2, #9
 8000d7a:	b2d8      	uxtb	r0, r3
 8000d7c:	e7da      	b.n	8000d34 <__aeabi_ui2f+0x28>
 8000d7e:	0264      	lsls	r4, r4, #9
 8000d80:	2096      	movs	r0, #150	; 0x96
 8000d82:	0a64      	lsrs	r4, r4, #9
 8000d84:	e7d6      	b.n	8000d34 <__aeabi_ui2f+0x28>
 8000d86:	1f4a      	subs	r2, r1, #5
 8000d88:	4094      	lsls	r4, r2
 8000d8a:	0022      	movs	r2, r4
 8000d8c:	4802      	ldr	r0, [pc, #8]	; (8000d98 <__aeabi_ui2f+0x8c>)
 8000d8e:	4002      	ands	r2, r0
 8000d90:	0765      	lsls	r5, r4, #29
 8000d92:	d0f0      	beq.n	8000d76 <__aeabi_ui2f+0x6a>
 8000d94:	e7e5      	b.n	8000d62 <__aeabi_ui2f+0x56>
 8000d96:	46c0      	nop			; (mov r8, r8)
 8000d98:	fbffffff 	.word	0xfbffffff

08000d9c <__aeabi_cfrcmple>:
 8000d9c:	4684      	mov	ip, r0
 8000d9e:	0008      	movs	r0, r1
 8000da0:	4661      	mov	r1, ip
 8000da2:	e7ff      	b.n	8000da4 <__aeabi_cfcmpeq>

08000da4 <__aeabi_cfcmpeq>:
 8000da4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000da6:	f000 f8c9 	bl	8000f3c <__lesf2>
 8000daa:	2800      	cmp	r0, #0
 8000dac:	d401      	bmi.n	8000db2 <__aeabi_cfcmpeq+0xe>
 8000dae:	2100      	movs	r1, #0
 8000db0:	42c8      	cmn	r0, r1
 8000db2:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000db4 <__aeabi_fcmpeq>:
 8000db4:	b510      	push	{r4, lr}
 8000db6:	f000 f855 	bl	8000e64 <__eqsf2>
 8000dba:	4240      	negs	r0, r0
 8000dbc:	3001      	adds	r0, #1
 8000dbe:	bd10      	pop	{r4, pc}

08000dc0 <__aeabi_fcmplt>:
 8000dc0:	b510      	push	{r4, lr}
 8000dc2:	f000 f8bb 	bl	8000f3c <__lesf2>
 8000dc6:	2800      	cmp	r0, #0
 8000dc8:	db01      	blt.n	8000dce <__aeabi_fcmplt+0xe>
 8000dca:	2000      	movs	r0, #0
 8000dcc:	bd10      	pop	{r4, pc}
 8000dce:	2001      	movs	r0, #1
 8000dd0:	bd10      	pop	{r4, pc}
 8000dd2:	46c0      	nop			; (mov r8, r8)

08000dd4 <__aeabi_fcmple>:
 8000dd4:	b510      	push	{r4, lr}
 8000dd6:	f000 f8b1 	bl	8000f3c <__lesf2>
 8000dda:	2800      	cmp	r0, #0
 8000ddc:	dd01      	ble.n	8000de2 <__aeabi_fcmple+0xe>
 8000dde:	2000      	movs	r0, #0
 8000de0:	bd10      	pop	{r4, pc}
 8000de2:	2001      	movs	r0, #1
 8000de4:	bd10      	pop	{r4, pc}
 8000de6:	46c0      	nop			; (mov r8, r8)

08000de8 <__aeabi_fcmpgt>:
 8000de8:	b510      	push	{r4, lr}
 8000dea:	f000 f861 	bl	8000eb0 <__gesf2>
 8000dee:	2800      	cmp	r0, #0
 8000df0:	dc01      	bgt.n	8000df6 <__aeabi_fcmpgt+0xe>
 8000df2:	2000      	movs	r0, #0
 8000df4:	bd10      	pop	{r4, pc}
 8000df6:	2001      	movs	r0, #1
 8000df8:	bd10      	pop	{r4, pc}
 8000dfa:	46c0      	nop			; (mov r8, r8)

08000dfc <__aeabi_fcmpge>:
 8000dfc:	b510      	push	{r4, lr}
 8000dfe:	f000 f857 	bl	8000eb0 <__gesf2>
 8000e02:	2800      	cmp	r0, #0
 8000e04:	da01      	bge.n	8000e0a <__aeabi_fcmpge+0xe>
 8000e06:	2000      	movs	r0, #0
 8000e08:	bd10      	pop	{r4, pc}
 8000e0a:	2001      	movs	r0, #1
 8000e0c:	bd10      	pop	{r4, pc}
 8000e0e:	46c0      	nop			; (mov r8, r8)

08000e10 <__clzsi2>:
 8000e10:	211c      	movs	r1, #28
 8000e12:	2301      	movs	r3, #1
 8000e14:	041b      	lsls	r3, r3, #16
 8000e16:	4298      	cmp	r0, r3
 8000e18:	d301      	bcc.n	8000e1e <__clzsi2+0xe>
 8000e1a:	0c00      	lsrs	r0, r0, #16
 8000e1c:	3910      	subs	r1, #16
 8000e1e:	0a1b      	lsrs	r3, r3, #8
 8000e20:	4298      	cmp	r0, r3
 8000e22:	d301      	bcc.n	8000e28 <__clzsi2+0x18>
 8000e24:	0a00      	lsrs	r0, r0, #8
 8000e26:	3908      	subs	r1, #8
 8000e28:	091b      	lsrs	r3, r3, #4
 8000e2a:	4298      	cmp	r0, r3
 8000e2c:	d301      	bcc.n	8000e32 <__clzsi2+0x22>
 8000e2e:	0900      	lsrs	r0, r0, #4
 8000e30:	3904      	subs	r1, #4
 8000e32:	a202      	add	r2, pc, #8	; (adr r2, 8000e3c <__clzsi2+0x2c>)
 8000e34:	5c10      	ldrb	r0, [r2, r0]
 8000e36:	1840      	adds	r0, r0, r1
 8000e38:	4770      	bx	lr
 8000e3a:	46c0      	nop			; (mov r8, r8)
 8000e3c:	02020304 	.word	0x02020304
 8000e40:	01010101 	.word	0x01010101
	...

08000e4c <__clzdi2>:
 8000e4c:	b510      	push	{r4, lr}
 8000e4e:	2900      	cmp	r1, #0
 8000e50:	d103      	bne.n	8000e5a <__clzdi2+0xe>
 8000e52:	f7ff ffdd 	bl	8000e10 <__clzsi2>
 8000e56:	3020      	adds	r0, #32
 8000e58:	e002      	b.n	8000e60 <__clzdi2+0x14>
 8000e5a:	0008      	movs	r0, r1
 8000e5c:	f7ff ffd8 	bl	8000e10 <__clzsi2>
 8000e60:	bd10      	pop	{r4, pc}
 8000e62:	46c0      	nop			; (mov r8, r8)

08000e64 <__eqsf2>:
 8000e64:	b570      	push	{r4, r5, r6, lr}
 8000e66:	0042      	lsls	r2, r0, #1
 8000e68:	0245      	lsls	r5, r0, #9
 8000e6a:	024e      	lsls	r6, r1, #9
 8000e6c:	004c      	lsls	r4, r1, #1
 8000e6e:	0fc3      	lsrs	r3, r0, #31
 8000e70:	0a6d      	lsrs	r5, r5, #9
 8000e72:	2001      	movs	r0, #1
 8000e74:	0e12      	lsrs	r2, r2, #24
 8000e76:	0a76      	lsrs	r6, r6, #9
 8000e78:	0e24      	lsrs	r4, r4, #24
 8000e7a:	0fc9      	lsrs	r1, r1, #31
 8000e7c:	2aff      	cmp	r2, #255	; 0xff
 8000e7e:	d006      	beq.n	8000e8e <__eqsf2+0x2a>
 8000e80:	2cff      	cmp	r4, #255	; 0xff
 8000e82:	d003      	beq.n	8000e8c <__eqsf2+0x28>
 8000e84:	42a2      	cmp	r2, r4
 8000e86:	d101      	bne.n	8000e8c <__eqsf2+0x28>
 8000e88:	42b5      	cmp	r5, r6
 8000e8a:	d006      	beq.n	8000e9a <__eqsf2+0x36>
 8000e8c:	bd70      	pop	{r4, r5, r6, pc}
 8000e8e:	2d00      	cmp	r5, #0
 8000e90:	d1fc      	bne.n	8000e8c <__eqsf2+0x28>
 8000e92:	2cff      	cmp	r4, #255	; 0xff
 8000e94:	d1fa      	bne.n	8000e8c <__eqsf2+0x28>
 8000e96:	2e00      	cmp	r6, #0
 8000e98:	d1f8      	bne.n	8000e8c <__eqsf2+0x28>
 8000e9a:	428b      	cmp	r3, r1
 8000e9c:	d006      	beq.n	8000eac <__eqsf2+0x48>
 8000e9e:	2001      	movs	r0, #1
 8000ea0:	2a00      	cmp	r2, #0
 8000ea2:	d1f3      	bne.n	8000e8c <__eqsf2+0x28>
 8000ea4:	0028      	movs	r0, r5
 8000ea6:	1e43      	subs	r3, r0, #1
 8000ea8:	4198      	sbcs	r0, r3
 8000eaa:	e7ef      	b.n	8000e8c <__eqsf2+0x28>
 8000eac:	2000      	movs	r0, #0
 8000eae:	e7ed      	b.n	8000e8c <__eqsf2+0x28>

08000eb0 <__gesf2>:
 8000eb0:	b570      	push	{r4, r5, r6, lr}
 8000eb2:	0042      	lsls	r2, r0, #1
 8000eb4:	0245      	lsls	r5, r0, #9
 8000eb6:	024e      	lsls	r6, r1, #9
 8000eb8:	004c      	lsls	r4, r1, #1
 8000eba:	0fc3      	lsrs	r3, r0, #31
 8000ebc:	0a6d      	lsrs	r5, r5, #9
 8000ebe:	0e12      	lsrs	r2, r2, #24
 8000ec0:	0a76      	lsrs	r6, r6, #9
 8000ec2:	0e24      	lsrs	r4, r4, #24
 8000ec4:	0fc8      	lsrs	r0, r1, #31
 8000ec6:	2aff      	cmp	r2, #255	; 0xff
 8000ec8:	d01b      	beq.n	8000f02 <__gesf2+0x52>
 8000eca:	2cff      	cmp	r4, #255	; 0xff
 8000ecc:	d00e      	beq.n	8000eec <__gesf2+0x3c>
 8000ece:	2a00      	cmp	r2, #0
 8000ed0:	d11b      	bne.n	8000f0a <__gesf2+0x5a>
 8000ed2:	2c00      	cmp	r4, #0
 8000ed4:	d101      	bne.n	8000eda <__gesf2+0x2a>
 8000ed6:	2e00      	cmp	r6, #0
 8000ed8:	d01c      	beq.n	8000f14 <__gesf2+0x64>
 8000eda:	2d00      	cmp	r5, #0
 8000edc:	d00c      	beq.n	8000ef8 <__gesf2+0x48>
 8000ede:	4283      	cmp	r3, r0
 8000ee0:	d01c      	beq.n	8000f1c <__gesf2+0x6c>
 8000ee2:	2102      	movs	r1, #2
 8000ee4:	1e58      	subs	r0, r3, #1
 8000ee6:	4008      	ands	r0, r1
 8000ee8:	3801      	subs	r0, #1
 8000eea:	bd70      	pop	{r4, r5, r6, pc}
 8000eec:	2e00      	cmp	r6, #0
 8000eee:	d122      	bne.n	8000f36 <__gesf2+0x86>
 8000ef0:	2a00      	cmp	r2, #0
 8000ef2:	d1f4      	bne.n	8000ede <__gesf2+0x2e>
 8000ef4:	2d00      	cmp	r5, #0
 8000ef6:	d1f2      	bne.n	8000ede <__gesf2+0x2e>
 8000ef8:	2800      	cmp	r0, #0
 8000efa:	d1f6      	bne.n	8000eea <__gesf2+0x3a>
 8000efc:	2001      	movs	r0, #1
 8000efe:	4240      	negs	r0, r0
 8000f00:	e7f3      	b.n	8000eea <__gesf2+0x3a>
 8000f02:	2d00      	cmp	r5, #0
 8000f04:	d117      	bne.n	8000f36 <__gesf2+0x86>
 8000f06:	2cff      	cmp	r4, #255	; 0xff
 8000f08:	d0f0      	beq.n	8000eec <__gesf2+0x3c>
 8000f0a:	2c00      	cmp	r4, #0
 8000f0c:	d1e7      	bne.n	8000ede <__gesf2+0x2e>
 8000f0e:	2e00      	cmp	r6, #0
 8000f10:	d1e5      	bne.n	8000ede <__gesf2+0x2e>
 8000f12:	e7e6      	b.n	8000ee2 <__gesf2+0x32>
 8000f14:	2000      	movs	r0, #0
 8000f16:	2d00      	cmp	r5, #0
 8000f18:	d0e7      	beq.n	8000eea <__gesf2+0x3a>
 8000f1a:	e7e2      	b.n	8000ee2 <__gesf2+0x32>
 8000f1c:	42a2      	cmp	r2, r4
 8000f1e:	dc05      	bgt.n	8000f2c <__gesf2+0x7c>
 8000f20:	dbea      	blt.n	8000ef8 <__gesf2+0x48>
 8000f22:	42b5      	cmp	r5, r6
 8000f24:	d802      	bhi.n	8000f2c <__gesf2+0x7c>
 8000f26:	d3e7      	bcc.n	8000ef8 <__gesf2+0x48>
 8000f28:	2000      	movs	r0, #0
 8000f2a:	e7de      	b.n	8000eea <__gesf2+0x3a>
 8000f2c:	4243      	negs	r3, r0
 8000f2e:	4158      	adcs	r0, r3
 8000f30:	0040      	lsls	r0, r0, #1
 8000f32:	3801      	subs	r0, #1
 8000f34:	e7d9      	b.n	8000eea <__gesf2+0x3a>
 8000f36:	2002      	movs	r0, #2
 8000f38:	4240      	negs	r0, r0
 8000f3a:	e7d6      	b.n	8000eea <__gesf2+0x3a>

08000f3c <__lesf2>:
 8000f3c:	b570      	push	{r4, r5, r6, lr}
 8000f3e:	0042      	lsls	r2, r0, #1
 8000f40:	0245      	lsls	r5, r0, #9
 8000f42:	024e      	lsls	r6, r1, #9
 8000f44:	004c      	lsls	r4, r1, #1
 8000f46:	0fc3      	lsrs	r3, r0, #31
 8000f48:	0a6d      	lsrs	r5, r5, #9
 8000f4a:	0e12      	lsrs	r2, r2, #24
 8000f4c:	0a76      	lsrs	r6, r6, #9
 8000f4e:	0e24      	lsrs	r4, r4, #24
 8000f50:	0fc8      	lsrs	r0, r1, #31
 8000f52:	2aff      	cmp	r2, #255	; 0xff
 8000f54:	d00b      	beq.n	8000f6e <__lesf2+0x32>
 8000f56:	2cff      	cmp	r4, #255	; 0xff
 8000f58:	d00d      	beq.n	8000f76 <__lesf2+0x3a>
 8000f5a:	2a00      	cmp	r2, #0
 8000f5c:	d11f      	bne.n	8000f9e <__lesf2+0x62>
 8000f5e:	2c00      	cmp	r4, #0
 8000f60:	d116      	bne.n	8000f90 <__lesf2+0x54>
 8000f62:	2e00      	cmp	r6, #0
 8000f64:	d114      	bne.n	8000f90 <__lesf2+0x54>
 8000f66:	2000      	movs	r0, #0
 8000f68:	2d00      	cmp	r5, #0
 8000f6a:	d010      	beq.n	8000f8e <__lesf2+0x52>
 8000f6c:	e009      	b.n	8000f82 <__lesf2+0x46>
 8000f6e:	2d00      	cmp	r5, #0
 8000f70:	d10c      	bne.n	8000f8c <__lesf2+0x50>
 8000f72:	2cff      	cmp	r4, #255	; 0xff
 8000f74:	d113      	bne.n	8000f9e <__lesf2+0x62>
 8000f76:	2e00      	cmp	r6, #0
 8000f78:	d108      	bne.n	8000f8c <__lesf2+0x50>
 8000f7a:	2a00      	cmp	r2, #0
 8000f7c:	d008      	beq.n	8000f90 <__lesf2+0x54>
 8000f7e:	4283      	cmp	r3, r0
 8000f80:	d012      	beq.n	8000fa8 <__lesf2+0x6c>
 8000f82:	2102      	movs	r1, #2
 8000f84:	1e58      	subs	r0, r3, #1
 8000f86:	4008      	ands	r0, r1
 8000f88:	3801      	subs	r0, #1
 8000f8a:	e000      	b.n	8000f8e <__lesf2+0x52>
 8000f8c:	2002      	movs	r0, #2
 8000f8e:	bd70      	pop	{r4, r5, r6, pc}
 8000f90:	2d00      	cmp	r5, #0
 8000f92:	d1f4      	bne.n	8000f7e <__lesf2+0x42>
 8000f94:	2800      	cmp	r0, #0
 8000f96:	d1fa      	bne.n	8000f8e <__lesf2+0x52>
 8000f98:	2001      	movs	r0, #1
 8000f9a:	4240      	negs	r0, r0
 8000f9c:	e7f7      	b.n	8000f8e <__lesf2+0x52>
 8000f9e:	2c00      	cmp	r4, #0
 8000fa0:	d1ed      	bne.n	8000f7e <__lesf2+0x42>
 8000fa2:	2e00      	cmp	r6, #0
 8000fa4:	d1eb      	bne.n	8000f7e <__lesf2+0x42>
 8000fa6:	e7ec      	b.n	8000f82 <__lesf2+0x46>
 8000fa8:	42a2      	cmp	r2, r4
 8000faa:	dc05      	bgt.n	8000fb8 <__lesf2+0x7c>
 8000fac:	dbf2      	blt.n	8000f94 <__lesf2+0x58>
 8000fae:	42b5      	cmp	r5, r6
 8000fb0:	d802      	bhi.n	8000fb8 <__lesf2+0x7c>
 8000fb2:	d3ef      	bcc.n	8000f94 <__lesf2+0x58>
 8000fb4:	2000      	movs	r0, #0
 8000fb6:	e7ea      	b.n	8000f8e <__lesf2+0x52>
 8000fb8:	4243      	negs	r3, r0
 8000fba:	4158      	adcs	r0, r3
 8000fbc:	0040      	lsls	r0, r0, #1
 8000fbe:	3801      	subs	r0, #1
 8000fc0:	e7e5      	b.n	8000f8e <__lesf2+0x52>
 8000fc2:	46c0      	nop			; (mov r8, r8)

08000fc4 <PVD_init>:
void Stop_mode(void){
    HAL_Delay(2000);
    HAL_PWR_EnterSTOPMode(PWR_MAINREGULATOR_ON,PWR_STOPENTRY_WFI);
}

void PVD_init(void) {
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af00      	add	r7, sp, #0
	RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8000fca:	4b0b      	ldr	r3, [pc, #44]	; (8000ff8 <PVD_init+0x34>)
 8000fcc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000fce:	4b0a      	ldr	r3, [pc, #40]	; (8000ff8 <PVD_init+0x34>)
 8000fd0:	2180      	movs	r1, #128	; 0x80
 8000fd2:	0549      	lsls	r1, r1, #21
 8000fd4:	430a      	orrs	r2, r1
 8000fd6:	639a      	str	r2, [r3, #56]	; 0x38
	PWR_PVDTypeDef sConfigPVD;
	sConfigPVD.PVDLevel = PWR_PVDLEVEL_6;
 8000fd8:	003b      	movs	r3, r7
 8000fda:	22c0      	movs	r2, #192	; 0xc0
 8000fdc:	601a      	str	r2, [r3, #0]
	sConfigPVD.Mode = PWR_PVD_MODE_IT_RISING_FALLING;
 8000fde:	003b      	movs	r3, r7
 8000fe0:	4a06      	ldr	r2, [pc, #24]	; (8000ffc <PVD_init+0x38>)
 8000fe2:	605a      	str	r2, [r3, #4]
	HAL_PWR_PVDConfig(&sConfigPVD);
 8000fe4:	003b      	movs	r3, r7
 8000fe6:	0018      	movs	r0, r3
 8000fe8:	f001 feb0 	bl	8002d4c <HAL_PWR_ConfigPVD>
	HAL_PWR_EnablePVD();
 8000fec:	f001 ff10 	bl	8002e10 <HAL_PWR_EnablePVD>
}
 8000ff0:	46c0      	nop			; (mov r8, r8)
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	b002      	add	sp, #8
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	40021000 	.word	0x40021000
 8000ffc:	00010003 	.word	0x00010003

08001000 <save_data>:
 *      Author: Karol
 */

#include "flash.h"

void save_data(uint32_t Address,uint32_t data){
 8001000:	b580      	push	{r7, lr}
 8001002:	b084      	sub	sp, #16
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
 8001008:	6039      	str	r1, [r7, #0]

    HAL_FLASH_Unlock();
 800100a:	f001 fb05 	bl	8002618 <HAL_FLASH_Unlock>
	for(int i=0;i<50;i++){}
 800100e:	2300      	movs	r3, #0
 8001010:	60fb      	str	r3, [r7, #12]
 8001012:	e002      	b.n	800101a <save_data+0x1a>
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	3301      	adds	r3, #1
 8001018:	60fb      	str	r3, [r7, #12]
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	2b31      	cmp	r3, #49	; 0x31
 800101e:	ddf9      	ble.n	8001014 <save_data+0x14>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,Address,(uint32_t)data);
 8001020:	683a      	ldr	r2, [r7, #0]
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	0019      	movs	r1, r3
 8001026:	2002      	movs	r0, #2
 8001028:	f001 faba 	bl	80025a0 <HAL_FLASH_Program>
	for(int i=0;i<50;i++){}
 800102c:	2300      	movs	r3, #0
 800102e:	60bb      	str	r3, [r7, #8]
 8001030:	e002      	b.n	8001038 <save_data+0x38>
 8001032:	68bb      	ldr	r3, [r7, #8]
 8001034:	3301      	adds	r3, #1
 8001036:	60bb      	str	r3, [r7, #8]
 8001038:	68bb      	ldr	r3, [r7, #8]
 800103a:	2b31      	cmp	r3, #49	; 0x31
 800103c:	ddf9      	ble.n	8001032 <save_data+0x32>
	HAL_FLASH_Lock();
 800103e:	f001 fb3f 	bl	80026c0 <HAL_FLASH_Lock>
}
 8001042:	46c0      	nop			; (mov r8, r8)
 8001044:	46bd      	mov	sp, r7
 8001046:	b004      	add	sp, #16
 8001048:	bd80      	pop	{r7, pc}

0800104a <read_data>:

uint32_t read_data(uint32_t Address){
 800104a:	b580      	push	{r7, lr}
 800104c:	b084      	sub	sp, #16
 800104e:	af00      	add	r7, sp, #0
 8001050:	6078      	str	r0, [r7, #4]

	__IO uint32_t read_data = *(__IO uint32_t *)Address;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	60fb      	str	r3, [r7, #12]
	return (uint32_t)read_data;
 8001058:	68fb      	ldr	r3, [r7, #12]
}
 800105a:	0018      	movs	r0, r3
 800105c:	46bd      	mov	sp, r7
 800105e:	b004      	add	sp, #16
 8001060:	bd80      	pop	{r7, pc}

08001062 <erase_data>:

void erase_data(uint32_t Address){
 8001062:	b580      	push	{r7, lr}
 8001064:	b086      	sub	sp, #24
 8001066:	af00      	add	r7, sp, #0
 8001068:	6078      	str	r0, [r7, #4]
HAL_FLASH_Unlock();
 800106a:	f001 fad5 	bl	8002618 <HAL_FLASH_Unlock>
FLASH_EraseInitTypeDef EraseInitStruct;
EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 800106e:	210c      	movs	r1, #12
 8001070:	187b      	adds	r3, r7, r1
 8001072:	2200      	movs	r2, #0
 8001074:	601a      	str	r2, [r3, #0]
EraseInitStruct.PageAddress = Address;
 8001076:	187b      	adds	r3, r7, r1
 8001078:	687a      	ldr	r2, [r7, #4]
 800107a:	605a      	str	r2, [r3, #4]
EraseInitStruct.NbPages = 1;
 800107c:	187b      	adds	r3, r7, r1
 800107e:	2201      	movs	r2, #1
 8001080:	609a      	str	r2, [r3, #8]

uint32_t PageError;
if (HAL_FLASHEx_Erase(&EraseInitStruct, &PageError) != HAL_OK)
 8001082:	2308      	movs	r3, #8
 8001084:	18fa      	adds	r2, r7, r3
 8001086:	187b      	adds	r3, r7, r1
 8001088:	0011      	movs	r1, r2
 800108a:	0018      	movs	r0, r3
 800108c:	f001 fc3a 	bl	8002904 <HAL_FLASHEx_Erase>
 8001090:	1e03      	subs	r3, r0, #0
 8001092:	d102      	bne.n	800109a <erase_data+0x38>
		return HAL_ERROR;
HAL_FLASH_Lock();
 8001094:	f001 fb14 	bl	80026c0 <HAL_FLASH_Lock>
 8001098:	e000      	b.n	800109c <erase_data+0x3a>
		return HAL_ERROR;
 800109a:	46c0      	nop			; (mov r8, r8)
}
 800109c:	46bd      	mov	sp, r7
 800109e:	b006      	add	sp, #24
 80010a0:	bd80      	pop	{r7, pc}
	...

080010a4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80010a4:	b590      	push	{r4, r7, lr}
 80010a6:	b089      	sub	sp, #36	; 0x24
 80010a8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010aa:	240c      	movs	r4, #12
 80010ac:	193b      	adds	r3, r7, r4
 80010ae:	0018      	movs	r0, r3
 80010b0:	2314      	movs	r3, #20
 80010b2:	001a      	movs	r2, r3
 80010b4:	2100      	movs	r1, #0
 80010b6:	f004 ff81 	bl	8005fbc <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010ba:	4b1b      	ldr	r3, [pc, #108]	; (8001128 <MX_GPIO_Init+0x84>)
 80010bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80010be:	4b1a      	ldr	r3, [pc, #104]	; (8001128 <MX_GPIO_Init+0x84>)
 80010c0:	2104      	movs	r1, #4
 80010c2:	430a      	orrs	r2, r1
 80010c4:	62da      	str	r2, [r3, #44]	; 0x2c
 80010c6:	4b18      	ldr	r3, [pc, #96]	; (8001128 <MX_GPIO_Init+0x84>)
 80010c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010ca:	2204      	movs	r2, #4
 80010cc:	4013      	ands	r3, r2
 80010ce:	60bb      	str	r3, [r7, #8]
 80010d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010d2:	4b15      	ldr	r3, [pc, #84]	; (8001128 <MX_GPIO_Init+0x84>)
 80010d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80010d6:	4b14      	ldr	r3, [pc, #80]	; (8001128 <MX_GPIO_Init+0x84>)
 80010d8:	2101      	movs	r1, #1
 80010da:	430a      	orrs	r2, r1
 80010dc:	62da      	str	r2, [r3, #44]	; 0x2c
 80010de:	4b12      	ldr	r3, [pc, #72]	; (8001128 <MX_GPIO_Init+0x84>)
 80010e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010e2:	2201      	movs	r2, #1
 80010e4:	4013      	ands	r3, r2
 80010e6:	607b      	str	r3, [r7, #4]
 80010e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_LED_GPIO_Port, USB_LED_Pin, GPIO_PIN_RESET);
 80010ea:	23a0      	movs	r3, #160	; 0xa0
 80010ec:	05db      	lsls	r3, r3, #23
 80010ee:	2200      	movs	r2, #0
 80010f0:	2120      	movs	r1, #32
 80010f2:	0018      	movs	r0, r3
 80010f4:	f001 fe0c 	bl	8002d10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_LED_Pin;
 80010f8:	0021      	movs	r1, r4
 80010fa:	187b      	adds	r3, r7, r1
 80010fc:	2220      	movs	r2, #32
 80010fe:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001100:	187b      	adds	r3, r7, r1
 8001102:	2201      	movs	r2, #1
 8001104:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001106:	187b      	adds	r3, r7, r1
 8001108:	2200      	movs	r2, #0
 800110a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800110c:	187b      	adds	r3, r7, r1
 800110e:	2200      	movs	r2, #0
 8001110:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(USB_LED_GPIO_Port, &GPIO_InitStruct);
 8001112:	187a      	adds	r2, r7, r1
 8001114:	23a0      	movs	r3, #160	; 0xa0
 8001116:	05db      	lsls	r3, r3, #23
 8001118:	0011      	movs	r1, r2
 800111a:	0018      	movs	r0, r3
 800111c:	f001 fc7a 	bl	8002a14 <HAL_GPIO_Init>

}
 8001120:	46c0      	nop			; (mov r8, r8)
 8001122:	46bd      	mov	sp, r7
 8001124:	b009      	add	sp, #36	; 0x24
 8001126:	bd90      	pop	{r4, r7, pc}
 8001128:	40021000 	.word	0x40021000

0800112c <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b082      	sub	sp, #8
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, 0);
 8001134:	1d39      	adds	r1, r7, #4
 8001136:	4805      	ldr	r0, [pc, #20]	; (800114c <__io_putchar+0x20>)
 8001138:	2300      	movs	r3, #0
 800113a:	2201      	movs	r2, #1
 800113c:	f003 f8a6 	bl	800428c <HAL_UART_Transmit>
    return 1;
 8001140:	2301      	movs	r3, #1
}
 8001142:	0018      	movs	r0, r3
 8001144:	46bd      	mov	sp, r7
 8001146:	b002      	add	sp, #8
 8001148:	bd80      	pop	{r7, pc}
 800114a:	46c0      	nop			; (mov r8, r8)
 800114c:	20000170 	.word	0x20000170

08001150 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001150:	b580      	push	{r7, lr}
 8001152:	b082      	sub	sp, #8
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  if (huart == &huart2) {
 8001158:	687a      	ldr	r2, [r7, #4]
 800115a:	4b0c      	ldr	r3, [pc, #48]	; (800118c <HAL_UART_RxCpltCallback+0x3c>)
 800115c:	429a      	cmp	r2, r3
 800115e:	d110      	bne.n	8001182 <HAL_UART_RxCpltCallback+0x32>

	  MENU_USB(value);
 8001160:	4b0b      	ldr	r3, [pc, #44]	; (8001190 <HAL_UART_RxCpltCallback+0x40>)
 8001162:	781b      	ldrb	r3, [r3, #0]
 8001164:	0018      	movs	r0, r3
 8001166:	f000 f9e1 	bl	800152c <MENU_USB>
	  HAL_UART_Receive_IT(&huart2, &value, 1);
 800116a:	4909      	ldr	r1, [pc, #36]	; (8001190 <HAL_UART_RxCpltCallback+0x40>)
 800116c:	4b07      	ldr	r3, [pc, #28]	; (800118c <HAL_UART_RxCpltCallback+0x3c>)
 800116e:	2201      	movs	r2, #1
 8001170:	0018      	movs	r0, r3
 8001172:	f003 f92b 	bl	80043cc <HAL_UART_Receive_IT>
	  HAL_UART_Transmit(&huart2, &value, 1, 0);
 8001176:	4906      	ldr	r1, [pc, #24]	; (8001190 <HAL_UART_RxCpltCallback+0x40>)
 8001178:	4804      	ldr	r0, [pc, #16]	; (800118c <HAL_UART_RxCpltCallback+0x3c>)
 800117a:	2300      	movs	r3, #0
 800117c:	2201      	movs	r2, #1
 800117e:	f003 f885 	bl	800428c <HAL_UART_Transmit>
 }
}
 8001182:	46c0      	nop			; (mov r8, r8)
 8001184:	46bd      	mov	sp, r7
 8001186:	b002      	add	sp, #8
 8001188:	bd80      	pop	{r7, pc}
 800118a:	46c0      	nop			; (mov r8, r8)
 800118c:	20000170 	.word	0x20000170
 8001190:	20000094 	.word	0x20000094

08001194 <HAL_PWR_PVDCallback>:

void HAL_PWR_PVDCallback(void){
 8001194:	b5b0      	push	{r4, r5, r7, lr}
 8001196:	af00      	add	r7, sp, #0
    if (PWR->CSR & PWR_CSR_PVDO) {
 8001198:	4b1b      	ldr	r3, [pc, #108]	; (8001208 <HAL_PWR_PVDCallback+0x74>)
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	2204      	movs	r2, #4
 800119e:	4013      	ands	r3, r2
 80011a0:	d02e      	beq.n	8001200 <HAL_PWR_PVDCallback+0x6c>
    	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80011a2:	23a0      	movs	r3, #160	; 0xa0
 80011a4:	05db      	lsls	r3, r3, #23
 80011a6:	2201      	movs	r2, #1
 80011a8:	2120      	movs	r1, #32
 80011aa:	0018      	movs	r0, r3
 80011ac:	f001 fdb0 	bl	8002d10 <HAL_GPIO_WritePin>
		save_data(Addr_total_pulse, total_pulses);
 80011b0:	4b16      	ldr	r3, [pc, #88]	; (800120c <HAL_PWR_PVDCallback+0x78>)
 80011b2:	681a      	ldr	r2, [r3, #0]
 80011b4:	4b16      	ldr	r3, [pc, #88]	; (8001210 <HAL_PWR_PVDCallback+0x7c>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	0019      	movs	r1, r3
 80011ba:	0010      	movs	r0, r2
 80011bc:	f7ff ff20 	bl	8001000 <save_data>
		save_data(Addr_num, num);
 80011c0:	4b14      	ldr	r3, [pc, #80]	; (8001214 <HAL_PWR_PVDCallback+0x80>)
 80011c2:	681a      	ldr	r2, [r3, #0]
 80011c4:	4b14      	ldr	r3, [pc, #80]	; (8001218 <HAL_PWR_PVDCallback+0x84>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	0019      	movs	r1, r3
 80011ca:	0010      	movs	r0, r2
 80011cc:	f7ff ff18 	bl	8001000 <save_data>
		save_data(Addr_Ton, (uint32_t)Ton);
 80011d0:	4b12      	ldr	r3, [pc, #72]	; (800121c <HAL_PWR_PVDCallback+0x88>)
 80011d2:	681c      	ldr	r4, [r3, #0]
 80011d4:	4b12      	ldr	r3, [pc, #72]	; (8001220 <HAL_PWR_PVDCallback+0x8c>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	1c18      	adds	r0, r3, #0
 80011da:	f7ff f88b 	bl	80002f4 <__aeabi_f2uiz>
 80011de:	0003      	movs	r3, r0
 80011e0:	0019      	movs	r1, r3
 80011e2:	0020      	movs	r0, r4
 80011e4:	f7ff ff0c 	bl	8001000 <save_data>
		save_data(Addr_Toff, (uint32_t)Toff);
 80011e8:	4b0e      	ldr	r3, [pc, #56]	; (8001224 <HAL_PWR_PVDCallback+0x90>)
 80011ea:	681c      	ldr	r4, [r3, #0]
 80011ec:	4b0e      	ldr	r3, [pc, #56]	; (8001228 <HAL_PWR_PVDCallback+0x94>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	1c18      	adds	r0, r3, #0
 80011f2:	f7ff f87f 	bl	80002f4 <__aeabi_f2uiz>
 80011f6:	0003      	movs	r3, r0
 80011f8:	0019      	movs	r1, r3
 80011fa:	0020      	movs	r0, r4
 80011fc:	f7ff ff00 	bl	8001000 <save_data>
		//Stop_mode();
    }
}
 8001200:	46c0      	nop			; (mov r8, r8)
 8001202:	46bd      	mov	sp, r7
 8001204:	bdb0      	pop	{r4, r5, r7, pc}
 8001206:	46c0      	nop			; (mov r8, r8)
 8001208:	40007000 	.word	0x40007000
 800120c:	20000000 	.word	0x20000000
 8001210:	200000b0 	.word	0x200000b0
 8001214:	20000004 	.word	0x20000004
 8001218:	20000098 	.word	0x20000098
 800121c:	20000008 	.word	0x20000008
 8001220:	200000b4 	.word	0x200000b4
 8001224:	2000000c 	.word	0x2000000c
 8001228:	200000b8 	.word	0x200000b8

0800122c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001230:	f001 f822 	bl	8002278 <HAL_Init>

  /* USER CODE BEGIN Init */
  PVD_init();
 8001234:	f7ff fec6 	bl	8000fc4 <PVD_init>
  PG_init();
 8001238:	f000 f95a 	bl	80014f0 <PG_init>
  GPIO_LEDS();
 800123c:	f000 f924 	bl	8001488 <GPIO_LEDS>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001240:	f000 f8ba 	bl	80013b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001244:	f7ff ff2e 	bl	80010a4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001248:	f000 ff70 	bl	800212c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart2, &value, 1);
 800124c:	4951      	ldr	r1, [pc, #324]	; (8001394 <main+0x168>)
 800124e:	4b52      	ldr	r3, [pc, #328]	; (8001398 <main+0x16c>)
 8001250:	2201      	movs	r2, #1
 8001252:	0018      	movs	r0, r3
 8001254:	f003 f8ba 	bl	80043cc <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while(1){
	switch(state) {
 8001258:	4b50      	ldr	r3, [pc, #320]	; (800139c <main+0x170>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	2b04      	cmp	r3, #4
 800125e:	d100      	bne.n	8001262 <main+0x36>
 8001260:	e08c      	b.n	800137c <main+0x150>
 8001262:	dd00      	ble.n	8001266 <main+0x3a>
 8001264:	e093      	b.n	800138e <main+0x162>
 8001266:	2b03      	cmp	r3, #3
 8001268:	d100      	bne.n	800126c <main+0x40>
 800126a:	e083      	b.n	8001374 <main+0x148>
 800126c:	dd00      	ble.n	8001270 <main+0x44>
 800126e:	e08e      	b.n	800138e <main+0x162>
 8001270:	2b01      	cmp	r3, #1
 8001272:	d002      	beq.n	800127a <main+0x4e>
 8001274:	2b02      	cmp	r3, #2
 8001276:	d03a      	beq.n	80012ee <main+0xc2>
	  case 4:
		erase_data(Addr_total_pulse);
		state=0;
		break;
	  default:
	  	break;
 8001278:	e089      	b.n	800138e <main+0x162>
	    GPIOC->BSRR = ~(1U<<4);
 800127a:	4b49      	ldr	r3, [pc, #292]	; (80013a0 <main+0x174>)
 800127c:	2211      	movs	r2, #17
 800127e:	4252      	negs	r2, r2
 8001280:	619a      	str	r2, [r3, #24]
	    while((GPIOC->ODR & GPIO_ODR_OD4)){}
 8001282:	46c0      	nop			; (mov r8, r8)
 8001284:	4b46      	ldr	r3, [pc, #280]	; (80013a0 <main+0x174>)
 8001286:	695b      	ldr	r3, [r3, #20]
 8001288:	2210      	movs	r2, #16
 800128a:	4013      	ands	r3, r2
 800128c:	d1fa      	bne.n	8001284 <main+0x58>
	    HAL_Delay((uint32_t)Ton);
 800128e:	4b45      	ldr	r3, [pc, #276]	; (80013a4 <main+0x178>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	1c18      	adds	r0, r3, #0
 8001294:	f7ff f82e 	bl	80002f4 <__aeabi_f2uiz>
 8001298:	0003      	movs	r3, r0
 800129a:	0018      	movs	r0, r3
 800129c:	f001 f828 	bl	80022f0 <HAL_Delay>
	    GPIOC->BSRR = (1U<<4);
 80012a0:	4b3f      	ldr	r3, [pc, #252]	; (80013a0 <main+0x174>)
 80012a2:	2210      	movs	r2, #16
 80012a4:	619a      	str	r2, [r3, #24]
	    while(!(GPIOC->ODR & GPIO_ODR_OD4)){}
 80012a6:	46c0      	nop			; (mov r8, r8)
 80012a8:	4b3d      	ldr	r3, [pc, #244]	; (80013a0 <main+0x174>)
 80012aa:	695b      	ldr	r3, [r3, #20]
 80012ac:	2210      	movs	r2, #16
 80012ae:	4013      	ands	r3, r2
 80012b0:	d0fa      	beq.n	80012a8 <main+0x7c>
	    HAL_Delay((uint32_t)Toff);
 80012b2:	4b3d      	ldr	r3, [pc, #244]	; (80013a8 <main+0x17c>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	1c18      	adds	r0, r3, #0
 80012b8:	f7ff f81c 	bl	80002f4 <__aeabi_f2uiz>
 80012bc:	0003      	movs	r3, r0
 80012be:	0018      	movs	r0, r3
 80012c0:	f001 f816 	bl	80022f0 <HAL_Delay>
	    total_pulses++;
 80012c4:	4b39      	ldr	r3, [pc, #228]	; (80013ac <main+0x180>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	1c5a      	adds	r2, r3, #1
 80012ca:	4b38      	ldr	r3, [pc, #224]	; (80013ac <main+0x180>)
 80012cc:	601a      	str	r2, [r3, #0]
	    if(state!=0 && state!=4){
 80012ce:	4b33      	ldr	r3, [pc, #204]	; (800139c <main+0x170>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d007      	beq.n	80012e6 <main+0xba>
 80012d6:	4b31      	ldr	r3, [pc, #196]	; (800139c <main+0x170>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	2b04      	cmp	r3, #4
 80012dc:	d003      	beq.n	80012e6 <main+0xba>
	    state=1;
 80012de:	4b2f      	ldr	r3, [pc, #188]	; (800139c <main+0x170>)
 80012e0:	2201      	movs	r2, #1
 80012e2:	601a      	str	r2, [r3, #0]
	    break;
 80012e4:	e054      	b.n	8001390 <main+0x164>
	    	state=4;
 80012e6:	4b2d      	ldr	r3, [pc, #180]	; (800139c <main+0x170>)
 80012e8:	2204      	movs	r2, #4
 80012ea:	601a      	str	r2, [r3, #0]
	    break;
 80012ec:	e050      	b.n	8001390 <main+0x164>
	    GPIOC->BSRR = ~(1U<<4);
 80012ee:	4b2c      	ldr	r3, [pc, #176]	; (80013a0 <main+0x174>)
 80012f0:	2211      	movs	r2, #17
 80012f2:	4252      	negs	r2, r2
 80012f4:	619a      	str	r2, [r3, #24]
	    while((GPIOC->ODR & GPIO_ODR_OD4)){}
 80012f6:	46c0      	nop			; (mov r8, r8)
 80012f8:	4b29      	ldr	r3, [pc, #164]	; (80013a0 <main+0x174>)
 80012fa:	695b      	ldr	r3, [r3, #20]
 80012fc:	2210      	movs	r2, #16
 80012fe:	4013      	ands	r3, r2
 8001300:	d1fa      	bne.n	80012f8 <main+0xcc>
	    HAL_Delay((uint32_t)Ton);
 8001302:	4b28      	ldr	r3, [pc, #160]	; (80013a4 <main+0x178>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	1c18      	adds	r0, r3, #0
 8001308:	f7fe fff4 	bl	80002f4 <__aeabi_f2uiz>
 800130c:	0003      	movs	r3, r0
 800130e:	0018      	movs	r0, r3
 8001310:	f000 ffee 	bl	80022f0 <HAL_Delay>
	    GPIOC->BSRR = (1U<<4);
 8001314:	4b22      	ldr	r3, [pc, #136]	; (80013a0 <main+0x174>)
 8001316:	2210      	movs	r2, #16
 8001318:	619a      	str	r2, [r3, #24]
	    while(!(GPIOC->ODR & GPIO_ODR_OD4)){}
 800131a:	46c0      	nop			; (mov r8, r8)
 800131c:	4b20      	ldr	r3, [pc, #128]	; (80013a0 <main+0x174>)
 800131e:	695b      	ldr	r3, [r3, #20]
 8001320:	2210      	movs	r2, #16
 8001322:	4013      	ands	r3, r2
 8001324:	d0fa      	beq.n	800131c <main+0xf0>
	    HAL_Delay((uint32_t)Toff);
 8001326:	4b20      	ldr	r3, [pc, #128]	; (80013a8 <main+0x17c>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	1c18      	adds	r0, r3, #0
 800132c:	f7fe ffe2 	bl	80002f4 <__aeabi_f2uiz>
 8001330:	0003      	movs	r3, r0
 8001332:	0018      	movs	r0, r3
 8001334:	f000 ffdc 	bl	80022f0 <HAL_Delay>
	    total_pulses++;
 8001338:	4b1c      	ldr	r3, [pc, #112]	; (80013ac <main+0x180>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	1c5a      	adds	r2, r3, #1
 800133e:	4b1b      	ldr	r3, [pc, #108]	; (80013ac <main+0x180>)
 8001340:	601a      	str	r2, [r3, #0]
	    num--;
 8001342:	4b1b      	ldr	r3, [pc, #108]	; (80013b0 <main+0x184>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	1e5a      	subs	r2, r3, #1
 8001348:	4b19      	ldr	r3, [pc, #100]	; (80013b0 <main+0x184>)
 800134a:	601a      	str	r2, [r3, #0]
	    if(num>0 && state!=0 && state!=4){
 800134c:	4b18      	ldr	r3, [pc, #96]	; (80013b0 <main+0x184>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	2b00      	cmp	r3, #0
 8001352:	d00b      	beq.n	800136c <main+0x140>
 8001354:	4b11      	ldr	r3, [pc, #68]	; (800139c <main+0x170>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	2b00      	cmp	r3, #0
 800135a:	d007      	beq.n	800136c <main+0x140>
 800135c:	4b0f      	ldr	r3, [pc, #60]	; (800139c <main+0x170>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	2b04      	cmp	r3, #4
 8001362:	d003      	beq.n	800136c <main+0x140>
	    	state=2;
 8001364:	4b0d      	ldr	r3, [pc, #52]	; (800139c <main+0x170>)
 8001366:	2202      	movs	r2, #2
 8001368:	601a      	str	r2, [r3, #0]
	    break;
 800136a:	e011      	b.n	8001390 <main+0x164>
	    	state=4;
 800136c:	4b0b      	ldr	r3, [pc, #44]	; (800139c <main+0x170>)
 800136e:	2204      	movs	r2, #4
 8001370:	601a      	str	r2, [r3, #0]
	    break;
 8001372:	e00d      	b.n	8001390 <main+0x164>
		state=0;
 8001374:	4b09      	ldr	r3, [pc, #36]	; (800139c <main+0x170>)
 8001376:	2200      	movs	r2, #0
 8001378:	601a      	str	r2, [r3, #0]
		break;
 800137a:	e009      	b.n	8001390 <main+0x164>
		erase_data(Addr_total_pulse);
 800137c:	4b0d      	ldr	r3, [pc, #52]	; (80013b4 <main+0x188>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	0018      	movs	r0, r3
 8001382:	f7ff fe6e 	bl	8001062 <erase_data>
		state=0;
 8001386:	4b05      	ldr	r3, [pc, #20]	; (800139c <main+0x170>)
 8001388:	2200      	movs	r2, #0
 800138a:	601a      	str	r2, [r3, #0]
		break;
 800138c:	e000      	b.n	8001390 <main+0x164>
	  	break;
 800138e:	46c0      	nop			; (mov r8, r8)
	switch(state) {
 8001390:	e762      	b.n	8001258 <main+0x2c>
 8001392:	46c0      	nop			; (mov r8, r8)
 8001394:	20000094 	.word	0x20000094
 8001398:	20000170 	.word	0x20000170
 800139c:	20000128 	.word	0x20000128
 80013a0:	50000800 	.word	0x50000800
 80013a4:	200000b4 	.word	0x200000b4
 80013a8:	200000b8 	.word	0x200000b8
 80013ac:	200000b0 	.word	0x200000b0
 80013b0:	20000098 	.word	0x20000098
 80013b4:	20000000 	.word	0x20000000

080013b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013b8:	b590      	push	{r4, r7, lr}
 80013ba:	b09f      	sub	sp, #124	; 0x7c
 80013bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013be:	2440      	movs	r4, #64	; 0x40
 80013c0:	193b      	adds	r3, r7, r4
 80013c2:	0018      	movs	r0, r3
 80013c4:	2338      	movs	r3, #56	; 0x38
 80013c6:	001a      	movs	r2, r3
 80013c8:	2100      	movs	r1, #0
 80013ca:	f004 fdf7 	bl	8005fbc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013ce:	232c      	movs	r3, #44	; 0x2c
 80013d0:	18fb      	adds	r3, r7, r3
 80013d2:	0018      	movs	r0, r3
 80013d4:	2314      	movs	r3, #20
 80013d6:	001a      	movs	r2, r3
 80013d8:	2100      	movs	r1, #0
 80013da:	f004 fdef 	bl	8005fbc <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013de:	1d3b      	adds	r3, r7, #4
 80013e0:	0018      	movs	r0, r3
 80013e2:	2328      	movs	r3, #40	; 0x28
 80013e4:	001a      	movs	r2, r3
 80013e6:	2100      	movs	r1, #0
 80013e8:	f004 fde8 	bl	8005fbc <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80013ec:	4b24      	ldr	r3, [pc, #144]	; (8001480 <SystemClock_Config+0xc8>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4a24      	ldr	r2, [pc, #144]	; (8001484 <SystemClock_Config+0xcc>)
 80013f2:	401a      	ands	r2, r3
 80013f4:	4b22      	ldr	r3, [pc, #136]	; (8001480 <SystemClock_Config+0xc8>)
 80013f6:	2180      	movs	r1, #128	; 0x80
 80013f8:	0109      	lsls	r1, r1, #4
 80013fa:	430a      	orrs	r2, r1
 80013fc:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80013fe:	0021      	movs	r1, r4
 8001400:	187b      	adds	r3, r7, r1
 8001402:	2202      	movs	r2, #2
 8001404:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001406:	187b      	adds	r3, r7, r1
 8001408:	2201      	movs	r2, #1
 800140a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800140c:	187b      	adds	r3, r7, r1
 800140e:	2210      	movs	r2, #16
 8001410:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001412:	187b      	adds	r3, r7, r1
 8001414:	2200      	movs	r2, #0
 8001416:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001418:	187b      	adds	r3, r7, r1
 800141a:	0018      	movs	r0, r3
 800141c:	f001 fd1a 	bl	8002e54 <HAL_RCC_OscConfig>
 8001420:	1e03      	subs	r3, r0, #0
 8001422:	d001      	beq.n	8001428 <SystemClock_Config+0x70>
  {
    Error_Handler();
 8001424:	f000 fcec 	bl	8001e00 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001428:	212c      	movs	r1, #44	; 0x2c
 800142a:	187b      	adds	r3, r7, r1
 800142c:	220f      	movs	r2, #15
 800142e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001430:	187b      	adds	r3, r7, r1
 8001432:	2201      	movs	r2, #1
 8001434:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001436:	187b      	adds	r3, r7, r1
 8001438:	2200      	movs	r2, #0
 800143a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800143c:	187b      	adds	r3, r7, r1
 800143e:	2200      	movs	r2, #0
 8001440:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001442:	187b      	adds	r3, r7, r1
 8001444:	2200      	movs	r2, #0
 8001446:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001448:	187b      	adds	r3, r7, r1
 800144a:	2100      	movs	r1, #0
 800144c:	0018      	movs	r0, r3
 800144e:	f002 f8d5 	bl	80035fc <HAL_RCC_ClockConfig>
 8001452:	1e03      	subs	r3, r0, #0
 8001454:	d001      	beq.n	800145a <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8001456:	f000 fcd3 	bl	8001e00 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800145a:	1d3b      	adds	r3, r7, #4
 800145c:	2202      	movs	r2, #2
 800145e:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001460:	1d3b      	adds	r3, r7, #4
 8001462:	2200      	movs	r2, #0
 8001464:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001466:	1d3b      	adds	r3, r7, #4
 8001468:	0018      	movs	r0, r3
 800146a:	f002 fb1d 	bl	8003aa8 <HAL_RCCEx_PeriphCLKConfig>
 800146e:	1e03      	subs	r3, r0, #0
 8001470:	d001      	beq.n	8001476 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8001472:	f000 fcc5 	bl	8001e00 <Error_Handler>
  }
}
 8001476:	46c0      	nop			; (mov r8, r8)
 8001478:	46bd      	mov	sp, r7
 800147a:	b01f      	add	sp, #124	; 0x7c
 800147c:	bd90      	pop	{r4, r7, pc}
 800147e:	46c0      	nop			; (mov r8, r8)
 8001480:	40007000 	.word	0x40007000
 8001484:	ffffe7ff 	.word	0xffffe7ff

08001488 <GPIO_LEDS>:

/* USER CODE BEGIN 4 */

void GPIO_LEDS(void){
 8001488:	b580      	push	{r7, lr}
 800148a:	af00      	add	r7, sp, #0
	RCC->IOPENR |= RCC_IOPENR_GPIOBEN;
 800148c:	4b16      	ldr	r3, [pc, #88]	; (80014e8 <GPIO_LEDS+0x60>)
 800148e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001490:	4b15      	ldr	r3, [pc, #84]	; (80014e8 <GPIO_LEDS+0x60>)
 8001492:	2102      	movs	r1, #2
 8001494:	430a      	orrs	r2, r1
 8001496:	62da      	str	r2, [r3, #44]	; 0x2c
	//2
	GPIOB->MODER &= ((GPIOA->MODER & ~(GPIO_MODER_MODE2)) | (GPIO_MODER_MODE2_0));
 8001498:	23a0      	movs	r3, #160	; 0xa0
 800149a:	05db      	lsls	r3, r3, #23
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	2230      	movs	r2, #48	; 0x30
 80014a0:	4393      	bics	r3, r2
 80014a2:	2210      	movs	r2, #16
 80014a4:	431a      	orrs	r2, r3
 80014a6:	4b11      	ldr	r3, [pc, #68]	; (80014ec <GPIO_LEDS+0x64>)
 80014a8:	6819      	ldr	r1, [r3, #0]
 80014aa:	4b10      	ldr	r3, [pc, #64]	; (80014ec <GPIO_LEDS+0x64>)
 80014ac:	400a      	ands	r2, r1
 80014ae:	601a      	str	r2, [r3, #0]
	//1
	GPIOB->MODER &= ((GPIOA->MODER & ~(GPIO_MODER_MODE1)) | (GPIO_MODER_MODE1_0));
 80014b0:	23a0      	movs	r3, #160	; 0xa0
 80014b2:	05db      	lsls	r3, r3, #23
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	220c      	movs	r2, #12
 80014b8:	4393      	bics	r3, r2
 80014ba:	2204      	movs	r2, #4
 80014bc:	431a      	orrs	r2, r3
 80014be:	4b0b      	ldr	r3, [pc, #44]	; (80014ec <GPIO_LEDS+0x64>)
 80014c0:	6819      	ldr	r1, [r3, #0]
 80014c2:	4b0a      	ldr	r3, [pc, #40]	; (80014ec <GPIO_LEDS+0x64>)
 80014c4:	400a      	ands	r2, r1
 80014c6:	601a      	str	r2, [r3, #0]
	//15
	GPIOB->MODER &= ((GPIOA->MODER & ~(GPIO_MODER_MODE15)) | (GPIO_MODER_MODE15_0));
 80014c8:	23a0      	movs	r3, #160	; 0xa0
 80014ca:	05db      	lsls	r3, r3, #23
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	009b      	lsls	r3, r3, #2
 80014d0:	089b      	lsrs	r3, r3, #2
 80014d2:	2280      	movs	r2, #128	; 0x80
 80014d4:	05d2      	lsls	r2, r2, #23
 80014d6:	431a      	orrs	r2, r3
 80014d8:	4b04      	ldr	r3, [pc, #16]	; (80014ec <GPIO_LEDS+0x64>)
 80014da:	6819      	ldr	r1, [r3, #0]
 80014dc:	4b03      	ldr	r3, [pc, #12]	; (80014ec <GPIO_LEDS+0x64>)
 80014de:	400a      	ands	r2, r1
 80014e0:	601a      	str	r2, [r3, #0]
}
 80014e2:	46c0      	nop			; (mov r8, r8)
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}
 80014e8:	40021000 	.word	0x40021000
 80014ec:	50000400 	.word	0x50000400

080014f0 <PG_init>:

void PG_init(void){
 80014f0:	b580      	push	{r7, lr}
 80014f2:	af00      	add	r7, sp, #0
	RCC->IOPENR  |= RCC_IOPENR_GPIOCEN;
 80014f4:	4b0a      	ldr	r3, [pc, #40]	; (8001520 <PG_init+0x30>)
 80014f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80014f8:	4b09      	ldr	r3, [pc, #36]	; (8001520 <PG_init+0x30>)
 80014fa:	2104      	movs	r1, #4
 80014fc:	430a      	orrs	r2, r1
 80014fe:	62da      	str	r2, [r3, #44]	; 0x2c
	GPIOC -> MODER = (GPIO_MODER_MODE4_0)|(GPIOC->MODER & ~GPIO_MODER_MODE4);
 8001500:	4b08      	ldr	r3, [pc, #32]	; (8001524 <PG_init+0x34>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4a08      	ldr	r2, [pc, #32]	; (8001528 <PG_init+0x38>)
 8001506:	401a      	ands	r2, r3
 8001508:	4b06      	ldr	r3, [pc, #24]	; (8001524 <PG_init+0x34>)
 800150a:	2180      	movs	r1, #128	; 0x80
 800150c:	0049      	lsls	r1, r1, #1
 800150e:	430a      	orrs	r2, r1
 8001510:	601a      	str	r2, [r3, #0]
	GPIOC->BSRR = (1U<<4);
 8001512:	4b04      	ldr	r3, [pc, #16]	; (8001524 <PG_init+0x34>)
 8001514:	2210      	movs	r2, #16
 8001516:	619a      	str	r2, [r3, #24]
}
 8001518:	46c0      	nop			; (mov r8, r8)
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
 800151e:	46c0      	nop			; (mov r8, r8)
 8001520:	40021000 	.word	0x40021000
 8001524:	50000800 	.word	0x50000800
 8001528:	fffffcff 	.word	0xfffffcff

0800152c <MENU_USB>:

void MENU_USB(uint8_t value){
 800152c:	b5b0      	push	{r4, r5, r7, lr}
 800152e:	b0e8      	sub	sp, #416	; 0x1a0
 8001530:	af00      	add	r7, sp, #0
 8001532:	0002      	movs	r2, r0
 8001534:	4bdc      	ldr	r3, [pc, #880]	; (80018a8 <MENU_USB+0x37c>)
 8001536:	25d0      	movs	r5, #208	; 0xd0
 8001538:	006d      	lsls	r5, r5, #1
 800153a:	195b      	adds	r3, r3, r5
 800153c:	19db      	adds	r3, r3, r7
 800153e:	701a      	strb	r2, [r3, #0]
char menu[]="---------------HOW TO USE---------------"
 8001540:	23dc      	movs	r3, #220	; 0xdc
 8001542:	18fa      	adds	r2, r7, r3
 8001544:	4bd9      	ldr	r3, [pc, #868]	; (80018ac <MENU_USB+0x380>)
 8001546:	0010      	movs	r0, r2
 8001548:	0019      	movs	r1, r3
 800154a:	23a3      	movs	r3, #163	; 0xa3
 800154c:	001a      	movs	r2, r3
 800154e:	f004 fe75 	bl	800623c <memcpy>
"\r\nrun: Start a program\r\nstop: Stop a program\r\nread:"
"Read the last value before changing power supply\r\n"
"\r\ncont: To continue\r\n";
char error[]="\r\nWrong key\r\n";
 8001552:	23cc      	movs	r3, #204	; 0xcc
 8001554:	18fb      	adds	r3, r7, r3
 8001556:	4ad6      	ldr	r2, [pc, #856]	; (80018b0 <MENU_USB+0x384>)
 8001558:	ca13      	ldmia	r2!, {r0, r1, r4}
 800155a:	c313      	stmia	r3!, {r0, r1, r4}
 800155c:	8812      	ldrh	r2, [r2, #0]
 800155e:	801a      	strh	r2, [r3, #0]
char error_with_run[]="\r\nrun num freq duty cycle(max 99)\r\n";
 8001560:	23a8      	movs	r3, #168	; 0xa8
 8001562:	18fb      	adds	r3, r7, r3
 8001564:	4ad3      	ldr	r2, [pc, #844]	; (80018b4 <MENU_USB+0x388>)
 8001566:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001568:	c313      	stmia	r3!, {r0, r1, r4}
 800156a:	ca13      	ldmia	r2!, {r0, r1, r4}
 800156c:	c313      	stmia	r3!, {r0, r1, r4}
 800156e:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001570:	c313      	stmia	r3!, {r0, r1, r4}
char error_with_duty_cycle[]="\r\nToo high value of duty cycle\r\n";
 8001572:	4bd1      	ldr	r3, [pc, #836]	; (80018b8 <MENU_USB+0x38c>)
 8001574:	195b      	adds	r3, r3, r5
 8001576:	19db      	adds	r3, r3, r7
 8001578:	4ad0      	ldr	r2, [pc, #832]	; (80018bc <MENU_USB+0x390>)
 800157a:	ca13      	ldmia	r2!, {r0, r1, r4}
 800157c:	c313      	stmia	r3!, {r0, r1, r4}
 800157e:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001580:	c313      	stmia	r3!, {r0, r1, r4}
 8001582:	ca03      	ldmia	r2!, {r0, r1}
 8001584:	c303      	stmia	r3!, {r0, r1}
 8001586:	7812      	ldrb	r2, [r2, #0]
 8001588:	701a      	strb	r2, [r3, #0]
char error_with_lenght[]="\r\nToo long command\n\r";
 800158a:	4bcd      	ldr	r3, [pc, #820]	; (80018c0 <MENU_USB+0x394>)
 800158c:	195b      	adds	r3, r3, r5
 800158e:	19db      	adds	r3, r3, r7
 8001590:	4acc      	ldr	r2, [pc, #816]	; (80018c4 <MENU_USB+0x398>)
 8001592:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001594:	c313      	stmia	r3!, {r0, r1, r4}
 8001596:	ca03      	ldmia	r2!, {r0, r1}
 8001598:	c303      	stmia	r3!, {r0, r1}
 800159a:	7812      	ldrb	r2, [r2, #0]
 800159c:	701a      	strb	r2, [r3, #0]
int result;
char * ptr;
 		if (value == '\r' || value == '\n') {
 800159e:	4bc2      	ldr	r3, [pc, #776]	; (80018a8 <MENU_USB+0x37c>)
 80015a0:	195b      	adds	r3, r3, r5
 80015a2:	19db      	adds	r3, r3, r7
 80015a4:	781b      	ldrb	r3, [r3, #0]
 80015a6:	2b0d      	cmp	r3, #13
 80015a8:	d006      	beq.n	80015b8 <MENU_USB+0x8c>
 80015aa:	4bbf      	ldr	r3, [pc, #764]	; (80018a8 <MENU_USB+0x37c>)
 80015ac:	195b      	adds	r3, r3, r5
 80015ae:	19db      	adds	r3, r3, r7
 80015b0:	781b      	ldrb	r3, [r3, #0]
 80015b2:	2b0a      	cmp	r3, #10
 80015b4:	d000      	beq.n	80015b8 <MENU_USB+0x8c>
 80015b6:	e342      	b.n	8001c3e <MENU_USB+0x712>
			if (line_length > 0) {
 80015b8:	4bc3      	ldr	r3, [pc, #780]	; (80018c8 <MENU_USB+0x39c>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d100      	bne.n	80015c2 <MENU_USB+0x96>
 80015c0:	e332      	b.n	8001c28 <MENU_USB+0x6fc>
				line_buffer[line_length] = '\0';
 80015c2:	4bc1      	ldr	r3, [pc, #772]	; (80018c8 <MENU_USB+0x39c>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	4ac1      	ldr	r2, [pc, #772]	; (80018cc <MENU_USB+0x3a0>)
 80015c8:	2100      	movs	r1, #0
 80015ca:	54d1      	strb	r1, [r2, r3]
					if (strncmp(line_buffer, "run",3) == 0) {
 80015cc:	49c0      	ldr	r1, [pc, #768]	; (80018d0 <MENU_USB+0x3a4>)
 80015ce:	4bbf      	ldr	r3, [pc, #764]	; (80018cc <MENU_USB+0x3a0>)
 80015d0:	2203      	movs	r2, #3
 80015d2:	0018      	movs	r0, r3
 80015d4:	f004 fd17 	bl	8006006 <strncmp>
 80015d8:	1e03      	subs	r3, r0, #0
 80015da:	d000      	beq.n	80015de <MENU_USB+0xb2>
 80015dc:	e204      	b.n	80019e8 <MENU_USB+0x4bc>
						splitString(line_buffer, tokens);
 80015de:	4abd      	ldr	r2, [pc, #756]	; (80018d4 <MENU_USB+0x3a8>)
 80015e0:	4bba      	ldr	r3, [pc, #744]	; (80018cc <MENU_USB+0x3a0>)
 80015e2:	0011      	movs	r1, r2
 80015e4:	0018      	movs	r0, r3
 80015e6:	f000 fbbb 	bl	8001d60 <splitString>
						ptr=strpbrk(tokens[1], "oo");
 80015ea:	4bba      	ldr	r3, [pc, #744]	; (80018d4 <MENU_USB+0x3a8>)
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	4aba      	ldr	r2, [pc, #744]	; (80018d8 <MENU_USB+0x3ac>)
 80015f0:	0011      	movs	r1, r2
 80015f2:	0018      	movs	r0, r3
 80015f4:	f004 fd18 	bl	8006028 <strpbrk>
 80015f8:	0003      	movs	r3, r0
 80015fa:	22c0      	movs	r2, #192	; 0xc0
 80015fc:	0052      	lsls	r2, r2, #1
 80015fe:	18b9      	adds	r1, r7, r2
 8001600:	600b      	str	r3, [r1, #0]
						if(!(ptr==NULL)){
 8001602:	18bb      	adds	r3, r7, r2
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	2b00      	cmp	r3, #0
 8001608:	d100      	bne.n	800160c <MENU_USB+0xe0>
 800160a:	e0bc      	b.n	8001786 <MENU_USB+0x25a>
							for(int i=2;i<MAX_TOKENS;i++){
 800160c:	2302      	movs	r3, #2
 800160e:	22cc      	movs	r2, #204	; 0xcc
 8001610:	0052      	lsls	r2, r2, #1
 8001612:	18ba      	adds	r2, r7, r2
 8001614:	6013      	str	r3, [r2, #0]
 8001616:	e047      	b.n	80016a8 <MENU_USB+0x17c>
								result=1;
 8001618:	2301      	movs	r3, #1
 800161a:	22ce      	movs	r2, #206	; 0xce
 800161c:	0052      	lsls	r2, r2, #1
 800161e:	18ba      	adds	r2, r7, r2
 8001620:	6013      	str	r3, [r2, #0]
								for(int j=0;j<strlen(tokens[i]);j++){
 8001622:	2300      	movs	r3, #0
 8001624:	22ca      	movs	r2, #202	; 0xca
 8001626:	0052      	lsls	r2, r2, #1
 8001628:	18ba      	adds	r2, r7, r2
 800162a:	6013      	str	r3, [r2, #0]
 800162c:	e020      	b.n	8001670 <MENU_USB+0x144>
									if(!isdigit(tokens[i][j])){
 800162e:	4ba9      	ldr	r3, [pc, #676]	; (80018d4 <MENU_USB+0x3a8>)
 8001630:	22cc      	movs	r2, #204	; 0xcc
 8001632:	0052      	lsls	r2, r2, #1
 8001634:	18ba      	adds	r2, r7, r2
 8001636:	6812      	ldr	r2, [r2, #0]
 8001638:	0092      	lsls	r2, r2, #2
 800163a:	58d2      	ldr	r2, [r2, r3]
 800163c:	23ca      	movs	r3, #202	; 0xca
 800163e:	005b      	lsls	r3, r3, #1
 8001640:	18fb      	adds	r3, r7, r3
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	18d3      	adds	r3, r2, r3
 8001646:	781b      	ldrb	r3, [r3, #0]
 8001648:	1c5a      	adds	r2, r3, #1
 800164a:	4ba4      	ldr	r3, [pc, #656]	; (80018dc <MENU_USB+0x3b0>)
 800164c:	18d3      	adds	r3, r2, r3
 800164e:	781b      	ldrb	r3, [r3, #0]
 8001650:	001a      	movs	r2, r3
 8001652:	2304      	movs	r3, #4
 8001654:	4013      	ands	r3, r2
 8001656:	d104      	bne.n	8001662 <MENU_USB+0x136>
										result=0;
 8001658:	2300      	movs	r3, #0
 800165a:	22ce      	movs	r2, #206	; 0xce
 800165c:	0052      	lsls	r2, r2, #1
 800165e:	18ba      	adds	r2, r7, r2
 8001660:	6013      	str	r3, [r2, #0]
								for(int j=0;j<strlen(tokens[i]);j++){
 8001662:	22ca      	movs	r2, #202	; 0xca
 8001664:	0052      	lsls	r2, r2, #1
 8001666:	18bb      	adds	r3, r7, r2
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	3301      	adds	r3, #1
 800166c:	18ba      	adds	r2, r7, r2
 800166e:	6013      	str	r3, [r2, #0]
 8001670:	4b98      	ldr	r3, [pc, #608]	; (80018d4 <MENU_USB+0x3a8>)
 8001672:	24cc      	movs	r4, #204	; 0xcc
 8001674:	0064      	lsls	r4, r4, #1
 8001676:	193a      	adds	r2, r7, r4
 8001678:	6812      	ldr	r2, [r2, #0]
 800167a:	0092      	lsls	r2, r2, #2
 800167c:	58d3      	ldr	r3, [r2, r3]
 800167e:	0018      	movs	r0, r3
 8001680:	f7fe fd4c 	bl	800011c <strlen>
 8001684:	0002      	movs	r2, r0
 8001686:	23ca      	movs	r3, #202	; 0xca
 8001688:	005b      	lsls	r3, r3, #1
 800168a:	18fb      	adds	r3, r7, r3
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	429a      	cmp	r2, r3
 8001690:	d8cd      	bhi.n	800162e <MENU_USB+0x102>
									}
								}
								if(result==0){
 8001692:	23ce      	movs	r3, #206	; 0xce
 8001694:	005b      	lsls	r3, r3, #1
 8001696:	18fb      	adds	r3, r7, r3
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d00b      	beq.n	80016b6 <MENU_USB+0x18a>
							for(int i=2;i<MAX_TOKENS;i++){
 800169e:	193b      	adds	r3, r7, r4
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	3301      	adds	r3, #1
 80016a4:	193a      	adds	r2, r7, r4
 80016a6:	6013      	str	r3, [r2, #0]
 80016a8:	23cc      	movs	r3, #204	; 0xcc
 80016aa:	005b      	lsls	r3, r3, #1
 80016ac:	18fb      	adds	r3, r7, r3
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	2b03      	cmp	r3, #3
 80016b2:	ddb1      	ble.n	8001618 <MENU_USB+0xec>
 80016b4:	e000      	b.n	80016b8 <MENU_USB+0x18c>
									break;
 80016b6:	46c0      	nop			; (mov r8, r8)
								}
							}
							if(result!=0){
 80016b8:	23ce      	movs	r3, #206	; 0xce
 80016ba:	005b      	lsls	r3, r3, #1
 80016bc:	18fb      	adds	r3, r7, r3
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d05a      	beq.n	800177a <MENU_USB+0x24e>
									freq=ASCII_TO_uint8_t(tokens[MAX_TOKENS-2]);
 80016c4:	4b83      	ldr	r3, [pc, #524]	; (80018d4 <MENU_USB+0x3a8>)
 80016c6:	689b      	ldr	r3, [r3, #8]
 80016c8:	0018      	movs	r0, r3
 80016ca:	f000 fb15 	bl	8001cf8 <ASCII_TO_uint8_t>
 80016ce:	0002      	movs	r2, r0
 80016d0:	4b83      	ldr	r3, [pc, #524]	; (80018e0 <MENU_USB+0x3b4>)
 80016d2:	601a      	str	r2, [r3, #0]
									duty_cycle=ASCII_TO_uint8_t(tokens[MAX_TOKENS-1]);
 80016d4:	4b7f      	ldr	r3, [pc, #508]	; (80018d4 <MENU_USB+0x3a8>)
 80016d6:	68db      	ldr	r3, [r3, #12]
 80016d8:	0018      	movs	r0, r3
 80016da:	f000 fb0d 	bl	8001cf8 <ASCII_TO_uint8_t>
 80016de:	0002      	movs	r2, r0
 80016e0:	4b80      	ldr	r3, [pc, #512]	; (80018e4 <MENU_USB+0x3b8>)
 80016e2:	601a      	str	r2, [r3, #0]
									if(freq==0 || duty_cycle==0){
 80016e4:	4b7e      	ldr	r3, [pc, #504]	; (80018e0 <MENU_USB+0x3b4>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d003      	beq.n	80016f4 <MENU_USB+0x1c8>
 80016ec:	4b7d      	ldr	r3, [pc, #500]	; (80018e4 <MENU_USB+0x3b8>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d105      	bne.n	8001700 <MENU_USB+0x1d4>
										printf(error_with_run);
 80016f4:	23a8      	movs	r3, #168	; 0xa8
 80016f6:	18fb      	adds	r3, r7, r3
 80016f8:	0018      	movs	r0, r3
 80016fa:	f004 fadd 	bl	8005cb8 <iprintf>
 80016fe:	e157      	b.n	80019b0 <MENU_USB+0x484>
									}
									else if(duty_cycle>=100){
 8001700:	4b78      	ldr	r3, [pc, #480]	; (80018e4 <MENU_USB+0x3b8>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	2b63      	cmp	r3, #99	; 0x63
 8001706:	d905      	bls.n	8001714 <MENU_USB+0x1e8>
										printf(error_with_duty_cycle);
 8001708:	2384      	movs	r3, #132	; 0x84
 800170a:	18fb      	adds	r3, r7, r3
 800170c:	0018      	movs	r0, r3
 800170e:	f004 fad3 	bl	8005cb8 <iprintf>
 8001712:	e14d      	b.n	80019b0 <MENU_USB+0x484>
									}
									else{
										Period=(float)(1000/freq);
 8001714:	4b72      	ldr	r3, [pc, #456]	; (80018e0 <MENU_USB+0x3b4>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	0019      	movs	r1, r3
 800171a:	23fa      	movs	r3, #250	; 0xfa
 800171c:	0098      	lsls	r0, r3, #2
 800171e:	f7fe fd0f 	bl	8000140 <__udivsi3>
 8001722:	0003      	movs	r3, r0
 8001724:	0018      	movs	r0, r3
 8001726:	f7ff faf1 	bl	8000d0c <__aeabi_ui2f>
 800172a:	1c02      	adds	r2, r0, #0
 800172c:	4b6e      	ldr	r3, [pc, #440]	; (80018e8 <MENU_USB+0x3bc>)
 800172e:	601a      	str	r2, [r3, #0]
										Ton=(float)((Period*duty_cycle)/100);
 8001730:	4b6c      	ldr	r3, [pc, #432]	; (80018e4 <MENU_USB+0x3b8>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	0018      	movs	r0, r3
 8001736:	f7ff fae9 	bl	8000d0c <__aeabi_ui2f>
 800173a:	1c02      	adds	r2, r0, #0
 800173c:	4b6a      	ldr	r3, [pc, #424]	; (80018e8 <MENU_USB+0x3bc>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	1c19      	adds	r1, r3, #0
 8001742:	1c10      	adds	r0, r2, #0
 8001744:	f7fe ffd4 	bl	80006f0 <__aeabi_fmul>
 8001748:	1c03      	adds	r3, r0, #0
 800174a:	4968      	ldr	r1, [pc, #416]	; (80018ec <MENU_USB+0x3c0>)
 800174c:	1c18      	adds	r0, r3, #0
 800174e:	f7fe feb5 	bl	80004bc <__aeabi_fdiv>
 8001752:	1c03      	adds	r3, r0, #0
 8001754:	1c1a      	adds	r2, r3, #0
 8001756:	4b66      	ldr	r3, [pc, #408]	; (80018f0 <MENU_USB+0x3c4>)
 8001758:	601a      	str	r2, [r3, #0]
										Toff=Period-Ton;
 800175a:	4b63      	ldr	r3, [pc, #396]	; (80018e8 <MENU_USB+0x3bc>)
 800175c:	681a      	ldr	r2, [r3, #0]
 800175e:	4b64      	ldr	r3, [pc, #400]	; (80018f0 <MENU_USB+0x3c4>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	1c19      	adds	r1, r3, #0
 8001764:	1c10      	adds	r0, r2, #0
 8001766:	f7ff f911 	bl	800098c <__aeabi_fsub>
 800176a:	1c03      	adds	r3, r0, #0
 800176c:	1c1a      	adds	r2, r3, #0
 800176e:	4b61      	ldr	r3, [pc, #388]	; (80018f4 <MENU_USB+0x3c8>)
 8001770:	601a      	str	r2, [r3, #0]
//										save_data(Addr_Ton, (uint32_t)Ton);
//										save_data(Addr_Toff, (uint32_t)Toff);
										state=1;
 8001772:	4b61      	ldr	r3, [pc, #388]	; (80018f8 <MENU_USB+0x3cc>)
 8001774:	2201      	movs	r2, #1
 8001776:	601a      	str	r2, [r3, #0]
 8001778:	e11a      	b.n	80019b0 <MENU_USB+0x484>
									}
							}
							else{
								printf(error_with_run);
 800177a:	23a8      	movs	r3, #168	; 0xa8
 800177c:	18fb      	adds	r3, r7, r3
 800177e:	0018      	movs	r0, r3
 8001780:	f004 fa9a 	bl	8005cb8 <iprintf>
 8001784:	e114      	b.n	80019b0 <MENU_USB+0x484>
							}
						}
						else{
							for(int i=1;i<MAX_TOKENS;i++){
 8001786:	2301      	movs	r3, #1
 8001788:	22c8      	movs	r2, #200	; 0xc8
 800178a:	0052      	lsls	r2, r2, #1
 800178c:	18ba      	adds	r2, r7, r2
 800178e:	6013      	str	r3, [r2, #0]
 8001790:	e047      	b.n	8001822 <MENU_USB+0x2f6>
								result=1;
 8001792:	2301      	movs	r3, #1
 8001794:	22ce      	movs	r2, #206	; 0xce
 8001796:	0052      	lsls	r2, r2, #1
 8001798:	18ba      	adds	r2, r7, r2
 800179a:	6013      	str	r3, [r2, #0]
								for(int j=0;j<strlen(tokens[i]);j++){
 800179c:	2300      	movs	r3, #0
 800179e:	22c6      	movs	r2, #198	; 0xc6
 80017a0:	0052      	lsls	r2, r2, #1
 80017a2:	18ba      	adds	r2, r7, r2
 80017a4:	6013      	str	r3, [r2, #0]
 80017a6:	e020      	b.n	80017ea <MENU_USB+0x2be>
									if(!isdigit(tokens[i][j])){
 80017a8:	4b4a      	ldr	r3, [pc, #296]	; (80018d4 <MENU_USB+0x3a8>)
 80017aa:	22c8      	movs	r2, #200	; 0xc8
 80017ac:	0052      	lsls	r2, r2, #1
 80017ae:	18ba      	adds	r2, r7, r2
 80017b0:	6812      	ldr	r2, [r2, #0]
 80017b2:	0092      	lsls	r2, r2, #2
 80017b4:	58d2      	ldr	r2, [r2, r3]
 80017b6:	23c6      	movs	r3, #198	; 0xc6
 80017b8:	005b      	lsls	r3, r3, #1
 80017ba:	18fb      	adds	r3, r7, r3
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	18d3      	adds	r3, r2, r3
 80017c0:	781b      	ldrb	r3, [r3, #0]
 80017c2:	1c5a      	adds	r2, r3, #1
 80017c4:	4b45      	ldr	r3, [pc, #276]	; (80018dc <MENU_USB+0x3b0>)
 80017c6:	18d3      	adds	r3, r2, r3
 80017c8:	781b      	ldrb	r3, [r3, #0]
 80017ca:	001a      	movs	r2, r3
 80017cc:	2304      	movs	r3, #4
 80017ce:	4013      	ands	r3, r2
 80017d0:	d104      	bne.n	80017dc <MENU_USB+0x2b0>
										result=0;
 80017d2:	2300      	movs	r3, #0
 80017d4:	22ce      	movs	r2, #206	; 0xce
 80017d6:	0052      	lsls	r2, r2, #1
 80017d8:	18ba      	adds	r2, r7, r2
 80017da:	6013      	str	r3, [r2, #0]
								for(int j=0;j<strlen(tokens[i]);j++){
 80017dc:	22c6      	movs	r2, #198	; 0xc6
 80017de:	0052      	lsls	r2, r2, #1
 80017e0:	18bb      	adds	r3, r7, r2
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	3301      	adds	r3, #1
 80017e6:	18ba      	adds	r2, r7, r2
 80017e8:	6013      	str	r3, [r2, #0]
 80017ea:	4b3a      	ldr	r3, [pc, #232]	; (80018d4 <MENU_USB+0x3a8>)
 80017ec:	24c8      	movs	r4, #200	; 0xc8
 80017ee:	0064      	lsls	r4, r4, #1
 80017f0:	193a      	adds	r2, r7, r4
 80017f2:	6812      	ldr	r2, [r2, #0]
 80017f4:	0092      	lsls	r2, r2, #2
 80017f6:	58d3      	ldr	r3, [r2, r3]
 80017f8:	0018      	movs	r0, r3
 80017fa:	f7fe fc8f 	bl	800011c <strlen>
 80017fe:	0002      	movs	r2, r0
 8001800:	23c6      	movs	r3, #198	; 0xc6
 8001802:	005b      	lsls	r3, r3, #1
 8001804:	18fb      	adds	r3, r7, r3
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	429a      	cmp	r2, r3
 800180a:	d8cd      	bhi.n	80017a8 <MENU_USB+0x27c>
									}
								}
								if(result==0){
 800180c:	23ce      	movs	r3, #206	; 0xce
 800180e:	005b      	lsls	r3, r3, #1
 8001810:	18fb      	adds	r3, r7, r3
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d00b      	beq.n	8001830 <MENU_USB+0x304>
							for(int i=1;i<MAX_TOKENS;i++){
 8001818:	193b      	adds	r3, r7, r4
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	3301      	adds	r3, #1
 800181e:	193a      	adds	r2, r7, r4
 8001820:	6013      	str	r3, [r2, #0]
 8001822:	23c8      	movs	r3, #200	; 0xc8
 8001824:	005b      	lsls	r3, r3, #1
 8001826:	18fb      	adds	r3, r7, r3
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	2b03      	cmp	r3, #3
 800182c:	ddb1      	ble.n	8001792 <MENU_USB+0x266>
 800182e:	e000      	b.n	8001832 <MENU_USB+0x306>
									break;
 8001830:	46c0      	nop			; (mov r8, r8)
								}
							}
								if(result!=0){
 8001832:	23ce      	movs	r3, #206	; 0xce
 8001834:	005b      	lsls	r3, r3, #1
 8001836:	18fb      	adds	r3, r7, r3
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	2b00      	cmp	r3, #0
 800183c:	d100      	bne.n	8001840 <MENU_USB+0x314>
 800183e:	e0b2      	b.n	80019a6 <MENU_USB+0x47a>
									num=ASCII_TO_uint8_t(tokens[MAX_TOKENS-3]);
 8001840:	4b24      	ldr	r3, [pc, #144]	; (80018d4 <MENU_USB+0x3a8>)
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	0018      	movs	r0, r3
 8001846:	f000 fa57 	bl	8001cf8 <ASCII_TO_uint8_t>
 800184a:	0002      	movs	r2, r0
 800184c:	4b2b      	ldr	r3, [pc, #172]	; (80018fc <MENU_USB+0x3d0>)
 800184e:	601a      	str	r2, [r3, #0]
									freq=ASCII_TO_uint8_t(tokens[MAX_TOKENS-2]);
 8001850:	4b20      	ldr	r3, [pc, #128]	; (80018d4 <MENU_USB+0x3a8>)
 8001852:	689b      	ldr	r3, [r3, #8]
 8001854:	0018      	movs	r0, r3
 8001856:	f000 fa4f 	bl	8001cf8 <ASCII_TO_uint8_t>
 800185a:	0002      	movs	r2, r0
 800185c:	4b20      	ldr	r3, [pc, #128]	; (80018e0 <MENU_USB+0x3b4>)
 800185e:	601a      	str	r2, [r3, #0]
									duty_cycle=ASCII_TO_uint8_t(tokens[MAX_TOKENS-1]);
 8001860:	4b1c      	ldr	r3, [pc, #112]	; (80018d4 <MENU_USB+0x3a8>)
 8001862:	68db      	ldr	r3, [r3, #12]
 8001864:	0018      	movs	r0, r3
 8001866:	f000 fa47 	bl	8001cf8 <ASCII_TO_uint8_t>
 800186a:	0002      	movs	r2, r0
 800186c:	4b1d      	ldr	r3, [pc, #116]	; (80018e4 <MENU_USB+0x3b8>)
 800186e:	601a      	str	r2, [r3, #0]
									if(num==0 || freq==0 || duty_cycle==0 ){
 8001870:	4b22      	ldr	r3, [pc, #136]	; (80018fc <MENU_USB+0x3d0>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d007      	beq.n	8001888 <MENU_USB+0x35c>
 8001878:	4b19      	ldr	r3, [pc, #100]	; (80018e0 <MENU_USB+0x3b4>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d003      	beq.n	8001888 <MENU_USB+0x35c>
 8001880:	4b18      	ldr	r3, [pc, #96]	; (80018e4 <MENU_USB+0x3b8>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d105      	bne.n	8001894 <MENU_USB+0x368>
										printf(error_with_run);
 8001888:	23a8      	movs	r3, #168	; 0xa8
 800188a:	18fb      	adds	r3, r7, r3
 800188c:	0018      	movs	r0, r3
 800188e:	f004 fa13 	bl	8005cb8 <iprintf>
 8001892:	e08d      	b.n	80019b0 <MENU_USB+0x484>
									}
									else if(duty_cycle>=100){
 8001894:	4b13      	ldr	r3, [pc, #76]	; (80018e4 <MENU_USB+0x3b8>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	2b63      	cmp	r3, #99	; 0x63
 800189a:	d931      	bls.n	8001900 <MENU_USB+0x3d4>
										printf(error_with_duty_cycle);
 800189c:	2384      	movs	r3, #132	; 0x84
 800189e:	18fb      	adds	r3, r7, r3
 80018a0:	0018      	movs	r0, r3
 80018a2:	f004 fa09 	bl	8005cb8 <iprintf>
 80018a6:	e083      	b.n	80019b0 <MENU_USB+0x484>
 80018a8:	fffffe67 	.word	0xfffffe67
 80018ac:	08006fb8 	.word	0x08006fb8
 80018b0:	0800705c 	.word	0x0800705c
 80018b4:	0800706c 	.word	0x0800706c
 80018b8:	fffffee4 	.word	0xfffffee4
 80018bc:	08007090 	.word	0x08007090
 80018c0:	fffffecc 	.word	0xfffffecc
 80018c4:	080070b4 	.word	0x080070b4
 80018c8:	20000124 	.word	0x20000124
 80018cc:	200000c0 	.word	0x200000c0
 80018d0:	08006f74 	.word	0x08006f74
 80018d4:	20000114 	.word	0x20000114
 80018d8:	08006f78 	.word	0x08006f78
 80018dc:	080071b8 	.word	0x080071b8
 80018e0:	200000a8 	.word	0x200000a8
 80018e4:	200000ac 	.word	0x200000ac
 80018e8:	200000bc 	.word	0x200000bc
 80018ec:	42c80000 	.word	0x42c80000
 80018f0:	200000b4 	.word	0x200000b4
 80018f4:	200000b8 	.word	0x200000b8
 80018f8:	20000128 	.word	0x20000128
 80018fc:	20000098 	.word	0x20000098
									}
									else{
										Period=(float)(1000/freq);
 8001900:	4be0      	ldr	r3, [pc, #896]	; (8001c84 <MENU_USB+0x758>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	0019      	movs	r1, r3
 8001906:	23fa      	movs	r3, #250	; 0xfa
 8001908:	0098      	lsls	r0, r3, #2
 800190a:	f7fe fc19 	bl	8000140 <__udivsi3>
 800190e:	0003      	movs	r3, r0
 8001910:	0018      	movs	r0, r3
 8001912:	f7ff f9fb 	bl	8000d0c <__aeabi_ui2f>
 8001916:	1c02      	adds	r2, r0, #0
 8001918:	4bdb      	ldr	r3, [pc, #876]	; (8001c88 <MENU_USB+0x75c>)
 800191a:	601a      	str	r2, [r3, #0]
										Ton=(float)((Period*duty_cycle)/100);
 800191c:	4bdb      	ldr	r3, [pc, #876]	; (8001c8c <MENU_USB+0x760>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	0018      	movs	r0, r3
 8001922:	f7ff f9f3 	bl	8000d0c <__aeabi_ui2f>
 8001926:	1c02      	adds	r2, r0, #0
 8001928:	4bd7      	ldr	r3, [pc, #860]	; (8001c88 <MENU_USB+0x75c>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	1c19      	adds	r1, r3, #0
 800192e:	1c10      	adds	r0, r2, #0
 8001930:	f7fe fede 	bl	80006f0 <__aeabi_fmul>
 8001934:	1c03      	adds	r3, r0, #0
 8001936:	49d6      	ldr	r1, [pc, #856]	; (8001c90 <MENU_USB+0x764>)
 8001938:	1c18      	adds	r0, r3, #0
 800193a:	f7fe fdbf 	bl	80004bc <__aeabi_fdiv>
 800193e:	1c03      	adds	r3, r0, #0
 8001940:	1c1a      	adds	r2, r3, #0
 8001942:	4bd4      	ldr	r3, [pc, #848]	; (8001c94 <MENU_USB+0x768>)
 8001944:	601a      	str	r2, [r3, #0]
										Toff=Period-Ton;
 8001946:	4bd0      	ldr	r3, [pc, #832]	; (8001c88 <MENU_USB+0x75c>)
 8001948:	681a      	ldr	r2, [r3, #0]
 800194a:	4bd2      	ldr	r3, [pc, #840]	; (8001c94 <MENU_USB+0x768>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	1c19      	adds	r1, r3, #0
 8001950:	1c10      	adds	r0, r2, #0
 8001952:	f7ff f81b 	bl	800098c <__aeabi_fsub>
 8001956:	1c03      	adds	r3, r0, #0
 8001958:	1c1a      	adds	r2, r3, #0
 800195a:	4bcf      	ldr	r3, [pc, #828]	; (8001c98 <MENU_USB+0x76c>)
 800195c:	601a      	str	r2, [r3, #0]
										save_data(Addr_num, num);
 800195e:	4bcf      	ldr	r3, [pc, #828]	; (8001c9c <MENU_USB+0x770>)
 8001960:	681a      	ldr	r2, [r3, #0]
 8001962:	4bcf      	ldr	r3, [pc, #828]	; (8001ca0 <MENU_USB+0x774>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	0019      	movs	r1, r3
 8001968:	0010      	movs	r0, r2
 800196a:	f7ff fb49 	bl	8001000 <save_data>
										save_data(Addr_Ton, (uint32_t)Ton);
 800196e:	4bcd      	ldr	r3, [pc, #820]	; (8001ca4 <MENU_USB+0x778>)
 8001970:	681c      	ldr	r4, [r3, #0]
 8001972:	4bc8      	ldr	r3, [pc, #800]	; (8001c94 <MENU_USB+0x768>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	1c18      	adds	r0, r3, #0
 8001978:	f7fe fcbc 	bl	80002f4 <__aeabi_f2uiz>
 800197c:	0003      	movs	r3, r0
 800197e:	0019      	movs	r1, r3
 8001980:	0020      	movs	r0, r4
 8001982:	f7ff fb3d 	bl	8001000 <save_data>
										save_data(Addr_Toff, (uint32_t)Toff);
 8001986:	4bc8      	ldr	r3, [pc, #800]	; (8001ca8 <MENU_USB+0x77c>)
 8001988:	681c      	ldr	r4, [r3, #0]
 800198a:	4bc3      	ldr	r3, [pc, #780]	; (8001c98 <MENU_USB+0x76c>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	1c18      	adds	r0, r3, #0
 8001990:	f7fe fcb0 	bl	80002f4 <__aeabi_f2uiz>
 8001994:	0003      	movs	r3, r0
 8001996:	0019      	movs	r1, r3
 8001998:	0020      	movs	r0, r4
 800199a:	f7ff fb31 	bl	8001000 <save_data>
										state=2;
 800199e:	4bc3      	ldr	r3, [pc, #780]	; (8001cac <MENU_USB+0x780>)
 80019a0:	2202      	movs	r2, #2
 80019a2:	601a      	str	r2, [r3, #0]
 80019a4:	e004      	b.n	80019b0 <MENU_USB+0x484>
									}
								}
								else{
									printf(error_with_run);
 80019a6:	23a8      	movs	r3, #168	; 0xa8
 80019a8:	18fb      	adds	r3, r7, r3
 80019aa:	0018      	movs	r0, r3
 80019ac:	f004 f984 	bl	8005cb8 <iprintf>
								}
						}
						for (int i = 0; i < sizeof(tokens) / sizeof(tokens[0]); i++) {
 80019b0:	2300      	movs	r3, #0
 80019b2:	22c4      	movs	r2, #196	; 0xc4
 80019b4:	0052      	lsls	r2, r2, #1
 80019b6:	18ba      	adds	r2, r7, r2
 80019b8:	6013      	str	r3, [r2, #0]
 80019ba:	e00e      	b.n	80019da <MENU_USB+0x4ae>
							 free(tokens[i]);
 80019bc:	4bbc      	ldr	r3, [pc, #752]	; (8001cb0 <MENU_USB+0x784>)
 80019be:	24c4      	movs	r4, #196	; 0xc4
 80019c0:	0064      	lsls	r4, r4, #1
 80019c2:	193a      	adds	r2, r7, r4
 80019c4:	6812      	ldr	r2, [r2, #0]
 80019c6:	0092      	lsls	r2, r2, #2
 80019c8:	58d3      	ldr	r3, [r2, r3]
 80019ca:	0018      	movs	r0, r3
 80019cc:	f004 f804 	bl	80059d8 <free>
						for (int i = 0; i < sizeof(tokens) / sizeof(tokens[0]); i++) {
 80019d0:	193b      	adds	r3, r7, r4
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	3301      	adds	r3, #1
 80019d6:	193a      	adds	r2, r7, r4
 80019d8:	6013      	str	r3, [r2, #0]
 80019da:	23c4      	movs	r3, #196	; 0xc4
 80019dc:	005b      	lsls	r3, r3, #1
 80019de:	18fb      	adds	r3, r7, r3
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	2b03      	cmp	r3, #3
 80019e4:	d9ea      	bls.n	80019bc <MENU_USB+0x490>
 80019e6:	e101      	b.n	8001bec <MENU_USB+0x6c0>
						}
				}
				else if (strcmp(line_buffer, "stop") == 0){
 80019e8:	4ab2      	ldr	r2, [pc, #712]	; (8001cb4 <MENU_USB+0x788>)
 80019ea:	4bb3      	ldr	r3, [pc, #716]	; (8001cb8 <MENU_USB+0x78c>)
 80019ec:	0011      	movs	r1, r2
 80019ee:	0018      	movs	r0, r3
 80019f0:	f7fe fb8a 	bl	8000108 <strcmp>
 80019f4:	1e03      	subs	r3, r0, #0
 80019f6:	d103      	bne.n	8001a00 <MENU_USB+0x4d4>
					state=4;
 80019f8:	4bac      	ldr	r3, [pc, #688]	; (8001cac <MENU_USB+0x780>)
 80019fa:	2204      	movs	r2, #4
 80019fc:	601a      	str	r2, [r3, #0]
 80019fe:	e0f5      	b.n	8001bec <MENU_USB+0x6c0>
				}
				else if (strcmp(line_buffer, "read") == 0){
 8001a00:	4aae      	ldr	r2, [pc, #696]	; (8001cbc <MENU_USB+0x790>)
 8001a02:	4bad      	ldr	r3, [pc, #692]	; (8001cb8 <MENU_USB+0x78c>)
 8001a04:	0011      	movs	r1, r2
 8001a06:	0018      	movs	r0, r3
 8001a08:	f7fe fb7e 	bl	8000108 <strcmp>
 8001a0c:	1e03      	subs	r3, r0, #0
 8001a0e:	d000      	beq.n	8001a12 <MENU_USB+0x4e6>
 8001a10:	e084      	b.n	8001b1c <MENU_USB+0x5f0>
					if(read_data(Addr_num)>0){
 8001a12:	4ba2      	ldr	r3, [pc, #648]	; (8001c9c <MENU_USB+0x770>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	0018      	movs	r0, r3
 8001a18:	f7ff fb17 	bl	800104a <read_data>
 8001a1c:	1e03      	subs	r3, r0, #0
 8001a1e:	d01f      	beq.n	8001a60 <MENU_USB+0x534>
						fdata1=read_data(Addr_num)-read_data(Addr_total_pulse);
 8001a20:	4b9e      	ldr	r3, [pc, #632]	; (8001c9c <MENU_USB+0x770>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	0018      	movs	r0, r3
 8001a26:	f7ff fb10 	bl	800104a <read_data>
 8001a2a:	0004      	movs	r4, r0
 8001a2c:	4ba4      	ldr	r3, [pc, #656]	; (8001cc0 <MENU_USB+0x794>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	0018      	movs	r0, r3
 8001a32:	f7ff fb0a 	bl	800104a <read_data>
 8001a36:	0003      	movs	r3, r0
 8001a38:	1ae2      	subs	r2, r4, r3
 8001a3a:	4ba2      	ldr	r3, [pc, #648]	; (8001cc4 <MENU_USB+0x798>)
 8001a3c:	601a      	str	r2, [r3, #0]
						fdata2=read_data(Addr_Ton);
 8001a3e:	4b99      	ldr	r3, [pc, #612]	; (8001ca4 <MENU_USB+0x778>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	0018      	movs	r0, r3
 8001a44:	f7ff fb01 	bl	800104a <read_data>
 8001a48:	0002      	movs	r2, r0
 8001a4a:	4b9f      	ldr	r3, [pc, #636]	; (8001cc8 <MENU_USB+0x79c>)
 8001a4c:	601a      	str	r2, [r3, #0]
						fdata3=read_data(Addr_Toff);
 8001a4e:	4b96      	ldr	r3, [pc, #600]	; (8001ca8 <MENU_USB+0x77c>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	0018      	movs	r0, r3
 8001a54:	f7ff faf9 	bl	800104a <read_data>
 8001a58:	0002      	movs	r2, r0
 8001a5a:	4b9c      	ldr	r3, [pc, #624]	; (8001ccc <MENU_USB+0x7a0>)
 8001a5c:	601a      	str	r2, [r3, #0]
 8001a5e:	e017      	b.n	8001a90 <MENU_USB+0x564>
					}
					else{
						fdata1=read_data(Addr_total_pulse);
 8001a60:	4b97      	ldr	r3, [pc, #604]	; (8001cc0 <MENU_USB+0x794>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	0018      	movs	r0, r3
 8001a66:	f7ff faf0 	bl	800104a <read_data>
 8001a6a:	0002      	movs	r2, r0
 8001a6c:	4b95      	ldr	r3, [pc, #596]	; (8001cc4 <MENU_USB+0x798>)
 8001a6e:	601a      	str	r2, [r3, #0]
						fdata2=read_data(Addr_Ton);
 8001a70:	4b8c      	ldr	r3, [pc, #560]	; (8001ca4 <MENU_USB+0x778>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	0018      	movs	r0, r3
 8001a76:	f7ff fae8 	bl	800104a <read_data>
 8001a7a:	0002      	movs	r2, r0
 8001a7c:	4b92      	ldr	r3, [pc, #584]	; (8001cc8 <MENU_USB+0x79c>)
 8001a7e:	601a      	str	r2, [r3, #0]
						fdata3=read_data(Addr_Toff);
 8001a80:	4b89      	ldr	r3, [pc, #548]	; (8001ca8 <MENU_USB+0x77c>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	0018      	movs	r0, r3
 8001a86:	f7ff fae0 	bl	800104a <read_data>
 8001a8a:	0002      	movs	r2, r0
 8001a8c:	4b8f      	ldr	r3, [pc, #572]	; (8001ccc <MENU_USB+0x7a0>)
 8001a8e:	601a      	str	r2, [r3, #0]
					}
				    char ch1[30];
				    char ch2[30];
				    char ch3[30];

				    printf("\n\r Pulses: ");
 8001a90:	4b8f      	ldr	r3, [pc, #572]	; (8001cd0 <MENU_USB+0x7a4>)
 8001a92:	0018      	movs	r0, r3
 8001a94:	f004 f910 	bl	8005cb8 <iprintf>
				    sprintf(ch1, "%lu", fdata1);
 8001a98:	4b8a      	ldr	r3, [pc, #552]	; (8001cc4 <MENU_USB+0x798>)
 8001a9a:	681a      	ldr	r2, [r3, #0]
 8001a9c:	498d      	ldr	r1, [pc, #564]	; (8001cd4 <MENU_USB+0x7a8>)
 8001a9e:	244c      	movs	r4, #76	; 0x4c
 8001aa0:	193b      	adds	r3, r7, r4
 8001aa2:	0018      	movs	r0, r3
 8001aa4:	f004 f978 	bl	8005d98 <siprintf>
				    HAL_UART_Transmit(&huart2, (uint8_t*)ch1, strlen(ch1), 200);
 8001aa8:	193b      	adds	r3, r7, r4
 8001aaa:	0018      	movs	r0, r3
 8001aac:	f7fe fb36 	bl	800011c <strlen>
 8001ab0:	0003      	movs	r3, r0
 8001ab2:	b29a      	uxth	r2, r3
 8001ab4:	1939      	adds	r1, r7, r4
 8001ab6:	4888      	ldr	r0, [pc, #544]	; (8001cd8 <MENU_USB+0x7ac>)
 8001ab8:	23c8      	movs	r3, #200	; 0xc8
 8001aba:	f002 fbe7 	bl	800428c <HAL_UART_Transmit>

				    printf("\n\r Ton");
 8001abe:	4b87      	ldr	r3, [pc, #540]	; (8001cdc <MENU_USB+0x7b0>)
 8001ac0:	0018      	movs	r0, r3
 8001ac2:	f004 f8f9 	bl	8005cb8 <iprintf>
				    sprintf(ch2, "%lu", fdata2);
 8001ac6:	4b80      	ldr	r3, [pc, #512]	; (8001cc8 <MENU_USB+0x79c>)
 8001ac8:	681a      	ldr	r2, [r3, #0]
 8001aca:	4982      	ldr	r1, [pc, #520]	; (8001cd4 <MENU_USB+0x7a8>)
 8001acc:	242c      	movs	r4, #44	; 0x2c
 8001ace:	193b      	adds	r3, r7, r4
 8001ad0:	0018      	movs	r0, r3
 8001ad2:	f004 f961 	bl	8005d98 <siprintf>
				    HAL_UART_Transmit(&huart2, (uint8_t*)ch2, strlen(ch2), 200);
 8001ad6:	193b      	adds	r3, r7, r4
 8001ad8:	0018      	movs	r0, r3
 8001ada:	f7fe fb1f 	bl	800011c <strlen>
 8001ade:	0003      	movs	r3, r0
 8001ae0:	b29a      	uxth	r2, r3
 8001ae2:	1939      	adds	r1, r7, r4
 8001ae4:	487c      	ldr	r0, [pc, #496]	; (8001cd8 <MENU_USB+0x7ac>)
 8001ae6:	23c8      	movs	r3, #200	; 0xc8
 8001ae8:	f002 fbd0 	bl	800428c <HAL_UART_Transmit>

				    printf("\n\r Toff");
 8001aec:	4b7c      	ldr	r3, [pc, #496]	; (8001ce0 <MENU_USB+0x7b4>)
 8001aee:	0018      	movs	r0, r3
 8001af0:	f004 f8e2 	bl	8005cb8 <iprintf>
				    sprintf(ch3, "%lu", fdata3);
 8001af4:	4b75      	ldr	r3, [pc, #468]	; (8001ccc <MENU_USB+0x7a0>)
 8001af6:	681a      	ldr	r2, [r3, #0]
 8001af8:	4976      	ldr	r1, [pc, #472]	; (8001cd4 <MENU_USB+0x7a8>)
 8001afa:	240c      	movs	r4, #12
 8001afc:	193b      	adds	r3, r7, r4
 8001afe:	0018      	movs	r0, r3
 8001b00:	f004 f94a 	bl	8005d98 <siprintf>
				    HAL_UART_Transmit(&huart2, (uint8_t*)ch3, strlen(ch3), 200);
 8001b04:	193b      	adds	r3, r7, r4
 8001b06:	0018      	movs	r0, r3
 8001b08:	f7fe fb08 	bl	800011c <strlen>
 8001b0c:	0003      	movs	r3, r0
 8001b0e:	b29a      	uxth	r2, r3
 8001b10:	1939      	adds	r1, r7, r4
 8001b12:	4871      	ldr	r0, [pc, #452]	; (8001cd8 <MENU_USB+0x7ac>)
 8001b14:	23c8      	movs	r3, #200	; 0xc8
 8001b16:	f002 fbb9 	bl	800428c <HAL_UART_Transmit>
 8001b1a:	e067      	b.n	8001bec <MENU_USB+0x6c0>

				}
				else if (strcmp(line_buffer, "cont") == 0){
 8001b1c:	4a71      	ldr	r2, [pc, #452]	; (8001ce4 <MENU_USB+0x7b8>)
 8001b1e:	4b66      	ldr	r3, [pc, #408]	; (8001cb8 <MENU_USB+0x78c>)
 8001b20:	0011      	movs	r1, r2
 8001b22:	0018      	movs	r0, r3
 8001b24:	f7fe faf0 	bl	8000108 <strcmp>
 8001b28:	1e03      	subs	r3, r0, #0
 8001b2a:	d155      	bne.n	8001bd8 <MENU_USB+0x6ac>
					if(read_data(Addr_num)>0){
 8001b2c:	4b5b      	ldr	r3, [pc, #364]	; (8001c9c <MENU_USB+0x770>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	0018      	movs	r0, r3
 8001b32:	f7ff fa8a 	bl	800104a <read_data>
 8001b36:	1e03      	subs	r3, r0, #0
 8001b38:	d02a      	beq.n	8001b90 <MENU_USB+0x664>
						num=read_data(Addr_num)-read_data(Addr_total_pulse);
 8001b3a:	4b58      	ldr	r3, [pc, #352]	; (8001c9c <MENU_USB+0x770>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	0018      	movs	r0, r3
 8001b40:	f7ff fa83 	bl	800104a <read_data>
 8001b44:	0004      	movs	r4, r0
 8001b46:	4b5e      	ldr	r3, [pc, #376]	; (8001cc0 <MENU_USB+0x794>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	0018      	movs	r0, r3
 8001b4c:	f7ff fa7d 	bl	800104a <read_data>
 8001b50:	0003      	movs	r3, r0
 8001b52:	1ae2      	subs	r2, r4, r3
 8001b54:	4b52      	ldr	r3, [pc, #328]	; (8001ca0 <MENU_USB+0x774>)
 8001b56:	601a      	str	r2, [r3, #0]
						Ton=read_data(Addr_Ton);
 8001b58:	4b52      	ldr	r3, [pc, #328]	; (8001ca4 <MENU_USB+0x778>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	0018      	movs	r0, r3
 8001b5e:	f7ff fa74 	bl	800104a <read_data>
 8001b62:	0003      	movs	r3, r0
 8001b64:	0018      	movs	r0, r3
 8001b66:	f7ff f8d1 	bl	8000d0c <__aeabi_ui2f>
 8001b6a:	1c02      	adds	r2, r0, #0
 8001b6c:	4b49      	ldr	r3, [pc, #292]	; (8001c94 <MENU_USB+0x768>)
 8001b6e:	601a      	str	r2, [r3, #0]
						Toff=read_data(Addr_Toff);
 8001b70:	4b4d      	ldr	r3, [pc, #308]	; (8001ca8 <MENU_USB+0x77c>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	0018      	movs	r0, r3
 8001b76:	f7ff fa68 	bl	800104a <read_data>
 8001b7a:	0003      	movs	r3, r0
 8001b7c:	0018      	movs	r0, r3
 8001b7e:	f7ff f8c5 	bl	8000d0c <__aeabi_ui2f>
 8001b82:	1c02      	adds	r2, r0, #0
 8001b84:	4b44      	ldr	r3, [pc, #272]	; (8001c98 <MENU_USB+0x76c>)
 8001b86:	601a      	str	r2, [r3, #0]
						state=2;
 8001b88:	4b48      	ldr	r3, [pc, #288]	; (8001cac <MENU_USB+0x780>)
 8001b8a:	2202      	movs	r2, #2
 8001b8c:	601a      	str	r2, [r3, #0]
 8001b8e:	e02d      	b.n	8001bec <MENU_USB+0x6c0>
					}
					else{
						total_pulses=read_data(Addr_total_pulse);
 8001b90:	4b4b      	ldr	r3, [pc, #300]	; (8001cc0 <MENU_USB+0x794>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	0018      	movs	r0, r3
 8001b96:	f7ff fa58 	bl	800104a <read_data>
 8001b9a:	0002      	movs	r2, r0
 8001b9c:	4b52      	ldr	r3, [pc, #328]	; (8001ce8 <MENU_USB+0x7bc>)
 8001b9e:	601a      	str	r2, [r3, #0]
						Ton=read_data(Addr_Ton);
 8001ba0:	4b40      	ldr	r3, [pc, #256]	; (8001ca4 <MENU_USB+0x778>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	0018      	movs	r0, r3
 8001ba6:	f7ff fa50 	bl	800104a <read_data>
 8001baa:	0003      	movs	r3, r0
 8001bac:	0018      	movs	r0, r3
 8001bae:	f7ff f8ad 	bl	8000d0c <__aeabi_ui2f>
 8001bb2:	1c02      	adds	r2, r0, #0
 8001bb4:	4b37      	ldr	r3, [pc, #220]	; (8001c94 <MENU_USB+0x768>)
 8001bb6:	601a      	str	r2, [r3, #0]
						Toff=read_data(Addr_Toff);
 8001bb8:	4b3b      	ldr	r3, [pc, #236]	; (8001ca8 <MENU_USB+0x77c>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	0018      	movs	r0, r3
 8001bbe:	f7ff fa44 	bl	800104a <read_data>
 8001bc2:	0003      	movs	r3, r0
 8001bc4:	0018      	movs	r0, r3
 8001bc6:	f7ff f8a1 	bl	8000d0c <__aeabi_ui2f>
 8001bca:	1c02      	adds	r2, r0, #0
 8001bcc:	4b32      	ldr	r3, [pc, #200]	; (8001c98 <MENU_USB+0x76c>)
 8001bce:	601a      	str	r2, [r3, #0]
						state=1;
 8001bd0:	4b36      	ldr	r3, [pc, #216]	; (8001cac <MENU_USB+0x780>)
 8001bd2:	2201      	movs	r2, #1
 8001bd4:	601a      	str	r2, [r3, #0]
 8001bd6:	e009      	b.n	8001bec <MENU_USB+0x6c0>
					}
				}
				else {
					printf(error);
 8001bd8:	23cc      	movs	r3, #204	; 0xcc
 8001bda:	18fb      	adds	r3, r7, r3
 8001bdc:	0018      	movs	r0, r3
 8001bde:	f004 f86b 	bl	8005cb8 <iprintf>
					printf(menu);
 8001be2:	23dc      	movs	r3, #220	; 0xdc
 8001be4:	18fb      	adds	r3, r7, r3
 8001be6:	0018      	movs	r0, r3
 8001be8:	f004 f866 	bl	8005cb8 <iprintf>
				}
				printf("\r\n");
 8001bec:	4b3f      	ldr	r3, [pc, #252]	; (8001cec <MENU_USB+0x7c0>)
 8001bee:	0018      	movs	r0, r3
 8001bf0:	f004 f8c8 	bl	8005d84 <puts>
				for(int i;i<line_length;i++){
 8001bf4:	e00c      	b.n	8001c10 <MENU_USB+0x6e4>
					line_buffer[i]='\0';
 8001bf6:	4a30      	ldr	r2, [pc, #192]	; (8001cb8 <MENU_USB+0x78c>)
 8001bf8:	21c2      	movs	r1, #194	; 0xc2
 8001bfa:	0049      	lsls	r1, r1, #1
 8001bfc:	187b      	adds	r3, r7, r1
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	18d3      	adds	r3, r2, r3
 8001c02:	2200      	movs	r2, #0
 8001c04:	701a      	strb	r2, [r3, #0]
				for(int i;i<line_length;i++){
 8001c06:	187b      	adds	r3, r7, r1
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	3301      	adds	r3, #1
 8001c0c:	187a      	adds	r2, r7, r1
 8001c0e:	6013      	str	r3, [r2, #0]
 8001c10:	23c2      	movs	r3, #194	; 0xc2
 8001c12:	005b      	lsls	r3, r3, #1
 8001c14:	18fb      	adds	r3, r7, r3
 8001c16:	681a      	ldr	r2, [r3, #0]
 8001c18:	4b35      	ldr	r3, [pc, #212]	; (8001cf0 <MENU_USB+0x7c4>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	429a      	cmp	r2, r3
 8001c1e:	d3ea      	bcc.n	8001bf6 <MENU_USB+0x6ca>
					}
				line_length = 0;
 8001c20:	4b33      	ldr	r3, [pc, #204]	; (8001cf0 <MENU_USB+0x7c4>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	601a      	str	r2, [r3, #0]
			if (line_length > 0) {
 8001c26:	e029      	b.n	8001c7c <MENU_USB+0x750>
			}
			else{
				printf(error);
 8001c28:	23cc      	movs	r3, #204	; 0xcc
 8001c2a:	18fb      	adds	r3, r7, r3
 8001c2c:	0018      	movs	r0, r3
 8001c2e:	f004 f843 	bl	8005cb8 <iprintf>
				printf(menu);
 8001c32:	23dc      	movs	r3, #220	; 0xdc
 8001c34:	18fb      	adds	r3, r7, r3
 8001c36:	0018      	movs	r0, r3
 8001c38:	f004 f83e 	bl	8005cb8 <iprintf>
			if (line_length > 0) {
 8001c3c:	e01e      	b.n	8001c7c <MENU_USB+0x750>
			}
		}
		else {
			if (line_length >= LINE_MAX_LENGTH) {
 8001c3e:	4b2c      	ldr	r3, [pc, #176]	; (8001cf0 <MENU_USB+0x7c4>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	2b4f      	cmp	r3, #79	; 0x4f
 8001c44:	d90c      	bls.n	8001c60 <MENU_USB+0x734>
				line_length = 0;
 8001c46:	4b2a      	ldr	r3, [pc, #168]	; (8001cf0 <MENU_USB+0x7c4>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	601a      	str	r2, [r3, #0]
				printf(error);
 8001c4c:	23cc      	movs	r3, #204	; 0xcc
 8001c4e:	18fb      	adds	r3, r7, r3
 8001c50:	0018      	movs	r0, r3
 8001c52:	f004 f831 	bl	8005cb8 <iprintf>
				printf(error_with_lenght);
 8001c56:	236c      	movs	r3, #108	; 0x6c
 8001c58:	18fb      	adds	r3, r7, r3
 8001c5a:	0018      	movs	r0, r3
 8001c5c:	f004 f82c 	bl	8005cb8 <iprintf>
			}
			line_buffer[line_length++] = value;
 8001c60:	4b23      	ldr	r3, [pc, #140]	; (8001cf0 <MENU_USB+0x7c4>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	1c59      	adds	r1, r3, #1
 8001c66:	4a22      	ldr	r2, [pc, #136]	; (8001cf0 <MENU_USB+0x7c4>)
 8001c68:	6011      	str	r1, [r2, #0]
 8001c6a:	4a13      	ldr	r2, [pc, #76]	; (8001cb8 <MENU_USB+0x78c>)
 8001c6c:	4921      	ldr	r1, [pc, #132]	; (8001cf4 <MENU_USB+0x7c8>)
 8001c6e:	20d0      	movs	r0, #208	; 0xd0
 8001c70:	0040      	lsls	r0, r0, #1
 8001c72:	1809      	adds	r1, r1, r0
 8001c74:	19c9      	adds	r1, r1, r7
 8001c76:	7809      	ldrb	r1, [r1, #0]
 8001c78:	54d1      	strb	r1, [r2, r3]
		}
}
 8001c7a:	46c0      	nop			; (mov r8, r8)
 8001c7c:	46c0      	nop			; (mov r8, r8)
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	b068      	add	sp, #416	; 0x1a0
 8001c82:	bdb0      	pop	{r4, r5, r7, pc}
 8001c84:	200000a8 	.word	0x200000a8
 8001c88:	200000bc 	.word	0x200000bc
 8001c8c:	200000ac 	.word	0x200000ac
 8001c90:	42c80000 	.word	0x42c80000
 8001c94:	200000b4 	.word	0x200000b4
 8001c98:	200000b8 	.word	0x200000b8
 8001c9c:	20000004 	.word	0x20000004
 8001ca0:	20000098 	.word	0x20000098
 8001ca4:	20000008 	.word	0x20000008
 8001ca8:	2000000c 	.word	0x2000000c
 8001cac:	20000128 	.word	0x20000128
 8001cb0:	20000114 	.word	0x20000114
 8001cb4:	08006f7c 	.word	0x08006f7c
 8001cb8:	200000c0 	.word	0x200000c0
 8001cbc:	08006f84 	.word	0x08006f84
 8001cc0:	20000000 	.word	0x20000000
 8001cc4:	2000009c 	.word	0x2000009c
 8001cc8:	200000a0 	.word	0x200000a0
 8001ccc:	200000a4 	.word	0x200000a4
 8001cd0:	08006f8c 	.word	0x08006f8c
 8001cd4:	08006f98 	.word	0x08006f98
 8001cd8:	20000170 	.word	0x20000170
 8001cdc:	08006f9c 	.word	0x08006f9c
 8001ce0:	08006fa4 	.word	0x08006fa4
 8001ce4:	08006fac 	.word	0x08006fac
 8001ce8:	200000b0 	.word	0x200000b0
 8001cec:	08006fb4 	.word	0x08006fb4
 8001cf0:	20000124 	.word	0x20000124
 8001cf4:	fffffe67 	.word	0xfffffe67

08001cf8 <ASCII_TO_uint8_t>:

uint32_t ASCII_TO_uint8_t(const char *table){
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b086      	sub	sp, #24
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
	uint32_t result = 0;
 8001d00:	2300      	movs	r3, #0
 8001d02:	617b      	str	r3, [r7, #20]
	uint32_t numvalue=0;
 8001d04:	2300      	movs	r3, #0
 8001d06:	60fb      	str	r3, [r7, #12]
    int size = sizeof(table) / sizeof(char);
 8001d08:	2304      	movs	r3, #4
 8001d0a:	60bb      	str	r3, [r7, #8]
    for (int i = 0; i < size; i++) {
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	613b      	str	r3, [r7, #16]
 8001d10:	e01d      	b.n	8001d4e <ASCII_TO_uint8_t+0x56>
    	if(table[i]==' ' || table[i]=='\0'){
 8001d12:	693b      	ldr	r3, [r7, #16]
 8001d14:	687a      	ldr	r2, [r7, #4]
 8001d16:	18d3      	adds	r3, r2, r3
 8001d18:	781b      	ldrb	r3, [r3, #0]
 8001d1a:	2b20      	cmp	r3, #32
 8001d1c:	d01b      	beq.n	8001d56 <ASCII_TO_uint8_t+0x5e>
 8001d1e:	693b      	ldr	r3, [r7, #16]
 8001d20:	687a      	ldr	r2, [r7, #4]
 8001d22:	18d3      	adds	r3, r2, r3
 8001d24:	781b      	ldrb	r3, [r3, #0]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d015      	beq.n	8001d56 <ASCII_TO_uint8_t+0x5e>
    		break;
    	}
    	else{
    		numvalue = table[i] - '0';
 8001d2a:	693b      	ldr	r3, [r7, #16]
 8001d2c:	687a      	ldr	r2, [r7, #4]
 8001d2e:	18d3      	adds	r3, r2, r3
 8001d30:	781b      	ldrb	r3, [r3, #0]
 8001d32:	3b30      	subs	r3, #48	; 0x30
 8001d34:	60fb      	str	r3, [r7, #12]
            result = result * 10 + numvalue;
 8001d36:	697a      	ldr	r2, [r7, #20]
 8001d38:	0013      	movs	r3, r2
 8001d3a:	009b      	lsls	r3, r3, #2
 8001d3c:	189b      	adds	r3, r3, r2
 8001d3e:	005b      	lsls	r3, r3, #1
 8001d40:	001a      	movs	r2, r3
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	189b      	adds	r3, r3, r2
 8001d46:	617b      	str	r3, [r7, #20]
    for (int i = 0; i < size; i++) {
 8001d48:	693b      	ldr	r3, [r7, #16]
 8001d4a:	3301      	adds	r3, #1
 8001d4c:	613b      	str	r3, [r7, #16]
 8001d4e:	693a      	ldr	r2, [r7, #16]
 8001d50:	68bb      	ldr	r3, [r7, #8]
 8001d52:	429a      	cmp	r2, r3
 8001d54:	dbdd      	blt.n	8001d12 <ASCII_TO_uint8_t+0x1a>
    	}
    }
    return result;
 8001d56:	697b      	ldr	r3, [r7, #20]
}
 8001d58:	0018      	movs	r0, r3
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	b006      	add	sp, #24
 8001d5e:	bd80      	pop	{r7, pc}

08001d60 <splitString>:


void splitString(const char* input_string, char** tokens) {
 8001d60:	b590      	push	{r4, r7, lr}
 8001d62:	b087      	sub	sp, #28
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
 8001d68:	6039      	str	r1, [r7, #0]
	const char spacebar[] = " \r\n";
 8001d6a:	2408      	movs	r4, #8
 8001d6c:	193b      	adds	r3, r7, r4
 8001d6e:	4a1b      	ldr	r2, [pc, #108]	; (8001ddc <splitString+0x7c>)
 8001d70:	601a      	str	r2, [r3, #0]
    char* copy_of_input = strdup(input_string);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	0018      	movs	r0, r3
 8001d76:	f004 f929 	bl	8005fcc <strdup>
 8001d7a:	0003      	movs	r3, r0
 8001d7c:	60fb      	str	r3, [r7, #12]
    char* token = strtok(copy_of_input, spacebar);
 8001d7e:	193a      	adds	r2, r7, r4
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	0011      	movs	r1, r2
 8001d84:	0018      	movs	r0, r3
 8001d86:	f004 f969 	bl	800605c <strtok>
 8001d8a:	0003      	movs	r3, r0
 8001d8c:	617b      	str	r3, [r7, #20]

    int token_count = 0;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	613b      	str	r3, [r7, #16]
    while (token != NULL && token_count < MAX_TOKENS) {
 8001d92:	e014      	b.n	8001dbe <splitString+0x5e>
        tokens[token_count] = strdup(token);
 8001d94:	693b      	ldr	r3, [r7, #16]
 8001d96:	009b      	lsls	r3, r3, #2
 8001d98:	683a      	ldr	r2, [r7, #0]
 8001d9a:	18d4      	adds	r4, r2, r3
 8001d9c:	697b      	ldr	r3, [r7, #20]
 8001d9e:	0018      	movs	r0, r3
 8001da0:	f004 f914 	bl	8005fcc <strdup>
 8001da4:	0003      	movs	r3, r0
 8001da6:	6023      	str	r3, [r4, #0]
        token = strtok(NULL, spacebar);
 8001da8:	2308      	movs	r3, #8
 8001daa:	18fb      	adds	r3, r7, r3
 8001dac:	0019      	movs	r1, r3
 8001dae:	2000      	movs	r0, #0
 8001db0:	f004 f954 	bl	800605c <strtok>
 8001db4:	0003      	movs	r3, r0
 8001db6:	617b      	str	r3, [r7, #20]
        token_count++;
 8001db8:	693b      	ldr	r3, [r7, #16]
 8001dba:	3301      	adds	r3, #1
 8001dbc:	613b      	str	r3, [r7, #16]
    while (token != NULL && token_count < MAX_TOKENS) {
 8001dbe:	697b      	ldr	r3, [r7, #20]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d002      	beq.n	8001dca <splitString+0x6a>
 8001dc4:	693b      	ldr	r3, [r7, #16]
 8001dc6:	2b03      	cmp	r3, #3
 8001dc8:	dde4      	ble.n	8001d94 <splitString+0x34>
    }
    free(copy_of_input);
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	0018      	movs	r0, r3
 8001dce:	f003 fe03 	bl	80059d8 <free>
}
 8001dd2:	46c0      	nop			; (mov r8, r8)
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	b007      	add	sp, #28
 8001dd8:	bd90      	pop	{r4, r7, pc}
 8001dda:	46c0      	nop			; (mov r8, r8)
 8001ddc:	000a0d20 	.word	0x000a0d20

08001de0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b082      	sub	sp, #8
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681a      	ldr	r2, [r3, #0]
 8001dec:	2380      	movs	r3, #128	; 0x80
 8001dee:	05db      	lsls	r3, r3, #23
 8001df0:	429a      	cmp	r2, r3
 8001df2:	d101      	bne.n	8001df8 <HAL_TIM_PeriodElapsedCallback+0x18>
    HAL_IncTick();
 8001df4:	f000 fa60 	bl	80022b8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001df8:	46c0      	nop			; (mov r8, r8)
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	b002      	add	sp, #8
 8001dfe:	bd80      	pop	{r7, pc}

08001e00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e04:	b672      	cpsid	i
}
 8001e06:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e08:	e7fe      	b.n	8001e08 <Error_Handler+0x8>
	...

08001e0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e10:	4b0b      	ldr	r3, [pc, #44]	; (8001e40 <HAL_MspInit+0x34>)
 8001e12:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e14:	4b0a      	ldr	r3, [pc, #40]	; (8001e40 <HAL_MspInit+0x34>)
 8001e16:	2101      	movs	r1, #1
 8001e18:	430a      	orrs	r2, r1
 8001e1a:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e1c:	4b08      	ldr	r3, [pc, #32]	; (8001e40 <HAL_MspInit+0x34>)
 8001e1e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001e20:	4b07      	ldr	r3, [pc, #28]	; (8001e40 <HAL_MspInit+0x34>)
 8001e22:	2180      	movs	r1, #128	; 0x80
 8001e24:	0549      	lsls	r1, r1, #21
 8001e26:	430a      	orrs	r2, r1
 8001e28:	639a      	str	r2, [r3, #56]	; 0x38

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* PVD_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_IRQn, 0, 0);
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	2100      	movs	r1, #0
 8001e2e:	2001      	movs	r0, #1
 8001e30:	f000 fb0a 	bl	8002448 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_IRQn);
 8001e34:	2001      	movs	r0, #1
 8001e36:	f000 fb1c 	bl	8002472 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e3a:	46c0      	nop			; (mov r8, r8)
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd80      	pop	{r7, pc}
 8001e40:	40021000 	.word	0x40021000

08001e44 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e44:	b5b0      	push	{r4, r5, r7, lr}
 8001e46:	b08c      	sub	sp, #48	; 0x30
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;
  /*Configure the TIM2 IRQ priority */
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2200      	movs	r2, #0
 8001e50:	0019      	movs	r1, r3
 8001e52:	200f      	movs	r0, #15
 8001e54:	f000 faf8 	bl	8002448 <HAL_NVIC_SetPriority>

  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001e58:	200f      	movs	r0, #15
 8001e5a:	f000 fb0a 	bl	8002472 <HAL_NVIC_EnableIRQ>

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8001e5e:	4b32      	ldr	r3, [pc, #200]	; (8001f28 <HAL_InitTick+0xe4>)
 8001e60:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001e62:	4b31      	ldr	r3, [pc, #196]	; (8001f28 <HAL_InitTick+0xe4>)
 8001e64:	2101      	movs	r1, #1
 8001e66:	430a      	orrs	r2, r1
 8001e68:	639a      	str	r2, [r3, #56]	; 0x38

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001e6a:	2308      	movs	r3, #8
 8001e6c:	18fa      	adds	r2, r7, r3
 8001e6e:	240c      	movs	r4, #12
 8001e70:	193b      	adds	r3, r7, r4
 8001e72:	0011      	movs	r1, r2
 8001e74:	0018      	movs	r0, r3
 8001e76:	f001 fde5 	bl	8003a44 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001e7a:	193b      	adds	r3, r7, r4
 8001e7c:	68db      	ldr	r3, [r3, #12]
 8001e7e:	627b      	str	r3, [r7, #36]	; 0x24
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d104      	bne.n	8001e90 <HAL_InitTick+0x4c>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001e86:	f001 fdb1 	bl	80039ec <HAL_RCC_GetPCLK1Freq>
 8001e8a:	0003      	movs	r3, r0
 8001e8c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e8e:	e004      	b.n	8001e9a <HAL_InitTick+0x56>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001e90:	f001 fdac 	bl	80039ec <HAL_RCC_GetPCLK1Freq>
 8001e94:	0003      	movs	r3, r0
 8001e96:	005b      	lsls	r3, r3, #1
 8001e98:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001e9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e9c:	4923      	ldr	r1, [pc, #140]	; (8001f2c <HAL_InitTick+0xe8>)
 8001e9e:	0018      	movs	r0, r3
 8001ea0:	f7fe f94e 	bl	8000140 <__udivsi3>
 8001ea4:	0003      	movs	r3, r0
 8001ea6:	3b01      	subs	r3, #1
 8001ea8:	623b      	str	r3, [r7, #32]

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8001eaa:	4b21      	ldr	r3, [pc, #132]	; (8001f30 <HAL_InitTick+0xec>)
 8001eac:	2280      	movs	r2, #128	; 0x80
 8001eae:	05d2      	lsls	r2, r2, #23
 8001eb0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8001eb2:	4b1f      	ldr	r3, [pc, #124]	; (8001f30 <HAL_InitTick+0xec>)
 8001eb4:	4a1f      	ldr	r2, [pc, #124]	; (8001f34 <HAL_InitTick+0xf0>)
 8001eb6:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8001eb8:	4b1d      	ldr	r3, [pc, #116]	; (8001f30 <HAL_InitTick+0xec>)
 8001eba:	6a3a      	ldr	r2, [r7, #32]
 8001ebc:	605a      	str	r2, [r3, #4]
  htim2.Init.ClockDivision = 0;
 8001ebe:	4b1c      	ldr	r3, [pc, #112]	; (8001f30 <HAL_InitTick+0xec>)
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ec4:	4b1a      	ldr	r3, [pc, #104]	; (8001f30 <HAL_InitTick+0xec>)
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim2);
 8001eca:	252b      	movs	r5, #43	; 0x2b
 8001ecc:	197c      	adds	r4, r7, r5
 8001ece:	4b18      	ldr	r3, [pc, #96]	; (8001f30 <HAL_InitTick+0xec>)
 8001ed0:	0018      	movs	r0, r3
 8001ed2:	f001 ff87 	bl	8003de4 <HAL_TIM_Base_Init>
 8001ed6:	0003      	movs	r3, r0
 8001ed8:	7023      	strb	r3, [r4, #0]
  if (status == HAL_OK)
 8001eda:	197b      	adds	r3, r7, r5
 8001edc:	781b      	ldrb	r3, [r3, #0]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d11b      	bne.n	8001f1a <HAL_InitTick+0xd6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8001ee2:	197c      	adds	r4, r7, r5
 8001ee4:	4b12      	ldr	r3, [pc, #72]	; (8001f30 <HAL_InitTick+0xec>)
 8001ee6:	0018      	movs	r0, r3
 8001ee8:	f001 ffc4 	bl	8003e74 <HAL_TIM_Base_Start_IT>
 8001eec:	0003      	movs	r3, r0
 8001eee:	7023      	strb	r3, [r4, #0]
    if (status == HAL_OK)
 8001ef0:	197b      	adds	r3, r7, r5
 8001ef2:	781b      	ldrb	r3, [r3, #0]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d110      	bne.n	8001f1a <HAL_InitTick+0xd6>
    {
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2b03      	cmp	r3, #3
 8001efc:	d809      	bhi.n	8001f12 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2200      	movs	r2, #0
 8001f02:	0019      	movs	r1, r3
 8001f04:	200f      	movs	r0, #15
 8001f06:	f000 fa9f 	bl	8002448 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001f0a:	4b0b      	ldr	r3, [pc, #44]	; (8001f38 <HAL_InitTick+0xf4>)
 8001f0c:	687a      	ldr	r2, [r7, #4]
 8001f0e:	601a      	str	r2, [r3, #0]
 8001f10:	e003      	b.n	8001f1a <HAL_InitTick+0xd6>
      }
      else
      {
        status = HAL_ERROR;
 8001f12:	232b      	movs	r3, #43	; 0x2b
 8001f14:	18fb      	adds	r3, r7, r3
 8001f16:	2201      	movs	r2, #1
 8001f18:	701a      	strb	r2, [r3, #0]
      }
    }
  }

 /* Return function status */
  return status;
 8001f1a:	232b      	movs	r3, #43	; 0x2b
 8001f1c:	18fb      	adds	r3, r7, r3
 8001f1e:	781b      	ldrb	r3, [r3, #0]
}
 8001f20:	0018      	movs	r0, r3
 8001f22:	46bd      	mov	sp, r7
 8001f24:	b00c      	add	sp, #48	; 0x30
 8001f26:	bdb0      	pop	{r4, r5, r7, pc}
 8001f28:	40021000 	.word	0x40021000
 8001f2c:	000f4240 	.word	0x000f4240
 8001f30:	2000012c 	.word	0x2000012c
 8001f34:	000003e7 	.word	0x000003e7
 8001f38:	20000014 	.word	0x20000014

08001f3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f40:	e7fe      	b.n	8001f40 <NMI_Handler+0x4>

08001f42 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f42:	b580      	push	{r7, lr}
 8001f44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f46:	e7fe      	b.n	8001f46 <HardFault_Handler+0x4>

08001f48 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001f4c:	46c0      	nop			; (mov r8, r8)
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}

08001f52 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f52:	b580      	push	{r7, lr}
 8001f54:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f56:	46c0      	nop			; (mov r8, r8)
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}

08001f5c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f60:	46c0      	nop			; (mov r8, r8)
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}

08001f66 <PVD_IRQHandler>:

/**
  * @brief This function handles PVD interrupt through EXTI line 16.
  */
void PVD_IRQHandler(void)
{
 8001f66:	b580      	push	{r7, lr}
 8001f68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_IRQn 0 */

  /* USER CODE END PVD_IRQn 0 */
  HAL_PWR_PVD_IRQHandler();
 8001f6a:	f000 ff5f 	bl	8002e2c <HAL_PWR_PVD_IRQHandler>
  /* USER CODE BEGIN PVD_IRQn 1 */

  /* USER CODE END PVD_IRQn 1 */
}
 8001f6e:	46c0      	nop			; (mov r8, r8)
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bd80      	pop	{r7, pc}

08001f74 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001f78:	4b03      	ldr	r3, [pc, #12]	; (8001f88 <TIM2_IRQHandler+0x14>)
 8001f7a:	0018      	movs	r0, r3
 8001f7c:	f001 ffcc 	bl	8003f18 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001f80:	46c0      	nop			; (mov r8, r8)
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}
 8001f86:	46c0      	nop			; (mov r8, r8)
 8001f88:	2000012c 	.word	0x2000012c

08001f8c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001f90:	4b03      	ldr	r3, [pc, #12]	; (8001fa0 <USART2_IRQHandler+0x14>)
 8001f92:	0018      	movs	r0, r3
 8001f94:	f002 fa78 	bl	8004488 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001f98:	46c0      	nop			; (mov r8, r8)
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	46c0      	nop			; (mov r8, r8)
 8001fa0:	20000170 	.word	0x20000170

08001fa4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	af00      	add	r7, sp, #0
  return 1;
 8001fa8:	2301      	movs	r3, #1
}
 8001faa:	0018      	movs	r0, r3
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}

08001fb0 <_kill>:

int _kill(int pid, int sig)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b082      	sub	sp, #8
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
 8001fb8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001fba:	f004 f913 	bl	80061e4 <__errno>
 8001fbe:	0003      	movs	r3, r0
 8001fc0:	2216      	movs	r2, #22
 8001fc2:	601a      	str	r2, [r3, #0]
  return -1;
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	425b      	negs	r3, r3
}
 8001fc8:	0018      	movs	r0, r3
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	b002      	add	sp, #8
 8001fce:	bd80      	pop	{r7, pc}

08001fd0 <_exit>:

void _exit (int status)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b082      	sub	sp, #8
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001fd8:	2301      	movs	r3, #1
 8001fda:	425a      	negs	r2, r3
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	0011      	movs	r1, r2
 8001fe0:	0018      	movs	r0, r3
 8001fe2:	f7ff ffe5 	bl	8001fb0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001fe6:	e7fe      	b.n	8001fe6 <_exit+0x16>

08001fe8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b086      	sub	sp, #24
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	60f8      	str	r0, [r7, #12]
 8001ff0:	60b9      	str	r1, [r7, #8]
 8001ff2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	617b      	str	r3, [r7, #20]
 8001ff8:	e00a      	b.n	8002010 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001ffa:	e000      	b.n	8001ffe <_read+0x16>
 8001ffc:	bf00      	nop
 8001ffe:	0001      	movs	r1, r0
 8002000:	68bb      	ldr	r3, [r7, #8]
 8002002:	1c5a      	adds	r2, r3, #1
 8002004:	60ba      	str	r2, [r7, #8]
 8002006:	b2ca      	uxtb	r2, r1
 8002008:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800200a:	697b      	ldr	r3, [r7, #20]
 800200c:	3301      	adds	r3, #1
 800200e:	617b      	str	r3, [r7, #20]
 8002010:	697a      	ldr	r2, [r7, #20]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	429a      	cmp	r2, r3
 8002016:	dbf0      	blt.n	8001ffa <_read+0x12>
  }

  return len;
 8002018:	687b      	ldr	r3, [r7, #4]
}
 800201a:	0018      	movs	r0, r3
 800201c:	46bd      	mov	sp, r7
 800201e:	b006      	add	sp, #24
 8002020:	bd80      	pop	{r7, pc}

08002022 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002022:	b580      	push	{r7, lr}
 8002024:	b086      	sub	sp, #24
 8002026:	af00      	add	r7, sp, #0
 8002028:	60f8      	str	r0, [r7, #12]
 800202a:	60b9      	str	r1, [r7, #8]
 800202c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800202e:	2300      	movs	r3, #0
 8002030:	617b      	str	r3, [r7, #20]
 8002032:	e009      	b.n	8002048 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002034:	68bb      	ldr	r3, [r7, #8]
 8002036:	1c5a      	adds	r2, r3, #1
 8002038:	60ba      	str	r2, [r7, #8]
 800203a:	781b      	ldrb	r3, [r3, #0]
 800203c:	0018      	movs	r0, r3
 800203e:	f7ff f875 	bl	800112c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002042:	697b      	ldr	r3, [r7, #20]
 8002044:	3301      	adds	r3, #1
 8002046:	617b      	str	r3, [r7, #20]
 8002048:	697a      	ldr	r2, [r7, #20]
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	429a      	cmp	r2, r3
 800204e:	dbf1      	blt.n	8002034 <_write+0x12>
  }
  return len;
 8002050:	687b      	ldr	r3, [r7, #4]
}
 8002052:	0018      	movs	r0, r3
 8002054:	46bd      	mov	sp, r7
 8002056:	b006      	add	sp, #24
 8002058:	bd80      	pop	{r7, pc}

0800205a <_close>:

int _close(int file)
{
 800205a:	b580      	push	{r7, lr}
 800205c:	b082      	sub	sp, #8
 800205e:	af00      	add	r7, sp, #0
 8002060:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002062:	2301      	movs	r3, #1
 8002064:	425b      	negs	r3, r3
}
 8002066:	0018      	movs	r0, r3
 8002068:	46bd      	mov	sp, r7
 800206a:	b002      	add	sp, #8
 800206c:	bd80      	pop	{r7, pc}

0800206e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800206e:	b580      	push	{r7, lr}
 8002070:	b082      	sub	sp, #8
 8002072:	af00      	add	r7, sp, #0
 8002074:	6078      	str	r0, [r7, #4]
 8002076:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	2280      	movs	r2, #128	; 0x80
 800207c:	0192      	lsls	r2, r2, #6
 800207e:	605a      	str	r2, [r3, #4]
  return 0;
 8002080:	2300      	movs	r3, #0
}
 8002082:	0018      	movs	r0, r3
 8002084:	46bd      	mov	sp, r7
 8002086:	b002      	add	sp, #8
 8002088:	bd80      	pop	{r7, pc}

0800208a <_isatty>:

int _isatty(int file)
{
 800208a:	b580      	push	{r7, lr}
 800208c:	b082      	sub	sp, #8
 800208e:	af00      	add	r7, sp, #0
 8002090:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002092:	2301      	movs	r3, #1
}
 8002094:	0018      	movs	r0, r3
 8002096:	46bd      	mov	sp, r7
 8002098:	b002      	add	sp, #8
 800209a:	bd80      	pop	{r7, pc}

0800209c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b084      	sub	sp, #16
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	60f8      	str	r0, [r7, #12]
 80020a4:	60b9      	str	r1, [r7, #8]
 80020a6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80020a8:	2300      	movs	r3, #0
}
 80020aa:	0018      	movs	r0, r3
 80020ac:	46bd      	mov	sp, r7
 80020ae:	b004      	add	sp, #16
 80020b0:	bd80      	pop	{r7, pc}
	...

080020b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b086      	sub	sp, #24
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80020bc:	4a14      	ldr	r2, [pc, #80]	; (8002110 <_sbrk+0x5c>)
 80020be:	4b15      	ldr	r3, [pc, #84]	; (8002114 <_sbrk+0x60>)
 80020c0:	1ad3      	subs	r3, r2, r3
 80020c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80020c4:	697b      	ldr	r3, [r7, #20]
 80020c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80020c8:	4b13      	ldr	r3, [pc, #76]	; (8002118 <_sbrk+0x64>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d102      	bne.n	80020d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80020d0:	4b11      	ldr	r3, [pc, #68]	; (8002118 <_sbrk+0x64>)
 80020d2:	4a12      	ldr	r2, [pc, #72]	; (800211c <_sbrk+0x68>)
 80020d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80020d6:	4b10      	ldr	r3, [pc, #64]	; (8002118 <_sbrk+0x64>)
 80020d8:	681a      	ldr	r2, [r3, #0]
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	18d3      	adds	r3, r2, r3
 80020de:	693a      	ldr	r2, [r7, #16]
 80020e0:	429a      	cmp	r2, r3
 80020e2:	d207      	bcs.n	80020f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80020e4:	f004 f87e 	bl	80061e4 <__errno>
 80020e8:	0003      	movs	r3, r0
 80020ea:	220c      	movs	r2, #12
 80020ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80020ee:	2301      	movs	r3, #1
 80020f0:	425b      	negs	r3, r3
 80020f2:	e009      	b.n	8002108 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80020f4:	4b08      	ldr	r3, [pc, #32]	; (8002118 <_sbrk+0x64>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80020fa:	4b07      	ldr	r3, [pc, #28]	; (8002118 <_sbrk+0x64>)
 80020fc:	681a      	ldr	r2, [r3, #0]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	18d2      	adds	r2, r2, r3
 8002102:	4b05      	ldr	r3, [pc, #20]	; (8002118 <_sbrk+0x64>)
 8002104:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8002106:	68fb      	ldr	r3, [r7, #12]
}
 8002108:	0018      	movs	r0, r3
 800210a:	46bd      	mov	sp, r7
 800210c:	b006      	add	sp, #24
 800210e:	bd80      	pop	{r7, pc}
 8002110:	20005000 	.word	0x20005000
 8002114:	00000400 	.word	0x00000400
 8002118:	2000016c 	.word	0x2000016c
 800211c:	20000360 	.word	0x20000360

08002120 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002124:	46c0      	nop			; (mov r8, r8)
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}
	...

0800212c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002130:	4b14      	ldr	r3, [pc, #80]	; (8002184 <MX_USART2_UART_Init+0x58>)
 8002132:	4a15      	ldr	r2, [pc, #84]	; (8002188 <MX_USART2_UART_Init+0x5c>)
 8002134:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002136:	4b13      	ldr	r3, [pc, #76]	; (8002184 <MX_USART2_UART_Init+0x58>)
 8002138:	22e1      	movs	r2, #225	; 0xe1
 800213a:	0252      	lsls	r2, r2, #9
 800213c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800213e:	4b11      	ldr	r3, [pc, #68]	; (8002184 <MX_USART2_UART_Init+0x58>)
 8002140:	2200      	movs	r2, #0
 8002142:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002144:	4b0f      	ldr	r3, [pc, #60]	; (8002184 <MX_USART2_UART_Init+0x58>)
 8002146:	2200      	movs	r2, #0
 8002148:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800214a:	4b0e      	ldr	r3, [pc, #56]	; (8002184 <MX_USART2_UART_Init+0x58>)
 800214c:	2200      	movs	r2, #0
 800214e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002150:	4b0c      	ldr	r3, [pc, #48]	; (8002184 <MX_USART2_UART_Init+0x58>)
 8002152:	220c      	movs	r2, #12
 8002154:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002156:	4b0b      	ldr	r3, [pc, #44]	; (8002184 <MX_USART2_UART_Init+0x58>)
 8002158:	2200      	movs	r2, #0
 800215a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800215c:	4b09      	ldr	r3, [pc, #36]	; (8002184 <MX_USART2_UART_Init+0x58>)
 800215e:	2200      	movs	r2, #0
 8002160:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002162:	4b08      	ldr	r3, [pc, #32]	; (8002184 <MX_USART2_UART_Init+0x58>)
 8002164:	2200      	movs	r2, #0
 8002166:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002168:	4b06      	ldr	r3, [pc, #24]	; (8002184 <MX_USART2_UART_Init+0x58>)
 800216a:	2200      	movs	r2, #0
 800216c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800216e:	4b05      	ldr	r3, [pc, #20]	; (8002184 <MX_USART2_UART_Init+0x58>)
 8002170:	0018      	movs	r0, r3
 8002172:	f002 f837 	bl	80041e4 <HAL_UART_Init>
 8002176:	1e03      	subs	r3, r0, #0
 8002178:	d001      	beq.n	800217e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800217a:	f7ff fe41 	bl	8001e00 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800217e:	46c0      	nop			; (mov r8, r8)
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}
 8002184:	20000170 	.word	0x20000170
 8002188:	40004400 	.word	0x40004400

0800218c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800218c:	b590      	push	{r4, r7, lr}
 800218e:	b089      	sub	sp, #36	; 0x24
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002194:	240c      	movs	r4, #12
 8002196:	193b      	adds	r3, r7, r4
 8002198:	0018      	movs	r0, r3
 800219a:	2314      	movs	r3, #20
 800219c:	001a      	movs	r2, r3
 800219e:	2100      	movs	r1, #0
 80021a0:	f003 ff0c 	bl	8005fbc <memset>
  if(uartHandle->Instance==USART2)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a1c      	ldr	r2, [pc, #112]	; (800221c <HAL_UART_MspInit+0x90>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d131      	bne.n	8002212 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80021ae:	4b1c      	ldr	r3, [pc, #112]	; (8002220 <HAL_UART_MspInit+0x94>)
 80021b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80021b2:	4b1b      	ldr	r3, [pc, #108]	; (8002220 <HAL_UART_MspInit+0x94>)
 80021b4:	2180      	movs	r1, #128	; 0x80
 80021b6:	0289      	lsls	r1, r1, #10
 80021b8:	430a      	orrs	r2, r1
 80021ba:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021bc:	4b18      	ldr	r3, [pc, #96]	; (8002220 <HAL_UART_MspInit+0x94>)
 80021be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021c0:	4b17      	ldr	r3, [pc, #92]	; (8002220 <HAL_UART_MspInit+0x94>)
 80021c2:	2101      	movs	r1, #1
 80021c4:	430a      	orrs	r2, r1
 80021c6:	62da      	str	r2, [r3, #44]	; 0x2c
 80021c8:	4b15      	ldr	r3, [pc, #84]	; (8002220 <HAL_UART_MspInit+0x94>)
 80021ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021cc:	2201      	movs	r2, #1
 80021ce:	4013      	ands	r3, r2
 80021d0:	60bb      	str	r3, [r7, #8]
 80021d2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80021d4:	0021      	movs	r1, r4
 80021d6:	187b      	adds	r3, r7, r1
 80021d8:	220c      	movs	r2, #12
 80021da:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021dc:	187b      	adds	r3, r7, r1
 80021de:	2202      	movs	r2, #2
 80021e0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021e2:	187b      	adds	r3, r7, r1
 80021e4:	2200      	movs	r2, #0
 80021e6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021e8:	187b      	adds	r3, r7, r1
 80021ea:	2203      	movs	r2, #3
 80021ec:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 80021ee:	187b      	adds	r3, r7, r1
 80021f0:	2204      	movs	r2, #4
 80021f2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021f4:	187a      	adds	r2, r7, r1
 80021f6:	23a0      	movs	r3, #160	; 0xa0
 80021f8:	05db      	lsls	r3, r3, #23
 80021fa:	0011      	movs	r1, r2
 80021fc:	0018      	movs	r0, r3
 80021fe:	f000 fc09 	bl	8002a14 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 3, 0);
 8002202:	2200      	movs	r2, #0
 8002204:	2103      	movs	r1, #3
 8002206:	201c      	movs	r0, #28
 8002208:	f000 f91e 	bl	8002448 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800220c:	201c      	movs	r0, #28
 800220e:	f000 f930 	bl	8002472 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002212:	46c0      	nop			; (mov r8, r8)
 8002214:	46bd      	mov	sp, r7
 8002216:	b009      	add	sp, #36	; 0x24
 8002218:	bd90      	pop	{r4, r7, pc}
 800221a:	46c0      	nop			; (mov r8, r8)
 800221c:	40004400 	.word	0x40004400
 8002220:	40021000 	.word	0x40021000

08002224 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8002224:	480d      	ldr	r0, [pc, #52]	; (800225c <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8002226:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002228:	f7ff ff7a 	bl	8002120 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800222c:	480c      	ldr	r0, [pc, #48]	; (8002260 <LoopForever+0x6>)
  ldr r1, =_edata
 800222e:	490d      	ldr	r1, [pc, #52]	; (8002264 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002230:	4a0d      	ldr	r2, [pc, #52]	; (8002268 <LoopForever+0xe>)
  movs r3, #0
 8002232:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002234:	e002      	b.n	800223c <LoopCopyDataInit>

08002236 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002236:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002238:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800223a:	3304      	adds	r3, #4

0800223c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800223c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800223e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002240:	d3f9      	bcc.n	8002236 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002242:	4a0a      	ldr	r2, [pc, #40]	; (800226c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002244:	4c0a      	ldr	r4, [pc, #40]	; (8002270 <LoopForever+0x16>)
  movs r3, #0
 8002246:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002248:	e001      	b.n	800224e <LoopFillZerobss>

0800224a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800224a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800224c:	3204      	adds	r2, #4

0800224e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800224e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002250:	d3fb      	bcc.n	800224a <FillZerobss>


/* Call static constructors */
    bl __libc_init_array
 8002252:	f003 ffcd 	bl	80061f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002256:	f7fe ffe9 	bl	800122c <main>

0800225a <LoopForever>:

LoopForever:
    b LoopForever
 800225a:	e7fe      	b.n	800225a <LoopForever>
   ldr   r0, =_estack
 800225c:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8002260:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002264:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8002268:	080073ac 	.word	0x080073ac
  ldr r2, =_sbss
 800226c:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8002270:	20000360 	.word	0x20000360

08002274 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002274:	e7fe      	b.n	8002274 <ADC1_COMP_IRQHandler>
	...

08002278 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b082      	sub	sp, #8
 800227c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800227e:	1dfb      	adds	r3, r7, #7
 8002280:	2200      	movs	r2, #0
 8002282:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8002284:	4b0b      	ldr	r3, [pc, #44]	; (80022b4 <HAL_Init+0x3c>)
 8002286:	681a      	ldr	r2, [r3, #0]
 8002288:	4b0a      	ldr	r3, [pc, #40]	; (80022b4 <HAL_Init+0x3c>)
 800228a:	2140      	movs	r1, #64	; 0x40
 800228c:	430a      	orrs	r2, r1
 800228e:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002290:	2003      	movs	r0, #3
 8002292:	f7ff fdd7 	bl	8001e44 <HAL_InitTick>
 8002296:	1e03      	subs	r3, r0, #0
 8002298:	d003      	beq.n	80022a2 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 800229a:	1dfb      	adds	r3, r7, #7
 800229c:	2201      	movs	r2, #1
 800229e:	701a      	strb	r2, [r3, #0]
 80022a0:	e001      	b.n	80022a6 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80022a2:	f7ff fdb3 	bl	8001e0c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80022a6:	1dfb      	adds	r3, r7, #7
 80022a8:	781b      	ldrb	r3, [r3, #0]
}
 80022aa:	0018      	movs	r0, r3
 80022ac:	46bd      	mov	sp, r7
 80022ae:	b002      	add	sp, #8
 80022b0:	bd80      	pop	{r7, pc}
 80022b2:	46c0      	nop			; (mov r8, r8)
 80022b4:	40022000 	.word	0x40022000

080022b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80022bc:	4b05      	ldr	r3, [pc, #20]	; (80022d4 <HAL_IncTick+0x1c>)
 80022be:	781b      	ldrb	r3, [r3, #0]
 80022c0:	001a      	movs	r2, r3
 80022c2:	4b05      	ldr	r3, [pc, #20]	; (80022d8 <HAL_IncTick+0x20>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	18d2      	adds	r2, r2, r3
 80022c8:	4b03      	ldr	r3, [pc, #12]	; (80022d8 <HAL_IncTick+0x20>)
 80022ca:	601a      	str	r2, [r3, #0]
}
 80022cc:	46c0      	nop			; (mov r8, r8)
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	46c0      	nop			; (mov r8, r8)
 80022d4:	20000018 	.word	0x20000018
 80022d8:	200001f8 	.word	0x200001f8

080022dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	af00      	add	r7, sp, #0
  return uwTick;
 80022e0:	4b02      	ldr	r3, [pc, #8]	; (80022ec <HAL_GetTick+0x10>)
 80022e2:	681b      	ldr	r3, [r3, #0]
}
 80022e4:	0018      	movs	r0, r3
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}
 80022ea:	46c0      	nop			; (mov r8, r8)
 80022ec:	200001f8 	.word	0x200001f8

080022f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b084      	sub	sp, #16
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80022f8:	f7ff fff0 	bl	80022dc <HAL_GetTick>
 80022fc:	0003      	movs	r3, r0
 80022fe:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	3301      	adds	r3, #1
 8002308:	d005      	beq.n	8002316 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800230a:	4b0a      	ldr	r3, [pc, #40]	; (8002334 <HAL_Delay+0x44>)
 800230c:	781b      	ldrb	r3, [r3, #0]
 800230e:	001a      	movs	r2, r3
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	189b      	adds	r3, r3, r2
 8002314:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002316:	46c0      	nop			; (mov r8, r8)
 8002318:	f7ff ffe0 	bl	80022dc <HAL_GetTick>
 800231c:	0002      	movs	r2, r0
 800231e:	68bb      	ldr	r3, [r7, #8]
 8002320:	1ad3      	subs	r3, r2, r3
 8002322:	68fa      	ldr	r2, [r7, #12]
 8002324:	429a      	cmp	r2, r3
 8002326:	d8f7      	bhi.n	8002318 <HAL_Delay+0x28>
  {
  }
}
 8002328:	46c0      	nop			; (mov r8, r8)
 800232a:	46c0      	nop			; (mov r8, r8)
 800232c:	46bd      	mov	sp, r7
 800232e:	b004      	add	sp, #16
 8002330:	bd80      	pop	{r7, pc}
 8002332:	46c0      	nop			; (mov r8, r8)
 8002334:	20000018 	.word	0x20000018

08002338 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{  if ((int32_t)(IRQn) >= 0)
 8002338:	b580      	push	{r7, lr}
 800233a:	b082      	sub	sp, #8
 800233c:	af00      	add	r7, sp, #0
 800233e:	0002      	movs	r2, r0
 8002340:	1dfb      	adds	r3, r7, #7
 8002342:	701a      	strb	r2, [r3, #0]
 8002344:	1dfb      	adds	r3, r7, #7
 8002346:	781b      	ldrb	r3, [r3, #0]
 8002348:	2b7f      	cmp	r3, #127	; 0x7f
 800234a:	d809      	bhi.n	8002360 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800234c:	1dfb      	adds	r3, r7, #7
 800234e:	781b      	ldrb	r3, [r3, #0]
 8002350:	001a      	movs	r2, r3
 8002352:	231f      	movs	r3, #31
 8002354:	401a      	ands	r2, r3
 8002356:	4b04      	ldr	r3, [pc, #16]	; (8002368 <__NVIC_EnableIRQ+0x30>)
 8002358:	2101      	movs	r1, #1
 800235a:	4091      	lsls	r1, r2
 800235c:	000a      	movs	r2, r1
 800235e:	601a      	str	r2, [r3, #0]
  }
}
 8002360:	46c0      	nop			; (mov r8, r8)
 8002362:	46bd      	mov	sp, r7
 8002364:	b002      	add	sp, #8
 8002366:	bd80      	pop	{r7, pc}
 8002368:	e000e100 	.word	0xe000e100

0800236c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800236c:	b590      	push	{r4, r7, lr}
 800236e:	b083      	sub	sp, #12
 8002370:	af00      	add	r7, sp, #0
 8002372:	0002      	movs	r2, r0
 8002374:	6039      	str	r1, [r7, #0]
 8002376:	1dfb      	adds	r3, r7, #7
 8002378:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800237a:	1dfb      	adds	r3, r7, #7
 800237c:	781b      	ldrb	r3, [r3, #0]
 800237e:	2b7f      	cmp	r3, #127	; 0x7f
 8002380:	d828      	bhi.n	80023d4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002382:	4a2f      	ldr	r2, [pc, #188]	; (8002440 <__NVIC_SetPriority+0xd4>)
 8002384:	1dfb      	adds	r3, r7, #7
 8002386:	781b      	ldrb	r3, [r3, #0]
 8002388:	b25b      	sxtb	r3, r3
 800238a:	089b      	lsrs	r3, r3, #2
 800238c:	33c0      	adds	r3, #192	; 0xc0
 800238e:	009b      	lsls	r3, r3, #2
 8002390:	589b      	ldr	r3, [r3, r2]
 8002392:	1dfa      	adds	r2, r7, #7
 8002394:	7812      	ldrb	r2, [r2, #0]
 8002396:	0011      	movs	r1, r2
 8002398:	2203      	movs	r2, #3
 800239a:	400a      	ands	r2, r1
 800239c:	00d2      	lsls	r2, r2, #3
 800239e:	21ff      	movs	r1, #255	; 0xff
 80023a0:	4091      	lsls	r1, r2
 80023a2:	000a      	movs	r2, r1
 80023a4:	43d2      	mvns	r2, r2
 80023a6:	401a      	ands	r2, r3
 80023a8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	019b      	lsls	r3, r3, #6
 80023ae:	22ff      	movs	r2, #255	; 0xff
 80023b0:	401a      	ands	r2, r3
 80023b2:	1dfb      	adds	r3, r7, #7
 80023b4:	781b      	ldrb	r3, [r3, #0]
 80023b6:	0018      	movs	r0, r3
 80023b8:	2303      	movs	r3, #3
 80023ba:	4003      	ands	r3, r0
 80023bc:	00db      	lsls	r3, r3, #3
 80023be:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80023c0:	481f      	ldr	r0, [pc, #124]	; (8002440 <__NVIC_SetPriority+0xd4>)
 80023c2:	1dfb      	adds	r3, r7, #7
 80023c4:	781b      	ldrb	r3, [r3, #0]
 80023c6:	b25b      	sxtb	r3, r3
 80023c8:	089b      	lsrs	r3, r3, #2
 80023ca:	430a      	orrs	r2, r1
 80023cc:	33c0      	adds	r3, #192	; 0xc0
 80023ce:	009b      	lsls	r3, r3, #2
 80023d0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80023d2:	e031      	b.n	8002438 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80023d4:	4a1b      	ldr	r2, [pc, #108]	; (8002444 <__NVIC_SetPriority+0xd8>)
 80023d6:	1dfb      	adds	r3, r7, #7
 80023d8:	781b      	ldrb	r3, [r3, #0]
 80023da:	0019      	movs	r1, r3
 80023dc:	230f      	movs	r3, #15
 80023de:	400b      	ands	r3, r1
 80023e0:	3b08      	subs	r3, #8
 80023e2:	089b      	lsrs	r3, r3, #2
 80023e4:	3306      	adds	r3, #6
 80023e6:	009b      	lsls	r3, r3, #2
 80023e8:	18d3      	adds	r3, r2, r3
 80023ea:	3304      	adds	r3, #4
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	1dfa      	adds	r2, r7, #7
 80023f0:	7812      	ldrb	r2, [r2, #0]
 80023f2:	0011      	movs	r1, r2
 80023f4:	2203      	movs	r2, #3
 80023f6:	400a      	ands	r2, r1
 80023f8:	00d2      	lsls	r2, r2, #3
 80023fa:	21ff      	movs	r1, #255	; 0xff
 80023fc:	4091      	lsls	r1, r2
 80023fe:	000a      	movs	r2, r1
 8002400:	43d2      	mvns	r2, r2
 8002402:	401a      	ands	r2, r3
 8002404:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	019b      	lsls	r3, r3, #6
 800240a:	22ff      	movs	r2, #255	; 0xff
 800240c:	401a      	ands	r2, r3
 800240e:	1dfb      	adds	r3, r7, #7
 8002410:	781b      	ldrb	r3, [r3, #0]
 8002412:	0018      	movs	r0, r3
 8002414:	2303      	movs	r3, #3
 8002416:	4003      	ands	r3, r0
 8002418:	00db      	lsls	r3, r3, #3
 800241a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800241c:	4809      	ldr	r0, [pc, #36]	; (8002444 <__NVIC_SetPriority+0xd8>)
 800241e:	1dfb      	adds	r3, r7, #7
 8002420:	781b      	ldrb	r3, [r3, #0]
 8002422:	001c      	movs	r4, r3
 8002424:	230f      	movs	r3, #15
 8002426:	4023      	ands	r3, r4
 8002428:	3b08      	subs	r3, #8
 800242a:	089b      	lsrs	r3, r3, #2
 800242c:	430a      	orrs	r2, r1
 800242e:	3306      	adds	r3, #6
 8002430:	009b      	lsls	r3, r3, #2
 8002432:	18c3      	adds	r3, r0, r3
 8002434:	3304      	adds	r3, #4
 8002436:	601a      	str	r2, [r3, #0]
}
 8002438:	46c0      	nop			; (mov r8, r8)
 800243a:	46bd      	mov	sp, r7
 800243c:	b003      	add	sp, #12
 800243e:	bd90      	pop	{r4, r7, pc}
 8002440:	e000e100 	.word	0xe000e100
 8002444:	e000ed00 	.word	0xe000ed00

08002448 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002448:	b580      	push	{r7, lr}
 800244a:	b084      	sub	sp, #16
 800244c:	af00      	add	r7, sp, #0
 800244e:	60b9      	str	r1, [r7, #8]
 8002450:	607a      	str	r2, [r7, #4]
 8002452:	210f      	movs	r1, #15
 8002454:	187b      	adds	r3, r7, r1
 8002456:	1c02      	adds	r2, r0, #0
 8002458:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800245a:	68ba      	ldr	r2, [r7, #8]
 800245c:	187b      	adds	r3, r7, r1
 800245e:	781b      	ldrb	r3, [r3, #0]
 8002460:	b25b      	sxtb	r3, r3
 8002462:	0011      	movs	r1, r2
 8002464:	0018      	movs	r0, r3
 8002466:	f7ff ff81 	bl	800236c <__NVIC_SetPriority>
}
 800246a:	46c0      	nop			; (mov r8, r8)
 800246c:	46bd      	mov	sp, r7
 800246e:	b004      	add	sp, #16
 8002470:	bd80      	pop	{r7, pc}

08002472 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002472:	b580      	push	{r7, lr}
 8002474:	b082      	sub	sp, #8
 8002476:	af00      	add	r7, sp, #0
 8002478:	0002      	movs	r2, r0
 800247a:	1dfb      	adds	r3, r7, #7
 800247c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800247e:	1dfb      	adds	r3, r7, #7
 8002480:	781b      	ldrb	r3, [r3, #0]
 8002482:	b25b      	sxtb	r3, r3
 8002484:	0018      	movs	r0, r3
 8002486:	f7ff ff57 	bl	8002338 <__NVIC_EnableIRQ>
}
 800248a:	46c0      	nop			; (mov r8, r8)
 800248c:	46bd      	mov	sp, r7
 800248e:	b002      	add	sp, #8
 8002490:	bd80      	pop	{r7, pc}

08002492 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002492:	b580      	push	{r7, lr}
 8002494:	b084      	sub	sp, #16
 8002496:	af00      	add	r7, sp, #0
 8002498:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800249a:	230f      	movs	r3, #15
 800249c:	18fb      	adds	r3, r7, r3
 800249e:	2200      	movs	r2, #0
 80024a0:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2225      	movs	r2, #37	; 0x25
 80024a6:	5c9b      	ldrb	r3, [r3, r2]
 80024a8:	b2db      	uxtb	r3, r3
 80024aa:	2b02      	cmp	r3, #2
 80024ac:	d008      	beq.n	80024c0 <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2204      	movs	r2, #4
 80024b2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2224      	movs	r2, #36	; 0x24
 80024b8:	2100      	movs	r1, #0
 80024ba:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80024bc:	2301      	movs	r3, #1
 80024be:	e024      	b.n	800250a <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	681a      	ldr	r2, [r3, #0]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	210e      	movs	r1, #14
 80024cc:	438a      	bics	r2, r1
 80024ce:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	681a      	ldr	r2, [r3, #0]
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	2101      	movs	r1, #1
 80024dc:	438a      	bics	r2, r1
 80024de:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024e4:	221c      	movs	r2, #28
 80024e6:	401a      	ands	r2, r3
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ec:	2101      	movs	r1, #1
 80024ee:	4091      	lsls	r1, r2
 80024f0:	000a      	movs	r2, r1
 80024f2:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2225      	movs	r2, #37	; 0x25
 80024f8:	2101      	movs	r1, #1
 80024fa:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2224      	movs	r2, #36	; 0x24
 8002500:	2100      	movs	r1, #0
 8002502:	5499      	strb	r1, [r3, r2]

    return status;
 8002504:	230f      	movs	r3, #15
 8002506:	18fb      	adds	r3, r7, r3
 8002508:	781b      	ldrb	r3, [r3, #0]
  }
}
 800250a:	0018      	movs	r0, r3
 800250c:	46bd      	mov	sp, r7
 800250e:	b004      	add	sp, #16
 8002510:	bd80      	pop	{r7, pc}

08002512 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002512:	b580      	push	{r7, lr}
 8002514:	b084      	sub	sp, #16
 8002516:	af00      	add	r7, sp, #0
 8002518:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800251a:	210f      	movs	r1, #15
 800251c:	187b      	adds	r3, r7, r1
 800251e:	2200      	movs	r2, #0
 8002520:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2225      	movs	r2, #37	; 0x25
 8002526:	5c9b      	ldrb	r3, [r3, r2]
 8002528:	b2db      	uxtb	r3, r3
 800252a:	2b02      	cmp	r3, #2
 800252c:	d006      	beq.n	800253c <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2204      	movs	r2, #4
 8002532:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002534:	187b      	adds	r3, r7, r1
 8002536:	2201      	movs	r2, #1
 8002538:	701a      	strb	r2, [r3, #0]
 800253a:	e02a      	b.n	8002592 <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	681a      	ldr	r2, [r3, #0]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	210e      	movs	r1, #14
 8002548:	438a      	bics	r2, r1
 800254a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	681a      	ldr	r2, [r3, #0]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	2101      	movs	r1, #1
 8002558:	438a      	bics	r2, r1
 800255a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002560:	221c      	movs	r2, #28
 8002562:	401a      	ands	r2, r3
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002568:	2101      	movs	r1, #1
 800256a:	4091      	lsls	r1, r2
 800256c:	000a      	movs	r2, r1
 800256e:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2225      	movs	r2, #37	; 0x25
 8002574:	2101      	movs	r1, #1
 8002576:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2224      	movs	r2, #36	; 0x24
 800257c:	2100      	movs	r1, #0
 800257e:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002584:	2b00      	cmp	r3, #0
 8002586:	d004      	beq.n	8002592 <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800258c:	687a      	ldr	r2, [r7, #4]
 800258e:	0010      	movs	r0, r2
 8002590:	4798      	blx	r3
    }
  }
  return status;
 8002592:	230f      	movs	r3, #15
 8002594:	18fb      	adds	r3, r7, r3
 8002596:	781b      	ldrb	r3, [r3, #0]
}
 8002598:	0018      	movs	r0, r3
 800259a:	46bd      	mov	sp, r7
 800259c:	b004      	add	sp, #16
 800259e:	bd80      	pop	{r7, pc}

080025a0 <HAL_FLASH_Program>:
  * @param  Data          Specifie the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint32_t Data)
{
 80025a0:	b5b0      	push	{r4, r5, r7, lr}
 80025a2:	b086      	sub	sp, #24
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	60f8      	str	r0, [r7, #12]
 80025a8:	60b9      	str	r1, [r7, #8]
 80025aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80025ac:	2317      	movs	r3, #23
 80025ae:	18fb      	adds	r3, r7, r3
 80025b0:	2201      	movs	r2, #1
 80025b2:	701a      	strb	r2, [r3, #0]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80025b4:	4b16      	ldr	r3, [pc, #88]	; (8002610 <HAL_FLASH_Program+0x70>)
 80025b6:	7c1b      	ldrb	r3, [r3, #16]
 80025b8:	2b01      	cmp	r3, #1
 80025ba:	d101      	bne.n	80025c0 <HAL_FLASH_Program+0x20>
 80025bc:	2302      	movs	r3, #2
 80025be:	e022      	b.n	8002606 <HAL_FLASH_Program+0x66>
 80025c0:	4b13      	ldr	r3, [pc, #76]	; (8002610 <HAL_FLASH_Program+0x70>)
 80025c2:	2201      	movs	r2, #1
 80025c4:	741a      	strb	r2, [r3, #16]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80025c6:	2517      	movs	r5, #23
 80025c8:	197c      	adds	r4, r7, r5
 80025ca:	4b12      	ldr	r3, [pc, #72]	; (8002614 <HAL_FLASH_Program+0x74>)
 80025cc:	0018      	movs	r0, r3
 80025ce:	f000 f88b 	bl	80026e8 <FLASH_WaitForLastOperation>
 80025d2:	0003      	movs	r3, r0
 80025d4:	7023      	strb	r3, [r4, #0]
  
  if(status == HAL_OK)
 80025d6:	0029      	movs	r1, r5
 80025d8:	187b      	adds	r3, r7, r1
 80025da:	781b      	ldrb	r3, [r3, #0]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d10c      	bne.n	80025fa <HAL_FLASH_Program+0x5a>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80025e0:	4b0b      	ldr	r3, [pc, #44]	; (8002610 <HAL_FLASH_Program+0x70>)
 80025e2:	2200      	movs	r2, #0
 80025e4:	615a      	str	r2, [r3, #20]

    /*Program word (32-bit) at a specified address.*/
    *(__IO uint32_t *)Address = Data;
 80025e6:	68bb      	ldr	r3, [r7, #8]
 80025e8:	687a      	ldr	r2, [r7, #4]
 80025ea:	601a      	str	r2, [r3, #0]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80025ec:	187c      	adds	r4, r7, r1
 80025ee:	4b09      	ldr	r3, [pc, #36]	; (8002614 <HAL_FLASH_Program+0x74>)
 80025f0:	0018      	movs	r0, r3
 80025f2:	f000 f879 	bl	80026e8 <FLASH_WaitForLastOperation>
 80025f6:	0003      	movs	r3, r0
 80025f8:	7023      	strb	r3, [r4, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80025fa:	4b05      	ldr	r3, [pc, #20]	; (8002610 <HAL_FLASH_Program+0x70>)
 80025fc:	2200      	movs	r2, #0
 80025fe:	741a      	strb	r2, [r3, #16]

  return status;
 8002600:	2317      	movs	r3, #23
 8002602:	18fb      	adds	r3, r7, r3
 8002604:	781b      	ldrb	r3, [r3, #0]
}
 8002606:	0018      	movs	r0, r3
 8002608:	46bd      	mov	sp, r7
 800260a:	b006      	add	sp, #24
 800260c:	bdb0      	pop	{r4, r5, r7, pc}
 800260e:	46c0      	nop			; (mov r8, r8)
 8002610:	200001fc 	.word	0x200001fc
 8002614:	0000c350 	.word	0x0000c350

08002618 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b086      	sub	sp, #24
 800261c:	af00      	add	r7, sp, #0
  uint32_t primask_bit;

  /* Unlocking FLASH_PECR register access*/
  if(HAL_IS_BIT_SET(FLASH->PECR, FLASH_PECR_PELOCK))
 800261e:	4b23      	ldr	r3, [pc, #140]	; (80026ac <HAL_FLASH_Unlock+0x94>)
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	2201      	movs	r2, #1
 8002624:	4013      	ands	r3, r2
 8002626:	2b01      	cmp	r3, #1
 8002628:	d11a      	bne.n	8002660 <HAL_FLASH_Unlock+0x48>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800262a:	f3ef 8310 	mrs	r3, PRIMASK
 800262e:	60fb      	str	r3, [r7, #12]
  return(result);
 8002630:	68fb      	ldr	r3, [r7, #12]
  {
    /* Disable interrupts to avoid any interruption during unlock sequence */
    primask_bit = __get_PRIMASK();
 8002632:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8002634:	b672      	cpsid	i
}
 8002636:	46c0      	nop			; (mov r8, r8)
    __disable_irq();

    WRITE_REG(FLASH->PEKEYR, FLASH_PEKEY1);
 8002638:	4b1c      	ldr	r3, [pc, #112]	; (80026ac <HAL_FLASH_Unlock+0x94>)
 800263a:	4a1d      	ldr	r2, [pc, #116]	; (80026b0 <HAL_FLASH_Unlock+0x98>)
 800263c:	60da      	str	r2, [r3, #12]
    WRITE_REG(FLASH->PEKEYR, FLASH_PEKEY2);
 800263e:	4b1b      	ldr	r3, [pc, #108]	; (80026ac <HAL_FLASH_Unlock+0x94>)
 8002640:	4a1c      	ldr	r2, [pc, #112]	; (80026b4 <HAL_FLASH_Unlock+0x9c>)
 8002642:	60da      	str	r2, [r3, #12]
 8002644:	697b      	ldr	r3, [r7, #20]
 8002646:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002648:	693b      	ldr	r3, [r7, #16]
 800264a:	f383 8810 	msr	PRIMASK, r3
}
 800264e:	46c0      	nop			; (mov r8, r8)

    /* Re-enable the interrupts: restore previous priority mask */
    __set_PRIMASK(primask_bit);

    if(HAL_IS_BIT_SET(FLASH->PECR, FLASH_PECR_PELOCK))
 8002650:	4b16      	ldr	r3, [pc, #88]	; (80026ac <HAL_FLASH_Unlock+0x94>)
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	2201      	movs	r2, #1
 8002656:	4013      	ands	r3, r2
 8002658:	2b01      	cmp	r3, #1
 800265a:	d101      	bne.n	8002660 <HAL_FLASH_Unlock+0x48>
    {
      return HAL_ERROR;
 800265c:	2301      	movs	r3, #1
 800265e:	e021      	b.n	80026a4 <HAL_FLASH_Unlock+0x8c>
    }
  }

  if (HAL_IS_BIT_SET(FLASH->PECR, FLASH_PECR_PRGLOCK))
 8002660:	4b12      	ldr	r3, [pc, #72]	; (80026ac <HAL_FLASH_Unlock+0x94>)
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	2202      	movs	r2, #2
 8002666:	4013      	ands	r3, r2
 8002668:	2b02      	cmp	r3, #2
 800266a:	d11a      	bne.n	80026a2 <HAL_FLASH_Unlock+0x8a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800266c:	f3ef 8310 	mrs	r3, PRIMASK
 8002670:	607b      	str	r3, [r7, #4]
  return(result);
 8002672:	687b      	ldr	r3, [r7, #4]
  {
    /* Disable interrupts to avoid any interruption during unlock sequence */
    primask_bit = __get_PRIMASK();
 8002674:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8002676:	b672      	cpsid	i
}
 8002678:	46c0      	nop			; (mov r8, r8)
    __disable_irq();

    /* Unlocking the program memory access */
    WRITE_REG(FLASH->PRGKEYR, FLASH_PRGKEY1);
 800267a:	4b0c      	ldr	r3, [pc, #48]	; (80026ac <HAL_FLASH_Unlock+0x94>)
 800267c:	4a0e      	ldr	r2, [pc, #56]	; (80026b8 <HAL_FLASH_Unlock+0xa0>)
 800267e:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->PRGKEYR, FLASH_PRGKEY2);  
 8002680:	4b0a      	ldr	r3, [pc, #40]	; (80026ac <HAL_FLASH_Unlock+0x94>)
 8002682:	4a0e      	ldr	r2, [pc, #56]	; (80026bc <HAL_FLASH_Unlock+0xa4>)
 8002684:	611a      	str	r2, [r3, #16]
 8002686:	697b      	ldr	r3, [r7, #20]
 8002688:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800268a:	68bb      	ldr	r3, [r7, #8]
 800268c:	f383 8810 	msr	PRIMASK, r3
}
 8002690:	46c0      	nop			; (mov r8, r8)

    /* Re-enable the interrupts: restore previous priority mask */
    __set_PRIMASK(primask_bit);

    if (HAL_IS_BIT_SET(FLASH->PECR, FLASH_PECR_PRGLOCK))
 8002692:	4b06      	ldr	r3, [pc, #24]	; (80026ac <HAL_FLASH_Unlock+0x94>)
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	2202      	movs	r2, #2
 8002698:	4013      	ands	r3, r2
 800269a:	2b02      	cmp	r3, #2
 800269c:	d101      	bne.n	80026a2 <HAL_FLASH_Unlock+0x8a>
    {
      return HAL_ERROR;
 800269e:	2301      	movs	r3, #1
 80026a0:	e000      	b.n	80026a4 <HAL_FLASH_Unlock+0x8c>
    }
  }

  return HAL_OK; 
 80026a2:	2300      	movs	r3, #0
}
 80026a4:	0018      	movs	r0, r3
 80026a6:	46bd      	mov	sp, r7
 80026a8:	b006      	add	sp, #24
 80026aa:	bd80      	pop	{r7, pc}
 80026ac:	40022000 	.word	0x40022000
 80026b0:	89abcdef 	.word	0x89abcdef
 80026b4:	02030405 	.word	0x02030405
 80026b8:	8c9daebf 	.word	0x8c9daebf
 80026bc:	13141516 	.word	0x13141516

080026c0 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	af00      	add	r7, sp, #0
  /* Set the PRGLOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->PECR, FLASH_PECR_PRGLOCK);
 80026c4:	4b07      	ldr	r3, [pc, #28]	; (80026e4 <HAL_FLASH_Lock+0x24>)
 80026c6:	685a      	ldr	r2, [r3, #4]
 80026c8:	4b06      	ldr	r3, [pc, #24]	; (80026e4 <HAL_FLASH_Lock+0x24>)
 80026ca:	2102      	movs	r1, #2
 80026cc:	430a      	orrs	r2, r1
 80026ce:	605a      	str	r2, [r3, #4]
  
  /* Set the PELOCK Bit to lock the PECR Register access */
  SET_BIT(FLASH->PECR, FLASH_PECR_PELOCK);
 80026d0:	4b04      	ldr	r3, [pc, #16]	; (80026e4 <HAL_FLASH_Lock+0x24>)
 80026d2:	685a      	ldr	r2, [r3, #4]
 80026d4:	4b03      	ldr	r3, [pc, #12]	; (80026e4 <HAL_FLASH_Lock+0x24>)
 80026d6:	2101      	movs	r1, #1
 80026d8:	430a      	orrs	r2, r1
 80026da:	605a      	str	r2, [r3, #4]

  return HAL_OK;  
 80026dc:	2300      	movs	r3, #0
}
 80026de:	0018      	movs	r0, r3
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bd80      	pop	{r7, pc}
 80026e4:	40022000 	.word	0x40022000

080026e8 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b084      	sub	sp, #16
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 80026f0:	f7ff fdf4 	bl	80022dc <HAL_GetTick>
 80026f4:	0003      	movs	r3, r0
 80026f6:	60fb      	str	r3, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80026f8:	e00f      	b.n	800271a <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	3301      	adds	r3, #1
 80026fe:	d00c      	beq.n	800271a <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d007      	beq.n	8002716 <FLASH_WaitForLastOperation+0x2e>
 8002706:	f7ff fde9 	bl	80022dc <HAL_GetTick>
 800270a:	0002      	movs	r2, r0
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	1ad3      	subs	r3, r2, r3
 8002710:	687a      	ldr	r2, [r7, #4]
 8002712:	429a      	cmp	r2, r3
 8002714:	d201      	bcs.n	800271a <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8002716:	2303      	movs	r3, #3
 8002718:	e052      	b.n	80027c0 <FLASH_WaitForLastOperation+0xd8>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800271a:	4b2b      	ldr	r3, [pc, #172]	; (80027c8 <FLASH_WaitForLastOperation+0xe0>)
 800271c:	699b      	ldr	r3, [r3, #24]
 800271e:	2201      	movs	r2, #1
 8002720:	4013      	ands	r3, r2
 8002722:	2b01      	cmp	r3, #1
 8002724:	d0e9      	beq.n	80026fa <FLASH_WaitForLastOperation+0x12>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8002726:	4b28      	ldr	r3, [pc, #160]	; (80027c8 <FLASH_WaitForLastOperation+0xe0>)
 8002728:	699b      	ldr	r3, [r3, #24]
 800272a:	2202      	movs	r2, #2
 800272c:	4013      	ands	r3, r2
 800272e:	2b02      	cmp	r3, #2
 8002730:	d102      	bne.n	8002738 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8002732:	4b25      	ldr	r3, [pc, #148]	; (80027c8 <FLASH_WaitForLastOperation+0xe0>)
 8002734:	2202      	movs	r2, #2
 8002736:	619a      	str	r2, [r3, #24]
  }
  
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 8002738:	4b23      	ldr	r3, [pc, #140]	; (80027c8 <FLASH_WaitForLastOperation+0xe0>)
 800273a:	699a      	ldr	r2, [r3, #24]
 800273c:	2380      	movs	r3, #128	; 0x80
 800273e:	005b      	lsls	r3, r3, #1
 8002740:	401a      	ands	r2, r3
 8002742:	2380      	movs	r3, #128	; 0x80
 8002744:	005b      	lsls	r3, r3, #1
 8002746:	429a      	cmp	r2, r3
 8002748:	d035      	beq.n	80027b6 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 800274a:	4b1f      	ldr	r3, [pc, #124]	; (80027c8 <FLASH_WaitForLastOperation+0xe0>)
 800274c:	699a      	ldr	r2, [r3, #24]
 800274e:	2380      	movs	r3, #128	; 0x80
 8002750:	009b      	lsls	r3, r3, #2
 8002752:	401a      	ands	r2, r3
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 8002754:	2380      	movs	r3, #128	; 0x80
 8002756:	009b      	lsls	r3, r3, #2
 8002758:	429a      	cmp	r2, r3
 800275a:	d02c      	beq.n	80027b6 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 800275c:	4b1a      	ldr	r3, [pc, #104]	; (80027c8 <FLASH_WaitForLastOperation+0xe0>)
 800275e:	699a      	ldr	r2, [r3, #24]
 8002760:	2380      	movs	r3, #128	; 0x80
 8002762:	00db      	lsls	r3, r3, #3
 8002764:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 8002766:	2380      	movs	r3, #128	; 0x80
 8002768:	00db      	lsls	r3, r3, #3
 800276a:	429a      	cmp	r2, r3
 800276c:	d023      	beq.n	80027b6 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 800276e:	4b16      	ldr	r3, [pc, #88]	; (80027c8 <FLASH_WaitForLastOperation+0xe0>)
 8002770:	699a      	ldr	r2, [r3, #24]
 8002772:	2380      	movs	r3, #128	; 0x80
 8002774:	011b      	lsls	r3, r3, #4
 8002776:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 8002778:	2380      	movs	r3, #128	; 0x80
 800277a:	011b      	lsls	r3, r3, #4
 800277c:	429a      	cmp	r2, r3
 800277e:	d01a      	beq.n	80027b6 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 8002780:	4b11      	ldr	r3, [pc, #68]	; (80027c8 <FLASH_WaitForLastOperation+0xe0>)
 8002782:	699a      	ldr	r2, [r3, #24]
 8002784:	2380      	movs	r3, #128	; 0x80
 8002786:	019b      	lsls	r3, r3, #6
 8002788:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 800278a:	2380      	movs	r3, #128	; 0x80
 800278c:	019b      	lsls	r3, r3, #6
 800278e:	429a      	cmp	r2, r3
 8002790:	d011      	beq.n	80027b6 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 8002792:	4b0d      	ldr	r3, [pc, #52]	; (80027c8 <FLASH_WaitForLastOperation+0xe0>)
 8002794:	699a      	ldr	r2, [r3, #24]
 8002796:	2380      	movs	r3, #128	; 0x80
 8002798:	029b      	lsls	r3, r3, #10
 800279a:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 800279c:	2380      	movs	r3, #128	; 0x80
 800279e:	029b      	lsls	r3, r3, #10
 80027a0:	429a      	cmp	r2, r3
 80027a2:	d008      	beq.n	80027b6 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR) )
 80027a4:	4b08      	ldr	r3, [pc, #32]	; (80027c8 <FLASH_WaitForLastOperation+0xe0>)
 80027a6:	699a      	ldr	r2, [r3, #24]
 80027a8:	2380      	movs	r3, #128	; 0x80
 80027aa:	025b      	lsls	r3, r3, #9
 80027ac:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 80027ae:	2380      	movs	r3, #128	; 0x80
 80027b0:	025b      	lsls	r3, r3, #9
 80027b2:	429a      	cmp	r2, r3
 80027b4:	d103      	bne.n	80027be <FLASH_WaitForLastOperation+0xd6>
     *           cut of the STM32L031xx device or the first cut of the STM32L041xx
     *           device, this error should be ignored. The revId of the device
     *           can be retrieved via the HAL_GetREVID() function.
     *
     */
    FLASH_SetErrorCode();
 80027b6:	f000 f809 	bl	80027cc <FLASH_SetErrorCode>
    return HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
 80027bc:	e000      	b.n	80027c0 <FLASH_WaitForLastOperation+0xd8>
  }

  /* There is no error flag set */
  return HAL_OK;
 80027be:	2300      	movs	r3, #0
}
 80027c0:	0018      	movs	r0, r3
 80027c2:	46bd      	mov	sp, r7
 80027c4:	b004      	add	sp, #16
 80027c6:	bd80      	pop	{r7, pc}
 80027c8:	40022000 	.word	0x40022000

080027cc <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b082      	sub	sp, #8
 80027d0:	af00      	add	r7, sp, #0
  uint32_t flags = 0;
 80027d2:	2300      	movs	r3, #0
 80027d4:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 80027d6:	4b49      	ldr	r3, [pc, #292]	; (80028fc <FLASH_SetErrorCode+0x130>)
 80027d8:	699a      	ldr	r2, [r3, #24]
 80027da:	2380      	movs	r3, #128	; 0x80
 80027dc:	005b      	lsls	r3, r3, #1
 80027de:	401a      	ands	r2, r3
 80027e0:	2380      	movs	r3, #128	; 0x80
 80027e2:	005b      	lsls	r3, r3, #1
 80027e4:	429a      	cmp	r2, r3
 80027e6:	d10a      	bne.n	80027fe <FLASH_SetErrorCode+0x32>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80027e8:	4b45      	ldr	r3, [pc, #276]	; (8002900 <FLASH_SetErrorCode+0x134>)
 80027ea:	695b      	ldr	r3, [r3, #20]
 80027ec:	2202      	movs	r2, #2
 80027ee:	431a      	orrs	r2, r3
 80027f0:	4b43      	ldr	r3, [pc, #268]	; (8002900 <FLASH_SetErrorCode+0x134>)
 80027f2:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_WRPERR;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2280      	movs	r2, #128	; 0x80
 80027f8:	0052      	lsls	r2, r2, #1
 80027fa:	4313      	orrs	r3, r2
 80027fc:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))
 80027fe:	4b3f      	ldr	r3, [pc, #252]	; (80028fc <FLASH_SetErrorCode+0x130>)
 8002800:	699a      	ldr	r2, [r3, #24]
 8002802:	2380      	movs	r3, #128	; 0x80
 8002804:	009b      	lsls	r3, r3, #2
 8002806:	401a      	ands	r2, r3
 8002808:	2380      	movs	r3, #128	; 0x80
 800280a:	009b      	lsls	r3, r3, #2
 800280c:	429a      	cmp	r2, r3
 800280e:	d10a      	bne.n	8002826 <FLASH_SetErrorCode+0x5a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8002810:	4b3b      	ldr	r3, [pc, #236]	; (8002900 <FLASH_SetErrorCode+0x134>)
 8002812:	695b      	ldr	r3, [r3, #20]
 8002814:	2201      	movs	r2, #1
 8002816:	431a      	orrs	r2, r3
 8002818:	4b39      	ldr	r3, [pc, #228]	; (8002900 <FLASH_SetErrorCode+0x134>)
 800281a:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_PGAERR;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2280      	movs	r2, #128	; 0x80
 8002820:	0092      	lsls	r2, r2, #2
 8002822:	4313      	orrs	r3, r2
 8002824:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR))
 8002826:	4b35      	ldr	r3, [pc, #212]	; (80028fc <FLASH_SetErrorCode+0x130>)
 8002828:	699a      	ldr	r2, [r3, #24]
 800282a:	2380      	movs	r3, #128	; 0x80
 800282c:	00db      	lsls	r3, r3, #3
 800282e:	401a      	ands	r2, r3
 8002830:	2380      	movs	r3, #128	; 0x80
 8002832:	00db      	lsls	r3, r3, #3
 8002834:	429a      	cmp	r2, r3
 8002836:	d10a      	bne.n	800284e <FLASH_SetErrorCode+0x82>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_SIZE;
 8002838:	4b31      	ldr	r3, [pc, #196]	; (8002900 <FLASH_SetErrorCode+0x134>)
 800283a:	695b      	ldr	r3, [r3, #20]
 800283c:	2208      	movs	r2, #8
 800283e:	431a      	orrs	r2, r3
 8002840:	4b2f      	ldr	r3, [pc, #188]	; (8002900 <FLASH_SetErrorCode+0x134>)
 8002842:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_SIZERR;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2280      	movs	r2, #128	; 0x80
 8002848:	00d2      	lsls	r2, r2, #3
 800284a:	4313      	orrs	r3, r2
 800284c:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 800284e:	4b2b      	ldr	r3, [pc, #172]	; (80028fc <FLASH_SetErrorCode+0x130>)
 8002850:	699a      	ldr	r2, [r3, #24]
 8002852:	2380      	movs	r3, #128	; 0x80
 8002854:	011b      	lsls	r3, r3, #4
 8002856:	401a      	ands	r2, r3
 8002858:	2380      	movs	r3, #128	; 0x80
 800285a:	011b      	lsls	r3, r3, #4
 800285c:	429a      	cmp	r2, r3
 800285e:	d10a      	bne.n	8002876 <FLASH_SetErrorCode+0xaa>
     *           cut of the STM32L031xx device or the first cut of the STM32L041xx
     *           device, this error should be ignored. The revId of the device
     *           can be retrieved via the HAL_GetREVID() function.
     *
     */
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8002860:	4b27      	ldr	r3, [pc, #156]	; (8002900 <FLASH_SetErrorCode+0x134>)
 8002862:	695b      	ldr	r3, [r3, #20]
 8002864:	2204      	movs	r2, #4
 8002866:	431a      	orrs	r2, r3
 8002868:	4b25      	ldr	r3, [pc, #148]	; (8002900 <FLASH_SetErrorCode+0x134>)
 800286a:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_OPTVERR;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2280      	movs	r2, #128	; 0x80
 8002870:	0112      	lsls	r2, r2, #4
 8002872:	4313      	orrs	r3, r2
 8002874:	607b      	str	r3, [r7, #4]
  }

  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR))
 8002876:	4b21      	ldr	r3, [pc, #132]	; (80028fc <FLASH_SetErrorCode+0x130>)
 8002878:	699a      	ldr	r2, [r3, #24]
 800287a:	2380      	movs	r3, #128	; 0x80
 800287c:	019b      	lsls	r3, r3, #6
 800287e:	401a      	ands	r2, r3
 8002880:	2380      	movs	r3, #128	; 0x80
 8002882:	019b      	lsls	r3, r3, #6
 8002884:	429a      	cmp	r2, r3
 8002886:	d10a      	bne.n	800289e <FLASH_SetErrorCode+0xd2>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8002888:	4b1d      	ldr	r3, [pc, #116]	; (8002900 <FLASH_SetErrorCode+0x134>)
 800288a:	695b      	ldr	r3, [r3, #20]
 800288c:	2210      	movs	r2, #16
 800288e:	431a      	orrs	r2, r3
 8002890:	4b1b      	ldr	r3, [pc, #108]	; (8002900 <FLASH_SetErrorCode+0x134>)
 8002892:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_RDERR;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2280      	movs	r2, #128	; 0x80
 8002898:	0192      	lsls	r2, r2, #6
 800289a:	4313      	orrs	r3, r2
 800289c:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR))
 800289e:	4b17      	ldr	r3, [pc, #92]	; (80028fc <FLASH_SetErrorCode+0x130>)
 80028a0:	699a      	ldr	r2, [r3, #24]
 80028a2:	2380      	movs	r3, #128	; 0x80
 80028a4:	029b      	lsls	r3, r3, #10
 80028a6:	401a      	ands	r2, r3
 80028a8:	2380      	movs	r3, #128	; 0x80
 80028aa:	029b      	lsls	r3, r3, #10
 80028ac:	429a      	cmp	r2, r3
 80028ae:	d109      	bne.n	80028c4 <FLASH_SetErrorCode+0xf8>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_FWWERR;
 80028b0:	4b13      	ldr	r3, [pc, #76]	; (8002900 <FLASH_SetErrorCode+0x134>)
 80028b2:	695b      	ldr	r3, [r3, #20]
 80028b4:	2220      	movs	r2, #32
 80028b6:	431a      	orrs	r2, r3
 80028b8:	4b11      	ldr	r3, [pc, #68]	; (8002900 <FLASH_SetErrorCode+0x134>)
 80028ba:	615a      	str	r2, [r3, #20]
    flags |= HAL_FLASH_ERROR_FWWERR;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2220      	movs	r2, #32
 80028c0:	4313      	orrs	r3, r2
 80028c2:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR))
 80028c4:	4b0d      	ldr	r3, [pc, #52]	; (80028fc <FLASH_SetErrorCode+0x130>)
 80028c6:	699a      	ldr	r2, [r3, #24]
 80028c8:	2380      	movs	r3, #128	; 0x80
 80028ca:	025b      	lsls	r3, r3, #9
 80028cc:	401a      	ands	r2, r3
 80028ce:	2380      	movs	r3, #128	; 0x80
 80028d0:	025b      	lsls	r3, r3, #9
 80028d2:	429a      	cmp	r2, r3
 80028d4:	d10a      	bne.n	80028ec <FLASH_SetErrorCode+0x120>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_NOTZERO;
 80028d6:	4b0a      	ldr	r3, [pc, #40]	; (8002900 <FLASH_SetErrorCode+0x134>)
 80028d8:	695b      	ldr	r3, [r3, #20]
 80028da:	2240      	movs	r2, #64	; 0x40
 80028dc:	431a      	orrs	r2, r3
 80028de:	4b08      	ldr	r3, [pc, #32]	; (8002900 <FLASH_SetErrorCode+0x134>)
 80028e0:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_NOTZEROERR;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2280      	movs	r2, #128	; 0x80
 80028e6:	0252      	lsls	r2, r2, #9
 80028e8:	4313      	orrs	r3, r2
 80028ea:	607b      	str	r3, [r7, #4]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 80028ec:	4b03      	ldr	r3, [pc, #12]	; (80028fc <FLASH_SetErrorCode+0x130>)
 80028ee:	687a      	ldr	r2, [r7, #4]
 80028f0:	619a      	str	r2, [r3, #24]
}  
 80028f2:	46c0      	nop			; (mov r8, r8)
 80028f4:	46bd      	mov	sp, r7
 80028f6:	b002      	add	sp, #8
 80028f8:	bd80      	pop	{r7, pc}
 80028fa:	46c0      	nop			; (mov r8, r8)
 80028fc:	40022000 	.word	0x40022000
 8002900:	200001fc 	.word	0x200001fc

08002904 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8002904:	b5b0      	push	{r4, r5, r7, lr}
 8002906:	b084      	sub	sp, #16
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
 800290c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800290e:	230f      	movs	r3, #15
 8002910:	18fb      	adds	r3, r7, r3
 8002912:	2201      	movs	r2, #1
 8002914:	701a      	strb	r2, [r3, #0]
  uint32_t address = 0U;
 8002916:	2300      	movs	r3, #0
 8002918:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800291a:	4b29      	ldr	r3, [pc, #164]	; (80029c0 <HAL_FLASHEx_Erase+0xbc>)
 800291c:	7c1b      	ldrb	r3, [r3, #16]
 800291e:	2b01      	cmp	r3, #1
 8002920:	d101      	bne.n	8002926 <HAL_FLASHEx_Erase+0x22>
 8002922:	2302      	movs	r3, #2
 8002924:	e048      	b.n	80029b8 <HAL_FLASHEx_Erase+0xb4>
 8002926:	4b26      	ldr	r3, [pc, #152]	; (80029c0 <HAL_FLASHEx_Erase+0xbc>)
 8002928:	2201      	movs	r2, #1
 800292a:	741a      	strb	r2, [r3, #16]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800292c:	250f      	movs	r5, #15
 800292e:	197c      	adds	r4, r7, r5
 8002930:	4b24      	ldr	r3, [pc, #144]	; (80029c4 <HAL_FLASHEx_Erase+0xc0>)
 8002932:	0018      	movs	r0, r3
 8002934:	f7ff fed8 	bl	80026e8 <FLASH_WaitForLastOperation>
 8002938:	0003      	movs	r3, r0
 800293a:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 800293c:	197b      	adds	r3, r7, r5
 800293e:	781b      	ldrb	r3, [r3, #0]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d133      	bne.n	80029ac <HAL_FLASHEx_Erase+0xa8>
  {
    /*Initialization of PageError variable*/
    *PageError = 0xFFFFFFFFU;
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	2201      	movs	r2, #1
 8002948:	4252      	negs	r2, r2
 800294a:	601a      	str	r2, [r3, #0]
    assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));
    assert_param(IS_FLASH_PROGRAM_ADDRESS(pEraseInit->PageAddress));
    assert_param(IS_FLASH_PROGRAM_ADDRESS((pEraseInit->PageAddress & ~(FLASH_PAGE_SIZE - 1U)) + pEraseInit->NbPages * FLASH_PAGE_SIZE - 1U));

    /* Erase page by page to be done*/
    for(address = pEraseInit->PageAddress; 
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	60bb      	str	r3, [r7, #8]
 8002952:	e022      	b.n	800299a <HAL_FLASHEx_Erase+0x96>
        address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
        address += FLASH_PAGE_SIZE)
    {
      FLASH_PageErase(address);
 8002954:	68bb      	ldr	r3, [r7, #8]
 8002956:	0018      	movs	r0, r3
 8002958:	f000 f83a 	bl	80029d0 <FLASH_PageErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800295c:	250f      	movs	r5, #15
 800295e:	197c      	adds	r4, r7, r5
 8002960:	4b18      	ldr	r3, [pc, #96]	; (80029c4 <HAL_FLASHEx_Erase+0xc0>)
 8002962:	0018      	movs	r0, r3
 8002964:	f7ff fec0 	bl	80026e8 <FLASH_WaitForLastOperation>
 8002968:	0003      	movs	r3, r0
 800296a:	7023      	strb	r3, [r4, #0]

      /* If the erase operation is completed, disable the ERASE Bit */
      CLEAR_BIT(FLASH->PECR, FLASH_PECR_PROG);
 800296c:	4b16      	ldr	r3, [pc, #88]	; (80029c8 <HAL_FLASHEx_Erase+0xc4>)
 800296e:	685a      	ldr	r2, [r3, #4]
 8002970:	4b15      	ldr	r3, [pc, #84]	; (80029c8 <HAL_FLASHEx_Erase+0xc4>)
 8002972:	2108      	movs	r1, #8
 8002974:	438a      	bics	r2, r1
 8002976:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(FLASH->PECR, FLASH_PECR_ERASE);
 8002978:	4b13      	ldr	r3, [pc, #76]	; (80029c8 <HAL_FLASHEx_Erase+0xc4>)
 800297a:	685a      	ldr	r2, [r3, #4]
 800297c:	4b12      	ldr	r3, [pc, #72]	; (80029c8 <HAL_FLASHEx_Erase+0xc4>)
 800297e:	4913      	ldr	r1, [pc, #76]	; (80029cc <HAL_FLASHEx_Erase+0xc8>)
 8002980:	400a      	ands	r2, r1
 8002982:	605a      	str	r2, [r3, #4]

      if (status != HAL_OK) 
 8002984:	197b      	adds	r3, r7, r5
 8002986:	781b      	ldrb	r3, [r3, #0]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d003      	beq.n	8002994 <HAL_FLASHEx_Erase+0x90>
      {
        /* In case of error, stop erase procedure and return the faulty address */
        *PageError = address;
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	68ba      	ldr	r2, [r7, #8]
 8002990:	601a      	str	r2, [r3, #0]
        break;
 8002992:	e00b      	b.n	80029ac <HAL_FLASHEx_Erase+0xa8>
        address += FLASH_PAGE_SIZE)
 8002994:	68bb      	ldr	r3, [r7, #8]
 8002996:	3380      	adds	r3, #128	; 0x80
 8002998:	60bb      	str	r3, [r7, #8]
        address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	689b      	ldr	r3, [r3, #8]
 800299e:	01da      	lsls	r2, r3, #7
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	18d3      	adds	r3, r2, r3
 80029a6:	68ba      	ldr	r2, [r7, #8]
 80029a8:	429a      	cmp	r2, r3
 80029aa:	d3d3      	bcc.n	8002954 <HAL_FLASHEx_Erase+0x50>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80029ac:	4b04      	ldr	r3, [pc, #16]	; (80029c0 <HAL_FLASHEx_Erase+0xbc>)
 80029ae:	2200      	movs	r2, #0
 80029b0:	741a      	strb	r2, [r3, #16]

  return status;
 80029b2:	230f      	movs	r3, #15
 80029b4:	18fb      	adds	r3, r7, r3
 80029b6:	781b      	ldrb	r3, [r3, #0]
}
 80029b8:	0018      	movs	r0, r3
 80029ba:	46bd      	mov	sp, r7
 80029bc:	b004      	add	sp, #16
 80029be:	bdb0      	pop	{r4, r5, r7, pc}
 80029c0:	200001fc 	.word	0x200001fc
 80029c4:	0000c350 	.word	0x0000c350
 80029c8:	40022000 	.word	0x40022000
 80029cc:	fffffdff 	.word	0xfffffdff

080029d0 <FLASH_PageErase>:
  * @note   A Page is erased in the Program memory only if the address to load 
  *         is the start address of a page (multiple of @ref FLASH_PAGE_SIZE bytes).
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b082      	sub	sp, #8
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80029d8:	4b0c      	ldr	r3, [pc, #48]	; (8002a0c <FLASH_PageErase+0x3c>)
 80029da:	2200      	movs	r2, #0
 80029dc:	615a      	str	r2, [r3, #20]

  /* Set the ERASE bit */
  SET_BIT(FLASH->PECR, FLASH_PECR_ERASE);
 80029de:	4b0c      	ldr	r3, [pc, #48]	; (8002a10 <FLASH_PageErase+0x40>)
 80029e0:	685a      	ldr	r2, [r3, #4]
 80029e2:	4b0b      	ldr	r3, [pc, #44]	; (8002a10 <FLASH_PageErase+0x40>)
 80029e4:	2180      	movs	r1, #128	; 0x80
 80029e6:	0089      	lsls	r1, r1, #2
 80029e8:	430a      	orrs	r2, r1
 80029ea:	605a      	str	r2, [r3, #4]

  /* Set PROG bit */
  SET_BIT(FLASH->PECR, FLASH_PECR_PROG);
 80029ec:	4b08      	ldr	r3, [pc, #32]	; (8002a10 <FLASH_PageErase+0x40>)
 80029ee:	685a      	ldr	r2, [r3, #4]
 80029f0:	4b07      	ldr	r3, [pc, #28]	; (8002a10 <FLASH_PageErase+0x40>)
 80029f2:	2108      	movs	r1, #8
 80029f4:	430a      	orrs	r2, r1
 80029f6:	605a      	str	r2, [r3, #4]

  /* Write 00000000h to the first word of the program page to erase */
  *(__IO uint32_t *)(uint32_t)(PageAddress & ~(FLASH_PAGE_SIZE - 1)) = 0x00000000;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	227f      	movs	r2, #127	; 0x7f
 80029fc:	4393      	bics	r3, r2
 80029fe:	2200      	movs	r2, #0
 8002a00:	601a      	str	r2, [r3, #0]
}
 8002a02:	46c0      	nop			; (mov r8, r8)
 8002a04:	46bd      	mov	sp, r7
 8002a06:	b002      	add	sp, #8
 8002a08:	bd80      	pop	{r7, pc}
 8002a0a:	46c0      	nop			; (mov r8, r8)
 8002a0c:	200001fc 	.word	0x200001fc
 8002a10:	40022000 	.word	0x40022000

08002a14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b086      	sub	sp, #24
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
 8002a1c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002a22:	2300      	movs	r3, #0
 8002a24:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8002a26:	2300      	movs	r3, #0
 8002a28:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8002a2a:	e155      	b.n	8002cd8 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	2101      	movs	r1, #1
 8002a32:	697a      	ldr	r2, [r7, #20]
 8002a34:	4091      	lsls	r1, r2
 8002a36:	000a      	movs	r2, r1
 8002a38:	4013      	ands	r3, r2
 8002a3a:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d100      	bne.n	8002a44 <HAL_GPIO_Init+0x30>
 8002a42:	e146      	b.n	8002cd2 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	2203      	movs	r2, #3
 8002a4a:	4013      	ands	r3, r2
 8002a4c:	2b01      	cmp	r3, #1
 8002a4e:	d005      	beq.n	8002a5c <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	2203      	movs	r2, #3
 8002a56:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002a58:	2b02      	cmp	r3, #2
 8002a5a:	d130      	bne.n	8002abe <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	689b      	ldr	r3, [r3, #8]
 8002a60:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8002a62:	697b      	ldr	r3, [r7, #20]
 8002a64:	005b      	lsls	r3, r3, #1
 8002a66:	2203      	movs	r2, #3
 8002a68:	409a      	lsls	r2, r3
 8002a6a:	0013      	movs	r3, r2
 8002a6c:	43da      	mvns	r2, r3
 8002a6e:	693b      	ldr	r3, [r7, #16]
 8002a70:	4013      	ands	r3, r2
 8002a72:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	68da      	ldr	r2, [r3, #12]
 8002a78:	697b      	ldr	r3, [r7, #20]
 8002a7a:	005b      	lsls	r3, r3, #1
 8002a7c:	409a      	lsls	r2, r3
 8002a7e:	0013      	movs	r3, r2
 8002a80:	693a      	ldr	r2, [r7, #16]
 8002a82:	4313      	orrs	r3, r2
 8002a84:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	693a      	ldr	r2, [r7, #16]
 8002a8a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a92:	2201      	movs	r2, #1
 8002a94:	697b      	ldr	r3, [r7, #20]
 8002a96:	409a      	lsls	r2, r3
 8002a98:	0013      	movs	r3, r2
 8002a9a:	43da      	mvns	r2, r3
 8002a9c:	693b      	ldr	r3, [r7, #16]
 8002a9e:	4013      	ands	r3, r2
 8002aa0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	091b      	lsrs	r3, r3, #4
 8002aa8:	2201      	movs	r2, #1
 8002aaa:	401a      	ands	r2, r3
 8002aac:	697b      	ldr	r3, [r7, #20]
 8002aae:	409a      	lsls	r2, r3
 8002ab0:	0013      	movs	r3, r2
 8002ab2:	693a      	ldr	r2, [r7, #16]
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	693a      	ldr	r2, [r7, #16]
 8002abc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	2203      	movs	r2, #3
 8002ac4:	4013      	ands	r3, r2
 8002ac6:	2b03      	cmp	r3, #3
 8002ac8:	d017      	beq.n	8002afa <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	68db      	ldr	r3, [r3, #12]
 8002ace:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002ad0:	697b      	ldr	r3, [r7, #20]
 8002ad2:	005b      	lsls	r3, r3, #1
 8002ad4:	2203      	movs	r2, #3
 8002ad6:	409a      	lsls	r2, r3
 8002ad8:	0013      	movs	r3, r2
 8002ada:	43da      	mvns	r2, r3
 8002adc:	693b      	ldr	r3, [r7, #16]
 8002ade:	4013      	ands	r3, r2
 8002ae0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	689a      	ldr	r2, [r3, #8]
 8002ae6:	697b      	ldr	r3, [r7, #20]
 8002ae8:	005b      	lsls	r3, r3, #1
 8002aea:	409a      	lsls	r2, r3
 8002aec:	0013      	movs	r3, r2
 8002aee:	693a      	ldr	r2, [r7, #16]
 8002af0:	4313      	orrs	r3, r2
 8002af2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	693a      	ldr	r2, [r7, #16]
 8002af8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	2203      	movs	r2, #3
 8002b00:	4013      	ands	r3, r2
 8002b02:	2b02      	cmp	r3, #2
 8002b04:	d123      	bne.n	8002b4e <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002b06:	697b      	ldr	r3, [r7, #20]
 8002b08:	08da      	lsrs	r2, r3, #3
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	3208      	adds	r2, #8
 8002b0e:	0092      	lsls	r2, r2, #2
 8002b10:	58d3      	ldr	r3, [r2, r3]
 8002b12:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8002b14:	697b      	ldr	r3, [r7, #20]
 8002b16:	2207      	movs	r2, #7
 8002b18:	4013      	ands	r3, r2
 8002b1a:	009b      	lsls	r3, r3, #2
 8002b1c:	220f      	movs	r2, #15
 8002b1e:	409a      	lsls	r2, r3
 8002b20:	0013      	movs	r3, r2
 8002b22:	43da      	mvns	r2, r3
 8002b24:	693b      	ldr	r3, [r7, #16]
 8002b26:	4013      	ands	r3, r2
 8002b28:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	691a      	ldr	r2, [r3, #16]
 8002b2e:	697b      	ldr	r3, [r7, #20]
 8002b30:	2107      	movs	r1, #7
 8002b32:	400b      	ands	r3, r1
 8002b34:	009b      	lsls	r3, r3, #2
 8002b36:	409a      	lsls	r2, r3
 8002b38:	0013      	movs	r3, r2
 8002b3a:	693a      	ldr	r2, [r7, #16]
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002b40:	697b      	ldr	r3, [r7, #20]
 8002b42:	08da      	lsrs	r2, r3, #3
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	3208      	adds	r2, #8
 8002b48:	0092      	lsls	r2, r2, #2
 8002b4a:	6939      	ldr	r1, [r7, #16]
 8002b4c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002b54:	697b      	ldr	r3, [r7, #20]
 8002b56:	005b      	lsls	r3, r3, #1
 8002b58:	2203      	movs	r2, #3
 8002b5a:	409a      	lsls	r2, r3
 8002b5c:	0013      	movs	r3, r2
 8002b5e:	43da      	mvns	r2, r3
 8002b60:	693b      	ldr	r3, [r7, #16]
 8002b62:	4013      	ands	r3, r2
 8002b64:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	2203      	movs	r2, #3
 8002b6c:	401a      	ands	r2, r3
 8002b6e:	697b      	ldr	r3, [r7, #20]
 8002b70:	005b      	lsls	r3, r3, #1
 8002b72:	409a      	lsls	r2, r3
 8002b74:	0013      	movs	r3, r2
 8002b76:	693a      	ldr	r2, [r7, #16]
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	693a      	ldr	r2, [r7, #16]
 8002b80:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	685a      	ldr	r2, [r3, #4]
 8002b86:	23c0      	movs	r3, #192	; 0xc0
 8002b88:	029b      	lsls	r3, r3, #10
 8002b8a:	4013      	ands	r3, r2
 8002b8c:	d100      	bne.n	8002b90 <HAL_GPIO_Init+0x17c>
 8002b8e:	e0a0      	b.n	8002cd2 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b90:	4b57      	ldr	r3, [pc, #348]	; (8002cf0 <HAL_GPIO_Init+0x2dc>)
 8002b92:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b94:	4b56      	ldr	r3, [pc, #344]	; (8002cf0 <HAL_GPIO_Init+0x2dc>)
 8002b96:	2101      	movs	r1, #1
 8002b98:	430a      	orrs	r2, r1
 8002b9a:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8002b9c:	4a55      	ldr	r2, [pc, #340]	; (8002cf4 <HAL_GPIO_Init+0x2e0>)
 8002b9e:	697b      	ldr	r3, [r7, #20]
 8002ba0:	089b      	lsrs	r3, r3, #2
 8002ba2:	3302      	adds	r3, #2
 8002ba4:	009b      	lsls	r3, r3, #2
 8002ba6:	589b      	ldr	r3, [r3, r2]
 8002ba8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8002baa:	697b      	ldr	r3, [r7, #20]
 8002bac:	2203      	movs	r2, #3
 8002bae:	4013      	ands	r3, r2
 8002bb0:	009b      	lsls	r3, r3, #2
 8002bb2:	220f      	movs	r2, #15
 8002bb4:	409a      	lsls	r2, r3
 8002bb6:	0013      	movs	r3, r2
 8002bb8:	43da      	mvns	r2, r3
 8002bba:	693b      	ldr	r3, [r7, #16]
 8002bbc:	4013      	ands	r3, r2
 8002bbe:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8002bc0:	687a      	ldr	r2, [r7, #4]
 8002bc2:	23a0      	movs	r3, #160	; 0xa0
 8002bc4:	05db      	lsls	r3, r3, #23
 8002bc6:	429a      	cmp	r2, r3
 8002bc8:	d01f      	beq.n	8002c0a <HAL_GPIO_Init+0x1f6>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	4a4a      	ldr	r2, [pc, #296]	; (8002cf8 <HAL_GPIO_Init+0x2e4>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d019      	beq.n	8002c06 <HAL_GPIO_Init+0x1f2>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	4a49      	ldr	r2, [pc, #292]	; (8002cfc <HAL_GPIO_Init+0x2e8>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d013      	beq.n	8002c02 <HAL_GPIO_Init+0x1ee>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	4a48      	ldr	r2, [pc, #288]	; (8002d00 <HAL_GPIO_Init+0x2ec>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d00d      	beq.n	8002bfe <HAL_GPIO_Init+0x1ea>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	4a47      	ldr	r2, [pc, #284]	; (8002d04 <HAL_GPIO_Init+0x2f0>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d007      	beq.n	8002bfa <HAL_GPIO_Init+0x1e6>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	4a46      	ldr	r2, [pc, #280]	; (8002d08 <HAL_GPIO_Init+0x2f4>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d101      	bne.n	8002bf6 <HAL_GPIO_Init+0x1e2>
 8002bf2:	2305      	movs	r3, #5
 8002bf4:	e00a      	b.n	8002c0c <HAL_GPIO_Init+0x1f8>
 8002bf6:	2306      	movs	r3, #6
 8002bf8:	e008      	b.n	8002c0c <HAL_GPIO_Init+0x1f8>
 8002bfa:	2304      	movs	r3, #4
 8002bfc:	e006      	b.n	8002c0c <HAL_GPIO_Init+0x1f8>
 8002bfe:	2303      	movs	r3, #3
 8002c00:	e004      	b.n	8002c0c <HAL_GPIO_Init+0x1f8>
 8002c02:	2302      	movs	r3, #2
 8002c04:	e002      	b.n	8002c0c <HAL_GPIO_Init+0x1f8>
 8002c06:	2301      	movs	r3, #1
 8002c08:	e000      	b.n	8002c0c <HAL_GPIO_Init+0x1f8>
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	697a      	ldr	r2, [r7, #20]
 8002c0e:	2103      	movs	r1, #3
 8002c10:	400a      	ands	r2, r1
 8002c12:	0092      	lsls	r2, r2, #2
 8002c14:	4093      	lsls	r3, r2
 8002c16:	693a      	ldr	r2, [r7, #16]
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002c1c:	4935      	ldr	r1, [pc, #212]	; (8002cf4 <HAL_GPIO_Init+0x2e0>)
 8002c1e:	697b      	ldr	r3, [r7, #20]
 8002c20:	089b      	lsrs	r3, r3, #2
 8002c22:	3302      	adds	r3, #2
 8002c24:	009b      	lsls	r3, r3, #2
 8002c26:	693a      	ldr	r2, [r7, #16]
 8002c28:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c2a:	4b38      	ldr	r3, [pc, #224]	; (8002d0c <HAL_GPIO_Init+0x2f8>)
 8002c2c:	689b      	ldr	r3, [r3, #8]
 8002c2e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	43da      	mvns	r2, r3
 8002c34:	693b      	ldr	r3, [r7, #16]
 8002c36:	4013      	ands	r3, r2
 8002c38:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	685a      	ldr	r2, [r3, #4]
 8002c3e:	2380      	movs	r3, #128	; 0x80
 8002c40:	035b      	lsls	r3, r3, #13
 8002c42:	4013      	ands	r3, r2
 8002c44:	d003      	beq.n	8002c4e <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8002c46:	693a      	ldr	r2, [r7, #16]
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002c4e:	4b2f      	ldr	r3, [pc, #188]	; (8002d0c <HAL_GPIO_Init+0x2f8>)
 8002c50:	693a      	ldr	r2, [r7, #16]
 8002c52:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002c54:	4b2d      	ldr	r3, [pc, #180]	; (8002d0c <HAL_GPIO_Init+0x2f8>)
 8002c56:	68db      	ldr	r3, [r3, #12]
 8002c58:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	43da      	mvns	r2, r3
 8002c5e:	693b      	ldr	r3, [r7, #16]
 8002c60:	4013      	ands	r3, r2
 8002c62:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	685a      	ldr	r2, [r3, #4]
 8002c68:	2380      	movs	r3, #128	; 0x80
 8002c6a:	039b      	lsls	r3, r3, #14
 8002c6c:	4013      	ands	r3, r2
 8002c6e:	d003      	beq.n	8002c78 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8002c70:	693a      	ldr	r2, [r7, #16]
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	4313      	orrs	r3, r2
 8002c76:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002c78:	4b24      	ldr	r3, [pc, #144]	; (8002d0c <HAL_GPIO_Init+0x2f8>)
 8002c7a:	693a      	ldr	r2, [r7, #16]
 8002c7c:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8002c7e:	4b23      	ldr	r3, [pc, #140]	; (8002d0c <HAL_GPIO_Init+0x2f8>)
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	43da      	mvns	r2, r3
 8002c88:	693b      	ldr	r3, [r7, #16]
 8002c8a:	4013      	ands	r3, r2
 8002c8c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	685a      	ldr	r2, [r3, #4]
 8002c92:	2380      	movs	r3, #128	; 0x80
 8002c94:	029b      	lsls	r3, r3, #10
 8002c96:	4013      	ands	r3, r2
 8002c98:	d003      	beq.n	8002ca2 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8002c9a:	693a      	ldr	r2, [r7, #16]
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002ca2:	4b1a      	ldr	r3, [pc, #104]	; (8002d0c <HAL_GPIO_Init+0x2f8>)
 8002ca4:	693a      	ldr	r2, [r7, #16]
 8002ca6:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ca8:	4b18      	ldr	r3, [pc, #96]	; (8002d0c <HAL_GPIO_Init+0x2f8>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	43da      	mvns	r2, r3
 8002cb2:	693b      	ldr	r3, [r7, #16]
 8002cb4:	4013      	ands	r3, r2
 8002cb6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	685a      	ldr	r2, [r3, #4]
 8002cbc:	2380      	movs	r3, #128	; 0x80
 8002cbe:	025b      	lsls	r3, r3, #9
 8002cc0:	4013      	ands	r3, r2
 8002cc2:	d003      	beq.n	8002ccc <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8002cc4:	693a      	ldr	r2, [r7, #16]
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	4313      	orrs	r3, r2
 8002cca:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002ccc:	4b0f      	ldr	r3, [pc, #60]	; (8002d0c <HAL_GPIO_Init+0x2f8>)
 8002cce:	693a      	ldr	r2, [r7, #16]
 8002cd0:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8002cd2:	697b      	ldr	r3, [r7, #20]
 8002cd4:	3301      	adds	r3, #1
 8002cd6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	681a      	ldr	r2, [r3, #0]
 8002cdc:	697b      	ldr	r3, [r7, #20]
 8002cde:	40da      	lsrs	r2, r3
 8002ce0:	1e13      	subs	r3, r2, #0
 8002ce2:	d000      	beq.n	8002ce6 <HAL_GPIO_Init+0x2d2>
 8002ce4:	e6a2      	b.n	8002a2c <HAL_GPIO_Init+0x18>
  }
}
 8002ce6:	46c0      	nop			; (mov r8, r8)
 8002ce8:	46c0      	nop			; (mov r8, r8)
 8002cea:	46bd      	mov	sp, r7
 8002cec:	b006      	add	sp, #24
 8002cee:	bd80      	pop	{r7, pc}
 8002cf0:	40021000 	.word	0x40021000
 8002cf4:	40010000 	.word	0x40010000
 8002cf8:	50000400 	.word	0x50000400
 8002cfc:	50000800 	.word	0x50000800
 8002d00:	50000c00 	.word	0x50000c00
 8002d04:	50001000 	.word	0x50001000
 8002d08:	50001c00 	.word	0x50001c00
 8002d0c:	40010400 	.word	0x40010400

08002d10 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b082      	sub	sp, #8
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
 8002d18:	0008      	movs	r0, r1
 8002d1a:	0011      	movs	r1, r2
 8002d1c:	1cbb      	adds	r3, r7, #2
 8002d1e:	1c02      	adds	r2, r0, #0
 8002d20:	801a      	strh	r2, [r3, #0]
 8002d22:	1c7b      	adds	r3, r7, #1
 8002d24:	1c0a      	adds	r2, r1, #0
 8002d26:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002d28:	1c7b      	adds	r3, r7, #1
 8002d2a:	781b      	ldrb	r3, [r3, #0]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d004      	beq.n	8002d3a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d30:	1cbb      	adds	r3, r7, #2
 8002d32:	881a      	ldrh	r2, [r3, #0]
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8002d38:	e003      	b.n	8002d42 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8002d3a:	1cbb      	adds	r3, r7, #2
 8002d3c:	881a      	ldrh	r2, [r3, #0]
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002d42:	46c0      	nop			; (mov r8, r8)
 8002d44:	46bd      	mov	sp, r7
 8002d46:	b002      	add	sp, #8
 8002d48:	bd80      	pop	{r7, pc}
	...

08002d4c <HAL_PWR_ConfigPVD>:
  *         more details about the voltage threshold corresponding to each
  *         detection level.
  * @retval None
  */
void HAL_PWR_ConfigPVD(PWR_PVDTypeDef *sConfigPVD)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b082      	sub	sp, #8
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_PVD_LEVEL(sConfigPVD->PVDLevel));
  assert_param(IS_PWR_PVD_MODE(sConfigPVD->Mode));

  /* Set PLS[7:5] bits according to PVDLevel value */
  MODIFY_REG(PWR->CR, PWR_CR_PLS, sConfigPVD->PVDLevel);
 8002d54:	4b2b      	ldr	r3, [pc, #172]	; (8002e04 <HAL_PWR_ConfigPVD+0xb8>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	22e0      	movs	r2, #224	; 0xe0
 8002d5a:	4393      	bics	r3, r2
 8002d5c:	0019      	movs	r1, r3
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681a      	ldr	r2, [r3, #0]
 8002d62:	4b28      	ldr	r3, [pc, #160]	; (8002e04 <HAL_PWR_ConfigPVD+0xb8>)
 8002d64:	430a      	orrs	r2, r1
 8002d66:	601a      	str	r2, [r3, #0]
  
  /* Clear any previous config. Keep it clear if no event or IT mode is selected */
  __HAL_PWR_PVD_EXTI_DISABLE_EVENT();
 8002d68:	4b27      	ldr	r3, [pc, #156]	; (8002e08 <HAL_PWR_ConfigPVD+0xbc>)
 8002d6a:	685a      	ldr	r2, [r3, #4]
 8002d6c:	4b26      	ldr	r3, [pc, #152]	; (8002e08 <HAL_PWR_ConfigPVD+0xbc>)
 8002d6e:	4927      	ldr	r1, [pc, #156]	; (8002e0c <HAL_PWR_ConfigPVD+0xc0>)
 8002d70:	400a      	ands	r2, r1
 8002d72:	605a      	str	r2, [r3, #4]
  __HAL_PWR_PVD_EXTI_DISABLE_IT();
 8002d74:	4b24      	ldr	r3, [pc, #144]	; (8002e08 <HAL_PWR_ConfigPVD+0xbc>)
 8002d76:	681a      	ldr	r2, [r3, #0]
 8002d78:	4b23      	ldr	r3, [pc, #140]	; (8002e08 <HAL_PWR_ConfigPVD+0xbc>)
 8002d7a:	4924      	ldr	r1, [pc, #144]	; (8002e0c <HAL_PWR_ConfigPVD+0xc0>)
 8002d7c:	400a      	ands	r2, r1
 8002d7e:	601a      	str	r2, [r3, #0]
  __HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE(); 
 8002d80:	4b21      	ldr	r3, [pc, #132]	; (8002e08 <HAL_PWR_ConfigPVD+0xbc>)
 8002d82:	68da      	ldr	r2, [r3, #12]
 8002d84:	4b20      	ldr	r3, [pc, #128]	; (8002e08 <HAL_PWR_ConfigPVD+0xbc>)
 8002d86:	4921      	ldr	r1, [pc, #132]	; (8002e0c <HAL_PWR_ConfigPVD+0xc0>)
 8002d88:	400a      	ands	r2, r1
 8002d8a:	60da      	str	r2, [r3, #12]
  __HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE();
 8002d8c:	4b1e      	ldr	r3, [pc, #120]	; (8002e08 <HAL_PWR_ConfigPVD+0xbc>)
 8002d8e:	689a      	ldr	r2, [r3, #8]
 8002d90:	4b1d      	ldr	r3, [pc, #116]	; (8002e08 <HAL_PWR_ConfigPVD+0xbc>)
 8002d92:	491e      	ldr	r1, [pc, #120]	; (8002e0c <HAL_PWR_ConfigPVD+0xc0>)
 8002d94:	400a      	ands	r2, r1
 8002d96:	609a      	str	r2, [r3, #8]

  /* Configure interrupt mode */
  if((sConfigPVD->Mode & PVD_MODE_IT) == PVD_MODE_IT)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	685a      	ldr	r2, [r3, #4]
 8002d9c:	2380      	movs	r3, #128	; 0x80
 8002d9e:	025b      	lsls	r3, r3, #9
 8002da0:	4013      	ands	r3, r2
 8002da2:	d006      	beq.n	8002db2 <HAL_PWR_ConfigPVD+0x66>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_IT();
 8002da4:	4b18      	ldr	r3, [pc, #96]	; (8002e08 <HAL_PWR_ConfigPVD+0xbc>)
 8002da6:	681a      	ldr	r2, [r3, #0]
 8002da8:	4b17      	ldr	r3, [pc, #92]	; (8002e08 <HAL_PWR_ConfigPVD+0xbc>)
 8002daa:	2180      	movs	r1, #128	; 0x80
 8002dac:	0249      	lsls	r1, r1, #9
 8002dae:	430a      	orrs	r2, r1
 8002db0:	601a      	str	r2, [r3, #0]
  }
  
  /* Configure event mode */
  if((sConfigPVD->Mode & PVD_MODE_EVT) == PVD_MODE_EVT)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	685a      	ldr	r2, [r3, #4]
 8002db6:	2380      	movs	r3, #128	; 0x80
 8002db8:	029b      	lsls	r3, r3, #10
 8002dba:	4013      	ands	r3, r2
 8002dbc:	d006      	beq.n	8002dcc <HAL_PWR_ConfigPVD+0x80>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_EVENT();
 8002dbe:	4b12      	ldr	r3, [pc, #72]	; (8002e08 <HAL_PWR_ConfigPVD+0xbc>)
 8002dc0:	685a      	ldr	r2, [r3, #4]
 8002dc2:	4b11      	ldr	r3, [pc, #68]	; (8002e08 <HAL_PWR_ConfigPVD+0xbc>)
 8002dc4:	2180      	movs	r1, #128	; 0x80
 8002dc6:	0249      	lsls	r1, r1, #9
 8002dc8:	430a      	orrs	r2, r1
 8002dca:	605a      	str	r2, [r3, #4]
  }
  
  /* Configure the edge */
  if((sConfigPVD->Mode & PVD_RISING_EDGE) == PVD_RISING_EDGE)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	2201      	movs	r2, #1
 8002dd2:	4013      	ands	r3, r2
 8002dd4:	d006      	beq.n	8002de4 <HAL_PWR_ConfigPVD+0x98>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE();
 8002dd6:	4b0c      	ldr	r3, [pc, #48]	; (8002e08 <HAL_PWR_ConfigPVD+0xbc>)
 8002dd8:	689a      	ldr	r2, [r3, #8]
 8002dda:	4b0b      	ldr	r3, [pc, #44]	; (8002e08 <HAL_PWR_ConfigPVD+0xbc>)
 8002ddc:	2180      	movs	r1, #128	; 0x80
 8002dde:	0249      	lsls	r1, r1, #9
 8002de0:	430a      	orrs	r2, r1
 8002de2:	609a      	str	r2, [r3, #8]
  }
  
  if((sConfigPVD->Mode & PVD_FALLING_EDGE) == PVD_FALLING_EDGE)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	2202      	movs	r2, #2
 8002dea:	4013      	ands	r3, r2
 8002dec:	d006      	beq.n	8002dfc <HAL_PWR_ConfigPVD+0xb0>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE();
 8002dee:	4b06      	ldr	r3, [pc, #24]	; (8002e08 <HAL_PWR_ConfigPVD+0xbc>)
 8002df0:	68da      	ldr	r2, [r3, #12]
 8002df2:	4b05      	ldr	r3, [pc, #20]	; (8002e08 <HAL_PWR_ConfigPVD+0xbc>)
 8002df4:	2180      	movs	r1, #128	; 0x80
 8002df6:	0249      	lsls	r1, r1, #9
 8002df8:	430a      	orrs	r2, r1
 8002dfa:	60da      	str	r2, [r3, #12]
  }
}
 8002dfc:	46c0      	nop			; (mov r8, r8)
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	b002      	add	sp, #8
 8002e02:	bd80      	pop	{r7, pc}
 8002e04:	40007000 	.word	0x40007000
 8002e08:	40010400 	.word	0x40010400
 8002e0c:	fffeffff 	.word	0xfffeffff

08002e10 <HAL_PWR_EnablePVD>:
/**
  * @brief Enables the Power Voltage Detector(PVD).
  * @retval None
  */
void HAL_PWR_EnablePVD(void)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	af00      	add	r7, sp, #0
  /* Enable the power voltage detector */
  SET_BIT(PWR->CR, PWR_CR_PVDE);
 8002e14:	4b04      	ldr	r3, [pc, #16]	; (8002e28 <HAL_PWR_EnablePVD+0x18>)
 8002e16:	681a      	ldr	r2, [r3, #0]
 8002e18:	4b03      	ldr	r3, [pc, #12]	; (8002e28 <HAL_PWR_EnablePVD+0x18>)
 8002e1a:	2110      	movs	r1, #16
 8002e1c:	430a      	orrs	r2, r1
 8002e1e:	601a      	str	r2, [r3, #0]
}
 8002e20:	46c0      	nop			; (mov r8, r8)
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}
 8002e26:	46c0      	nop			; (mov r8, r8)
 8002e28:	40007000 	.word	0x40007000

08002e2c <HAL_PWR_PVD_IRQHandler>:
  * @brief This function handles the PWR PVD interrupt request.
  * @note This API should be called under the PVD_IRQHandler().
  * @retval None
  */
void HAL_PWR_PVD_IRQHandler(void)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	af00      	add	r7, sp, #0
  /* Check PWR exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
 8002e30:	4b07      	ldr	r3, [pc, #28]	; (8002e50 <HAL_PWR_PVD_IRQHandler+0x24>)
 8002e32:	695a      	ldr	r2, [r3, #20]
 8002e34:	2380      	movs	r3, #128	; 0x80
 8002e36:	025b      	lsls	r3, r3, #9
 8002e38:	4013      	ands	r3, r2
 8002e3a:	d005      	beq.n	8002e48 <HAL_PWR_PVD_IRQHandler+0x1c>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 8002e3c:	f7fe f9aa 	bl	8001194 <HAL_PWR_PVDCallback>

    /* Clear PWR Exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 8002e40:	4b03      	ldr	r3, [pc, #12]	; (8002e50 <HAL_PWR_PVD_IRQHandler+0x24>)
 8002e42:	2280      	movs	r2, #128	; 0x80
 8002e44:	0252      	lsls	r2, r2, #9
 8002e46:	615a      	str	r2, [r3, #20]
  }
}
 8002e48:	46c0      	nop			; (mov r8, r8)
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd80      	pop	{r7, pc}
 8002e4e:	46c0      	nop			; (mov r8, r8)
 8002e50:	40010400 	.word	0x40010400

08002e54 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e54:	b5b0      	push	{r4, r5, r7, lr}
 8002e56:	b08a      	sub	sp, #40	; 0x28
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d102      	bne.n	8002e68 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002e62:	2301      	movs	r3, #1
 8002e64:	f000 fbbf 	bl	80035e6 <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e68:	4bc9      	ldr	r3, [pc, #804]	; (8003190 <HAL_RCC_OscConfig+0x33c>)
 8002e6a:	68db      	ldr	r3, [r3, #12]
 8002e6c:	220c      	movs	r2, #12
 8002e6e:	4013      	ands	r3, r2
 8002e70:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002e72:	4bc7      	ldr	r3, [pc, #796]	; (8003190 <HAL_RCC_OscConfig+0x33c>)
 8002e74:	68da      	ldr	r2, [r3, #12]
 8002e76:	2380      	movs	r3, #128	; 0x80
 8002e78:	025b      	lsls	r3, r3, #9
 8002e7a:	4013      	ands	r3, r2
 8002e7c:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	2201      	movs	r2, #1
 8002e84:	4013      	ands	r3, r2
 8002e86:	d100      	bne.n	8002e8a <HAL_RCC_OscConfig+0x36>
 8002e88:	e07e      	b.n	8002f88 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002e8a:	69fb      	ldr	r3, [r7, #28]
 8002e8c:	2b08      	cmp	r3, #8
 8002e8e:	d007      	beq.n	8002ea0 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002e90:	69fb      	ldr	r3, [r7, #28]
 8002e92:	2b0c      	cmp	r3, #12
 8002e94:	d112      	bne.n	8002ebc <HAL_RCC_OscConfig+0x68>
 8002e96:	69ba      	ldr	r2, [r7, #24]
 8002e98:	2380      	movs	r3, #128	; 0x80
 8002e9a:	025b      	lsls	r3, r3, #9
 8002e9c:	429a      	cmp	r2, r3
 8002e9e:	d10d      	bne.n	8002ebc <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ea0:	4bbb      	ldr	r3, [pc, #748]	; (8003190 <HAL_RCC_OscConfig+0x33c>)
 8002ea2:	681a      	ldr	r2, [r3, #0]
 8002ea4:	2380      	movs	r3, #128	; 0x80
 8002ea6:	029b      	lsls	r3, r3, #10
 8002ea8:	4013      	ands	r3, r2
 8002eaa:	d100      	bne.n	8002eae <HAL_RCC_OscConfig+0x5a>
 8002eac:	e06b      	b.n	8002f86 <HAL_RCC_OscConfig+0x132>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d167      	bne.n	8002f86 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	f000 fb95 	bl	80035e6 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	685a      	ldr	r2, [r3, #4]
 8002ec0:	2380      	movs	r3, #128	; 0x80
 8002ec2:	025b      	lsls	r3, r3, #9
 8002ec4:	429a      	cmp	r2, r3
 8002ec6:	d107      	bne.n	8002ed8 <HAL_RCC_OscConfig+0x84>
 8002ec8:	4bb1      	ldr	r3, [pc, #708]	; (8003190 <HAL_RCC_OscConfig+0x33c>)
 8002eca:	681a      	ldr	r2, [r3, #0]
 8002ecc:	4bb0      	ldr	r3, [pc, #704]	; (8003190 <HAL_RCC_OscConfig+0x33c>)
 8002ece:	2180      	movs	r1, #128	; 0x80
 8002ed0:	0249      	lsls	r1, r1, #9
 8002ed2:	430a      	orrs	r2, r1
 8002ed4:	601a      	str	r2, [r3, #0]
 8002ed6:	e027      	b.n	8002f28 <HAL_RCC_OscConfig+0xd4>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	685a      	ldr	r2, [r3, #4]
 8002edc:	23a0      	movs	r3, #160	; 0xa0
 8002ede:	02db      	lsls	r3, r3, #11
 8002ee0:	429a      	cmp	r2, r3
 8002ee2:	d10e      	bne.n	8002f02 <HAL_RCC_OscConfig+0xae>
 8002ee4:	4baa      	ldr	r3, [pc, #680]	; (8003190 <HAL_RCC_OscConfig+0x33c>)
 8002ee6:	681a      	ldr	r2, [r3, #0]
 8002ee8:	4ba9      	ldr	r3, [pc, #676]	; (8003190 <HAL_RCC_OscConfig+0x33c>)
 8002eea:	2180      	movs	r1, #128	; 0x80
 8002eec:	02c9      	lsls	r1, r1, #11
 8002eee:	430a      	orrs	r2, r1
 8002ef0:	601a      	str	r2, [r3, #0]
 8002ef2:	4ba7      	ldr	r3, [pc, #668]	; (8003190 <HAL_RCC_OscConfig+0x33c>)
 8002ef4:	681a      	ldr	r2, [r3, #0]
 8002ef6:	4ba6      	ldr	r3, [pc, #664]	; (8003190 <HAL_RCC_OscConfig+0x33c>)
 8002ef8:	2180      	movs	r1, #128	; 0x80
 8002efa:	0249      	lsls	r1, r1, #9
 8002efc:	430a      	orrs	r2, r1
 8002efe:	601a      	str	r2, [r3, #0]
 8002f00:	e012      	b.n	8002f28 <HAL_RCC_OscConfig+0xd4>
 8002f02:	4ba3      	ldr	r3, [pc, #652]	; (8003190 <HAL_RCC_OscConfig+0x33c>)
 8002f04:	681a      	ldr	r2, [r3, #0]
 8002f06:	4ba2      	ldr	r3, [pc, #648]	; (8003190 <HAL_RCC_OscConfig+0x33c>)
 8002f08:	49a2      	ldr	r1, [pc, #648]	; (8003194 <HAL_RCC_OscConfig+0x340>)
 8002f0a:	400a      	ands	r2, r1
 8002f0c:	601a      	str	r2, [r3, #0]
 8002f0e:	4ba0      	ldr	r3, [pc, #640]	; (8003190 <HAL_RCC_OscConfig+0x33c>)
 8002f10:	681a      	ldr	r2, [r3, #0]
 8002f12:	2380      	movs	r3, #128	; 0x80
 8002f14:	025b      	lsls	r3, r3, #9
 8002f16:	4013      	ands	r3, r2
 8002f18:	60fb      	str	r3, [r7, #12]
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	4b9c      	ldr	r3, [pc, #624]	; (8003190 <HAL_RCC_OscConfig+0x33c>)
 8002f1e:	681a      	ldr	r2, [r3, #0]
 8002f20:	4b9b      	ldr	r3, [pc, #620]	; (8003190 <HAL_RCC_OscConfig+0x33c>)
 8002f22:	499d      	ldr	r1, [pc, #628]	; (8003198 <HAL_RCC_OscConfig+0x344>)
 8002f24:	400a      	ands	r2, r1
 8002f26:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d015      	beq.n	8002f5c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f30:	f7ff f9d4 	bl	80022dc <HAL_GetTick>
 8002f34:	0003      	movs	r3, r0
 8002f36:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002f38:	e009      	b.n	8002f4e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f3a:	f7ff f9cf 	bl	80022dc <HAL_GetTick>
 8002f3e:	0002      	movs	r2, r0
 8002f40:	697b      	ldr	r3, [r7, #20]
 8002f42:	1ad3      	subs	r3, r2, r3
 8002f44:	2b64      	cmp	r3, #100	; 0x64
 8002f46:	d902      	bls.n	8002f4e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002f48:	2303      	movs	r3, #3
 8002f4a:	f000 fb4c 	bl	80035e6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002f4e:	4b90      	ldr	r3, [pc, #576]	; (8003190 <HAL_RCC_OscConfig+0x33c>)
 8002f50:	681a      	ldr	r2, [r3, #0]
 8002f52:	2380      	movs	r3, #128	; 0x80
 8002f54:	029b      	lsls	r3, r3, #10
 8002f56:	4013      	ands	r3, r2
 8002f58:	d0ef      	beq.n	8002f3a <HAL_RCC_OscConfig+0xe6>
 8002f5a:	e015      	b.n	8002f88 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f5c:	f7ff f9be 	bl	80022dc <HAL_GetTick>
 8002f60:	0003      	movs	r3, r0
 8002f62:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002f64:	e008      	b.n	8002f78 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f66:	f7ff f9b9 	bl	80022dc <HAL_GetTick>
 8002f6a:	0002      	movs	r2, r0
 8002f6c:	697b      	ldr	r3, [r7, #20]
 8002f6e:	1ad3      	subs	r3, r2, r3
 8002f70:	2b64      	cmp	r3, #100	; 0x64
 8002f72:	d901      	bls.n	8002f78 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8002f74:	2303      	movs	r3, #3
 8002f76:	e336      	b.n	80035e6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002f78:	4b85      	ldr	r3, [pc, #532]	; (8003190 <HAL_RCC_OscConfig+0x33c>)
 8002f7a:	681a      	ldr	r2, [r3, #0]
 8002f7c:	2380      	movs	r3, #128	; 0x80
 8002f7e:	029b      	lsls	r3, r3, #10
 8002f80:	4013      	ands	r3, r2
 8002f82:	d1f0      	bne.n	8002f66 <HAL_RCC_OscConfig+0x112>
 8002f84:	e000      	b.n	8002f88 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f86:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	2202      	movs	r2, #2
 8002f8e:	4013      	ands	r3, r2
 8002f90:	d100      	bne.n	8002f94 <HAL_RCC_OscConfig+0x140>
 8002f92:	e099      	b.n	80030c8 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	68db      	ldr	r3, [r3, #12]
 8002f98:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8002f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f9c:	2220      	movs	r2, #32
 8002f9e:	4013      	ands	r3, r2
 8002fa0:	d009      	beq.n	8002fb6 <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8002fa2:	4b7b      	ldr	r3, [pc, #492]	; (8003190 <HAL_RCC_OscConfig+0x33c>)
 8002fa4:	681a      	ldr	r2, [r3, #0]
 8002fa6:	4b7a      	ldr	r3, [pc, #488]	; (8003190 <HAL_RCC_OscConfig+0x33c>)
 8002fa8:	2120      	movs	r1, #32
 8002faa:	430a      	orrs	r2, r1
 8002fac:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8002fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fb0:	2220      	movs	r2, #32
 8002fb2:	4393      	bics	r3, r2
 8002fb4:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002fb6:	69fb      	ldr	r3, [r7, #28]
 8002fb8:	2b04      	cmp	r3, #4
 8002fba:	d005      	beq.n	8002fc8 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002fbc:	69fb      	ldr	r3, [r7, #28]
 8002fbe:	2b0c      	cmp	r3, #12
 8002fc0:	d13e      	bne.n	8003040 <HAL_RCC_OscConfig+0x1ec>
 8002fc2:	69bb      	ldr	r3, [r7, #24]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d13b      	bne.n	8003040 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8002fc8:	4b71      	ldr	r3, [pc, #452]	; (8003190 <HAL_RCC_OscConfig+0x33c>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	2204      	movs	r2, #4
 8002fce:	4013      	ands	r3, r2
 8002fd0:	d004      	beq.n	8002fdc <HAL_RCC_OscConfig+0x188>
 8002fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d101      	bne.n	8002fdc <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8002fd8:	2301      	movs	r3, #1
 8002fda:	e304      	b.n	80035e6 <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fdc:	4b6c      	ldr	r3, [pc, #432]	; (8003190 <HAL_RCC_OscConfig+0x33c>)
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	4a6e      	ldr	r2, [pc, #440]	; (800319c <HAL_RCC_OscConfig+0x348>)
 8002fe2:	4013      	ands	r3, r2
 8002fe4:	0019      	movs	r1, r3
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	691b      	ldr	r3, [r3, #16]
 8002fea:	021a      	lsls	r2, r3, #8
 8002fec:	4b68      	ldr	r3, [pc, #416]	; (8003190 <HAL_RCC_OscConfig+0x33c>)
 8002fee:	430a      	orrs	r2, r1
 8002ff0:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002ff2:	4b67      	ldr	r3, [pc, #412]	; (8003190 <HAL_RCC_OscConfig+0x33c>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	2209      	movs	r2, #9
 8002ff8:	4393      	bics	r3, r2
 8002ffa:	0019      	movs	r1, r3
 8002ffc:	4b64      	ldr	r3, [pc, #400]	; (8003190 <HAL_RCC_OscConfig+0x33c>)
 8002ffe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003000:	430a      	orrs	r2, r1
 8003002:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003004:	f000 fc42 	bl	800388c <HAL_RCC_GetSysClockFreq>
 8003008:	0001      	movs	r1, r0
 800300a:	4b61      	ldr	r3, [pc, #388]	; (8003190 <HAL_RCC_OscConfig+0x33c>)
 800300c:	68db      	ldr	r3, [r3, #12]
 800300e:	091b      	lsrs	r3, r3, #4
 8003010:	220f      	movs	r2, #15
 8003012:	4013      	ands	r3, r2
 8003014:	4a62      	ldr	r2, [pc, #392]	; (80031a0 <HAL_RCC_OscConfig+0x34c>)
 8003016:	5cd3      	ldrb	r3, [r2, r3]
 8003018:	000a      	movs	r2, r1
 800301a:	40da      	lsrs	r2, r3
 800301c:	4b61      	ldr	r3, [pc, #388]	; (80031a4 <HAL_RCC_OscConfig+0x350>)
 800301e:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8003020:	4b61      	ldr	r3, [pc, #388]	; (80031a8 <HAL_RCC_OscConfig+0x354>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	2513      	movs	r5, #19
 8003026:	197c      	adds	r4, r7, r5
 8003028:	0018      	movs	r0, r3
 800302a:	f7fe ff0b 	bl	8001e44 <HAL_InitTick>
 800302e:	0003      	movs	r3, r0
 8003030:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8003032:	197b      	adds	r3, r7, r5
 8003034:	781b      	ldrb	r3, [r3, #0]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d046      	beq.n	80030c8 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 800303a:	197b      	adds	r3, r7, r5
 800303c:	781b      	ldrb	r3, [r3, #0]
 800303e:	e2d2      	b.n	80035e6 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8003040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003042:	2b00      	cmp	r3, #0
 8003044:	d027      	beq.n	8003096 <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8003046:	4b52      	ldr	r3, [pc, #328]	; (8003190 <HAL_RCC_OscConfig+0x33c>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	2209      	movs	r2, #9
 800304c:	4393      	bics	r3, r2
 800304e:	0019      	movs	r1, r3
 8003050:	4b4f      	ldr	r3, [pc, #316]	; (8003190 <HAL_RCC_OscConfig+0x33c>)
 8003052:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003054:	430a      	orrs	r2, r1
 8003056:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003058:	f7ff f940 	bl	80022dc <HAL_GetTick>
 800305c:	0003      	movs	r3, r0
 800305e:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003060:	e008      	b.n	8003074 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003062:	f7ff f93b 	bl	80022dc <HAL_GetTick>
 8003066:	0002      	movs	r2, r0
 8003068:	697b      	ldr	r3, [r7, #20]
 800306a:	1ad3      	subs	r3, r2, r3
 800306c:	2b02      	cmp	r3, #2
 800306e:	d901      	bls.n	8003074 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 8003070:	2303      	movs	r3, #3
 8003072:	e2b8      	b.n	80035e6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003074:	4b46      	ldr	r3, [pc, #280]	; (8003190 <HAL_RCC_OscConfig+0x33c>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	2204      	movs	r2, #4
 800307a:	4013      	ands	r3, r2
 800307c:	d0f1      	beq.n	8003062 <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800307e:	4b44      	ldr	r3, [pc, #272]	; (8003190 <HAL_RCC_OscConfig+0x33c>)
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	4a46      	ldr	r2, [pc, #280]	; (800319c <HAL_RCC_OscConfig+0x348>)
 8003084:	4013      	ands	r3, r2
 8003086:	0019      	movs	r1, r3
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	691b      	ldr	r3, [r3, #16]
 800308c:	021a      	lsls	r2, r3, #8
 800308e:	4b40      	ldr	r3, [pc, #256]	; (8003190 <HAL_RCC_OscConfig+0x33c>)
 8003090:	430a      	orrs	r2, r1
 8003092:	605a      	str	r2, [r3, #4]
 8003094:	e018      	b.n	80030c8 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003096:	4b3e      	ldr	r3, [pc, #248]	; (8003190 <HAL_RCC_OscConfig+0x33c>)
 8003098:	681a      	ldr	r2, [r3, #0]
 800309a:	4b3d      	ldr	r3, [pc, #244]	; (8003190 <HAL_RCC_OscConfig+0x33c>)
 800309c:	2101      	movs	r1, #1
 800309e:	438a      	bics	r2, r1
 80030a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030a2:	f7ff f91b 	bl	80022dc <HAL_GetTick>
 80030a6:	0003      	movs	r3, r0
 80030a8:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80030aa:	e008      	b.n	80030be <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80030ac:	f7ff f916 	bl	80022dc <HAL_GetTick>
 80030b0:	0002      	movs	r2, r0
 80030b2:	697b      	ldr	r3, [r7, #20]
 80030b4:	1ad3      	subs	r3, r2, r3
 80030b6:	2b02      	cmp	r3, #2
 80030b8:	d901      	bls.n	80030be <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 80030ba:	2303      	movs	r3, #3
 80030bc:	e293      	b.n	80035e6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80030be:	4b34      	ldr	r3, [pc, #208]	; (8003190 <HAL_RCC_OscConfig+0x33c>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	2204      	movs	r2, #4
 80030c4:	4013      	ands	r3, r2
 80030c6:	d1f1      	bne.n	80030ac <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	2210      	movs	r2, #16
 80030ce:	4013      	ands	r3, r2
 80030d0:	d100      	bne.n	80030d4 <HAL_RCC_OscConfig+0x280>
 80030d2:	e0a2      	b.n	800321a <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80030d4:	69fb      	ldr	r3, [r7, #28]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d140      	bne.n	800315c <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80030da:	4b2d      	ldr	r3, [pc, #180]	; (8003190 <HAL_RCC_OscConfig+0x33c>)
 80030dc:	681a      	ldr	r2, [r3, #0]
 80030de:	2380      	movs	r3, #128	; 0x80
 80030e0:	009b      	lsls	r3, r3, #2
 80030e2:	4013      	ands	r3, r2
 80030e4:	d005      	beq.n	80030f2 <HAL_RCC_OscConfig+0x29e>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	69db      	ldr	r3, [r3, #28]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d101      	bne.n	80030f2 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 80030ee:	2301      	movs	r3, #1
 80030f0:	e279      	b.n	80035e6 <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80030f2:	4b27      	ldr	r3, [pc, #156]	; (8003190 <HAL_RCC_OscConfig+0x33c>)
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	4a2d      	ldr	r2, [pc, #180]	; (80031ac <HAL_RCC_OscConfig+0x358>)
 80030f8:	4013      	ands	r3, r2
 80030fa:	0019      	movs	r1, r3
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003100:	4b23      	ldr	r3, [pc, #140]	; (8003190 <HAL_RCC_OscConfig+0x33c>)
 8003102:	430a      	orrs	r2, r1
 8003104:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003106:	4b22      	ldr	r3, [pc, #136]	; (8003190 <HAL_RCC_OscConfig+0x33c>)
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	021b      	lsls	r3, r3, #8
 800310c:	0a19      	lsrs	r1, r3, #8
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6a1b      	ldr	r3, [r3, #32]
 8003112:	061a      	lsls	r2, r3, #24
 8003114:	4b1e      	ldr	r3, [pc, #120]	; (8003190 <HAL_RCC_OscConfig+0x33c>)
 8003116:	430a      	orrs	r2, r1
 8003118:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800311e:	0b5b      	lsrs	r3, r3, #13
 8003120:	3301      	adds	r3, #1
 8003122:	2280      	movs	r2, #128	; 0x80
 8003124:	0212      	lsls	r2, r2, #8
 8003126:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8003128:	4b19      	ldr	r3, [pc, #100]	; (8003190 <HAL_RCC_OscConfig+0x33c>)
 800312a:	68db      	ldr	r3, [r3, #12]
 800312c:	091b      	lsrs	r3, r3, #4
 800312e:	210f      	movs	r1, #15
 8003130:	400b      	ands	r3, r1
 8003132:	491b      	ldr	r1, [pc, #108]	; (80031a0 <HAL_RCC_OscConfig+0x34c>)
 8003134:	5ccb      	ldrb	r3, [r1, r3]
 8003136:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003138:	4b1a      	ldr	r3, [pc, #104]	; (80031a4 <HAL_RCC_OscConfig+0x350>)
 800313a:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 800313c:	4b1a      	ldr	r3, [pc, #104]	; (80031a8 <HAL_RCC_OscConfig+0x354>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	2513      	movs	r5, #19
 8003142:	197c      	adds	r4, r7, r5
 8003144:	0018      	movs	r0, r3
 8003146:	f7fe fe7d 	bl	8001e44 <HAL_InitTick>
 800314a:	0003      	movs	r3, r0
 800314c:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 800314e:	197b      	adds	r3, r7, r5
 8003150:	781b      	ldrb	r3, [r3, #0]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d061      	beq.n	800321a <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 8003156:	197b      	adds	r3, r7, r5
 8003158:	781b      	ldrb	r3, [r3, #0]
 800315a:	e244      	b.n	80035e6 <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	69db      	ldr	r3, [r3, #28]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d040      	beq.n	80031e6 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003164:	4b0a      	ldr	r3, [pc, #40]	; (8003190 <HAL_RCC_OscConfig+0x33c>)
 8003166:	681a      	ldr	r2, [r3, #0]
 8003168:	4b09      	ldr	r3, [pc, #36]	; (8003190 <HAL_RCC_OscConfig+0x33c>)
 800316a:	2180      	movs	r1, #128	; 0x80
 800316c:	0049      	lsls	r1, r1, #1
 800316e:	430a      	orrs	r2, r1
 8003170:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003172:	f7ff f8b3 	bl	80022dc <HAL_GetTick>
 8003176:	0003      	movs	r3, r0
 8003178:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800317a:	e019      	b.n	80031b0 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800317c:	f7ff f8ae 	bl	80022dc <HAL_GetTick>
 8003180:	0002      	movs	r2, r0
 8003182:	697b      	ldr	r3, [r7, #20]
 8003184:	1ad3      	subs	r3, r2, r3
 8003186:	2b02      	cmp	r3, #2
 8003188:	d912      	bls.n	80031b0 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 800318a:	2303      	movs	r3, #3
 800318c:	e22b      	b.n	80035e6 <HAL_RCC_OscConfig+0x792>
 800318e:	46c0      	nop			; (mov r8, r8)
 8003190:	40021000 	.word	0x40021000
 8003194:	fffeffff 	.word	0xfffeffff
 8003198:	fffbffff 	.word	0xfffbffff
 800319c:	ffffe0ff 	.word	0xffffe0ff
 80031a0:	0800714c 	.word	0x0800714c
 80031a4:	20000010 	.word	0x20000010
 80031a8:	20000014 	.word	0x20000014
 80031ac:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80031b0:	4bca      	ldr	r3, [pc, #808]	; (80034dc <HAL_RCC_OscConfig+0x688>)
 80031b2:	681a      	ldr	r2, [r3, #0]
 80031b4:	2380      	movs	r3, #128	; 0x80
 80031b6:	009b      	lsls	r3, r3, #2
 80031b8:	4013      	ands	r3, r2
 80031ba:	d0df      	beq.n	800317c <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80031bc:	4bc7      	ldr	r3, [pc, #796]	; (80034dc <HAL_RCC_OscConfig+0x688>)
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	4ac7      	ldr	r2, [pc, #796]	; (80034e0 <HAL_RCC_OscConfig+0x68c>)
 80031c2:	4013      	ands	r3, r2
 80031c4:	0019      	movs	r1, r3
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80031ca:	4bc4      	ldr	r3, [pc, #784]	; (80034dc <HAL_RCC_OscConfig+0x688>)
 80031cc:	430a      	orrs	r2, r1
 80031ce:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80031d0:	4bc2      	ldr	r3, [pc, #776]	; (80034dc <HAL_RCC_OscConfig+0x688>)
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	021b      	lsls	r3, r3, #8
 80031d6:	0a19      	lsrs	r1, r3, #8
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6a1b      	ldr	r3, [r3, #32]
 80031dc:	061a      	lsls	r2, r3, #24
 80031de:	4bbf      	ldr	r3, [pc, #764]	; (80034dc <HAL_RCC_OscConfig+0x688>)
 80031e0:	430a      	orrs	r2, r1
 80031e2:	605a      	str	r2, [r3, #4]
 80031e4:	e019      	b.n	800321a <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80031e6:	4bbd      	ldr	r3, [pc, #756]	; (80034dc <HAL_RCC_OscConfig+0x688>)
 80031e8:	681a      	ldr	r2, [r3, #0]
 80031ea:	4bbc      	ldr	r3, [pc, #752]	; (80034dc <HAL_RCC_OscConfig+0x688>)
 80031ec:	49bd      	ldr	r1, [pc, #756]	; (80034e4 <HAL_RCC_OscConfig+0x690>)
 80031ee:	400a      	ands	r2, r1
 80031f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031f2:	f7ff f873 	bl	80022dc <HAL_GetTick>
 80031f6:	0003      	movs	r3, r0
 80031f8:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80031fa:	e008      	b.n	800320e <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80031fc:	f7ff f86e 	bl	80022dc <HAL_GetTick>
 8003200:	0002      	movs	r2, r0
 8003202:	697b      	ldr	r3, [r7, #20]
 8003204:	1ad3      	subs	r3, r2, r3
 8003206:	2b02      	cmp	r3, #2
 8003208:	d901      	bls.n	800320e <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 800320a:	2303      	movs	r3, #3
 800320c:	e1eb      	b.n	80035e6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800320e:	4bb3      	ldr	r3, [pc, #716]	; (80034dc <HAL_RCC_OscConfig+0x688>)
 8003210:	681a      	ldr	r2, [r3, #0]
 8003212:	2380      	movs	r3, #128	; 0x80
 8003214:	009b      	lsls	r3, r3, #2
 8003216:	4013      	ands	r3, r2
 8003218:	d1f0      	bne.n	80031fc <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	2208      	movs	r2, #8
 8003220:	4013      	ands	r3, r2
 8003222:	d036      	beq.n	8003292 <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	695b      	ldr	r3, [r3, #20]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d019      	beq.n	8003260 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800322c:	4bab      	ldr	r3, [pc, #684]	; (80034dc <HAL_RCC_OscConfig+0x688>)
 800322e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003230:	4baa      	ldr	r3, [pc, #680]	; (80034dc <HAL_RCC_OscConfig+0x688>)
 8003232:	2101      	movs	r1, #1
 8003234:	430a      	orrs	r2, r1
 8003236:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003238:	f7ff f850 	bl	80022dc <HAL_GetTick>
 800323c:	0003      	movs	r3, r0
 800323e:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003240:	e008      	b.n	8003254 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003242:	f7ff f84b 	bl	80022dc <HAL_GetTick>
 8003246:	0002      	movs	r2, r0
 8003248:	697b      	ldr	r3, [r7, #20]
 800324a:	1ad3      	subs	r3, r2, r3
 800324c:	2b02      	cmp	r3, #2
 800324e:	d901      	bls.n	8003254 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 8003250:	2303      	movs	r3, #3
 8003252:	e1c8      	b.n	80035e6 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003254:	4ba1      	ldr	r3, [pc, #644]	; (80034dc <HAL_RCC_OscConfig+0x688>)
 8003256:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003258:	2202      	movs	r2, #2
 800325a:	4013      	ands	r3, r2
 800325c:	d0f1      	beq.n	8003242 <HAL_RCC_OscConfig+0x3ee>
 800325e:	e018      	b.n	8003292 <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003260:	4b9e      	ldr	r3, [pc, #632]	; (80034dc <HAL_RCC_OscConfig+0x688>)
 8003262:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003264:	4b9d      	ldr	r3, [pc, #628]	; (80034dc <HAL_RCC_OscConfig+0x688>)
 8003266:	2101      	movs	r1, #1
 8003268:	438a      	bics	r2, r1
 800326a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800326c:	f7ff f836 	bl	80022dc <HAL_GetTick>
 8003270:	0003      	movs	r3, r0
 8003272:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003274:	e008      	b.n	8003288 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003276:	f7ff f831 	bl	80022dc <HAL_GetTick>
 800327a:	0002      	movs	r2, r0
 800327c:	697b      	ldr	r3, [r7, #20]
 800327e:	1ad3      	subs	r3, r2, r3
 8003280:	2b02      	cmp	r3, #2
 8003282:	d901      	bls.n	8003288 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8003284:	2303      	movs	r3, #3
 8003286:	e1ae      	b.n	80035e6 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003288:	4b94      	ldr	r3, [pc, #592]	; (80034dc <HAL_RCC_OscConfig+0x688>)
 800328a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800328c:	2202      	movs	r2, #2
 800328e:	4013      	ands	r3, r2
 8003290:	d1f1      	bne.n	8003276 <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	2204      	movs	r2, #4
 8003298:	4013      	ands	r3, r2
 800329a:	d100      	bne.n	800329e <HAL_RCC_OscConfig+0x44a>
 800329c:	e0ae      	b.n	80033fc <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800329e:	2023      	movs	r0, #35	; 0x23
 80032a0:	183b      	adds	r3, r7, r0
 80032a2:	2200      	movs	r2, #0
 80032a4:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032a6:	4b8d      	ldr	r3, [pc, #564]	; (80034dc <HAL_RCC_OscConfig+0x688>)
 80032a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80032aa:	2380      	movs	r3, #128	; 0x80
 80032ac:	055b      	lsls	r3, r3, #21
 80032ae:	4013      	ands	r3, r2
 80032b0:	d109      	bne.n	80032c6 <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032b2:	4b8a      	ldr	r3, [pc, #552]	; (80034dc <HAL_RCC_OscConfig+0x688>)
 80032b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80032b6:	4b89      	ldr	r3, [pc, #548]	; (80034dc <HAL_RCC_OscConfig+0x688>)
 80032b8:	2180      	movs	r1, #128	; 0x80
 80032ba:	0549      	lsls	r1, r1, #21
 80032bc:	430a      	orrs	r2, r1
 80032be:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80032c0:	183b      	adds	r3, r7, r0
 80032c2:	2201      	movs	r2, #1
 80032c4:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032c6:	4b88      	ldr	r3, [pc, #544]	; (80034e8 <HAL_RCC_OscConfig+0x694>)
 80032c8:	681a      	ldr	r2, [r3, #0]
 80032ca:	2380      	movs	r3, #128	; 0x80
 80032cc:	005b      	lsls	r3, r3, #1
 80032ce:	4013      	ands	r3, r2
 80032d0:	d11a      	bne.n	8003308 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032d2:	4b85      	ldr	r3, [pc, #532]	; (80034e8 <HAL_RCC_OscConfig+0x694>)
 80032d4:	681a      	ldr	r2, [r3, #0]
 80032d6:	4b84      	ldr	r3, [pc, #528]	; (80034e8 <HAL_RCC_OscConfig+0x694>)
 80032d8:	2180      	movs	r1, #128	; 0x80
 80032da:	0049      	lsls	r1, r1, #1
 80032dc:	430a      	orrs	r2, r1
 80032de:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032e0:	f7fe fffc 	bl	80022dc <HAL_GetTick>
 80032e4:	0003      	movs	r3, r0
 80032e6:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032e8:	e008      	b.n	80032fc <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032ea:	f7fe fff7 	bl	80022dc <HAL_GetTick>
 80032ee:	0002      	movs	r2, r0
 80032f0:	697b      	ldr	r3, [r7, #20]
 80032f2:	1ad3      	subs	r3, r2, r3
 80032f4:	2b64      	cmp	r3, #100	; 0x64
 80032f6:	d901      	bls.n	80032fc <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 80032f8:	2303      	movs	r3, #3
 80032fa:	e174      	b.n	80035e6 <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032fc:	4b7a      	ldr	r3, [pc, #488]	; (80034e8 <HAL_RCC_OscConfig+0x694>)
 80032fe:	681a      	ldr	r2, [r3, #0]
 8003300:	2380      	movs	r3, #128	; 0x80
 8003302:	005b      	lsls	r3, r3, #1
 8003304:	4013      	ands	r3, r2
 8003306:	d0f0      	beq.n	80032ea <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	689a      	ldr	r2, [r3, #8]
 800330c:	2380      	movs	r3, #128	; 0x80
 800330e:	005b      	lsls	r3, r3, #1
 8003310:	429a      	cmp	r2, r3
 8003312:	d107      	bne.n	8003324 <HAL_RCC_OscConfig+0x4d0>
 8003314:	4b71      	ldr	r3, [pc, #452]	; (80034dc <HAL_RCC_OscConfig+0x688>)
 8003316:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003318:	4b70      	ldr	r3, [pc, #448]	; (80034dc <HAL_RCC_OscConfig+0x688>)
 800331a:	2180      	movs	r1, #128	; 0x80
 800331c:	0049      	lsls	r1, r1, #1
 800331e:	430a      	orrs	r2, r1
 8003320:	651a      	str	r2, [r3, #80]	; 0x50
 8003322:	e031      	b.n	8003388 <HAL_RCC_OscConfig+0x534>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	689b      	ldr	r3, [r3, #8]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d10c      	bne.n	8003346 <HAL_RCC_OscConfig+0x4f2>
 800332c:	4b6b      	ldr	r3, [pc, #428]	; (80034dc <HAL_RCC_OscConfig+0x688>)
 800332e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003330:	4b6a      	ldr	r3, [pc, #424]	; (80034dc <HAL_RCC_OscConfig+0x688>)
 8003332:	496c      	ldr	r1, [pc, #432]	; (80034e4 <HAL_RCC_OscConfig+0x690>)
 8003334:	400a      	ands	r2, r1
 8003336:	651a      	str	r2, [r3, #80]	; 0x50
 8003338:	4b68      	ldr	r3, [pc, #416]	; (80034dc <HAL_RCC_OscConfig+0x688>)
 800333a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800333c:	4b67      	ldr	r3, [pc, #412]	; (80034dc <HAL_RCC_OscConfig+0x688>)
 800333e:	496b      	ldr	r1, [pc, #428]	; (80034ec <HAL_RCC_OscConfig+0x698>)
 8003340:	400a      	ands	r2, r1
 8003342:	651a      	str	r2, [r3, #80]	; 0x50
 8003344:	e020      	b.n	8003388 <HAL_RCC_OscConfig+0x534>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	689a      	ldr	r2, [r3, #8]
 800334a:	23a0      	movs	r3, #160	; 0xa0
 800334c:	00db      	lsls	r3, r3, #3
 800334e:	429a      	cmp	r2, r3
 8003350:	d10e      	bne.n	8003370 <HAL_RCC_OscConfig+0x51c>
 8003352:	4b62      	ldr	r3, [pc, #392]	; (80034dc <HAL_RCC_OscConfig+0x688>)
 8003354:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003356:	4b61      	ldr	r3, [pc, #388]	; (80034dc <HAL_RCC_OscConfig+0x688>)
 8003358:	2180      	movs	r1, #128	; 0x80
 800335a:	00c9      	lsls	r1, r1, #3
 800335c:	430a      	orrs	r2, r1
 800335e:	651a      	str	r2, [r3, #80]	; 0x50
 8003360:	4b5e      	ldr	r3, [pc, #376]	; (80034dc <HAL_RCC_OscConfig+0x688>)
 8003362:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003364:	4b5d      	ldr	r3, [pc, #372]	; (80034dc <HAL_RCC_OscConfig+0x688>)
 8003366:	2180      	movs	r1, #128	; 0x80
 8003368:	0049      	lsls	r1, r1, #1
 800336a:	430a      	orrs	r2, r1
 800336c:	651a      	str	r2, [r3, #80]	; 0x50
 800336e:	e00b      	b.n	8003388 <HAL_RCC_OscConfig+0x534>
 8003370:	4b5a      	ldr	r3, [pc, #360]	; (80034dc <HAL_RCC_OscConfig+0x688>)
 8003372:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003374:	4b59      	ldr	r3, [pc, #356]	; (80034dc <HAL_RCC_OscConfig+0x688>)
 8003376:	495b      	ldr	r1, [pc, #364]	; (80034e4 <HAL_RCC_OscConfig+0x690>)
 8003378:	400a      	ands	r2, r1
 800337a:	651a      	str	r2, [r3, #80]	; 0x50
 800337c:	4b57      	ldr	r3, [pc, #348]	; (80034dc <HAL_RCC_OscConfig+0x688>)
 800337e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003380:	4b56      	ldr	r3, [pc, #344]	; (80034dc <HAL_RCC_OscConfig+0x688>)
 8003382:	495a      	ldr	r1, [pc, #360]	; (80034ec <HAL_RCC_OscConfig+0x698>)
 8003384:	400a      	ands	r2, r1
 8003386:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	689b      	ldr	r3, [r3, #8]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d015      	beq.n	80033bc <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003390:	f7fe ffa4 	bl	80022dc <HAL_GetTick>
 8003394:	0003      	movs	r3, r0
 8003396:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003398:	e009      	b.n	80033ae <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800339a:	f7fe ff9f 	bl	80022dc <HAL_GetTick>
 800339e:	0002      	movs	r2, r0
 80033a0:	697b      	ldr	r3, [r7, #20]
 80033a2:	1ad3      	subs	r3, r2, r3
 80033a4:	4a52      	ldr	r2, [pc, #328]	; (80034f0 <HAL_RCC_OscConfig+0x69c>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d901      	bls.n	80033ae <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 80033aa:	2303      	movs	r3, #3
 80033ac:	e11b      	b.n	80035e6 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80033ae:	4b4b      	ldr	r3, [pc, #300]	; (80034dc <HAL_RCC_OscConfig+0x688>)
 80033b0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80033b2:	2380      	movs	r3, #128	; 0x80
 80033b4:	009b      	lsls	r3, r3, #2
 80033b6:	4013      	ands	r3, r2
 80033b8:	d0ef      	beq.n	800339a <HAL_RCC_OscConfig+0x546>
 80033ba:	e014      	b.n	80033e6 <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033bc:	f7fe ff8e 	bl	80022dc <HAL_GetTick>
 80033c0:	0003      	movs	r3, r0
 80033c2:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80033c4:	e009      	b.n	80033da <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033c6:	f7fe ff89 	bl	80022dc <HAL_GetTick>
 80033ca:	0002      	movs	r2, r0
 80033cc:	697b      	ldr	r3, [r7, #20]
 80033ce:	1ad3      	subs	r3, r2, r3
 80033d0:	4a47      	ldr	r2, [pc, #284]	; (80034f0 <HAL_RCC_OscConfig+0x69c>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d901      	bls.n	80033da <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 80033d6:	2303      	movs	r3, #3
 80033d8:	e105      	b.n	80035e6 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80033da:	4b40      	ldr	r3, [pc, #256]	; (80034dc <HAL_RCC_OscConfig+0x688>)
 80033dc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80033de:	2380      	movs	r3, #128	; 0x80
 80033e0:	009b      	lsls	r3, r3, #2
 80033e2:	4013      	ands	r3, r2
 80033e4:	d1ef      	bne.n	80033c6 <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80033e6:	2323      	movs	r3, #35	; 0x23
 80033e8:	18fb      	adds	r3, r7, r3
 80033ea:	781b      	ldrb	r3, [r3, #0]
 80033ec:	2b01      	cmp	r3, #1
 80033ee:	d105      	bne.n	80033fc <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033f0:	4b3a      	ldr	r3, [pc, #232]	; (80034dc <HAL_RCC_OscConfig+0x688>)
 80033f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80033f4:	4b39      	ldr	r3, [pc, #228]	; (80034dc <HAL_RCC_OscConfig+0x688>)
 80033f6:	493f      	ldr	r1, [pc, #252]	; (80034f4 <HAL_RCC_OscConfig+0x6a0>)
 80033f8:	400a      	ands	r2, r1
 80033fa:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	2220      	movs	r2, #32
 8003402:	4013      	ands	r3, r2
 8003404:	d049      	beq.n	800349a <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	699b      	ldr	r3, [r3, #24]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d026      	beq.n	800345c <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800340e:	4b33      	ldr	r3, [pc, #204]	; (80034dc <HAL_RCC_OscConfig+0x688>)
 8003410:	689a      	ldr	r2, [r3, #8]
 8003412:	4b32      	ldr	r3, [pc, #200]	; (80034dc <HAL_RCC_OscConfig+0x688>)
 8003414:	2101      	movs	r1, #1
 8003416:	430a      	orrs	r2, r1
 8003418:	609a      	str	r2, [r3, #8]
 800341a:	4b30      	ldr	r3, [pc, #192]	; (80034dc <HAL_RCC_OscConfig+0x688>)
 800341c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800341e:	4b2f      	ldr	r3, [pc, #188]	; (80034dc <HAL_RCC_OscConfig+0x688>)
 8003420:	2101      	movs	r1, #1
 8003422:	430a      	orrs	r2, r1
 8003424:	635a      	str	r2, [r3, #52]	; 0x34
 8003426:	4b34      	ldr	r3, [pc, #208]	; (80034f8 <HAL_RCC_OscConfig+0x6a4>)
 8003428:	6a1a      	ldr	r2, [r3, #32]
 800342a:	4b33      	ldr	r3, [pc, #204]	; (80034f8 <HAL_RCC_OscConfig+0x6a4>)
 800342c:	2180      	movs	r1, #128	; 0x80
 800342e:	0189      	lsls	r1, r1, #6
 8003430:	430a      	orrs	r2, r1
 8003432:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003434:	f7fe ff52 	bl	80022dc <HAL_GetTick>
 8003438:	0003      	movs	r3, r0
 800343a:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800343c:	e008      	b.n	8003450 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800343e:	f7fe ff4d 	bl	80022dc <HAL_GetTick>
 8003442:	0002      	movs	r2, r0
 8003444:	697b      	ldr	r3, [r7, #20]
 8003446:	1ad3      	subs	r3, r2, r3
 8003448:	2b02      	cmp	r3, #2
 800344a:	d901      	bls.n	8003450 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 800344c:	2303      	movs	r3, #3
 800344e:	e0ca      	b.n	80035e6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003450:	4b22      	ldr	r3, [pc, #136]	; (80034dc <HAL_RCC_OscConfig+0x688>)
 8003452:	689b      	ldr	r3, [r3, #8]
 8003454:	2202      	movs	r2, #2
 8003456:	4013      	ands	r3, r2
 8003458:	d0f1      	beq.n	800343e <HAL_RCC_OscConfig+0x5ea>
 800345a:	e01e      	b.n	800349a <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800345c:	4b1f      	ldr	r3, [pc, #124]	; (80034dc <HAL_RCC_OscConfig+0x688>)
 800345e:	689a      	ldr	r2, [r3, #8]
 8003460:	4b1e      	ldr	r3, [pc, #120]	; (80034dc <HAL_RCC_OscConfig+0x688>)
 8003462:	2101      	movs	r1, #1
 8003464:	438a      	bics	r2, r1
 8003466:	609a      	str	r2, [r3, #8]
 8003468:	4b23      	ldr	r3, [pc, #140]	; (80034f8 <HAL_RCC_OscConfig+0x6a4>)
 800346a:	6a1a      	ldr	r2, [r3, #32]
 800346c:	4b22      	ldr	r3, [pc, #136]	; (80034f8 <HAL_RCC_OscConfig+0x6a4>)
 800346e:	4923      	ldr	r1, [pc, #140]	; (80034fc <HAL_RCC_OscConfig+0x6a8>)
 8003470:	400a      	ands	r2, r1
 8003472:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003474:	f7fe ff32 	bl	80022dc <HAL_GetTick>
 8003478:	0003      	movs	r3, r0
 800347a:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800347c:	e008      	b.n	8003490 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800347e:	f7fe ff2d 	bl	80022dc <HAL_GetTick>
 8003482:	0002      	movs	r2, r0
 8003484:	697b      	ldr	r3, [r7, #20]
 8003486:	1ad3      	subs	r3, r2, r3
 8003488:	2b02      	cmp	r3, #2
 800348a:	d901      	bls.n	8003490 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 800348c:	2303      	movs	r3, #3
 800348e:	e0aa      	b.n	80035e6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003490:	4b12      	ldr	r3, [pc, #72]	; (80034dc <HAL_RCC_OscConfig+0x688>)
 8003492:	689b      	ldr	r3, [r3, #8]
 8003494:	2202      	movs	r2, #2
 8003496:	4013      	ands	r3, r2
 8003498:	d1f1      	bne.n	800347e <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d100      	bne.n	80034a4 <HAL_RCC_OscConfig+0x650>
 80034a2:	e09f      	b.n	80035e4 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80034a4:	69fb      	ldr	r3, [r7, #28]
 80034a6:	2b0c      	cmp	r3, #12
 80034a8:	d100      	bne.n	80034ac <HAL_RCC_OscConfig+0x658>
 80034aa:	e078      	b.n	800359e <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034b0:	2b02      	cmp	r3, #2
 80034b2:	d159      	bne.n	8003568 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034b4:	4b09      	ldr	r3, [pc, #36]	; (80034dc <HAL_RCC_OscConfig+0x688>)
 80034b6:	681a      	ldr	r2, [r3, #0]
 80034b8:	4b08      	ldr	r3, [pc, #32]	; (80034dc <HAL_RCC_OscConfig+0x688>)
 80034ba:	4911      	ldr	r1, [pc, #68]	; (8003500 <HAL_RCC_OscConfig+0x6ac>)
 80034bc:	400a      	ands	r2, r1
 80034be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034c0:	f7fe ff0c 	bl	80022dc <HAL_GetTick>
 80034c4:	0003      	movs	r3, r0
 80034c6:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80034c8:	e01c      	b.n	8003504 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034ca:	f7fe ff07 	bl	80022dc <HAL_GetTick>
 80034ce:	0002      	movs	r2, r0
 80034d0:	697b      	ldr	r3, [r7, #20]
 80034d2:	1ad3      	subs	r3, r2, r3
 80034d4:	2b02      	cmp	r3, #2
 80034d6:	d915      	bls.n	8003504 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 80034d8:	2303      	movs	r3, #3
 80034da:	e084      	b.n	80035e6 <HAL_RCC_OscConfig+0x792>
 80034dc:	40021000 	.word	0x40021000
 80034e0:	ffff1fff 	.word	0xffff1fff
 80034e4:	fffffeff 	.word	0xfffffeff
 80034e8:	40007000 	.word	0x40007000
 80034ec:	fffffbff 	.word	0xfffffbff
 80034f0:	00001388 	.word	0x00001388
 80034f4:	efffffff 	.word	0xefffffff
 80034f8:	40010000 	.word	0x40010000
 80034fc:	ffffdfff 	.word	0xffffdfff
 8003500:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003504:	4b3a      	ldr	r3, [pc, #232]	; (80035f0 <HAL_RCC_OscConfig+0x79c>)
 8003506:	681a      	ldr	r2, [r3, #0]
 8003508:	2380      	movs	r3, #128	; 0x80
 800350a:	049b      	lsls	r3, r3, #18
 800350c:	4013      	ands	r3, r2
 800350e:	d1dc      	bne.n	80034ca <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003510:	4b37      	ldr	r3, [pc, #220]	; (80035f0 <HAL_RCC_OscConfig+0x79c>)
 8003512:	68db      	ldr	r3, [r3, #12]
 8003514:	4a37      	ldr	r2, [pc, #220]	; (80035f4 <HAL_RCC_OscConfig+0x7a0>)
 8003516:	4013      	ands	r3, r2
 8003518:	0019      	movs	r1, r3
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003522:	431a      	orrs	r2, r3
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003528:	431a      	orrs	r2, r3
 800352a:	4b31      	ldr	r3, [pc, #196]	; (80035f0 <HAL_RCC_OscConfig+0x79c>)
 800352c:	430a      	orrs	r2, r1
 800352e:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003530:	4b2f      	ldr	r3, [pc, #188]	; (80035f0 <HAL_RCC_OscConfig+0x79c>)
 8003532:	681a      	ldr	r2, [r3, #0]
 8003534:	4b2e      	ldr	r3, [pc, #184]	; (80035f0 <HAL_RCC_OscConfig+0x79c>)
 8003536:	2180      	movs	r1, #128	; 0x80
 8003538:	0449      	lsls	r1, r1, #17
 800353a:	430a      	orrs	r2, r1
 800353c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800353e:	f7fe fecd 	bl	80022dc <HAL_GetTick>
 8003542:	0003      	movs	r3, r0
 8003544:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8003546:	e008      	b.n	800355a <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003548:	f7fe fec8 	bl	80022dc <HAL_GetTick>
 800354c:	0002      	movs	r2, r0
 800354e:	697b      	ldr	r3, [r7, #20]
 8003550:	1ad3      	subs	r3, r2, r3
 8003552:	2b02      	cmp	r3, #2
 8003554:	d901      	bls.n	800355a <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 8003556:	2303      	movs	r3, #3
 8003558:	e045      	b.n	80035e6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800355a:	4b25      	ldr	r3, [pc, #148]	; (80035f0 <HAL_RCC_OscConfig+0x79c>)
 800355c:	681a      	ldr	r2, [r3, #0]
 800355e:	2380      	movs	r3, #128	; 0x80
 8003560:	049b      	lsls	r3, r3, #18
 8003562:	4013      	ands	r3, r2
 8003564:	d0f0      	beq.n	8003548 <HAL_RCC_OscConfig+0x6f4>
 8003566:	e03d      	b.n	80035e4 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003568:	4b21      	ldr	r3, [pc, #132]	; (80035f0 <HAL_RCC_OscConfig+0x79c>)
 800356a:	681a      	ldr	r2, [r3, #0]
 800356c:	4b20      	ldr	r3, [pc, #128]	; (80035f0 <HAL_RCC_OscConfig+0x79c>)
 800356e:	4922      	ldr	r1, [pc, #136]	; (80035f8 <HAL_RCC_OscConfig+0x7a4>)
 8003570:	400a      	ands	r2, r1
 8003572:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003574:	f7fe feb2 	bl	80022dc <HAL_GetTick>
 8003578:	0003      	movs	r3, r0
 800357a:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800357c:	e008      	b.n	8003590 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800357e:	f7fe fead 	bl	80022dc <HAL_GetTick>
 8003582:	0002      	movs	r2, r0
 8003584:	697b      	ldr	r3, [r7, #20]
 8003586:	1ad3      	subs	r3, r2, r3
 8003588:	2b02      	cmp	r3, #2
 800358a:	d901      	bls.n	8003590 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 800358c:	2303      	movs	r3, #3
 800358e:	e02a      	b.n	80035e6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003590:	4b17      	ldr	r3, [pc, #92]	; (80035f0 <HAL_RCC_OscConfig+0x79c>)
 8003592:	681a      	ldr	r2, [r3, #0]
 8003594:	2380      	movs	r3, #128	; 0x80
 8003596:	049b      	lsls	r3, r3, #18
 8003598:	4013      	ands	r3, r2
 800359a:	d1f0      	bne.n	800357e <HAL_RCC_OscConfig+0x72a>
 800359c:	e022      	b.n	80035e4 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035a2:	2b01      	cmp	r3, #1
 80035a4:	d101      	bne.n	80035aa <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 80035a6:	2301      	movs	r3, #1
 80035a8:	e01d      	b.n	80035e6 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80035aa:	4b11      	ldr	r3, [pc, #68]	; (80035f0 <HAL_RCC_OscConfig+0x79c>)
 80035ac:	68db      	ldr	r3, [r3, #12]
 80035ae:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035b0:	69ba      	ldr	r2, [r7, #24]
 80035b2:	2380      	movs	r3, #128	; 0x80
 80035b4:	025b      	lsls	r3, r3, #9
 80035b6:	401a      	ands	r2, r3
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035bc:	429a      	cmp	r2, r3
 80035be:	d10f      	bne.n	80035e0 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80035c0:	69ba      	ldr	r2, [r7, #24]
 80035c2:	23f0      	movs	r3, #240	; 0xf0
 80035c4:	039b      	lsls	r3, r3, #14
 80035c6:	401a      	ands	r2, r3
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035cc:	429a      	cmp	r2, r3
 80035ce:	d107      	bne.n	80035e0 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80035d0:	69ba      	ldr	r2, [r7, #24]
 80035d2:	23c0      	movs	r3, #192	; 0xc0
 80035d4:	041b      	lsls	r3, r3, #16
 80035d6:	401a      	ands	r2, r3
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80035dc:	429a      	cmp	r2, r3
 80035de:	d001      	beq.n	80035e4 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 80035e0:	2301      	movs	r3, #1
 80035e2:	e000      	b.n	80035e6 <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 80035e4:	2300      	movs	r3, #0
}
 80035e6:	0018      	movs	r0, r3
 80035e8:	46bd      	mov	sp, r7
 80035ea:	b00a      	add	sp, #40	; 0x28
 80035ec:	bdb0      	pop	{r4, r5, r7, pc}
 80035ee:	46c0      	nop			; (mov r8, r8)
 80035f0:	40021000 	.word	0x40021000
 80035f4:	ff02ffff 	.word	0xff02ffff
 80035f8:	feffffff 	.word	0xfeffffff

080035fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035fc:	b5b0      	push	{r4, r5, r7, lr}
 80035fe:	b084      	sub	sp, #16
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
 8003604:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d101      	bne.n	8003610 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800360c:	2301      	movs	r3, #1
 800360e:	e128      	b.n	8003862 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003610:	4b96      	ldr	r3, [pc, #600]	; (800386c <HAL_RCC_ClockConfig+0x270>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	2201      	movs	r2, #1
 8003616:	4013      	ands	r3, r2
 8003618:	683a      	ldr	r2, [r7, #0]
 800361a:	429a      	cmp	r2, r3
 800361c:	d91e      	bls.n	800365c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800361e:	4b93      	ldr	r3, [pc, #588]	; (800386c <HAL_RCC_ClockConfig+0x270>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	2201      	movs	r2, #1
 8003624:	4393      	bics	r3, r2
 8003626:	0019      	movs	r1, r3
 8003628:	4b90      	ldr	r3, [pc, #576]	; (800386c <HAL_RCC_ClockConfig+0x270>)
 800362a:	683a      	ldr	r2, [r7, #0]
 800362c:	430a      	orrs	r2, r1
 800362e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003630:	f7fe fe54 	bl	80022dc <HAL_GetTick>
 8003634:	0003      	movs	r3, r0
 8003636:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003638:	e009      	b.n	800364e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800363a:	f7fe fe4f 	bl	80022dc <HAL_GetTick>
 800363e:	0002      	movs	r2, r0
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	1ad3      	subs	r3, r2, r3
 8003644:	4a8a      	ldr	r2, [pc, #552]	; (8003870 <HAL_RCC_ClockConfig+0x274>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d901      	bls.n	800364e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800364a:	2303      	movs	r3, #3
 800364c:	e109      	b.n	8003862 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800364e:	4b87      	ldr	r3, [pc, #540]	; (800386c <HAL_RCC_ClockConfig+0x270>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	2201      	movs	r2, #1
 8003654:	4013      	ands	r3, r2
 8003656:	683a      	ldr	r2, [r7, #0]
 8003658:	429a      	cmp	r2, r3
 800365a:	d1ee      	bne.n	800363a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	2202      	movs	r2, #2
 8003662:	4013      	ands	r3, r2
 8003664:	d009      	beq.n	800367a <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003666:	4b83      	ldr	r3, [pc, #524]	; (8003874 <HAL_RCC_ClockConfig+0x278>)
 8003668:	68db      	ldr	r3, [r3, #12]
 800366a:	22f0      	movs	r2, #240	; 0xf0
 800366c:	4393      	bics	r3, r2
 800366e:	0019      	movs	r1, r3
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	689a      	ldr	r2, [r3, #8]
 8003674:	4b7f      	ldr	r3, [pc, #508]	; (8003874 <HAL_RCC_ClockConfig+0x278>)
 8003676:	430a      	orrs	r2, r1
 8003678:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	2201      	movs	r2, #1
 8003680:	4013      	ands	r3, r2
 8003682:	d100      	bne.n	8003686 <HAL_RCC_ClockConfig+0x8a>
 8003684:	e089      	b.n	800379a <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	2b02      	cmp	r3, #2
 800368c:	d107      	bne.n	800369e <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800368e:	4b79      	ldr	r3, [pc, #484]	; (8003874 <HAL_RCC_ClockConfig+0x278>)
 8003690:	681a      	ldr	r2, [r3, #0]
 8003692:	2380      	movs	r3, #128	; 0x80
 8003694:	029b      	lsls	r3, r3, #10
 8003696:	4013      	ands	r3, r2
 8003698:	d120      	bne.n	80036dc <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800369a:	2301      	movs	r3, #1
 800369c:	e0e1      	b.n	8003862 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	2b03      	cmp	r3, #3
 80036a4:	d107      	bne.n	80036b6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80036a6:	4b73      	ldr	r3, [pc, #460]	; (8003874 <HAL_RCC_ClockConfig+0x278>)
 80036a8:	681a      	ldr	r2, [r3, #0]
 80036aa:	2380      	movs	r3, #128	; 0x80
 80036ac:	049b      	lsls	r3, r3, #18
 80036ae:	4013      	ands	r3, r2
 80036b0:	d114      	bne.n	80036dc <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80036b2:	2301      	movs	r3, #1
 80036b4:	e0d5      	b.n	8003862 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	2b01      	cmp	r3, #1
 80036bc:	d106      	bne.n	80036cc <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80036be:	4b6d      	ldr	r3, [pc, #436]	; (8003874 <HAL_RCC_ClockConfig+0x278>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	2204      	movs	r2, #4
 80036c4:	4013      	ands	r3, r2
 80036c6:	d109      	bne.n	80036dc <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80036c8:	2301      	movs	r3, #1
 80036ca:	e0ca      	b.n	8003862 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80036cc:	4b69      	ldr	r3, [pc, #420]	; (8003874 <HAL_RCC_ClockConfig+0x278>)
 80036ce:	681a      	ldr	r2, [r3, #0]
 80036d0:	2380      	movs	r3, #128	; 0x80
 80036d2:	009b      	lsls	r3, r3, #2
 80036d4:	4013      	ands	r3, r2
 80036d6:	d101      	bne.n	80036dc <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80036d8:	2301      	movs	r3, #1
 80036da:	e0c2      	b.n	8003862 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80036dc:	4b65      	ldr	r3, [pc, #404]	; (8003874 <HAL_RCC_ClockConfig+0x278>)
 80036de:	68db      	ldr	r3, [r3, #12]
 80036e0:	2203      	movs	r2, #3
 80036e2:	4393      	bics	r3, r2
 80036e4:	0019      	movs	r1, r3
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	685a      	ldr	r2, [r3, #4]
 80036ea:	4b62      	ldr	r3, [pc, #392]	; (8003874 <HAL_RCC_ClockConfig+0x278>)
 80036ec:	430a      	orrs	r2, r1
 80036ee:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80036f0:	f7fe fdf4 	bl	80022dc <HAL_GetTick>
 80036f4:	0003      	movs	r3, r0
 80036f6:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	2b02      	cmp	r3, #2
 80036fe:	d111      	bne.n	8003724 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003700:	e009      	b.n	8003716 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003702:	f7fe fdeb 	bl	80022dc <HAL_GetTick>
 8003706:	0002      	movs	r2, r0
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	1ad3      	subs	r3, r2, r3
 800370c:	4a58      	ldr	r2, [pc, #352]	; (8003870 <HAL_RCC_ClockConfig+0x274>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d901      	bls.n	8003716 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8003712:	2303      	movs	r3, #3
 8003714:	e0a5      	b.n	8003862 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003716:	4b57      	ldr	r3, [pc, #348]	; (8003874 <HAL_RCC_ClockConfig+0x278>)
 8003718:	68db      	ldr	r3, [r3, #12]
 800371a:	220c      	movs	r2, #12
 800371c:	4013      	ands	r3, r2
 800371e:	2b08      	cmp	r3, #8
 8003720:	d1ef      	bne.n	8003702 <HAL_RCC_ClockConfig+0x106>
 8003722:	e03a      	b.n	800379a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	2b03      	cmp	r3, #3
 800372a:	d111      	bne.n	8003750 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800372c:	e009      	b.n	8003742 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800372e:	f7fe fdd5 	bl	80022dc <HAL_GetTick>
 8003732:	0002      	movs	r2, r0
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	1ad3      	subs	r3, r2, r3
 8003738:	4a4d      	ldr	r2, [pc, #308]	; (8003870 <HAL_RCC_ClockConfig+0x274>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d901      	bls.n	8003742 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 800373e:	2303      	movs	r3, #3
 8003740:	e08f      	b.n	8003862 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003742:	4b4c      	ldr	r3, [pc, #304]	; (8003874 <HAL_RCC_ClockConfig+0x278>)
 8003744:	68db      	ldr	r3, [r3, #12]
 8003746:	220c      	movs	r2, #12
 8003748:	4013      	ands	r3, r2
 800374a:	2b0c      	cmp	r3, #12
 800374c:	d1ef      	bne.n	800372e <HAL_RCC_ClockConfig+0x132>
 800374e:	e024      	b.n	800379a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	2b01      	cmp	r3, #1
 8003756:	d11b      	bne.n	8003790 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003758:	e009      	b.n	800376e <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800375a:	f7fe fdbf 	bl	80022dc <HAL_GetTick>
 800375e:	0002      	movs	r2, r0
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	1ad3      	subs	r3, r2, r3
 8003764:	4a42      	ldr	r2, [pc, #264]	; (8003870 <HAL_RCC_ClockConfig+0x274>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d901      	bls.n	800376e <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 800376a:	2303      	movs	r3, #3
 800376c:	e079      	b.n	8003862 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800376e:	4b41      	ldr	r3, [pc, #260]	; (8003874 <HAL_RCC_ClockConfig+0x278>)
 8003770:	68db      	ldr	r3, [r3, #12]
 8003772:	220c      	movs	r2, #12
 8003774:	4013      	ands	r3, r2
 8003776:	2b04      	cmp	r3, #4
 8003778:	d1ef      	bne.n	800375a <HAL_RCC_ClockConfig+0x15e>
 800377a:	e00e      	b.n	800379a <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800377c:	f7fe fdae 	bl	80022dc <HAL_GetTick>
 8003780:	0002      	movs	r2, r0
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	1ad3      	subs	r3, r2, r3
 8003786:	4a3a      	ldr	r2, [pc, #232]	; (8003870 <HAL_RCC_ClockConfig+0x274>)
 8003788:	4293      	cmp	r3, r2
 800378a:	d901      	bls.n	8003790 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 800378c:	2303      	movs	r3, #3
 800378e:	e068      	b.n	8003862 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8003790:	4b38      	ldr	r3, [pc, #224]	; (8003874 <HAL_RCC_ClockConfig+0x278>)
 8003792:	68db      	ldr	r3, [r3, #12]
 8003794:	220c      	movs	r2, #12
 8003796:	4013      	ands	r3, r2
 8003798:	d1f0      	bne.n	800377c <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800379a:	4b34      	ldr	r3, [pc, #208]	; (800386c <HAL_RCC_ClockConfig+0x270>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	2201      	movs	r2, #1
 80037a0:	4013      	ands	r3, r2
 80037a2:	683a      	ldr	r2, [r7, #0]
 80037a4:	429a      	cmp	r2, r3
 80037a6:	d21e      	bcs.n	80037e6 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037a8:	4b30      	ldr	r3, [pc, #192]	; (800386c <HAL_RCC_ClockConfig+0x270>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	2201      	movs	r2, #1
 80037ae:	4393      	bics	r3, r2
 80037b0:	0019      	movs	r1, r3
 80037b2:	4b2e      	ldr	r3, [pc, #184]	; (800386c <HAL_RCC_ClockConfig+0x270>)
 80037b4:	683a      	ldr	r2, [r7, #0]
 80037b6:	430a      	orrs	r2, r1
 80037b8:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80037ba:	f7fe fd8f 	bl	80022dc <HAL_GetTick>
 80037be:	0003      	movs	r3, r0
 80037c0:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037c2:	e009      	b.n	80037d8 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037c4:	f7fe fd8a 	bl	80022dc <HAL_GetTick>
 80037c8:	0002      	movs	r2, r0
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	1ad3      	subs	r3, r2, r3
 80037ce:	4a28      	ldr	r2, [pc, #160]	; (8003870 <HAL_RCC_ClockConfig+0x274>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d901      	bls.n	80037d8 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 80037d4:	2303      	movs	r3, #3
 80037d6:	e044      	b.n	8003862 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037d8:	4b24      	ldr	r3, [pc, #144]	; (800386c <HAL_RCC_ClockConfig+0x270>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	2201      	movs	r2, #1
 80037de:	4013      	ands	r3, r2
 80037e0:	683a      	ldr	r2, [r7, #0]
 80037e2:	429a      	cmp	r2, r3
 80037e4:	d1ee      	bne.n	80037c4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	2204      	movs	r2, #4
 80037ec:	4013      	ands	r3, r2
 80037ee:	d009      	beq.n	8003804 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80037f0:	4b20      	ldr	r3, [pc, #128]	; (8003874 <HAL_RCC_ClockConfig+0x278>)
 80037f2:	68db      	ldr	r3, [r3, #12]
 80037f4:	4a20      	ldr	r2, [pc, #128]	; (8003878 <HAL_RCC_ClockConfig+0x27c>)
 80037f6:	4013      	ands	r3, r2
 80037f8:	0019      	movs	r1, r3
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	68da      	ldr	r2, [r3, #12]
 80037fe:	4b1d      	ldr	r3, [pc, #116]	; (8003874 <HAL_RCC_ClockConfig+0x278>)
 8003800:	430a      	orrs	r2, r1
 8003802:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	2208      	movs	r2, #8
 800380a:	4013      	ands	r3, r2
 800380c:	d00a      	beq.n	8003824 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800380e:	4b19      	ldr	r3, [pc, #100]	; (8003874 <HAL_RCC_ClockConfig+0x278>)
 8003810:	68db      	ldr	r3, [r3, #12]
 8003812:	4a1a      	ldr	r2, [pc, #104]	; (800387c <HAL_RCC_ClockConfig+0x280>)
 8003814:	4013      	ands	r3, r2
 8003816:	0019      	movs	r1, r3
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	691b      	ldr	r3, [r3, #16]
 800381c:	00da      	lsls	r2, r3, #3
 800381e:	4b15      	ldr	r3, [pc, #84]	; (8003874 <HAL_RCC_ClockConfig+0x278>)
 8003820:	430a      	orrs	r2, r1
 8003822:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003824:	f000 f832 	bl	800388c <HAL_RCC_GetSysClockFreq>
 8003828:	0001      	movs	r1, r0
 800382a:	4b12      	ldr	r3, [pc, #72]	; (8003874 <HAL_RCC_ClockConfig+0x278>)
 800382c:	68db      	ldr	r3, [r3, #12]
 800382e:	091b      	lsrs	r3, r3, #4
 8003830:	220f      	movs	r2, #15
 8003832:	4013      	ands	r3, r2
 8003834:	4a12      	ldr	r2, [pc, #72]	; (8003880 <HAL_RCC_ClockConfig+0x284>)
 8003836:	5cd3      	ldrb	r3, [r2, r3]
 8003838:	000a      	movs	r2, r1
 800383a:	40da      	lsrs	r2, r3
 800383c:	4b11      	ldr	r3, [pc, #68]	; (8003884 <HAL_RCC_ClockConfig+0x288>)
 800383e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003840:	4b11      	ldr	r3, [pc, #68]	; (8003888 <HAL_RCC_ClockConfig+0x28c>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	250b      	movs	r5, #11
 8003846:	197c      	adds	r4, r7, r5
 8003848:	0018      	movs	r0, r3
 800384a:	f7fe fafb 	bl	8001e44 <HAL_InitTick>
 800384e:	0003      	movs	r3, r0
 8003850:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8003852:	197b      	adds	r3, r7, r5
 8003854:	781b      	ldrb	r3, [r3, #0]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d002      	beq.n	8003860 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 800385a:	197b      	adds	r3, r7, r5
 800385c:	781b      	ldrb	r3, [r3, #0]
 800385e:	e000      	b.n	8003862 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8003860:	2300      	movs	r3, #0
}
 8003862:	0018      	movs	r0, r3
 8003864:	46bd      	mov	sp, r7
 8003866:	b004      	add	sp, #16
 8003868:	bdb0      	pop	{r4, r5, r7, pc}
 800386a:	46c0      	nop			; (mov r8, r8)
 800386c:	40022000 	.word	0x40022000
 8003870:	00001388 	.word	0x00001388
 8003874:	40021000 	.word	0x40021000
 8003878:	fffff8ff 	.word	0xfffff8ff
 800387c:	ffffc7ff 	.word	0xffffc7ff
 8003880:	0800714c 	.word	0x0800714c
 8003884:	20000010 	.word	0x20000010
 8003888:	20000014 	.word	0x20000014

0800388c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800388c:	b5b0      	push	{r4, r5, r7, lr}
 800388e:	b08e      	sub	sp, #56	; 0x38
 8003890:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8003892:	4b4c      	ldr	r3, [pc, #304]	; (80039c4 <HAL_RCC_GetSysClockFreq+0x138>)
 8003894:	68db      	ldr	r3, [r3, #12]
 8003896:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003898:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800389a:	230c      	movs	r3, #12
 800389c:	4013      	ands	r3, r2
 800389e:	2b0c      	cmp	r3, #12
 80038a0:	d014      	beq.n	80038cc <HAL_RCC_GetSysClockFreq+0x40>
 80038a2:	d900      	bls.n	80038a6 <HAL_RCC_GetSysClockFreq+0x1a>
 80038a4:	e07b      	b.n	800399e <HAL_RCC_GetSysClockFreq+0x112>
 80038a6:	2b04      	cmp	r3, #4
 80038a8:	d002      	beq.n	80038b0 <HAL_RCC_GetSysClockFreq+0x24>
 80038aa:	2b08      	cmp	r3, #8
 80038ac:	d00b      	beq.n	80038c6 <HAL_RCC_GetSysClockFreq+0x3a>
 80038ae:	e076      	b.n	800399e <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80038b0:	4b44      	ldr	r3, [pc, #272]	; (80039c4 <HAL_RCC_GetSysClockFreq+0x138>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	2210      	movs	r2, #16
 80038b6:	4013      	ands	r3, r2
 80038b8:	d002      	beq.n	80038c0 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80038ba:	4b43      	ldr	r3, [pc, #268]	; (80039c8 <HAL_RCC_GetSysClockFreq+0x13c>)
 80038bc:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 80038be:	e07c      	b.n	80039ba <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 80038c0:	4b42      	ldr	r3, [pc, #264]	; (80039cc <HAL_RCC_GetSysClockFreq+0x140>)
 80038c2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80038c4:	e079      	b.n	80039ba <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80038c6:	4b42      	ldr	r3, [pc, #264]	; (80039d0 <HAL_RCC_GetSysClockFreq+0x144>)
 80038c8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80038ca:	e076      	b.n	80039ba <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80038cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038ce:	0c9a      	lsrs	r2, r3, #18
 80038d0:	230f      	movs	r3, #15
 80038d2:	401a      	ands	r2, r3
 80038d4:	4b3f      	ldr	r3, [pc, #252]	; (80039d4 <HAL_RCC_GetSysClockFreq+0x148>)
 80038d6:	5c9b      	ldrb	r3, [r3, r2]
 80038d8:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80038da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038dc:	0d9a      	lsrs	r2, r3, #22
 80038de:	2303      	movs	r3, #3
 80038e0:	4013      	ands	r3, r2
 80038e2:	3301      	adds	r3, #1
 80038e4:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80038e6:	4b37      	ldr	r3, [pc, #220]	; (80039c4 <HAL_RCC_GetSysClockFreq+0x138>)
 80038e8:	68da      	ldr	r2, [r3, #12]
 80038ea:	2380      	movs	r3, #128	; 0x80
 80038ec:	025b      	lsls	r3, r3, #9
 80038ee:	4013      	ands	r3, r2
 80038f0:	d01a      	beq.n	8003928 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80038f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038f4:	61bb      	str	r3, [r7, #24]
 80038f6:	2300      	movs	r3, #0
 80038f8:	61fb      	str	r3, [r7, #28]
 80038fa:	4a35      	ldr	r2, [pc, #212]	; (80039d0 <HAL_RCC_GetSysClockFreq+0x144>)
 80038fc:	2300      	movs	r3, #0
 80038fe:	69b8      	ldr	r0, [r7, #24]
 8003900:	69f9      	ldr	r1, [r7, #28]
 8003902:	f7fc fcc9 	bl	8000298 <__aeabi_lmul>
 8003906:	0002      	movs	r2, r0
 8003908:	000b      	movs	r3, r1
 800390a:	0010      	movs	r0, r2
 800390c:	0019      	movs	r1, r3
 800390e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003910:	613b      	str	r3, [r7, #16]
 8003912:	2300      	movs	r3, #0
 8003914:	617b      	str	r3, [r7, #20]
 8003916:	693a      	ldr	r2, [r7, #16]
 8003918:	697b      	ldr	r3, [r7, #20]
 800391a:	f7fc fc9d 	bl	8000258 <__aeabi_uldivmod>
 800391e:	0002      	movs	r2, r0
 8003920:	000b      	movs	r3, r1
 8003922:	0013      	movs	r3, r2
 8003924:	637b      	str	r3, [r7, #52]	; 0x34
 8003926:	e037      	b.n	8003998 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003928:	4b26      	ldr	r3, [pc, #152]	; (80039c4 <HAL_RCC_GetSysClockFreq+0x138>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	2210      	movs	r2, #16
 800392e:	4013      	ands	r3, r2
 8003930:	d01a      	beq.n	8003968 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8003932:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003934:	60bb      	str	r3, [r7, #8]
 8003936:	2300      	movs	r3, #0
 8003938:	60fb      	str	r3, [r7, #12]
 800393a:	4a23      	ldr	r2, [pc, #140]	; (80039c8 <HAL_RCC_GetSysClockFreq+0x13c>)
 800393c:	2300      	movs	r3, #0
 800393e:	68b8      	ldr	r0, [r7, #8]
 8003940:	68f9      	ldr	r1, [r7, #12]
 8003942:	f7fc fca9 	bl	8000298 <__aeabi_lmul>
 8003946:	0002      	movs	r2, r0
 8003948:	000b      	movs	r3, r1
 800394a:	0010      	movs	r0, r2
 800394c:	0019      	movs	r1, r3
 800394e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003950:	603b      	str	r3, [r7, #0]
 8003952:	2300      	movs	r3, #0
 8003954:	607b      	str	r3, [r7, #4]
 8003956:	683a      	ldr	r2, [r7, #0]
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	f7fc fc7d 	bl	8000258 <__aeabi_uldivmod>
 800395e:	0002      	movs	r2, r0
 8003960:	000b      	movs	r3, r1
 8003962:	0013      	movs	r3, r2
 8003964:	637b      	str	r3, [r7, #52]	; 0x34
 8003966:	e017      	b.n	8003998 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003968:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800396a:	0018      	movs	r0, r3
 800396c:	2300      	movs	r3, #0
 800396e:	0019      	movs	r1, r3
 8003970:	4a16      	ldr	r2, [pc, #88]	; (80039cc <HAL_RCC_GetSysClockFreq+0x140>)
 8003972:	2300      	movs	r3, #0
 8003974:	f7fc fc90 	bl	8000298 <__aeabi_lmul>
 8003978:	0002      	movs	r2, r0
 800397a:	000b      	movs	r3, r1
 800397c:	0010      	movs	r0, r2
 800397e:	0019      	movs	r1, r3
 8003980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003982:	001c      	movs	r4, r3
 8003984:	2300      	movs	r3, #0
 8003986:	001d      	movs	r5, r3
 8003988:	0022      	movs	r2, r4
 800398a:	002b      	movs	r3, r5
 800398c:	f7fc fc64 	bl	8000258 <__aeabi_uldivmod>
 8003990:	0002      	movs	r2, r0
 8003992:	000b      	movs	r3, r1
 8003994:	0013      	movs	r3, r2
 8003996:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8003998:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800399a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800399c:	e00d      	b.n	80039ba <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800399e:	4b09      	ldr	r3, [pc, #36]	; (80039c4 <HAL_RCC_GetSysClockFreq+0x138>)
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	0b5b      	lsrs	r3, r3, #13
 80039a4:	2207      	movs	r2, #7
 80039a6:	4013      	ands	r3, r2
 80039a8:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80039aa:	6a3b      	ldr	r3, [r7, #32]
 80039ac:	3301      	adds	r3, #1
 80039ae:	2280      	movs	r2, #128	; 0x80
 80039b0:	0212      	lsls	r2, r2, #8
 80039b2:	409a      	lsls	r2, r3
 80039b4:	0013      	movs	r3, r2
 80039b6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80039b8:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80039ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80039bc:	0018      	movs	r0, r3
 80039be:	46bd      	mov	sp, r7
 80039c0:	b00e      	add	sp, #56	; 0x38
 80039c2:	bdb0      	pop	{r4, r5, r7, pc}
 80039c4:	40021000 	.word	0x40021000
 80039c8:	003d0900 	.word	0x003d0900
 80039cc:	00f42400 	.word	0x00f42400
 80039d0:	007a1200 	.word	0x007a1200
 80039d4:	08007164 	.word	0x08007164

080039d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80039dc:	4b02      	ldr	r3, [pc, #8]	; (80039e8 <HAL_RCC_GetHCLKFreq+0x10>)
 80039de:	681b      	ldr	r3, [r3, #0]
}
 80039e0:	0018      	movs	r0, r3
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bd80      	pop	{r7, pc}
 80039e6:	46c0      	nop			; (mov r8, r8)
 80039e8:	20000010 	.word	0x20000010

080039ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80039f0:	f7ff fff2 	bl	80039d8 <HAL_RCC_GetHCLKFreq>
 80039f4:	0001      	movs	r1, r0
 80039f6:	4b06      	ldr	r3, [pc, #24]	; (8003a10 <HAL_RCC_GetPCLK1Freq+0x24>)
 80039f8:	68db      	ldr	r3, [r3, #12]
 80039fa:	0a1b      	lsrs	r3, r3, #8
 80039fc:	2207      	movs	r2, #7
 80039fe:	4013      	ands	r3, r2
 8003a00:	4a04      	ldr	r2, [pc, #16]	; (8003a14 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003a02:	5cd3      	ldrb	r3, [r2, r3]
 8003a04:	40d9      	lsrs	r1, r3
 8003a06:	000b      	movs	r3, r1
}
 8003a08:	0018      	movs	r0, r3
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	bd80      	pop	{r7, pc}
 8003a0e:	46c0      	nop			; (mov r8, r8)
 8003a10:	40021000 	.word	0x40021000
 8003a14:	0800715c 	.word	0x0800715c

08003a18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003a1c:	f7ff ffdc 	bl	80039d8 <HAL_RCC_GetHCLKFreq>
 8003a20:	0001      	movs	r1, r0
 8003a22:	4b06      	ldr	r3, [pc, #24]	; (8003a3c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a24:	68db      	ldr	r3, [r3, #12]
 8003a26:	0adb      	lsrs	r3, r3, #11
 8003a28:	2207      	movs	r2, #7
 8003a2a:	4013      	ands	r3, r2
 8003a2c:	4a04      	ldr	r2, [pc, #16]	; (8003a40 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003a2e:	5cd3      	ldrb	r3, [r2, r3]
 8003a30:	40d9      	lsrs	r1, r3
 8003a32:	000b      	movs	r3, r1
}
 8003a34:	0018      	movs	r0, r3
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bd80      	pop	{r7, pc}
 8003a3a:	46c0      	nop			; (mov r8, r8)
 8003a3c:	40021000 	.word	0x40021000
 8003a40:	0800715c 	.word	0x0800715c

08003a44 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b082      	sub	sp, #8
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
 8003a4c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	220f      	movs	r2, #15
 8003a52:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003a54:	4b12      	ldr	r3, [pc, #72]	; (8003aa0 <HAL_RCC_GetClockConfig+0x5c>)
 8003a56:	68db      	ldr	r3, [r3, #12]
 8003a58:	2203      	movs	r2, #3
 8003a5a:	401a      	ands	r2, r3
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003a60:	4b0f      	ldr	r3, [pc, #60]	; (8003aa0 <HAL_RCC_GetClockConfig+0x5c>)
 8003a62:	68db      	ldr	r3, [r3, #12]
 8003a64:	22f0      	movs	r2, #240	; 0xf0
 8003a66:	401a      	ands	r2, r3
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003a6c:	4b0c      	ldr	r3, [pc, #48]	; (8003aa0 <HAL_RCC_GetClockConfig+0x5c>)
 8003a6e:	68da      	ldr	r2, [r3, #12]
 8003a70:	23e0      	movs	r3, #224	; 0xe0
 8003a72:	00db      	lsls	r3, r3, #3
 8003a74:	401a      	ands	r2, r3
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003a7a:	4b09      	ldr	r3, [pc, #36]	; (8003aa0 <HAL_RCC_GetClockConfig+0x5c>)
 8003a7c:	68db      	ldr	r3, [r3, #12]
 8003a7e:	08da      	lsrs	r2, r3, #3
 8003a80:	23e0      	movs	r3, #224	; 0xe0
 8003a82:	00db      	lsls	r3, r3, #3
 8003a84:	401a      	ands	r2, r3
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8003a8a:	4b06      	ldr	r3, [pc, #24]	; (8003aa4 <HAL_RCC_GetClockConfig+0x60>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	2201      	movs	r2, #1
 8003a90:	401a      	ands	r2, r3
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	601a      	str	r2, [r3, #0]
}
 8003a96:	46c0      	nop			; (mov r8, r8)
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	b002      	add	sp, #8
 8003a9c:	bd80      	pop	{r7, pc}
 8003a9e:	46c0      	nop			; (mov r8, r8)
 8003aa0:	40021000 	.word	0x40021000
 8003aa4:	40022000 	.word	0x40022000

08003aa8 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b086      	sub	sp, #24
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8003ab0:	2317      	movs	r3, #23
 8003ab2:	18fb      	adds	r3, r7, r3
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	2220      	movs	r2, #32
 8003abe:	4013      	ands	r3, r2
 8003ac0:	d106      	bne.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681a      	ldr	r2, [r3, #0]
 8003ac6:	2380      	movs	r3, #128	; 0x80
 8003ac8:	011b      	lsls	r3, r3, #4
 8003aca:	4013      	ands	r3, r2
 8003acc:	d100      	bne.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x28>
 8003ace:	e104      	b.n	8003cda <HAL_RCCEx_PeriphCLKConfig+0x232>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ad0:	4bb9      	ldr	r3, [pc, #740]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003ad2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ad4:	2380      	movs	r3, #128	; 0x80
 8003ad6:	055b      	lsls	r3, r3, #21
 8003ad8:	4013      	ands	r3, r2
 8003ada:	d10a      	bne.n	8003af2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003adc:	4bb6      	ldr	r3, [pc, #728]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003ade:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ae0:	4bb5      	ldr	r3, [pc, #724]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003ae2:	2180      	movs	r1, #128	; 0x80
 8003ae4:	0549      	lsls	r1, r1, #21
 8003ae6:	430a      	orrs	r2, r1
 8003ae8:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8003aea:	2317      	movs	r3, #23
 8003aec:	18fb      	adds	r3, r7, r3
 8003aee:	2201      	movs	r2, #1
 8003af0:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003af2:	4bb2      	ldr	r3, [pc, #712]	; (8003dbc <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8003af4:	681a      	ldr	r2, [r3, #0]
 8003af6:	2380      	movs	r3, #128	; 0x80
 8003af8:	005b      	lsls	r3, r3, #1
 8003afa:	4013      	ands	r3, r2
 8003afc:	d11a      	bne.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003afe:	4baf      	ldr	r3, [pc, #700]	; (8003dbc <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8003b00:	681a      	ldr	r2, [r3, #0]
 8003b02:	4bae      	ldr	r3, [pc, #696]	; (8003dbc <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8003b04:	2180      	movs	r1, #128	; 0x80
 8003b06:	0049      	lsls	r1, r1, #1
 8003b08:	430a      	orrs	r2, r1
 8003b0a:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b0c:	f7fe fbe6 	bl	80022dc <HAL_GetTick>
 8003b10:	0003      	movs	r3, r0
 8003b12:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b14:	e008      	b.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b16:	f7fe fbe1 	bl	80022dc <HAL_GetTick>
 8003b1a:	0002      	movs	r2, r0
 8003b1c:	693b      	ldr	r3, [r7, #16]
 8003b1e:	1ad3      	subs	r3, r2, r3
 8003b20:	2b64      	cmp	r3, #100	; 0x64
 8003b22:	d901      	bls.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003b24:	2303      	movs	r3, #3
 8003b26:	e143      	b.n	8003db0 <HAL_RCCEx_PeriphCLKConfig+0x308>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b28:	4ba4      	ldr	r3, [pc, #656]	; (8003dbc <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8003b2a:	681a      	ldr	r2, [r3, #0]
 8003b2c:	2380      	movs	r3, #128	; 0x80
 8003b2e:	005b      	lsls	r3, r3, #1
 8003b30:	4013      	ands	r3, r2
 8003b32:	d0f0      	beq.n	8003b16 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8003b34:	4ba0      	ldr	r3, [pc, #640]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003b36:	681a      	ldr	r2, [r3, #0]
 8003b38:	23c0      	movs	r3, #192	; 0xc0
 8003b3a:	039b      	lsls	r3, r3, #14
 8003b3c:	4013      	ands	r3, r2
 8003b3e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	685a      	ldr	r2, [r3, #4]
 8003b44:	23c0      	movs	r3, #192	; 0xc0
 8003b46:	039b      	lsls	r3, r3, #14
 8003b48:	4013      	ands	r3, r2
 8003b4a:	68fa      	ldr	r2, [r7, #12]
 8003b4c:	429a      	cmp	r2, r3
 8003b4e:	d107      	bne.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	689a      	ldr	r2, [r3, #8]
 8003b54:	23c0      	movs	r3, #192	; 0xc0
 8003b56:	039b      	lsls	r3, r3, #14
 8003b58:	4013      	ands	r3, r2
 8003b5a:	68fa      	ldr	r2, [r7, #12]
 8003b5c:	429a      	cmp	r2, r3
 8003b5e:	d013      	beq.n	8003b88 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	685a      	ldr	r2, [r3, #4]
 8003b64:	23c0      	movs	r3, #192	; 0xc0
 8003b66:	029b      	lsls	r3, r3, #10
 8003b68:	401a      	ands	r2, r3
 8003b6a:	23c0      	movs	r3, #192	; 0xc0
 8003b6c:	029b      	lsls	r3, r3, #10
 8003b6e:	429a      	cmp	r2, r3
 8003b70:	d10a      	bne.n	8003b88 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8003b72:	4b91      	ldr	r3, [pc, #580]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003b74:	681a      	ldr	r2, [r3, #0]
 8003b76:	2380      	movs	r3, #128	; 0x80
 8003b78:	029b      	lsls	r3, r3, #10
 8003b7a:	401a      	ands	r2, r3
 8003b7c:	2380      	movs	r3, #128	; 0x80
 8003b7e:	029b      	lsls	r3, r3, #10
 8003b80:	429a      	cmp	r2, r3
 8003b82:	d101      	bne.n	8003b88 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8003b84:	2301      	movs	r3, #1
 8003b86:	e113      	b.n	8003db0 <HAL_RCCEx_PeriphCLKConfig+0x308>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8003b88:	4b8b      	ldr	r3, [pc, #556]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003b8a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003b8c:	23c0      	movs	r3, #192	; 0xc0
 8003b8e:	029b      	lsls	r3, r3, #10
 8003b90:	4013      	ands	r3, r2
 8003b92:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d049      	beq.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0x186>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	685a      	ldr	r2, [r3, #4]
 8003b9e:	23c0      	movs	r3, #192	; 0xc0
 8003ba0:	029b      	lsls	r3, r3, #10
 8003ba2:	4013      	ands	r3, r2
 8003ba4:	68fa      	ldr	r2, [r7, #12]
 8003ba6:	429a      	cmp	r2, r3
 8003ba8:	d004      	beq.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	2220      	movs	r2, #32
 8003bb0:	4013      	ands	r3, r2
 8003bb2:	d10d      	bne.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	689a      	ldr	r2, [r3, #8]
 8003bb8:	23c0      	movs	r3, #192	; 0xc0
 8003bba:	029b      	lsls	r3, r3, #10
 8003bbc:	4013      	ands	r3, r2
 8003bbe:	68fa      	ldr	r2, [r7, #12]
 8003bc0:	429a      	cmp	r2, r3
 8003bc2:	d034      	beq.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681a      	ldr	r2, [r3, #0]
 8003bc8:	2380      	movs	r3, #128	; 0x80
 8003bca:	011b      	lsls	r3, r3, #4
 8003bcc:	4013      	ands	r3, r2
 8003bce:	d02e      	beq.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8003bd0:	4b79      	ldr	r3, [pc, #484]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003bd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bd4:	4a7a      	ldr	r2, [pc, #488]	; (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8003bd6:	4013      	ands	r3, r2
 8003bd8:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003bda:	4b77      	ldr	r3, [pc, #476]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003bdc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003bde:	4b76      	ldr	r3, [pc, #472]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003be0:	2180      	movs	r1, #128	; 0x80
 8003be2:	0309      	lsls	r1, r1, #12
 8003be4:	430a      	orrs	r2, r1
 8003be6:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003be8:	4b73      	ldr	r3, [pc, #460]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003bea:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003bec:	4b72      	ldr	r3, [pc, #456]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003bee:	4975      	ldr	r1, [pc, #468]	; (8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8003bf0:	400a      	ands	r2, r1
 8003bf2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8003bf4:	4b70      	ldr	r3, [pc, #448]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003bf6:	68fa      	ldr	r2, [r7, #12]
 8003bf8:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8003bfa:	68fa      	ldr	r2, [r7, #12]
 8003bfc:	2380      	movs	r3, #128	; 0x80
 8003bfe:	005b      	lsls	r3, r3, #1
 8003c00:	4013      	ands	r3, r2
 8003c02:	d014      	beq.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c04:	f7fe fb6a 	bl	80022dc <HAL_GetTick>
 8003c08:	0003      	movs	r3, r0
 8003c0a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003c0c:	e009      	b.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c0e:	f7fe fb65 	bl	80022dc <HAL_GetTick>
 8003c12:	0002      	movs	r2, r0
 8003c14:	693b      	ldr	r3, [r7, #16]
 8003c16:	1ad3      	subs	r3, r2, r3
 8003c18:	4a6b      	ldr	r2, [pc, #428]	; (8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d901      	bls.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8003c1e:	2303      	movs	r3, #3
 8003c20:	e0c6      	b.n	8003db0 <HAL_RCCEx_PeriphCLKConfig+0x308>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003c22:	4b65      	ldr	r3, [pc, #404]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003c24:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003c26:	2380      	movs	r3, #128	; 0x80
 8003c28:	009b      	lsls	r3, r3, #2
 8003c2a:	4013      	ands	r3, r2
 8003c2c:	d0ef      	beq.n	8003c0e <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681a      	ldr	r2, [r3, #0]
 8003c32:	2380      	movs	r3, #128	; 0x80
 8003c34:	011b      	lsls	r3, r3, #4
 8003c36:	4013      	ands	r3, r2
 8003c38:	d01f      	beq.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	689a      	ldr	r2, [r3, #8]
 8003c3e:	23c0      	movs	r3, #192	; 0xc0
 8003c40:	029b      	lsls	r3, r3, #10
 8003c42:	401a      	ands	r2, r3
 8003c44:	23c0      	movs	r3, #192	; 0xc0
 8003c46:	029b      	lsls	r3, r3, #10
 8003c48:	429a      	cmp	r2, r3
 8003c4a:	d10c      	bne.n	8003c66 <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8003c4c:	4b5a      	ldr	r3, [pc, #360]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4a5e      	ldr	r2, [pc, #376]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8003c52:	4013      	ands	r3, r2
 8003c54:	0019      	movs	r1, r3
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	689a      	ldr	r2, [r3, #8]
 8003c5a:	23c0      	movs	r3, #192	; 0xc0
 8003c5c:	039b      	lsls	r3, r3, #14
 8003c5e:	401a      	ands	r2, r3
 8003c60:	4b55      	ldr	r3, [pc, #340]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003c62:	430a      	orrs	r2, r1
 8003c64:	601a      	str	r2, [r3, #0]
 8003c66:	4b54      	ldr	r3, [pc, #336]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003c68:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	689a      	ldr	r2, [r3, #8]
 8003c6e:	23c0      	movs	r3, #192	; 0xc0
 8003c70:	029b      	lsls	r3, r3, #10
 8003c72:	401a      	ands	r2, r3
 8003c74:	4b50      	ldr	r3, [pc, #320]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003c76:	430a      	orrs	r2, r1
 8003c78:	651a      	str	r2, [r3, #80]	; 0x50
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	2220      	movs	r2, #32
 8003c80:	4013      	ands	r3, r2
 8003c82:	d01f      	beq.n	8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	685a      	ldr	r2, [r3, #4]
 8003c88:	23c0      	movs	r3, #192	; 0xc0
 8003c8a:	029b      	lsls	r3, r3, #10
 8003c8c:	401a      	ands	r2, r3
 8003c8e:	23c0      	movs	r3, #192	; 0xc0
 8003c90:	029b      	lsls	r3, r3, #10
 8003c92:	429a      	cmp	r2, r3
 8003c94:	d10c      	bne.n	8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x208>
 8003c96:	4b48      	ldr	r3, [pc, #288]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4a4c      	ldr	r2, [pc, #304]	; (8003dcc <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8003c9c:	4013      	ands	r3, r2
 8003c9e:	0019      	movs	r1, r3
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	685a      	ldr	r2, [r3, #4]
 8003ca4:	23c0      	movs	r3, #192	; 0xc0
 8003ca6:	039b      	lsls	r3, r3, #14
 8003ca8:	401a      	ands	r2, r3
 8003caa:	4b43      	ldr	r3, [pc, #268]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003cac:	430a      	orrs	r2, r1
 8003cae:	601a      	str	r2, [r3, #0]
 8003cb0:	4b41      	ldr	r3, [pc, #260]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003cb2:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	685a      	ldr	r2, [r3, #4]
 8003cb8:	23c0      	movs	r3, #192	; 0xc0
 8003cba:	029b      	lsls	r3, r3, #10
 8003cbc:	401a      	ands	r2, r3
 8003cbe:	4b3e      	ldr	r3, [pc, #248]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003cc0:	430a      	orrs	r2, r1
 8003cc2:	651a      	str	r2, [r3, #80]	; 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003cc4:	2317      	movs	r3, #23
 8003cc6:	18fb      	adds	r3, r7, r3
 8003cc8:	781b      	ldrb	r3, [r3, #0]
 8003cca:	2b01      	cmp	r3, #1
 8003ccc:	d105      	bne.n	8003cda <HAL_RCCEx_PeriphCLKConfig+0x232>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003cce:	4b3a      	ldr	r3, [pc, #232]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003cd0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003cd2:	4b39      	ldr	r3, [pc, #228]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003cd4:	493e      	ldr	r1, [pc, #248]	; (8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8003cd6:	400a      	ands	r2, r1
 8003cd8:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	2201      	movs	r2, #1
 8003ce0:	4013      	ands	r3, r2
 8003ce2:	d009      	beq.n	8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003ce4:	4b34      	ldr	r3, [pc, #208]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003ce6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ce8:	2203      	movs	r2, #3
 8003cea:	4393      	bics	r3, r2
 8003cec:	0019      	movs	r1, r3
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	68da      	ldr	r2, [r3, #12]
 8003cf2:	4b31      	ldr	r3, [pc, #196]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003cf4:	430a      	orrs	r2, r1
 8003cf6:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	2202      	movs	r2, #2
 8003cfe:	4013      	ands	r3, r2
 8003d00:	d009      	beq.n	8003d16 <HAL_RCCEx_PeriphCLKConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003d02:	4b2d      	ldr	r3, [pc, #180]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003d04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d06:	220c      	movs	r2, #12
 8003d08:	4393      	bics	r3, r2
 8003d0a:	0019      	movs	r1, r3
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	691a      	ldr	r2, [r3, #16]
 8003d10:	4b29      	ldr	r3, [pc, #164]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003d12:	430a      	orrs	r2, r1
 8003d14:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	2204      	movs	r2, #4
 8003d1c:	4013      	ands	r3, r2
 8003d1e:	d009      	beq.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003d20:	4b25      	ldr	r3, [pc, #148]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003d22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d24:	4a2b      	ldr	r2, [pc, #172]	; (8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 8003d26:	4013      	ands	r3, r2
 8003d28:	0019      	movs	r1, r3
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	695a      	ldr	r2, [r3, #20]
 8003d2e:	4b22      	ldr	r3, [pc, #136]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003d30:	430a      	orrs	r2, r1
 8003d32:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	2208      	movs	r2, #8
 8003d3a:	4013      	ands	r3, r2
 8003d3c:	d009      	beq.n	8003d52 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003d3e:	4b1e      	ldr	r3, [pc, #120]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003d40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d42:	4a25      	ldr	r2, [pc, #148]	; (8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003d44:	4013      	ands	r3, r2
 8003d46:	0019      	movs	r1, r3
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	699a      	ldr	r2, [r3, #24]
 8003d4c:	4b1a      	ldr	r3, [pc, #104]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003d4e:	430a      	orrs	r2, r1
 8003d50:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681a      	ldr	r2, [r3, #0]
 8003d56:	2380      	movs	r3, #128	; 0x80
 8003d58:	005b      	lsls	r3, r3, #1
 8003d5a:	4013      	ands	r3, r2
 8003d5c:	d009      	beq.n	8003d72 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003d5e:	4b16      	ldr	r3, [pc, #88]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003d60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d62:	4a17      	ldr	r2, [pc, #92]	; (8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8003d64:	4013      	ands	r3, r2
 8003d66:	0019      	movs	r1, r3
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	69da      	ldr	r2, [r3, #28]
 8003d6c:	4b12      	ldr	r3, [pc, #72]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003d6e:	430a      	orrs	r2, r1
 8003d70:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	2240      	movs	r2, #64	; 0x40
 8003d78:	4013      	ands	r3, r2
 8003d7a:	d009      	beq.n	8003d90 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003d7c:	4b0e      	ldr	r3, [pc, #56]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003d7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d80:	4a16      	ldr	r2, [pc, #88]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8003d82:	4013      	ands	r3, r2
 8003d84:	0019      	movs	r1, r3
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003d8a:	4b0b      	ldr	r3, [pc, #44]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003d8c:	430a      	orrs	r2, r1
 8003d8e:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	2280      	movs	r2, #128	; 0x80
 8003d96:	4013      	ands	r3, r2
 8003d98:	d009      	beq.n	8003dae <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8003d9a:	4b07      	ldr	r3, [pc, #28]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003d9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d9e:	4a10      	ldr	r2, [pc, #64]	; (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003da0:	4013      	ands	r3, r2
 8003da2:	0019      	movs	r1, r3
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6a1a      	ldr	r2, [r3, #32]
 8003da8:	4b03      	ldr	r3, [pc, #12]	; (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003daa:	430a      	orrs	r2, r1
 8003dac:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8003dae:	2300      	movs	r3, #0
}
 8003db0:	0018      	movs	r0, r3
 8003db2:	46bd      	mov	sp, r7
 8003db4:	b006      	add	sp, #24
 8003db6:	bd80      	pop	{r7, pc}
 8003db8:	40021000 	.word	0x40021000
 8003dbc:	40007000 	.word	0x40007000
 8003dc0:	fffcffff 	.word	0xfffcffff
 8003dc4:	fff7ffff 	.word	0xfff7ffff
 8003dc8:	00001388 	.word	0x00001388
 8003dcc:	ffcfffff 	.word	0xffcfffff
 8003dd0:	efffffff 	.word	0xefffffff
 8003dd4:	fffff3ff 	.word	0xfffff3ff
 8003dd8:	ffffcfff 	.word	0xffffcfff
 8003ddc:	fbffffff 	.word	0xfbffffff
 8003de0:	fff3ffff 	.word	0xfff3ffff

08003de4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b082      	sub	sp, #8
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d101      	bne.n	8003df6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003df2:	2301      	movs	r3, #1
 8003df4:	e032      	b.n	8003e5c <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2239      	movs	r2, #57	; 0x39
 8003dfa:	5c9b      	ldrb	r3, [r3, r2]
 8003dfc:	b2db      	uxtb	r3, r3
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d107      	bne.n	8003e12 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2238      	movs	r2, #56	; 0x38
 8003e06:	2100      	movs	r1, #0
 8003e08:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	0018      	movs	r0, r3
 8003e0e:	f000 f829 	bl	8003e64 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2239      	movs	r2, #57	; 0x39
 8003e16:	2102      	movs	r1, #2
 8003e18:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681a      	ldr	r2, [r3, #0]
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	3304      	adds	r3, #4
 8003e22:	0019      	movs	r1, r3
 8003e24:	0010      	movs	r0, r2
 8003e26:	f000 f97f 	bl	8004128 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	223e      	movs	r2, #62	; 0x3e
 8003e2e:	2101      	movs	r1, #1
 8003e30:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	223a      	movs	r2, #58	; 0x3a
 8003e36:	2101      	movs	r1, #1
 8003e38:	5499      	strb	r1, [r3, r2]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	223b      	movs	r2, #59	; 0x3b
 8003e3e:	2101      	movs	r1, #1
 8003e40:	5499      	strb	r1, [r3, r2]
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	223c      	movs	r2, #60	; 0x3c
 8003e46:	2101      	movs	r1, #1
 8003e48:	5499      	strb	r1, [r3, r2]
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	223d      	movs	r2, #61	; 0x3d
 8003e4e:	2101      	movs	r1, #1
 8003e50:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2239      	movs	r2, #57	; 0x39
 8003e56:	2101      	movs	r1, #1
 8003e58:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003e5a:	2300      	movs	r3, #0
}
 8003e5c:	0018      	movs	r0, r3
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	b002      	add	sp, #8
 8003e62:	bd80      	pop	{r7, pc}

08003e64 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b082      	sub	sp, #8
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003e6c:	46c0      	nop			; (mov r8, r8)
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	b002      	add	sp, #8
 8003e72:	bd80      	pop	{r7, pc}

08003e74 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b084      	sub	sp, #16
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2239      	movs	r2, #57	; 0x39
 8003e80:	5c9b      	ldrb	r3, [r3, r2]
 8003e82:	b2db      	uxtb	r3, r3
 8003e84:	2b01      	cmp	r3, #1
 8003e86:	d001      	beq.n	8003e8c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003e88:	2301      	movs	r3, #1
 8003e8a:	e03b      	b.n	8003f04 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2239      	movs	r2, #57	; 0x39
 8003e90:	2102      	movs	r1, #2
 8003e92:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	68da      	ldr	r2, [r3, #12]
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	2101      	movs	r1, #1
 8003ea0:	430a      	orrs	r2, r1
 8003ea2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681a      	ldr	r2, [r3, #0]
 8003ea8:	2380      	movs	r3, #128	; 0x80
 8003eaa:	05db      	lsls	r3, r3, #23
 8003eac:	429a      	cmp	r2, r3
 8003eae:	d00e      	beq.n	8003ece <HAL_TIM_Base_Start_IT+0x5a>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4a15      	ldr	r2, [pc, #84]	; (8003f0c <HAL_TIM_Base_Start_IT+0x98>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d009      	beq.n	8003ece <HAL_TIM_Base_Start_IT+0x5a>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4a14      	ldr	r2, [pc, #80]	; (8003f10 <HAL_TIM_Base_Start_IT+0x9c>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d004      	beq.n	8003ece <HAL_TIM_Base_Start_IT+0x5a>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4a12      	ldr	r2, [pc, #72]	; (8003f14 <HAL_TIM_Base_Start_IT+0xa0>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d111      	bne.n	8003ef2 <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	689b      	ldr	r3, [r3, #8]
 8003ed4:	2207      	movs	r2, #7
 8003ed6:	4013      	ands	r3, r2
 8003ed8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	2b06      	cmp	r3, #6
 8003ede:	d010      	beq.n	8003f02 <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	681a      	ldr	r2, [r3, #0]
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	2101      	movs	r1, #1
 8003eec:	430a      	orrs	r2, r1
 8003eee:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ef0:	e007      	b.n	8003f02 <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	681a      	ldr	r2, [r3, #0]
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	2101      	movs	r1, #1
 8003efe:	430a      	orrs	r2, r1
 8003f00:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003f02:	2300      	movs	r3, #0
}
 8003f04:	0018      	movs	r0, r3
 8003f06:	46bd      	mov	sp, r7
 8003f08:	b004      	add	sp, #16
 8003f0a:	bd80      	pop	{r7, pc}
 8003f0c:	40000400 	.word	0x40000400
 8003f10:	40010800 	.word	0x40010800
 8003f14:	40011400 	.word	0x40011400

08003f18 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b082      	sub	sp, #8
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	691b      	ldr	r3, [r3, #16]
 8003f26:	2202      	movs	r2, #2
 8003f28:	4013      	ands	r3, r2
 8003f2a:	2b02      	cmp	r3, #2
 8003f2c:	d124      	bne.n	8003f78 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	68db      	ldr	r3, [r3, #12]
 8003f34:	2202      	movs	r2, #2
 8003f36:	4013      	ands	r3, r2
 8003f38:	2b02      	cmp	r3, #2
 8003f3a:	d11d      	bne.n	8003f78 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	2203      	movs	r2, #3
 8003f42:	4252      	negs	r2, r2
 8003f44:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2201      	movs	r2, #1
 8003f4a:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	699b      	ldr	r3, [r3, #24]
 8003f52:	2203      	movs	r2, #3
 8003f54:	4013      	ands	r3, r2
 8003f56:	d004      	beq.n	8003f62 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	0018      	movs	r0, r3
 8003f5c:	f000 f8cc 	bl	80040f8 <HAL_TIM_IC_CaptureCallback>
 8003f60:	e007      	b.n	8003f72 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	0018      	movs	r0, r3
 8003f66:	f000 f8bf 	bl	80040e8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	0018      	movs	r0, r3
 8003f6e:	f000 f8cb 	bl	8004108 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2200      	movs	r2, #0
 8003f76:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	691b      	ldr	r3, [r3, #16]
 8003f7e:	2204      	movs	r2, #4
 8003f80:	4013      	ands	r3, r2
 8003f82:	2b04      	cmp	r3, #4
 8003f84:	d125      	bne.n	8003fd2 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	68db      	ldr	r3, [r3, #12]
 8003f8c:	2204      	movs	r2, #4
 8003f8e:	4013      	ands	r3, r2
 8003f90:	2b04      	cmp	r3, #4
 8003f92:	d11e      	bne.n	8003fd2 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	2205      	movs	r2, #5
 8003f9a:	4252      	negs	r2, r2
 8003f9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2202      	movs	r2, #2
 8003fa2:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	699a      	ldr	r2, [r3, #24]
 8003faa:	23c0      	movs	r3, #192	; 0xc0
 8003fac:	009b      	lsls	r3, r3, #2
 8003fae:	4013      	ands	r3, r2
 8003fb0:	d004      	beq.n	8003fbc <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	0018      	movs	r0, r3
 8003fb6:	f000 f89f 	bl	80040f8 <HAL_TIM_IC_CaptureCallback>
 8003fba:	e007      	b.n	8003fcc <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	0018      	movs	r0, r3
 8003fc0:	f000 f892 	bl	80040e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	0018      	movs	r0, r3
 8003fc8:	f000 f89e 	bl	8004108 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2200      	movs	r2, #0
 8003fd0:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	691b      	ldr	r3, [r3, #16]
 8003fd8:	2208      	movs	r2, #8
 8003fda:	4013      	ands	r3, r2
 8003fdc:	2b08      	cmp	r3, #8
 8003fde:	d124      	bne.n	800402a <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	68db      	ldr	r3, [r3, #12]
 8003fe6:	2208      	movs	r2, #8
 8003fe8:	4013      	ands	r3, r2
 8003fea:	2b08      	cmp	r3, #8
 8003fec:	d11d      	bne.n	800402a <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	2209      	movs	r2, #9
 8003ff4:	4252      	negs	r2, r2
 8003ff6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2204      	movs	r2, #4
 8003ffc:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	69db      	ldr	r3, [r3, #28]
 8004004:	2203      	movs	r2, #3
 8004006:	4013      	ands	r3, r2
 8004008:	d004      	beq.n	8004014 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	0018      	movs	r0, r3
 800400e:	f000 f873 	bl	80040f8 <HAL_TIM_IC_CaptureCallback>
 8004012:	e007      	b.n	8004024 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	0018      	movs	r0, r3
 8004018:	f000 f866 	bl	80040e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	0018      	movs	r0, r3
 8004020:	f000 f872 	bl	8004108 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2200      	movs	r2, #0
 8004028:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	691b      	ldr	r3, [r3, #16]
 8004030:	2210      	movs	r2, #16
 8004032:	4013      	ands	r3, r2
 8004034:	2b10      	cmp	r3, #16
 8004036:	d125      	bne.n	8004084 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	68db      	ldr	r3, [r3, #12]
 800403e:	2210      	movs	r2, #16
 8004040:	4013      	ands	r3, r2
 8004042:	2b10      	cmp	r3, #16
 8004044:	d11e      	bne.n	8004084 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	2211      	movs	r2, #17
 800404c:	4252      	negs	r2, r2
 800404e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2208      	movs	r2, #8
 8004054:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	69da      	ldr	r2, [r3, #28]
 800405c:	23c0      	movs	r3, #192	; 0xc0
 800405e:	009b      	lsls	r3, r3, #2
 8004060:	4013      	ands	r3, r2
 8004062:	d004      	beq.n	800406e <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	0018      	movs	r0, r3
 8004068:	f000 f846 	bl	80040f8 <HAL_TIM_IC_CaptureCallback>
 800406c:	e007      	b.n	800407e <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	0018      	movs	r0, r3
 8004072:	f000 f839 	bl	80040e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	0018      	movs	r0, r3
 800407a:	f000 f845 	bl	8004108 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2200      	movs	r2, #0
 8004082:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	691b      	ldr	r3, [r3, #16]
 800408a:	2201      	movs	r2, #1
 800408c:	4013      	ands	r3, r2
 800408e:	2b01      	cmp	r3, #1
 8004090:	d10f      	bne.n	80040b2 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	68db      	ldr	r3, [r3, #12]
 8004098:	2201      	movs	r2, #1
 800409a:	4013      	ands	r3, r2
 800409c:	2b01      	cmp	r3, #1
 800409e:	d108      	bne.n	80040b2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	2202      	movs	r2, #2
 80040a6:	4252      	negs	r2, r2
 80040a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	0018      	movs	r0, r3
 80040ae:	f7fd fe97 	bl	8001de0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	691b      	ldr	r3, [r3, #16]
 80040b8:	2240      	movs	r2, #64	; 0x40
 80040ba:	4013      	ands	r3, r2
 80040bc:	2b40      	cmp	r3, #64	; 0x40
 80040be:	d10f      	bne.n	80040e0 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	68db      	ldr	r3, [r3, #12]
 80040c6:	2240      	movs	r2, #64	; 0x40
 80040c8:	4013      	ands	r3, r2
 80040ca:	2b40      	cmp	r3, #64	; 0x40
 80040cc:	d108      	bne.n	80040e0 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	2241      	movs	r2, #65	; 0x41
 80040d4:	4252      	negs	r2, r2
 80040d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	0018      	movs	r0, r3
 80040dc:	f000 f81c 	bl	8004118 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80040e0:	46c0      	nop			; (mov r8, r8)
 80040e2:	46bd      	mov	sp, r7
 80040e4:	b002      	add	sp, #8
 80040e6:	bd80      	pop	{r7, pc}

080040e8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b082      	sub	sp, #8
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80040f0:	46c0      	nop			; (mov r8, r8)
 80040f2:	46bd      	mov	sp, r7
 80040f4:	b002      	add	sp, #8
 80040f6:	bd80      	pop	{r7, pc}

080040f8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b082      	sub	sp, #8
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004100:	46c0      	nop			; (mov r8, r8)
 8004102:	46bd      	mov	sp, r7
 8004104:	b002      	add	sp, #8
 8004106:	bd80      	pop	{r7, pc}

08004108 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b082      	sub	sp, #8
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004110:	46c0      	nop			; (mov r8, r8)
 8004112:	46bd      	mov	sp, r7
 8004114:	b002      	add	sp, #8
 8004116:	bd80      	pop	{r7, pc}

08004118 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b082      	sub	sp, #8
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004120:	46c0      	nop			; (mov r8, r8)
 8004122:	46bd      	mov	sp, r7
 8004124:	b002      	add	sp, #8
 8004126:	bd80      	pop	{r7, pc}

08004128 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b084      	sub	sp, #16
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
 8004130:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004138:	687a      	ldr	r2, [r7, #4]
 800413a:	2380      	movs	r3, #128	; 0x80
 800413c:	05db      	lsls	r3, r3, #23
 800413e:	429a      	cmp	r2, r3
 8004140:	d00b      	beq.n	800415a <TIM_Base_SetConfig+0x32>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	4a23      	ldr	r2, [pc, #140]	; (80041d4 <TIM_Base_SetConfig+0xac>)
 8004146:	4293      	cmp	r3, r2
 8004148:	d007      	beq.n	800415a <TIM_Base_SetConfig+0x32>
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	4a22      	ldr	r2, [pc, #136]	; (80041d8 <TIM_Base_SetConfig+0xb0>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d003      	beq.n	800415a <TIM_Base_SetConfig+0x32>
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	4a21      	ldr	r2, [pc, #132]	; (80041dc <TIM_Base_SetConfig+0xb4>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d108      	bne.n	800416c <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	2270      	movs	r2, #112	; 0x70
 800415e:	4393      	bics	r3, r2
 8004160:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	68fa      	ldr	r2, [r7, #12]
 8004168:	4313      	orrs	r3, r2
 800416a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800416c:	687a      	ldr	r2, [r7, #4]
 800416e:	2380      	movs	r3, #128	; 0x80
 8004170:	05db      	lsls	r3, r3, #23
 8004172:	429a      	cmp	r2, r3
 8004174:	d00b      	beq.n	800418e <TIM_Base_SetConfig+0x66>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	4a16      	ldr	r2, [pc, #88]	; (80041d4 <TIM_Base_SetConfig+0xac>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d007      	beq.n	800418e <TIM_Base_SetConfig+0x66>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	4a15      	ldr	r2, [pc, #84]	; (80041d8 <TIM_Base_SetConfig+0xb0>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d003      	beq.n	800418e <TIM_Base_SetConfig+0x66>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	4a14      	ldr	r2, [pc, #80]	; (80041dc <TIM_Base_SetConfig+0xb4>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d108      	bne.n	80041a0 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	4a13      	ldr	r2, [pc, #76]	; (80041e0 <TIM_Base_SetConfig+0xb8>)
 8004192:	4013      	ands	r3, r2
 8004194:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	68db      	ldr	r3, [r3, #12]
 800419a:	68fa      	ldr	r2, [r7, #12]
 800419c:	4313      	orrs	r3, r2
 800419e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	2280      	movs	r2, #128	; 0x80
 80041a4:	4393      	bics	r3, r2
 80041a6:	001a      	movs	r2, r3
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	691b      	ldr	r3, [r3, #16]
 80041ac:	4313      	orrs	r3, r2
 80041ae:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	68fa      	ldr	r2, [r7, #12]
 80041b4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	689a      	ldr	r2, [r3, #8]
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	681a      	ldr	r2, [r3, #0]
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2201      	movs	r2, #1
 80041ca:	615a      	str	r2, [r3, #20]
}
 80041cc:	46c0      	nop			; (mov r8, r8)
 80041ce:	46bd      	mov	sp, r7
 80041d0:	b004      	add	sp, #16
 80041d2:	bd80      	pop	{r7, pc}
 80041d4:	40000400 	.word	0x40000400
 80041d8:	40010800 	.word	0x40010800
 80041dc:	40011400 	.word	0x40011400
 80041e0:	fffffcff 	.word	0xfffffcff

080041e4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b082      	sub	sp, #8
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d101      	bne.n	80041f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80041f2:	2301      	movs	r3, #1
 80041f4:	e044      	b.n	8004280 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d107      	bne.n	800420e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2278      	movs	r2, #120	; 0x78
 8004202:	2100      	movs	r1, #0
 8004204:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	0018      	movs	r0, r3
 800420a:	f7fd ffbf 	bl	800218c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2224      	movs	r2, #36	; 0x24
 8004212:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	681a      	ldr	r2, [r3, #0]
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	2101      	movs	r1, #1
 8004220:	438a      	bics	r2, r1
 8004222:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	0018      	movs	r0, r3
 8004228:	f000 fc2c 	bl	8004a84 <UART_SetConfig>
 800422c:	0003      	movs	r3, r0
 800422e:	2b01      	cmp	r3, #1
 8004230:	d101      	bne.n	8004236 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004232:	2301      	movs	r3, #1
 8004234:	e024      	b.n	8004280 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800423a:	2b00      	cmp	r3, #0
 800423c:	d003      	beq.n	8004246 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	0018      	movs	r0, r3
 8004242:	f000 febd 	bl	8004fc0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	685a      	ldr	r2, [r3, #4]
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	490d      	ldr	r1, [pc, #52]	; (8004288 <HAL_UART_Init+0xa4>)
 8004252:	400a      	ands	r2, r1
 8004254:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	689a      	ldr	r2, [r3, #8]
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	212a      	movs	r1, #42	; 0x2a
 8004262:	438a      	bics	r2, r1
 8004264:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	681a      	ldr	r2, [r3, #0]
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	2101      	movs	r1, #1
 8004272:	430a      	orrs	r2, r1
 8004274:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	0018      	movs	r0, r3
 800427a:	f000 ff55 	bl	8005128 <UART_CheckIdleState>
 800427e:	0003      	movs	r3, r0
}
 8004280:	0018      	movs	r0, r3
 8004282:	46bd      	mov	sp, r7
 8004284:	b002      	add	sp, #8
 8004286:	bd80      	pop	{r7, pc}
 8004288:	ffffb7ff 	.word	0xffffb7ff

0800428c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b08a      	sub	sp, #40	; 0x28
 8004290:	af02      	add	r7, sp, #8
 8004292:	60f8      	str	r0, [r7, #12]
 8004294:	60b9      	str	r1, [r7, #8]
 8004296:	603b      	str	r3, [r7, #0]
 8004298:	1dbb      	adds	r3, r7, #6
 800429a:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80042a0:	2b20      	cmp	r3, #32
 80042a2:	d000      	beq.n	80042a6 <HAL_UART_Transmit+0x1a>
 80042a4:	e08c      	b.n	80043c0 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 80042a6:	68bb      	ldr	r3, [r7, #8]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d003      	beq.n	80042b4 <HAL_UART_Transmit+0x28>
 80042ac:	1dbb      	adds	r3, r7, #6
 80042ae:	881b      	ldrh	r3, [r3, #0]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d101      	bne.n	80042b8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80042b4:	2301      	movs	r3, #1
 80042b6:	e084      	b.n	80043c2 <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	689a      	ldr	r2, [r3, #8]
 80042bc:	2380      	movs	r3, #128	; 0x80
 80042be:	015b      	lsls	r3, r3, #5
 80042c0:	429a      	cmp	r2, r3
 80042c2:	d109      	bne.n	80042d8 <HAL_UART_Transmit+0x4c>
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	691b      	ldr	r3, [r3, #16]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d105      	bne.n	80042d8 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80042cc:	68bb      	ldr	r3, [r7, #8]
 80042ce:	2201      	movs	r2, #1
 80042d0:	4013      	ands	r3, r2
 80042d2:	d001      	beq.n	80042d8 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80042d4:	2301      	movs	r3, #1
 80042d6:	e074      	b.n	80043c2 <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	2284      	movs	r2, #132	; 0x84
 80042dc:	2100      	movs	r1, #0
 80042de:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	2221      	movs	r2, #33	; 0x21
 80042e4:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80042e6:	f7fd fff9 	bl	80022dc <HAL_GetTick>
 80042ea:	0003      	movs	r3, r0
 80042ec:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	1dba      	adds	r2, r7, #6
 80042f2:	2150      	movs	r1, #80	; 0x50
 80042f4:	8812      	ldrh	r2, [r2, #0]
 80042f6:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	1dba      	adds	r2, r7, #6
 80042fc:	2152      	movs	r1, #82	; 0x52
 80042fe:	8812      	ldrh	r2, [r2, #0]
 8004300:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	689a      	ldr	r2, [r3, #8]
 8004306:	2380      	movs	r3, #128	; 0x80
 8004308:	015b      	lsls	r3, r3, #5
 800430a:	429a      	cmp	r2, r3
 800430c:	d108      	bne.n	8004320 <HAL_UART_Transmit+0x94>
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	691b      	ldr	r3, [r3, #16]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d104      	bne.n	8004320 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8004316:	2300      	movs	r3, #0
 8004318:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800431a:	68bb      	ldr	r3, [r7, #8]
 800431c:	61bb      	str	r3, [r7, #24]
 800431e:	e003      	b.n	8004328 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8004320:	68bb      	ldr	r3, [r7, #8]
 8004322:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004324:	2300      	movs	r3, #0
 8004326:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004328:	e02f      	b.n	800438a <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800432a:	697a      	ldr	r2, [r7, #20]
 800432c:	68f8      	ldr	r0, [r7, #12]
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	9300      	str	r3, [sp, #0]
 8004332:	0013      	movs	r3, r2
 8004334:	2200      	movs	r2, #0
 8004336:	2180      	movs	r1, #128	; 0x80
 8004338:	f000 ff9e 	bl	8005278 <UART_WaitOnFlagUntilTimeout>
 800433c:	1e03      	subs	r3, r0, #0
 800433e:	d004      	beq.n	800434a <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	2220      	movs	r2, #32
 8004344:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8004346:	2303      	movs	r3, #3
 8004348:	e03b      	b.n	80043c2 <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 800434a:	69fb      	ldr	r3, [r7, #28]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d10b      	bne.n	8004368 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004350:	69bb      	ldr	r3, [r7, #24]
 8004352:	881b      	ldrh	r3, [r3, #0]
 8004354:	001a      	movs	r2, r3
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	05d2      	lsls	r2, r2, #23
 800435c:	0dd2      	lsrs	r2, r2, #23
 800435e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004360:	69bb      	ldr	r3, [r7, #24]
 8004362:	3302      	adds	r3, #2
 8004364:	61bb      	str	r3, [r7, #24]
 8004366:	e007      	b.n	8004378 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004368:	69fb      	ldr	r3, [r7, #28]
 800436a:	781a      	ldrb	r2, [r3, #0]
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004372:	69fb      	ldr	r3, [r7, #28]
 8004374:	3301      	adds	r3, #1
 8004376:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	2252      	movs	r2, #82	; 0x52
 800437c:	5a9b      	ldrh	r3, [r3, r2]
 800437e:	b29b      	uxth	r3, r3
 8004380:	3b01      	subs	r3, #1
 8004382:	b299      	uxth	r1, r3
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	2252      	movs	r2, #82	; 0x52
 8004388:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	2252      	movs	r2, #82	; 0x52
 800438e:	5a9b      	ldrh	r3, [r3, r2]
 8004390:	b29b      	uxth	r3, r3
 8004392:	2b00      	cmp	r3, #0
 8004394:	d1c9      	bne.n	800432a <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004396:	697a      	ldr	r2, [r7, #20]
 8004398:	68f8      	ldr	r0, [r7, #12]
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	9300      	str	r3, [sp, #0]
 800439e:	0013      	movs	r3, r2
 80043a0:	2200      	movs	r2, #0
 80043a2:	2140      	movs	r1, #64	; 0x40
 80043a4:	f000 ff68 	bl	8005278 <UART_WaitOnFlagUntilTimeout>
 80043a8:	1e03      	subs	r3, r0, #0
 80043aa:	d004      	beq.n	80043b6 <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	2220      	movs	r2, #32
 80043b0:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80043b2:	2303      	movs	r3, #3
 80043b4:	e005      	b.n	80043c2 <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	2220      	movs	r2, #32
 80043ba:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80043bc:	2300      	movs	r3, #0
 80043be:	e000      	b.n	80043c2 <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 80043c0:	2302      	movs	r3, #2
  }
}
 80043c2:	0018      	movs	r0, r3
 80043c4:	46bd      	mov	sp, r7
 80043c6:	b008      	add	sp, #32
 80043c8:	bd80      	pop	{r7, pc}
	...

080043cc <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b088      	sub	sp, #32
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	60f8      	str	r0, [r7, #12]
 80043d4:	60b9      	str	r1, [r7, #8]
 80043d6:	1dbb      	adds	r3, r7, #6
 80043d8:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	2280      	movs	r2, #128	; 0x80
 80043de:	589b      	ldr	r3, [r3, r2]
 80043e0:	2b20      	cmp	r3, #32
 80043e2:	d14a      	bne.n	800447a <HAL_UART_Receive_IT+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 80043e4:	68bb      	ldr	r3, [r7, #8]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d003      	beq.n	80043f2 <HAL_UART_Receive_IT+0x26>
 80043ea:	1dbb      	adds	r3, r7, #6
 80043ec:	881b      	ldrh	r3, [r3, #0]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d101      	bne.n	80043f6 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80043f2:	2301      	movs	r3, #1
 80043f4:	e042      	b.n	800447c <HAL_UART_Receive_IT+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	689a      	ldr	r2, [r3, #8]
 80043fa:	2380      	movs	r3, #128	; 0x80
 80043fc:	015b      	lsls	r3, r3, #5
 80043fe:	429a      	cmp	r2, r3
 8004400:	d109      	bne.n	8004416 <HAL_UART_Receive_IT+0x4a>
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	691b      	ldr	r3, [r3, #16]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d105      	bne.n	8004416 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800440a:	68bb      	ldr	r3, [r7, #8]
 800440c:	2201      	movs	r2, #1
 800440e:	4013      	ands	r3, r2
 8004410:	d001      	beq.n	8004416 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 8004412:	2301      	movs	r3, #1
 8004414:	e032      	b.n	800447c <HAL_UART_Receive_IT+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	2200      	movs	r2, #0
 800441a:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4a18      	ldr	r2, [pc, #96]	; (8004484 <HAL_UART_Receive_IT+0xb8>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d020      	beq.n	8004468 <HAL_UART_Receive_IT+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	685a      	ldr	r2, [r3, #4]
 800442c:	2380      	movs	r3, #128	; 0x80
 800442e:	041b      	lsls	r3, r3, #16
 8004430:	4013      	ands	r3, r2
 8004432:	d019      	beq.n	8004468 <HAL_UART_Receive_IT+0x9c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004434:	f3ef 8310 	mrs	r3, PRIMASK
 8004438:	613b      	str	r3, [r7, #16]
  return(result);
 800443a:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800443c:	61fb      	str	r3, [r7, #28]
 800443e:	2301      	movs	r3, #1
 8004440:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004442:	697b      	ldr	r3, [r7, #20]
 8004444:	f383 8810 	msr	PRIMASK, r3
}
 8004448:	46c0      	nop			; (mov r8, r8)
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	681a      	ldr	r2, [r3, #0]
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	2180      	movs	r1, #128	; 0x80
 8004456:	04c9      	lsls	r1, r1, #19
 8004458:	430a      	orrs	r2, r1
 800445a:	601a      	str	r2, [r3, #0]
 800445c:	69fb      	ldr	r3, [r7, #28]
 800445e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004460:	69bb      	ldr	r3, [r7, #24]
 8004462:	f383 8810 	msr	PRIMASK, r3
}
 8004466:	46c0      	nop			; (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004468:	1dbb      	adds	r3, r7, #6
 800446a:	881a      	ldrh	r2, [r3, #0]
 800446c:	68b9      	ldr	r1, [r7, #8]
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	0018      	movs	r0, r3
 8004472:	f000 ff6b 	bl	800534c <UART_Start_Receive_IT>
 8004476:	0003      	movs	r3, r0
 8004478:	e000      	b.n	800447c <HAL_UART_Receive_IT+0xb0>
  }
  else
  {
    return HAL_BUSY;
 800447a:	2302      	movs	r3, #2
  }
}
 800447c:	0018      	movs	r0, r3
 800447e:	46bd      	mov	sp, r7
 8004480:	b008      	add	sp, #32
 8004482:	bd80      	pop	{r7, pc}
 8004484:	40004800 	.word	0x40004800

08004488 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004488:	b590      	push	{r4, r7, lr}
 800448a:	b0ab      	sub	sp, #172	; 0xac
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	69db      	ldr	r3, [r3, #28]
 8004496:	22a4      	movs	r2, #164	; 0xa4
 8004498:	18b9      	adds	r1, r7, r2
 800449a:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	20a0      	movs	r0, #160	; 0xa0
 80044a4:	1839      	adds	r1, r7, r0
 80044a6:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	689b      	ldr	r3, [r3, #8]
 80044ae:	219c      	movs	r1, #156	; 0x9c
 80044b0:	1879      	adds	r1, r7, r1
 80044b2:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80044b4:	0011      	movs	r1, r2
 80044b6:	18bb      	adds	r3, r7, r2
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4a99      	ldr	r2, [pc, #612]	; (8004720 <HAL_UART_IRQHandler+0x298>)
 80044bc:	4013      	ands	r3, r2
 80044be:	2298      	movs	r2, #152	; 0x98
 80044c0:	18bc      	adds	r4, r7, r2
 80044c2:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 80044c4:	18bb      	adds	r3, r7, r2
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d114      	bne.n	80044f6 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80044cc:	187b      	adds	r3, r7, r1
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	2220      	movs	r2, #32
 80044d2:	4013      	ands	r3, r2
 80044d4:	d00f      	beq.n	80044f6 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80044d6:	183b      	adds	r3, r7, r0
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	2220      	movs	r2, #32
 80044dc:	4013      	ands	r3, r2
 80044de:	d00a      	beq.n	80044f6 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d100      	bne.n	80044ea <HAL_UART_IRQHandler+0x62>
 80044e8:	e2a0      	b.n	8004a2c <HAL_UART_IRQHandler+0x5a4>
      {
        huart->RxISR(huart);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80044ee:	687a      	ldr	r2, [r7, #4]
 80044f0:	0010      	movs	r0, r2
 80044f2:	4798      	blx	r3
      }
      return;
 80044f4:	e29a      	b.n	8004a2c <HAL_UART_IRQHandler+0x5a4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80044f6:	2398      	movs	r3, #152	; 0x98
 80044f8:	18fb      	adds	r3, r7, r3
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d100      	bne.n	8004502 <HAL_UART_IRQHandler+0x7a>
 8004500:	e114      	b.n	800472c <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004502:	239c      	movs	r3, #156	; 0x9c
 8004504:	18fb      	adds	r3, r7, r3
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	2201      	movs	r2, #1
 800450a:	4013      	ands	r3, r2
 800450c:	d106      	bne.n	800451c <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800450e:	23a0      	movs	r3, #160	; 0xa0
 8004510:	18fb      	adds	r3, r7, r3
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	4a83      	ldr	r2, [pc, #524]	; (8004724 <HAL_UART_IRQHandler+0x29c>)
 8004516:	4013      	ands	r3, r2
 8004518:	d100      	bne.n	800451c <HAL_UART_IRQHandler+0x94>
 800451a:	e107      	b.n	800472c <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800451c:	23a4      	movs	r3, #164	; 0xa4
 800451e:	18fb      	adds	r3, r7, r3
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	2201      	movs	r2, #1
 8004524:	4013      	ands	r3, r2
 8004526:	d012      	beq.n	800454e <HAL_UART_IRQHandler+0xc6>
 8004528:	23a0      	movs	r3, #160	; 0xa0
 800452a:	18fb      	adds	r3, r7, r3
 800452c:	681a      	ldr	r2, [r3, #0]
 800452e:	2380      	movs	r3, #128	; 0x80
 8004530:	005b      	lsls	r3, r3, #1
 8004532:	4013      	ands	r3, r2
 8004534:	d00b      	beq.n	800454e <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	2201      	movs	r2, #1
 800453c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2284      	movs	r2, #132	; 0x84
 8004542:	589b      	ldr	r3, [r3, r2]
 8004544:	2201      	movs	r2, #1
 8004546:	431a      	orrs	r2, r3
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2184      	movs	r1, #132	; 0x84
 800454c:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800454e:	23a4      	movs	r3, #164	; 0xa4
 8004550:	18fb      	adds	r3, r7, r3
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	2202      	movs	r2, #2
 8004556:	4013      	ands	r3, r2
 8004558:	d011      	beq.n	800457e <HAL_UART_IRQHandler+0xf6>
 800455a:	239c      	movs	r3, #156	; 0x9c
 800455c:	18fb      	adds	r3, r7, r3
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	2201      	movs	r2, #1
 8004562:	4013      	ands	r3, r2
 8004564:	d00b      	beq.n	800457e <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	2202      	movs	r2, #2
 800456c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2284      	movs	r2, #132	; 0x84
 8004572:	589b      	ldr	r3, [r3, r2]
 8004574:	2204      	movs	r2, #4
 8004576:	431a      	orrs	r2, r3
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2184      	movs	r1, #132	; 0x84
 800457c:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800457e:	23a4      	movs	r3, #164	; 0xa4
 8004580:	18fb      	adds	r3, r7, r3
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	2204      	movs	r2, #4
 8004586:	4013      	ands	r3, r2
 8004588:	d011      	beq.n	80045ae <HAL_UART_IRQHandler+0x126>
 800458a:	239c      	movs	r3, #156	; 0x9c
 800458c:	18fb      	adds	r3, r7, r3
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	2201      	movs	r2, #1
 8004592:	4013      	ands	r3, r2
 8004594:	d00b      	beq.n	80045ae <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	2204      	movs	r2, #4
 800459c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2284      	movs	r2, #132	; 0x84
 80045a2:	589b      	ldr	r3, [r3, r2]
 80045a4:	2202      	movs	r2, #2
 80045a6:	431a      	orrs	r2, r3
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2184      	movs	r1, #132	; 0x84
 80045ac:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80045ae:	23a4      	movs	r3, #164	; 0xa4
 80045b0:	18fb      	adds	r3, r7, r3
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	2208      	movs	r2, #8
 80045b6:	4013      	ands	r3, r2
 80045b8:	d017      	beq.n	80045ea <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80045ba:	23a0      	movs	r3, #160	; 0xa0
 80045bc:	18fb      	adds	r3, r7, r3
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	2220      	movs	r2, #32
 80045c2:	4013      	ands	r3, r2
 80045c4:	d105      	bne.n	80045d2 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80045c6:	239c      	movs	r3, #156	; 0x9c
 80045c8:	18fb      	adds	r3, r7, r3
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	2201      	movs	r2, #1
 80045ce:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80045d0:	d00b      	beq.n	80045ea <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	2208      	movs	r2, #8
 80045d8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2284      	movs	r2, #132	; 0x84
 80045de:	589b      	ldr	r3, [r3, r2]
 80045e0:	2208      	movs	r2, #8
 80045e2:	431a      	orrs	r2, r3
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2184      	movs	r1, #132	; 0x84
 80045e8:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80045ea:	23a4      	movs	r3, #164	; 0xa4
 80045ec:	18fb      	adds	r3, r7, r3
 80045ee:	681a      	ldr	r2, [r3, #0]
 80045f0:	2380      	movs	r3, #128	; 0x80
 80045f2:	011b      	lsls	r3, r3, #4
 80045f4:	4013      	ands	r3, r2
 80045f6:	d013      	beq.n	8004620 <HAL_UART_IRQHandler+0x198>
 80045f8:	23a0      	movs	r3, #160	; 0xa0
 80045fa:	18fb      	adds	r3, r7, r3
 80045fc:	681a      	ldr	r2, [r3, #0]
 80045fe:	2380      	movs	r3, #128	; 0x80
 8004600:	04db      	lsls	r3, r3, #19
 8004602:	4013      	ands	r3, r2
 8004604:	d00c      	beq.n	8004620 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	2280      	movs	r2, #128	; 0x80
 800460c:	0112      	lsls	r2, r2, #4
 800460e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2284      	movs	r2, #132	; 0x84
 8004614:	589b      	ldr	r3, [r3, r2]
 8004616:	2220      	movs	r2, #32
 8004618:	431a      	orrs	r2, r3
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2184      	movs	r1, #132	; 0x84
 800461e:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2284      	movs	r2, #132	; 0x84
 8004624:	589b      	ldr	r3, [r3, r2]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d100      	bne.n	800462c <HAL_UART_IRQHandler+0x1a4>
 800462a:	e201      	b.n	8004a30 <HAL_UART_IRQHandler+0x5a8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800462c:	23a4      	movs	r3, #164	; 0xa4
 800462e:	18fb      	adds	r3, r7, r3
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	2220      	movs	r2, #32
 8004634:	4013      	ands	r3, r2
 8004636:	d00e      	beq.n	8004656 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004638:	23a0      	movs	r3, #160	; 0xa0
 800463a:	18fb      	adds	r3, r7, r3
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	2220      	movs	r2, #32
 8004640:	4013      	ands	r3, r2
 8004642:	d008      	beq.n	8004656 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004648:	2b00      	cmp	r3, #0
 800464a:	d004      	beq.n	8004656 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004650:	687a      	ldr	r2, [r7, #4]
 8004652:	0010      	movs	r0, r2
 8004654:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2284      	movs	r2, #132	; 0x84
 800465a:	589b      	ldr	r3, [r3, r2]
 800465c:	2194      	movs	r1, #148	; 0x94
 800465e:	187a      	adds	r2, r7, r1
 8004660:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	689b      	ldr	r3, [r3, #8]
 8004668:	2240      	movs	r2, #64	; 0x40
 800466a:	4013      	ands	r3, r2
 800466c:	2b40      	cmp	r3, #64	; 0x40
 800466e:	d004      	beq.n	800467a <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004670:	187b      	adds	r3, r7, r1
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	2228      	movs	r2, #40	; 0x28
 8004676:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004678:	d047      	beq.n	800470a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	0018      	movs	r0, r3
 800467e:	f000 ff2f 	bl	80054e0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	689b      	ldr	r3, [r3, #8]
 8004688:	2240      	movs	r2, #64	; 0x40
 800468a:	4013      	ands	r3, r2
 800468c:	2b40      	cmp	r3, #64	; 0x40
 800468e:	d137      	bne.n	8004700 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004690:	f3ef 8310 	mrs	r3, PRIMASK
 8004694:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8004696:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004698:	2090      	movs	r0, #144	; 0x90
 800469a:	183a      	adds	r2, r7, r0
 800469c:	6013      	str	r3, [r2, #0]
 800469e:	2301      	movs	r3, #1
 80046a0:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046a2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80046a4:	f383 8810 	msr	PRIMASK, r3
}
 80046a8:	46c0      	nop			; (mov r8, r8)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	689a      	ldr	r2, [r3, #8]
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	2140      	movs	r1, #64	; 0x40
 80046b6:	438a      	bics	r2, r1
 80046b8:	609a      	str	r2, [r3, #8]
 80046ba:	183b      	adds	r3, r7, r0
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046c0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80046c2:	f383 8810 	msr	PRIMASK, r3
}
 80046c6:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d012      	beq.n	80046f6 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046d4:	4a14      	ldr	r2, [pc, #80]	; (8004728 <HAL_UART_IRQHandler+0x2a0>)
 80046d6:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046dc:	0018      	movs	r0, r3
 80046de:	f7fd ff18 	bl	8002512 <HAL_DMA_Abort_IT>
 80046e2:	1e03      	subs	r3, r0, #0
 80046e4:	d01a      	beq.n	800471c <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046f0:	0018      	movs	r0, r3
 80046f2:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046f4:	e012      	b.n	800471c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	0018      	movs	r0, r3
 80046fa:	f000 f9af 	bl	8004a5c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046fe:	e00d      	b.n	800471c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	0018      	movs	r0, r3
 8004704:	f000 f9aa 	bl	8004a5c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004708:	e008      	b.n	800471c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	0018      	movs	r0, r3
 800470e:	f000 f9a5 	bl	8004a5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2284      	movs	r2, #132	; 0x84
 8004716:	2100      	movs	r1, #0
 8004718:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800471a:	e189      	b.n	8004a30 <HAL_UART_IRQHandler+0x5a8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800471c:	46c0      	nop			; (mov r8, r8)
    return;
 800471e:	e187      	b.n	8004a30 <HAL_UART_IRQHandler+0x5a8>
 8004720:	0000080f 	.word	0x0000080f
 8004724:	04000120 	.word	0x04000120
 8004728:	080055a9 	.word	0x080055a9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004730:	2b01      	cmp	r3, #1
 8004732:	d000      	beq.n	8004736 <HAL_UART_IRQHandler+0x2ae>
 8004734:	e13b      	b.n	80049ae <HAL_UART_IRQHandler+0x526>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004736:	23a4      	movs	r3, #164	; 0xa4
 8004738:	18fb      	adds	r3, r7, r3
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	2210      	movs	r2, #16
 800473e:	4013      	ands	r3, r2
 8004740:	d100      	bne.n	8004744 <HAL_UART_IRQHandler+0x2bc>
 8004742:	e134      	b.n	80049ae <HAL_UART_IRQHandler+0x526>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004744:	23a0      	movs	r3, #160	; 0xa0
 8004746:	18fb      	adds	r3, r7, r3
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	2210      	movs	r2, #16
 800474c:	4013      	ands	r3, r2
 800474e:	d100      	bne.n	8004752 <HAL_UART_IRQHandler+0x2ca>
 8004750:	e12d      	b.n	80049ae <HAL_UART_IRQHandler+0x526>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	2210      	movs	r2, #16
 8004758:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	689b      	ldr	r3, [r3, #8]
 8004760:	2240      	movs	r2, #64	; 0x40
 8004762:	4013      	ands	r3, r2
 8004764:	2b40      	cmp	r3, #64	; 0x40
 8004766:	d000      	beq.n	800476a <HAL_UART_IRQHandler+0x2e2>
 8004768:	e0a1      	b.n	80048ae <HAL_UART_IRQHandler+0x426>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	685a      	ldr	r2, [r3, #4]
 8004772:	217e      	movs	r1, #126	; 0x7e
 8004774:	187b      	adds	r3, r7, r1
 8004776:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8004778:	187b      	adds	r3, r7, r1
 800477a:	881b      	ldrh	r3, [r3, #0]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d100      	bne.n	8004782 <HAL_UART_IRQHandler+0x2fa>
 8004780:	e158      	b.n	8004a34 <HAL_UART_IRQHandler+0x5ac>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2258      	movs	r2, #88	; 0x58
 8004786:	5a9b      	ldrh	r3, [r3, r2]
 8004788:	187a      	adds	r2, r7, r1
 800478a:	8812      	ldrh	r2, [r2, #0]
 800478c:	429a      	cmp	r2, r3
 800478e:	d300      	bcc.n	8004792 <HAL_UART_IRQHandler+0x30a>
 8004790:	e150      	b.n	8004a34 <HAL_UART_IRQHandler+0x5ac>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	187a      	adds	r2, r7, r1
 8004796:	215a      	movs	r1, #90	; 0x5a
 8004798:	8812      	ldrh	r2, [r2, #0]
 800479a:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	2220      	movs	r2, #32
 80047a6:	4013      	ands	r3, r2
 80047a8:	d16f      	bne.n	800488a <HAL_UART_IRQHandler+0x402>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80047aa:	f3ef 8310 	mrs	r3, PRIMASK
 80047ae:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80047b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80047b2:	67bb      	str	r3, [r7, #120]	; 0x78
 80047b4:	2301      	movs	r3, #1
 80047b6:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047ba:	f383 8810 	msr	PRIMASK, r3
}
 80047be:	46c0      	nop			; (mov r8, r8)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	681a      	ldr	r2, [r3, #0]
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	499e      	ldr	r1, [pc, #632]	; (8004a44 <HAL_UART_IRQHandler+0x5bc>)
 80047cc:	400a      	ands	r2, r1
 80047ce:	601a      	str	r2, [r3, #0]
 80047d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80047d2:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047d6:	f383 8810 	msr	PRIMASK, r3
}
 80047da:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80047dc:	f3ef 8310 	mrs	r3, PRIMASK
 80047e0:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 80047e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047e4:	677b      	str	r3, [r7, #116]	; 0x74
 80047e6:	2301      	movs	r3, #1
 80047e8:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047ec:	f383 8810 	msr	PRIMASK, r3
}
 80047f0:	46c0      	nop			; (mov r8, r8)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	689a      	ldr	r2, [r3, #8]
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	2101      	movs	r1, #1
 80047fe:	438a      	bics	r2, r1
 8004800:	609a      	str	r2, [r3, #8]
 8004802:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004804:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004806:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004808:	f383 8810 	msr	PRIMASK, r3
}
 800480c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800480e:	f3ef 8310 	mrs	r3, PRIMASK
 8004812:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8004814:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004816:	673b      	str	r3, [r7, #112]	; 0x70
 8004818:	2301      	movs	r3, #1
 800481a:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800481c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800481e:	f383 8810 	msr	PRIMASK, r3
}
 8004822:	46c0      	nop			; (mov r8, r8)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	689a      	ldr	r2, [r3, #8]
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	2140      	movs	r1, #64	; 0x40
 8004830:	438a      	bics	r2, r1
 8004832:	609a      	str	r2, [r3, #8]
 8004834:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004836:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004838:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800483a:	f383 8810 	msr	PRIMASK, r3
}
 800483e:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2280      	movs	r2, #128	; 0x80
 8004844:	2120      	movs	r1, #32
 8004846:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2200      	movs	r2, #0
 800484c:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800484e:	f3ef 8310 	mrs	r3, PRIMASK
 8004852:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8004854:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004856:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004858:	2301      	movs	r3, #1
 800485a:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800485c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800485e:	f383 8810 	msr	PRIMASK, r3
}
 8004862:	46c0      	nop			; (mov r8, r8)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	681a      	ldr	r2, [r3, #0]
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	2110      	movs	r1, #16
 8004870:	438a      	bics	r2, r1
 8004872:	601a      	str	r2, [r3, #0]
 8004874:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004876:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004878:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800487a:	f383 8810 	msr	PRIMASK, r3
}
 800487e:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004884:	0018      	movs	r0, r3
 8004886:	f7fd fe04 	bl	8002492 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2202      	movs	r2, #2
 800488e:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2258      	movs	r2, #88	; 0x58
 8004894:	5a9a      	ldrh	r2, [r3, r2]
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	215a      	movs	r1, #90	; 0x5a
 800489a:	5a5b      	ldrh	r3, [r3, r1]
 800489c:	b29b      	uxth	r3, r3
 800489e:	1ad3      	subs	r3, r2, r3
 80048a0:	b29a      	uxth	r2, r3
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	0011      	movs	r1, r2
 80048a6:	0018      	movs	r0, r3
 80048a8:	f000 f8e0 	bl	8004a6c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80048ac:	e0c2      	b.n	8004a34 <HAL_UART_IRQHandler+0x5ac>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2258      	movs	r2, #88	; 0x58
 80048b2:	5a99      	ldrh	r1, [r3, r2]
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	225a      	movs	r2, #90	; 0x5a
 80048b8:	5a9b      	ldrh	r3, [r3, r2]
 80048ba:	b29a      	uxth	r2, r3
 80048bc:	208e      	movs	r0, #142	; 0x8e
 80048be:	183b      	adds	r3, r7, r0
 80048c0:	1a8a      	subs	r2, r1, r2
 80048c2:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	225a      	movs	r2, #90	; 0x5a
 80048c8:	5a9b      	ldrh	r3, [r3, r2]
 80048ca:	b29b      	uxth	r3, r3
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d100      	bne.n	80048d2 <HAL_UART_IRQHandler+0x44a>
 80048d0:	e0b2      	b.n	8004a38 <HAL_UART_IRQHandler+0x5b0>
          && (nb_rx_data > 0U))
 80048d2:	183b      	adds	r3, r7, r0
 80048d4:	881b      	ldrh	r3, [r3, #0]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d100      	bne.n	80048dc <HAL_UART_IRQHandler+0x454>
 80048da:	e0ad      	b.n	8004a38 <HAL_UART_IRQHandler+0x5b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80048dc:	f3ef 8310 	mrs	r3, PRIMASK
 80048e0:	60fb      	str	r3, [r7, #12]
  return(result);
 80048e2:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80048e4:	2488      	movs	r4, #136	; 0x88
 80048e6:	193a      	adds	r2, r7, r4
 80048e8:	6013      	str	r3, [r2, #0]
 80048ea:	2301      	movs	r3, #1
 80048ec:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048ee:	693b      	ldr	r3, [r7, #16]
 80048f0:	f383 8810 	msr	PRIMASK, r3
}
 80048f4:	46c0      	nop			; (mov r8, r8)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	681a      	ldr	r2, [r3, #0]
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4951      	ldr	r1, [pc, #324]	; (8004a48 <HAL_UART_IRQHandler+0x5c0>)
 8004902:	400a      	ands	r2, r1
 8004904:	601a      	str	r2, [r3, #0]
 8004906:	193b      	adds	r3, r7, r4
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800490c:	697b      	ldr	r3, [r7, #20]
 800490e:	f383 8810 	msr	PRIMASK, r3
}
 8004912:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004914:	f3ef 8310 	mrs	r3, PRIMASK
 8004918:	61bb      	str	r3, [r7, #24]
  return(result);
 800491a:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800491c:	2484      	movs	r4, #132	; 0x84
 800491e:	193a      	adds	r2, r7, r4
 8004920:	6013      	str	r3, [r2, #0]
 8004922:	2301      	movs	r3, #1
 8004924:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004926:	69fb      	ldr	r3, [r7, #28]
 8004928:	f383 8810 	msr	PRIMASK, r3
}
 800492c:	46c0      	nop			; (mov r8, r8)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	689a      	ldr	r2, [r3, #8]
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	2101      	movs	r1, #1
 800493a:	438a      	bics	r2, r1
 800493c:	609a      	str	r2, [r3, #8]
 800493e:	193b      	adds	r3, r7, r4
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004944:	6a3b      	ldr	r3, [r7, #32]
 8004946:	f383 8810 	msr	PRIMASK, r3
}
 800494a:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2280      	movs	r2, #128	; 0x80
 8004950:	2120      	movs	r1, #32
 8004952:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2200      	movs	r2, #0
 8004958:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2200      	movs	r2, #0
 800495e:	669a      	str	r2, [r3, #104]	; 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004960:	f3ef 8310 	mrs	r3, PRIMASK
 8004964:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004966:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004968:	2480      	movs	r4, #128	; 0x80
 800496a:	193a      	adds	r2, r7, r4
 800496c:	6013      	str	r3, [r2, #0]
 800496e:	2301      	movs	r3, #1
 8004970:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004974:	f383 8810 	msr	PRIMASK, r3
}
 8004978:	46c0      	nop			; (mov r8, r8)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	681a      	ldr	r2, [r3, #0]
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	2110      	movs	r1, #16
 8004986:	438a      	bics	r2, r1
 8004988:	601a      	str	r2, [r3, #0]
 800498a:	193b      	adds	r3, r7, r4
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004990:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004992:	f383 8810 	msr	PRIMASK, r3
}
 8004996:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2202      	movs	r2, #2
 800499c:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800499e:	183b      	adds	r3, r7, r0
 80049a0:	881a      	ldrh	r2, [r3, #0]
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	0011      	movs	r1, r2
 80049a6:	0018      	movs	r0, r3
 80049a8:	f000 f860 	bl	8004a6c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80049ac:	e044      	b.n	8004a38 <HAL_UART_IRQHandler+0x5b0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80049ae:	23a4      	movs	r3, #164	; 0xa4
 80049b0:	18fb      	adds	r3, r7, r3
 80049b2:	681a      	ldr	r2, [r3, #0]
 80049b4:	2380      	movs	r3, #128	; 0x80
 80049b6:	035b      	lsls	r3, r3, #13
 80049b8:	4013      	ands	r3, r2
 80049ba:	d010      	beq.n	80049de <HAL_UART_IRQHandler+0x556>
 80049bc:	239c      	movs	r3, #156	; 0x9c
 80049be:	18fb      	adds	r3, r7, r3
 80049c0:	681a      	ldr	r2, [r3, #0]
 80049c2:	2380      	movs	r3, #128	; 0x80
 80049c4:	03db      	lsls	r3, r3, #15
 80049c6:	4013      	ands	r3, r2
 80049c8:	d009      	beq.n	80049de <HAL_UART_IRQHandler+0x556>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	2280      	movs	r2, #128	; 0x80
 80049d0:	0352      	lsls	r2, r2, #13
 80049d2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	0018      	movs	r0, r3
 80049d8:	f000 ffec 	bl	80059b4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80049dc:	e02f      	b.n	8004a3e <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80049de:	23a4      	movs	r3, #164	; 0xa4
 80049e0:	18fb      	adds	r3, r7, r3
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	2280      	movs	r2, #128	; 0x80
 80049e6:	4013      	ands	r3, r2
 80049e8:	d00f      	beq.n	8004a0a <HAL_UART_IRQHandler+0x582>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80049ea:	23a0      	movs	r3, #160	; 0xa0
 80049ec:	18fb      	adds	r3, r7, r3
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	2280      	movs	r2, #128	; 0x80
 80049f2:	4013      	ands	r3, r2
 80049f4:	d009      	beq.n	8004a0a <HAL_UART_IRQHandler+0x582>
  {
    if (huart->TxISR != NULL)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d01e      	beq.n	8004a3c <HAL_UART_IRQHandler+0x5b4>
    {
      huart->TxISR(huart);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a02:	687a      	ldr	r2, [r7, #4]
 8004a04:	0010      	movs	r0, r2
 8004a06:	4798      	blx	r3
    }
    return;
 8004a08:	e018      	b.n	8004a3c <HAL_UART_IRQHandler+0x5b4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004a0a:	23a4      	movs	r3, #164	; 0xa4
 8004a0c:	18fb      	adds	r3, r7, r3
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	2240      	movs	r2, #64	; 0x40
 8004a12:	4013      	ands	r3, r2
 8004a14:	d013      	beq.n	8004a3e <HAL_UART_IRQHandler+0x5b6>
 8004a16:	23a0      	movs	r3, #160	; 0xa0
 8004a18:	18fb      	adds	r3, r7, r3
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	2240      	movs	r2, #64	; 0x40
 8004a1e:	4013      	ands	r3, r2
 8004a20:	d00d      	beq.n	8004a3e <HAL_UART_IRQHandler+0x5b6>
  {
    UART_EndTransmit_IT(huart);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	0018      	movs	r0, r3
 8004a26:	f000 fdd6 	bl	80055d6 <UART_EndTransmit_IT>
    return;
 8004a2a:	e008      	b.n	8004a3e <HAL_UART_IRQHandler+0x5b6>
      return;
 8004a2c:	46c0      	nop			; (mov r8, r8)
 8004a2e:	e006      	b.n	8004a3e <HAL_UART_IRQHandler+0x5b6>
    return;
 8004a30:	46c0      	nop			; (mov r8, r8)
 8004a32:	e004      	b.n	8004a3e <HAL_UART_IRQHandler+0x5b6>
      return;
 8004a34:	46c0      	nop			; (mov r8, r8)
 8004a36:	e002      	b.n	8004a3e <HAL_UART_IRQHandler+0x5b6>
      return;
 8004a38:	46c0      	nop			; (mov r8, r8)
 8004a3a:	e000      	b.n	8004a3e <HAL_UART_IRQHandler+0x5b6>
    return;
 8004a3c:	46c0      	nop			; (mov r8, r8)
  }

}
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	b02b      	add	sp, #172	; 0xac
 8004a42:	bd90      	pop	{r4, r7, pc}
 8004a44:	fffffeff 	.word	0xfffffeff
 8004a48:	fffffedf 	.word	0xfffffedf

08004a4c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b082      	sub	sp, #8
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004a54:	46c0      	nop			; (mov r8, r8)
 8004a56:	46bd      	mov	sp, r7
 8004a58:	b002      	add	sp, #8
 8004a5a:	bd80      	pop	{r7, pc}

08004a5c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b082      	sub	sp, #8
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004a64:	46c0      	nop			; (mov r8, r8)
 8004a66:	46bd      	mov	sp, r7
 8004a68:	b002      	add	sp, #8
 8004a6a:	bd80      	pop	{r7, pc}

08004a6c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b082      	sub	sp, #8
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
 8004a74:	000a      	movs	r2, r1
 8004a76:	1cbb      	adds	r3, r7, #2
 8004a78:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004a7a:	46c0      	nop			; (mov r8, r8)
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	b002      	add	sp, #8
 8004a80:	bd80      	pop	{r7, pc}
	...

08004a84 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004a84:	b5b0      	push	{r4, r5, r7, lr}
 8004a86:	b08e      	sub	sp, #56	; 0x38
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004a8c:	231a      	movs	r3, #26
 8004a8e:	2218      	movs	r2, #24
 8004a90:	189b      	adds	r3, r3, r2
 8004a92:	19db      	adds	r3, r3, r7
 8004a94:	2200      	movs	r2, #0
 8004a96:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004a98:	69fb      	ldr	r3, [r7, #28]
 8004a9a:	689a      	ldr	r2, [r3, #8]
 8004a9c:	69fb      	ldr	r3, [r7, #28]
 8004a9e:	691b      	ldr	r3, [r3, #16]
 8004aa0:	431a      	orrs	r2, r3
 8004aa2:	69fb      	ldr	r3, [r7, #28]
 8004aa4:	695b      	ldr	r3, [r3, #20]
 8004aa6:	431a      	orrs	r2, r3
 8004aa8:	69fb      	ldr	r3, [r7, #28]
 8004aaa:	69db      	ldr	r3, [r3, #28]
 8004aac:	4313      	orrs	r3, r2
 8004aae:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004ab0:	69fb      	ldr	r3, [r7, #28]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	4ac3      	ldr	r2, [pc, #780]	; (8004dc4 <UART_SetConfig+0x340>)
 8004ab8:	4013      	ands	r3, r2
 8004aba:	0019      	movs	r1, r3
 8004abc:	69fb      	ldr	r3, [r7, #28]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004ac2:	430a      	orrs	r2, r1
 8004ac4:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ac6:	69fb      	ldr	r3, [r7, #28]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	685b      	ldr	r3, [r3, #4]
 8004acc:	4abe      	ldr	r2, [pc, #760]	; (8004dc8 <UART_SetConfig+0x344>)
 8004ace:	4013      	ands	r3, r2
 8004ad0:	0019      	movs	r1, r3
 8004ad2:	69fb      	ldr	r3, [r7, #28]
 8004ad4:	68da      	ldr	r2, [r3, #12]
 8004ad6:	69fb      	ldr	r3, [r7, #28]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	430a      	orrs	r2, r1
 8004adc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004ade:	69fb      	ldr	r3, [r7, #28]
 8004ae0:	699b      	ldr	r3, [r3, #24]
 8004ae2:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004ae4:	69fb      	ldr	r3, [r7, #28]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	4ab8      	ldr	r2, [pc, #736]	; (8004dcc <UART_SetConfig+0x348>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d004      	beq.n	8004af8 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004aee:	69fb      	ldr	r3, [r7, #28]
 8004af0:	6a1b      	ldr	r3, [r3, #32]
 8004af2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004af4:	4313      	orrs	r3, r2
 8004af6:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004af8:	69fb      	ldr	r3, [r7, #28]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	689b      	ldr	r3, [r3, #8]
 8004afe:	4ab4      	ldr	r2, [pc, #720]	; (8004dd0 <UART_SetConfig+0x34c>)
 8004b00:	4013      	ands	r3, r2
 8004b02:	0019      	movs	r1, r3
 8004b04:	69fb      	ldr	r3, [r7, #28]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004b0a:	430a      	orrs	r2, r1
 8004b0c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004b0e:	69fb      	ldr	r3, [r7, #28]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	4ab0      	ldr	r2, [pc, #704]	; (8004dd4 <UART_SetConfig+0x350>)
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d131      	bne.n	8004b7c <UART_SetConfig+0xf8>
 8004b18:	4baf      	ldr	r3, [pc, #700]	; (8004dd8 <UART_SetConfig+0x354>)
 8004b1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b1c:	2203      	movs	r2, #3
 8004b1e:	4013      	ands	r3, r2
 8004b20:	2b03      	cmp	r3, #3
 8004b22:	d01d      	beq.n	8004b60 <UART_SetConfig+0xdc>
 8004b24:	d823      	bhi.n	8004b6e <UART_SetConfig+0xea>
 8004b26:	2b02      	cmp	r3, #2
 8004b28:	d00c      	beq.n	8004b44 <UART_SetConfig+0xc0>
 8004b2a:	d820      	bhi.n	8004b6e <UART_SetConfig+0xea>
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d002      	beq.n	8004b36 <UART_SetConfig+0xb2>
 8004b30:	2b01      	cmp	r3, #1
 8004b32:	d00e      	beq.n	8004b52 <UART_SetConfig+0xce>
 8004b34:	e01b      	b.n	8004b6e <UART_SetConfig+0xea>
 8004b36:	231b      	movs	r3, #27
 8004b38:	2218      	movs	r2, #24
 8004b3a:	189b      	adds	r3, r3, r2
 8004b3c:	19db      	adds	r3, r3, r7
 8004b3e:	2201      	movs	r2, #1
 8004b40:	701a      	strb	r2, [r3, #0]
 8004b42:	e0b4      	b.n	8004cae <UART_SetConfig+0x22a>
 8004b44:	231b      	movs	r3, #27
 8004b46:	2218      	movs	r2, #24
 8004b48:	189b      	adds	r3, r3, r2
 8004b4a:	19db      	adds	r3, r3, r7
 8004b4c:	2202      	movs	r2, #2
 8004b4e:	701a      	strb	r2, [r3, #0]
 8004b50:	e0ad      	b.n	8004cae <UART_SetConfig+0x22a>
 8004b52:	231b      	movs	r3, #27
 8004b54:	2218      	movs	r2, #24
 8004b56:	189b      	adds	r3, r3, r2
 8004b58:	19db      	adds	r3, r3, r7
 8004b5a:	2204      	movs	r2, #4
 8004b5c:	701a      	strb	r2, [r3, #0]
 8004b5e:	e0a6      	b.n	8004cae <UART_SetConfig+0x22a>
 8004b60:	231b      	movs	r3, #27
 8004b62:	2218      	movs	r2, #24
 8004b64:	189b      	adds	r3, r3, r2
 8004b66:	19db      	adds	r3, r3, r7
 8004b68:	2208      	movs	r2, #8
 8004b6a:	701a      	strb	r2, [r3, #0]
 8004b6c:	e09f      	b.n	8004cae <UART_SetConfig+0x22a>
 8004b6e:	231b      	movs	r3, #27
 8004b70:	2218      	movs	r2, #24
 8004b72:	189b      	adds	r3, r3, r2
 8004b74:	19db      	adds	r3, r3, r7
 8004b76:	2210      	movs	r2, #16
 8004b78:	701a      	strb	r2, [r3, #0]
 8004b7a:	e098      	b.n	8004cae <UART_SetConfig+0x22a>
 8004b7c:	69fb      	ldr	r3, [r7, #28]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	4a96      	ldr	r2, [pc, #600]	; (8004ddc <UART_SetConfig+0x358>)
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d131      	bne.n	8004bea <UART_SetConfig+0x166>
 8004b86:	4b94      	ldr	r3, [pc, #592]	; (8004dd8 <UART_SetConfig+0x354>)
 8004b88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b8a:	220c      	movs	r2, #12
 8004b8c:	4013      	ands	r3, r2
 8004b8e:	2b0c      	cmp	r3, #12
 8004b90:	d01d      	beq.n	8004bce <UART_SetConfig+0x14a>
 8004b92:	d823      	bhi.n	8004bdc <UART_SetConfig+0x158>
 8004b94:	2b08      	cmp	r3, #8
 8004b96:	d00c      	beq.n	8004bb2 <UART_SetConfig+0x12e>
 8004b98:	d820      	bhi.n	8004bdc <UART_SetConfig+0x158>
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d002      	beq.n	8004ba4 <UART_SetConfig+0x120>
 8004b9e:	2b04      	cmp	r3, #4
 8004ba0:	d00e      	beq.n	8004bc0 <UART_SetConfig+0x13c>
 8004ba2:	e01b      	b.n	8004bdc <UART_SetConfig+0x158>
 8004ba4:	231b      	movs	r3, #27
 8004ba6:	2218      	movs	r2, #24
 8004ba8:	189b      	adds	r3, r3, r2
 8004baa:	19db      	adds	r3, r3, r7
 8004bac:	2200      	movs	r2, #0
 8004bae:	701a      	strb	r2, [r3, #0]
 8004bb0:	e07d      	b.n	8004cae <UART_SetConfig+0x22a>
 8004bb2:	231b      	movs	r3, #27
 8004bb4:	2218      	movs	r2, #24
 8004bb6:	189b      	adds	r3, r3, r2
 8004bb8:	19db      	adds	r3, r3, r7
 8004bba:	2202      	movs	r2, #2
 8004bbc:	701a      	strb	r2, [r3, #0]
 8004bbe:	e076      	b.n	8004cae <UART_SetConfig+0x22a>
 8004bc0:	231b      	movs	r3, #27
 8004bc2:	2218      	movs	r2, #24
 8004bc4:	189b      	adds	r3, r3, r2
 8004bc6:	19db      	adds	r3, r3, r7
 8004bc8:	2204      	movs	r2, #4
 8004bca:	701a      	strb	r2, [r3, #0]
 8004bcc:	e06f      	b.n	8004cae <UART_SetConfig+0x22a>
 8004bce:	231b      	movs	r3, #27
 8004bd0:	2218      	movs	r2, #24
 8004bd2:	189b      	adds	r3, r3, r2
 8004bd4:	19db      	adds	r3, r3, r7
 8004bd6:	2208      	movs	r2, #8
 8004bd8:	701a      	strb	r2, [r3, #0]
 8004bda:	e068      	b.n	8004cae <UART_SetConfig+0x22a>
 8004bdc:	231b      	movs	r3, #27
 8004bde:	2218      	movs	r2, #24
 8004be0:	189b      	adds	r3, r3, r2
 8004be2:	19db      	adds	r3, r3, r7
 8004be4:	2210      	movs	r2, #16
 8004be6:	701a      	strb	r2, [r3, #0]
 8004be8:	e061      	b.n	8004cae <UART_SetConfig+0x22a>
 8004bea:	69fb      	ldr	r3, [r7, #28]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	4a7c      	ldr	r2, [pc, #496]	; (8004de0 <UART_SetConfig+0x35c>)
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d106      	bne.n	8004c02 <UART_SetConfig+0x17e>
 8004bf4:	231b      	movs	r3, #27
 8004bf6:	2218      	movs	r2, #24
 8004bf8:	189b      	adds	r3, r3, r2
 8004bfa:	19db      	adds	r3, r3, r7
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	701a      	strb	r2, [r3, #0]
 8004c00:	e055      	b.n	8004cae <UART_SetConfig+0x22a>
 8004c02:	69fb      	ldr	r3, [r7, #28]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	4a77      	ldr	r2, [pc, #476]	; (8004de4 <UART_SetConfig+0x360>)
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d106      	bne.n	8004c1a <UART_SetConfig+0x196>
 8004c0c:	231b      	movs	r3, #27
 8004c0e:	2218      	movs	r2, #24
 8004c10:	189b      	adds	r3, r3, r2
 8004c12:	19db      	adds	r3, r3, r7
 8004c14:	2200      	movs	r2, #0
 8004c16:	701a      	strb	r2, [r3, #0]
 8004c18:	e049      	b.n	8004cae <UART_SetConfig+0x22a>
 8004c1a:	69fb      	ldr	r3, [r7, #28]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	4a6b      	ldr	r2, [pc, #428]	; (8004dcc <UART_SetConfig+0x348>)
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d13e      	bne.n	8004ca2 <UART_SetConfig+0x21e>
 8004c24:	4b6c      	ldr	r3, [pc, #432]	; (8004dd8 <UART_SetConfig+0x354>)
 8004c26:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004c28:	23c0      	movs	r3, #192	; 0xc0
 8004c2a:	011b      	lsls	r3, r3, #4
 8004c2c:	4013      	ands	r3, r2
 8004c2e:	22c0      	movs	r2, #192	; 0xc0
 8004c30:	0112      	lsls	r2, r2, #4
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d027      	beq.n	8004c86 <UART_SetConfig+0x202>
 8004c36:	22c0      	movs	r2, #192	; 0xc0
 8004c38:	0112      	lsls	r2, r2, #4
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d82a      	bhi.n	8004c94 <UART_SetConfig+0x210>
 8004c3e:	2280      	movs	r2, #128	; 0x80
 8004c40:	0112      	lsls	r2, r2, #4
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d011      	beq.n	8004c6a <UART_SetConfig+0x1e6>
 8004c46:	2280      	movs	r2, #128	; 0x80
 8004c48:	0112      	lsls	r2, r2, #4
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d822      	bhi.n	8004c94 <UART_SetConfig+0x210>
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d004      	beq.n	8004c5c <UART_SetConfig+0x1d8>
 8004c52:	2280      	movs	r2, #128	; 0x80
 8004c54:	00d2      	lsls	r2, r2, #3
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d00e      	beq.n	8004c78 <UART_SetConfig+0x1f4>
 8004c5a:	e01b      	b.n	8004c94 <UART_SetConfig+0x210>
 8004c5c:	231b      	movs	r3, #27
 8004c5e:	2218      	movs	r2, #24
 8004c60:	189b      	adds	r3, r3, r2
 8004c62:	19db      	adds	r3, r3, r7
 8004c64:	2200      	movs	r2, #0
 8004c66:	701a      	strb	r2, [r3, #0]
 8004c68:	e021      	b.n	8004cae <UART_SetConfig+0x22a>
 8004c6a:	231b      	movs	r3, #27
 8004c6c:	2218      	movs	r2, #24
 8004c6e:	189b      	adds	r3, r3, r2
 8004c70:	19db      	adds	r3, r3, r7
 8004c72:	2202      	movs	r2, #2
 8004c74:	701a      	strb	r2, [r3, #0]
 8004c76:	e01a      	b.n	8004cae <UART_SetConfig+0x22a>
 8004c78:	231b      	movs	r3, #27
 8004c7a:	2218      	movs	r2, #24
 8004c7c:	189b      	adds	r3, r3, r2
 8004c7e:	19db      	adds	r3, r3, r7
 8004c80:	2204      	movs	r2, #4
 8004c82:	701a      	strb	r2, [r3, #0]
 8004c84:	e013      	b.n	8004cae <UART_SetConfig+0x22a>
 8004c86:	231b      	movs	r3, #27
 8004c88:	2218      	movs	r2, #24
 8004c8a:	189b      	adds	r3, r3, r2
 8004c8c:	19db      	adds	r3, r3, r7
 8004c8e:	2208      	movs	r2, #8
 8004c90:	701a      	strb	r2, [r3, #0]
 8004c92:	e00c      	b.n	8004cae <UART_SetConfig+0x22a>
 8004c94:	231b      	movs	r3, #27
 8004c96:	2218      	movs	r2, #24
 8004c98:	189b      	adds	r3, r3, r2
 8004c9a:	19db      	adds	r3, r3, r7
 8004c9c:	2210      	movs	r2, #16
 8004c9e:	701a      	strb	r2, [r3, #0]
 8004ca0:	e005      	b.n	8004cae <UART_SetConfig+0x22a>
 8004ca2:	231b      	movs	r3, #27
 8004ca4:	2218      	movs	r2, #24
 8004ca6:	189b      	adds	r3, r3, r2
 8004ca8:	19db      	adds	r3, r3, r7
 8004caa:	2210      	movs	r2, #16
 8004cac:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004cae:	69fb      	ldr	r3, [r7, #28]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	4a46      	ldr	r2, [pc, #280]	; (8004dcc <UART_SetConfig+0x348>)
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	d000      	beq.n	8004cba <UART_SetConfig+0x236>
 8004cb8:	e09a      	b.n	8004df0 <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004cba:	231b      	movs	r3, #27
 8004cbc:	2218      	movs	r2, #24
 8004cbe:	189b      	adds	r3, r3, r2
 8004cc0:	19db      	adds	r3, r3, r7
 8004cc2:	781b      	ldrb	r3, [r3, #0]
 8004cc4:	2b08      	cmp	r3, #8
 8004cc6:	d01d      	beq.n	8004d04 <UART_SetConfig+0x280>
 8004cc8:	dc20      	bgt.n	8004d0c <UART_SetConfig+0x288>
 8004cca:	2b04      	cmp	r3, #4
 8004ccc:	d015      	beq.n	8004cfa <UART_SetConfig+0x276>
 8004cce:	dc1d      	bgt.n	8004d0c <UART_SetConfig+0x288>
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d002      	beq.n	8004cda <UART_SetConfig+0x256>
 8004cd4:	2b02      	cmp	r3, #2
 8004cd6:	d005      	beq.n	8004ce4 <UART_SetConfig+0x260>
 8004cd8:	e018      	b.n	8004d0c <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004cda:	f7fe fe87 	bl	80039ec <HAL_RCC_GetPCLK1Freq>
 8004cde:	0003      	movs	r3, r0
 8004ce0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004ce2:	e01c      	b.n	8004d1e <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004ce4:	4b3c      	ldr	r3, [pc, #240]	; (8004dd8 <UART_SetConfig+0x354>)
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	2210      	movs	r2, #16
 8004cea:	4013      	ands	r3, r2
 8004cec:	d002      	beq.n	8004cf4 <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8004cee:	4b3e      	ldr	r3, [pc, #248]	; (8004de8 <UART_SetConfig+0x364>)
 8004cf0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004cf2:	e014      	b.n	8004d1e <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 8004cf4:	4b3d      	ldr	r3, [pc, #244]	; (8004dec <UART_SetConfig+0x368>)
 8004cf6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004cf8:	e011      	b.n	8004d1e <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004cfa:	f7fe fdc7 	bl	800388c <HAL_RCC_GetSysClockFreq>
 8004cfe:	0003      	movs	r3, r0
 8004d00:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004d02:	e00c      	b.n	8004d1e <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d04:	2380      	movs	r3, #128	; 0x80
 8004d06:	021b      	lsls	r3, r3, #8
 8004d08:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004d0a:	e008      	b.n	8004d1e <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8004d10:	231a      	movs	r3, #26
 8004d12:	2218      	movs	r2, #24
 8004d14:	189b      	adds	r3, r3, r2
 8004d16:	19db      	adds	r3, r3, r7
 8004d18:	2201      	movs	r2, #1
 8004d1a:	701a      	strb	r2, [r3, #0]
        break;
 8004d1c:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004d1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d100      	bne.n	8004d26 <UART_SetConfig+0x2a2>
 8004d24:	e133      	b.n	8004f8e <UART_SetConfig+0x50a>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004d26:	69fb      	ldr	r3, [r7, #28]
 8004d28:	685a      	ldr	r2, [r3, #4]
 8004d2a:	0013      	movs	r3, r2
 8004d2c:	005b      	lsls	r3, r3, #1
 8004d2e:	189b      	adds	r3, r3, r2
 8004d30:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d32:	429a      	cmp	r2, r3
 8004d34:	d305      	bcc.n	8004d42 <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004d36:	69fb      	ldr	r3, [r7, #28]
 8004d38:	685b      	ldr	r3, [r3, #4]
 8004d3a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004d3c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d3e:	429a      	cmp	r2, r3
 8004d40:	d906      	bls.n	8004d50 <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 8004d42:	231a      	movs	r3, #26
 8004d44:	2218      	movs	r2, #24
 8004d46:	189b      	adds	r3, r3, r2
 8004d48:	19db      	adds	r3, r3, r7
 8004d4a:	2201      	movs	r2, #1
 8004d4c:	701a      	strb	r2, [r3, #0]
 8004d4e:	e11e      	b.n	8004f8e <UART_SetConfig+0x50a>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004d50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d52:	613b      	str	r3, [r7, #16]
 8004d54:	2300      	movs	r3, #0
 8004d56:	617b      	str	r3, [r7, #20]
 8004d58:	6939      	ldr	r1, [r7, #16]
 8004d5a:	697a      	ldr	r2, [r7, #20]
 8004d5c:	000b      	movs	r3, r1
 8004d5e:	0e1b      	lsrs	r3, r3, #24
 8004d60:	0010      	movs	r0, r2
 8004d62:	0205      	lsls	r5, r0, #8
 8004d64:	431d      	orrs	r5, r3
 8004d66:	000b      	movs	r3, r1
 8004d68:	021c      	lsls	r4, r3, #8
 8004d6a:	69fb      	ldr	r3, [r7, #28]
 8004d6c:	685b      	ldr	r3, [r3, #4]
 8004d6e:	085b      	lsrs	r3, r3, #1
 8004d70:	60bb      	str	r3, [r7, #8]
 8004d72:	2300      	movs	r3, #0
 8004d74:	60fb      	str	r3, [r7, #12]
 8004d76:	68b8      	ldr	r0, [r7, #8]
 8004d78:	68f9      	ldr	r1, [r7, #12]
 8004d7a:	1900      	adds	r0, r0, r4
 8004d7c:	4169      	adcs	r1, r5
 8004d7e:	69fb      	ldr	r3, [r7, #28]
 8004d80:	685b      	ldr	r3, [r3, #4]
 8004d82:	603b      	str	r3, [r7, #0]
 8004d84:	2300      	movs	r3, #0
 8004d86:	607b      	str	r3, [r7, #4]
 8004d88:	683a      	ldr	r2, [r7, #0]
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	f7fb fa64 	bl	8000258 <__aeabi_uldivmod>
 8004d90:	0002      	movs	r2, r0
 8004d92:	000b      	movs	r3, r1
 8004d94:	0013      	movs	r3, r2
 8004d96:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004d98:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004d9a:	23c0      	movs	r3, #192	; 0xc0
 8004d9c:	009b      	lsls	r3, r3, #2
 8004d9e:	429a      	cmp	r2, r3
 8004da0:	d309      	bcc.n	8004db6 <UART_SetConfig+0x332>
 8004da2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004da4:	2380      	movs	r3, #128	; 0x80
 8004da6:	035b      	lsls	r3, r3, #13
 8004da8:	429a      	cmp	r2, r3
 8004daa:	d204      	bcs.n	8004db6 <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 8004dac:	69fb      	ldr	r3, [r7, #28]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004db2:	60da      	str	r2, [r3, #12]
 8004db4:	e0eb      	b.n	8004f8e <UART_SetConfig+0x50a>
        }
        else
        {
          ret = HAL_ERROR;
 8004db6:	231a      	movs	r3, #26
 8004db8:	2218      	movs	r2, #24
 8004dba:	189b      	adds	r3, r3, r2
 8004dbc:	19db      	adds	r3, r3, r7
 8004dbe:	2201      	movs	r2, #1
 8004dc0:	701a      	strb	r2, [r3, #0]
 8004dc2:	e0e4      	b.n	8004f8e <UART_SetConfig+0x50a>
 8004dc4:	efff69f3 	.word	0xefff69f3
 8004dc8:	ffffcfff 	.word	0xffffcfff
 8004dcc:	40004800 	.word	0x40004800
 8004dd0:	fffff4ff 	.word	0xfffff4ff
 8004dd4:	40013800 	.word	0x40013800
 8004dd8:	40021000 	.word	0x40021000
 8004ddc:	40004400 	.word	0x40004400
 8004de0:	40004c00 	.word	0x40004c00
 8004de4:	40005000 	.word	0x40005000
 8004de8:	003d0900 	.word	0x003d0900
 8004dec:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004df0:	69fb      	ldr	r3, [r7, #28]
 8004df2:	69da      	ldr	r2, [r3, #28]
 8004df4:	2380      	movs	r3, #128	; 0x80
 8004df6:	021b      	lsls	r3, r3, #8
 8004df8:	429a      	cmp	r2, r3
 8004dfa:	d000      	beq.n	8004dfe <UART_SetConfig+0x37a>
 8004dfc:	e070      	b.n	8004ee0 <UART_SetConfig+0x45c>
  {
    switch (clocksource)
 8004dfe:	231b      	movs	r3, #27
 8004e00:	2218      	movs	r2, #24
 8004e02:	189b      	adds	r3, r3, r2
 8004e04:	19db      	adds	r3, r3, r7
 8004e06:	781b      	ldrb	r3, [r3, #0]
 8004e08:	2b08      	cmp	r3, #8
 8004e0a:	d822      	bhi.n	8004e52 <UART_SetConfig+0x3ce>
 8004e0c:	009a      	lsls	r2, r3, #2
 8004e0e:	4b67      	ldr	r3, [pc, #412]	; (8004fac <UART_SetConfig+0x528>)
 8004e10:	18d3      	adds	r3, r2, r3
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e16:	f7fe fde9 	bl	80039ec <HAL_RCC_GetPCLK1Freq>
 8004e1a:	0003      	movs	r3, r0
 8004e1c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004e1e:	e021      	b.n	8004e64 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004e20:	f7fe fdfa 	bl	8003a18 <HAL_RCC_GetPCLK2Freq>
 8004e24:	0003      	movs	r3, r0
 8004e26:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004e28:	e01c      	b.n	8004e64 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004e2a:	4b61      	ldr	r3, [pc, #388]	; (8004fb0 <UART_SetConfig+0x52c>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	2210      	movs	r2, #16
 8004e30:	4013      	ands	r3, r2
 8004e32:	d002      	beq.n	8004e3a <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8004e34:	4b5f      	ldr	r3, [pc, #380]	; (8004fb4 <UART_SetConfig+0x530>)
 8004e36:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004e38:	e014      	b.n	8004e64 <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 8004e3a:	4b5f      	ldr	r3, [pc, #380]	; (8004fb8 <UART_SetConfig+0x534>)
 8004e3c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004e3e:	e011      	b.n	8004e64 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e40:	f7fe fd24 	bl	800388c <HAL_RCC_GetSysClockFreq>
 8004e44:	0003      	movs	r3, r0
 8004e46:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004e48:	e00c      	b.n	8004e64 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e4a:	2380      	movs	r3, #128	; 0x80
 8004e4c:	021b      	lsls	r3, r3, #8
 8004e4e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004e50:	e008      	b.n	8004e64 <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 8004e52:	2300      	movs	r3, #0
 8004e54:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8004e56:	231a      	movs	r3, #26
 8004e58:	2218      	movs	r2, #24
 8004e5a:	189b      	adds	r3, r3, r2
 8004e5c:	19db      	adds	r3, r3, r7
 8004e5e:	2201      	movs	r2, #1
 8004e60:	701a      	strb	r2, [r3, #0]
        break;
 8004e62:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004e64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d100      	bne.n	8004e6c <UART_SetConfig+0x3e8>
 8004e6a:	e090      	b.n	8004f8e <UART_SetConfig+0x50a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004e6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e6e:	005a      	lsls	r2, r3, #1
 8004e70:	69fb      	ldr	r3, [r7, #28]
 8004e72:	685b      	ldr	r3, [r3, #4]
 8004e74:	085b      	lsrs	r3, r3, #1
 8004e76:	18d2      	adds	r2, r2, r3
 8004e78:	69fb      	ldr	r3, [r7, #28]
 8004e7a:	685b      	ldr	r3, [r3, #4]
 8004e7c:	0019      	movs	r1, r3
 8004e7e:	0010      	movs	r0, r2
 8004e80:	f7fb f95e 	bl	8000140 <__udivsi3>
 8004e84:	0003      	movs	r3, r0
 8004e86:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e8a:	2b0f      	cmp	r3, #15
 8004e8c:	d921      	bls.n	8004ed2 <UART_SetConfig+0x44e>
 8004e8e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004e90:	2380      	movs	r3, #128	; 0x80
 8004e92:	025b      	lsls	r3, r3, #9
 8004e94:	429a      	cmp	r2, r3
 8004e96:	d21c      	bcs.n	8004ed2 <UART_SetConfig+0x44e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004e98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e9a:	b29a      	uxth	r2, r3
 8004e9c:	200e      	movs	r0, #14
 8004e9e:	2418      	movs	r4, #24
 8004ea0:	1903      	adds	r3, r0, r4
 8004ea2:	19db      	adds	r3, r3, r7
 8004ea4:	210f      	movs	r1, #15
 8004ea6:	438a      	bics	r2, r1
 8004ea8:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004eaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eac:	085b      	lsrs	r3, r3, #1
 8004eae:	b29b      	uxth	r3, r3
 8004eb0:	2207      	movs	r2, #7
 8004eb2:	4013      	ands	r3, r2
 8004eb4:	b299      	uxth	r1, r3
 8004eb6:	1903      	adds	r3, r0, r4
 8004eb8:	19db      	adds	r3, r3, r7
 8004eba:	1902      	adds	r2, r0, r4
 8004ebc:	19d2      	adds	r2, r2, r7
 8004ebe:	8812      	ldrh	r2, [r2, #0]
 8004ec0:	430a      	orrs	r2, r1
 8004ec2:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004ec4:	69fb      	ldr	r3, [r7, #28]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	1902      	adds	r2, r0, r4
 8004eca:	19d2      	adds	r2, r2, r7
 8004ecc:	8812      	ldrh	r2, [r2, #0]
 8004ece:	60da      	str	r2, [r3, #12]
 8004ed0:	e05d      	b.n	8004f8e <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 8004ed2:	231a      	movs	r3, #26
 8004ed4:	2218      	movs	r2, #24
 8004ed6:	189b      	adds	r3, r3, r2
 8004ed8:	19db      	adds	r3, r3, r7
 8004eda:	2201      	movs	r2, #1
 8004edc:	701a      	strb	r2, [r3, #0]
 8004ede:	e056      	b.n	8004f8e <UART_SetConfig+0x50a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004ee0:	231b      	movs	r3, #27
 8004ee2:	2218      	movs	r2, #24
 8004ee4:	189b      	adds	r3, r3, r2
 8004ee6:	19db      	adds	r3, r3, r7
 8004ee8:	781b      	ldrb	r3, [r3, #0]
 8004eea:	2b08      	cmp	r3, #8
 8004eec:	d822      	bhi.n	8004f34 <UART_SetConfig+0x4b0>
 8004eee:	009a      	lsls	r2, r3, #2
 8004ef0:	4b32      	ldr	r3, [pc, #200]	; (8004fbc <UART_SetConfig+0x538>)
 8004ef2:	18d3      	adds	r3, r2, r3
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ef8:	f7fe fd78 	bl	80039ec <HAL_RCC_GetPCLK1Freq>
 8004efc:	0003      	movs	r3, r0
 8004efe:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004f00:	e021      	b.n	8004f46 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004f02:	f7fe fd89 	bl	8003a18 <HAL_RCC_GetPCLK2Freq>
 8004f06:	0003      	movs	r3, r0
 8004f08:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004f0a:	e01c      	b.n	8004f46 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004f0c:	4b28      	ldr	r3, [pc, #160]	; (8004fb0 <UART_SetConfig+0x52c>)
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	2210      	movs	r2, #16
 8004f12:	4013      	ands	r3, r2
 8004f14:	d002      	beq.n	8004f1c <UART_SetConfig+0x498>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8004f16:	4b27      	ldr	r3, [pc, #156]	; (8004fb4 <UART_SetConfig+0x530>)
 8004f18:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004f1a:	e014      	b.n	8004f46 <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 8004f1c:	4b26      	ldr	r3, [pc, #152]	; (8004fb8 <UART_SetConfig+0x534>)
 8004f1e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004f20:	e011      	b.n	8004f46 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f22:	f7fe fcb3 	bl	800388c <HAL_RCC_GetSysClockFreq>
 8004f26:	0003      	movs	r3, r0
 8004f28:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004f2a:	e00c      	b.n	8004f46 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f2c:	2380      	movs	r3, #128	; 0x80
 8004f2e:	021b      	lsls	r3, r3, #8
 8004f30:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004f32:	e008      	b.n	8004f46 <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 8004f34:	2300      	movs	r3, #0
 8004f36:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8004f38:	231a      	movs	r3, #26
 8004f3a:	2218      	movs	r2, #24
 8004f3c:	189b      	adds	r3, r3, r2
 8004f3e:	19db      	adds	r3, r3, r7
 8004f40:	2201      	movs	r2, #1
 8004f42:	701a      	strb	r2, [r3, #0]
        break;
 8004f44:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8004f46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d020      	beq.n	8004f8e <UART_SetConfig+0x50a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004f4c:	69fb      	ldr	r3, [r7, #28]
 8004f4e:	685b      	ldr	r3, [r3, #4]
 8004f50:	085a      	lsrs	r2, r3, #1
 8004f52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f54:	18d2      	adds	r2, r2, r3
 8004f56:	69fb      	ldr	r3, [r7, #28]
 8004f58:	685b      	ldr	r3, [r3, #4]
 8004f5a:	0019      	movs	r1, r3
 8004f5c:	0010      	movs	r0, r2
 8004f5e:	f7fb f8ef 	bl	8000140 <__udivsi3>
 8004f62:	0003      	movs	r3, r0
 8004f64:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004f66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f68:	2b0f      	cmp	r3, #15
 8004f6a:	d90a      	bls.n	8004f82 <UART_SetConfig+0x4fe>
 8004f6c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f6e:	2380      	movs	r3, #128	; 0x80
 8004f70:	025b      	lsls	r3, r3, #9
 8004f72:	429a      	cmp	r2, r3
 8004f74:	d205      	bcs.n	8004f82 <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004f76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f78:	b29a      	uxth	r2, r3
 8004f7a:	69fb      	ldr	r3, [r7, #28]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	60da      	str	r2, [r3, #12]
 8004f80:	e005      	b.n	8004f8e <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 8004f82:	231a      	movs	r3, #26
 8004f84:	2218      	movs	r2, #24
 8004f86:	189b      	adds	r3, r3, r2
 8004f88:	19db      	adds	r3, r3, r7
 8004f8a:	2201      	movs	r2, #1
 8004f8c:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004f8e:	69fb      	ldr	r3, [r7, #28]
 8004f90:	2200      	movs	r2, #0
 8004f92:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004f94:	69fb      	ldr	r3, [r7, #28]
 8004f96:	2200      	movs	r2, #0
 8004f98:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004f9a:	231a      	movs	r3, #26
 8004f9c:	2218      	movs	r2, #24
 8004f9e:	189b      	adds	r3, r3, r2
 8004fa0:	19db      	adds	r3, r3, r7
 8004fa2:	781b      	ldrb	r3, [r3, #0]
}
 8004fa4:	0018      	movs	r0, r3
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	b00e      	add	sp, #56	; 0x38
 8004faa:	bdb0      	pop	{r4, r5, r7, pc}
 8004fac:	08007170 	.word	0x08007170
 8004fb0:	40021000 	.word	0x40021000
 8004fb4:	003d0900 	.word	0x003d0900
 8004fb8:	00f42400 	.word	0x00f42400
 8004fbc:	08007194 	.word	0x08007194

08004fc0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b082      	sub	sp, #8
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fcc:	2201      	movs	r2, #1
 8004fce:	4013      	ands	r3, r2
 8004fd0:	d00b      	beq.n	8004fea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	685b      	ldr	r3, [r3, #4]
 8004fd8:	4a4a      	ldr	r2, [pc, #296]	; (8005104 <UART_AdvFeatureConfig+0x144>)
 8004fda:	4013      	ands	r3, r2
 8004fdc:	0019      	movs	r1, r3
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	430a      	orrs	r2, r1
 8004fe8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fee:	2202      	movs	r2, #2
 8004ff0:	4013      	ands	r3, r2
 8004ff2:	d00b      	beq.n	800500c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	685b      	ldr	r3, [r3, #4]
 8004ffa:	4a43      	ldr	r2, [pc, #268]	; (8005108 <UART_AdvFeatureConfig+0x148>)
 8004ffc:	4013      	ands	r3, r2
 8004ffe:	0019      	movs	r1, r3
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	430a      	orrs	r2, r1
 800500a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005010:	2204      	movs	r2, #4
 8005012:	4013      	ands	r3, r2
 8005014:	d00b      	beq.n	800502e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	685b      	ldr	r3, [r3, #4]
 800501c:	4a3b      	ldr	r2, [pc, #236]	; (800510c <UART_AdvFeatureConfig+0x14c>)
 800501e:	4013      	ands	r3, r2
 8005020:	0019      	movs	r1, r3
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	430a      	orrs	r2, r1
 800502c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005032:	2208      	movs	r2, #8
 8005034:	4013      	ands	r3, r2
 8005036:	d00b      	beq.n	8005050 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	685b      	ldr	r3, [r3, #4]
 800503e:	4a34      	ldr	r2, [pc, #208]	; (8005110 <UART_AdvFeatureConfig+0x150>)
 8005040:	4013      	ands	r3, r2
 8005042:	0019      	movs	r1, r3
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	430a      	orrs	r2, r1
 800504e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005054:	2210      	movs	r2, #16
 8005056:	4013      	ands	r3, r2
 8005058:	d00b      	beq.n	8005072 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	689b      	ldr	r3, [r3, #8]
 8005060:	4a2c      	ldr	r2, [pc, #176]	; (8005114 <UART_AdvFeatureConfig+0x154>)
 8005062:	4013      	ands	r3, r2
 8005064:	0019      	movs	r1, r3
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	430a      	orrs	r2, r1
 8005070:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005076:	2220      	movs	r2, #32
 8005078:	4013      	ands	r3, r2
 800507a:	d00b      	beq.n	8005094 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	689b      	ldr	r3, [r3, #8]
 8005082:	4a25      	ldr	r2, [pc, #148]	; (8005118 <UART_AdvFeatureConfig+0x158>)
 8005084:	4013      	ands	r3, r2
 8005086:	0019      	movs	r1, r3
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	430a      	orrs	r2, r1
 8005092:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005098:	2240      	movs	r2, #64	; 0x40
 800509a:	4013      	ands	r3, r2
 800509c:	d01d      	beq.n	80050da <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	685b      	ldr	r3, [r3, #4]
 80050a4:	4a1d      	ldr	r2, [pc, #116]	; (800511c <UART_AdvFeatureConfig+0x15c>)
 80050a6:	4013      	ands	r3, r2
 80050a8:	0019      	movs	r1, r3
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	430a      	orrs	r2, r1
 80050b4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80050ba:	2380      	movs	r3, #128	; 0x80
 80050bc:	035b      	lsls	r3, r3, #13
 80050be:	429a      	cmp	r2, r3
 80050c0:	d10b      	bne.n	80050da <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	685b      	ldr	r3, [r3, #4]
 80050c8:	4a15      	ldr	r2, [pc, #84]	; (8005120 <UART_AdvFeatureConfig+0x160>)
 80050ca:	4013      	ands	r3, r2
 80050cc:	0019      	movs	r1, r3
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	430a      	orrs	r2, r1
 80050d8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050de:	2280      	movs	r2, #128	; 0x80
 80050e0:	4013      	ands	r3, r2
 80050e2:	d00b      	beq.n	80050fc <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	685b      	ldr	r3, [r3, #4]
 80050ea:	4a0e      	ldr	r2, [pc, #56]	; (8005124 <UART_AdvFeatureConfig+0x164>)
 80050ec:	4013      	ands	r3, r2
 80050ee:	0019      	movs	r1, r3
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	430a      	orrs	r2, r1
 80050fa:	605a      	str	r2, [r3, #4]
  }
}
 80050fc:	46c0      	nop			; (mov r8, r8)
 80050fe:	46bd      	mov	sp, r7
 8005100:	b002      	add	sp, #8
 8005102:	bd80      	pop	{r7, pc}
 8005104:	fffdffff 	.word	0xfffdffff
 8005108:	fffeffff 	.word	0xfffeffff
 800510c:	fffbffff 	.word	0xfffbffff
 8005110:	ffff7fff 	.word	0xffff7fff
 8005114:	ffffefff 	.word	0xffffefff
 8005118:	ffffdfff 	.word	0xffffdfff
 800511c:	ffefffff 	.word	0xffefffff
 8005120:	ff9fffff 	.word	0xff9fffff
 8005124:	fff7ffff 	.word	0xfff7ffff

08005128 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005128:	b580      	push	{r7, lr}
 800512a:	b092      	sub	sp, #72	; 0x48
 800512c:	af02      	add	r7, sp, #8
 800512e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2284      	movs	r2, #132	; 0x84
 8005134:	2100      	movs	r1, #0
 8005136:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005138:	f7fd f8d0 	bl	80022dc <HAL_GetTick>
 800513c:	0003      	movs	r3, r0
 800513e:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	2208      	movs	r2, #8
 8005148:	4013      	ands	r3, r2
 800514a:	2b08      	cmp	r3, #8
 800514c:	d12c      	bne.n	80051a8 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800514e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005150:	2280      	movs	r2, #128	; 0x80
 8005152:	0391      	lsls	r1, r2, #14
 8005154:	6878      	ldr	r0, [r7, #4]
 8005156:	4a46      	ldr	r2, [pc, #280]	; (8005270 <UART_CheckIdleState+0x148>)
 8005158:	9200      	str	r2, [sp, #0]
 800515a:	2200      	movs	r2, #0
 800515c:	f000 f88c 	bl	8005278 <UART_WaitOnFlagUntilTimeout>
 8005160:	1e03      	subs	r3, r0, #0
 8005162:	d021      	beq.n	80051a8 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005164:	f3ef 8310 	mrs	r3, PRIMASK
 8005168:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800516a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800516c:	63bb      	str	r3, [r7, #56]	; 0x38
 800516e:	2301      	movs	r3, #1
 8005170:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005174:	f383 8810 	msr	PRIMASK, r3
}
 8005178:	46c0      	nop			; (mov r8, r8)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	681a      	ldr	r2, [r3, #0]
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	2180      	movs	r1, #128	; 0x80
 8005186:	438a      	bics	r2, r1
 8005188:	601a      	str	r2, [r3, #0]
 800518a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800518c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800518e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005190:	f383 8810 	msr	PRIMASK, r3
}
 8005194:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2220      	movs	r2, #32
 800519a:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2278      	movs	r2, #120	; 0x78
 80051a0:	2100      	movs	r1, #0
 80051a2:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80051a4:	2303      	movs	r3, #3
 80051a6:	e05f      	b.n	8005268 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	2204      	movs	r2, #4
 80051b0:	4013      	ands	r3, r2
 80051b2:	2b04      	cmp	r3, #4
 80051b4:	d146      	bne.n	8005244 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80051b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051b8:	2280      	movs	r2, #128	; 0x80
 80051ba:	03d1      	lsls	r1, r2, #15
 80051bc:	6878      	ldr	r0, [r7, #4]
 80051be:	4a2c      	ldr	r2, [pc, #176]	; (8005270 <UART_CheckIdleState+0x148>)
 80051c0:	9200      	str	r2, [sp, #0]
 80051c2:	2200      	movs	r2, #0
 80051c4:	f000 f858 	bl	8005278 <UART_WaitOnFlagUntilTimeout>
 80051c8:	1e03      	subs	r3, r0, #0
 80051ca:	d03b      	beq.n	8005244 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80051cc:	f3ef 8310 	mrs	r3, PRIMASK
 80051d0:	60fb      	str	r3, [r7, #12]
  return(result);
 80051d2:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80051d4:	637b      	str	r3, [r7, #52]	; 0x34
 80051d6:	2301      	movs	r3, #1
 80051d8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051da:	693b      	ldr	r3, [r7, #16]
 80051dc:	f383 8810 	msr	PRIMASK, r3
}
 80051e0:	46c0      	nop			; (mov r8, r8)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	681a      	ldr	r2, [r3, #0]
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	4921      	ldr	r1, [pc, #132]	; (8005274 <UART_CheckIdleState+0x14c>)
 80051ee:	400a      	ands	r2, r1
 80051f0:	601a      	str	r2, [r3, #0]
 80051f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051f4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051f6:	697b      	ldr	r3, [r7, #20]
 80051f8:	f383 8810 	msr	PRIMASK, r3
}
 80051fc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80051fe:	f3ef 8310 	mrs	r3, PRIMASK
 8005202:	61bb      	str	r3, [r7, #24]
  return(result);
 8005204:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005206:	633b      	str	r3, [r7, #48]	; 0x30
 8005208:	2301      	movs	r3, #1
 800520a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800520c:	69fb      	ldr	r3, [r7, #28]
 800520e:	f383 8810 	msr	PRIMASK, r3
}
 8005212:	46c0      	nop			; (mov r8, r8)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	689a      	ldr	r2, [r3, #8]
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	2101      	movs	r1, #1
 8005220:	438a      	bics	r2, r1
 8005222:	609a      	str	r2, [r3, #8]
 8005224:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005226:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005228:	6a3b      	ldr	r3, [r7, #32]
 800522a:	f383 8810 	msr	PRIMASK, r3
}
 800522e:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2280      	movs	r2, #128	; 0x80
 8005234:	2120      	movs	r1, #32
 8005236:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2278      	movs	r2, #120	; 0x78
 800523c:	2100      	movs	r1, #0
 800523e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005240:	2303      	movs	r3, #3
 8005242:	e011      	b.n	8005268 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2220      	movs	r2, #32
 8005248:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2280      	movs	r2, #128	; 0x80
 800524e:	2120      	movs	r1, #32
 8005250:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	2200      	movs	r2, #0
 8005256:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2200      	movs	r2, #0
 800525c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2278      	movs	r2, #120	; 0x78
 8005262:	2100      	movs	r1, #0
 8005264:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005266:	2300      	movs	r3, #0
}
 8005268:	0018      	movs	r0, r3
 800526a:	46bd      	mov	sp, r7
 800526c:	b010      	add	sp, #64	; 0x40
 800526e:	bd80      	pop	{r7, pc}
 8005270:	01ffffff 	.word	0x01ffffff
 8005274:	fffffedf 	.word	0xfffffedf

08005278 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005278:	b580      	push	{r7, lr}
 800527a:	b084      	sub	sp, #16
 800527c:	af00      	add	r7, sp, #0
 800527e:	60f8      	str	r0, [r7, #12]
 8005280:	60b9      	str	r1, [r7, #8]
 8005282:	603b      	str	r3, [r7, #0]
 8005284:	1dfb      	adds	r3, r7, #7
 8005286:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005288:	e04b      	b.n	8005322 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800528a:	69bb      	ldr	r3, [r7, #24]
 800528c:	3301      	adds	r3, #1
 800528e:	d048      	beq.n	8005322 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005290:	f7fd f824 	bl	80022dc <HAL_GetTick>
 8005294:	0002      	movs	r2, r0
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	1ad3      	subs	r3, r2, r3
 800529a:	69ba      	ldr	r2, [r7, #24]
 800529c:	429a      	cmp	r2, r3
 800529e:	d302      	bcc.n	80052a6 <UART_WaitOnFlagUntilTimeout+0x2e>
 80052a0:	69bb      	ldr	r3, [r7, #24]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d101      	bne.n	80052aa <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80052a6:	2303      	movs	r3, #3
 80052a8:	e04b      	b.n	8005342 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	2204      	movs	r2, #4
 80052b2:	4013      	ands	r3, r2
 80052b4:	d035      	beq.n	8005322 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	69db      	ldr	r3, [r3, #28]
 80052bc:	2208      	movs	r2, #8
 80052be:	4013      	ands	r3, r2
 80052c0:	2b08      	cmp	r3, #8
 80052c2:	d111      	bne.n	80052e8 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	2208      	movs	r2, #8
 80052ca:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	0018      	movs	r0, r3
 80052d0:	f000 f906 	bl	80054e0 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	2284      	movs	r2, #132	; 0x84
 80052d8:	2108      	movs	r1, #8
 80052da:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	2278      	movs	r2, #120	; 0x78
 80052e0:	2100      	movs	r1, #0
 80052e2:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 80052e4:	2301      	movs	r3, #1
 80052e6:	e02c      	b.n	8005342 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	69da      	ldr	r2, [r3, #28]
 80052ee:	2380      	movs	r3, #128	; 0x80
 80052f0:	011b      	lsls	r3, r3, #4
 80052f2:	401a      	ands	r2, r3
 80052f4:	2380      	movs	r3, #128	; 0x80
 80052f6:	011b      	lsls	r3, r3, #4
 80052f8:	429a      	cmp	r2, r3
 80052fa:	d112      	bne.n	8005322 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	2280      	movs	r2, #128	; 0x80
 8005302:	0112      	lsls	r2, r2, #4
 8005304:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	0018      	movs	r0, r3
 800530a:	f000 f8e9 	bl	80054e0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	2284      	movs	r2, #132	; 0x84
 8005312:	2120      	movs	r1, #32
 8005314:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	2278      	movs	r2, #120	; 0x78
 800531a:	2100      	movs	r1, #0
 800531c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800531e:	2303      	movs	r3, #3
 8005320:	e00f      	b.n	8005342 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	69db      	ldr	r3, [r3, #28]
 8005328:	68ba      	ldr	r2, [r7, #8]
 800532a:	4013      	ands	r3, r2
 800532c:	68ba      	ldr	r2, [r7, #8]
 800532e:	1ad3      	subs	r3, r2, r3
 8005330:	425a      	negs	r2, r3
 8005332:	4153      	adcs	r3, r2
 8005334:	b2db      	uxtb	r3, r3
 8005336:	001a      	movs	r2, r3
 8005338:	1dfb      	adds	r3, r7, #7
 800533a:	781b      	ldrb	r3, [r3, #0]
 800533c:	429a      	cmp	r2, r3
 800533e:	d0a4      	beq.n	800528a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005340:	2300      	movs	r3, #0
}
 8005342:	0018      	movs	r0, r3
 8005344:	46bd      	mov	sp, r7
 8005346:	b004      	add	sp, #16
 8005348:	bd80      	pop	{r7, pc}
	...

0800534c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800534c:	b580      	push	{r7, lr}
 800534e:	b090      	sub	sp, #64	; 0x40
 8005350:	af00      	add	r7, sp, #0
 8005352:	60f8      	str	r0, [r7, #12]
 8005354:	60b9      	str	r1, [r7, #8]
 8005356:	1dbb      	adds	r3, r7, #6
 8005358:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	68ba      	ldr	r2, [r7, #8]
 800535e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	1dba      	adds	r2, r7, #6
 8005364:	2158      	movs	r1, #88	; 0x58
 8005366:	8812      	ldrh	r2, [r2, #0]
 8005368:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	1dba      	adds	r2, r7, #6
 800536e:	215a      	movs	r1, #90	; 0x5a
 8005370:	8812      	ldrh	r2, [r2, #0]
 8005372:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	2200      	movs	r2, #0
 8005378:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	689a      	ldr	r2, [r3, #8]
 800537e:	2380      	movs	r3, #128	; 0x80
 8005380:	015b      	lsls	r3, r3, #5
 8005382:	429a      	cmp	r2, r3
 8005384:	d10d      	bne.n	80053a2 <UART_Start_Receive_IT+0x56>
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	691b      	ldr	r3, [r3, #16]
 800538a:	2b00      	cmp	r3, #0
 800538c:	d104      	bne.n	8005398 <UART_Start_Receive_IT+0x4c>
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	225c      	movs	r2, #92	; 0x5c
 8005392:	4950      	ldr	r1, [pc, #320]	; (80054d4 <UART_Start_Receive_IT+0x188>)
 8005394:	5299      	strh	r1, [r3, r2]
 8005396:	e02e      	b.n	80053f6 <UART_Start_Receive_IT+0xaa>
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	225c      	movs	r2, #92	; 0x5c
 800539c:	21ff      	movs	r1, #255	; 0xff
 800539e:	5299      	strh	r1, [r3, r2]
 80053a0:	e029      	b.n	80053f6 <UART_Start_Receive_IT+0xaa>
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	689b      	ldr	r3, [r3, #8]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d10d      	bne.n	80053c6 <UART_Start_Receive_IT+0x7a>
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	691b      	ldr	r3, [r3, #16]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d104      	bne.n	80053bc <UART_Start_Receive_IT+0x70>
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	225c      	movs	r2, #92	; 0x5c
 80053b6:	21ff      	movs	r1, #255	; 0xff
 80053b8:	5299      	strh	r1, [r3, r2]
 80053ba:	e01c      	b.n	80053f6 <UART_Start_Receive_IT+0xaa>
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	225c      	movs	r2, #92	; 0x5c
 80053c0:	217f      	movs	r1, #127	; 0x7f
 80053c2:	5299      	strh	r1, [r3, r2]
 80053c4:	e017      	b.n	80053f6 <UART_Start_Receive_IT+0xaa>
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	689a      	ldr	r2, [r3, #8]
 80053ca:	2380      	movs	r3, #128	; 0x80
 80053cc:	055b      	lsls	r3, r3, #21
 80053ce:	429a      	cmp	r2, r3
 80053d0:	d10d      	bne.n	80053ee <UART_Start_Receive_IT+0xa2>
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	691b      	ldr	r3, [r3, #16]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d104      	bne.n	80053e4 <UART_Start_Receive_IT+0x98>
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	225c      	movs	r2, #92	; 0x5c
 80053de:	217f      	movs	r1, #127	; 0x7f
 80053e0:	5299      	strh	r1, [r3, r2]
 80053e2:	e008      	b.n	80053f6 <UART_Start_Receive_IT+0xaa>
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	225c      	movs	r2, #92	; 0x5c
 80053e8:	213f      	movs	r1, #63	; 0x3f
 80053ea:	5299      	strh	r1, [r3, r2]
 80053ec:	e003      	b.n	80053f6 <UART_Start_Receive_IT+0xaa>
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	225c      	movs	r2, #92	; 0x5c
 80053f2:	2100      	movs	r1, #0
 80053f4:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	2284      	movs	r2, #132	; 0x84
 80053fa:	2100      	movs	r1, #0
 80053fc:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	2280      	movs	r2, #128	; 0x80
 8005402:	2122      	movs	r1, #34	; 0x22
 8005404:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005406:	f3ef 8310 	mrs	r3, PRIMASK
 800540a:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800540c:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800540e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005410:	2301      	movs	r3, #1
 8005412:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005414:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005416:	f383 8810 	msr	PRIMASK, r3
}
 800541a:	46c0      	nop			; (mov r8, r8)
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	689a      	ldr	r2, [r3, #8]
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	2101      	movs	r1, #1
 8005428:	430a      	orrs	r2, r1
 800542a:	609a      	str	r2, [r3, #8]
 800542c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800542e:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005430:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005432:	f383 8810 	msr	PRIMASK, r3
}
 8005436:	46c0      	nop			; (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	689a      	ldr	r2, [r3, #8]
 800543c:	2380      	movs	r3, #128	; 0x80
 800543e:	015b      	lsls	r3, r3, #5
 8005440:	429a      	cmp	r2, r3
 8005442:	d107      	bne.n	8005454 <UART_Start_Receive_IT+0x108>
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	691b      	ldr	r3, [r3, #16]
 8005448:	2b00      	cmp	r3, #0
 800544a:	d103      	bne.n	8005454 <UART_Start_Receive_IT+0x108>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	4a22      	ldr	r2, [pc, #136]	; (80054d8 <UART_Start_Receive_IT+0x18c>)
 8005450:	669a      	str	r2, [r3, #104]	; 0x68
 8005452:	e002      	b.n	800545a <UART_Start_Receive_IT+0x10e>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	4a21      	ldr	r2, [pc, #132]	; (80054dc <UART_Start_Receive_IT+0x190>)
 8005458:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	691b      	ldr	r3, [r3, #16]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d019      	beq.n	8005496 <UART_Start_Receive_IT+0x14a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005462:	f3ef 8310 	mrs	r3, PRIMASK
 8005466:	61fb      	str	r3, [r7, #28]
  return(result);
 8005468:	69fb      	ldr	r3, [r7, #28]
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800546a:	637b      	str	r3, [r7, #52]	; 0x34
 800546c:	2301      	movs	r3, #1
 800546e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005470:	6a3b      	ldr	r3, [r7, #32]
 8005472:	f383 8810 	msr	PRIMASK, r3
}
 8005476:	46c0      	nop			; (mov r8, r8)
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	681a      	ldr	r2, [r3, #0]
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	2190      	movs	r1, #144	; 0x90
 8005484:	0049      	lsls	r1, r1, #1
 8005486:	430a      	orrs	r2, r1
 8005488:	601a      	str	r2, [r3, #0]
 800548a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800548c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800548e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005490:	f383 8810 	msr	PRIMASK, r3
}
 8005494:	e018      	b.n	80054c8 <UART_Start_Receive_IT+0x17c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005496:	f3ef 8310 	mrs	r3, PRIMASK
 800549a:	613b      	str	r3, [r7, #16]
  return(result);
 800549c:	693b      	ldr	r3, [r7, #16]
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800549e:	63bb      	str	r3, [r7, #56]	; 0x38
 80054a0:	2301      	movs	r3, #1
 80054a2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054a4:	697b      	ldr	r3, [r7, #20]
 80054a6:	f383 8810 	msr	PRIMASK, r3
}
 80054aa:	46c0      	nop			; (mov r8, r8)
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	681a      	ldr	r2, [r3, #0]
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	2120      	movs	r1, #32
 80054b8:	430a      	orrs	r2, r1
 80054ba:	601a      	str	r2, [r3, #0]
 80054bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054be:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054c0:	69bb      	ldr	r3, [r7, #24]
 80054c2:	f383 8810 	msr	PRIMASK, r3
}
 80054c6:	46c0      	nop			; (mov r8, r8)
  }
  return HAL_OK;
 80054c8:	2300      	movs	r3, #0
}
 80054ca:	0018      	movs	r0, r3
 80054cc:	46bd      	mov	sp, r7
 80054ce:	b010      	add	sp, #64	; 0x40
 80054d0:	bd80      	pop	{r7, pc}
 80054d2:	46c0      	nop			; (mov r8, r8)
 80054d4:	000001ff 	.word	0x000001ff
 80054d8:	080057f1 	.word	0x080057f1
 80054dc:	0800562d 	.word	0x0800562d

080054e0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b08e      	sub	sp, #56	; 0x38
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80054e8:	f3ef 8310 	mrs	r3, PRIMASK
 80054ec:	617b      	str	r3, [r7, #20]
  return(result);
 80054ee:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80054f0:	637b      	str	r3, [r7, #52]	; 0x34
 80054f2:	2301      	movs	r3, #1
 80054f4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054f6:	69bb      	ldr	r3, [r7, #24]
 80054f8:	f383 8810 	msr	PRIMASK, r3
}
 80054fc:	46c0      	nop			; (mov r8, r8)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	681a      	ldr	r2, [r3, #0]
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	4926      	ldr	r1, [pc, #152]	; (80055a4 <UART_EndRxTransfer+0xc4>)
 800550a:	400a      	ands	r2, r1
 800550c:	601a      	str	r2, [r3, #0]
 800550e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005510:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005512:	69fb      	ldr	r3, [r7, #28]
 8005514:	f383 8810 	msr	PRIMASK, r3
}
 8005518:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800551a:	f3ef 8310 	mrs	r3, PRIMASK
 800551e:	623b      	str	r3, [r7, #32]
  return(result);
 8005520:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005522:	633b      	str	r3, [r7, #48]	; 0x30
 8005524:	2301      	movs	r3, #1
 8005526:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800552a:	f383 8810 	msr	PRIMASK, r3
}
 800552e:	46c0      	nop			; (mov r8, r8)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	689a      	ldr	r2, [r3, #8]
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	2101      	movs	r1, #1
 800553c:	438a      	bics	r2, r1
 800553e:	609a      	str	r2, [r3, #8]
 8005540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005542:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005544:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005546:	f383 8810 	msr	PRIMASK, r3
}
 800554a:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005550:	2b01      	cmp	r3, #1
 8005552:	d118      	bne.n	8005586 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005554:	f3ef 8310 	mrs	r3, PRIMASK
 8005558:	60bb      	str	r3, [r7, #8]
  return(result);
 800555a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800555c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800555e:	2301      	movs	r3, #1
 8005560:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	f383 8810 	msr	PRIMASK, r3
}
 8005568:	46c0      	nop			; (mov r8, r8)
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	681a      	ldr	r2, [r3, #0]
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	2110      	movs	r1, #16
 8005576:	438a      	bics	r2, r1
 8005578:	601a      	str	r2, [r3, #0]
 800557a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800557c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800557e:	693b      	ldr	r3, [r7, #16]
 8005580:	f383 8810 	msr	PRIMASK, r3
}
 8005584:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	2280      	movs	r2, #128	; 0x80
 800558a:	2120      	movs	r1, #32
 800558c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	2200      	movs	r2, #0
 8005592:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2200      	movs	r2, #0
 8005598:	669a      	str	r2, [r3, #104]	; 0x68
}
 800559a:	46c0      	nop			; (mov r8, r8)
 800559c:	46bd      	mov	sp, r7
 800559e:	b00e      	add	sp, #56	; 0x38
 80055a0:	bd80      	pop	{r7, pc}
 80055a2:	46c0      	nop			; (mov r8, r8)
 80055a4:	fffffedf 	.word	0xfffffedf

080055a8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b084      	sub	sp, #16
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055b4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	225a      	movs	r2, #90	; 0x5a
 80055ba:	2100      	movs	r1, #0
 80055bc:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	2252      	movs	r2, #82	; 0x52
 80055c2:	2100      	movs	r1, #0
 80055c4:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	0018      	movs	r0, r3
 80055ca:	f7ff fa47 	bl	8004a5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80055ce:	46c0      	nop			; (mov r8, r8)
 80055d0:	46bd      	mov	sp, r7
 80055d2:	b004      	add	sp, #16
 80055d4:	bd80      	pop	{r7, pc}

080055d6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80055d6:	b580      	push	{r7, lr}
 80055d8:	b086      	sub	sp, #24
 80055da:	af00      	add	r7, sp, #0
 80055dc:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80055de:	f3ef 8310 	mrs	r3, PRIMASK
 80055e2:	60bb      	str	r3, [r7, #8]
  return(result);
 80055e4:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80055e6:	617b      	str	r3, [r7, #20]
 80055e8:	2301      	movs	r3, #1
 80055ea:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	f383 8810 	msr	PRIMASK, r3
}
 80055f2:	46c0      	nop			; (mov r8, r8)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	681a      	ldr	r2, [r3, #0]
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	2140      	movs	r1, #64	; 0x40
 8005600:	438a      	bics	r2, r1
 8005602:	601a      	str	r2, [r3, #0]
 8005604:	697b      	ldr	r3, [r7, #20]
 8005606:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005608:	693b      	ldr	r3, [r7, #16]
 800560a:	f383 8810 	msr	PRIMASK, r3
}
 800560e:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2220      	movs	r2, #32
 8005614:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	2200      	movs	r2, #0
 800561a:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	0018      	movs	r0, r3
 8005620:	f7ff fa14 	bl	8004a4c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005624:	46c0      	nop			; (mov r8, r8)
 8005626:	46bd      	mov	sp, r7
 8005628:	b006      	add	sp, #24
 800562a:	bd80      	pop	{r7, pc}

0800562c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800562c:	b580      	push	{r7, lr}
 800562e:	b094      	sub	sp, #80	; 0x50
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005634:	204e      	movs	r0, #78	; 0x4e
 8005636:	183b      	adds	r3, r7, r0
 8005638:	687a      	ldr	r2, [r7, #4]
 800563a:	215c      	movs	r1, #92	; 0x5c
 800563c:	5a52      	ldrh	r2, [r2, r1]
 800563e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2280      	movs	r2, #128	; 0x80
 8005644:	589b      	ldr	r3, [r3, r2]
 8005646:	2b22      	cmp	r3, #34	; 0x22
 8005648:	d000      	beq.n	800564c <UART_RxISR_8BIT+0x20>
 800564a:	e0bf      	b.n	80057cc <UART_RxISR_8BIT+0x1a0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005652:	214c      	movs	r1, #76	; 0x4c
 8005654:	187b      	adds	r3, r7, r1
 8005656:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005658:	187b      	adds	r3, r7, r1
 800565a:	881b      	ldrh	r3, [r3, #0]
 800565c:	b2da      	uxtb	r2, r3
 800565e:	183b      	adds	r3, r7, r0
 8005660:	881b      	ldrh	r3, [r3, #0]
 8005662:	b2d9      	uxtb	r1, r3
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005668:	400a      	ands	r2, r1
 800566a:	b2d2      	uxtb	r2, r2
 800566c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005672:	1c5a      	adds	r2, r3, #1
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	225a      	movs	r2, #90	; 0x5a
 800567c:	5a9b      	ldrh	r3, [r3, r2]
 800567e:	b29b      	uxth	r3, r3
 8005680:	3b01      	subs	r3, #1
 8005682:	b299      	uxth	r1, r3
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	225a      	movs	r2, #90	; 0x5a
 8005688:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	225a      	movs	r2, #90	; 0x5a
 800568e:	5a9b      	ldrh	r3, [r3, r2]
 8005690:	b29b      	uxth	r3, r3
 8005692:	2b00      	cmp	r3, #0
 8005694:	d000      	beq.n	8005698 <UART_RxISR_8BIT+0x6c>
 8005696:	e0a1      	b.n	80057dc <UART_RxISR_8BIT+0x1b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005698:	f3ef 8310 	mrs	r3, PRIMASK
 800569c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800569e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80056a0:	64bb      	str	r3, [r7, #72]	; 0x48
 80056a2:	2301      	movs	r3, #1
 80056a4:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056a8:	f383 8810 	msr	PRIMASK, r3
}
 80056ac:	46c0      	nop			; (mov r8, r8)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	681a      	ldr	r2, [r3, #0]
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	494a      	ldr	r1, [pc, #296]	; (80057e4 <UART_RxISR_8BIT+0x1b8>)
 80056ba:	400a      	ands	r2, r1
 80056bc:	601a      	str	r2, [r3, #0]
 80056be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80056c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056c4:	f383 8810 	msr	PRIMASK, r3
}
 80056c8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80056ca:	f3ef 8310 	mrs	r3, PRIMASK
 80056ce:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80056d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056d2:	647b      	str	r3, [r7, #68]	; 0x44
 80056d4:	2301      	movs	r3, #1
 80056d6:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056da:	f383 8810 	msr	PRIMASK, r3
}
 80056de:	46c0      	nop			; (mov r8, r8)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	689a      	ldr	r2, [r3, #8]
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	2101      	movs	r1, #1
 80056ec:	438a      	bics	r2, r1
 80056ee:	609a      	str	r2, [r3, #8]
 80056f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80056f2:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056f6:	f383 8810 	msr	PRIMASK, r3
}
 80056fa:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2280      	movs	r2, #128	; 0x80
 8005700:	2120      	movs	r1, #32
 8005702:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2200      	movs	r2, #0
 8005708:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	2200      	movs	r2, #0
 800570e:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	4a34      	ldr	r2, [pc, #208]	; (80057e8 <UART_RxISR_8BIT+0x1bc>)
 8005716:	4293      	cmp	r3, r2
 8005718:	d01f      	beq.n	800575a <UART_RxISR_8BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	685a      	ldr	r2, [r3, #4]
 8005720:	2380      	movs	r3, #128	; 0x80
 8005722:	041b      	lsls	r3, r3, #16
 8005724:	4013      	ands	r3, r2
 8005726:	d018      	beq.n	800575a <UART_RxISR_8BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005728:	f3ef 8310 	mrs	r3, PRIMASK
 800572c:	61bb      	str	r3, [r7, #24]
  return(result);
 800572e:	69bb      	ldr	r3, [r7, #24]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005730:	643b      	str	r3, [r7, #64]	; 0x40
 8005732:	2301      	movs	r3, #1
 8005734:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005736:	69fb      	ldr	r3, [r7, #28]
 8005738:	f383 8810 	msr	PRIMASK, r3
}
 800573c:	46c0      	nop			; (mov r8, r8)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	681a      	ldr	r2, [r3, #0]
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	4928      	ldr	r1, [pc, #160]	; (80057ec <UART_RxISR_8BIT+0x1c0>)
 800574a:	400a      	ands	r2, r1
 800574c:	601a      	str	r2, [r3, #0]
 800574e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005750:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005752:	6a3b      	ldr	r3, [r7, #32]
 8005754:	f383 8810 	msr	PRIMASK, r3
}
 8005758:	46c0      	nop			; (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800575e:	2b01      	cmp	r3, #1
 8005760:	d12f      	bne.n	80057c2 <UART_RxISR_8BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	2200      	movs	r2, #0
 8005766:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005768:	f3ef 8310 	mrs	r3, PRIMASK
 800576c:	60fb      	str	r3, [r7, #12]
  return(result);
 800576e:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005770:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005772:	2301      	movs	r3, #1
 8005774:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005776:	693b      	ldr	r3, [r7, #16]
 8005778:	f383 8810 	msr	PRIMASK, r3
}
 800577c:	46c0      	nop			; (mov r8, r8)
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	681a      	ldr	r2, [r3, #0]
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	2110      	movs	r1, #16
 800578a:	438a      	bics	r2, r1
 800578c:	601a      	str	r2, [r3, #0]
 800578e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005790:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005792:	697b      	ldr	r3, [r7, #20]
 8005794:	f383 8810 	msr	PRIMASK, r3
}
 8005798:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	69db      	ldr	r3, [r3, #28]
 80057a0:	2210      	movs	r2, #16
 80057a2:	4013      	ands	r3, r2
 80057a4:	2b10      	cmp	r3, #16
 80057a6:	d103      	bne.n	80057b0 <UART_RxISR_8BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	2210      	movs	r2, #16
 80057ae:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2258      	movs	r2, #88	; 0x58
 80057b4:	5a9a      	ldrh	r2, [r3, r2]
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	0011      	movs	r1, r2
 80057ba:	0018      	movs	r0, r3
 80057bc:	f7ff f956 	bl	8004a6c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80057c0:	e00c      	b.n	80057dc <UART_RxISR_8BIT+0x1b0>
        HAL_UART_RxCpltCallback(huart);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	0018      	movs	r0, r3
 80057c6:	f7fb fcc3 	bl	8001150 <HAL_UART_RxCpltCallback>
}
 80057ca:	e007      	b.n	80057dc <UART_RxISR_8BIT+0x1b0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	699a      	ldr	r2, [r3, #24]
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	2108      	movs	r1, #8
 80057d8:	430a      	orrs	r2, r1
 80057da:	619a      	str	r2, [r3, #24]
}
 80057dc:	46c0      	nop			; (mov r8, r8)
 80057de:	46bd      	mov	sp, r7
 80057e0:	b014      	add	sp, #80	; 0x50
 80057e2:	bd80      	pop	{r7, pc}
 80057e4:	fffffedf 	.word	0xfffffedf
 80057e8:	40004800 	.word	0x40004800
 80057ec:	fbffffff 	.word	0xfbffffff

080057f0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b094      	sub	sp, #80	; 0x50
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80057f8:	204e      	movs	r0, #78	; 0x4e
 80057fa:	183b      	adds	r3, r7, r0
 80057fc:	687a      	ldr	r2, [r7, #4]
 80057fe:	215c      	movs	r1, #92	; 0x5c
 8005800:	5a52      	ldrh	r2, [r2, r1]
 8005802:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2280      	movs	r2, #128	; 0x80
 8005808:	589b      	ldr	r3, [r3, r2]
 800580a:	2b22      	cmp	r3, #34	; 0x22
 800580c:	d000      	beq.n	8005810 <UART_RxISR_16BIT+0x20>
 800580e:	e0bf      	b.n	8005990 <UART_RxISR_16BIT+0x1a0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005816:	214c      	movs	r1, #76	; 0x4c
 8005818:	187b      	adds	r3, r7, r1
 800581a:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005820:	64bb      	str	r3, [r7, #72]	; 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 8005822:	187b      	adds	r3, r7, r1
 8005824:	183a      	adds	r2, r7, r0
 8005826:	881b      	ldrh	r3, [r3, #0]
 8005828:	8812      	ldrh	r2, [r2, #0]
 800582a:	4013      	ands	r3, r2
 800582c:	b29a      	uxth	r2, r3
 800582e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005830:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005836:	1c9a      	adds	r2, r3, #2
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	225a      	movs	r2, #90	; 0x5a
 8005840:	5a9b      	ldrh	r3, [r3, r2]
 8005842:	b29b      	uxth	r3, r3
 8005844:	3b01      	subs	r3, #1
 8005846:	b299      	uxth	r1, r3
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	225a      	movs	r2, #90	; 0x5a
 800584c:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	225a      	movs	r2, #90	; 0x5a
 8005852:	5a9b      	ldrh	r3, [r3, r2]
 8005854:	b29b      	uxth	r3, r3
 8005856:	2b00      	cmp	r3, #0
 8005858:	d000      	beq.n	800585c <UART_RxISR_16BIT+0x6c>
 800585a:	e0a1      	b.n	80059a0 <UART_RxISR_16BIT+0x1b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800585c:	f3ef 8310 	mrs	r3, PRIMASK
 8005860:	623b      	str	r3, [r7, #32]
  return(result);
 8005862:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005864:	647b      	str	r3, [r7, #68]	; 0x44
 8005866:	2301      	movs	r3, #1
 8005868:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800586a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800586c:	f383 8810 	msr	PRIMASK, r3
}
 8005870:	46c0      	nop			; (mov r8, r8)
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	681a      	ldr	r2, [r3, #0]
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	494a      	ldr	r1, [pc, #296]	; (80059a8 <UART_RxISR_16BIT+0x1b8>)
 800587e:	400a      	ands	r2, r1
 8005880:	601a      	str	r2, [r3, #0]
 8005882:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005884:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005888:	f383 8810 	msr	PRIMASK, r3
}
 800588c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800588e:	f3ef 8310 	mrs	r3, PRIMASK
 8005892:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8005894:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005896:	643b      	str	r3, [r7, #64]	; 0x40
 8005898:	2301      	movs	r3, #1
 800589a:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800589c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800589e:	f383 8810 	msr	PRIMASK, r3
}
 80058a2:	46c0      	nop			; (mov r8, r8)
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	689a      	ldr	r2, [r3, #8]
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	2101      	movs	r1, #1
 80058b0:	438a      	bics	r2, r1
 80058b2:	609a      	str	r2, [r3, #8]
 80058b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80058b6:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058ba:	f383 8810 	msr	PRIMASK, r3
}
 80058be:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2280      	movs	r2, #128	; 0x80
 80058c4:	2120      	movs	r1, #32
 80058c6:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2200      	movs	r2, #0
 80058cc:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	2200      	movs	r2, #0
 80058d2:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	4a34      	ldr	r2, [pc, #208]	; (80059ac <UART_RxISR_16BIT+0x1bc>)
 80058da:	4293      	cmp	r3, r2
 80058dc:	d01f      	beq.n	800591e <UART_RxISR_16BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	685a      	ldr	r2, [r3, #4]
 80058e4:	2380      	movs	r3, #128	; 0x80
 80058e6:	041b      	lsls	r3, r3, #16
 80058e8:	4013      	ands	r3, r2
 80058ea:	d018      	beq.n	800591e <UART_RxISR_16BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80058ec:	f3ef 8310 	mrs	r3, PRIMASK
 80058f0:	617b      	str	r3, [r7, #20]
  return(result);
 80058f2:	697b      	ldr	r3, [r7, #20]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80058f4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80058f6:	2301      	movs	r3, #1
 80058f8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058fa:	69bb      	ldr	r3, [r7, #24]
 80058fc:	f383 8810 	msr	PRIMASK, r3
}
 8005900:	46c0      	nop			; (mov r8, r8)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	681a      	ldr	r2, [r3, #0]
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	4928      	ldr	r1, [pc, #160]	; (80059b0 <UART_RxISR_16BIT+0x1c0>)
 800590e:	400a      	ands	r2, r1
 8005910:	601a      	str	r2, [r3, #0]
 8005912:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005914:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005916:	69fb      	ldr	r3, [r7, #28]
 8005918:	f383 8810 	msr	PRIMASK, r3
}
 800591c:	46c0      	nop			; (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005922:	2b01      	cmp	r3, #1
 8005924:	d12f      	bne.n	8005986 <UART_RxISR_16BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	2200      	movs	r2, #0
 800592a:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800592c:	f3ef 8310 	mrs	r3, PRIMASK
 8005930:	60bb      	str	r3, [r7, #8]
  return(result);
 8005932:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005934:	63bb      	str	r3, [r7, #56]	; 0x38
 8005936:	2301      	movs	r3, #1
 8005938:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	f383 8810 	msr	PRIMASK, r3
}
 8005940:	46c0      	nop			; (mov r8, r8)
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	681a      	ldr	r2, [r3, #0]
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	2110      	movs	r1, #16
 800594e:	438a      	bics	r2, r1
 8005950:	601a      	str	r2, [r3, #0]
 8005952:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005954:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005956:	693b      	ldr	r3, [r7, #16]
 8005958:	f383 8810 	msr	PRIMASK, r3
}
 800595c:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	69db      	ldr	r3, [r3, #28]
 8005964:	2210      	movs	r2, #16
 8005966:	4013      	ands	r3, r2
 8005968:	2b10      	cmp	r3, #16
 800596a:	d103      	bne.n	8005974 <UART_RxISR_16BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	2210      	movs	r2, #16
 8005972:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2258      	movs	r2, #88	; 0x58
 8005978:	5a9a      	ldrh	r2, [r3, r2]
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	0011      	movs	r1, r2
 800597e:	0018      	movs	r0, r3
 8005980:	f7ff f874 	bl	8004a6c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005984:	e00c      	b.n	80059a0 <UART_RxISR_16BIT+0x1b0>
        HAL_UART_RxCpltCallback(huart);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	0018      	movs	r0, r3
 800598a:	f7fb fbe1 	bl	8001150 <HAL_UART_RxCpltCallback>
}
 800598e:	e007      	b.n	80059a0 <UART_RxISR_16BIT+0x1b0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	699a      	ldr	r2, [r3, #24]
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	2108      	movs	r1, #8
 800599c:	430a      	orrs	r2, r1
 800599e:	619a      	str	r2, [r3, #24]
}
 80059a0:	46c0      	nop			; (mov r8, r8)
 80059a2:	46bd      	mov	sp, r7
 80059a4:	b014      	add	sp, #80	; 0x50
 80059a6:	bd80      	pop	{r7, pc}
 80059a8:	fffffedf 	.word	0xfffffedf
 80059ac:	40004800 	.word	0x40004800
 80059b0:	fbffffff 	.word	0xfbffffff

080059b4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b082      	sub	sp, #8
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80059bc:	46c0      	nop			; (mov r8, r8)
 80059be:	46bd      	mov	sp, r7
 80059c0:	b002      	add	sp, #8
 80059c2:	bd80      	pop	{r7, pc}

080059c4 <malloc>:
 80059c4:	b510      	push	{r4, lr}
 80059c6:	4b03      	ldr	r3, [pc, #12]	; (80059d4 <malloc+0x10>)
 80059c8:	0001      	movs	r1, r0
 80059ca:	6818      	ldr	r0, [r3, #0]
 80059cc:	f000 f830 	bl	8005a30 <_malloc_r>
 80059d0:	bd10      	pop	{r4, pc}
 80059d2:	46c0      	nop			; (mov r8, r8)
 80059d4:	20000074 	.word	0x20000074

080059d8 <free>:
 80059d8:	b510      	push	{r4, lr}
 80059da:	4b03      	ldr	r3, [pc, #12]	; (80059e8 <free+0x10>)
 80059dc:	0001      	movs	r1, r0
 80059de:	6818      	ldr	r0, [r3, #0]
 80059e0:	f000 fc54 	bl	800628c <_free_r>
 80059e4:	bd10      	pop	{r4, pc}
 80059e6:	46c0      	nop			; (mov r8, r8)
 80059e8:	20000074 	.word	0x20000074

080059ec <sbrk_aligned>:
 80059ec:	b570      	push	{r4, r5, r6, lr}
 80059ee:	4e0f      	ldr	r6, [pc, #60]	; (8005a2c <sbrk_aligned+0x40>)
 80059f0:	000d      	movs	r5, r1
 80059f2:	6831      	ldr	r1, [r6, #0]
 80059f4:	0004      	movs	r4, r0
 80059f6:	2900      	cmp	r1, #0
 80059f8:	d102      	bne.n	8005a00 <sbrk_aligned+0x14>
 80059fa:	f000 fbcd 	bl	8006198 <_sbrk_r>
 80059fe:	6030      	str	r0, [r6, #0]
 8005a00:	0029      	movs	r1, r5
 8005a02:	0020      	movs	r0, r4
 8005a04:	f000 fbc8 	bl	8006198 <_sbrk_r>
 8005a08:	1c43      	adds	r3, r0, #1
 8005a0a:	d00a      	beq.n	8005a22 <sbrk_aligned+0x36>
 8005a0c:	2303      	movs	r3, #3
 8005a0e:	1cc5      	adds	r5, r0, #3
 8005a10:	439d      	bics	r5, r3
 8005a12:	42a8      	cmp	r0, r5
 8005a14:	d007      	beq.n	8005a26 <sbrk_aligned+0x3a>
 8005a16:	1a29      	subs	r1, r5, r0
 8005a18:	0020      	movs	r0, r4
 8005a1a:	f000 fbbd 	bl	8006198 <_sbrk_r>
 8005a1e:	3001      	adds	r0, #1
 8005a20:	d101      	bne.n	8005a26 <sbrk_aligned+0x3a>
 8005a22:	2501      	movs	r5, #1
 8005a24:	426d      	negs	r5, r5
 8005a26:	0028      	movs	r0, r5
 8005a28:	bd70      	pop	{r4, r5, r6, pc}
 8005a2a:	46c0      	nop			; (mov r8, r8)
 8005a2c:	20000218 	.word	0x20000218

08005a30 <_malloc_r>:
 8005a30:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005a32:	2203      	movs	r2, #3
 8005a34:	1ccb      	adds	r3, r1, #3
 8005a36:	4393      	bics	r3, r2
 8005a38:	3308      	adds	r3, #8
 8005a3a:	0006      	movs	r6, r0
 8005a3c:	001f      	movs	r7, r3
 8005a3e:	2b0c      	cmp	r3, #12
 8005a40:	d238      	bcs.n	8005ab4 <_malloc_r+0x84>
 8005a42:	270c      	movs	r7, #12
 8005a44:	42b9      	cmp	r1, r7
 8005a46:	d837      	bhi.n	8005ab8 <_malloc_r+0x88>
 8005a48:	0030      	movs	r0, r6
 8005a4a:	f000 f873 	bl	8005b34 <__malloc_lock>
 8005a4e:	4b38      	ldr	r3, [pc, #224]	; (8005b30 <_malloc_r+0x100>)
 8005a50:	9300      	str	r3, [sp, #0]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	001c      	movs	r4, r3
 8005a56:	2c00      	cmp	r4, #0
 8005a58:	d133      	bne.n	8005ac2 <_malloc_r+0x92>
 8005a5a:	0039      	movs	r1, r7
 8005a5c:	0030      	movs	r0, r6
 8005a5e:	f7ff ffc5 	bl	80059ec <sbrk_aligned>
 8005a62:	0004      	movs	r4, r0
 8005a64:	1c43      	adds	r3, r0, #1
 8005a66:	d15e      	bne.n	8005b26 <_malloc_r+0xf6>
 8005a68:	9b00      	ldr	r3, [sp, #0]
 8005a6a:	681c      	ldr	r4, [r3, #0]
 8005a6c:	0025      	movs	r5, r4
 8005a6e:	2d00      	cmp	r5, #0
 8005a70:	d14e      	bne.n	8005b10 <_malloc_r+0xe0>
 8005a72:	2c00      	cmp	r4, #0
 8005a74:	d051      	beq.n	8005b1a <_malloc_r+0xea>
 8005a76:	6823      	ldr	r3, [r4, #0]
 8005a78:	0029      	movs	r1, r5
 8005a7a:	18e3      	adds	r3, r4, r3
 8005a7c:	0030      	movs	r0, r6
 8005a7e:	9301      	str	r3, [sp, #4]
 8005a80:	f000 fb8a 	bl	8006198 <_sbrk_r>
 8005a84:	9b01      	ldr	r3, [sp, #4]
 8005a86:	4283      	cmp	r3, r0
 8005a88:	d147      	bne.n	8005b1a <_malloc_r+0xea>
 8005a8a:	6823      	ldr	r3, [r4, #0]
 8005a8c:	0030      	movs	r0, r6
 8005a8e:	1aff      	subs	r7, r7, r3
 8005a90:	0039      	movs	r1, r7
 8005a92:	f7ff ffab 	bl	80059ec <sbrk_aligned>
 8005a96:	3001      	adds	r0, #1
 8005a98:	d03f      	beq.n	8005b1a <_malloc_r+0xea>
 8005a9a:	6823      	ldr	r3, [r4, #0]
 8005a9c:	19db      	adds	r3, r3, r7
 8005a9e:	6023      	str	r3, [r4, #0]
 8005aa0:	9b00      	ldr	r3, [sp, #0]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d040      	beq.n	8005b2a <_malloc_r+0xfa>
 8005aa8:	685a      	ldr	r2, [r3, #4]
 8005aaa:	42a2      	cmp	r2, r4
 8005aac:	d133      	bne.n	8005b16 <_malloc_r+0xe6>
 8005aae:	2200      	movs	r2, #0
 8005ab0:	605a      	str	r2, [r3, #4]
 8005ab2:	e014      	b.n	8005ade <_malloc_r+0xae>
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	dac5      	bge.n	8005a44 <_malloc_r+0x14>
 8005ab8:	230c      	movs	r3, #12
 8005aba:	2500      	movs	r5, #0
 8005abc:	6033      	str	r3, [r6, #0]
 8005abe:	0028      	movs	r0, r5
 8005ac0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005ac2:	6821      	ldr	r1, [r4, #0]
 8005ac4:	1bc9      	subs	r1, r1, r7
 8005ac6:	d420      	bmi.n	8005b0a <_malloc_r+0xda>
 8005ac8:	290b      	cmp	r1, #11
 8005aca:	d918      	bls.n	8005afe <_malloc_r+0xce>
 8005acc:	19e2      	adds	r2, r4, r7
 8005ace:	6027      	str	r7, [r4, #0]
 8005ad0:	42a3      	cmp	r3, r4
 8005ad2:	d112      	bne.n	8005afa <_malloc_r+0xca>
 8005ad4:	9b00      	ldr	r3, [sp, #0]
 8005ad6:	601a      	str	r2, [r3, #0]
 8005ad8:	6863      	ldr	r3, [r4, #4]
 8005ada:	6011      	str	r1, [r2, #0]
 8005adc:	6053      	str	r3, [r2, #4]
 8005ade:	0030      	movs	r0, r6
 8005ae0:	0025      	movs	r5, r4
 8005ae2:	f000 f82f 	bl	8005b44 <__malloc_unlock>
 8005ae6:	2207      	movs	r2, #7
 8005ae8:	350b      	adds	r5, #11
 8005aea:	1d23      	adds	r3, r4, #4
 8005aec:	4395      	bics	r5, r2
 8005aee:	1aea      	subs	r2, r5, r3
 8005af0:	429d      	cmp	r5, r3
 8005af2:	d0e4      	beq.n	8005abe <_malloc_r+0x8e>
 8005af4:	1b5b      	subs	r3, r3, r5
 8005af6:	50a3      	str	r3, [r4, r2]
 8005af8:	e7e1      	b.n	8005abe <_malloc_r+0x8e>
 8005afa:	605a      	str	r2, [r3, #4]
 8005afc:	e7ec      	b.n	8005ad8 <_malloc_r+0xa8>
 8005afe:	6862      	ldr	r2, [r4, #4]
 8005b00:	42a3      	cmp	r3, r4
 8005b02:	d1d5      	bne.n	8005ab0 <_malloc_r+0x80>
 8005b04:	9b00      	ldr	r3, [sp, #0]
 8005b06:	601a      	str	r2, [r3, #0]
 8005b08:	e7e9      	b.n	8005ade <_malloc_r+0xae>
 8005b0a:	0023      	movs	r3, r4
 8005b0c:	6864      	ldr	r4, [r4, #4]
 8005b0e:	e7a2      	b.n	8005a56 <_malloc_r+0x26>
 8005b10:	002c      	movs	r4, r5
 8005b12:	686d      	ldr	r5, [r5, #4]
 8005b14:	e7ab      	b.n	8005a6e <_malloc_r+0x3e>
 8005b16:	0013      	movs	r3, r2
 8005b18:	e7c4      	b.n	8005aa4 <_malloc_r+0x74>
 8005b1a:	230c      	movs	r3, #12
 8005b1c:	0030      	movs	r0, r6
 8005b1e:	6033      	str	r3, [r6, #0]
 8005b20:	f000 f810 	bl	8005b44 <__malloc_unlock>
 8005b24:	e7cb      	b.n	8005abe <_malloc_r+0x8e>
 8005b26:	6027      	str	r7, [r4, #0]
 8005b28:	e7d9      	b.n	8005ade <_malloc_r+0xae>
 8005b2a:	605b      	str	r3, [r3, #4]
 8005b2c:	deff      	udf	#255	; 0xff
 8005b2e:	46c0      	nop			; (mov r8, r8)
 8005b30:	20000214 	.word	0x20000214

08005b34 <__malloc_lock>:
 8005b34:	b510      	push	{r4, lr}
 8005b36:	4802      	ldr	r0, [pc, #8]	; (8005b40 <__malloc_lock+0xc>)
 8005b38:	f000 fb7e 	bl	8006238 <__retarget_lock_acquire_recursive>
 8005b3c:	bd10      	pop	{r4, pc}
 8005b3e:	46c0      	nop			; (mov r8, r8)
 8005b40:	2000035c 	.word	0x2000035c

08005b44 <__malloc_unlock>:
 8005b44:	b510      	push	{r4, lr}
 8005b46:	4802      	ldr	r0, [pc, #8]	; (8005b50 <__malloc_unlock+0xc>)
 8005b48:	f000 fb77 	bl	800623a <__retarget_lock_release_recursive>
 8005b4c:	bd10      	pop	{r4, pc}
 8005b4e:	46c0      	nop			; (mov r8, r8)
 8005b50:	2000035c 	.word	0x2000035c

08005b54 <std>:
 8005b54:	2300      	movs	r3, #0
 8005b56:	b510      	push	{r4, lr}
 8005b58:	0004      	movs	r4, r0
 8005b5a:	6003      	str	r3, [r0, #0]
 8005b5c:	6043      	str	r3, [r0, #4]
 8005b5e:	6083      	str	r3, [r0, #8]
 8005b60:	8181      	strh	r1, [r0, #12]
 8005b62:	6643      	str	r3, [r0, #100]	; 0x64
 8005b64:	0019      	movs	r1, r3
 8005b66:	81c2      	strh	r2, [r0, #14]
 8005b68:	6103      	str	r3, [r0, #16]
 8005b6a:	6143      	str	r3, [r0, #20]
 8005b6c:	6183      	str	r3, [r0, #24]
 8005b6e:	2208      	movs	r2, #8
 8005b70:	305c      	adds	r0, #92	; 0x5c
 8005b72:	f000 fa23 	bl	8005fbc <memset>
 8005b76:	4b05      	ldr	r3, [pc, #20]	; (8005b8c <std+0x38>)
 8005b78:	6224      	str	r4, [r4, #32]
 8005b7a:	6263      	str	r3, [r4, #36]	; 0x24
 8005b7c:	4b04      	ldr	r3, [pc, #16]	; (8005b90 <std+0x3c>)
 8005b7e:	62a3      	str	r3, [r4, #40]	; 0x28
 8005b80:	4b04      	ldr	r3, [pc, #16]	; (8005b94 <std+0x40>)
 8005b82:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005b84:	4b04      	ldr	r3, [pc, #16]	; (8005b98 <std+0x44>)
 8005b86:	6323      	str	r3, [r4, #48]	; 0x30
 8005b88:	bd10      	pop	{r4, pc}
 8005b8a:	46c0      	nop			; (mov r8, r8)
 8005b8c:	08005dd9 	.word	0x08005dd9
 8005b90:	08005e01 	.word	0x08005e01
 8005b94:	08005e39 	.word	0x08005e39
 8005b98:	08005e65 	.word	0x08005e65

08005b9c <stdio_exit_handler>:
 8005b9c:	b510      	push	{r4, lr}
 8005b9e:	4a03      	ldr	r2, [pc, #12]	; (8005bac <stdio_exit_handler+0x10>)
 8005ba0:	4903      	ldr	r1, [pc, #12]	; (8005bb0 <stdio_exit_handler+0x14>)
 8005ba2:	4804      	ldr	r0, [pc, #16]	; (8005bb4 <stdio_exit_handler+0x18>)
 8005ba4:	f000 f86c 	bl	8005c80 <_fwalk_sglue>
 8005ba8:	bd10      	pop	{r4, pc}
 8005baa:	46c0      	nop			; (mov r8, r8)
 8005bac:	2000001c 	.word	0x2000001c
 8005bb0:	08006c81 	.word	0x08006c81
 8005bb4:	20000028 	.word	0x20000028

08005bb8 <cleanup_stdio>:
 8005bb8:	6841      	ldr	r1, [r0, #4]
 8005bba:	4b0b      	ldr	r3, [pc, #44]	; (8005be8 <cleanup_stdio+0x30>)
 8005bbc:	b510      	push	{r4, lr}
 8005bbe:	0004      	movs	r4, r0
 8005bc0:	4299      	cmp	r1, r3
 8005bc2:	d001      	beq.n	8005bc8 <cleanup_stdio+0x10>
 8005bc4:	f001 f85c 	bl	8006c80 <_fflush_r>
 8005bc8:	68a1      	ldr	r1, [r4, #8]
 8005bca:	4b08      	ldr	r3, [pc, #32]	; (8005bec <cleanup_stdio+0x34>)
 8005bcc:	4299      	cmp	r1, r3
 8005bce:	d002      	beq.n	8005bd6 <cleanup_stdio+0x1e>
 8005bd0:	0020      	movs	r0, r4
 8005bd2:	f001 f855 	bl	8006c80 <_fflush_r>
 8005bd6:	68e1      	ldr	r1, [r4, #12]
 8005bd8:	4b05      	ldr	r3, [pc, #20]	; (8005bf0 <cleanup_stdio+0x38>)
 8005bda:	4299      	cmp	r1, r3
 8005bdc:	d002      	beq.n	8005be4 <cleanup_stdio+0x2c>
 8005bde:	0020      	movs	r0, r4
 8005be0:	f001 f84e 	bl	8006c80 <_fflush_r>
 8005be4:	bd10      	pop	{r4, pc}
 8005be6:	46c0      	nop			; (mov r8, r8)
 8005be8:	2000021c 	.word	0x2000021c
 8005bec:	20000284 	.word	0x20000284
 8005bf0:	200002ec 	.word	0x200002ec

08005bf4 <global_stdio_init.part.0>:
 8005bf4:	b510      	push	{r4, lr}
 8005bf6:	4b09      	ldr	r3, [pc, #36]	; (8005c1c <global_stdio_init.part.0+0x28>)
 8005bf8:	4a09      	ldr	r2, [pc, #36]	; (8005c20 <global_stdio_init.part.0+0x2c>)
 8005bfa:	2104      	movs	r1, #4
 8005bfc:	601a      	str	r2, [r3, #0]
 8005bfe:	4809      	ldr	r0, [pc, #36]	; (8005c24 <global_stdio_init.part.0+0x30>)
 8005c00:	2200      	movs	r2, #0
 8005c02:	f7ff ffa7 	bl	8005b54 <std>
 8005c06:	2201      	movs	r2, #1
 8005c08:	2109      	movs	r1, #9
 8005c0a:	4807      	ldr	r0, [pc, #28]	; (8005c28 <global_stdio_init.part.0+0x34>)
 8005c0c:	f7ff ffa2 	bl	8005b54 <std>
 8005c10:	2202      	movs	r2, #2
 8005c12:	2112      	movs	r1, #18
 8005c14:	4805      	ldr	r0, [pc, #20]	; (8005c2c <global_stdio_init.part.0+0x38>)
 8005c16:	f7ff ff9d 	bl	8005b54 <std>
 8005c1a:	bd10      	pop	{r4, pc}
 8005c1c:	20000354 	.word	0x20000354
 8005c20:	08005b9d 	.word	0x08005b9d
 8005c24:	2000021c 	.word	0x2000021c
 8005c28:	20000284 	.word	0x20000284
 8005c2c:	200002ec 	.word	0x200002ec

08005c30 <__sfp_lock_acquire>:
 8005c30:	b510      	push	{r4, lr}
 8005c32:	4802      	ldr	r0, [pc, #8]	; (8005c3c <__sfp_lock_acquire+0xc>)
 8005c34:	f000 fb00 	bl	8006238 <__retarget_lock_acquire_recursive>
 8005c38:	bd10      	pop	{r4, pc}
 8005c3a:	46c0      	nop			; (mov r8, r8)
 8005c3c:	2000035d 	.word	0x2000035d

08005c40 <__sfp_lock_release>:
 8005c40:	b510      	push	{r4, lr}
 8005c42:	4802      	ldr	r0, [pc, #8]	; (8005c4c <__sfp_lock_release+0xc>)
 8005c44:	f000 faf9 	bl	800623a <__retarget_lock_release_recursive>
 8005c48:	bd10      	pop	{r4, pc}
 8005c4a:	46c0      	nop			; (mov r8, r8)
 8005c4c:	2000035d 	.word	0x2000035d

08005c50 <__sinit>:
 8005c50:	b510      	push	{r4, lr}
 8005c52:	0004      	movs	r4, r0
 8005c54:	f7ff ffec 	bl	8005c30 <__sfp_lock_acquire>
 8005c58:	6a23      	ldr	r3, [r4, #32]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d002      	beq.n	8005c64 <__sinit+0x14>
 8005c5e:	f7ff ffef 	bl	8005c40 <__sfp_lock_release>
 8005c62:	bd10      	pop	{r4, pc}
 8005c64:	4b04      	ldr	r3, [pc, #16]	; (8005c78 <__sinit+0x28>)
 8005c66:	6223      	str	r3, [r4, #32]
 8005c68:	4b04      	ldr	r3, [pc, #16]	; (8005c7c <__sinit+0x2c>)
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d1f6      	bne.n	8005c5e <__sinit+0xe>
 8005c70:	f7ff ffc0 	bl	8005bf4 <global_stdio_init.part.0>
 8005c74:	e7f3      	b.n	8005c5e <__sinit+0xe>
 8005c76:	46c0      	nop			; (mov r8, r8)
 8005c78:	08005bb9 	.word	0x08005bb9
 8005c7c:	20000354 	.word	0x20000354

08005c80 <_fwalk_sglue>:
 8005c80:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005c82:	0014      	movs	r4, r2
 8005c84:	2600      	movs	r6, #0
 8005c86:	9000      	str	r0, [sp, #0]
 8005c88:	9101      	str	r1, [sp, #4]
 8005c8a:	68a5      	ldr	r5, [r4, #8]
 8005c8c:	6867      	ldr	r7, [r4, #4]
 8005c8e:	3f01      	subs	r7, #1
 8005c90:	d504      	bpl.n	8005c9c <_fwalk_sglue+0x1c>
 8005c92:	6824      	ldr	r4, [r4, #0]
 8005c94:	2c00      	cmp	r4, #0
 8005c96:	d1f8      	bne.n	8005c8a <_fwalk_sglue+0xa>
 8005c98:	0030      	movs	r0, r6
 8005c9a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005c9c:	89ab      	ldrh	r3, [r5, #12]
 8005c9e:	2b01      	cmp	r3, #1
 8005ca0:	d908      	bls.n	8005cb4 <_fwalk_sglue+0x34>
 8005ca2:	220e      	movs	r2, #14
 8005ca4:	5eab      	ldrsh	r3, [r5, r2]
 8005ca6:	3301      	adds	r3, #1
 8005ca8:	d004      	beq.n	8005cb4 <_fwalk_sglue+0x34>
 8005caa:	0029      	movs	r1, r5
 8005cac:	9800      	ldr	r0, [sp, #0]
 8005cae:	9b01      	ldr	r3, [sp, #4]
 8005cb0:	4798      	blx	r3
 8005cb2:	4306      	orrs	r6, r0
 8005cb4:	3568      	adds	r5, #104	; 0x68
 8005cb6:	e7ea      	b.n	8005c8e <_fwalk_sglue+0xe>

08005cb8 <iprintf>:
 8005cb8:	b40f      	push	{r0, r1, r2, r3}
 8005cba:	b507      	push	{r0, r1, r2, lr}
 8005cbc:	4905      	ldr	r1, [pc, #20]	; (8005cd4 <iprintf+0x1c>)
 8005cbe:	ab04      	add	r3, sp, #16
 8005cc0:	6808      	ldr	r0, [r1, #0]
 8005cc2:	cb04      	ldmia	r3!, {r2}
 8005cc4:	6881      	ldr	r1, [r0, #8]
 8005cc6:	9301      	str	r3, [sp, #4]
 8005cc8:	f000 fcb4 	bl	8006634 <_vfiprintf_r>
 8005ccc:	b003      	add	sp, #12
 8005cce:	bc08      	pop	{r3}
 8005cd0:	b004      	add	sp, #16
 8005cd2:	4718      	bx	r3
 8005cd4:	20000074 	.word	0x20000074

08005cd8 <_puts_r>:
 8005cd8:	6a03      	ldr	r3, [r0, #32]
 8005cda:	b570      	push	{r4, r5, r6, lr}
 8005cdc:	0005      	movs	r5, r0
 8005cde:	000e      	movs	r6, r1
 8005ce0:	6884      	ldr	r4, [r0, #8]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d101      	bne.n	8005cea <_puts_r+0x12>
 8005ce6:	f7ff ffb3 	bl	8005c50 <__sinit>
 8005cea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005cec:	07db      	lsls	r3, r3, #31
 8005cee:	d405      	bmi.n	8005cfc <_puts_r+0x24>
 8005cf0:	89a3      	ldrh	r3, [r4, #12]
 8005cf2:	059b      	lsls	r3, r3, #22
 8005cf4:	d402      	bmi.n	8005cfc <_puts_r+0x24>
 8005cf6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005cf8:	f000 fa9e 	bl	8006238 <__retarget_lock_acquire_recursive>
 8005cfc:	89a3      	ldrh	r3, [r4, #12]
 8005cfe:	071b      	lsls	r3, r3, #28
 8005d00:	d502      	bpl.n	8005d08 <_puts_r+0x30>
 8005d02:	6923      	ldr	r3, [r4, #16]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d11f      	bne.n	8005d48 <_puts_r+0x70>
 8005d08:	0021      	movs	r1, r4
 8005d0a:	0028      	movs	r0, r5
 8005d0c:	f000 f8f2 	bl	8005ef4 <__swsetup_r>
 8005d10:	2800      	cmp	r0, #0
 8005d12:	d019      	beq.n	8005d48 <_puts_r+0x70>
 8005d14:	2501      	movs	r5, #1
 8005d16:	426d      	negs	r5, r5
 8005d18:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005d1a:	07db      	lsls	r3, r3, #31
 8005d1c:	d405      	bmi.n	8005d2a <_puts_r+0x52>
 8005d1e:	89a3      	ldrh	r3, [r4, #12]
 8005d20:	059b      	lsls	r3, r3, #22
 8005d22:	d402      	bmi.n	8005d2a <_puts_r+0x52>
 8005d24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005d26:	f000 fa88 	bl	800623a <__retarget_lock_release_recursive>
 8005d2a:	0028      	movs	r0, r5
 8005d2c:	bd70      	pop	{r4, r5, r6, pc}
 8005d2e:	3601      	adds	r6, #1
 8005d30:	60a3      	str	r3, [r4, #8]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	da04      	bge.n	8005d40 <_puts_r+0x68>
 8005d36:	69a2      	ldr	r2, [r4, #24]
 8005d38:	429a      	cmp	r2, r3
 8005d3a:	dc16      	bgt.n	8005d6a <_puts_r+0x92>
 8005d3c:	290a      	cmp	r1, #10
 8005d3e:	d014      	beq.n	8005d6a <_puts_r+0x92>
 8005d40:	6823      	ldr	r3, [r4, #0]
 8005d42:	1c5a      	adds	r2, r3, #1
 8005d44:	6022      	str	r2, [r4, #0]
 8005d46:	7019      	strb	r1, [r3, #0]
 8005d48:	68a3      	ldr	r3, [r4, #8]
 8005d4a:	7831      	ldrb	r1, [r6, #0]
 8005d4c:	3b01      	subs	r3, #1
 8005d4e:	2900      	cmp	r1, #0
 8005d50:	d1ed      	bne.n	8005d2e <_puts_r+0x56>
 8005d52:	60a3      	str	r3, [r4, #8]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	da0f      	bge.n	8005d78 <_puts_r+0xa0>
 8005d58:	0028      	movs	r0, r5
 8005d5a:	0022      	movs	r2, r4
 8005d5c:	310a      	adds	r1, #10
 8005d5e:	f000 f887 	bl	8005e70 <__swbuf_r>
 8005d62:	250a      	movs	r5, #10
 8005d64:	3001      	adds	r0, #1
 8005d66:	d1d7      	bne.n	8005d18 <_puts_r+0x40>
 8005d68:	e7d4      	b.n	8005d14 <_puts_r+0x3c>
 8005d6a:	0022      	movs	r2, r4
 8005d6c:	0028      	movs	r0, r5
 8005d6e:	f000 f87f 	bl	8005e70 <__swbuf_r>
 8005d72:	3001      	adds	r0, #1
 8005d74:	d1e8      	bne.n	8005d48 <_puts_r+0x70>
 8005d76:	e7cd      	b.n	8005d14 <_puts_r+0x3c>
 8005d78:	250a      	movs	r5, #10
 8005d7a:	6823      	ldr	r3, [r4, #0]
 8005d7c:	1c5a      	adds	r2, r3, #1
 8005d7e:	6022      	str	r2, [r4, #0]
 8005d80:	701d      	strb	r5, [r3, #0]
 8005d82:	e7c9      	b.n	8005d18 <_puts_r+0x40>

08005d84 <puts>:
 8005d84:	b510      	push	{r4, lr}
 8005d86:	4b03      	ldr	r3, [pc, #12]	; (8005d94 <puts+0x10>)
 8005d88:	0001      	movs	r1, r0
 8005d8a:	6818      	ldr	r0, [r3, #0]
 8005d8c:	f7ff ffa4 	bl	8005cd8 <_puts_r>
 8005d90:	bd10      	pop	{r4, pc}
 8005d92:	46c0      	nop			; (mov r8, r8)
 8005d94:	20000074 	.word	0x20000074

08005d98 <siprintf>:
 8005d98:	b40e      	push	{r1, r2, r3}
 8005d9a:	b500      	push	{lr}
 8005d9c:	490b      	ldr	r1, [pc, #44]	; (8005dcc <siprintf+0x34>)
 8005d9e:	b09c      	sub	sp, #112	; 0x70
 8005da0:	ab1d      	add	r3, sp, #116	; 0x74
 8005da2:	9002      	str	r0, [sp, #8]
 8005da4:	9006      	str	r0, [sp, #24]
 8005da6:	9107      	str	r1, [sp, #28]
 8005da8:	9104      	str	r1, [sp, #16]
 8005daa:	4809      	ldr	r0, [pc, #36]	; (8005dd0 <siprintf+0x38>)
 8005dac:	4909      	ldr	r1, [pc, #36]	; (8005dd4 <siprintf+0x3c>)
 8005dae:	cb04      	ldmia	r3!, {r2}
 8005db0:	9105      	str	r1, [sp, #20]
 8005db2:	6800      	ldr	r0, [r0, #0]
 8005db4:	a902      	add	r1, sp, #8
 8005db6:	9301      	str	r3, [sp, #4]
 8005db8:	f000 fb14 	bl	80063e4 <_svfiprintf_r>
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	9b02      	ldr	r3, [sp, #8]
 8005dc0:	701a      	strb	r2, [r3, #0]
 8005dc2:	b01c      	add	sp, #112	; 0x70
 8005dc4:	bc08      	pop	{r3}
 8005dc6:	b003      	add	sp, #12
 8005dc8:	4718      	bx	r3
 8005dca:	46c0      	nop			; (mov r8, r8)
 8005dcc:	7fffffff 	.word	0x7fffffff
 8005dd0:	20000074 	.word	0x20000074
 8005dd4:	ffff0208 	.word	0xffff0208

08005dd8 <__sread>:
 8005dd8:	b570      	push	{r4, r5, r6, lr}
 8005dda:	000c      	movs	r4, r1
 8005ddc:	250e      	movs	r5, #14
 8005dde:	5f49      	ldrsh	r1, [r1, r5]
 8005de0:	f000 f9c6 	bl	8006170 <_read_r>
 8005de4:	2800      	cmp	r0, #0
 8005de6:	db03      	blt.n	8005df0 <__sread+0x18>
 8005de8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005dea:	181b      	adds	r3, r3, r0
 8005dec:	6563      	str	r3, [r4, #84]	; 0x54
 8005dee:	bd70      	pop	{r4, r5, r6, pc}
 8005df0:	89a3      	ldrh	r3, [r4, #12]
 8005df2:	4a02      	ldr	r2, [pc, #8]	; (8005dfc <__sread+0x24>)
 8005df4:	4013      	ands	r3, r2
 8005df6:	81a3      	strh	r3, [r4, #12]
 8005df8:	e7f9      	b.n	8005dee <__sread+0x16>
 8005dfa:	46c0      	nop			; (mov r8, r8)
 8005dfc:	ffffefff 	.word	0xffffefff

08005e00 <__swrite>:
 8005e00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e02:	001f      	movs	r7, r3
 8005e04:	898b      	ldrh	r3, [r1, #12]
 8005e06:	0005      	movs	r5, r0
 8005e08:	000c      	movs	r4, r1
 8005e0a:	0016      	movs	r6, r2
 8005e0c:	05db      	lsls	r3, r3, #23
 8005e0e:	d505      	bpl.n	8005e1c <__swrite+0x1c>
 8005e10:	230e      	movs	r3, #14
 8005e12:	5ec9      	ldrsh	r1, [r1, r3]
 8005e14:	2200      	movs	r2, #0
 8005e16:	2302      	movs	r3, #2
 8005e18:	f000 f996 	bl	8006148 <_lseek_r>
 8005e1c:	89a3      	ldrh	r3, [r4, #12]
 8005e1e:	4a05      	ldr	r2, [pc, #20]	; (8005e34 <__swrite+0x34>)
 8005e20:	0028      	movs	r0, r5
 8005e22:	4013      	ands	r3, r2
 8005e24:	81a3      	strh	r3, [r4, #12]
 8005e26:	0032      	movs	r2, r6
 8005e28:	230e      	movs	r3, #14
 8005e2a:	5ee1      	ldrsh	r1, [r4, r3]
 8005e2c:	003b      	movs	r3, r7
 8005e2e:	f000 f9c5 	bl	80061bc <_write_r>
 8005e32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005e34:	ffffefff 	.word	0xffffefff

08005e38 <__sseek>:
 8005e38:	b570      	push	{r4, r5, r6, lr}
 8005e3a:	000c      	movs	r4, r1
 8005e3c:	250e      	movs	r5, #14
 8005e3e:	5f49      	ldrsh	r1, [r1, r5]
 8005e40:	f000 f982 	bl	8006148 <_lseek_r>
 8005e44:	89a3      	ldrh	r3, [r4, #12]
 8005e46:	1c42      	adds	r2, r0, #1
 8005e48:	d103      	bne.n	8005e52 <__sseek+0x1a>
 8005e4a:	4a05      	ldr	r2, [pc, #20]	; (8005e60 <__sseek+0x28>)
 8005e4c:	4013      	ands	r3, r2
 8005e4e:	81a3      	strh	r3, [r4, #12]
 8005e50:	bd70      	pop	{r4, r5, r6, pc}
 8005e52:	2280      	movs	r2, #128	; 0x80
 8005e54:	0152      	lsls	r2, r2, #5
 8005e56:	4313      	orrs	r3, r2
 8005e58:	81a3      	strh	r3, [r4, #12]
 8005e5a:	6560      	str	r0, [r4, #84]	; 0x54
 8005e5c:	e7f8      	b.n	8005e50 <__sseek+0x18>
 8005e5e:	46c0      	nop			; (mov r8, r8)
 8005e60:	ffffefff 	.word	0xffffefff

08005e64 <__sclose>:
 8005e64:	b510      	push	{r4, lr}
 8005e66:	230e      	movs	r3, #14
 8005e68:	5ec9      	ldrsh	r1, [r1, r3]
 8005e6a:	f000 f95b 	bl	8006124 <_close_r>
 8005e6e:	bd10      	pop	{r4, pc}

08005e70 <__swbuf_r>:
 8005e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e72:	0006      	movs	r6, r0
 8005e74:	000d      	movs	r5, r1
 8005e76:	0014      	movs	r4, r2
 8005e78:	2800      	cmp	r0, #0
 8005e7a:	d004      	beq.n	8005e86 <__swbuf_r+0x16>
 8005e7c:	6a03      	ldr	r3, [r0, #32]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d101      	bne.n	8005e86 <__swbuf_r+0x16>
 8005e82:	f7ff fee5 	bl	8005c50 <__sinit>
 8005e86:	69a3      	ldr	r3, [r4, #24]
 8005e88:	60a3      	str	r3, [r4, #8]
 8005e8a:	89a3      	ldrh	r3, [r4, #12]
 8005e8c:	071b      	lsls	r3, r3, #28
 8005e8e:	d528      	bpl.n	8005ee2 <__swbuf_r+0x72>
 8005e90:	6923      	ldr	r3, [r4, #16]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d025      	beq.n	8005ee2 <__swbuf_r+0x72>
 8005e96:	6923      	ldr	r3, [r4, #16]
 8005e98:	6820      	ldr	r0, [r4, #0]
 8005e9a:	b2ef      	uxtb	r7, r5
 8005e9c:	1ac0      	subs	r0, r0, r3
 8005e9e:	6963      	ldr	r3, [r4, #20]
 8005ea0:	b2ed      	uxtb	r5, r5
 8005ea2:	4283      	cmp	r3, r0
 8005ea4:	dc05      	bgt.n	8005eb2 <__swbuf_r+0x42>
 8005ea6:	0021      	movs	r1, r4
 8005ea8:	0030      	movs	r0, r6
 8005eaa:	f000 fee9 	bl	8006c80 <_fflush_r>
 8005eae:	2800      	cmp	r0, #0
 8005eb0:	d11d      	bne.n	8005eee <__swbuf_r+0x7e>
 8005eb2:	68a3      	ldr	r3, [r4, #8]
 8005eb4:	3001      	adds	r0, #1
 8005eb6:	3b01      	subs	r3, #1
 8005eb8:	60a3      	str	r3, [r4, #8]
 8005eba:	6823      	ldr	r3, [r4, #0]
 8005ebc:	1c5a      	adds	r2, r3, #1
 8005ebe:	6022      	str	r2, [r4, #0]
 8005ec0:	701f      	strb	r7, [r3, #0]
 8005ec2:	6963      	ldr	r3, [r4, #20]
 8005ec4:	4283      	cmp	r3, r0
 8005ec6:	d004      	beq.n	8005ed2 <__swbuf_r+0x62>
 8005ec8:	89a3      	ldrh	r3, [r4, #12]
 8005eca:	07db      	lsls	r3, r3, #31
 8005ecc:	d507      	bpl.n	8005ede <__swbuf_r+0x6e>
 8005ece:	2d0a      	cmp	r5, #10
 8005ed0:	d105      	bne.n	8005ede <__swbuf_r+0x6e>
 8005ed2:	0021      	movs	r1, r4
 8005ed4:	0030      	movs	r0, r6
 8005ed6:	f000 fed3 	bl	8006c80 <_fflush_r>
 8005eda:	2800      	cmp	r0, #0
 8005edc:	d107      	bne.n	8005eee <__swbuf_r+0x7e>
 8005ede:	0028      	movs	r0, r5
 8005ee0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005ee2:	0021      	movs	r1, r4
 8005ee4:	0030      	movs	r0, r6
 8005ee6:	f000 f805 	bl	8005ef4 <__swsetup_r>
 8005eea:	2800      	cmp	r0, #0
 8005eec:	d0d3      	beq.n	8005e96 <__swbuf_r+0x26>
 8005eee:	2501      	movs	r5, #1
 8005ef0:	426d      	negs	r5, r5
 8005ef2:	e7f4      	b.n	8005ede <__swbuf_r+0x6e>

08005ef4 <__swsetup_r>:
 8005ef4:	4b30      	ldr	r3, [pc, #192]	; (8005fb8 <__swsetup_r+0xc4>)
 8005ef6:	b570      	push	{r4, r5, r6, lr}
 8005ef8:	0005      	movs	r5, r0
 8005efa:	6818      	ldr	r0, [r3, #0]
 8005efc:	000c      	movs	r4, r1
 8005efe:	2800      	cmp	r0, #0
 8005f00:	d004      	beq.n	8005f0c <__swsetup_r+0x18>
 8005f02:	6a03      	ldr	r3, [r0, #32]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d101      	bne.n	8005f0c <__swsetup_r+0x18>
 8005f08:	f7ff fea2 	bl	8005c50 <__sinit>
 8005f0c:	230c      	movs	r3, #12
 8005f0e:	5ee2      	ldrsh	r2, [r4, r3]
 8005f10:	b293      	uxth	r3, r2
 8005f12:	0711      	lsls	r1, r2, #28
 8005f14:	d423      	bmi.n	8005f5e <__swsetup_r+0x6a>
 8005f16:	06d9      	lsls	r1, r3, #27
 8005f18:	d407      	bmi.n	8005f2a <__swsetup_r+0x36>
 8005f1a:	2309      	movs	r3, #9
 8005f1c:	2001      	movs	r0, #1
 8005f1e:	602b      	str	r3, [r5, #0]
 8005f20:	3337      	adds	r3, #55	; 0x37
 8005f22:	4313      	orrs	r3, r2
 8005f24:	81a3      	strh	r3, [r4, #12]
 8005f26:	4240      	negs	r0, r0
 8005f28:	bd70      	pop	{r4, r5, r6, pc}
 8005f2a:	075b      	lsls	r3, r3, #29
 8005f2c:	d513      	bpl.n	8005f56 <__swsetup_r+0x62>
 8005f2e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005f30:	2900      	cmp	r1, #0
 8005f32:	d008      	beq.n	8005f46 <__swsetup_r+0x52>
 8005f34:	0023      	movs	r3, r4
 8005f36:	3344      	adds	r3, #68	; 0x44
 8005f38:	4299      	cmp	r1, r3
 8005f3a:	d002      	beq.n	8005f42 <__swsetup_r+0x4e>
 8005f3c:	0028      	movs	r0, r5
 8005f3e:	f000 f9a5 	bl	800628c <_free_r>
 8005f42:	2300      	movs	r3, #0
 8005f44:	6363      	str	r3, [r4, #52]	; 0x34
 8005f46:	2224      	movs	r2, #36	; 0x24
 8005f48:	89a3      	ldrh	r3, [r4, #12]
 8005f4a:	4393      	bics	r3, r2
 8005f4c:	81a3      	strh	r3, [r4, #12]
 8005f4e:	2300      	movs	r3, #0
 8005f50:	6063      	str	r3, [r4, #4]
 8005f52:	6923      	ldr	r3, [r4, #16]
 8005f54:	6023      	str	r3, [r4, #0]
 8005f56:	2308      	movs	r3, #8
 8005f58:	89a2      	ldrh	r2, [r4, #12]
 8005f5a:	4313      	orrs	r3, r2
 8005f5c:	81a3      	strh	r3, [r4, #12]
 8005f5e:	6923      	ldr	r3, [r4, #16]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d10b      	bne.n	8005f7c <__swsetup_r+0x88>
 8005f64:	21a0      	movs	r1, #160	; 0xa0
 8005f66:	2280      	movs	r2, #128	; 0x80
 8005f68:	89a3      	ldrh	r3, [r4, #12]
 8005f6a:	0089      	lsls	r1, r1, #2
 8005f6c:	0092      	lsls	r2, r2, #2
 8005f6e:	400b      	ands	r3, r1
 8005f70:	4293      	cmp	r3, r2
 8005f72:	d003      	beq.n	8005f7c <__swsetup_r+0x88>
 8005f74:	0021      	movs	r1, r4
 8005f76:	0028      	movs	r0, r5
 8005f78:	f000 fee6 	bl	8006d48 <__smakebuf_r>
 8005f7c:	220c      	movs	r2, #12
 8005f7e:	5ea3      	ldrsh	r3, [r4, r2]
 8005f80:	2001      	movs	r0, #1
 8005f82:	001a      	movs	r2, r3
 8005f84:	b299      	uxth	r1, r3
 8005f86:	4002      	ands	r2, r0
 8005f88:	4203      	tst	r3, r0
 8005f8a:	d00f      	beq.n	8005fac <__swsetup_r+0xb8>
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	60a2      	str	r2, [r4, #8]
 8005f90:	6962      	ldr	r2, [r4, #20]
 8005f92:	4252      	negs	r2, r2
 8005f94:	61a2      	str	r2, [r4, #24]
 8005f96:	2000      	movs	r0, #0
 8005f98:	6922      	ldr	r2, [r4, #16]
 8005f9a:	4282      	cmp	r2, r0
 8005f9c:	d1c4      	bne.n	8005f28 <__swsetup_r+0x34>
 8005f9e:	0609      	lsls	r1, r1, #24
 8005fa0:	d5c2      	bpl.n	8005f28 <__swsetup_r+0x34>
 8005fa2:	2240      	movs	r2, #64	; 0x40
 8005fa4:	4313      	orrs	r3, r2
 8005fa6:	81a3      	strh	r3, [r4, #12]
 8005fa8:	3801      	subs	r0, #1
 8005faa:	e7bd      	b.n	8005f28 <__swsetup_r+0x34>
 8005fac:	0788      	lsls	r0, r1, #30
 8005fae:	d400      	bmi.n	8005fb2 <__swsetup_r+0xbe>
 8005fb0:	6962      	ldr	r2, [r4, #20]
 8005fb2:	60a2      	str	r2, [r4, #8]
 8005fb4:	e7ef      	b.n	8005f96 <__swsetup_r+0xa2>
 8005fb6:	46c0      	nop			; (mov r8, r8)
 8005fb8:	20000074 	.word	0x20000074

08005fbc <memset>:
 8005fbc:	0003      	movs	r3, r0
 8005fbe:	1882      	adds	r2, r0, r2
 8005fc0:	4293      	cmp	r3, r2
 8005fc2:	d100      	bne.n	8005fc6 <memset+0xa>
 8005fc4:	4770      	bx	lr
 8005fc6:	7019      	strb	r1, [r3, #0]
 8005fc8:	3301      	adds	r3, #1
 8005fca:	e7f9      	b.n	8005fc0 <memset+0x4>

08005fcc <strdup>:
 8005fcc:	b510      	push	{r4, lr}
 8005fce:	4b03      	ldr	r3, [pc, #12]	; (8005fdc <strdup+0x10>)
 8005fd0:	0001      	movs	r1, r0
 8005fd2:	6818      	ldr	r0, [r3, #0]
 8005fd4:	f000 f804 	bl	8005fe0 <_strdup_r>
 8005fd8:	bd10      	pop	{r4, pc}
 8005fda:	46c0      	nop			; (mov r8, r8)
 8005fdc:	20000074 	.word	0x20000074

08005fe0 <_strdup_r>:
 8005fe0:	b570      	push	{r4, r5, r6, lr}
 8005fe2:	0004      	movs	r4, r0
 8005fe4:	0008      	movs	r0, r1
 8005fe6:	000d      	movs	r5, r1
 8005fe8:	f7fa f898 	bl	800011c <strlen>
 8005fec:	1c46      	adds	r6, r0, #1
 8005fee:	0031      	movs	r1, r6
 8005ff0:	0020      	movs	r0, r4
 8005ff2:	f7ff fd1d 	bl	8005a30 <_malloc_r>
 8005ff6:	1e04      	subs	r4, r0, #0
 8005ff8:	d003      	beq.n	8006002 <_strdup_r+0x22>
 8005ffa:	0032      	movs	r2, r6
 8005ffc:	0029      	movs	r1, r5
 8005ffe:	f000 f91d 	bl	800623c <memcpy>
 8006002:	0020      	movs	r0, r4
 8006004:	bd70      	pop	{r4, r5, r6, pc}

08006006 <strncmp>:
 8006006:	b530      	push	{r4, r5, lr}
 8006008:	0005      	movs	r5, r0
 800600a:	1e10      	subs	r0, r2, #0
 800600c:	d00b      	beq.n	8006026 <strncmp+0x20>
 800600e:	2400      	movs	r4, #0
 8006010:	3a01      	subs	r2, #1
 8006012:	5d2b      	ldrb	r3, [r5, r4]
 8006014:	5d08      	ldrb	r0, [r1, r4]
 8006016:	4283      	cmp	r3, r0
 8006018:	d104      	bne.n	8006024 <strncmp+0x1e>
 800601a:	42a2      	cmp	r2, r4
 800601c:	d002      	beq.n	8006024 <strncmp+0x1e>
 800601e:	3401      	adds	r4, #1
 8006020:	2b00      	cmp	r3, #0
 8006022:	d1f6      	bne.n	8006012 <strncmp+0xc>
 8006024:	1a18      	subs	r0, r3, r0
 8006026:	bd30      	pop	{r4, r5, pc}

08006028 <strpbrk>:
 8006028:	b510      	push	{r4, lr}
 800602a:	7803      	ldrb	r3, [r0, #0]
 800602c:	2b00      	cmp	r3, #0
 800602e:	d013      	beq.n	8006058 <strpbrk+0x30>
 8006030:	000b      	movs	r3, r1
 8006032:	7802      	ldrb	r2, [r0, #0]
 8006034:	2a00      	cmp	r2, #0
 8006036:	d10d      	bne.n	8006054 <strpbrk+0x2c>
 8006038:	781b      	ldrb	r3, [r3, #0]
 800603a:	1e5a      	subs	r2, r3, #1
 800603c:	4193      	sbcs	r3, r2
 800603e:	425b      	negs	r3, r3
 8006040:	4018      	ands	r0, r3
 8006042:	bd10      	pop	{r4, pc}
 8006044:	4294      	cmp	r4, r2
 8006046:	d0fc      	beq.n	8006042 <strpbrk+0x1a>
 8006048:	3301      	adds	r3, #1
 800604a:	781c      	ldrb	r4, [r3, #0]
 800604c:	2c00      	cmp	r4, #0
 800604e:	d1f9      	bne.n	8006044 <strpbrk+0x1c>
 8006050:	3001      	adds	r0, #1
 8006052:	e7ee      	b.n	8006032 <strpbrk+0xa>
 8006054:	000b      	movs	r3, r1
 8006056:	e7f8      	b.n	800604a <strpbrk+0x22>
 8006058:	0018      	movs	r0, r3
 800605a:	e7f2      	b.n	8006042 <strpbrk+0x1a>

0800605c <strtok>:
 800605c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800605e:	4b16      	ldr	r3, [pc, #88]	; (80060b8 <strtok+0x5c>)
 8006060:	0005      	movs	r5, r0
 8006062:	681f      	ldr	r7, [r3, #0]
 8006064:	000e      	movs	r6, r1
 8006066:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 8006068:	2c00      	cmp	r4, #0
 800606a:	d11d      	bne.n	80060a8 <strtok+0x4c>
 800606c:	2050      	movs	r0, #80	; 0x50
 800606e:	f7ff fca9 	bl	80059c4 <malloc>
 8006072:	1e02      	subs	r2, r0, #0
 8006074:	6478      	str	r0, [r7, #68]	; 0x44
 8006076:	d104      	bne.n	8006082 <strtok+0x26>
 8006078:	215b      	movs	r1, #91	; 0x5b
 800607a:	4b10      	ldr	r3, [pc, #64]	; (80060bc <strtok+0x60>)
 800607c:	4810      	ldr	r0, [pc, #64]	; (80060c0 <strtok+0x64>)
 800607e:	f000 f8e7 	bl	8006250 <__assert_func>
 8006082:	6004      	str	r4, [r0, #0]
 8006084:	6044      	str	r4, [r0, #4]
 8006086:	6084      	str	r4, [r0, #8]
 8006088:	60c4      	str	r4, [r0, #12]
 800608a:	6104      	str	r4, [r0, #16]
 800608c:	6144      	str	r4, [r0, #20]
 800608e:	6184      	str	r4, [r0, #24]
 8006090:	6284      	str	r4, [r0, #40]	; 0x28
 8006092:	62c4      	str	r4, [r0, #44]	; 0x2c
 8006094:	6304      	str	r4, [r0, #48]	; 0x30
 8006096:	6344      	str	r4, [r0, #52]	; 0x34
 8006098:	6384      	str	r4, [r0, #56]	; 0x38
 800609a:	63c4      	str	r4, [r0, #60]	; 0x3c
 800609c:	6404      	str	r4, [r0, #64]	; 0x40
 800609e:	6444      	str	r4, [r0, #68]	; 0x44
 80060a0:	6484      	str	r4, [r0, #72]	; 0x48
 80060a2:	64c4      	str	r4, [r0, #76]	; 0x4c
 80060a4:	7704      	strb	r4, [r0, #28]
 80060a6:	6244      	str	r4, [r0, #36]	; 0x24
 80060a8:	0031      	movs	r1, r6
 80060aa:	0028      	movs	r0, r5
 80060ac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80060ae:	2301      	movs	r3, #1
 80060b0:	f000 f808 	bl	80060c4 <__strtok_r>
 80060b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80060b6:	46c0      	nop			; (mov r8, r8)
 80060b8:	20000074 	.word	0x20000074
 80060bc:	080072b9 	.word	0x080072b9
 80060c0:	080072d0 	.word	0x080072d0

080060c4 <__strtok_r>:
 80060c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80060c6:	2800      	cmp	r0, #0
 80060c8:	d102      	bne.n	80060d0 <__strtok_r+0xc>
 80060ca:	6810      	ldr	r0, [r2, #0]
 80060cc:	2800      	cmp	r0, #0
 80060ce:	d013      	beq.n	80060f8 <__strtok_r+0x34>
 80060d0:	0004      	movs	r4, r0
 80060d2:	0020      	movs	r0, r4
 80060d4:	000e      	movs	r6, r1
 80060d6:	7805      	ldrb	r5, [r0, #0]
 80060d8:	3401      	adds	r4, #1
 80060da:	7837      	ldrb	r7, [r6, #0]
 80060dc:	2f00      	cmp	r7, #0
 80060de:	d104      	bne.n	80060ea <__strtok_r+0x26>
 80060e0:	2d00      	cmp	r5, #0
 80060e2:	d10f      	bne.n	8006104 <__strtok_r+0x40>
 80060e4:	0028      	movs	r0, r5
 80060e6:	6015      	str	r5, [r2, #0]
 80060e8:	e006      	b.n	80060f8 <__strtok_r+0x34>
 80060ea:	3601      	adds	r6, #1
 80060ec:	42bd      	cmp	r5, r7
 80060ee:	d1f4      	bne.n	80060da <__strtok_r+0x16>
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d1ee      	bne.n	80060d2 <__strtok_r+0xe>
 80060f4:	6014      	str	r4, [r2, #0]
 80060f6:	7003      	strb	r3, [r0, #0]
 80060f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80060fa:	002f      	movs	r7, r5
 80060fc:	e00f      	b.n	800611e <__strtok_r+0x5a>
 80060fe:	3301      	adds	r3, #1
 8006100:	2e00      	cmp	r6, #0
 8006102:	d104      	bne.n	800610e <__strtok_r+0x4a>
 8006104:	0023      	movs	r3, r4
 8006106:	3401      	adds	r4, #1
 8006108:	781d      	ldrb	r5, [r3, #0]
 800610a:	0027      	movs	r7, r4
 800610c:	000b      	movs	r3, r1
 800610e:	781e      	ldrb	r6, [r3, #0]
 8006110:	42b5      	cmp	r5, r6
 8006112:	d1f4      	bne.n	80060fe <__strtok_r+0x3a>
 8006114:	2d00      	cmp	r5, #0
 8006116:	d0f0      	beq.n	80060fa <__strtok_r+0x36>
 8006118:	2300      	movs	r3, #0
 800611a:	3c01      	subs	r4, #1
 800611c:	7023      	strb	r3, [r4, #0]
 800611e:	6017      	str	r7, [r2, #0]
 8006120:	e7ea      	b.n	80060f8 <__strtok_r+0x34>
	...

08006124 <_close_r>:
 8006124:	2300      	movs	r3, #0
 8006126:	b570      	push	{r4, r5, r6, lr}
 8006128:	4d06      	ldr	r5, [pc, #24]	; (8006144 <_close_r+0x20>)
 800612a:	0004      	movs	r4, r0
 800612c:	0008      	movs	r0, r1
 800612e:	602b      	str	r3, [r5, #0]
 8006130:	f7fb ff93 	bl	800205a <_close>
 8006134:	1c43      	adds	r3, r0, #1
 8006136:	d103      	bne.n	8006140 <_close_r+0x1c>
 8006138:	682b      	ldr	r3, [r5, #0]
 800613a:	2b00      	cmp	r3, #0
 800613c:	d000      	beq.n	8006140 <_close_r+0x1c>
 800613e:	6023      	str	r3, [r4, #0]
 8006140:	bd70      	pop	{r4, r5, r6, pc}
 8006142:	46c0      	nop			; (mov r8, r8)
 8006144:	20000358 	.word	0x20000358

08006148 <_lseek_r>:
 8006148:	b570      	push	{r4, r5, r6, lr}
 800614a:	0004      	movs	r4, r0
 800614c:	0008      	movs	r0, r1
 800614e:	0011      	movs	r1, r2
 8006150:	001a      	movs	r2, r3
 8006152:	2300      	movs	r3, #0
 8006154:	4d05      	ldr	r5, [pc, #20]	; (800616c <_lseek_r+0x24>)
 8006156:	602b      	str	r3, [r5, #0]
 8006158:	f7fb ffa0 	bl	800209c <_lseek>
 800615c:	1c43      	adds	r3, r0, #1
 800615e:	d103      	bne.n	8006168 <_lseek_r+0x20>
 8006160:	682b      	ldr	r3, [r5, #0]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d000      	beq.n	8006168 <_lseek_r+0x20>
 8006166:	6023      	str	r3, [r4, #0]
 8006168:	bd70      	pop	{r4, r5, r6, pc}
 800616a:	46c0      	nop			; (mov r8, r8)
 800616c:	20000358 	.word	0x20000358

08006170 <_read_r>:
 8006170:	b570      	push	{r4, r5, r6, lr}
 8006172:	0004      	movs	r4, r0
 8006174:	0008      	movs	r0, r1
 8006176:	0011      	movs	r1, r2
 8006178:	001a      	movs	r2, r3
 800617a:	2300      	movs	r3, #0
 800617c:	4d05      	ldr	r5, [pc, #20]	; (8006194 <_read_r+0x24>)
 800617e:	602b      	str	r3, [r5, #0]
 8006180:	f7fb ff32 	bl	8001fe8 <_read>
 8006184:	1c43      	adds	r3, r0, #1
 8006186:	d103      	bne.n	8006190 <_read_r+0x20>
 8006188:	682b      	ldr	r3, [r5, #0]
 800618a:	2b00      	cmp	r3, #0
 800618c:	d000      	beq.n	8006190 <_read_r+0x20>
 800618e:	6023      	str	r3, [r4, #0]
 8006190:	bd70      	pop	{r4, r5, r6, pc}
 8006192:	46c0      	nop			; (mov r8, r8)
 8006194:	20000358 	.word	0x20000358

08006198 <_sbrk_r>:
 8006198:	2300      	movs	r3, #0
 800619a:	b570      	push	{r4, r5, r6, lr}
 800619c:	4d06      	ldr	r5, [pc, #24]	; (80061b8 <_sbrk_r+0x20>)
 800619e:	0004      	movs	r4, r0
 80061a0:	0008      	movs	r0, r1
 80061a2:	602b      	str	r3, [r5, #0]
 80061a4:	f7fb ff86 	bl	80020b4 <_sbrk>
 80061a8:	1c43      	adds	r3, r0, #1
 80061aa:	d103      	bne.n	80061b4 <_sbrk_r+0x1c>
 80061ac:	682b      	ldr	r3, [r5, #0]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d000      	beq.n	80061b4 <_sbrk_r+0x1c>
 80061b2:	6023      	str	r3, [r4, #0]
 80061b4:	bd70      	pop	{r4, r5, r6, pc}
 80061b6:	46c0      	nop			; (mov r8, r8)
 80061b8:	20000358 	.word	0x20000358

080061bc <_write_r>:
 80061bc:	b570      	push	{r4, r5, r6, lr}
 80061be:	0004      	movs	r4, r0
 80061c0:	0008      	movs	r0, r1
 80061c2:	0011      	movs	r1, r2
 80061c4:	001a      	movs	r2, r3
 80061c6:	2300      	movs	r3, #0
 80061c8:	4d05      	ldr	r5, [pc, #20]	; (80061e0 <_write_r+0x24>)
 80061ca:	602b      	str	r3, [r5, #0]
 80061cc:	f7fb ff29 	bl	8002022 <_write>
 80061d0:	1c43      	adds	r3, r0, #1
 80061d2:	d103      	bne.n	80061dc <_write_r+0x20>
 80061d4:	682b      	ldr	r3, [r5, #0]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d000      	beq.n	80061dc <_write_r+0x20>
 80061da:	6023      	str	r3, [r4, #0]
 80061dc:	bd70      	pop	{r4, r5, r6, pc}
 80061de:	46c0      	nop			; (mov r8, r8)
 80061e0:	20000358 	.word	0x20000358

080061e4 <__errno>:
 80061e4:	4b01      	ldr	r3, [pc, #4]	; (80061ec <__errno+0x8>)
 80061e6:	6818      	ldr	r0, [r3, #0]
 80061e8:	4770      	bx	lr
 80061ea:	46c0      	nop			; (mov r8, r8)
 80061ec:	20000074 	.word	0x20000074

080061f0 <__libc_init_array>:
 80061f0:	b570      	push	{r4, r5, r6, lr}
 80061f2:	2600      	movs	r6, #0
 80061f4:	4c0c      	ldr	r4, [pc, #48]	; (8006228 <__libc_init_array+0x38>)
 80061f6:	4d0d      	ldr	r5, [pc, #52]	; (800622c <__libc_init_array+0x3c>)
 80061f8:	1b64      	subs	r4, r4, r5
 80061fa:	10a4      	asrs	r4, r4, #2
 80061fc:	42a6      	cmp	r6, r4
 80061fe:	d109      	bne.n	8006214 <__libc_init_array+0x24>
 8006200:	2600      	movs	r6, #0
 8006202:	f000 feab 	bl	8006f5c <_init>
 8006206:	4c0a      	ldr	r4, [pc, #40]	; (8006230 <__libc_init_array+0x40>)
 8006208:	4d0a      	ldr	r5, [pc, #40]	; (8006234 <__libc_init_array+0x44>)
 800620a:	1b64      	subs	r4, r4, r5
 800620c:	10a4      	asrs	r4, r4, #2
 800620e:	42a6      	cmp	r6, r4
 8006210:	d105      	bne.n	800621e <__libc_init_array+0x2e>
 8006212:	bd70      	pop	{r4, r5, r6, pc}
 8006214:	00b3      	lsls	r3, r6, #2
 8006216:	58eb      	ldr	r3, [r5, r3]
 8006218:	4798      	blx	r3
 800621a:	3601      	adds	r6, #1
 800621c:	e7ee      	b.n	80061fc <__libc_init_array+0xc>
 800621e:	00b3      	lsls	r3, r6, #2
 8006220:	58eb      	ldr	r3, [r5, r3]
 8006222:	4798      	blx	r3
 8006224:	3601      	adds	r6, #1
 8006226:	e7f2      	b.n	800620e <__libc_init_array+0x1e>
 8006228:	080073a4 	.word	0x080073a4
 800622c:	080073a4 	.word	0x080073a4
 8006230:	080073a8 	.word	0x080073a8
 8006234:	080073a4 	.word	0x080073a4

08006238 <__retarget_lock_acquire_recursive>:
 8006238:	4770      	bx	lr

0800623a <__retarget_lock_release_recursive>:
 800623a:	4770      	bx	lr

0800623c <memcpy>:
 800623c:	2300      	movs	r3, #0
 800623e:	b510      	push	{r4, lr}
 8006240:	429a      	cmp	r2, r3
 8006242:	d100      	bne.n	8006246 <memcpy+0xa>
 8006244:	bd10      	pop	{r4, pc}
 8006246:	5ccc      	ldrb	r4, [r1, r3]
 8006248:	54c4      	strb	r4, [r0, r3]
 800624a:	3301      	adds	r3, #1
 800624c:	e7f8      	b.n	8006240 <memcpy+0x4>
	...

08006250 <__assert_func>:
 8006250:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8006252:	0014      	movs	r4, r2
 8006254:	001a      	movs	r2, r3
 8006256:	4b09      	ldr	r3, [pc, #36]	; (800627c <__assert_func+0x2c>)
 8006258:	0005      	movs	r5, r0
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	000e      	movs	r6, r1
 800625e:	68d8      	ldr	r0, [r3, #12]
 8006260:	4b07      	ldr	r3, [pc, #28]	; (8006280 <__assert_func+0x30>)
 8006262:	2c00      	cmp	r4, #0
 8006264:	d101      	bne.n	800626a <__assert_func+0x1a>
 8006266:	4b07      	ldr	r3, [pc, #28]	; (8006284 <__assert_func+0x34>)
 8006268:	001c      	movs	r4, r3
 800626a:	4907      	ldr	r1, [pc, #28]	; (8006288 <__assert_func+0x38>)
 800626c:	9301      	str	r3, [sp, #4]
 800626e:	9402      	str	r4, [sp, #8]
 8006270:	002b      	movs	r3, r5
 8006272:	9600      	str	r6, [sp, #0]
 8006274:	f000 fd30 	bl	8006cd8 <fiprintf>
 8006278:	f000 fde7 	bl	8006e4a <abort>
 800627c:	20000074 	.word	0x20000074
 8006280:	0800732a 	.word	0x0800732a
 8006284:	08007365 	.word	0x08007365
 8006288:	08007337 	.word	0x08007337

0800628c <_free_r>:
 800628c:	b570      	push	{r4, r5, r6, lr}
 800628e:	0005      	movs	r5, r0
 8006290:	2900      	cmp	r1, #0
 8006292:	d010      	beq.n	80062b6 <_free_r+0x2a>
 8006294:	1f0c      	subs	r4, r1, #4
 8006296:	6823      	ldr	r3, [r4, #0]
 8006298:	2b00      	cmp	r3, #0
 800629a:	da00      	bge.n	800629e <_free_r+0x12>
 800629c:	18e4      	adds	r4, r4, r3
 800629e:	0028      	movs	r0, r5
 80062a0:	f7ff fc48 	bl	8005b34 <__malloc_lock>
 80062a4:	4a1d      	ldr	r2, [pc, #116]	; (800631c <_free_r+0x90>)
 80062a6:	6813      	ldr	r3, [r2, #0]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d105      	bne.n	80062b8 <_free_r+0x2c>
 80062ac:	6063      	str	r3, [r4, #4]
 80062ae:	6014      	str	r4, [r2, #0]
 80062b0:	0028      	movs	r0, r5
 80062b2:	f7ff fc47 	bl	8005b44 <__malloc_unlock>
 80062b6:	bd70      	pop	{r4, r5, r6, pc}
 80062b8:	42a3      	cmp	r3, r4
 80062ba:	d908      	bls.n	80062ce <_free_r+0x42>
 80062bc:	6820      	ldr	r0, [r4, #0]
 80062be:	1821      	adds	r1, r4, r0
 80062c0:	428b      	cmp	r3, r1
 80062c2:	d1f3      	bne.n	80062ac <_free_r+0x20>
 80062c4:	6819      	ldr	r1, [r3, #0]
 80062c6:	685b      	ldr	r3, [r3, #4]
 80062c8:	1809      	adds	r1, r1, r0
 80062ca:	6021      	str	r1, [r4, #0]
 80062cc:	e7ee      	b.n	80062ac <_free_r+0x20>
 80062ce:	001a      	movs	r2, r3
 80062d0:	685b      	ldr	r3, [r3, #4]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d001      	beq.n	80062da <_free_r+0x4e>
 80062d6:	42a3      	cmp	r3, r4
 80062d8:	d9f9      	bls.n	80062ce <_free_r+0x42>
 80062da:	6811      	ldr	r1, [r2, #0]
 80062dc:	1850      	adds	r0, r2, r1
 80062de:	42a0      	cmp	r0, r4
 80062e0:	d10b      	bne.n	80062fa <_free_r+0x6e>
 80062e2:	6820      	ldr	r0, [r4, #0]
 80062e4:	1809      	adds	r1, r1, r0
 80062e6:	1850      	adds	r0, r2, r1
 80062e8:	6011      	str	r1, [r2, #0]
 80062ea:	4283      	cmp	r3, r0
 80062ec:	d1e0      	bne.n	80062b0 <_free_r+0x24>
 80062ee:	6818      	ldr	r0, [r3, #0]
 80062f0:	685b      	ldr	r3, [r3, #4]
 80062f2:	1841      	adds	r1, r0, r1
 80062f4:	6011      	str	r1, [r2, #0]
 80062f6:	6053      	str	r3, [r2, #4]
 80062f8:	e7da      	b.n	80062b0 <_free_r+0x24>
 80062fa:	42a0      	cmp	r0, r4
 80062fc:	d902      	bls.n	8006304 <_free_r+0x78>
 80062fe:	230c      	movs	r3, #12
 8006300:	602b      	str	r3, [r5, #0]
 8006302:	e7d5      	b.n	80062b0 <_free_r+0x24>
 8006304:	6820      	ldr	r0, [r4, #0]
 8006306:	1821      	adds	r1, r4, r0
 8006308:	428b      	cmp	r3, r1
 800630a:	d103      	bne.n	8006314 <_free_r+0x88>
 800630c:	6819      	ldr	r1, [r3, #0]
 800630e:	685b      	ldr	r3, [r3, #4]
 8006310:	1809      	adds	r1, r1, r0
 8006312:	6021      	str	r1, [r4, #0]
 8006314:	6063      	str	r3, [r4, #4]
 8006316:	6054      	str	r4, [r2, #4]
 8006318:	e7ca      	b.n	80062b0 <_free_r+0x24>
 800631a:	46c0      	nop			; (mov r8, r8)
 800631c:	20000214 	.word	0x20000214

08006320 <__ssputs_r>:
 8006320:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006322:	b085      	sub	sp, #20
 8006324:	9301      	str	r3, [sp, #4]
 8006326:	9203      	str	r2, [sp, #12]
 8006328:	688e      	ldr	r6, [r1, #8]
 800632a:	9a01      	ldr	r2, [sp, #4]
 800632c:	0007      	movs	r7, r0
 800632e:	000c      	movs	r4, r1
 8006330:	680b      	ldr	r3, [r1, #0]
 8006332:	4296      	cmp	r6, r2
 8006334:	d831      	bhi.n	800639a <__ssputs_r+0x7a>
 8006336:	898a      	ldrh	r2, [r1, #12]
 8006338:	2190      	movs	r1, #144	; 0x90
 800633a:	00c9      	lsls	r1, r1, #3
 800633c:	420a      	tst	r2, r1
 800633e:	d029      	beq.n	8006394 <__ssputs_r+0x74>
 8006340:	2003      	movs	r0, #3
 8006342:	6921      	ldr	r1, [r4, #16]
 8006344:	1a5b      	subs	r3, r3, r1
 8006346:	9302      	str	r3, [sp, #8]
 8006348:	6963      	ldr	r3, [r4, #20]
 800634a:	4343      	muls	r3, r0
 800634c:	0fdd      	lsrs	r5, r3, #31
 800634e:	18ed      	adds	r5, r5, r3
 8006350:	9b01      	ldr	r3, [sp, #4]
 8006352:	9802      	ldr	r0, [sp, #8]
 8006354:	3301      	adds	r3, #1
 8006356:	181b      	adds	r3, r3, r0
 8006358:	106d      	asrs	r5, r5, #1
 800635a:	42ab      	cmp	r3, r5
 800635c:	d900      	bls.n	8006360 <__ssputs_r+0x40>
 800635e:	001d      	movs	r5, r3
 8006360:	0552      	lsls	r2, r2, #21
 8006362:	d529      	bpl.n	80063b8 <__ssputs_r+0x98>
 8006364:	0029      	movs	r1, r5
 8006366:	0038      	movs	r0, r7
 8006368:	f7ff fb62 	bl	8005a30 <_malloc_r>
 800636c:	1e06      	subs	r6, r0, #0
 800636e:	d02d      	beq.n	80063cc <__ssputs_r+0xac>
 8006370:	9a02      	ldr	r2, [sp, #8]
 8006372:	6921      	ldr	r1, [r4, #16]
 8006374:	f7ff ff62 	bl	800623c <memcpy>
 8006378:	89a2      	ldrh	r2, [r4, #12]
 800637a:	4b19      	ldr	r3, [pc, #100]	; (80063e0 <__ssputs_r+0xc0>)
 800637c:	401a      	ands	r2, r3
 800637e:	2380      	movs	r3, #128	; 0x80
 8006380:	4313      	orrs	r3, r2
 8006382:	81a3      	strh	r3, [r4, #12]
 8006384:	9b02      	ldr	r3, [sp, #8]
 8006386:	6126      	str	r6, [r4, #16]
 8006388:	18f6      	adds	r6, r6, r3
 800638a:	6026      	str	r6, [r4, #0]
 800638c:	6165      	str	r5, [r4, #20]
 800638e:	9e01      	ldr	r6, [sp, #4]
 8006390:	1aed      	subs	r5, r5, r3
 8006392:	60a5      	str	r5, [r4, #8]
 8006394:	9b01      	ldr	r3, [sp, #4]
 8006396:	429e      	cmp	r6, r3
 8006398:	d900      	bls.n	800639c <__ssputs_r+0x7c>
 800639a:	9e01      	ldr	r6, [sp, #4]
 800639c:	0032      	movs	r2, r6
 800639e:	9903      	ldr	r1, [sp, #12]
 80063a0:	6820      	ldr	r0, [r4, #0]
 80063a2:	f000 fd0f 	bl	8006dc4 <memmove>
 80063a6:	2000      	movs	r0, #0
 80063a8:	68a3      	ldr	r3, [r4, #8]
 80063aa:	1b9b      	subs	r3, r3, r6
 80063ac:	60a3      	str	r3, [r4, #8]
 80063ae:	6823      	ldr	r3, [r4, #0]
 80063b0:	199b      	adds	r3, r3, r6
 80063b2:	6023      	str	r3, [r4, #0]
 80063b4:	b005      	add	sp, #20
 80063b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80063b8:	002a      	movs	r2, r5
 80063ba:	0038      	movs	r0, r7
 80063bc:	f000 fd4c 	bl	8006e58 <_realloc_r>
 80063c0:	1e06      	subs	r6, r0, #0
 80063c2:	d1df      	bne.n	8006384 <__ssputs_r+0x64>
 80063c4:	0038      	movs	r0, r7
 80063c6:	6921      	ldr	r1, [r4, #16]
 80063c8:	f7ff ff60 	bl	800628c <_free_r>
 80063cc:	230c      	movs	r3, #12
 80063ce:	2001      	movs	r0, #1
 80063d0:	603b      	str	r3, [r7, #0]
 80063d2:	89a2      	ldrh	r2, [r4, #12]
 80063d4:	3334      	adds	r3, #52	; 0x34
 80063d6:	4313      	orrs	r3, r2
 80063d8:	81a3      	strh	r3, [r4, #12]
 80063da:	4240      	negs	r0, r0
 80063dc:	e7ea      	b.n	80063b4 <__ssputs_r+0x94>
 80063de:	46c0      	nop			; (mov r8, r8)
 80063e0:	fffffb7f 	.word	0xfffffb7f

080063e4 <_svfiprintf_r>:
 80063e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80063e6:	b0a1      	sub	sp, #132	; 0x84
 80063e8:	9003      	str	r0, [sp, #12]
 80063ea:	001d      	movs	r5, r3
 80063ec:	898b      	ldrh	r3, [r1, #12]
 80063ee:	000f      	movs	r7, r1
 80063f0:	0016      	movs	r6, r2
 80063f2:	061b      	lsls	r3, r3, #24
 80063f4:	d511      	bpl.n	800641a <_svfiprintf_r+0x36>
 80063f6:	690b      	ldr	r3, [r1, #16]
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d10e      	bne.n	800641a <_svfiprintf_r+0x36>
 80063fc:	2140      	movs	r1, #64	; 0x40
 80063fe:	f7ff fb17 	bl	8005a30 <_malloc_r>
 8006402:	6038      	str	r0, [r7, #0]
 8006404:	6138      	str	r0, [r7, #16]
 8006406:	2800      	cmp	r0, #0
 8006408:	d105      	bne.n	8006416 <_svfiprintf_r+0x32>
 800640a:	230c      	movs	r3, #12
 800640c:	9a03      	ldr	r2, [sp, #12]
 800640e:	3801      	subs	r0, #1
 8006410:	6013      	str	r3, [r2, #0]
 8006412:	b021      	add	sp, #132	; 0x84
 8006414:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006416:	2340      	movs	r3, #64	; 0x40
 8006418:	617b      	str	r3, [r7, #20]
 800641a:	2300      	movs	r3, #0
 800641c:	ac08      	add	r4, sp, #32
 800641e:	6163      	str	r3, [r4, #20]
 8006420:	3320      	adds	r3, #32
 8006422:	7663      	strb	r3, [r4, #25]
 8006424:	3310      	adds	r3, #16
 8006426:	76a3      	strb	r3, [r4, #26]
 8006428:	9507      	str	r5, [sp, #28]
 800642a:	0035      	movs	r5, r6
 800642c:	782b      	ldrb	r3, [r5, #0]
 800642e:	2b00      	cmp	r3, #0
 8006430:	d001      	beq.n	8006436 <_svfiprintf_r+0x52>
 8006432:	2b25      	cmp	r3, #37	; 0x25
 8006434:	d148      	bne.n	80064c8 <_svfiprintf_r+0xe4>
 8006436:	1bab      	subs	r3, r5, r6
 8006438:	9305      	str	r3, [sp, #20]
 800643a:	42b5      	cmp	r5, r6
 800643c:	d00b      	beq.n	8006456 <_svfiprintf_r+0x72>
 800643e:	0032      	movs	r2, r6
 8006440:	0039      	movs	r1, r7
 8006442:	9803      	ldr	r0, [sp, #12]
 8006444:	f7ff ff6c 	bl	8006320 <__ssputs_r>
 8006448:	3001      	adds	r0, #1
 800644a:	d100      	bne.n	800644e <_svfiprintf_r+0x6a>
 800644c:	e0af      	b.n	80065ae <_svfiprintf_r+0x1ca>
 800644e:	6963      	ldr	r3, [r4, #20]
 8006450:	9a05      	ldr	r2, [sp, #20]
 8006452:	189b      	adds	r3, r3, r2
 8006454:	6163      	str	r3, [r4, #20]
 8006456:	782b      	ldrb	r3, [r5, #0]
 8006458:	2b00      	cmp	r3, #0
 800645a:	d100      	bne.n	800645e <_svfiprintf_r+0x7a>
 800645c:	e0a7      	b.n	80065ae <_svfiprintf_r+0x1ca>
 800645e:	2201      	movs	r2, #1
 8006460:	2300      	movs	r3, #0
 8006462:	4252      	negs	r2, r2
 8006464:	6062      	str	r2, [r4, #4]
 8006466:	a904      	add	r1, sp, #16
 8006468:	3254      	adds	r2, #84	; 0x54
 800646a:	1852      	adds	r2, r2, r1
 800646c:	1c6e      	adds	r6, r5, #1
 800646e:	6023      	str	r3, [r4, #0]
 8006470:	60e3      	str	r3, [r4, #12]
 8006472:	60a3      	str	r3, [r4, #8]
 8006474:	7013      	strb	r3, [r2, #0]
 8006476:	65a3      	str	r3, [r4, #88]	; 0x58
 8006478:	4b55      	ldr	r3, [pc, #340]	; (80065d0 <_svfiprintf_r+0x1ec>)
 800647a:	2205      	movs	r2, #5
 800647c:	0018      	movs	r0, r3
 800647e:	7831      	ldrb	r1, [r6, #0]
 8006480:	9305      	str	r3, [sp, #20]
 8006482:	f000 fcd7 	bl	8006e34 <memchr>
 8006486:	1c75      	adds	r5, r6, #1
 8006488:	2800      	cmp	r0, #0
 800648a:	d11f      	bne.n	80064cc <_svfiprintf_r+0xe8>
 800648c:	6822      	ldr	r2, [r4, #0]
 800648e:	06d3      	lsls	r3, r2, #27
 8006490:	d504      	bpl.n	800649c <_svfiprintf_r+0xb8>
 8006492:	2353      	movs	r3, #83	; 0x53
 8006494:	a904      	add	r1, sp, #16
 8006496:	185b      	adds	r3, r3, r1
 8006498:	2120      	movs	r1, #32
 800649a:	7019      	strb	r1, [r3, #0]
 800649c:	0713      	lsls	r3, r2, #28
 800649e:	d504      	bpl.n	80064aa <_svfiprintf_r+0xc6>
 80064a0:	2353      	movs	r3, #83	; 0x53
 80064a2:	a904      	add	r1, sp, #16
 80064a4:	185b      	adds	r3, r3, r1
 80064a6:	212b      	movs	r1, #43	; 0x2b
 80064a8:	7019      	strb	r1, [r3, #0]
 80064aa:	7833      	ldrb	r3, [r6, #0]
 80064ac:	2b2a      	cmp	r3, #42	; 0x2a
 80064ae:	d016      	beq.n	80064de <_svfiprintf_r+0xfa>
 80064b0:	0035      	movs	r5, r6
 80064b2:	2100      	movs	r1, #0
 80064b4:	200a      	movs	r0, #10
 80064b6:	68e3      	ldr	r3, [r4, #12]
 80064b8:	782a      	ldrb	r2, [r5, #0]
 80064ba:	1c6e      	adds	r6, r5, #1
 80064bc:	3a30      	subs	r2, #48	; 0x30
 80064be:	2a09      	cmp	r2, #9
 80064c0:	d94e      	bls.n	8006560 <_svfiprintf_r+0x17c>
 80064c2:	2900      	cmp	r1, #0
 80064c4:	d111      	bne.n	80064ea <_svfiprintf_r+0x106>
 80064c6:	e017      	b.n	80064f8 <_svfiprintf_r+0x114>
 80064c8:	3501      	adds	r5, #1
 80064ca:	e7af      	b.n	800642c <_svfiprintf_r+0x48>
 80064cc:	9b05      	ldr	r3, [sp, #20]
 80064ce:	6822      	ldr	r2, [r4, #0]
 80064d0:	1ac0      	subs	r0, r0, r3
 80064d2:	2301      	movs	r3, #1
 80064d4:	4083      	lsls	r3, r0
 80064d6:	4313      	orrs	r3, r2
 80064d8:	002e      	movs	r6, r5
 80064da:	6023      	str	r3, [r4, #0]
 80064dc:	e7cc      	b.n	8006478 <_svfiprintf_r+0x94>
 80064de:	9b07      	ldr	r3, [sp, #28]
 80064e0:	1d19      	adds	r1, r3, #4
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	9107      	str	r1, [sp, #28]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	db01      	blt.n	80064ee <_svfiprintf_r+0x10a>
 80064ea:	930b      	str	r3, [sp, #44]	; 0x2c
 80064ec:	e004      	b.n	80064f8 <_svfiprintf_r+0x114>
 80064ee:	425b      	negs	r3, r3
 80064f0:	60e3      	str	r3, [r4, #12]
 80064f2:	2302      	movs	r3, #2
 80064f4:	4313      	orrs	r3, r2
 80064f6:	6023      	str	r3, [r4, #0]
 80064f8:	782b      	ldrb	r3, [r5, #0]
 80064fa:	2b2e      	cmp	r3, #46	; 0x2e
 80064fc:	d10a      	bne.n	8006514 <_svfiprintf_r+0x130>
 80064fe:	786b      	ldrb	r3, [r5, #1]
 8006500:	2b2a      	cmp	r3, #42	; 0x2a
 8006502:	d135      	bne.n	8006570 <_svfiprintf_r+0x18c>
 8006504:	9b07      	ldr	r3, [sp, #28]
 8006506:	3502      	adds	r5, #2
 8006508:	1d1a      	adds	r2, r3, #4
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	9207      	str	r2, [sp, #28]
 800650e:	2b00      	cmp	r3, #0
 8006510:	db2b      	blt.n	800656a <_svfiprintf_r+0x186>
 8006512:	9309      	str	r3, [sp, #36]	; 0x24
 8006514:	4e2f      	ldr	r6, [pc, #188]	; (80065d4 <_svfiprintf_r+0x1f0>)
 8006516:	2203      	movs	r2, #3
 8006518:	0030      	movs	r0, r6
 800651a:	7829      	ldrb	r1, [r5, #0]
 800651c:	f000 fc8a 	bl	8006e34 <memchr>
 8006520:	2800      	cmp	r0, #0
 8006522:	d006      	beq.n	8006532 <_svfiprintf_r+0x14e>
 8006524:	2340      	movs	r3, #64	; 0x40
 8006526:	1b80      	subs	r0, r0, r6
 8006528:	4083      	lsls	r3, r0
 800652a:	6822      	ldr	r2, [r4, #0]
 800652c:	3501      	adds	r5, #1
 800652e:	4313      	orrs	r3, r2
 8006530:	6023      	str	r3, [r4, #0]
 8006532:	7829      	ldrb	r1, [r5, #0]
 8006534:	2206      	movs	r2, #6
 8006536:	4828      	ldr	r0, [pc, #160]	; (80065d8 <_svfiprintf_r+0x1f4>)
 8006538:	1c6e      	adds	r6, r5, #1
 800653a:	7621      	strb	r1, [r4, #24]
 800653c:	f000 fc7a 	bl	8006e34 <memchr>
 8006540:	2800      	cmp	r0, #0
 8006542:	d03c      	beq.n	80065be <_svfiprintf_r+0x1da>
 8006544:	4b25      	ldr	r3, [pc, #148]	; (80065dc <_svfiprintf_r+0x1f8>)
 8006546:	2b00      	cmp	r3, #0
 8006548:	d125      	bne.n	8006596 <_svfiprintf_r+0x1b2>
 800654a:	2207      	movs	r2, #7
 800654c:	9b07      	ldr	r3, [sp, #28]
 800654e:	3307      	adds	r3, #7
 8006550:	4393      	bics	r3, r2
 8006552:	3308      	adds	r3, #8
 8006554:	9307      	str	r3, [sp, #28]
 8006556:	6963      	ldr	r3, [r4, #20]
 8006558:	9a04      	ldr	r2, [sp, #16]
 800655a:	189b      	adds	r3, r3, r2
 800655c:	6163      	str	r3, [r4, #20]
 800655e:	e764      	b.n	800642a <_svfiprintf_r+0x46>
 8006560:	4343      	muls	r3, r0
 8006562:	0035      	movs	r5, r6
 8006564:	2101      	movs	r1, #1
 8006566:	189b      	adds	r3, r3, r2
 8006568:	e7a6      	b.n	80064b8 <_svfiprintf_r+0xd4>
 800656a:	2301      	movs	r3, #1
 800656c:	425b      	negs	r3, r3
 800656e:	e7d0      	b.n	8006512 <_svfiprintf_r+0x12e>
 8006570:	2300      	movs	r3, #0
 8006572:	200a      	movs	r0, #10
 8006574:	001a      	movs	r2, r3
 8006576:	3501      	adds	r5, #1
 8006578:	6063      	str	r3, [r4, #4]
 800657a:	7829      	ldrb	r1, [r5, #0]
 800657c:	1c6e      	adds	r6, r5, #1
 800657e:	3930      	subs	r1, #48	; 0x30
 8006580:	2909      	cmp	r1, #9
 8006582:	d903      	bls.n	800658c <_svfiprintf_r+0x1a8>
 8006584:	2b00      	cmp	r3, #0
 8006586:	d0c5      	beq.n	8006514 <_svfiprintf_r+0x130>
 8006588:	9209      	str	r2, [sp, #36]	; 0x24
 800658a:	e7c3      	b.n	8006514 <_svfiprintf_r+0x130>
 800658c:	4342      	muls	r2, r0
 800658e:	0035      	movs	r5, r6
 8006590:	2301      	movs	r3, #1
 8006592:	1852      	adds	r2, r2, r1
 8006594:	e7f1      	b.n	800657a <_svfiprintf_r+0x196>
 8006596:	aa07      	add	r2, sp, #28
 8006598:	9200      	str	r2, [sp, #0]
 800659a:	0021      	movs	r1, r4
 800659c:	003a      	movs	r2, r7
 800659e:	4b10      	ldr	r3, [pc, #64]	; (80065e0 <_svfiprintf_r+0x1fc>)
 80065a0:	9803      	ldr	r0, [sp, #12]
 80065a2:	e000      	b.n	80065a6 <_svfiprintf_r+0x1c2>
 80065a4:	bf00      	nop
 80065a6:	9004      	str	r0, [sp, #16]
 80065a8:	9b04      	ldr	r3, [sp, #16]
 80065aa:	3301      	adds	r3, #1
 80065ac:	d1d3      	bne.n	8006556 <_svfiprintf_r+0x172>
 80065ae:	89bb      	ldrh	r3, [r7, #12]
 80065b0:	980d      	ldr	r0, [sp, #52]	; 0x34
 80065b2:	065b      	lsls	r3, r3, #25
 80065b4:	d400      	bmi.n	80065b8 <_svfiprintf_r+0x1d4>
 80065b6:	e72c      	b.n	8006412 <_svfiprintf_r+0x2e>
 80065b8:	2001      	movs	r0, #1
 80065ba:	4240      	negs	r0, r0
 80065bc:	e729      	b.n	8006412 <_svfiprintf_r+0x2e>
 80065be:	aa07      	add	r2, sp, #28
 80065c0:	9200      	str	r2, [sp, #0]
 80065c2:	0021      	movs	r1, r4
 80065c4:	003a      	movs	r2, r7
 80065c6:	4b06      	ldr	r3, [pc, #24]	; (80065e0 <_svfiprintf_r+0x1fc>)
 80065c8:	9803      	ldr	r0, [sp, #12]
 80065ca:	f000 f9bf 	bl	800694c <_printf_i>
 80065ce:	e7ea      	b.n	80065a6 <_svfiprintf_r+0x1c2>
 80065d0:	08007366 	.word	0x08007366
 80065d4:	0800736c 	.word	0x0800736c
 80065d8:	08007370 	.word	0x08007370
 80065dc:	00000000 	.word	0x00000000
 80065e0:	08006321 	.word	0x08006321

080065e4 <__sfputc_r>:
 80065e4:	6893      	ldr	r3, [r2, #8]
 80065e6:	b510      	push	{r4, lr}
 80065e8:	3b01      	subs	r3, #1
 80065ea:	6093      	str	r3, [r2, #8]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	da04      	bge.n	80065fa <__sfputc_r+0x16>
 80065f0:	6994      	ldr	r4, [r2, #24]
 80065f2:	42a3      	cmp	r3, r4
 80065f4:	db07      	blt.n	8006606 <__sfputc_r+0x22>
 80065f6:	290a      	cmp	r1, #10
 80065f8:	d005      	beq.n	8006606 <__sfputc_r+0x22>
 80065fa:	6813      	ldr	r3, [r2, #0]
 80065fc:	1c58      	adds	r0, r3, #1
 80065fe:	6010      	str	r0, [r2, #0]
 8006600:	7019      	strb	r1, [r3, #0]
 8006602:	0008      	movs	r0, r1
 8006604:	bd10      	pop	{r4, pc}
 8006606:	f7ff fc33 	bl	8005e70 <__swbuf_r>
 800660a:	0001      	movs	r1, r0
 800660c:	e7f9      	b.n	8006602 <__sfputc_r+0x1e>

0800660e <__sfputs_r>:
 800660e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006610:	0006      	movs	r6, r0
 8006612:	000f      	movs	r7, r1
 8006614:	0014      	movs	r4, r2
 8006616:	18d5      	adds	r5, r2, r3
 8006618:	42ac      	cmp	r4, r5
 800661a:	d101      	bne.n	8006620 <__sfputs_r+0x12>
 800661c:	2000      	movs	r0, #0
 800661e:	e007      	b.n	8006630 <__sfputs_r+0x22>
 8006620:	7821      	ldrb	r1, [r4, #0]
 8006622:	003a      	movs	r2, r7
 8006624:	0030      	movs	r0, r6
 8006626:	f7ff ffdd 	bl	80065e4 <__sfputc_r>
 800662a:	3401      	adds	r4, #1
 800662c:	1c43      	adds	r3, r0, #1
 800662e:	d1f3      	bne.n	8006618 <__sfputs_r+0xa>
 8006630:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006634 <_vfiprintf_r>:
 8006634:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006636:	b0a1      	sub	sp, #132	; 0x84
 8006638:	000f      	movs	r7, r1
 800663a:	0015      	movs	r5, r2
 800663c:	001e      	movs	r6, r3
 800663e:	9003      	str	r0, [sp, #12]
 8006640:	2800      	cmp	r0, #0
 8006642:	d004      	beq.n	800664e <_vfiprintf_r+0x1a>
 8006644:	6a03      	ldr	r3, [r0, #32]
 8006646:	2b00      	cmp	r3, #0
 8006648:	d101      	bne.n	800664e <_vfiprintf_r+0x1a>
 800664a:	f7ff fb01 	bl	8005c50 <__sinit>
 800664e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006650:	07db      	lsls	r3, r3, #31
 8006652:	d405      	bmi.n	8006660 <_vfiprintf_r+0x2c>
 8006654:	89bb      	ldrh	r3, [r7, #12]
 8006656:	059b      	lsls	r3, r3, #22
 8006658:	d402      	bmi.n	8006660 <_vfiprintf_r+0x2c>
 800665a:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800665c:	f7ff fdec 	bl	8006238 <__retarget_lock_acquire_recursive>
 8006660:	89bb      	ldrh	r3, [r7, #12]
 8006662:	071b      	lsls	r3, r3, #28
 8006664:	d502      	bpl.n	800666c <_vfiprintf_r+0x38>
 8006666:	693b      	ldr	r3, [r7, #16]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d113      	bne.n	8006694 <_vfiprintf_r+0x60>
 800666c:	0039      	movs	r1, r7
 800666e:	9803      	ldr	r0, [sp, #12]
 8006670:	f7ff fc40 	bl	8005ef4 <__swsetup_r>
 8006674:	2800      	cmp	r0, #0
 8006676:	d00d      	beq.n	8006694 <_vfiprintf_r+0x60>
 8006678:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800667a:	07db      	lsls	r3, r3, #31
 800667c:	d503      	bpl.n	8006686 <_vfiprintf_r+0x52>
 800667e:	2001      	movs	r0, #1
 8006680:	4240      	negs	r0, r0
 8006682:	b021      	add	sp, #132	; 0x84
 8006684:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006686:	89bb      	ldrh	r3, [r7, #12]
 8006688:	059b      	lsls	r3, r3, #22
 800668a:	d4f8      	bmi.n	800667e <_vfiprintf_r+0x4a>
 800668c:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800668e:	f7ff fdd4 	bl	800623a <__retarget_lock_release_recursive>
 8006692:	e7f4      	b.n	800667e <_vfiprintf_r+0x4a>
 8006694:	2300      	movs	r3, #0
 8006696:	ac08      	add	r4, sp, #32
 8006698:	6163      	str	r3, [r4, #20]
 800669a:	3320      	adds	r3, #32
 800669c:	7663      	strb	r3, [r4, #25]
 800669e:	3310      	adds	r3, #16
 80066a0:	76a3      	strb	r3, [r4, #26]
 80066a2:	9607      	str	r6, [sp, #28]
 80066a4:	002e      	movs	r6, r5
 80066a6:	7833      	ldrb	r3, [r6, #0]
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d001      	beq.n	80066b0 <_vfiprintf_r+0x7c>
 80066ac:	2b25      	cmp	r3, #37	; 0x25
 80066ae:	d148      	bne.n	8006742 <_vfiprintf_r+0x10e>
 80066b0:	1b73      	subs	r3, r6, r5
 80066b2:	9305      	str	r3, [sp, #20]
 80066b4:	42ae      	cmp	r6, r5
 80066b6:	d00b      	beq.n	80066d0 <_vfiprintf_r+0x9c>
 80066b8:	002a      	movs	r2, r5
 80066ba:	0039      	movs	r1, r7
 80066bc:	9803      	ldr	r0, [sp, #12]
 80066be:	f7ff ffa6 	bl	800660e <__sfputs_r>
 80066c2:	3001      	adds	r0, #1
 80066c4:	d100      	bne.n	80066c8 <_vfiprintf_r+0x94>
 80066c6:	e0af      	b.n	8006828 <_vfiprintf_r+0x1f4>
 80066c8:	6963      	ldr	r3, [r4, #20]
 80066ca:	9a05      	ldr	r2, [sp, #20]
 80066cc:	189b      	adds	r3, r3, r2
 80066ce:	6163      	str	r3, [r4, #20]
 80066d0:	7833      	ldrb	r3, [r6, #0]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d100      	bne.n	80066d8 <_vfiprintf_r+0xa4>
 80066d6:	e0a7      	b.n	8006828 <_vfiprintf_r+0x1f4>
 80066d8:	2201      	movs	r2, #1
 80066da:	2300      	movs	r3, #0
 80066dc:	4252      	negs	r2, r2
 80066de:	6062      	str	r2, [r4, #4]
 80066e0:	a904      	add	r1, sp, #16
 80066e2:	3254      	adds	r2, #84	; 0x54
 80066e4:	1852      	adds	r2, r2, r1
 80066e6:	1c75      	adds	r5, r6, #1
 80066e8:	6023      	str	r3, [r4, #0]
 80066ea:	60e3      	str	r3, [r4, #12]
 80066ec:	60a3      	str	r3, [r4, #8]
 80066ee:	7013      	strb	r3, [r2, #0]
 80066f0:	65a3      	str	r3, [r4, #88]	; 0x58
 80066f2:	4b59      	ldr	r3, [pc, #356]	; (8006858 <_vfiprintf_r+0x224>)
 80066f4:	2205      	movs	r2, #5
 80066f6:	0018      	movs	r0, r3
 80066f8:	7829      	ldrb	r1, [r5, #0]
 80066fa:	9305      	str	r3, [sp, #20]
 80066fc:	f000 fb9a 	bl	8006e34 <memchr>
 8006700:	1c6e      	adds	r6, r5, #1
 8006702:	2800      	cmp	r0, #0
 8006704:	d11f      	bne.n	8006746 <_vfiprintf_r+0x112>
 8006706:	6822      	ldr	r2, [r4, #0]
 8006708:	06d3      	lsls	r3, r2, #27
 800670a:	d504      	bpl.n	8006716 <_vfiprintf_r+0xe2>
 800670c:	2353      	movs	r3, #83	; 0x53
 800670e:	a904      	add	r1, sp, #16
 8006710:	185b      	adds	r3, r3, r1
 8006712:	2120      	movs	r1, #32
 8006714:	7019      	strb	r1, [r3, #0]
 8006716:	0713      	lsls	r3, r2, #28
 8006718:	d504      	bpl.n	8006724 <_vfiprintf_r+0xf0>
 800671a:	2353      	movs	r3, #83	; 0x53
 800671c:	a904      	add	r1, sp, #16
 800671e:	185b      	adds	r3, r3, r1
 8006720:	212b      	movs	r1, #43	; 0x2b
 8006722:	7019      	strb	r1, [r3, #0]
 8006724:	782b      	ldrb	r3, [r5, #0]
 8006726:	2b2a      	cmp	r3, #42	; 0x2a
 8006728:	d016      	beq.n	8006758 <_vfiprintf_r+0x124>
 800672a:	002e      	movs	r6, r5
 800672c:	2100      	movs	r1, #0
 800672e:	200a      	movs	r0, #10
 8006730:	68e3      	ldr	r3, [r4, #12]
 8006732:	7832      	ldrb	r2, [r6, #0]
 8006734:	1c75      	adds	r5, r6, #1
 8006736:	3a30      	subs	r2, #48	; 0x30
 8006738:	2a09      	cmp	r2, #9
 800673a:	d94e      	bls.n	80067da <_vfiprintf_r+0x1a6>
 800673c:	2900      	cmp	r1, #0
 800673e:	d111      	bne.n	8006764 <_vfiprintf_r+0x130>
 8006740:	e017      	b.n	8006772 <_vfiprintf_r+0x13e>
 8006742:	3601      	adds	r6, #1
 8006744:	e7af      	b.n	80066a6 <_vfiprintf_r+0x72>
 8006746:	9b05      	ldr	r3, [sp, #20]
 8006748:	6822      	ldr	r2, [r4, #0]
 800674a:	1ac0      	subs	r0, r0, r3
 800674c:	2301      	movs	r3, #1
 800674e:	4083      	lsls	r3, r0
 8006750:	4313      	orrs	r3, r2
 8006752:	0035      	movs	r5, r6
 8006754:	6023      	str	r3, [r4, #0]
 8006756:	e7cc      	b.n	80066f2 <_vfiprintf_r+0xbe>
 8006758:	9b07      	ldr	r3, [sp, #28]
 800675a:	1d19      	adds	r1, r3, #4
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	9107      	str	r1, [sp, #28]
 8006760:	2b00      	cmp	r3, #0
 8006762:	db01      	blt.n	8006768 <_vfiprintf_r+0x134>
 8006764:	930b      	str	r3, [sp, #44]	; 0x2c
 8006766:	e004      	b.n	8006772 <_vfiprintf_r+0x13e>
 8006768:	425b      	negs	r3, r3
 800676a:	60e3      	str	r3, [r4, #12]
 800676c:	2302      	movs	r3, #2
 800676e:	4313      	orrs	r3, r2
 8006770:	6023      	str	r3, [r4, #0]
 8006772:	7833      	ldrb	r3, [r6, #0]
 8006774:	2b2e      	cmp	r3, #46	; 0x2e
 8006776:	d10a      	bne.n	800678e <_vfiprintf_r+0x15a>
 8006778:	7873      	ldrb	r3, [r6, #1]
 800677a:	2b2a      	cmp	r3, #42	; 0x2a
 800677c:	d135      	bne.n	80067ea <_vfiprintf_r+0x1b6>
 800677e:	9b07      	ldr	r3, [sp, #28]
 8006780:	3602      	adds	r6, #2
 8006782:	1d1a      	adds	r2, r3, #4
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	9207      	str	r2, [sp, #28]
 8006788:	2b00      	cmp	r3, #0
 800678a:	db2b      	blt.n	80067e4 <_vfiprintf_r+0x1b0>
 800678c:	9309      	str	r3, [sp, #36]	; 0x24
 800678e:	4d33      	ldr	r5, [pc, #204]	; (800685c <_vfiprintf_r+0x228>)
 8006790:	2203      	movs	r2, #3
 8006792:	0028      	movs	r0, r5
 8006794:	7831      	ldrb	r1, [r6, #0]
 8006796:	f000 fb4d 	bl	8006e34 <memchr>
 800679a:	2800      	cmp	r0, #0
 800679c:	d006      	beq.n	80067ac <_vfiprintf_r+0x178>
 800679e:	2340      	movs	r3, #64	; 0x40
 80067a0:	1b40      	subs	r0, r0, r5
 80067a2:	4083      	lsls	r3, r0
 80067a4:	6822      	ldr	r2, [r4, #0]
 80067a6:	3601      	adds	r6, #1
 80067a8:	4313      	orrs	r3, r2
 80067aa:	6023      	str	r3, [r4, #0]
 80067ac:	7831      	ldrb	r1, [r6, #0]
 80067ae:	2206      	movs	r2, #6
 80067b0:	482b      	ldr	r0, [pc, #172]	; (8006860 <_vfiprintf_r+0x22c>)
 80067b2:	1c75      	adds	r5, r6, #1
 80067b4:	7621      	strb	r1, [r4, #24]
 80067b6:	f000 fb3d 	bl	8006e34 <memchr>
 80067ba:	2800      	cmp	r0, #0
 80067bc:	d043      	beq.n	8006846 <_vfiprintf_r+0x212>
 80067be:	4b29      	ldr	r3, [pc, #164]	; (8006864 <_vfiprintf_r+0x230>)
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d125      	bne.n	8006810 <_vfiprintf_r+0x1dc>
 80067c4:	2207      	movs	r2, #7
 80067c6:	9b07      	ldr	r3, [sp, #28]
 80067c8:	3307      	adds	r3, #7
 80067ca:	4393      	bics	r3, r2
 80067cc:	3308      	adds	r3, #8
 80067ce:	9307      	str	r3, [sp, #28]
 80067d0:	6963      	ldr	r3, [r4, #20]
 80067d2:	9a04      	ldr	r2, [sp, #16]
 80067d4:	189b      	adds	r3, r3, r2
 80067d6:	6163      	str	r3, [r4, #20]
 80067d8:	e764      	b.n	80066a4 <_vfiprintf_r+0x70>
 80067da:	4343      	muls	r3, r0
 80067dc:	002e      	movs	r6, r5
 80067de:	2101      	movs	r1, #1
 80067e0:	189b      	adds	r3, r3, r2
 80067e2:	e7a6      	b.n	8006732 <_vfiprintf_r+0xfe>
 80067e4:	2301      	movs	r3, #1
 80067e6:	425b      	negs	r3, r3
 80067e8:	e7d0      	b.n	800678c <_vfiprintf_r+0x158>
 80067ea:	2300      	movs	r3, #0
 80067ec:	200a      	movs	r0, #10
 80067ee:	001a      	movs	r2, r3
 80067f0:	3601      	adds	r6, #1
 80067f2:	6063      	str	r3, [r4, #4]
 80067f4:	7831      	ldrb	r1, [r6, #0]
 80067f6:	1c75      	adds	r5, r6, #1
 80067f8:	3930      	subs	r1, #48	; 0x30
 80067fa:	2909      	cmp	r1, #9
 80067fc:	d903      	bls.n	8006806 <_vfiprintf_r+0x1d2>
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d0c5      	beq.n	800678e <_vfiprintf_r+0x15a>
 8006802:	9209      	str	r2, [sp, #36]	; 0x24
 8006804:	e7c3      	b.n	800678e <_vfiprintf_r+0x15a>
 8006806:	4342      	muls	r2, r0
 8006808:	002e      	movs	r6, r5
 800680a:	2301      	movs	r3, #1
 800680c:	1852      	adds	r2, r2, r1
 800680e:	e7f1      	b.n	80067f4 <_vfiprintf_r+0x1c0>
 8006810:	aa07      	add	r2, sp, #28
 8006812:	9200      	str	r2, [sp, #0]
 8006814:	0021      	movs	r1, r4
 8006816:	003a      	movs	r2, r7
 8006818:	4b13      	ldr	r3, [pc, #76]	; (8006868 <_vfiprintf_r+0x234>)
 800681a:	9803      	ldr	r0, [sp, #12]
 800681c:	e000      	b.n	8006820 <_vfiprintf_r+0x1ec>
 800681e:	bf00      	nop
 8006820:	9004      	str	r0, [sp, #16]
 8006822:	9b04      	ldr	r3, [sp, #16]
 8006824:	3301      	adds	r3, #1
 8006826:	d1d3      	bne.n	80067d0 <_vfiprintf_r+0x19c>
 8006828:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800682a:	07db      	lsls	r3, r3, #31
 800682c:	d405      	bmi.n	800683a <_vfiprintf_r+0x206>
 800682e:	89bb      	ldrh	r3, [r7, #12]
 8006830:	059b      	lsls	r3, r3, #22
 8006832:	d402      	bmi.n	800683a <_vfiprintf_r+0x206>
 8006834:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8006836:	f7ff fd00 	bl	800623a <__retarget_lock_release_recursive>
 800683a:	89bb      	ldrh	r3, [r7, #12]
 800683c:	065b      	lsls	r3, r3, #25
 800683e:	d500      	bpl.n	8006842 <_vfiprintf_r+0x20e>
 8006840:	e71d      	b.n	800667e <_vfiprintf_r+0x4a>
 8006842:	980d      	ldr	r0, [sp, #52]	; 0x34
 8006844:	e71d      	b.n	8006682 <_vfiprintf_r+0x4e>
 8006846:	aa07      	add	r2, sp, #28
 8006848:	9200      	str	r2, [sp, #0]
 800684a:	0021      	movs	r1, r4
 800684c:	003a      	movs	r2, r7
 800684e:	4b06      	ldr	r3, [pc, #24]	; (8006868 <_vfiprintf_r+0x234>)
 8006850:	9803      	ldr	r0, [sp, #12]
 8006852:	f000 f87b 	bl	800694c <_printf_i>
 8006856:	e7e3      	b.n	8006820 <_vfiprintf_r+0x1ec>
 8006858:	08007366 	.word	0x08007366
 800685c:	0800736c 	.word	0x0800736c
 8006860:	08007370 	.word	0x08007370
 8006864:	00000000 	.word	0x00000000
 8006868:	0800660f 	.word	0x0800660f

0800686c <_printf_common>:
 800686c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800686e:	0016      	movs	r6, r2
 8006870:	9301      	str	r3, [sp, #4]
 8006872:	688a      	ldr	r2, [r1, #8]
 8006874:	690b      	ldr	r3, [r1, #16]
 8006876:	000c      	movs	r4, r1
 8006878:	9000      	str	r0, [sp, #0]
 800687a:	4293      	cmp	r3, r2
 800687c:	da00      	bge.n	8006880 <_printf_common+0x14>
 800687e:	0013      	movs	r3, r2
 8006880:	0022      	movs	r2, r4
 8006882:	6033      	str	r3, [r6, #0]
 8006884:	3243      	adds	r2, #67	; 0x43
 8006886:	7812      	ldrb	r2, [r2, #0]
 8006888:	2a00      	cmp	r2, #0
 800688a:	d001      	beq.n	8006890 <_printf_common+0x24>
 800688c:	3301      	adds	r3, #1
 800688e:	6033      	str	r3, [r6, #0]
 8006890:	6823      	ldr	r3, [r4, #0]
 8006892:	069b      	lsls	r3, r3, #26
 8006894:	d502      	bpl.n	800689c <_printf_common+0x30>
 8006896:	6833      	ldr	r3, [r6, #0]
 8006898:	3302      	adds	r3, #2
 800689a:	6033      	str	r3, [r6, #0]
 800689c:	6822      	ldr	r2, [r4, #0]
 800689e:	2306      	movs	r3, #6
 80068a0:	0015      	movs	r5, r2
 80068a2:	401d      	ands	r5, r3
 80068a4:	421a      	tst	r2, r3
 80068a6:	d027      	beq.n	80068f8 <_printf_common+0x8c>
 80068a8:	0023      	movs	r3, r4
 80068aa:	3343      	adds	r3, #67	; 0x43
 80068ac:	781b      	ldrb	r3, [r3, #0]
 80068ae:	1e5a      	subs	r2, r3, #1
 80068b0:	4193      	sbcs	r3, r2
 80068b2:	6822      	ldr	r2, [r4, #0]
 80068b4:	0692      	lsls	r2, r2, #26
 80068b6:	d430      	bmi.n	800691a <_printf_common+0xae>
 80068b8:	0022      	movs	r2, r4
 80068ba:	9901      	ldr	r1, [sp, #4]
 80068bc:	9800      	ldr	r0, [sp, #0]
 80068be:	9d08      	ldr	r5, [sp, #32]
 80068c0:	3243      	adds	r2, #67	; 0x43
 80068c2:	47a8      	blx	r5
 80068c4:	3001      	adds	r0, #1
 80068c6:	d025      	beq.n	8006914 <_printf_common+0xa8>
 80068c8:	2206      	movs	r2, #6
 80068ca:	6823      	ldr	r3, [r4, #0]
 80068cc:	2500      	movs	r5, #0
 80068ce:	4013      	ands	r3, r2
 80068d0:	2b04      	cmp	r3, #4
 80068d2:	d105      	bne.n	80068e0 <_printf_common+0x74>
 80068d4:	6833      	ldr	r3, [r6, #0]
 80068d6:	68e5      	ldr	r5, [r4, #12]
 80068d8:	1aed      	subs	r5, r5, r3
 80068da:	43eb      	mvns	r3, r5
 80068dc:	17db      	asrs	r3, r3, #31
 80068de:	401d      	ands	r5, r3
 80068e0:	68a3      	ldr	r3, [r4, #8]
 80068e2:	6922      	ldr	r2, [r4, #16]
 80068e4:	4293      	cmp	r3, r2
 80068e6:	dd01      	ble.n	80068ec <_printf_common+0x80>
 80068e8:	1a9b      	subs	r3, r3, r2
 80068ea:	18ed      	adds	r5, r5, r3
 80068ec:	2600      	movs	r6, #0
 80068ee:	42b5      	cmp	r5, r6
 80068f0:	d120      	bne.n	8006934 <_printf_common+0xc8>
 80068f2:	2000      	movs	r0, #0
 80068f4:	e010      	b.n	8006918 <_printf_common+0xac>
 80068f6:	3501      	adds	r5, #1
 80068f8:	68e3      	ldr	r3, [r4, #12]
 80068fa:	6832      	ldr	r2, [r6, #0]
 80068fc:	1a9b      	subs	r3, r3, r2
 80068fe:	42ab      	cmp	r3, r5
 8006900:	ddd2      	ble.n	80068a8 <_printf_common+0x3c>
 8006902:	0022      	movs	r2, r4
 8006904:	2301      	movs	r3, #1
 8006906:	9901      	ldr	r1, [sp, #4]
 8006908:	9800      	ldr	r0, [sp, #0]
 800690a:	9f08      	ldr	r7, [sp, #32]
 800690c:	3219      	adds	r2, #25
 800690e:	47b8      	blx	r7
 8006910:	3001      	adds	r0, #1
 8006912:	d1f0      	bne.n	80068f6 <_printf_common+0x8a>
 8006914:	2001      	movs	r0, #1
 8006916:	4240      	negs	r0, r0
 8006918:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800691a:	2030      	movs	r0, #48	; 0x30
 800691c:	18e1      	adds	r1, r4, r3
 800691e:	3143      	adds	r1, #67	; 0x43
 8006920:	7008      	strb	r0, [r1, #0]
 8006922:	0021      	movs	r1, r4
 8006924:	1c5a      	adds	r2, r3, #1
 8006926:	3145      	adds	r1, #69	; 0x45
 8006928:	7809      	ldrb	r1, [r1, #0]
 800692a:	18a2      	adds	r2, r4, r2
 800692c:	3243      	adds	r2, #67	; 0x43
 800692e:	3302      	adds	r3, #2
 8006930:	7011      	strb	r1, [r2, #0]
 8006932:	e7c1      	b.n	80068b8 <_printf_common+0x4c>
 8006934:	0022      	movs	r2, r4
 8006936:	2301      	movs	r3, #1
 8006938:	9901      	ldr	r1, [sp, #4]
 800693a:	9800      	ldr	r0, [sp, #0]
 800693c:	9f08      	ldr	r7, [sp, #32]
 800693e:	321a      	adds	r2, #26
 8006940:	47b8      	blx	r7
 8006942:	3001      	adds	r0, #1
 8006944:	d0e6      	beq.n	8006914 <_printf_common+0xa8>
 8006946:	3601      	adds	r6, #1
 8006948:	e7d1      	b.n	80068ee <_printf_common+0x82>
	...

0800694c <_printf_i>:
 800694c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800694e:	b08b      	sub	sp, #44	; 0x2c
 8006950:	9206      	str	r2, [sp, #24]
 8006952:	000a      	movs	r2, r1
 8006954:	3243      	adds	r2, #67	; 0x43
 8006956:	9307      	str	r3, [sp, #28]
 8006958:	9005      	str	r0, [sp, #20]
 800695a:	9204      	str	r2, [sp, #16]
 800695c:	7e0a      	ldrb	r2, [r1, #24]
 800695e:	000c      	movs	r4, r1
 8006960:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006962:	2a78      	cmp	r2, #120	; 0x78
 8006964:	d809      	bhi.n	800697a <_printf_i+0x2e>
 8006966:	2a62      	cmp	r2, #98	; 0x62
 8006968:	d80b      	bhi.n	8006982 <_printf_i+0x36>
 800696a:	2a00      	cmp	r2, #0
 800696c:	d100      	bne.n	8006970 <_printf_i+0x24>
 800696e:	e0be      	b.n	8006aee <_printf_i+0x1a2>
 8006970:	497c      	ldr	r1, [pc, #496]	; (8006b64 <_printf_i+0x218>)
 8006972:	9103      	str	r1, [sp, #12]
 8006974:	2a58      	cmp	r2, #88	; 0x58
 8006976:	d100      	bne.n	800697a <_printf_i+0x2e>
 8006978:	e093      	b.n	8006aa2 <_printf_i+0x156>
 800697a:	0026      	movs	r6, r4
 800697c:	3642      	adds	r6, #66	; 0x42
 800697e:	7032      	strb	r2, [r6, #0]
 8006980:	e022      	b.n	80069c8 <_printf_i+0x7c>
 8006982:	0010      	movs	r0, r2
 8006984:	3863      	subs	r0, #99	; 0x63
 8006986:	2815      	cmp	r0, #21
 8006988:	d8f7      	bhi.n	800697a <_printf_i+0x2e>
 800698a:	f7f9 fbcf 	bl	800012c <__gnu_thumb1_case_shi>
 800698e:	0016      	.short	0x0016
 8006990:	fff6001f 	.word	0xfff6001f
 8006994:	fff6fff6 	.word	0xfff6fff6
 8006998:	001ffff6 	.word	0x001ffff6
 800699c:	fff6fff6 	.word	0xfff6fff6
 80069a0:	fff6fff6 	.word	0xfff6fff6
 80069a4:	003600a3 	.word	0x003600a3
 80069a8:	fff60083 	.word	0xfff60083
 80069ac:	00b4fff6 	.word	0x00b4fff6
 80069b0:	0036fff6 	.word	0x0036fff6
 80069b4:	fff6fff6 	.word	0xfff6fff6
 80069b8:	0087      	.short	0x0087
 80069ba:	0026      	movs	r6, r4
 80069bc:	681a      	ldr	r2, [r3, #0]
 80069be:	3642      	adds	r6, #66	; 0x42
 80069c0:	1d11      	adds	r1, r2, #4
 80069c2:	6019      	str	r1, [r3, #0]
 80069c4:	6813      	ldr	r3, [r2, #0]
 80069c6:	7033      	strb	r3, [r6, #0]
 80069c8:	2301      	movs	r3, #1
 80069ca:	e0a2      	b.n	8006b12 <_printf_i+0x1c6>
 80069cc:	6818      	ldr	r0, [r3, #0]
 80069ce:	6809      	ldr	r1, [r1, #0]
 80069d0:	1d02      	adds	r2, r0, #4
 80069d2:	060d      	lsls	r5, r1, #24
 80069d4:	d50b      	bpl.n	80069ee <_printf_i+0xa2>
 80069d6:	6805      	ldr	r5, [r0, #0]
 80069d8:	601a      	str	r2, [r3, #0]
 80069da:	2d00      	cmp	r5, #0
 80069dc:	da03      	bge.n	80069e6 <_printf_i+0x9a>
 80069de:	232d      	movs	r3, #45	; 0x2d
 80069e0:	9a04      	ldr	r2, [sp, #16]
 80069e2:	426d      	negs	r5, r5
 80069e4:	7013      	strb	r3, [r2, #0]
 80069e6:	4b5f      	ldr	r3, [pc, #380]	; (8006b64 <_printf_i+0x218>)
 80069e8:	270a      	movs	r7, #10
 80069ea:	9303      	str	r3, [sp, #12]
 80069ec:	e01b      	b.n	8006a26 <_printf_i+0xda>
 80069ee:	6805      	ldr	r5, [r0, #0]
 80069f0:	601a      	str	r2, [r3, #0]
 80069f2:	0649      	lsls	r1, r1, #25
 80069f4:	d5f1      	bpl.n	80069da <_printf_i+0x8e>
 80069f6:	b22d      	sxth	r5, r5
 80069f8:	e7ef      	b.n	80069da <_printf_i+0x8e>
 80069fa:	680d      	ldr	r5, [r1, #0]
 80069fc:	6819      	ldr	r1, [r3, #0]
 80069fe:	1d08      	adds	r0, r1, #4
 8006a00:	6018      	str	r0, [r3, #0]
 8006a02:	062e      	lsls	r6, r5, #24
 8006a04:	d501      	bpl.n	8006a0a <_printf_i+0xbe>
 8006a06:	680d      	ldr	r5, [r1, #0]
 8006a08:	e003      	b.n	8006a12 <_printf_i+0xc6>
 8006a0a:	066d      	lsls	r5, r5, #25
 8006a0c:	d5fb      	bpl.n	8006a06 <_printf_i+0xba>
 8006a0e:	680d      	ldr	r5, [r1, #0]
 8006a10:	b2ad      	uxth	r5, r5
 8006a12:	4b54      	ldr	r3, [pc, #336]	; (8006b64 <_printf_i+0x218>)
 8006a14:	2708      	movs	r7, #8
 8006a16:	9303      	str	r3, [sp, #12]
 8006a18:	2a6f      	cmp	r2, #111	; 0x6f
 8006a1a:	d000      	beq.n	8006a1e <_printf_i+0xd2>
 8006a1c:	3702      	adds	r7, #2
 8006a1e:	0023      	movs	r3, r4
 8006a20:	2200      	movs	r2, #0
 8006a22:	3343      	adds	r3, #67	; 0x43
 8006a24:	701a      	strb	r2, [r3, #0]
 8006a26:	6863      	ldr	r3, [r4, #4]
 8006a28:	60a3      	str	r3, [r4, #8]
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	db03      	blt.n	8006a36 <_printf_i+0xea>
 8006a2e:	2104      	movs	r1, #4
 8006a30:	6822      	ldr	r2, [r4, #0]
 8006a32:	438a      	bics	r2, r1
 8006a34:	6022      	str	r2, [r4, #0]
 8006a36:	2d00      	cmp	r5, #0
 8006a38:	d102      	bne.n	8006a40 <_printf_i+0xf4>
 8006a3a:	9e04      	ldr	r6, [sp, #16]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d00c      	beq.n	8006a5a <_printf_i+0x10e>
 8006a40:	9e04      	ldr	r6, [sp, #16]
 8006a42:	0028      	movs	r0, r5
 8006a44:	0039      	movs	r1, r7
 8006a46:	f7f9 fc01 	bl	800024c <__aeabi_uidivmod>
 8006a4a:	9b03      	ldr	r3, [sp, #12]
 8006a4c:	3e01      	subs	r6, #1
 8006a4e:	5c5b      	ldrb	r3, [r3, r1]
 8006a50:	7033      	strb	r3, [r6, #0]
 8006a52:	002b      	movs	r3, r5
 8006a54:	0005      	movs	r5, r0
 8006a56:	429f      	cmp	r7, r3
 8006a58:	d9f3      	bls.n	8006a42 <_printf_i+0xf6>
 8006a5a:	2f08      	cmp	r7, #8
 8006a5c:	d109      	bne.n	8006a72 <_printf_i+0x126>
 8006a5e:	6823      	ldr	r3, [r4, #0]
 8006a60:	07db      	lsls	r3, r3, #31
 8006a62:	d506      	bpl.n	8006a72 <_printf_i+0x126>
 8006a64:	6862      	ldr	r2, [r4, #4]
 8006a66:	6923      	ldr	r3, [r4, #16]
 8006a68:	429a      	cmp	r2, r3
 8006a6a:	dc02      	bgt.n	8006a72 <_printf_i+0x126>
 8006a6c:	2330      	movs	r3, #48	; 0x30
 8006a6e:	3e01      	subs	r6, #1
 8006a70:	7033      	strb	r3, [r6, #0]
 8006a72:	9b04      	ldr	r3, [sp, #16]
 8006a74:	1b9b      	subs	r3, r3, r6
 8006a76:	6123      	str	r3, [r4, #16]
 8006a78:	9b07      	ldr	r3, [sp, #28]
 8006a7a:	0021      	movs	r1, r4
 8006a7c:	9300      	str	r3, [sp, #0]
 8006a7e:	9805      	ldr	r0, [sp, #20]
 8006a80:	9b06      	ldr	r3, [sp, #24]
 8006a82:	aa09      	add	r2, sp, #36	; 0x24
 8006a84:	f7ff fef2 	bl	800686c <_printf_common>
 8006a88:	3001      	adds	r0, #1
 8006a8a:	d147      	bne.n	8006b1c <_printf_i+0x1d0>
 8006a8c:	2001      	movs	r0, #1
 8006a8e:	4240      	negs	r0, r0
 8006a90:	b00b      	add	sp, #44	; 0x2c
 8006a92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006a94:	2220      	movs	r2, #32
 8006a96:	6809      	ldr	r1, [r1, #0]
 8006a98:	430a      	orrs	r2, r1
 8006a9a:	6022      	str	r2, [r4, #0]
 8006a9c:	2278      	movs	r2, #120	; 0x78
 8006a9e:	4932      	ldr	r1, [pc, #200]	; (8006b68 <_printf_i+0x21c>)
 8006aa0:	9103      	str	r1, [sp, #12]
 8006aa2:	0021      	movs	r1, r4
 8006aa4:	3145      	adds	r1, #69	; 0x45
 8006aa6:	700a      	strb	r2, [r1, #0]
 8006aa8:	6819      	ldr	r1, [r3, #0]
 8006aaa:	6822      	ldr	r2, [r4, #0]
 8006aac:	c920      	ldmia	r1!, {r5}
 8006aae:	0610      	lsls	r0, r2, #24
 8006ab0:	d402      	bmi.n	8006ab8 <_printf_i+0x16c>
 8006ab2:	0650      	lsls	r0, r2, #25
 8006ab4:	d500      	bpl.n	8006ab8 <_printf_i+0x16c>
 8006ab6:	b2ad      	uxth	r5, r5
 8006ab8:	6019      	str	r1, [r3, #0]
 8006aba:	07d3      	lsls	r3, r2, #31
 8006abc:	d502      	bpl.n	8006ac4 <_printf_i+0x178>
 8006abe:	2320      	movs	r3, #32
 8006ac0:	4313      	orrs	r3, r2
 8006ac2:	6023      	str	r3, [r4, #0]
 8006ac4:	2710      	movs	r7, #16
 8006ac6:	2d00      	cmp	r5, #0
 8006ac8:	d1a9      	bne.n	8006a1e <_printf_i+0xd2>
 8006aca:	2220      	movs	r2, #32
 8006acc:	6823      	ldr	r3, [r4, #0]
 8006ace:	4393      	bics	r3, r2
 8006ad0:	6023      	str	r3, [r4, #0]
 8006ad2:	e7a4      	b.n	8006a1e <_printf_i+0xd2>
 8006ad4:	681a      	ldr	r2, [r3, #0]
 8006ad6:	680d      	ldr	r5, [r1, #0]
 8006ad8:	1d10      	adds	r0, r2, #4
 8006ada:	6949      	ldr	r1, [r1, #20]
 8006adc:	6018      	str	r0, [r3, #0]
 8006ade:	6813      	ldr	r3, [r2, #0]
 8006ae0:	062e      	lsls	r6, r5, #24
 8006ae2:	d501      	bpl.n	8006ae8 <_printf_i+0x19c>
 8006ae4:	6019      	str	r1, [r3, #0]
 8006ae6:	e002      	b.n	8006aee <_printf_i+0x1a2>
 8006ae8:	066d      	lsls	r5, r5, #25
 8006aea:	d5fb      	bpl.n	8006ae4 <_printf_i+0x198>
 8006aec:	8019      	strh	r1, [r3, #0]
 8006aee:	2300      	movs	r3, #0
 8006af0:	9e04      	ldr	r6, [sp, #16]
 8006af2:	6123      	str	r3, [r4, #16]
 8006af4:	e7c0      	b.n	8006a78 <_printf_i+0x12c>
 8006af6:	681a      	ldr	r2, [r3, #0]
 8006af8:	1d11      	adds	r1, r2, #4
 8006afa:	6019      	str	r1, [r3, #0]
 8006afc:	6816      	ldr	r6, [r2, #0]
 8006afe:	2100      	movs	r1, #0
 8006b00:	0030      	movs	r0, r6
 8006b02:	6862      	ldr	r2, [r4, #4]
 8006b04:	f000 f996 	bl	8006e34 <memchr>
 8006b08:	2800      	cmp	r0, #0
 8006b0a:	d001      	beq.n	8006b10 <_printf_i+0x1c4>
 8006b0c:	1b80      	subs	r0, r0, r6
 8006b0e:	6060      	str	r0, [r4, #4]
 8006b10:	6863      	ldr	r3, [r4, #4]
 8006b12:	6123      	str	r3, [r4, #16]
 8006b14:	2300      	movs	r3, #0
 8006b16:	9a04      	ldr	r2, [sp, #16]
 8006b18:	7013      	strb	r3, [r2, #0]
 8006b1a:	e7ad      	b.n	8006a78 <_printf_i+0x12c>
 8006b1c:	0032      	movs	r2, r6
 8006b1e:	6923      	ldr	r3, [r4, #16]
 8006b20:	9906      	ldr	r1, [sp, #24]
 8006b22:	9805      	ldr	r0, [sp, #20]
 8006b24:	9d07      	ldr	r5, [sp, #28]
 8006b26:	47a8      	blx	r5
 8006b28:	3001      	adds	r0, #1
 8006b2a:	d0af      	beq.n	8006a8c <_printf_i+0x140>
 8006b2c:	6823      	ldr	r3, [r4, #0]
 8006b2e:	079b      	lsls	r3, r3, #30
 8006b30:	d415      	bmi.n	8006b5e <_printf_i+0x212>
 8006b32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b34:	68e0      	ldr	r0, [r4, #12]
 8006b36:	4298      	cmp	r0, r3
 8006b38:	daaa      	bge.n	8006a90 <_printf_i+0x144>
 8006b3a:	0018      	movs	r0, r3
 8006b3c:	e7a8      	b.n	8006a90 <_printf_i+0x144>
 8006b3e:	0022      	movs	r2, r4
 8006b40:	2301      	movs	r3, #1
 8006b42:	9906      	ldr	r1, [sp, #24]
 8006b44:	9805      	ldr	r0, [sp, #20]
 8006b46:	9e07      	ldr	r6, [sp, #28]
 8006b48:	3219      	adds	r2, #25
 8006b4a:	47b0      	blx	r6
 8006b4c:	3001      	adds	r0, #1
 8006b4e:	d09d      	beq.n	8006a8c <_printf_i+0x140>
 8006b50:	3501      	adds	r5, #1
 8006b52:	68e3      	ldr	r3, [r4, #12]
 8006b54:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006b56:	1a9b      	subs	r3, r3, r2
 8006b58:	42ab      	cmp	r3, r5
 8006b5a:	dcf0      	bgt.n	8006b3e <_printf_i+0x1f2>
 8006b5c:	e7e9      	b.n	8006b32 <_printf_i+0x1e6>
 8006b5e:	2500      	movs	r5, #0
 8006b60:	e7f7      	b.n	8006b52 <_printf_i+0x206>
 8006b62:	46c0      	nop			; (mov r8, r8)
 8006b64:	08007377 	.word	0x08007377
 8006b68:	08007388 	.word	0x08007388

08006b6c <__sflush_r>:
 8006b6c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006b6e:	898b      	ldrh	r3, [r1, #12]
 8006b70:	0005      	movs	r5, r0
 8006b72:	000c      	movs	r4, r1
 8006b74:	071a      	lsls	r2, r3, #28
 8006b76:	d45c      	bmi.n	8006c32 <__sflush_r+0xc6>
 8006b78:	684a      	ldr	r2, [r1, #4]
 8006b7a:	2a00      	cmp	r2, #0
 8006b7c:	dc04      	bgt.n	8006b88 <__sflush_r+0x1c>
 8006b7e:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8006b80:	2a00      	cmp	r2, #0
 8006b82:	dc01      	bgt.n	8006b88 <__sflush_r+0x1c>
 8006b84:	2000      	movs	r0, #0
 8006b86:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006b88:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8006b8a:	2f00      	cmp	r7, #0
 8006b8c:	d0fa      	beq.n	8006b84 <__sflush_r+0x18>
 8006b8e:	2200      	movs	r2, #0
 8006b90:	2080      	movs	r0, #128	; 0x80
 8006b92:	682e      	ldr	r6, [r5, #0]
 8006b94:	602a      	str	r2, [r5, #0]
 8006b96:	001a      	movs	r2, r3
 8006b98:	0140      	lsls	r0, r0, #5
 8006b9a:	6a21      	ldr	r1, [r4, #32]
 8006b9c:	4002      	ands	r2, r0
 8006b9e:	4203      	tst	r3, r0
 8006ba0:	d034      	beq.n	8006c0c <__sflush_r+0xa0>
 8006ba2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006ba4:	89a3      	ldrh	r3, [r4, #12]
 8006ba6:	075b      	lsls	r3, r3, #29
 8006ba8:	d506      	bpl.n	8006bb8 <__sflush_r+0x4c>
 8006baa:	6863      	ldr	r3, [r4, #4]
 8006bac:	1ac0      	subs	r0, r0, r3
 8006bae:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d001      	beq.n	8006bb8 <__sflush_r+0x4c>
 8006bb4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006bb6:	1ac0      	subs	r0, r0, r3
 8006bb8:	0002      	movs	r2, r0
 8006bba:	2300      	movs	r3, #0
 8006bbc:	0028      	movs	r0, r5
 8006bbe:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8006bc0:	6a21      	ldr	r1, [r4, #32]
 8006bc2:	47b8      	blx	r7
 8006bc4:	89a2      	ldrh	r2, [r4, #12]
 8006bc6:	1c43      	adds	r3, r0, #1
 8006bc8:	d106      	bne.n	8006bd8 <__sflush_r+0x6c>
 8006bca:	6829      	ldr	r1, [r5, #0]
 8006bcc:	291d      	cmp	r1, #29
 8006bce:	d82c      	bhi.n	8006c2a <__sflush_r+0xbe>
 8006bd0:	4b2a      	ldr	r3, [pc, #168]	; (8006c7c <__sflush_r+0x110>)
 8006bd2:	410b      	asrs	r3, r1
 8006bd4:	07db      	lsls	r3, r3, #31
 8006bd6:	d428      	bmi.n	8006c2a <__sflush_r+0xbe>
 8006bd8:	2300      	movs	r3, #0
 8006bda:	6063      	str	r3, [r4, #4]
 8006bdc:	6923      	ldr	r3, [r4, #16]
 8006bde:	6023      	str	r3, [r4, #0]
 8006be0:	04d2      	lsls	r2, r2, #19
 8006be2:	d505      	bpl.n	8006bf0 <__sflush_r+0x84>
 8006be4:	1c43      	adds	r3, r0, #1
 8006be6:	d102      	bne.n	8006bee <__sflush_r+0x82>
 8006be8:	682b      	ldr	r3, [r5, #0]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d100      	bne.n	8006bf0 <__sflush_r+0x84>
 8006bee:	6560      	str	r0, [r4, #84]	; 0x54
 8006bf0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006bf2:	602e      	str	r6, [r5, #0]
 8006bf4:	2900      	cmp	r1, #0
 8006bf6:	d0c5      	beq.n	8006b84 <__sflush_r+0x18>
 8006bf8:	0023      	movs	r3, r4
 8006bfa:	3344      	adds	r3, #68	; 0x44
 8006bfc:	4299      	cmp	r1, r3
 8006bfe:	d002      	beq.n	8006c06 <__sflush_r+0x9a>
 8006c00:	0028      	movs	r0, r5
 8006c02:	f7ff fb43 	bl	800628c <_free_r>
 8006c06:	2000      	movs	r0, #0
 8006c08:	6360      	str	r0, [r4, #52]	; 0x34
 8006c0a:	e7bc      	b.n	8006b86 <__sflush_r+0x1a>
 8006c0c:	2301      	movs	r3, #1
 8006c0e:	0028      	movs	r0, r5
 8006c10:	47b8      	blx	r7
 8006c12:	1c43      	adds	r3, r0, #1
 8006c14:	d1c6      	bne.n	8006ba4 <__sflush_r+0x38>
 8006c16:	682b      	ldr	r3, [r5, #0]
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d0c3      	beq.n	8006ba4 <__sflush_r+0x38>
 8006c1c:	2b1d      	cmp	r3, #29
 8006c1e:	d001      	beq.n	8006c24 <__sflush_r+0xb8>
 8006c20:	2b16      	cmp	r3, #22
 8006c22:	d101      	bne.n	8006c28 <__sflush_r+0xbc>
 8006c24:	602e      	str	r6, [r5, #0]
 8006c26:	e7ad      	b.n	8006b84 <__sflush_r+0x18>
 8006c28:	89a2      	ldrh	r2, [r4, #12]
 8006c2a:	2340      	movs	r3, #64	; 0x40
 8006c2c:	4313      	orrs	r3, r2
 8006c2e:	81a3      	strh	r3, [r4, #12]
 8006c30:	e7a9      	b.n	8006b86 <__sflush_r+0x1a>
 8006c32:	690e      	ldr	r6, [r1, #16]
 8006c34:	2e00      	cmp	r6, #0
 8006c36:	d0a5      	beq.n	8006b84 <__sflush_r+0x18>
 8006c38:	680f      	ldr	r7, [r1, #0]
 8006c3a:	600e      	str	r6, [r1, #0]
 8006c3c:	1bba      	subs	r2, r7, r6
 8006c3e:	9201      	str	r2, [sp, #4]
 8006c40:	2200      	movs	r2, #0
 8006c42:	079b      	lsls	r3, r3, #30
 8006c44:	d100      	bne.n	8006c48 <__sflush_r+0xdc>
 8006c46:	694a      	ldr	r2, [r1, #20]
 8006c48:	60a2      	str	r2, [r4, #8]
 8006c4a:	9b01      	ldr	r3, [sp, #4]
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	dd99      	ble.n	8006b84 <__sflush_r+0x18>
 8006c50:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006c52:	0032      	movs	r2, r6
 8006c54:	001f      	movs	r7, r3
 8006c56:	0028      	movs	r0, r5
 8006c58:	9b01      	ldr	r3, [sp, #4]
 8006c5a:	6a21      	ldr	r1, [r4, #32]
 8006c5c:	47b8      	blx	r7
 8006c5e:	2800      	cmp	r0, #0
 8006c60:	dc06      	bgt.n	8006c70 <__sflush_r+0x104>
 8006c62:	2340      	movs	r3, #64	; 0x40
 8006c64:	2001      	movs	r0, #1
 8006c66:	89a2      	ldrh	r2, [r4, #12]
 8006c68:	4240      	negs	r0, r0
 8006c6a:	4313      	orrs	r3, r2
 8006c6c:	81a3      	strh	r3, [r4, #12]
 8006c6e:	e78a      	b.n	8006b86 <__sflush_r+0x1a>
 8006c70:	9b01      	ldr	r3, [sp, #4]
 8006c72:	1836      	adds	r6, r6, r0
 8006c74:	1a1b      	subs	r3, r3, r0
 8006c76:	9301      	str	r3, [sp, #4]
 8006c78:	e7e7      	b.n	8006c4a <__sflush_r+0xde>
 8006c7a:	46c0      	nop			; (mov r8, r8)
 8006c7c:	dfbffffe 	.word	0xdfbffffe

08006c80 <_fflush_r>:
 8006c80:	690b      	ldr	r3, [r1, #16]
 8006c82:	b570      	push	{r4, r5, r6, lr}
 8006c84:	0005      	movs	r5, r0
 8006c86:	000c      	movs	r4, r1
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d102      	bne.n	8006c92 <_fflush_r+0x12>
 8006c8c:	2500      	movs	r5, #0
 8006c8e:	0028      	movs	r0, r5
 8006c90:	bd70      	pop	{r4, r5, r6, pc}
 8006c92:	2800      	cmp	r0, #0
 8006c94:	d004      	beq.n	8006ca0 <_fflush_r+0x20>
 8006c96:	6a03      	ldr	r3, [r0, #32]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d101      	bne.n	8006ca0 <_fflush_r+0x20>
 8006c9c:	f7fe ffd8 	bl	8005c50 <__sinit>
 8006ca0:	220c      	movs	r2, #12
 8006ca2:	5ea3      	ldrsh	r3, [r4, r2]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d0f1      	beq.n	8006c8c <_fflush_r+0xc>
 8006ca8:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006caa:	07d2      	lsls	r2, r2, #31
 8006cac:	d404      	bmi.n	8006cb8 <_fflush_r+0x38>
 8006cae:	059b      	lsls	r3, r3, #22
 8006cb0:	d402      	bmi.n	8006cb8 <_fflush_r+0x38>
 8006cb2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006cb4:	f7ff fac0 	bl	8006238 <__retarget_lock_acquire_recursive>
 8006cb8:	0028      	movs	r0, r5
 8006cba:	0021      	movs	r1, r4
 8006cbc:	f7ff ff56 	bl	8006b6c <__sflush_r>
 8006cc0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006cc2:	0005      	movs	r5, r0
 8006cc4:	07db      	lsls	r3, r3, #31
 8006cc6:	d4e2      	bmi.n	8006c8e <_fflush_r+0xe>
 8006cc8:	89a3      	ldrh	r3, [r4, #12]
 8006cca:	059b      	lsls	r3, r3, #22
 8006ccc:	d4df      	bmi.n	8006c8e <_fflush_r+0xe>
 8006cce:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006cd0:	f7ff fab3 	bl	800623a <__retarget_lock_release_recursive>
 8006cd4:	e7db      	b.n	8006c8e <_fflush_r+0xe>
	...

08006cd8 <fiprintf>:
 8006cd8:	b40e      	push	{r1, r2, r3}
 8006cda:	b517      	push	{r0, r1, r2, r4, lr}
 8006cdc:	4c05      	ldr	r4, [pc, #20]	; (8006cf4 <fiprintf+0x1c>)
 8006cde:	ab05      	add	r3, sp, #20
 8006ce0:	cb04      	ldmia	r3!, {r2}
 8006ce2:	0001      	movs	r1, r0
 8006ce4:	6820      	ldr	r0, [r4, #0]
 8006ce6:	9301      	str	r3, [sp, #4]
 8006ce8:	f7ff fca4 	bl	8006634 <_vfiprintf_r>
 8006cec:	bc1e      	pop	{r1, r2, r3, r4}
 8006cee:	bc08      	pop	{r3}
 8006cf0:	b003      	add	sp, #12
 8006cf2:	4718      	bx	r3
 8006cf4:	20000074 	.word	0x20000074

08006cf8 <__swhatbuf_r>:
 8006cf8:	b570      	push	{r4, r5, r6, lr}
 8006cfa:	000e      	movs	r6, r1
 8006cfc:	001d      	movs	r5, r3
 8006cfe:	230e      	movs	r3, #14
 8006d00:	5ec9      	ldrsh	r1, [r1, r3]
 8006d02:	0014      	movs	r4, r2
 8006d04:	b096      	sub	sp, #88	; 0x58
 8006d06:	2900      	cmp	r1, #0
 8006d08:	da0c      	bge.n	8006d24 <__swhatbuf_r+0x2c>
 8006d0a:	89b2      	ldrh	r2, [r6, #12]
 8006d0c:	2380      	movs	r3, #128	; 0x80
 8006d0e:	0011      	movs	r1, r2
 8006d10:	4019      	ands	r1, r3
 8006d12:	421a      	tst	r2, r3
 8006d14:	d013      	beq.n	8006d3e <__swhatbuf_r+0x46>
 8006d16:	2100      	movs	r1, #0
 8006d18:	3b40      	subs	r3, #64	; 0x40
 8006d1a:	2000      	movs	r0, #0
 8006d1c:	6029      	str	r1, [r5, #0]
 8006d1e:	6023      	str	r3, [r4, #0]
 8006d20:	b016      	add	sp, #88	; 0x58
 8006d22:	bd70      	pop	{r4, r5, r6, pc}
 8006d24:	466a      	mov	r2, sp
 8006d26:	f000 f861 	bl	8006dec <_fstat_r>
 8006d2a:	2800      	cmp	r0, #0
 8006d2c:	dbed      	blt.n	8006d0a <__swhatbuf_r+0x12>
 8006d2e:	23f0      	movs	r3, #240	; 0xf0
 8006d30:	9901      	ldr	r1, [sp, #4]
 8006d32:	021b      	lsls	r3, r3, #8
 8006d34:	4019      	ands	r1, r3
 8006d36:	4b03      	ldr	r3, [pc, #12]	; (8006d44 <__swhatbuf_r+0x4c>)
 8006d38:	18c9      	adds	r1, r1, r3
 8006d3a:	424b      	negs	r3, r1
 8006d3c:	4159      	adcs	r1, r3
 8006d3e:	2380      	movs	r3, #128	; 0x80
 8006d40:	00db      	lsls	r3, r3, #3
 8006d42:	e7ea      	b.n	8006d1a <__swhatbuf_r+0x22>
 8006d44:	ffffe000 	.word	0xffffe000

08006d48 <__smakebuf_r>:
 8006d48:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006d4a:	2602      	movs	r6, #2
 8006d4c:	898b      	ldrh	r3, [r1, #12]
 8006d4e:	0005      	movs	r5, r0
 8006d50:	000c      	movs	r4, r1
 8006d52:	4233      	tst	r3, r6
 8006d54:	d006      	beq.n	8006d64 <__smakebuf_r+0x1c>
 8006d56:	0023      	movs	r3, r4
 8006d58:	3347      	adds	r3, #71	; 0x47
 8006d5a:	6023      	str	r3, [r4, #0]
 8006d5c:	6123      	str	r3, [r4, #16]
 8006d5e:	2301      	movs	r3, #1
 8006d60:	6163      	str	r3, [r4, #20]
 8006d62:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8006d64:	466a      	mov	r2, sp
 8006d66:	ab01      	add	r3, sp, #4
 8006d68:	f7ff ffc6 	bl	8006cf8 <__swhatbuf_r>
 8006d6c:	9900      	ldr	r1, [sp, #0]
 8006d6e:	0007      	movs	r7, r0
 8006d70:	0028      	movs	r0, r5
 8006d72:	f7fe fe5d 	bl	8005a30 <_malloc_r>
 8006d76:	2800      	cmp	r0, #0
 8006d78:	d108      	bne.n	8006d8c <__smakebuf_r+0x44>
 8006d7a:	220c      	movs	r2, #12
 8006d7c:	5ea3      	ldrsh	r3, [r4, r2]
 8006d7e:	059a      	lsls	r2, r3, #22
 8006d80:	d4ef      	bmi.n	8006d62 <__smakebuf_r+0x1a>
 8006d82:	2203      	movs	r2, #3
 8006d84:	4393      	bics	r3, r2
 8006d86:	431e      	orrs	r6, r3
 8006d88:	81a6      	strh	r6, [r4, #12]
 8006d8a:	e7e4      	b.n	8006d56 <__smakebuf_r+0xe>
 8006d8c:	2380      	movs	r3, #128	; 0x80
 8006d8e:	89a2      	ldrh	r2, [r4, #12]
 8006d90:	6020      	str	r0, [r4, #0]
 8006d92:	4313      	orrs	r3, r2
 8006d94:	81a3      	strh	r3, [r4, #12]
 8006d96:	9b00      	ldr	r3, [sp, #0]
 8006d98:	6120      	str	r0, [r4, #16]
 8006d9a:	6163      	str	r3, [r4, #20]
 8006d9c:	9b01      	ldr	r3, [sp, #4]
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d00c      	beq.n	8006dbc <__smakebuf_r+0x74>
 8006da2:	0028      	movs	r0, r5
 8006da4:	230e      	movs	r3, #14
 8006da6:	5ee1      	ldrsh	r1, [r4, r3]
 8006da8:	f000 f832 	bl	8006e10 <_isatty_r>
 8006dac:	2800      	cmp	r0, #0
 8006dae:	d005      	beq.n	8006dbc <__smakebuf_r+0x74>
 8006db0:	2303      	movs	r3, #3
 8006db2:	89a2      	ldrh	r2, [r4, #12]
 8006db4:	439a      	bics	r2, r3
 8006db6:	3b02      	subs	r3, #2
 8006db8:	4313      	orrs	r3, r2
 8006dba:	81a3      	strh	r3, [r4, #12]
 8006dbc:	89a3      	ldrh	r3, [r4, #12]
 8006dbe:	433b      	orrs	r3, r7
 8006dc0:	81a3      	strh	r3, [r4, #12]
 8006dc2:	e7ce      	b.n	8006d62 <__smakebuf_r+0x1a>

08006dc4 <memmove>:
 8006dc4:	b510      	push	{r4, lr}
 8006dc6:	4288      	cmp	r0, r1
 8006dc8:	d902      	bls.n	8006dd0 <memmove+0xc>
 8006dca:	188b      	adds	r3, r1, r2
 8006dcc:	4298      	cmp	r0, r3
 8006dce:	d303      	bcc.n	8006dd8 <memmove+0x14>
 8006dd0:	2300      	movs	r3, #0
 8006dd2:	e007      	b.n	8006de4 <memmove+0x20>
 8006dd4:	5c8b      	ldrb	r3, [r1, r2]
 8006dd6:	5483      	strb	r3, [r0, r2]
 8006dd8:	3a01      	subs	r2, #1
 8006dda:	d2fb      	bcs.n	8006dd4 <memmove+0x10>
 8006ddc:	bd10      	pop	{r4, pc}
 8006dde:	5ccc      	ldrb	r4, [r1, r3]
 8006de0:	54c4      	strb	r4, [r0, r3]
 8006de2:	3301      	adds	r3, #1
 8006de4:	429a      	cmp	r2, r3
 8006de6:	d1fa      	bne.n	8006dde <memmove+0x1a>
 8006de8:	e7f8      	b.n	8006ddc <memmove+0x18>
	...

08006dec <_fstat_r>:
 8006dec:	2300      	movs	r3, #0
 8006dee:	b570      	push	{r4, r5, r6, lr}
 8006df0:	4d06      	ldr	r5, [pc, #24]	; (8006e0c <_fstat_r+0x20>)
 8006df2:	0004      	movs	r4, r0
 8006df4:	0008      	movs	r0, r1
 8006df6:	0011      	movs	r1, r2
 8006df8:	602b      	str	r3, [r5, #0]
 8006dfa:	f7fb f938 	bl	800206e <_fstat>
 8006dfe:	1c43      	adds	r3, r0, #1
 8006e00:	d103      	bne.n	8006e0a <_fstat_r+0x1e>
 8006e02:	682b      	ldr	r3, [r5, #0]
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d000      	beq.n	8006e0a <_fstat_r+0x1e>
 8006e08:	6023      	str	r3, [r4, #0]
 8006e0a:	bd70      	pop	{r4, r5, r6, pc}
 8006e0c:	20000358 	.word	0x20000358

08006e10 <_isatty_r>:
 8006e10:	2300      	movs	r3, #0
 8006e12:	b570      	push	{r4, r5, r6, lr}
 8006e14:	4d06      	ldr	r5, [pc, #24]	; (8006e30 <_isatty_r+0x20>)
 8006e16:	0004      	movs	r4, r0
 8006e18:	0008      	movs	r0, r1
 8006e1a:	602b      	str	r3, [r5, #0]
 8006e1c:	f7fb f935 	bl	800208a <_isatty>
 8006e20:	1c43      	adds	r3, r0, #1
 8006e22:	d103      	bne.n	8006e2c <_isatty_r+0x1c>
 8006e24:	682b      	ldr	r3, [r5, #0]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d000      	beq.n	8006e2c <_isatty_r+0x1c>
 8006e2a:	6023      	str	r3, [r4, #0]
 8006e2c:	bd70      	pop	{r4, r5, r6, pc}
 8006e2e:	46c0      	nop			; (mov r8, r8)
 8006e30:	20000358 	.word	0x20000358

08006e34 <memchr>:
 8006e34:	b2c9      	uxtb	r1, r1
 8006e36:	1882      	adds	r2, r0, r2
 8006e38:	4290      	cmp	r0, r2
 8006e3a:	d101      	bne.n	8006e40 <memchr+0xc>
 8006e3c:	2000      	movs	r0, #0
 8006e3e:	4770      	bx	lr
 8006e40:	7803      	ldrb	r3, [r0, #0]
 8006e42:	428b      	cmp	r3, r1
 8006e44:	d0fb      	beq.n	8006e3e <memchr+0xa>
 8006e46:	3001      	adds	r0, #1
 8006e48:	e7f6      	b.n	8006e38 <memchr+0x4>

08006e4a <abort>:
 8006e4a:	2006      	movs	r0, #6
 8006e4c:	b510      	push	{r4, lr}
 8006e4e:	f000 f85d 	bl	8006f0c <raise>
 8006e52:	2001      	movs	r0, #1
 8006e54:	f7fb f8bc 	bl	8001fd0 <_exit>

08006e58 <_realloc_r>:
 8006e58:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006e5a:	0007      	movs	r7, r0
 8006e5c:	000e      	movs	r6, r1
 8006e5e:	0014      	movs	r4, r2
 8006e60:	2900      	cmp	r1, #0
 8006e62:	d105      	bne.n	8006e70 <_realloc_r+0x18>
 8006e64:	0011      	movs	r1, r2
 8006e66:	f7fe fde3 	bl	8005a30 <_malloc_r>
 8006e6a:	0005      	movs	r5, r0
 8006e6c:	0028      	movs	r0, r5
 8006e6e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006e70:	2a00      	cmp	r2, #0
 8006e72:	d103      	bne.n	8006e7c <_realloc_r+0x24>
 8006e74:	f7ff fa0a 	bl	800628c <_free_r>
 8006e78:	0025      	movs	r5, r4
 8006e7a:	e7f7      	b.n	8006e6c <_realloc_r+0x14>
 8006e7c:	f000 f866 	bl	8006f4c <_malloc_usable_size_r>
 8006e80:	9001      	str	r0, [sp, #4]
 8006e82:	4284      	cmp	r4, r0
 8006e84:	d803      	bhi.n	8006e8e <_realloc_r+0x36>
 8006e86:	0035      	movs	r5, r6
 8006e88:	0843      	lsrs	r3, r0, #1
 8006e8a:	42a3      	cmp	r3, r4
 8006e8c:	d3ee      	bcc.n	8006e6c <_realloc_r+0x14>
 8006e8e:	0021      	movs	r1, r4
 8006e90:	0038      	movs	r0, r7
 8006e92:	f7fe fdcd 	bl	8005a30 <_malloc_r>
 8006e96:	1e05      	subs	r5, r0, #0
 8006e98:	d0e8      	beq.n	8006e6c <_realloc_r+0x14>
 8006e9a:	9b01      	ldr	r3, [sp, #4]
 8006e9c:	0022      	movs	r2, r4
 8006e9e:	429c      	cmp	r4, r3
 8006ea0:	d900      	bls.n	8006ea4 <_realloc_r+0x4c>
 8006ea2:	001a      	movs	r2, r3
 8006ea4:	0031      	movs	r1, r6
 8006ea6:	0028      	movs	r0, r5
 8006ea8:	f7ff f9c8 	bl	800623c <memcpy>
 8006eac:	0031      	movs	r1, r6
 8006eae:	0038      	movs	r0, r7
 8006eb0:	f7ff f9ec 	bl	800628c <_free_r>
 8006eb4:	e7da      	b.n	8006e6c <_realloc_r+0x14>

08006eb6 <_raise_r>:
 8006eb6:	b570      	push	{r4, r5, r6, lr}
 8006eb8:	0004      	movs	r4, r0
 8006eba:	000d      	movs	r5, r1
 8006ebc:	291f      	cmp	r1, #31
 8006ebe:	d904      	bls.n	8006eca <_raise_r+0x14>
 8006ec0:	2316      	movs	r3, #22
 8006ec2:	6003      	str	r3, [r0, #0]
 8006ec4:	2001      	movs	r0, #1
 8006ec6:	4240      	negs	r0, r0
 8006ec8:	bd70      	pop	{r4, r5, r6, pc}
 8006eca:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d004      	beq.n	8006eda <_raise_r+0x24>
 8006ed0:	008a      	lsls	r2, r1, #2
 8006ed2:	189b      	adds	r3, r3, r2
 8006ed4:	681a      	ldr	r2, [r3, #0]
 8006ed6:	2a00      	cmp	r2, #0
 8006ed8:	d108      	bne.n	8006eec <_raise_r+0x36>
 8006eda:	0020      	movs	r0, r4
 8006edc:	f000 f832 	bl	8006f44 <_getpid_r>
 8006ee0:	002a      	movs	r2, r5
 8006ee2:	0001      	movs	r1, r0
 8006ee4:	0020      	movs	r0, r4
 8006ee6:	f000 f81b 	bl	8006f20 <_kill_r>
 8006eea:	e7ed      	b.n	8006ec8 <_raise_r+0x12>
 8006eec:	2000      	movs	r0, #0
 8006eee:	2a01      	cmp	r2, #1
 8006ef0:	d0ea      	beq.n	8006ec8 <_raise_r+0x12>
 8006ef2:	1c51      	adds	r1, r2, #1
 8006ef4:	d103      	bne.n	8006efe <_raise_r+0x48>
 8006ef6:	2316      	movs	r3, #22
 8006ef8:	3001      	adds	r0, #1
 8006efa:	6023      	str	r3, [r4, #0]
 8006efc:	e7e4      	b.n	8006ec8 <_raise_r+0x12>
 8006efe:	2400      	movs	r4, #0
 8006f00:	0028      	movs	r0, r5
 8006f02:	601c      	str	r4, [r3, #0]
 8006f04:	4790      	blx	r2
 8006f06:	0020      	movs	r0, r4
 8006f08:	e7de      	b.n	8006ec8 <_raise_r+0x12>
	...

08006f0c <raise>:
 8006f0c:	b510      	push	{r4, lr}
 8006f0e:	4b03      	ldr	r3, [pc, #12]	; (8006f1c <raise+0x10>)
 8006f10:	0001      	movs	r1, r0
 8006f12:	6818      	ldr	r0, [r3, #0]
 8006f14:	f7ff ffcf 	bl	8006eb6 <_raise_r>
 8006f18:	bd10      	pop	{r4, pc}
 8006f1a:	46c0      	nop			; (mov r8, r8)
 8006f1c:	20000074 	.word	0x20000074

08006f20 <_kill_r>:
 8006f20:	2300      	movs	r3, #0
 8006f22:	b570      	push	{r4, r5, r6, lr}
 8006f24:	4d06      	ldr	r5, [pc, #24]	; (8006f40 <_kill_r+0x20>)
 8006f26:	0004      	movs	r4, r0
 8006f28:	0008      	movs	r0, r1
 8006f2a:	0011      	movs	r1, r2
 8006f2c:	602b      	str	r3, [r5, #0]
 8006f2e:	f7fb f83f 	bl	8001fb0 <_kill>
 8006f32:	1c43      	adds	r3, r0, #1
 8006f34:	d103      	bne.n	8006f3e <_kill_r+0x1e>
 8006f36:	682b      	ldr	r3, [r5, #0]
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d000      	beq.n	8006f3e <_kill_r+0x1e>
 8006f3c:	6023      	str	r3, [r4, #0]
 8006f3e:	bd70      	pop	{r4, r5, r6, pc}
 8006f40:	20000358 	.word	0x20000358

08006f44 <_getpid_r>:
 8006f44:	b510      	push	{r4, lr}
 8006f46:	f7fb f82d 	bl	8001fa4 <_getpid>
 8006f4a:	bd10      	pop	{r4, pc}

08006f4c <_malloc_usable_size_r>:
 8006f4c:	1f0b      	subs	r3, r1, #4
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	1f18      	subs	r0, r3, #4
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	da01      	bge.n	8006f5a <_malloc_usable_size_r+0xe>
 8006f56:	580b      	ldr	r3, [r1, r0]
 8006f58:	18c0      	adds	r0, r0, r3
 8006f5a:	4770      	bx	lr

08006f5c <_init>:
 8006f5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f5e:	46c0      	nop			; (mov r8, r8)
 8006f60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f62:	bc08      	pop	{r3}
 8006f64:	469e      	mov	lr, r3
 8006f66:	4770      	bx	lr

08006f68 <_fini>:
 8006f68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f6a:	46c0      	nop			; (mov r8, r8)
 8006f6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f6e:	bc08      	pop	{r3}
 8006f70:	469e      	mov	lr, r3
 8006f72:	4770      	bx	lr
