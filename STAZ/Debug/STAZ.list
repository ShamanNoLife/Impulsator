
STAZ.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005c24  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002a4  08005ce4  08005ce4  00015ce4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005f88  08005f88  00020174  2**0
                  CONTENTS
  4 .ARM          00000008  08005f88  08005f88  00015f88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005f90  08005f90  00020174  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005f90  08005f90  00015f90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005f94  08005f94  00015f94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000174  20000000  08005f98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000144  20000174  0800610c  00020174  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002b8  0800610c  000202b8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020174  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b553  00000000  00000000  0002019c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f8c  00000000  00000000  0002b6ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000900  00000000  00000000  0002d680  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000818  00000000  00000000  0002df80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000369b  00000000  00000000  0002e798  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c7e2  00000000  00000000  00031e33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007f763  00000000  00000000  0003e615  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000bdd78  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002b30  00000000  00000000  000bddc8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000174 	.word	0x20000174
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005ccc 	.word	0x08005ccc

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000178 	.word	0x20000178
 8000104:	08005ccc 	.word	0x08005ccc

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f8f0 	bl	8000414 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__divsi3>:
 8000240:	4603      	mov	r3, r0
 8000242:	430b      	orrs	r3, r1
 8000244:	d47f      	bmi.n	8000346 <__divsi3+0x106>
 8000246:	2200      	movs	r2, #0
 8000248:	0843      	lsrs	r3, r0, #1
 800024a:	428b      	cmp	r3, r1
 800024c:	d374      	bcc.n	8000338 <__divsi3+0xf8>
 800024e:	0903      	lsrs	r3, r0, #4
 8000250:	428b      	cmp	r3, r1
 8000252:	d35f      	bcc.n	8000314 <__divsi3+0xd4>
 8000254:	0a03      	lsrs	r3, r0, #8
 8000256:	428b      	cmp	r3, r1
 8000258:	d344      	bcc.n	80002e4 <__divsi3+0xa4>
 800025a:	0b03      	lsrs	r3, r0, #12
 800025c:	428b      	cmp	r3, r1
 800025e:	d328      	bcc.n	80002b2 <__divsi3+0x72>
 8000260:	0c03      	lsrs	r3, r0, #16
 8000262:	428b      	cmp	r3, r1
 8000264:	d30d      	bcc.n	8000282 <__divsi3+0x42>
 8000266:	22ff      	movs	r2, #255	; 0xff
 8000268:	0209      	lsls	r1, r1, #8
 800026a:	ba12      	rev	r2, r2
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d302      	bcc.n	8000278 <__divsi3+0x38>
 8000272:	1212      	asrs	r2, r2, #8
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	d065      	beq.n	8000344 <__divsi3+0x104>
 8000278:	0b03      	lsrs	r3, r0, #12
 800027a:	428b      	cmp	r3, r1
 800027c:	d319      	bcc.n	80002b2 <__divsi3+0x72>
 800027e:	e000      	b.n	8000282 <__divsi3+0x42>
 8000280:	0a09      	lsrs	r1, r1, #8
 8000282:	0bc3      	lsrs	r3, r0, #15
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x4c>
 8000288:	03cb      	lsls	r3, r1, #15
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b83      	lsrs	r3, r0, #14
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x58>
 8000294:	038b      	lsls	r3, r1, #14
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b43      	lsrs	r3, r0, #13
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x64>
 80002a0:	034b      	lsls	r3, r1, #13
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b03      	lsrs	r3, r0, #12
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x70>
 80002ac:	030b      	lsls	r3, r1, #12
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0ac3      	lsrs	r3, r0, #11
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x7c>
 80002b8:	02cb      	lsls	r3, r1, #11
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a83      	lsrs	r3, r0, #10
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x88>
 80002c4:	028b      	lsls	r3, r1, #10
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a43      	lsrs	r3, r0, #9
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x94>
 80002d0:	024b      	lsls	r3, r1, #9
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a03      	lsrs	r3, r0, #8
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0xa0>
 80002dc:	020b      	lsls	r3, r1, #8
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	d2cd      	bcs.n	8000280 <__divsi3+0x40>
 80002e4:	09c3      	lsrs	r3, r0, #7
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xae>
 80002ea:	01cb      	lsls	r3, r1, #7
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0983      	lsrs	r3, r0, #6
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xba>
 80002f6:	018b      	lsls	r3, r1, #6
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0943      	lsrs	r3, r0, #5
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xc6>
 8000302:	014b      	lsls	r3, r1, #5
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0903      	lsrs	r3, r0, #4
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xd2>
 800030e:	010b      	lsls	r3, r1, #4
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	08c3      	lsrs	r3, r0, #3
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xde>
 800031a:	00cb      	lsls	r3, r1, #3
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0883      	lsrs	r3, r0, #2
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xea>
 8000326:	008b      	lsls	r3, r1, #2
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0843      	lsrs	r3, r0, #1
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xf6>
 8000332:	004b      	lsls	r3, r1, #1
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	1a41      	subs	r1, r0, r1
 800033a:	d200      	bcs.n	800033e <__divsi3+0xfe>
 800033c:	4601      	mov	r1, r0
 800033e:	4152      	adcs	r2, r2
 8000340:	4610      	mov	r0, r2
 8000342:	4770      	bx	lr
 8000344:	e05d      	b.n	8000402 <__divsi3+0x1c2>
 8000346:	0fca      	lsrs	r2, r1, #31
 8000348:	d000      	beq.n	800034c <__divsi3+0x10c>
 800034a:	4249      	negs	r1, r1
 800034c:	1003      	asrs	r3, r0, #32
 800034e:	d300      	bcc.n	8000352 <__divsi3+0x112>
 8000350:	4240      	negs	r0, r0
 8000352:	4053      	eors	r3, r2
 8000354:	2200      	movs	r2, #0
 8000356:	469c      	mov	ip, r3
 8000358:	0903      	lsrs	r3, r0, #4
 800035a:	428b      	cmp	r3, r1
 800035c:	d32d      	bcc.n	80003ba <__divsi3+0x17a>
 800035e:	0a03      	lsrs	r3, r0, #8
 8000360:	428b      	cmp	r3, r1
 8000362:	d312      	bcc.n	800038a <__divsi3+0x14a>
 8000364:	22fc      	movs	r2, #252	; 0xfc
 8000366:	0189      	lsls	r1, r1, #6
 8000368:	ba12      	rev	r2, r2
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d30c      	bcc.n	800038a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	1192      	asrs	r2, r2, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d308      	bcc.n	800038a <__divsi3+0x14a>
 8000378:	0189      	lsls	r1, r1, #6
 800037a:	1192      	asrs	r2, r2, #6
 800037c:	428b      	cmp	r3, r1
 800037e:	d304      	bcc.n	800038a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	d03a      	beq.n	80003fa <__divsi3+0x1ba>
 8000384:	1192      	asrs	r2, r2, #6
 8000386:	e000      	b.n	800038a <__divsi3+0x14a>
 8000388:	0989      	lsrs	r1, r1, #6
 800038a:	09c3      	lsrs	r3, r0, #7
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x154>
 8000390:	01cb      	lsls	r3, r1, #7
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0983      	lsrs	r3, r0, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x160>
 800039c:	018b      	lsls	r3, r1, #6
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0943      	lsrs	r3, r0, #5
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x16c>
 80003a8:	014b      	lsls	r3, r1, #5
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0903      	lsrs	r3, r0, #4
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x178>
 80003b4:	010b      	lsls	r3, r1, #4
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	08c3      	lsrs	r3, r0, #3
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x184>
 80003c0:	00cb      	lsls	r3, r1, #3
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0883      	lsrs	r3, r0, #2
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x190>
 80003cc:	008b      	lsls	r3, r1, #2
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	d2d9      	bcs.n	8000388 <__divsi3+0x148>
 80003d4:	0843      	lsrs	r3, r0, #1
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d301      	bcc.n	80003de <__divsi3+0x19e>
 80003da:	004b      	lsls	r3, r1, #1
 80003dc:	1ac0      	subs	r0, r0, r3
 80003de:	4152      	adcs	r2, r2
 80003e0:	1a41      	subs	r1, r0, r1
 80003e2:	d200      	bcs.n	80003e6 <__divsi3+0x1a6>
 80003e4:	4601      	mov	r1, r0
 80003e6:	4663      	mov	r3, ip
 80003e8:	4152      	adcs	r2, r2
 80003ea:	105b      	asrs	r3, r3, #1
 80003ec:	4610      	mov	r0, r2
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x1b4>
 80003f0:	4240      	negs	r0, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d500      	bpl.n	80003f8 <__divsi3+0x1b8>
 80003f6:	4249      	negs	r1, r1
 80003f8:	4770      	bx	lr
 80003fa:	4663      	mov	r3, ip
 80003fc:	105b      	asrs	r3, r3, #1
 80003fe:	d300      	bcc.n	8000402 <__divsi3+0x1c2>
 8000400:	4240      	negs	r0, r0
 8000402:	b501      	push	{r0, lr}
 8000404:	2000      	movs	r0, #0
 8000406:	f000 f805 	bl	8000414 <__aeabi_idiv0>
 800040a:	bd02      	pop	{r1, pc}

0800040c <__aeabi_idivmod>:
 800040c:	2900      	cmp	r1, #0
 800040e:	d0f8      	beq.n	8000402 <__divsi3+0x1c2>
 8000410:	e716      	b.n	8000240 <__divsi3>
 8000412:	4770      	bx	lr

08000414 <__aeabi_idiv0>:
 8000414:	4770      	bx	lr
 8000416:	46c0      	nop			; (mov r8, r8)

08000418 <__aeabi_uldivmod>:
 8000418:	2b00      	cmp	r3, #0
 800041a:	d111      	bne.n	8000440 <__aeabi_uldivmod+0x28>
 800041c:	2a00      	cmp	r2, #0
 800041e:	d10f      	bne.n	8000440 <__aeabi_uldivmod+0x28>
 8000420:	2900      	cmp	r1, #0
 8000422:	d100      	bne.n	8000426 <__aeabi_uldivmod+0xe>
 8000424:	2800      	cmp	r0, #0
 8000426:	d002      	beq.n	800042e <__aeabi_uldivmod+0x16>
 8000428:	2100      	movs	r1, #0
 800042a:	43c9      	mvns	r1, r1
 800042c:	0008      	movs	r0, r1
 800042e:	b407      	push	{r0, r1, r2}
 8000430:	4802      	ldr	r0, [pc, #8]	; (800043c <__aeabi_uldivmod+0x24>)
 8000432:	a102      	add	r1, pc, #8	; (adr r1, 800043c <__aeabi_uldivmod+0x24>)
 8000434:	1840      	adds	r0, r0, r1
 8000436:	9002      	str	r0, [sp, #8]
 8000438:	bd03      	pop	{r0, r1, pc}
 800043a:	46c0      	nop			; (mov r8, r8)
 800043c:	ffffffd9 	.word	0xffffffd9
 8000440:	b403      	push	{r0, r1}
 8000442:	4668      	mov	r0, sp
 8000444:	b501      	push	{r0, lr}
 8000446:	9802      	ldr	r0, [sp, #8]
 8000448:	f000 f84c 	bl	80004e4 <__udivmoddi4>
 800044c:	9b01      	ldr	r3, [sp, #4]
 800044e:	469e      	mov	lr, r3
 8000450:	b002      	add	sp, #8
 8000452:	bc0c      	pop	{r2, r3}
 8000454:	4770      	bx	lr
 8000456:	46c0      	nop			; (mov r8, r8)

08000458 <__aeabi_lmul>:
 8000458:	b5f0      	push	{r4, r5, r6, r7, lr}
 800045a:	46ce      	mov	lr, r9
 800045c:	4647      	mov	r7, r8
 800045e:	b580      	push	{r7, lr}
 8000460:	0007      	movs	r7, r0
 8000462:	4699      	mov	r9, r3
 8000464:	0c3b      	lsrs	r3, r7, #16
 8000466:	469c      	mov	ip, r3
 8000468:	0413      	lsls	r3, r2, #16
 800046a:	0c1b      	lsrs	r3, r3, #16
 800046c:	001d      	movs	r5, r3
 800046e:	000e      	movs	r6, r1
 8000470:	4661      	mov	r1, ip
 8000472:	0400      	lsls	r0, r0, #16
 8000474:	0c14      	lsrs	r4, r2, #16
 8000476:	0c00      	lsrs	r0, r0, #16
 8000478:	4345      	muls	r5, r0
 800047a:	434b      	muls	r3, r1
 800047c:	4360      	muls	r0, r4
 800047e:	4361      	muls	r1, r4
 8000480:	18c0      	adds	r0, r0, r3
 8000482:	0c2c      	lsrs	r4, r5, #16
 8000484:	1820      	adds	r0, r4, r0
 8000486:	468c      	mov	ip, r1
 8000488:	4283      	cmp	r3, r0
 800048a:	d903      	bls.n	8000494 <__aeabi_lmul+0x3c>
 800048c:	2380      	movs	r3, #128	; 0x80
 800048e:	025b      	lsls	r3, r3, #9
 8000490:	4698      	mov	r8, r3
 8000492:	44c4      	add	ip, r8
 8000494:	4649      	mov	r1, r9
 8000496:	4379      	muls	r1, r7
 8000498:	4372      	muls	r2, r6
 800049a:	0c03      	lsrs	r3, r0, #16
 800049c:	4463      	add	r3, ip
 800049e:	042d      	lsls	r5, r5, #16
 80004a0:	0c2d      	lsrs	r5, r5, #16
 80004a2:	18c9      	adds	r1, r1, r3
 80004a4:	0400      	lsls	r0, r0, #16
 80004a6:	1940      	adds	r0, r0, r5
 80004a8:	1889      	adds	r1, r1, r2
 80004aa:	bcc0      	pop	{r6, r7}
 80004ac:	46b9      	mov	r9, r7
 80004ae:	46b0      	mov	r8, r6
 80004b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004b2:	46c0      	nop			; (mov r8, r8)

080004b4 <__aeabi_f2uiz>:
 80004b4:	219e      	movs	r1, #158	; 0x9e
 80004b6:	b510      	push	{r4, lr}
 80004b8:	05c9      	lsls	r1, r1, #23
 80004ba:	1c04      	adds	r4, r0, #0
 80004bc:	f000 fd68 	bl	8000f90 <__aeabi_fcmpge>
 80004c0:	2800      	cmp	r0, #0
 80004c2:	d103      	bne.n	80004cc <__aeabi_f2uiz+0x18>
 80004c4:	1c20      	adds	r0, r4, #0
 80004c6:	f000 fcc5 	bl	8000e54 <__aeabi_f2iz>
 80004ca:	bd10      	pop	{r4, pc}
 80004cc:	219e      	movs	r1, #158	; 0x9e
 80004ce:	1c20      	adds	r0, r4, #0
 80004d0:	05c9      	lsls	r1, r1, #23
 80004d2:	f000 fb11 	bl	8000af8 <__aeabi_fsub>
 80004d6:	f000 fcbd 	bl	8000e54 <__aeabi_f2iz>
 80004da:	2380      	movs	r3, #128	; 0x80
 80004dc:	061b      	lsls	r3, r3, #24
 80004de:	469c      	mov	ip, r3
 80004e0:	4460      	add	r0, ip
 80004e2:	e7f2      	b.n	80004ca <__aeabi_f2uiz+0x16>

080004e4 <__udivmoddi4>:
 80004e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004e6:	4657      	mov	r7, sl
 80004e8:	464e      	mov	r6, r9
 80004ea:	4645      	mov	r5, r8
 80004ec:	46de      	mov	lr, fp
 80004ee:	b5e0      	push	{r5, r6, r7, lr}
 80004f0:	0004      	movs	r4, r0
 80004f2:	000d      	movs	r5, r1
 80004f4:	4692      	mov	sl, r2
 80004f6:	4699      	mov	r9, r3
 80004f8:	b083      	sub	sp, #12
 80004fa:	428b      	cmp	r3, r1
 80004fc:	d830      	bhi.n	8000560 <__udivmoddi4+0x7c>
 80004fe:	d02d      	beq.n	800055c <__udivmoddi4+0x78>
 8000500:	4649      	mov	r1, r9
 8000502:	4650      	mov	r0, sl
 8000504:	f000 fd6c 	bl	8000fe0 <__clzdi2>
 8000508:	0029      	movs	r1, r5
 800050a:	0006      	movs	r6, r0
 800050c:	0020      	movs	r0, r4
 800050e:	f000 fd67 	bl	8000fe0 <__clzdi2>
 8000512:	1a33      	subs	r3, r6, r0
 8000514:	4698      	mov	r8, r3
 8000516:	3b20      	subs	r3, #32
 8000518:	469b      	mov	fp, r3
 800051a:	d433      	bmi.n	8000584 <__udivmoddi4+0xa0>
 800051c:	465a      	mov	r2, fp
 800051e:	4653      	mov	r3, sl
 8000520:	4093      	lsls	r3, r2
 8000522:	4642      	mov	r2, r8
 8000524:	001f      	movs	r7, r3
 8000526:	4653      	mov	r3, sl
 8000528:	4093      	lsls	r3, r2
 800052a:	001e      	movs	r6, r3
 800052c:	42af      	cmp	r7, r5
 800052e:	d83a      	bhi.n	80005a6 <__udivmoddi4+0xc2>
 8000530:	42af      	cmp	r7, r5
 8000532:	d100      	bne.n	8000536 <__udivmoddi4+0x52>
 8000534:	e078      	b.n	8000628 <__udivmoddi4+0x144>
 8000536:	465b      	mov	r3, fp
 8000538:	1ba4      	subs	r4, r4, r6
 800053a:	41bd      	sbcs	r5, r7
 800053c:	2b00      	cmp	r3, #0
 800053e:	da00      	bge.n	8000542 <__udivmoddi4+0x5e>
 8000540:	e075      	b.n	800062e <__udivmoddi4+0x14a>
 8000542:	2200      	movs	r2, #0
 8000544:	2300      	movs	r3, #0
 8000546:	9200      	str	r2, [sp, #0]
 8000548:	9301      	str	r3, [sp, #4]
 800054a:	2301      	movs	r3, #1
 800054c:	465a      	mov	r2, fp
 800054e:	4093      	lsls	r3, r2
 8000550:	9301      	str	r3, [sp, #4]
 8000552:	2301      	movs	r3, #1
 8000554:	4642      	mov	r2, r8
 8000556:	4093      	lsls	r3, r2
 8000558:	9300      	str	r3, [sp, #0]
 800055a:	e028      	b.n	80005ae <__udivmoddi4+0xca>
 800055c:	4282      	cmp	r2, r0
 800055e:	d9cf      	bls.n	8000500 <__udivmoddi4+0x1c>
 8000560:	2200      	movs	r2, #0
 8000562:	2300      	movs	r3, #0
 8000564:	9200      	str	r2, [sp, #0]
 8000566:	9301      	str	r3, [sp, #4]
 8000568:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800056a:	2b00      	cmp	r3, #0
 800056c:	d001      	beq.n	8000572 <__udivmoddi4+0x8e>
 800056e:	601c      	str	r4, [r3, #0]
 8000570:	605d      	str	r5, [r3, #4]
 8000572:	9800      	ldr	r0, [sp, #0]
 8000574:	9901      	ldr	r1, [sp, #4]
 8000576:	b003      	add	sp, #12
 8000578:	bcf0      	pop	{r4, r5, r6, r7}
 800057a:	46bb      	mov	fp, r7
 800057c:	46b2      	mov	sl, r6
 800057e:	46a9      	mov	r9, r5
 8000580:	46a0      	mov	r8, r4
 8000582:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000584:	4642      	mov	r2, r8
 8000586:	2320      	movs	r3, #32
 8000588:	1a9b      	subs	r3, r3, r2
 800058a:	4652      	mov	r2, sl
 800058c:	40da      	lsrs	r2, r3
 800058e:	4641      	mov	r1, r8
 8000590:	0013      	movs	r3, r2
 8000592:	464a      	mov	r2, r9
 8000594:	408a      	lsls	r2, r1
 8000596:	0017      	movs	r7, r2
 8000598:	4642      	mov	r2, r8
 800059a:	431f      	orrs	r7, r3
 800059c:	4653      	mov	r3, sl
 800059e:	4093      	lsls	r3, r2
 80005a0:	001e      	movs	r6, r3
 80005a2:	42af      	cmp	r7, r5
 80005a4:	d9c4      	bls.n	8000530 <__udivmoddi4+0x4c>
 80005a6:	2200      	movs	r2, #0
 80005a8:	2300      	movs	r3, #0
 80005aa:	9200      	str	r2, [sp, #0]
 80005ac:	9301      	str	r3, [sp, #4]
 80005ae:	4643      	mov	r3, r8
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d0d9      	beq.n	8000568 <__udivmoddi4+0x84>
 80005b4:	07fb      	lsls	r3, r7, #31
 80005b6:	0872      	lsrs	r2, r6, #1
 80005b8:	431a      	orrs	r2, r3
 80005ba:	4646      	mov	r6, r8
 80005bc:	087b      	lsrs	r3, r7, #1
 80005be:	e00e      	b.n	80005de <__udivmoddi4+0xfa>
 80005c0:	42ab      	cmp	r3, r5
 80005c2:	d101      	bne.n	80005c8 <__udivmoddi4+0xe4>
 80005c4:	42a2      	cmp	r2, r4
 80005c6:	d80c      	bhi.n	80005e2 <__udivmoddi4+0xfe>
 80005c8:	1aa4      	subs	r4, r4, r2
 80005ca:	419d      	sbcs	r5, r3
 80005cc:	2001      	movs	r0, #1
 80005ce:	1924      	adds	r4, r4, r4
 80005d0:	416d      	adcs	r5, r5
 80005d2:	2100      	movs	r1, #0
 80005d4:	3e01      	subs	r6, #1
 80005d6:	1824      	adds	r4, r4, r0
 80005d8:	414d      	adcs	r5, r1
 80005da:	2e00      	cmp	r6, #0
 80005dc:	d006      	beq.n	80005ec <__udivmoddi4+0x108>
 80005de:	42ab      	cmp	r3, r5
 80005e0:	d9ee      	bls.n	80005c0 <__udivmoddi4+0xdc>
 80005e2:	3e01      	subs	r6, #1
 80005e4:	1924      	adds	r4, r4, r4
 80005e6:	416d      	adcs	r5, r5
 80005e8:	2e00      	cmp	r6, #0
 80005ea:	d1f8      	bne.n	80005de <__udivmoddi4+0xfa>
 80005ec:	9800      	ldr	r0, [sp, #0]
 80005ee:	9901      	ldr	r1, [sp, #4]
 80005f0:	465b      	mov	r3, fp
 80005f2:	1900      	adds	r0, r0, r4
 80005f4:	4169      	adcs	r1, r5
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	db24      	blt.n	8000644 <__udivmoddi4+0x160>
 80005fa:	002b      	movs	r3, r5
 80005fc:	465a      	mov	r2, fp
 80005fe:	4644      	mov	r4, r8
 8000600:	40d3      	lsrs	r3, r2
 8000602:	002a      	movs	r2, r5
 8000604:	40e2      	lsrs	r2, r4
 8000606:	001c      	movs	r4, r3
 8000608:	465b      	mov	r3, fp
 800060a:	0015      	movs	r5, r2
 800060c:	2b00      	cmp	r3, #0
 800060e:	db2a      	blt.n	8000666 <__udivmoddi4+0x182>
 8000610:	0026      	movs	r6, r4
 8000612:	409e      	lsls	r6, r3
 8000614:	0033      	movs	r3, r6
 8000616:	0026      	movs	r6, r4
 8000618:	4647      	mov	r7, r8
 800061a:	40be      	lsls	r6, r7
 800061c:	0032      	movs	r2, r6
 800061e:	1a80      	subs	r0, r0, r2
 8000620:	4199      	sbcs	r1, r3
 8000622:	9000      	str	r0, [sp, #0]
 8000624:	9101      	str	r1, [sp, #4]
 8000626:	e79f      	b.n	8000568 <__udivmoddi4+0x84>
 8000628:	42a3      	cmp	r3, r4
 800062a:	d8bc      	bhi.n	80005a6 <__udivmoddi4+0xc2>
 800062c:	e783      	b.n	8000536 <__udivmoddi4+0x52>
 800062e:	4642      	mov	r2, r8
 8000630:	2320      	movs	r3, #32
 8000632:	2100      	movs	r1, #0
 8000634:	1a9b      	subs	r3, r3, r2
 8000636:	2200      	movs	r2, #0
 8000638:	9100      	str	r1, [sp, #0]
 800063a:	9201      	str	r2, [sp, #4]
 800063c:	2201      	movs	r2, #1
 800063e:	40da      	lsrs	r2, r3
 8000640:	9201      	str	r2, [sp, #4]
 8000642:	e786      	b.n	8000552 <__udivmoddi4+0x6e>
 8000644:	4642      	mov	r2, r8
 8000646:	2320      	movs	r3, #32
 8000648:	1a9b      	subs	r3, r3, r2
 800064a:	002a      	movs	r2, r5
 800064c:	4646      	mov	r6, r8
 800064e:	409a      	lsls	r2, r3
 8000650:	0023      	movs	r3, r4
 8000652:	40f3      	lsrs	r3, r6
 8000654:	4644      	mov	r4, r8
 8000656:	4313      	orrs	r3, r2
 8000658:	002a      	movs	r2, r5
 800065a:	40e2      	lsrs	r2, r4
 800065c:	001c      	movs	r4, r3
 800065e:	465b      	mov	r3, fp
 8000660:	0015      	movs	r5, r2
 8000662:	2b00      	cmp	r3, #0
 8000664:	dad4      	bge.n	8000610 <__udivmoddi4+0x12c>
 8000666:	4642      	mov	r2, r8
 8000668:	002f      	movs	r7, r5
 800066a:	2320      	movs	r3, #32
 800066c:	0026      	movs	r6, r4
 800066e:	4097      	lsls	r7, r2
 8000670:	1a9b      	subs	r3, r3, r2
 8000672:	40de      	lsrs	r6, r3
 8000674:	003b      	movs	r3, r7
 8000676:	4333      	orrs	r3, r6
 8000678:	e7cd      	b.n	8000616 <__udivmoddi4+0x132>
 800067a:	46c0      	nop			; (mov r8, r8)

0800067c <__aeabi_fdiv>:
 800067c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800067e:	464f      	mov	r7, r9
 8000680:	4646      	mov	r6, r8
 8000682:	46d6      	mov	lr, sl
 8000684:	0245      	lsls	r5, r0, #9
 8000686:	b5c0      	push	{r6, r7, lr}
 8000688:	0047      	lsls	r7, r0, #1
 800068a:	1c0c      	adds	r4, r1, #0
 800068c:	0a6d      	lsrs	r5, r5, #9
 800068e:	0e3f      	lsrs	r7, r7, #24
 8000690:	0fc6      	lsrs	r6, r0, #31
 8000692:	2f00      	cmp	r7, #0
 8000694:	d100      	bne.n	8000698 <__aeabi_fdiv+0x1c>
 8000696:	e070      	b.n	800077a <__aeabi_fdiv+0xfe>
 8000698:	2fff      	cmp	r7, #255	; 0xff
 800069a:	d100      	bne.n	800069e <__aeabi_fdiv+0x22>
 800069c:	e075      	b.n	800078a <__aeabi_fdiv+0x10e>
 800069e:	00eb      	lsls	r3, r5, #3
 80006a0:	2580      	movs	r5, #128	; 0x80
 80006a2:	04ed      	lsls	r5, r5, #19
 80006a4:	431d      	orrs	r5, r3
 80006a6:	2300      	movs	r3, #0
 80006a8:	4699      	mov	r9, r3
 80006aa:	469a      	mov	sl, r3
 80006ac:	3f7f      	subs	r7, #127	; 0x7f
 80006ae:	0260      	lsls	r0, r4, #9
 80006b0:	0a43      	lsrs	r3, r0, #9
 80006b2:	4698      	mov	r8, r3
 80006b4:	0063      	lsls	r3, r4, #1
 80006b6:	0e1b      	lsrs	r3, r3, #24
 80006b8:	0fe4      	lsrs	r4, r4, #31
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d04e      	beq.n	800075c <__aeabi_fdiv+0xe0>
 80006be:	2bff      	cmp	r3, #255	; 0xff
 80006c0:	d046      	beq.n	8000750 <__aeabi_fdiv+0xd4>
 80006c2:	4642      	mov	r2, r8
 80006c4:	00d0      	lsls	r0, r2, #3
 80006c6:	2280      	movs	r2, #128	; 0x80
 80006c8:	04d2      	lsls	r2, r2, #19
 80006ca:	4302      	orrs	r2, r0
 80006cc:	4690      	mov	r8, r2
 80006ce:	2200      	movs	r2, #0
 80006d0:	3b7f      	subs	r3, #127	; 0x7f
 80006d2:	0031      	movs	r1, r6
 80006d4:	1aff      	subs	r7, r7, r3
 80006d6:	464b      	mov	r3, r9
 80006d8:	4061      	eors	r1, r4
 80006da:	b2c9      	uxtb	r1, r1
 80006dc:	4313      	orrs	r3, r2
 80006de:	2b0f      	cmp	r3, #15
 80006e0:	d900      	bls.n	80006e4 <__aeabi_fdiv+0x68>
 80006e2:	e0b5      	b.n	8000850 <__aeabi_fdiv+0x1d4>
 80006e4:	486e      	ldr	r0, [pc, #440]	; (80008a0 <__aeabi_fdiv+0x224>)
 80006e6:	009b      	lsls	r3, r3, #2
 80006e8:	58c3      	ldr	r3, [r0, r3]
 80006ea:	469f      	mov	pc, r3
 80006ec:	2300      	movs	r3, #0
 80006ee:	4698      	mov	r8, r3
 80006f0:	0026      	movs	r6, r4
 80006f2:	4645      	mov	r5, r8
 80006f4:	4692      	mov	sl, r2
 80006f6:	4653      	mov	r3, sl
 80006f8:	2b02      	cmp	r3, #2
 80006fa:	d100      	bne.n	80006fe <__aeabi_fdiv+0x82>
 80006fc:	e089      	b.n	8000812 <__aeabi_fdiv+0x196>
 80006fe:	2b03      	cmp	r3, #3
 8000700:	d100      	bne.n	8000704 <__aeabi_fdiv+0x88>
 8000702:	e09e      	b.n	8000842 <__aeabi_fdiv+0x1c6>
 8000704:	2b01      	cmp	r3, #1
 8000706:	d018      	beq.n	800073a <__aeabi_fdiv+0xbe>
 8000708:	003b      	movs	r3, r7
 800070a:	337f      	adds	r3, #127	; 0x7f
 800070c:	2b00      	cmp	r3, #0
 800070e:	dd69      	ble.n	80007e4 <__aeabi_fdiv+0x168>
 8000710:	076a      	lsls	r2, r5, #29
 8000712:	d004      	beq.n	800071e <__aeabi_fdiv+0xa2>
 8000714:	220f      	movs	r2, #15
 8000716:	402a      	ands	r2, r5
 8000718:	2a04      	cmp	r2, #4
 800071a:	d000      	beq.n	800071e <__aeabi_fdiv+0xa2>
 800071c:	3504      	adds	r5, #4
 800071e:	012a      	lsls	r2, r5, #4
 8000720:	d503      	bpl.n	800072a <__aeabi_fdiv+0xae>
 8000722:	4b60      	ldr	r3, [pc, #384]	; (80008a4 <__aeabi_fdiv+0x228>)
 8000724:	401d      	ands	r5, r3
 8000726:	003b      	movs	r3, r7
 8000728:	3380      	adds	r3, #128	; 0x80
 800072a:	2bfe      	cmp	r3, #254	; 0xfe
 800072c:	dd00      	ble.n	8000730 <__aeabi_fdiv+0xb4>
 800072e:	e070      	b.n	8000812 <__aeabi_fdiv+0x196>
 8000730:	01ad      	lsls	r5, r5, #6
 8000732:	0a6d      	lsrs	r5, r5, #9
 8000734:	b2d8      	uxtb	r0, r3
 8000736:	e002      	b.n	800073e <__aeabi_fdiv+0xc2>
 8000738:	000e      	movs	r6, r1
 800073a:	2000      	movs	r0, #0
 800073c:	2500      	movs	r5, #0
 800073e:	05c0      	lsls	r0, r0, #23
 8000740:	4328      	orrs	r0, r5
 8000742:	07f6      	lsls	r6, r6, #31
 8000744:	4330      	orrs	r0, r6
 8000746:	bce0      	pop	{r5, r6, r7}
 8000748:	46ba      	mov	sl, r7
 800074a:	46b1      	mov	r9, r6
 800074c:	46a8      	mov	r8, r5
 800074e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000750:	4643      	mov	r3, r8
 8000752:	2b00      	cmp	r3, #0
 8000754:	d13f      	bne.n	80007d6 <__aeabi_fdiv+0x15a>
 8000756:	2202      	movs	r2, #2
 8000758:	3fff      	subs	r7, #255	; 0xff
 800075a:	e003      	b.n	8000764 <__aeabi_fdiv+0xe8>
 800075c:	4643      	mov	r3, r8
 800075e:	2b00      	cmp	r3, #0
 8000760:	d12d      	bne.n	80007be <__aeabi_fdiv+0x142>
 8000762:	2201      	movs	r2, #1
 8000764:	0031      	movs	r1, r6
 8000766:	464b      	mov	r3, r9
 8000768:	4061      	eors	r1, r4
 800076a:	b2c9      	uxtb	r1, r1
 800076c:	4313      	orrs	r3, r2
 800076e:	2b0f      	cmp	r3, #15
 8000770:	d834      	bhi.n	80007dc <__aeabi_fdiv+0x160>
 8000772:	484d      	ldr	r0, [pc, #308]	; (80008a8 <__aeabi_fdiv+0x22c>)
 8000774:	009b      	lsls	r3, r3, #2
 8000776:	58c3      	ldr	r3, [r0, r3]
 8000778:	469f      	mov	pc, r3
 800077a:	2d00      	cmp	r5, #0
 800077c:	d113      	bne.n	80007a6 <__aeabi_fdiv+0x12a>
 800077e:	2304      	movs	r3, #4
 8000780:	4699      	mov	r9, r3
 8000782:	3b03      	subs	r3, #3
 8000784:	2700      	movs	r7, #0
 8000786:	469a      	mov	sl, r3
 8000788:	e791      	b.n	80006ae <__aeabi_fdiv+0x32>
 800078a:	2d00      	cmp	r5, #0
 800078c:	d105      	bne.n	800079a <__aeabi_fdiv+0x11e>
 800078e:	2308      	movs	r3, #8
 8000790:	4699      	mov	r9, r3
 8000792:	3b06      	subs	r3, #6
 8000794:	27ff      	movs	r7, #255	; 0xff
 8000796:	469a      	mov	sl, r3
 8000798:	e789      	b.n	80006ae <__aeabi_fdiv+0x32>
 800079a:	230c      	movs	r3, #12
 800079c:	4699      	mov	r9, r3
 800079e:	3b09      	subs	r3, #9
 80007a0:	27ff      	movs	r7, #255	; 0xff
 80007a2:	469a      	mov	sl, r3
 80007a4:	e783      	b.n	80006ae <__aeabi_fdiv+0x32>
 80007a6:	0028      	movs	r0, r5
 80007a8:	f000 fbfc 	bl	8000fa4 <__clzsi2>
 80007ac:	2776      	movs	r7, #118	; 0x76
 80007ae:	1f43      	subs	r3, r0, #5
 80007b0:	409d      	lsls	r5, r3
 80007b2:	2300      	movs	r3, #0
 80007b4:	427f      	negs	r7, r7
 80007b6:	4699      	mov	r9, r3
 80007b8:	469a      	mov	sl, r3
 80007ba:	1a3f      	subs	r7, r7, r0
 80007bc:	e777      	b.n	80006ae <__aeabi_fdiv+0x32>
 80007be:	4640      	mov	r0, r8
 80007c0:	f000 fbf0 	bl	8000fa4 <__clzsi2>
 80007c4:	4642      	mov	r2, r8
 80007c6:	1f43      	subs	r3, r0, #5
 80007c8:	409a      	lsls	r2, r3
 80007ca:	2376      	movs	r3, #118	; 0x76
 80007cc:	425b      	negs	r3, r3
 80007ce:	4690      	mov	r8, r2
 80007d0:	1a1b      	subs	r3, r3, r0
 80007d2:	2200      	movs	r2, #0
 80007d4:	e77d      	b.n	80006d2 <__aeabi_fdiv+0x56>
 80007d6:	23ff      	movs	r3, #255	; 0xff
 80007d8:	2203      	movs	r2, #3
 80007da:	e77a      	b.n	80006d2 <__aeabi_fdiv+0x56>
 80007dc:	000e      	movs	r6, r1
 80007de:	20ff      	movs	r0, #255	; 0xff
 80007e0:	2500      	movs	r5, #0
 80007e2:	e7ac      	b.n	800073e <__aeabi_fdiv+0xc2>
 80007e4:	2001      	movs	r0, #1
 80007e6:	1ac0      	subs	r0, r0, r3
 80007e8:	281b      	cmp	r0, #27
 80007ea:	dca6      	bgt.n	800073a <__aeabi_fdiv+0xbe>
 80007ec:	379e      	adds	r7, #158	; 0x9e
 80007ee:	002a      	movs	r2, r5
 80007f0:	40bd      	lsls	r5, r7
 80007f2:	40c2      	lsrs	r2, r0
 80007f4:	1e6b      	subs	r3, r5, #1
 80007f6:	419d      	sbcs	r5, r3
 80007f8:	4315      	orrs	r5, r2
 80007fa:	076b      	lsls	r3, r5, #29
 80007fc:	d004      	beq.n	8000808 <__aeabi_fdiv+0x18c>
 80007fe:	230f      	movs	r3, #15
 8000800:	402b      	ands	r3, r5
 8000802:	2b04      	cmp	r3, #4
 8000804:	d000      	beq.n	8000808 <__aeabi_fdiv+0x18c>
 8000806:	3504      	adds	r5, #4
 8000808:	016b      	lsls	r3, r5, #5
 800080a:	d544      	bpl.n	8000896 <__aeabi_fdiv+0x21a>
 800080c:	2001      	movs	r0, #1
 800080e:	2500      	movs	r5, #0
 8000810:	e795      	b.n	800073e <__aeabi_fdiv+0xc2>
 8000812:	20ff      	movs	r0, #255	; 0xff
 8000814:	2500      	movs	r5, #0
 8000816:	e792      	b.n	800073e <__aeabi_fdiv+0xc2>
 8000818:	2580      	movs	r5, #128	; 0x80
 800081a:	2600      	movs	r6, #0
 800081c:	20ff      	movs	r0, #255	; 0xff
 800081e:	03ed      	lsls	r5, r5, #15
 8000820:	e78d      	b.n	800073e <__aeabi_fdiv+0xc2>
 8000822:	2300      	movs	r3, #0
 8000824:	4698      	mov	r8, r3
 8000826:	2080      	movs	r0, #128	; 0x80
 8000828:	03c0      	lsls	r0, r0, #15
 800082a:	4205      	tst	r5, r0
 800082c:	d009      	beq.n	8000842 <__aeabi_fdiv+0x1c6>
 800082e:	4643      	mov	r3, r8
 8000830:	4203      	tst	r3, r0
 8000832:	d106      	bne.n	8000842 <__aeabi_fdiv+0x1c6>
 8000834:	4645      	mov	r5, r8
 8000836:	4305      	orrs	r5, r0
 8000838:	026d      	lsls	r5, r5, #9
 800083a:	0026      	movs	r6, r4
 800083c:	20ff      	movs	r0, #255	; 0xff
 800083e:	0a6d      	lsrs	r5, r5, #9
 8000840:	e77d      	b.n	800073e <__aeabi_fdiv+0xc2>
 8000842:	2080      	movs	r0, #128	; 0x80
 8000844:	03c0      	lsls	r0, r0, #15
 8000846:	4305      	orrs	r5, r0
 8000848:	026d      	lsls	r5, r5, #9
 800084a:	20ff      	movs	r0, #255	; 0xff
 800084c:	0a6d      	lsrs	r5, r5, #9
 800084e:	e776      	b.n	800073e <__aeabi_fdiv+0xc2>
 8000850:	4642      	mov	r2, r8
 8000852:	016b      	lsls	r3, r5, #5
 8000854:	0150      	lsls	r0, r2, #5
 8000856:	4283      	cmp	r3, r0
 8000858:	d219      	bcs.n	800088e <__aeabi_fdiv+0x212>
 800085a:	221b      	movs	r2, #27
 800085c:	2500      	movs	r5, #0
 800085e:	3f01      	subs	r7, #1
 8000860:	2601      	movs	r6, #1
 8000862:	001c      	movs	r4, r3
 8000864:	006d      	lsls	r5, r5, #1
 8000866:	005b      	lsls	r3, r3, #1
 8000868:	2c00      	cmp	r4, #0
 800086a:	db01      	blt.n	8000870 <__aeabi_fdiv+0x1f4>
 800086c:	4298      	cmp	r0, r3
 800086e:	d801      	bhi.n	8000874 <__aeabi_fdiv+0x1f8>
 8000870:	1a1b      	subs	r3, r3, r0
 8000872:	4335      	orrs	r5, r6
 8000874:	3a01      	subs	r2, #1
 8000876:	2a00      	cmp	r2, #0
 8000878:	d1f3      	bne.n	8000862 <__aeabi_fdiv+0x1e6>
 800087a:	1e5a      	subs	r2, r3, #1
 800087c:	4193      	sbcs	r3, r2
 800087e:	431d      	orrs	r5, r3
 8000880:	003b      	movs	r3, r7
 8000882:	337f      	adds	r3, #127	; 0x7f
 8000884:	000e      	movs	r6, r1
 8000886:	2b00      	cmp	r3, #0
 8000888:	dd00      	ble.n	800088c <__aeabi_fdiv+0x210>
 800088a:	e741      	b.n	8000710 <__aeabi_fdiv+0x94>
 800088c:	e7aa      	b.n	80007e4 <__aeabi_fdiv+0x168>
 800088e:	221a      	movs	r2, #26
 8000890:	2501      	movs	r5, #1
 8000892:	1a1b      	subs	r3, r3, r0
 8000894:	e7e4      	b.n	8000860 <__aeabi_fdiv+0x1e4>
 8000896:	01ad      	lsls	r5, r5, #6
 8000898:	2000      	movs	r0, #0
 800089a:	0a6d      	lsrs	r5, r5, #9
 800089c:	e74f      	b.n	800073e <__aeabi_fdiv+0xc2>
 800089e:	46c0      	nop			; (mov r8, r8)
 80008a0:	08005d14 	.word	0x08005d14
 80008a4:	f7ffffff 	.word	0xf7ffffff
 80008a8:	08005d54 	.word	0x08005d54

080008ac <__aeabi_fmul>:
 80008ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80008ae:	464f      	mov	r7, r9
 80008b0:	4646      	mov	r6, r8
 80008b2:	46d6      	mov	lr, sl
 80008b4:	0244      	lsls	r4, r0, #9
 80008b6:	0045      	lsls	r5, r0, #1
 80008b8:	b5c0      	push	{r6, r7, lr}
 80008ba:	0a64      	lsrs	r4, r4, #9
 80008bc:	1c0f      	adds	r7, r1, #0
 80008be:	0e2d      	lsrs	r5, r5, #24
 80008c0:	0fc6      	lsrs	r6, r0, #31
 80008c2:	2d00      	cmp	r5, #0
 80008c4:	d100      	bne.n	80008c8 <__aeabi_fmul+0x1c>
 80008c6:	e08d      	b.n	80009e4 <__aeabi_fmul+0x138>
 80008c8:	2dff      	cmp	r5, #255	; 0xff
 80008ca:	d100      	bne.n	80008ce <__aeabi_fmul+0x22>
 80008cc:	e092      	b.n	80009f4 <__aeabi_fmul+0x148>
 80008ce:	2300      	movs	r3, #0
 80008d0:	2080      	movs	r0, #128	; 0x80
 80008d2:	4699      	mov	r9, r3
 80008d4:	469a      	mov	sl, r3
 80008d6:	00e4      	lsls	r4, r4, #3
 80008d8:	04c0      	lsls	r0, r0, #19
 80008da:	4304      	orrs	r4, r0
 80008dc:	3d7f      	subs	r5, #127	; 0x7f
 80008de:	0278      	lsls	r0, r7, #9
 80008e0:	0a43      	lsrs	r3, r0, #9
 80008e2:	4698      	mov	r8, r3
 80008e4:	007b      	lsls	r3, r7, #1
 80008e6:	0e1b      	lsrs	r3, r3, #24
 80008e8:	0fff      	lsrs	r7, r7, #31
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d100      	bne.n	80008f0 <__aeabi_fmul+0x44>
 80008ee:	e070      	b.n	80009d2 <__aeabi_fmul+0x126>
 80008f0:	2bff      	cmp	r3, #255	; 0xff
 80008f2:	d100      	bne.n	80008f6 <__aeabi_fmul+0x4a>
 80008f4:	e086      	b.n	8000a04 <__aeabi_fmul+0x158>
 80008f6:	4642      	mov	r2, r8
 80008f8:	00d0      	lsls	r0, r2, #3
 80008fa:	2280      	movs	r2, #128	; 0x80
 80008fc:	3b7f      	subs	r3, #127	; 0x7f
 80008fe:	18ed      	adds	r5, r5, r3
 8000900:	2300      	movs	r3, #0
 8000902:	04d2      	lsls	r2, r2, #19
 8000904:	4302      	orrs	r2, r0
 8000906:	4690      	mov	r8, r2
 8000908:	469c      	mov	ip, r3
 800090a:	0031      	movs	r1, r6
 800090c:	464b      	mov	r3, r9
 800090e:	4079      	eors	r1, r7
 8000910:	1c68      	adds	r0, r5, #1
 8000912:	2b0f      	cmp	r3, #15
 8000914:	d81c      	bhi.n	8000950 <__aeabi_fmul+0xa4>
 8000916:	4a76      	ldr	r2, [pc, #472]	; (8000af0 <__aeabi_fmul+0x244>)
 8000918:	009b      	lsls	r3, r3, #2
 800091a:	58d3      	ldr	r3, [r2, r3]
 800091c:	469f      	mov	pc, r3
 800091e:	0039      	movs	r1, r7
 8000920:	4644      	mov	r4, r8
 8000922:	46e2      	mov	sl, ip
 8000924:	4653      	mov	r3, sl
 8000926:	2b02      	cmp	r3, #2
 8000928:	d00f      	beq.n	800094a <__aeabi_fmul+0x9e>
 800092a:	2b03      	cmp	r3, #3
 800092c:	d100      	bne.n	8000930 <__aeabi_fmul+0x84>
 800092e:	e0d7      	b.n	8000ae0 <__aeabi_fmul+0x234>
 8000930:	2b01      	cmp	r3, #1
 8000932:	d137      	bne.n	80009a4 <__aeabi_fmul+0xf8>
 8000934:	2000      	movs	r0, #0
 8000936:	2400      	movs	r4, #0
 8000938:	05c0      	lsls	r0, r0, #23
 800093a:	4320      	orrs	r0, r4
 800093c:	07c9      	lsls	r1, r1, #31
 800093e:	4308      	orrs	r0, r1
 8000940:	bce0      	pop	{r5, r6, r7}
 8000942:	46ba      	mov	sl, r7
 8000944:	46b1      	mov	r9, r6
 8000946:	46a8      	mov	r8, r5
 8000948:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800094a:	20ff      	movs	r0, #255	; 0xff
 800094c:	2400      	movs	r4, #0
 800094e:	e7f3      	b.n	8000938 <__aeabi_fmul+0x8c>
 8000950:	0c26      	lsrs	r6, r4, #16
 8000952:	0424      	lsls	r4, r4, #16
 8000954:	0c22      	lsrs	r2, r4, #16
 8000956:	4644      	mov	r4, r8
 8000958:	0424      	lsls	r4, r4, #16
 800095a:	0c24      	lsrs	r4, r4, #16
 800095c:	4643      	mov	r3, r8
 800095e:	0027      	movs	r7, r4
 8000960:	0c1b      	lsrs	r3, r3, #16
 8000962:	4357      	muls	r7, r2
 8000964:	4374      	muls	r4, r6
 8000966:	435a      	muls	r2, r3
 8000968:	435e      	muls	r6, r3
 800096a:	1912      	adds	r2, r2, r4
 800096c:	0c3b      	lsrs	r3, r7, #16
 800096e:	189b      	adds	r3, r3, r2
 8000970:	429c      	cmp	r4, r3
 8000972:	d903      	bls.n	800097c <__aeabi_fmul+0xd0>
 8000974:	2280      	movs	r2, #128	; 0x80
 8000976:	0252      	lsls	r2, r2, #9
 8000978:	4694      	mov	ip, r2
 800097a:	4466      	add	r6, ip
 800097c:	043f      	lsls	r7, r7, #16
 800097e:	041a      	lsls	r2, r3, #16
 8000980:	0c3f      	lsrs	r7, r7, #16
 8000982:	19d2      	adds	r2, r2, r7
 8000984:	0194      	lsls	r4, r2, #6
 8000986:	1e67      	subs	r7, r4, #1
 8000988:	41bc      	sbcs	r4, r7
 800098a:	0c1b      	lsrs	r3, r3, #16
 800098c:	0e92      	lsrs	r2, r2, #26
 800098e:	199b      	adds	r3, r3, r6
 8000990:	4314      	orrs	r4, r2
 8000992:	019b      	lsls	r3, r3, #6
 8000994:	431c      	orrs	r4, r3
 8000996:	011b      	lsls	r3, r3, #4
 8000998:	d400      	bmi.n	800099c <__aeabi_fmul+0xf0>
 800099a:	e09b      	b.n	8000ad4 <__aeabi_fmul+0x228>
 800099c:	2301      	movs	r3, #1
 800099e:	0862      	lsrs	r2, r4, #1
 80009a0:	401c      	ands	r4, r3
 80009a2:	4314      	orrs	r4, r2
 80009a4:	0002      	movs	r2, r0
 80009a6:	327f      	adds	r2, #127	; 0x7f
 80009a8:	2a00      	cmp	r2, #0
 80009aa:	dd64      	ble.n	8000a76 <__aeabi_fmul+0x1ca>
 80009ac:	0763      	lsls	r3, r4, #29
 80009ae:	d004      	beq.n	80009ba <__aeabi_fmul+0x10e>
 80009b0:	230f      	movs	r3, #15
 80009b2:	4023      	ands	r3, r4
 80009b4:	2b04      	cmp	r3, #4
 80009b6:	d000      	beq.n	80009ba <__aeabi_fmul+0x10e>
 80009b8:	3404      	adds	r4, #4
 80009ba:	0123      	lsls	r3, r4, #4
 80009bc:	d503      	bpl.n	80009c6 <__aeabi_fmul+0x11a>
 80009be:	0002      	movs	r2, r0
 80009c0:	4b4c      	ldr	r3, [pc, #304]	; (8000af4 <__aeabi_fmul+0x248>)
 80009c2:	3280      	adds	r2, #128	; 0x80
 80009c4:	401c      	ands	r4, r3
 80009c6:	2afe      	cmp	r2, #254	; 0xfe
 80009c8:	dcbf      	bgt.n	800094a <__aeabi_fmul+0x9e>
 80009ca:	01a4      	lsls	r4, r4, #6
 80009cc:	0a64      	lsrs	r4, r4, #9
 80009ce:	b2d0      	uxtb	r0, r2
 80009d0:	e7b2      	b.n	8000938 <__aeabi_fmul+0x8c>
 80009d2:	4643      	mov	r3, r8
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d13d      	bne.n	8000a54 <__aeabi_fmul+0x1a8>
 80009d8:	464a      	mov	r2, r9
 80009da:	3301      	adds	r3, #1
 80009dc:	431a      	orrs	r2, r3
 80009de:	4691      	mov	r9, r2
 80009e0:	469c      	mov	ip, r3
 80009e2:	e792      	b.n	800090a <__aeabi_fmul+0x5e>
 80009e4:	2c00      	cmp	r4, #0
 80009e6:	d129      	bne.n	8000a3c <__aeabi_fmul+0x190>
 80009e8:	2304      	movs	r3, #4
 80009ea:	4699      	mov	r9, r3
 80009ec:	3b03      	subs	r3, #3
 80009ee:	2500      	movs	r5, #0
 80009f0:	469a      	mov	sl, r3
 80009f2:	e774      	b.n	80008de <__aeabi_fmul+0x32>
 80009f4:	2c00      	cmp	r4, #0
 80009f6:	d11b      	bne.n	8000a30 <__aeabi_fmul+0x184>
 80009f8:	2308      	movs	r3, #8
 80009fa:	4699      	mov	r9, r3
 80009fc:	3b06      	subs	r3, #6
 80009fe:	25ff      	movs	r5, #255	; 0xff
 8000a00:	469a      	mov	sl, r3
 8000a02:	e76c      	b.n	80008de <__aeabi_fmul+0x32>
 8000a04:	4643      	mov	r3, r8
 8000a06:	35ff      	adds	r5, #255	; 0xff
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d10b      	bne.n	8000a24 <__aeabi_fmul+0x178>
 8000a0c:	2302      	movs	r3, #2
 8000a0e:	464a      	mov	r2, r9
 8000a10:	431a      	orrs	r2, r3
 8000a12:	4691      	mov	r9, r2
 8000a14:	469c      	mov	ip, r3
 8000a16:	e778      	b.n	800090a <__aeabi_fmul+0x5e>
 8000a18:	4653      	mov	r3, sl
 8000a1a:	0031      	movs	r1, r6
 8000a1c:	2b02      	cmp	r3, #2
 8000a1e:	d000      	beq.n	8000a22 <__aeabi_fmul+0x176>
 8000a20:	e783      	b.n	800092a <__aeabi_fmul+0x7e>
 8000a22:	e792      	b.n	800094a <__aeabi_fmul+0x9e>
 8000a24:	2303      	movs	r3, #3
 8000a26:	464a      	mov	r2, r9
 8000a28:	431a      	orrs	r2, r3
 8000a2a:	4691      	mov	r9, r2
 8000a2c:	469c      	mov	ip, r3
 8000a2e:	e76c      	b.n	800090a <__aeabi_fmul+0x5e>
 8000a30:	230c      	movs	r3, #12
 8000a32:	4699      	mov	r9, r3
 8000a34:	3b09      	subs	r3, #9
 8000a36:	25ff      	movs	r5, #255	; 0xff
 8000a38:	469a      	mov	sl, r3
 8000a3a:	e750      	b.n	80008de <__aeabi_fmul+0x32>
 8000a3c:	0020      	movs	r0, r4
 8000a3e:	f000 fab1 	bl	8000fa4 <__clzsi2>
 8000a42:	2576      	movs	r5, #118	; 0x76
 8000a44:	1f43      	subs	r3, r0, #5
 8000a46:	409c      	lsls	r4, r3
 8000a48:	2300      	movs	r3, #0
 8000a4a:	426d      	negs	r5, r5
 8000a4c:	4699      	mov	r9, r3
 8000a4e:	469a      	mov	sl, r3
 8000a50:	1a2d      	subs	r5, r5, r0
 8000a52:	e744      	b.n	80008de <__aeabi_fmul+0x32>
 8000a54:	4640      	mov	r0, r8
 8000a56:	f000 faa5 	bl	8000fa4 <__clzsi2>
 8000a5a:	4642      	mov	r2, r8
 8000a5c:	1f43      	subs	r3, r0, #5
 8000a5e:	409a      	lsls	r2, r3
 8000a60:	2300      	movs	r3, #0
 8000a62:	1a2d      	subs	r5, r5, r0
 8000a64:	4690      	mov	r8, r2
 8000a66:	469c      	mov	ip, r3
 8000a68:	3d76      	subs	r5, #118	; 0x76
 8000a6a:	e74e      	b.n	800090a <__aeabi_fmul+0x5e>
 8000a6c:	2480      	movs	r4, #128	; 0x80
 8000a6e:	2100      	movs	r1, #0
 8000a70:	20ff      	movs	r0, #255	; 0xff
 8000a72:	03e4      	lsls	r4, r4, #15
 8000a74:	e760      	b.n	8000938 <__aeabi_fmul+0x8c>
 8000a76:	2301      	movs	r3, #1
 8000a78:	1a9b      	subs	r3, r3, r2
 8000a7a:	2b1b      	cmp	r3, #27
 8000a7c:	dd00      	ble.n	8000a80 <__aeabi_fmul+0x1d4>
 8000a7e:	e759      	b.n	8000934 <__aeabi_fmul+0x88>
 8000a80:	0022      	movs	r2, r4
 8000a82:	309e      	adds	r0, #158	; 0x9e
 8000a84:	40da      	lsrs	r2, r3
 8000a86:	4084      	lsls	r4, r0
 8000a88:	0013      	movs	r3, r2
 8000a8a:	1e62      	subs	r2, r4, #1
 8000a8c:	4194      	sbcs	r4, r2
 8000a8e:	431c      	orrs	r4, r3
 8000a90:	0763      	lsls	r3, r4, #29
 8000a92:	d004      	beq.n	8000a9e <__aeabi_fmul+0x1f2>
 8000a94:	230f      	movs	r3, #15
 8000a96:	4023      	ands	r3, r4
 8000a98:	2b04      	cmp	r3, #4
 8000a9a:	d000      	beq.n	8000a9e <__aeabi_fmul+0x1f2>
 8000a9c:	3404      	adds	r4, #4
 8000a9e:	0163      	lsls	r3, r4, #5
 8000aa0:	d51a      	bpl.n	8000ad8 <__aeabi_fmul+0x22c>
 8000aa2:	2001      	movs	r0, #1
 8000aa4:	2400      	movs	r4, #0
 8000aa6:	e747      	b.n	8000938 <__aeabi_fmul+0x8c>
 8000aa8:	2080      	movs	r0, #128	; 0x80
 8000aaa:	03c0      	lsls	r0, r0, #15
 8000aac:	4204      	tst	r4, r0
 8000aae:	d009      	beq.n	8000ac4 <__aeabi_fmul+0x218>
 8000ab0:	4643      	mov	r3, r8
 8000ab2:	4203      	tst	r3, r0
 8000ab4:	d106      	bne.n	8000ac4 <__aeabi_fmul+0x218>
 8000ab6:	4644      	mov	r4, r8
 8000ab8:	4304      	orrs	r4, r0
 8000aba:	0264      	lsls	r4, r4, #9
 8000abc:	0039      	movs	r1, r7
 8000abe:	20ff      	movs	r0, #255	; 0xff
 8000ac0:	0a64      	lsrs	r4, r4, #9
 8000ac2:	e739      	b.n	8000938 <__aeabi_fmul+0x8c>
 8000ac4:	2080      	movs	r0, #128	; 0x80
 8000ac6:	03c0      	lsls	r0, r0, #15
 8000ac8:	4304      	orrs	r4, r0
 8000aca:	0264      	lsls	r4, r4, #9
 8000acc:	0031      	movs	r1, r6
 8000ace:	20ff      	movs	r0, #255	; 0xff
 8000ad0:	0a64      	lsrs	r4, r4, #9
 8000ad2:	e731      	b.n	8000938 <__aeabi_fmul+0x8c>
 8000ad4:	0028      	movs	r0, r5
 8000ad6:	e765      	b.n	80009a4 <__aeabi_fmul+0xf8>
 8000ad8:	01a4      	lsls	r4, r4, #6
 8000ada:	2000      	movs	r0, #0
 8000adc:	0a64      	lsrs	r4, r4, #9
 8000ade:	e72b      	b.n	8000938 <__aeabi_fmul+0x8c>
 8000ae0:	2080      	movs	r0, #128	; 0x80
 8000ae2:	03c0      	lsls	r0, r0, #15
 8000ae4:	4304      	orrs	r4, r0
 8000ae6:	0264      	lsls	r4, r4, #9
 8000ae8:	20ff      	movs	r0, #255	; 0xff
 8000aea:	0a64      	lsrs	r4, r4, #9
 8000aec:	e724      	b.n	8000938 <__aeabi_fmul+0x8c>
 8000aee:	46c0      	nop			; (mov r8, r8)
 8000af0:	08005d94 	.word	0x08005d94
 8000af4:	f7ffffff 	.word	0xf7ffffff

08000af8 <__aeabi_fsub>:
 8000af8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000afa:	46ce      	mov	lr, r9
 8000afc:	4647      	mov	r7, r8
 8000afe:	0243      	lsls	r3, r0, #9
 8000b00:	0a5b      	lsrs	r3, r3, #9
 8000b02:	024e      	lsls	r6, r1, #9
 8000b04:	00da      	lsls	r2, r3, #3
 8000b06:	4694      	mov	ip, r2
 8000b08:	0a72      	lsrs	r2, r6, #9
 8000b0a:	4691      	mov	r9, r2
 8000b0c:	0045      	lsls	r5, r0, #1
 8000b0e:	004a      	lsls	r2, r1, #1
 8000b10:	b580      	push	{r7, lr}
 8000b12:	0e2d      	lsrs	r5, r5, #24
 8000b14:	001f      	movs	r7, r3
 8000b16:	0fc4      	lsrs	r4, r0, #31
 8000b18:	0e12      	lsrs	r2, r2, #24
 8000b1a:	0fc9      	lsrs	r1, r1, #31
 8000b1c:	09b6      	lsrs	r6, r6, #6
 8000b1e:	2aff      	cmp	r2, #255	; 0xff
 8000b20:	d05b      	beq.n	8000bda <__aeabi_fsub+0xe2>
 8000b22:	2001      	movs	r0, #1
 8000b24:	4041      	eors	r1, r0
 8000b26:	428c      	cmp	r4, r1
 8000b28:	d039      	beq.n	8000b9e <__aeabi_fsub+0xa6>
 8000b2a:	1aa8      	subs	r0, r5, r2
 8000b2c:	2800      	cmp	r0, #0
 8000b2e:	dd5a      	ble.n	8000be6 <__aeabi_fsub+0xee>
 8000b30:	2a00      	cmp	r2, #0
 8000b32:	d06a      	beq.n	8000c0a <__aeabi_fsub+0x112>
 8000b34:	2dff      	cmp	r5, #255	; 0xff
 8000b36:	d100      	bne.n	8000b3a <__aeabi_fsub+0x42>
 8000b38:	e0d9      	b.n	8000cee <__aeabi_fsub+0x1f6>
 8000b3a:	2280      	movs	r2, #128	; 0x80
 8000b3c:	04d2      	lsls	r2, r2, #19
 8000b3e:	4316      	orrs	r6, r2
 8000b40:	281b      	cmp	r0, #27
 8000b42:	dc00      	bgt.n	8000b46 <__aeabi_fsub+0x4e>
 8000b44:	e0e9      	b.n	8000d1a <__aeabi_fsub+0x222>
 8000b46:	2001      	movs	r0, #1
 8000b48:	4663      	mov	r3, ip
 8000b4a:	1a18      	subs	r0, r3, r0
 8000b4c:	0143      	lsls	r3, r0, #5
 8000b4e:	d400      	bmi.n	8000b52 <__aeabi_fsub+0x5a>
 8000b50:	e0b4      	b.n	8000cbc <__aeabi_fsub+0x1c4>
 8000b52:	0180      	lsls	r0, r0, #6
 8000b54:	0987      	lsrs	r7, r0, #6
 8000b56:	0038      	movs	r0, r7
 8000b58:	f000 fa24 	bl	8000fa4 <__clzsi2>
 8000b5c:	3805      	subs	r0, #5
 8000b5e:	4087      	lsls	r7, r0
 8000b60:	4285      	cmp	r5, r0
 8000b62:	dc00      	bgt.n	8000b66 <__aeabi_fsub+0x6e>
 8000b64:	e0cc      	b.n	8000d00 <__aeabi_fsub+0x208>
 8000b66:	1a2d      	subs	r5, r5, r0
 8000b68:	48b5      	ldr	r0, [pc, #724]	; (8000e40 <__aeabi_fsub+0x348>)
 8000b6a:	4038      	ands	r0, r7
 8000b6c:	0743      	lsls	r3, r0, #29
 8000b6e:	d004      	beq.n	8000b7a <__aeabi_fsub+0x82>
 8000b70:	230f      	movs	r3, #15
 8000b72:	4003      	ands	r3, r0
 8000b74:	2b04      	cmp	r3, #4
 8000b76:	d000      	beq.n	8000b7a <__aeabi_fsub+0x82>
 8000b78:	3004      	adds	r0, #4
 8000b7a:	0143      	lsls	r3, r0, #5
 8000b7c:	d400      	bmi.n	8000b80 <__aeabi_fsub+0x88>
 8000b7e:	e0a0      	b.n	8000cc2 <__aeabi_fsub+0x1ca>
 8000b80:	1c6a      	adds	r2, r5, #1
 8000b82:	2dfe      	cmp	r5, #254	; 0xfe
 8000b84:	d100      	bne.n	8000b88 <__aeabi_fsub+0x90>
 8000b86:	e08d      	b.n	8000ca4 <__aeabi_fsub+0x1ac>
 8000b88:	0180      	lsls	r0, r0, #6
 8000b8a:	0a47      	lsrs	r7, r0, #9
 8000b8c:	b2d2      	uxtb	r2, r2
 8000b8e:	05d0      	lsls	r0, r2, #23
 8000b90:	4338      	orrs	r0, r7
 8000b92:	07e4      	lsls	r4, r4, #31
 8000b94:	4320      	orrs	r0, r4
 8000b96:	bcc0      	pop	{r6, r7}
 8000b98:	46b9      	mov	r9, r7
 8000b9a:	46b0      	mov	r8, r6
 8000b9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000b9e:	1aa8      	subs	r0, r5, r2
 8000ba0:	4680      	mov	r8, r0
 8000ba2:	2800      	cmp	r0, #0
 8000ba4:	dd45      	ble.n	8000c32 <__aeabi_fsub+0x13a>
 8000ba6:	2a00      	cmp	r2, #0
 8000ba8:	d070      	beq.n	8000c8c <__aeabi_fsub+0x194>
 8000baa:	2dff      	cmp	r5, #255	; 0xff
 8000bac:	d100      	bne.n	8000bb0 <__aeabi_fsub+0xb8>
 8000bae:	e09e      	b.n	8000cee <__aeabi_fsub+0x1f6>
 8000bb0:	2380      	movs	r3, #128	; 0x80
 8000bb2:	04db      	lsls	r3, r3, #19
 8000bb4:	431e      	orrs	r6, r3
 8000bb6:	4643      	mov	r3, r8
 8000bb8:	2b1b      	cmp	r3, #27
 8000bba:	dc00      	bgt.n	8000bbe <__aeabi_fsub+0xc6>
 8000bbc:	e0d2      	b.n	8000d64 <__aeabi_fsub+0x26c>
 8000bbe:	2001      	movs	r0, #1
 8000bc0:	4460      	add	r0, ip
 8000bc2:	0143      	lsls	r3, r0, #5
 8000bc4:	d57a      	bpl.n	8000cbc <__aeabi_fsub+0x1c4>
 8000bc6:	3501      	adds	r5, #1
 8000bc8:	2dff      	cmp	r5, #255	; 0xff
 8000bca:	d06b      	beq.n	8000ca4 <__aeabi_fsub+0x1ac>
 8000bcc:	2301      	movs	r3, #1
 8000bce:	4a9d      	ldr	r2, [pc, #628]	; (8000e44 <__aeabi_fsub+0x34c>)
 8000bd0:	4003      	ands	r3, r0
 8000bd2:	0840      	lsrs	r0, r0, #1
 8000bd4:	4010      	ands	r0, r2
 8000bd6:	4318      	orrs	r0, r3
 8000bd8:	e7c8      	b.n	8000b6c <__aeabi_fsub+0x74>
 8000bda:	2e00      	cmp	r6, #0
 8000bdc:	d020      	beq.n	8000c20 <__aeabi_fsub+0x128>
 8000bde:	428c      	cmp	r4, r1
 8000be0:	d023      	beq.n	8000c2a <__aeabi_fsub+0x132>
 8000be2:	0028      	movs	r0, r5
 8000be4:	38ff      	subs	r0, #255	; 0xff
 8000be6:	2800      	cmp	r0, #0
 8000be8:	d039      	beq.n	8000c5e <__aeabi_fsub+0x166>
 8000bea:	1b57      	subs	r7, r2, r5
 8000bec:	2d00      	cmp	r5, #0
 8000bee:	d000      	beq.n	8000bf2 <__aeabi_fsub+0xfa>
 8000bf0:	e09d      	b.n	8000d2e <__aeabi_fsub+0x236>
 8000bf2:	4663      	mov	r3, ip
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d100      	bne.n	8000bfa <__aeabi_fsub+0x102>
 8000bf8:	e0db      	b.n	8000db2 <__aeabi_fsub+0x2ba>
 8000bfa:	1e7b      	subs	r3, r7, #1
 8000bfc:	2f01      	cmp	r7, #1
 8000bfe:	d100      	bne.n	8000c02 <__aeabi_fsub+0x10a>
 8000c00:	e10d      	b.n	8000e1e <__aeabi_fsub+0x326>
 8000c02:	2fff      	cmp	r7, #255	; 0xff
 8000c04:	d071      	beq.n	8000cea <__aeabi_fsub+0x1f2>
 8000c06:	001f      	movs	r7, r3
 8000c08:	e098      	b.n	8000d3c <__aeabi_fsub+0x244>
 8000c0a:	2e00      	cmp	r6, #0
 8000c0c:	d100      	bne.n	8000c10 <__aeabi_fsub+0x118>
 8000c0e:	e0a7      	b.n	8000d60 <__aeabi_fsub+0x268>
 8000c10:	1e42      	subs	r2, r0, #1
 8000c12:	2801      	cmp	r0, #1
 8000c14:	d100      	bne.n	8000c18 <__aeabi_fsub+0x120>
 8000c16:	e0e6      	b.n	8000de6 <__aeabi_fsub+0x2ee>
 8000c18:	28ff      	cmp	r0, #255	; 0xff
 8000c1a:	d068      	beq.n	8000cee <__aeabi_fsub+0x1f6>
 8000c1c:	0010      	movs	r0, r2
 8000c1e:	e78f      	b.n	8000b40 <__aeabi_fsub+0x48>
 8000c20:	2001      	movs	r0, #1
 8000c22:	4041      	eors	r1, r0
 8000c24:	42a1      	cmp	r1, r4
 8000c26:	d000      	beq.n	8000c2a <__aeabi_fsub+0x132>
 8000c28:	e77f      	b.n	8000b2a <__aeabi_fsub+0x32>
 8000c2a:	20ff      	movs	r0, #255	; 0xff
 8000c2c:	4240      	negs	r0, r0
 8000c2e:	4680      	mov	r8, r0
 8000c30:	44a8      	add	r8, r5
 8000c32:	4640      	mov	r0, r8
 8000c34:	2800      	cmp	r0, #0
 8000c36:	d038      	beq.n	8000caa <__aeabi_fsub+0x1b2>
 8000c38:	1b51      	subs	r1, r2, r5
 8000c3a:	2d00      	cmp	r5, #0
 8000c3c:	d100      	bne.n	8000c40 <__aeabi_fsub+0x148>
 8000c3e:	e0ae      	b.n	8000d9e <__aeabi_fsub+0x2a6>
 8000c40:	2aff      	cmp	r2, #255	; 0xff
 8000c42:	d100      	bne.n	8000c46 <__aeabi_fsub+0x14e>
 8000c44:	e0df      	b.n	8000e06 <__aeabi_fsub+0x30e>
 8000c46:	2380      	movs	r3, #128	; 0x80
 8000c48:	4660      	mov	r0, ip
 8000c4a:	04db      	lsls	r3, r3, #19
 8000c4c:	4318      	orrs	r0, r3
 8000c4e:	4684      	mov	ip, r0
 8000c50:	291b      	cmp	r1, #27
 8000c52:	dc00      	bgt.n	8000c56 <__aeabi_fsub+0x15e>
 8000c54:	e0d9      	b.n	8000e0a <__aeabi_fsub+0x312>
 8000c56:	2001      	movs	r0, #1
 8000c58:	0015      	movs	r5, r2
 8000c5a:	1980      	adds	r0, r0, r6
 8000c5c:	e7b1      	b.n	8000bc2 <__aeabi_fsub+0xca>
 8000c5e:	20fe      	movs	r0, #254	; 0xfe
 8000c60:	1c6a      	adds	r2, r5, #1
 8000c62:	4210      	tst	r0, r2
 8000c64:	d171      	bne.n	8000d4a <__aeabi_fsub+0x252>
 8000c66:	2d00      	cmp	r5, #0
 8000c68:	d000      	beq.n	8000c6c <__aeabi_fsub+0x174>
 8000c6a:	e0a6      	b.n	8000dba <__aeabi_fsub+0x2c2>
 8000c6c:	4663      	mov	r3, ip
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d100      	bne.n	8000c74 <__aeabi_fsub+0x17c>
 8000c72:	e0d9      	b.n	8000e28 <__aeabi_fsub+0x330>
 8000c74:	2200      	movs	r2, #0
 8000c76:	2e00      	cmp	r6, #0
 8000c78:	d100      	bne.n	8000c7c <__aeabi_fsub+0x184>
 8000c7a:	e788      	b.n	8000b8e <__aeabi_fsub+0x96>
 8000c7c:	1b98      	subs	r0, r3, r6
 8000c7e:	0143      	lsls	r3, r0, #5
 8000c80:	d400      	bmi.n	8000c84 <__aeabi_fsub+0x18c>
 8000c82:	e0e1      	b.n	8000e48 <__aeabi_fsub+0x350>
 8000c84:	4663      	mov	r3, ip
 8000c86:	000c      	movs	r4, r1
 8000c88:	1af0      	subs	r0, r6, r3
 8000c8a:	e76f      	b.n	8000b6c <__aeabi_fsub+0x74>
 8000c8c:	2e00      	cmp	r6, #0
 8000c8e:	d100      	bne.n	8000c92 <__aeabi_fsub+0x19a>
 8000c90:	e0b7      	b.n	8000e02 <__aeabi_fsub+0x30a>
 8000c92:	0002      	movs	r2, r0
 8000c94:	3a01      	subs	r2, #1
 8000c96:	2801      	cmp	r0, #1
 8000c98:	d100      	bne.n	8000c9c <__aeabi_fsub+0x1a4>
 8000c9a:	e09c      	b.n	8000dd6 <__aeabi_fsub+0x2de>
 8000c9c:	28ff      	cmp	r0, #255	; 0xff
 8000c9e:	d026      	beq.n	8000cee <__aeabi_fsub+0x1f6>
 8000ca0:	4690      	mov	r8, r2
 8000ca2:	e788      	b.n	8000bb6 <__aeabi_fsub+0xbe>
 8000ca4:	22ff      	movs	r2, #255	; 0xff
 8000ca6:	2700      	movs	r7, #0
 8000ca8:	e771      	b.n	8000b8e <__aeabi_fsub+0x96>
 8000caa:	20fe      	movs	r0, #254	; 0xfe
 8000cac:	1c6a      	adds	r2, r5, #1
 8000cae:	4210      	tst	r0, r2
 8000cb0:	d064      	beq.n	8000d7c <__aeabi_fsub+0x284>
 8000cb2:	2aff      	cmp	r2, #255	; 0xff
 8000cb4:	d0f6      	beq.n	8000ca4 <__aeabi_fsub+0x1ac>
 8000cb6:	0015      	movs	r5, r2
 8000cb8:	4466      	add	r6, ip
 8000cba:	0870      	lsrs	r0, r6, #1
 8000cbc:	0743      	lsls	r3, r0, #29
 8000cbe:	d000      	beq.n	8000cc2 <__aeabi_fsub+0x1ca>
 8000cc0:	e756      	b.n	8000b70 <__aeabi_fsub+0x78>
 8000cc2:	08c3      	lsrs	r3, r0, #3
 8000cc4:	2dff      	cmp	r5, #255	; 0xff
 8000cc6:	d012      	beq.n	8000cee <__aeabi_fsub+0x1f6>
 8000cc8:	025b      	lsls	r3, r3, #9
 8000cca:	0a5f      	lsrs	r7, r3, #9
 8000ccc:	b2ea      	uxtb	r2, r5
 8000cce:	e75e      	b.n	8000b8e <__aeabi_fsub+0x96>
 8000cd0:	4662      	mov	r2, ip
 8000cd2:	2a00      	cmp	r2, #0
 8000cd4:	d100      	bne.n	8000cd8 <__aeabi_fsub+0x1e0>
 8000cd6:	e096      	b.n	8000e06 <__aeabi_fsub+0x30e>
 8000cd8:	2e00      	cmp	r6, #0
 8000cda:	d008      	beq.n	8000cee <__aeabi_fsub+0x1f6>
 8000cdc:	2280      	movs	r2, #128	; 0x80
 8000cde:	03d2      	lsls	r2, r2, #15
 8000ce0:	4213      	tst	r3, r2
 8000ce2:	d004      	beq.n	8000cee <__aeabi_fsub+0x1f6>
 8000ce4:	4648      	mov	r0, r9
 8000ce6:	4210      	tst	r0, r2
 8000ce8:	d101      	bne.n	8000cee <__aeabi_fsub+0x1f6>
 8000cea:	000c      	movs	r4, r1
 8000cec:	464b      	mov	r3, r9
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d0d8      	beq.n	8000ca4 <__aeabi_fsub+0x1ac>
 8000cf2:	2780      	movs	r7, #128	; 0x80
 8000cf4:	03ff      	lsls	r7, r7, #15
 8000cf6:	431f      	orrs	r7, r3
 8000cf8:	027f      	lsls	r7, r7, #9
 8000cfa:	22ff      	movs	r2, #255	; 0xff
 8000cfc:	0a7f      	lsrs	r7, r7, #9
 8000cfe:	e746      	b.n	8000b8e <__aeabi_fsub+0x96>
 8000d00:	2320      	movs	r3, #32
 8000d02:	003a      	movs	r2, r7
 8000d04:	1b45      	subs	r5, r0, r5
 8000d06:	0038      	movs	r0, r7
 8000d08:	3501      	adds	r5, #1
 8000d0a:	40ea      	lsrs	r2, r5
 8000d0c:	1b5d      	subs	r5, r3, r5
 8000d0e:	40a8      	lsls	r0, r5
 8000d10:	1e43      	subs	r3, r0, #1
 8000d12:	4198      	sbcs	r0, r3
 8000d14:	2500      	movs	r5, #0
 8000d16:	4310      	orrs	r0, r2
 8000d18:	e728      	b.n	8000b6c <__aeabi_fsub+0x74>
 8000d1a:	2320      	movs	r3, #32
 8000d1c:	1a1b      	subs	r3, r3, r0
 8000d1e:	0032      	movs	r2, r6
 8000d20:	409e      	lsls	r6, r3
 8000d22:	40c2      	lsrs	r2, r0
 8000d24:	0030      	movs	r0, r6
 8000d26:	1e43      	subs	r3, r0, #1
 8000d28:	4198      	sbcs	r0, r3
 8000d2a:	4310      	orrs	r0, r2
 8000d2c:	e70c      	b.n	8000b48 <__aeabi_fsub+0x50>
 8000d2e:	2aff      	cmp	r2, #255	; 0xff
 8000d30:	d0db      	beq.n	8000cea <__aeabi_fsub+0x1f2>
 8000d32:	2380      	movs	r3, #128	; 0x80
 8000d34:	4660      	mov	r0, ip
 8000d36:	04db      	lsls	r3, r3, #19
 8000d38:	4318      	orrs	r0, r3
 8000d3a:	4684      	mov	ip, r0
 8000d3c:	2f1b      	cmp	r7, #27
 8000d3e:	dd56      	ble.n	8000dee <__aeabi_fsub+0x2f6>
 8000d40:	2001      	movs	r0, #1
 8000d42:	000c      	movs	r4, r1
 8000d44:	0015      	movs	r5, r2
 8000d46:	1a30      	subs	r0, r6, r0
 8000d48:	e700      	b.n	8000b4c <__aeabi_fsub+0x54>
 8000d4a:	4663      	mov	r3, ip
 8000d4c:	1b9f      	subs	r7, r3, r6
 8000d4e:	017b      	lsls	r3, r7, #5
 8000d50:	d43d      	bmi.n	8000dce <__aeabi_fsub+0x2d6>
 8000d52:	2f00      	cmp	r7, #0
 8000d54:	d000      	beq.n	8000d58 <__aeabi_fsub+0x260>
 8000d56:	e6fe      	b.n	8000b56 <__aeabi_fsub+0x5e>
 8000d58:	2400      	movs	r4, #0
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	2700      	movs	r7, #0
 8000d5e:	e716      	b.n	8000b8e <__aeabi_fsub+0x96>
 8000d60:	0005      	movs	r5, r0
 8000d62:	e7af      	b.n	8000cc4 <__aeabi_fsub+0x1cc>
 8000d64:	0032      	movs	r2, r6
 8000d66:	4643      	mov	r3, r8
 8000d68:	4641      	mov	r1, r8
 8000d6a:	40da      	lsrs	r2, r3
 8000d6c:	2320      	movs	r3, #32
 8000d6e:	1a5b      	subs	r3, r3, r1
 8000d70:	409e      	lsls	r6, r3
 8000d72:	0030      	movs	r0, r6
 8000d74:	1e43      	subs	r3, r0, #1
 8000d76:	4198      	sbcs	r0, r3
 8000d78:	4310      	orrs	r0, r2
 8000d7a:	e721      	b.n	8000bc0 <__aeabi_fsub+0xc8>
 8000d7c:	2d00      	cmp	r5, #0
 8000d7e:	d1a7      	bne.n	8000cd0 <__aeabi_fsub+0x1d8>
 8000d80:	4663      	mov	r3, ip
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d059      	beq.n	8000e3a <__aeabi_fsub+0x342>
 8000d86:	2200      	movs	r2, #0
 8000d88:	2e00      	cmp	r6, #0
 8000d8a:	d100      	bne.n	8000d8e <__aeabi_fsub+0x296>
 8000d8c:	e6ff      	b.n	8000b8e <__aeabi_fsub+0x96>
 8000d8e:	0030      	movs	r0, r6
 8000d90:	4460      	add	r0, ip
 8000d92:	0143      	lsls	r3, r0, #5
 8000d94:	d592      	bpl.n	8000cbc <__aeabi_fsub+0x1c4>
 8000d96:	4b2a      	ldr	r3, [pc, #168]	; (8000e40 <__aeabi_fsub+0x348>)
 8000d98:	3501      	adds	r5, #1
 8000d9a:	4018      	ands	r0, r3
 8000d9c:	e78e      	b.n	8000cbc <__aeabi_fsub+0x1c4>
 8000d9e:	4663      	mov	r3, ip
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d047      	beq.n	8000e34 <__aeabi_fsub+0x33c>
 8000da4:	1e4b      	subs	r3, r1, #1
 8000da6:	2901      	cmp	r1, #1
 8000da8:	d015      	beq.n	8000dd6 <__aeabi_fsub+0x2de>
 8000daa:	29ff      	cmp	r1, #255	; 0xff
 8000dac:	d02b      	beq.n	8000e06 <__aeabi_fsub+0x30e>
 8000dae:	0019      	movs	r1, r3
 8000db0:	e74e      	b.n	8000c50 <__aeabi_fsub+0x158>
 8000db2:	000c      	movs	r4, r1
 8000db4:	464b      	mov	r3, r9
 8000db6:	003d      	movs	r5, r7
 8000db8:	e784      	b.n	8000cc4 <__aeabi_fsub+0x1cc>
 8000dba:	4662      	mov	r2, ip
 8000dbc:	2a00      	cmp	r2, #0
 8000dbe:	d18b      	bne.n	8000cd8 <__aeabi_fsub+0x1e0>
 8000dc0:	2e00      	cmp	r6, #0
 8000dc2:	d192      	bne.n	8000cea <__aeabi_fsub+0x1f2>
 8000dc4:	2780      	movs	r7, #128	; 0x80
 8000dc6:	2400      	movs	r4, #0
 8000dc8:	22ff      	movs	r2, #255	; 0xff
 8000dca:	03ff      	lsls	r7, r7, #15
 8000dcc:	e6df      	b.n	8000b8e <__aeabi_fsub+0x96>
 8000dce:	4663      	mov	r3, ip
 8000dd0:	000c      	movs	r4, r1
 8000dd2:	1af7      	subs	r7, r6, r3
 8000dd4:	e6bf      	b.n	8000b56 <__aeabi_fsub+0x5e>
 8000dd6:	0030      	movs	r0, r6
 8000dd8:	4460      	add	r0, ip
 8000dda:	2501      	movs	r5, #1
 8000ddc:	0143      	lsls	r3, r0, #5
 8000dde:	d400      	bmi.n	8000de2 <__aeabi_fsub+0x2ea>
 8000de0:	e76c      	b.n	8000cbc <__aeabi_fsub+0x1c4>
 8000de2:	2502      	movs	r5, #2
 8000de4:	e6f2      	b.n	8000bcc <__aeabi_fsub+0xd4>
 8000de6:	4663      	mov	r3, ip
 8000de8:	2501      	movs	r5, #1
 8000dea:	1b98      	subs	r0, r3, r6
 8000dec:	e6ae      	b.n	8000b4c <__aeabi_fsub+0x54>
 8000dee:	2320      	movs	r3, #32
 8000df0:	4664      	mov	r4, ip
 8000df2:	4660      	mov	r0, ip
 8000df4:	40fc      	lsrs	r4, r7
 8000df6:	1bdf      	subs	r7, r3, r7
 8000df8:	40b8      	lsls	r0, r7
 8000dfa:	1e43      	subs	r3, r0, #1
 8000dfc:	4198      	sbcs	r0, r3
 8000dfe:	4320      	orrs	r0, r4
 8000e00:	e79f      	b.n	8000d42 <__aeabi_fsub+0x24a>
 8000e02:	0005      	movs	r5, r0
 8000e04:	e75e      	b.n	8000cc4 <__aeabi_fsub+0x1cc>
 8000e06:	464b      	mov	r3, r9
 8000e08:	e771      	b.n	8000cee <__aeabi_fsub+0x1f6>
 8000e0a:	2320      	movs	r3, #32
 8000e0c:	4665      	mov	r5, ip
 8000e0e:	4660      	mov	r0, ip
 8000e10:	40cd      	lsrs	r5, r1
 8000e12:	1a59      	subs	r1, r3, r1
 8000e14:	4088      	lsls	r0, r1
 8000e16:	1e43      	subs	r3, r0, #1
 8000e18:	4198      	sbcs	r0, r3
 8000e1a:	4328      	orrs	r0, r5
 8000e1c:	e71c      	b.n	8000c58 <__aeabi_fsub+0x160>
 8000e1e:	4663      	mov	r3, ip
 8000e20:	000c      	movs	r4, r1
 8000e22:	2501      	movs	r5, #1
 8000e24:	1af0      	subs	r0, r6, r3
 8000e26:	e691      	b.n	8000b4c <__aeabi_fsub+0x54>
 8000e28:	2e00      	cmp	r6, #0
 8000e2a:	d095      	beq.n	8000d58 <__aeabi_fsub+0x260>
 8000e2c:	000c      	movs	r4, r1
 8000e2e:	464f      	mov	r7, r9
 8000e30:	2200      	movs	r2, #0
 8000e32:	e6ac      	b.n	8000b8e <__aeabi_fsub+0x96>
 8000e34:	464b      	mov	r3, r9
 8000e36:	000d      	movs	r5, r1
 8000e38:	e744      	b.n	8000cc4 <__aeabi_fsub+0x1cc>
 8000e3a:	464f      	mov	r7, r9
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	e6a6      	b.n	8000b8e <__aeabi_fsub+0x96>
 8000e40:	fbffffff 	.word	0xfbffffff
 8000e44:	7dffffff 	.word	0x7dffffff
 8000e48:	2800      	cmp	r0, #0
 8000e4a:	d000      	beq.n	8000e4e <__aeabi_fsub+0x356>
 8000e4c:	e736      	b.n	8000cbc <__aeabi_fsub+0x1c4>
 8000e4e:	2400      	movs	r4, #0
 8000e50:	2700      	movs	r7, #0
 8000e52:	e69c      	b.n	8000b8e <__aeabi_fsub+0x96>

08000e54 <__aeabi_f2iz>:
 8000e54:	0241      	lsls	r1, r0, #9
 8000e56:	0042      	lsls	r2, r0, #1
 8000e58:	0fc3      	lsrs	r3, r0, #31
 8000e5a:	0a49      	lsrs	r1, r1, #9
 8000e5c:	2000      	movs	r0, #0
 8000e5e:	0e12      	lsrs	r2, r2, #24
 8000e60:	2a7e      	cmp	r2, #126	; 0x7e
 8000e62:	dd03      	ble.n	8000e6c <__aeabi_f2iz+0x18>
 8000e64:	2a9d      	cmp	r2, #157	; 0x9d
 8000e66:	dd02      	ble.n	8000e6e <__aeabi_f2iz+0x1a>
 8000e68:	4a09      	ldr	r2, [pc, #36]	; (8000e90 <__aeabi_f2iz+0x3c>)
 8000e6a:	1898      	adds	r0, r3, r2
 8000e6c:	4770      	bx	lr
 8000e6e:	2080      	movs	r0, #128	; 0x80
 8000e70:	0400      	lsls	r0, r0, #16
 8000e72:	4301      	orrs	r1, r0
 8000e74:	2a95      	cmp	r2, #149	; 0x95
 8000e76:	dc07      	bgt.n	8000e88 <__aeabi_f2iz+0x34>
 8000e78:	2096      	movs	r0, #150	; 0x96
 8000e7a:	1a82      	subs	r2, r0, r2
 8000e7c:	40d1      	lsrs	r1, r2
 8000e7e:	4248      	negs	r0, r1
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d1f3      	bne.n	8000e6c <__aeabi_f2iz+0x18>
 8000e84:	0008      	movs	r0, r1
 8000e86:	e7f1      	b.n	8000e6c <__aeabi_f2iz+0x18>
 8000e88:	3a96      	subs	r2, #150	; 0x96
 8000e8a:	4091      	lsls	r1, r2
 8000e8c:	e7f7      	b.n	8000e7e <__aeabi_f2iz+0x2a>
 8000e8e:	46c0      	nop			; (mov r8, r8)
 8000e90:	7fffffff 	.word	0x7fffffff

08000e94 <__aeabi_i2f>:
 8000e94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e96:	2800      	cmp	r0, #0
 8000e98:	d013      	beq.n	8000ec2 <__aeabi_i2f+0x2e>
 8000e9a:	17c3      	asrs	r3, r0, #31
 8000e9c:	18c6      	adds	r6, r0, r3
 8000e9e:	405e      	eors	r6, r3
 8000ea0:	0fc4      	lsrs	r4, r0, #31
 8000ea2:	0030      	movs	r0, r6
 8000ea4:	f000 f87e 	bl	8000fa4 <__clzsi2>
 8000ea8:	239e      	movs	r3, #158	; 0x9e
 8000eaa:	0005      	movs	r5, r0
 8000eac:	1a1b      	subs	r3, r3, r0
 8000eae:	2b96      	cmp	r3, #150	; 0x96
 8000eb0:	dc0f      	bgt.n	8000ed2 <__aeabi_i2f+0x3e>
 8000eb2:	2808      	cmp	r0, #8
 8000eb4:	dd01      	ble.n	8000eba <__aeabi_i2f+0x26>
 8000eb6:	3d08      	subs	r5, #8
 8000eb8:	40ae      	lsls	r6, r5
 8000eba:	0276      	lsls	r6, r6, #9
 8000ebc:	0a76      	lsrs	r6, r6, #9
 8000ebe:	b2d8      	uxtb	r0, r3
 8000ec0:	e002      	b.n	8000ec8 <__aeabi_i2f+0x34>
 8000ec2:	2400      	movs	r4, #0
 8000ec4:	2000      	movs	r0, #0
 8000ec6:	2600      	movs	r6, #0
 8000ec8:	05c0      	lsls	r0, r0, #23
 8000eca:	4330      	orrs	r0, r6
 8000ecc:	07e4      	lsls	r4, r4, #31
 8000ece:	4320      	orrs	r0, r4
 8000ed0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000ed2:	2b99      	cmp	r3, #153	; 0x99
 8000ed4:	dd0c      	ble.n	8000ef0 <__aeabi_i2f+0x5c>
 8000ed6:	2205      	movs	r2, #5
 8000ed8:	0031      	movs	r1, r6
 8000eda:	1a12      	subs	r2, r2, r0
 8000edc:	40d1      	lsrs	r1, r2
 8000ede:	000a      	movs	r2, r1
 8000ee0:	0001      	movs	r1, r0
 8000ee2:	0030      	movs	r0, r6
 8000ee4:	311b      	adds	r1, #27
 8000ee6:	4088      	lsls	r0, r1
 8000ee8:	1e41      	subs	r1, r0, #1
 8000eea:	4188      	sbcs	r0, r1
 8000eec:	4302      	orrs	r2, r0
 8000eee:	0016      	movs	r6, r2
 8000ef0:	2d05      	cmp	r5, #5
 8000ef2:	dc12      	bgt.n	8000f1a <__aeabi_i2f+0x86>
 8000ef4:	0031      	movs	r1, r6
 8000ef6:	4f0d      	ldr	r7, [pc, #52]	; (8000f2c <__aeabi_i2f+0x98>)
 8000ef8:	4039      	ands	r1, r7
 8000efa:	0772      	lsls	r2, r6, #29
 8000efc:	d009      	beq.n	8000f12 <__aeabi_i2f+0x7e>
 8000efe:	200f      	movs	r0, #15
 8000f00:	4030      	ands	r0, r6
 8000f02:	2804      	cmp	r0, #4
 8000f04:	d005      	beq.n	8000f12 <__aeabi_i2f+0x7e>
 8000f06:	3104      	adds	r1, #4
 8000f08:	014a      	lsls	r2, r1, #5
 8000f0a:	d502      	bpl.n	8000f12 <__aeabi_i2f+0x7e>
 8000f0c:	239f      	movs	r3, #159	; 0x9f
 8000f0e:	4039      	ands	r1, r7
 8000f10:	1b5b      	subs	r3, r3, r5
 8000f12:	0189      	lsls	r1, r1, #6
 8000f14:	0a4e      	lsrs	r6, r1, #9
 8000f16:	b2d8      	uxtb	r0, r3
 8000f18:	e7d6      	b.n	8000ec8 <__aeabi_i2f+0x34>
 8000f1a:	1f6a      	subs	r2, r5, #5
 8000f1c:	4096      	lsls	r6, r2
 8000f1e:	0031      	movs	r1, r6
 8000f20:	4f02      	ldr	r7, [pc, #8]	; (8000f2c <__aeabi_i2f+0x98>)
 8000f22:	4039      	ands	r1, r7
 8000f24:	0772      	lsls	r2, r6, #29
 8000f26:	d0f4      	beq.n	8000f12 <__aeabi_i2f+0x7e>
 8000f28:	e7e9      	b.n	8000efe <__aeabi_i2f+0x6a>
 8000f2a:	46c0      	nop			; (mov r8, r8)
 8000f2c:	fbffffff 	.word	0xfbffffff

08000f30 <__aeabi_cfrcmple>:
 8000f30:	4684      	mov	ip, r0
 8000f32:	0008      	movs	r0, r1
 8000f34:	4661      	mov	r1, ip
 8000f36:	e7ff      	b.n	8000f38 <__aeabi_cfcmpeq>

08000f38 <__aeabi_cfcmpeq>:
 8000f38:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000f3a:	f000 f8c9 	bl	80010d0 <__lesf2>
 8000f3e:	2800      	cmp	r0, #0
 8000f40:	d401      	bmi.n	8000f46 <__aeabi_cfcmpeq+0xe>
 8000f42:	2100      	movs	r1, #0
 8000f44:	42c8      	cmn	r0, r1
 8000f46:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000f48 <__aeabi_fcmpeq>:
 8000f48:	b510      	push	{r4, lr}
 8000f4a:	f000 f855 	bl	8000ff8 <__eqsf2>
 8000f4e:	4240      	negs	r0, r0
 8000f50:	3001      	adds	r0, #1
 8000f52:	bd10      	pop	{r4, pc}

08000f54 <__aeabi_fcmplt>:
 8000f54:	b510      	push	{r4, lr}
 8000f56:	f000 f8bb 	bl	80010d0 <__lesf2>
 8000f5a:	2800      	cmp	r0, #0
 8000f5c:	db01      	blt.n	8000f62 <__aeabi_fcmplt+0xe>
 8000f5e:	2000      	movs	r0, #0
 8000f60:	bd10      	pop	{r4, pc}
 8000f62:	2001      	movs	r0, #1
 8000f64:	bd10      	pop	{r4, pc}
 8000f66:	46c0      	nop			; (mov r8, r8)

08000f68 <__aeabi_fcmple>:
 8000f68:	b510      	push	{r4, lr}
 8000f6a:	f000 f8b1 	bl	80010d0 <__lesf2>
 8000f6e:	2800      	cmp	r0, #0
 8000f70:	dd01      	ble.n	8000f76 <__aeabi_fcmple+0xe>
 8000f72:	2000      	movs	r0, #0
 8000f74:	bd10      	pop	{r4, pc}
 8000f76:	2001      	movs	r0, #1
 8000f78:	bd10      	pop	{r4, pc}
 8000f7a:	46c0      	nop			; (mov r8, r8)

08000f7c <__aeabi_fcmpgt>:
 8000f7c:	b510      	push	{r4, lr}
 8000f7e:	f000 f861 	bl	8001044 <__gesf2>
 8000f82:	2800      	cmp	r0, #0
 8000f84:	dc01      	bgt.n	8000f8a <__aeabi_fcmpgt+0xe>
 8000f86:	2000      	movs	r0, #0
 8000f88:	bd10      	pop	{r4, pc}
 8000f8a:	2001      	movs	r0, #1
 8000f8c:	bd10      	pop	{r4, pc}
 8000f8e:	46c0      	nop			; (mov r8, r8)

08000f90 <__aeabi_fcmpge>:
 8000f90:	b510      	push	{r4, lr}
 8000f92:	f000 f857 	bl	8001044 <__gesf2>
 8000f96:	2800      	cmp	r0, #0
 8000f98:	da01      	bge.n	8000f9e <__aeabi_fcmpge+0xe>
 8000f9a:	2000      	movs	r0, #0
 8000f9c:	bd10      	pop	{r4, pc}
 8000f9e:	2001      	movs	r0, #1
 8000fa0:	bd10      	pop	{r4, pc}
 8000fa2:	46c0      	nop			; (mov r8, r8)

08000fa4 <__clzsi2>:
 8000fa4:	211c      	movs	r1, #28
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	041b      	lsls	r3, r3, #16
 8000faa:	4298      	cmp	r0, r3
 8000fac:	d301      	bcc.n	8000fb2 <__clzsi2+0xe>
 8000fae:	0c00      	lsrs	r0, r0, #16
 8000fb0:	3910      	subs	r1, #16
 8000fb2:	0a1b      	lsrs	r3, r3, #8
 8000fb4:	4298      	cmp	r0, r3
 8000fb6:	d301      	bcc.n	8000fbc <__clzsi2+0x18>
 8000fb8:	0a00      	lsrs	r0, r0, #8
 8000fba:	3908      	subs	r1, #8
 8000fbc:	091b      	lsrs	r3, r3, #4
 8000fbe:	4298      	cmp	r0, r3
 8000fc0:	d301      	bcc.n	8000fc6 <__clzsi2+0x22>
 8000fc2:	0900      	lsrs	r0, r0, #4
 8000fc4:	3904      	subs	r1, #4
 8000fc6:	a202      	add	r2, pc, #8	; (adr r2, 8000fd0 <__clzsi2+0x2c>)
 8000fc8:	5c10      	ldrb	r0, [r2, r0]
 8000fca:	1840      	adds	r0, r0, r1
 8000fcc:	4770      	bx	lr
 8000fce:	46c0      	nop			; (mov r8, r8)
 8000fd0:	02020304 	.word	0x02020304
 8000fd4:	01010101 	.word	0x01010101
	...

08000fe0 <__clzdi2>:
 8000fe0:	b510      	push	{r4, lr}
 8000fe2:	2900      	cmp	r1, #0
 8000fe4:	d103      	bne.n	8000fee <__clzdi2+0xe>
 8000fe6:	f7ff ffdd 	bl	8000fa4 <__clzsi2>
 8000fea:	3020      	adds	r0, #32
 8000fec:	e002      	b.n	8000ff4 <__clzdi2+0x14>
 8000fee:	0008      	movs	r0, r1
 8000ff0:	f7ff ffd8 	bl	8000fa4 <__clzsi2>
 8000ff4:	bd10      	pop	{r4, pc}
 8000ff6:	46c0      	nop			; (mov r8, r8)

08000ff8 <__eqsf2>:
 8000ff8:	b570      	push	{r4, r5, r6, lr}
 8000ffa:	0042      	lsls	r2, r0, #1
 8000ffc:	0245      	lsls	r5, r0, #9
 8000ffe:	024e      	lsls	r6, r1, #9
 8001000:	004c      	lsls	r4, r1, #1
 8001002:	0fc3      	lsrs	r3, r0, #31
 8001004:	0a6d      	lsrs	r5, r5, #9
 8001006:	2001      	movs	r0, #1
 8001008:	0e12      	lsrs	r2, r2, #24
 800100a:	0a76      	lsrs	r6, r6, #9
 800100c:	0e24      	lsrs	r4, r4, #24
 800100e:	0fc9      	lsrs	r1, r1, #31
 8001010:	2aff      	cmp	r2, #255	; 0xff
 8001012:	d006      	beq.n	8001022 <__eqsf2+0x2a>
 8001014:	2cff      	cmp	r4, #255	; 0xff
 8001016:	d003      	beq.n	8001020 <__eqsf2+0x28>
 8001018:	42a2      	cmp	r2, r4
 800101a:	d101      	bne.n	8001020 <__eqsf2+0x28>
 800101c:	42b5      	cmp	r5, r6
 800101e:	d006      	beq.n	800102e <__eqsf2+0x36>
 8001020:	bd70      	pop	{r4, r5, r6, pc}
 8001022:	2d00      	cmp	r5, #0
 8001024:	d1fc      	bne.n	8001020 <__eqsf2+0x28>
 8001026:	2cff      	cmp	r4, #255	; 0xff
 8001028:	d1fa      	bne.n	8001020 <__eqsf2+0x28>
 800102a:	2e00      	cmp	r6, #0
 800102c:	d1f8      	bne.n	8001020 <__eqsf2+0x28>
 800102e:	428b      	cmp	r3, r1
 8001030:	d006      	beq.n	8001040 <__eqsf2+0x48>
 8001032:	2001      	movs	r0, #1
 8001034:	2a00      	cmp	r2, #0
 8001036:	d1f3      	bne.n	8001020 <__eqsf2+0x28>
 8001038:	0028      	movs	r0, r5
 800103a:	1e43      	subs	r3, r0, #1
 800103c:	4198      	sbcs	r0, r3
 800103e:	e7ef      	b.n	8001020 <__eqsf2+0x28>
 8001040:	2000      	movs	r0, #0
 8001042:	e7ed      	b.n	8001020 <__eqsf2+0x28>

08001044 <__gesf2>:
 8001044:	b570      	push	{r4, r5, r6, lr}
 8001046:	0042      	lsls	r2, r0, #1
 8001048:	0245      	lsls	r5, r0, #9
 800104a:	024e      	lsls	r6, r1, #9
 800104c:	004c      	lsls	r4, r1, #1
 800104e:	0fc3      	lsrs	r3, r0, #31
 8001050:	0a6d      	lsrs	r5, r5, #9
 8001052:	0e12      	lsrs	r2, r2, #24
 8001054:	0a76      	lsrs	r6, r6, #9
 8001056:	0e24      	lsrs	r4, r4, #24
 8001058:	0fc8      	lsrs	r0, r1, #31
 800105a:	2aff      	cmp	r2, #255	; 0xff
 800105c:	d01b      	beq.n	8001096 <__gesf2+0x52>
 800105e:	2cff      	cmp	r4, #255	; 0xff
 8001060:	d00e      	beq.n	8001080 <__gesf2+0x3c>
 8001062:	2a00      	cmp	r2, #0
 8001064:	d11b      	bne.n	800109e <__gesf2+0x5a>
 8001066:	2c00      	cmp	r4, #0
 8001068:	d101      	bne.n	800106e <__gesf2+0x2a>
 800106a:	2e00      	cmp	r6, #0
 800106c:	d01c      	beq.n	80010a8 <__gesf2+0x64>
 800106e:	2d00      	cmp	r5, #0
 8001070:	d00c      	beq.n	800108c <__gesf2+0x48>
 8001072:	4283      	cmp	r3, r0
 8001074:	d01c      	beq.n	80010b0 <__gesf2+0x6c>
 8001076:	2102      	movs	r1, #2
 8001078:	1e58      	subs	r0, r3, #1
 800107a:	4008      	ands	r0, r1
 800107c:	3801      	subs	r0, #1
 800107e:	bd70      	pop	{r4, r5, r6, pc}
 8001080:	2e00      	cmp	r6, #0
 8001082:	d122      	bne.n	80010ca <__gesf2+0x86>
 8001084:	2a00      	cmp	r2, #0
 8001086:	d1f4      	bne.n	8001072 <__gesf2+0x2e>
 8001088:	2d00      	cmp	r5, #0
 800108a:	d1f2      	bne.n	8001072 <__gesf2+0x2e>
 800108c:	2800      	cmp	r0, #0
 800108e:	d1f6      	bne.n	800107e <__gesf2+0x3a>
 8001090:	2001      	movs	r0, #1
 8001092:	4240      	negs	r0, r0
 8001094:	e7f3      	b.n	800107e <__gesf2+0x3a>
 8001096:	2d00      	cmp	r5, #0
 8001098:	d117      	bne.n	80010ca <__gesf2+0x86>
 800109a:	2cff      	cmp	r4, #255	; 0xff
 800109c:	d0f0      	beq.n	8001080 <__gesf2+0x3c>
 800109e:	2c00      	cmp	r4, #0
 80010a0:	d1e7      	bne.n	8001072 <__gesf2+0x2e>
 80010a2:	2e00      	cmp	r6, #0
 80010a4:	d1e5      	bne.n	8001072 <__gesf2+0x2e>
 80010a6:	e7e6      	b.n	8001076 <__gesf2+0x32>
 80010a8:	2000      	movs	r0, #0
 80010aa:	2d00      	cmp	r5, #0
 80010ac:	d0e7      	beq.n	800107e <__gesf2+0x3a>
 80010ae:	e7e2      	b.n	8001076 <__gesf2+0x32>
 80010b0:	42a2      	cmp	r2, r4
 80010b2:	dc05      	bgt.n	80010c0 <__gesf2+0x7c>
 80010b4:	dbea      	blt.n	800108c <__gesf2+0x48>
 80010b6:	42b5      	cmp	r5, r6
 80010b8:	d802      	bhi.n	80010c0 <__gesf2+0x7c>
 80010ba:	d3e7      	bcc.n	800108c <__gesf2+0x48>
 80010bc:	2000      	movs	r0, #0
 80010be:	e7de      	b.n	800107e <__gesf2+0x3a>
 80010c0:	4243      	negs	r3, r0
 80010c2:	4158      	adcs	r0, r3
 80010c4:	0040      	lsls	r0, r0, #1
 80010c6:	3801      	subs	r0, #1
 80010c8:	e7d9      	b.n	800107e <__gesf2+0x3a>
 80010ca:	2002      	movs	r0, #2
 80010cc:	4240      	negs	r0, r0
 80010ce:	e7d6      	b.n	800107e <__gesf2+0x3a>

080010d0 <__lesf2>:
 80010d0:	b570      	push	{r4, r5, r6, lr}
 80010d2:	0042      	lsls	r2, r0, #1
 80010d4:	0245      	lsls	r5, r0, #9
 80010d6:	024e      	lsls	r6, r1, #9
 80010d8:	004c      	lsls	r4, r1, #1
 80010da:	0fc3      	lsrs	r3, r0, #31
 80010dc:	0a6d      	lsrs	r5, r5, #9
 80010de:	0e12      	lsrs	r2, r2, #24
 80010e0:	0a76      	lsrs	r6, r6, #9
 80010e2:	0e24      	lsrs	r4, r4, #24
 80010e4:	0fc8      	lsrs	r0, r1, #31
 80010e6:	2aff      	cmp	r2, #255	; 0xff
 80010e8:	d00b      	beq.n	8001102 <__lesf2+0x32>
 80010ea:	2cff      	cmp	r4, #255	; 0xff
 80010ec:	d00d      	beq.n	800110a <__lesf2+0x3a>
 80010ee:	2a00      	cmp	r2, #0
 80010f0:	d11f      	bne.n	8001132 <__lesf2+0x62>
 80010f2:	2c00      	cmp	r4, #0
 80010f4:	d116      	bne.n	8001124 <__lesf2+0x54>
 80010f6:	2e00      	cmp	r6, #0
 80010f8:	d114      	bne.n	8001124 <__lesf2+0x54>
 80010fa:	2000      	movs	r0, #0
 80010fc:	2d00      	cmp	r5, #0
 80010fe:	d010      	beq.n	8001122 <__lesf2+0x52>
 8001100:	e009      	b.n	8001116 <__lesf2+0x46>
 8001102:	2d00      	cmp	r5, #0
 8001104:	d10c      	bne.n	8001120 <__lesf2+0x50>
 8001106:	2cff      	cmp	r4, #255	; 0xff
 8001108:	d113      	bne.n	8001132 <__lesf2+0x62>
 800110a:	2e00      	cmp	r6, #0
 800110c:	d108      	bne.n	8001120 <__lesf2+0x50>
 800110e:	2a00      	cmp	r2, #0
 8001110:	d008      	beq.n	8001124 <__lesf2+0x54>
 8001112:	4283      	cmp	r3, r0
 8001114:	d012      	beq.n	800113c <__lesf2+0x6c>
 8001116:	2102      	movs	r1, #2
 8001118:	1e58      	subs	r0, r3, #1
 800111a:	4008      	ands	r0, r1
 800111c:	3801      	subs	r0, #1
 800111e:	e000      	b.n	8001122 <__lesf2+0x52>
 8001120:	2002      	movs	r0, #2
 8001122:	bd70      	pop	{r4, r5, r6, pc}
 8001124:	2d00      	cmp	r5, #0
 8001126:	d1f4      	bne.n	8001112 <__lesf2+0x42>
 8001128:	2800      	cmp	r0, #0
 800112a:	d1fa      	bne.n	8001122 <__lesf2+0x52>
 800112c:	2001      	movs	r0, #1
 800112e:	4240      	negs	r0, r0
 8001130:	e7f7      	b.n	8001122 <__lesf2+0x52>
 8001132:	2c00      	cmp	r4, #0
 8001134:	d1ed      	bne.n	8001112 <__lesf2+0x42>
 8001136:	2e00      	cmp	r6, #0
 8001138:	d1eb      	bne.n	8001112 <__lesf2+0x42>
 800113a:	e7ec      	b.n	8001116 <__lesf2+0x46>
 800113c:	42a2      	cmp	r2, r4
 800113e:	dc05      	bgt.n	800114c <__lesf2+0x7c>
 8001140:	dbf2      	blt.n	8001128 <__lesf2+0x58>
 8001142:	42b5      	cmp	r5, r6
 8001144:	d802      	bhi.n	800114c <__lesf2+0x7c>
 8001146:	d3ef      	bcc.n	8001128 <__lesf2+0x58>
 8001148:	2000      	movs	r0, #0
 800114a:	e7ea      	b.n	8001122 <__lesf2+0x52>
 800114c:	4243      	negs	r3, r0
 800114e:	4158      	adcs	r0, r3
 8001150:	0040      	lsls	r0, r0, #1
 8001152:	3801      	subs	r0, #1
 8001154:	e7e5      	b.n	8001122 <__lesf2+0x52>
 8001156:	46c0      	nop			; (mov r8, r8)

08001158 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b082      	sub	sp, #8
 800115c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800115e:	4b0e      	ldr	r3, [pc, #56]	; (8001198 <MX_GPIO_Init+0x40>)
 8001160:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001162:	4b0d      	ldr	r3, [pc, #52]	; (8001198 <MX_GPIO_Init+0x40>)
 8001164:	2104      	movs	r1, #4
 8001166:	430a      	orrs	r2, r1
 8001168:	62da      	str	r2, [r3, #44]	; 0x2c
 800116a:	4b0b      	ldr	r3, [pc, #44]	; (8001198 <MX_GPIO_Init+0x40>)
 800116c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800116e:	2204      	movs	r2, #4
 8001170:	4013      	ands	r3, r2
 8001172:	607b      	str	r3, [r7, #4]
 8001174:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001176:	4b08      	ldr	r3, [pc, #32]	; (8001198 <MX_GPIO_Init+0x40>)
 8001178:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800117a:	4b07      	ldr	r3, [pc, #28]	; (8001198 <MX_GPIO_Init+0x40>)
 800117c:	2101      	movs	r1, #1
 800117e:	430a      	orrs	r2, r1
 8001180:	62da      	str	r2, [r3, #44]	; 0x2c
 8001182:	4b05      	ldr	r3, [pc, #20]	; (8001198 <MX_GPIO_Init+0x40>)
 8001184:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001186:	2201      	movs	r2, #1
 8001188:	4013      	ands	r3, r2
 800118a:	603b      	str	r3, [r7, #0]
 800118c:	683b      	ldr	r3, [r7, #0]

}
 800118e:	46c0      	nop			; (mov r8, r8)
 8001190:	46bd      	mov	sp, r7
 8001192:	b002      	add	sp, #8
 8001194:	bd80      	pop	{r7, pc}
 8001196:	46c0      	nop			; (mov r8, r8)
 8001198:	40021000 	.word	0x40021000

0800119c <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, 0);
 80011a4:	1d39      	adds	r1, r7, #4
 80011a6:	4805      	ldr	r0, [pc, #20]	; (80011bc <__io_putchar+0x20>)
 80011a8:	2300      	movs	r3, #0
 80011aa:	2201      	movs	r2, #1
 80011ac:	f002 f89e 	bl	80032ec <HAL_UART_Transmit>
    return 1;
 80011b0:	2301      	movs	r3, #1
}
 80011b2:	0018      	movs	r0, r3
 80011b4:	46bd      	mov	sp, r7
 80011b6:	b002      	add	sp, #8
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	46c0      	nop			; (mov r8, r8)
 80011bc:	2000021c 	.word	0x2000021c

080011c0 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b082      	sub	sp, #8
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  if (huart == &huart2) {
 80011c8:	687a      	ldr	r2, [r7, #4]
 80011ca:	4b09      	ldr	r3, [pc, #36]	; (80011f0 <HAL_UART_RxCpltCallback+0x30>)
 80011cc:	429a      	cmp	r2, r3
 80011ce:	d10a      	bne.n	80011e6 <HAL_UART_RxCpltCallback+0x26>
	  MENU_USB(value);
 80011d0:	4b08      	ldr	r3, [pc, #32]	; (80011f4 <HAL_UART_RxCpltCallback+0x34>)
 80011d2:	781b      	ldrb	r3, [r3, #0]
 80011d4:	0018      	movs	r0, r3
 80011d6:	f000 f95f 	bl	8001498 <MENU_USB>
	  HAL_UART_Receive_IT(&huart2, &value, 1);
 80011da:	4906      	ldr	r1, [pc, #24]	; (80011f4 <HAL_UART_RxCpltCallback+0x34>)
 80011dc:	4b04      	ldr	r3, [pc, #16]	; (80011f0 <HAL_UART_RxCpltCallback+0x30>)
 80011de:	2201      	movs	r2, #1
 80011e0:	0018      	movs	r0, r3
 80011e2:	f002 f923 	bl	800342c <HAL_UART_Receive_IT>
 }
}
 80011e6:	46c0      	nop			; (mov r8, r8)
 80011e8:	46bd      	mov	sp, r7
 80011ea:	b002      	add	sp, #8
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	46c0      	nop			; (mov r8, r8)
 80011f0:	2000021c 	.word	0x2000021c
 80011f4:	20000190 	.word	0x20000190

080011f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

  HAL_Init();
 80011fc:	f000 fd14 	bl	8001c28 <HAL_Init>

  /* USER CODE BEGIN Init */
  //PVD_init();
  PG_init();
 8001200:	f000 fb52 	bl	80018a8 <PG_init>
  GPIO_LEDS();
 8001204:	f000 f914 	bl	8001430 <GPIO_LEDS>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001208:	f000 f8a6 	bl	8001358 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800120c:	f7ff ffa4 	bl	8001158 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001210:	f000 fc64 	bl	8001adc <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart2, &value, 1);
 8001214:	4948      	ldr	r1, [pc, #288]	; (8001338 <main+0x140>)
 8001216:	4b49      	ldr	r3, [pc, #292]	; (800133c <main+0x144>)
 8001218:	2201      	movs	r2, #1
 800121a:	0018      	movs	r0, r3
 800121c:	f002 f906 	bl	800342c <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while(1){
	switch(state) {
 8001220:	4b47      	ldr	r3, [pc, #284]	; (8001340 <main+0x148>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	2b03      	cmp	r3, #3
 8001226:	d100      	bne.n	800122a <main+0x32>
 8001228:	e077      	b.n	800131a <main+0x122>
 800122a:	dd00      	ble.n	800122e <main+0x36>
 800122c:	e079      	b.n	8001322 <main+0x12a>
 800122e:	2b01      	cmp	r3, #1
 8001230:	d002      	beq.n	8001238 <main+0x40>
 8001232:	2b02      	cmp	r3, #2
 8001234:	d036      	beq.n	80012a4 <main+0xac>
 8001236:	e074      	b.n	8001322 <main+0x12a>
	  case 1:
	    GPIOC->BSRR = ~(1U<<4);
 8001238:	4b42      	ldr	r3, [pc, #264]	; (8001344 <main+0x14c>)
 800123a:	2211      	movs	r2, #17
 800123c:	4252      	negs	r2, r2
 800123e:	619a      	str	r2, [r3, #24]
	    while((GPIOC->ODR & GPIO_ODR_OD4)){}
 8001240:	46c0      	nop			; (mov r8, r8)
 8001242:	4b40      	ldr	r3, [pc, #256]	; (8001344 <main+0x14c>)
 8001244:	695b      	ldr	r3, [r3, #20]
 8001246:	2210      	movs	r2, #16
 8001248:	4013      	ands	r3, r2
 800124a:	d1fa      	bne.n	8001242 <main+0x4a>
	    HAL_Delay((uint32_t)Ton);
 800124c:	4b3e      	ldr	r3, [pc, #248]	; (8001348 <main+0x150>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	1c18      	adds	r0, r3, #0
 8001252:	f7ff f92f 	bl	80004b4 <__aeabi_f2uiz>
 8001256:	0003      	movs	r3, r0
 8001258:	0018      	movs	r0, r3
 800125a:	f000 fd55 	bl	8001d08 <HAL_Delay>
	    GPIOC->BSRR = (1U<<4);
 800125e:	4b39      	ldr	r3, [pc, #228]	; (8001344 <main+0x14c>)
 8001260:	2210      	movs	r2, #16
 8001262:	619a      	str	r2, [r3, #24]
	    while(!(GPIOC->ODR & GPIO_ODR_OD4)){}
 8001264:	46c0      	nop			; (mov r8, r8)
 8001266:	4b37      	ldr	r3, [pc, #220]	; (8001344 <main+0x14c>)
 8001268:	695b      	ldr	r3, [r3, #20]
 800126a:	2210      	movs	r2, #16
 800126c:	4013      	ands	r3, r2
 800126e:	d0fa      	beq.n	8001266 <main+0x6e>
	    HAL_Delay((uint32_t)Toff);
 8001270:	4b36      	ldr	r3, [pc, #216]	; (800134c <main+0x154>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	1c18      	adds	r0, r3, #0
 8001276:	f7ff f91d 	bl	80004b4 <__aeabi_f2uiz>
 800127a:	0003      	movs	r3, r0
 800127c:	0018      	movs	r0, r3
 800127e:	f000 fd43 	bl	8001d08 <HAL_Delay>
	    total_pulses++;
 8001282:	4b33      	ldr	r3, [pc, #204]	; (8001350 <main+0x158>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	1c5a      	adds	r2, r3, #1
 8001288:	4b31      	ldr	r3, [pc, #196]	; (8001350 <main+0x158>)
 800128a:	601a      	str	r2, [r3, #0]
	    if(state!=0){
 800128c:	4b2c      	ldr	r3, [pc, #176]	; (8001340 <main+0x148>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	2b00      	cmp	r3, #0
 8001292:	d003      	beq.n	800129c <main+0xa4>
	    state=1;
 8001294:	4b2a      	ldr	r3, [pc, #168]	; (8001340 <main+0x148>)
 8001296:	2201      	movs	r2, #1
 8001298:	601a      	str	r2, [r3, #0]
	    }
	    else{
	    	state=0;
	    }
	    break;
 800129a:	e048      	b.n	800132e <main+0x136>
	    	state=0;
 800129c:	4b28      	ldr	r3, [pc, #160]	; (8001340 <main+0x148>)
 800129e:	2200      	movs	r2, #0
 80012a0:	601a      	str	r2, [r3, #0]
	    break;
 80012a2:	e044      	b.n	800132e <main+0x136>
	  case 2:
	    GPIOC->BSRR = ~(1U<<4);
 80012a4:	4b27      	ldr	r3, [pc, #156]	; (8001344 <main+0x14c>)
 80012a6:	2211      	movs	r2, #17
 80012a8:	4252      	negs	r2, r2
 80012aa:	619a      	str	r2, [r3, #24]
	    while((GPIOC->ODR & GPIO_ODR_OD4)){}
 80012ac:	46c0      	nop			; (mov r8, r8)
 80012ae:	4b25      	ldr	r3, [pc, #148]	; (8001344 <main+0x14c>)
 80012b0:	695b      	ldr	r3, [r3, #20]
 80012b2:	2210      	movs	r2, #16
 80012b4:	4013      	ands	r3, r2
 80012b6:	d1fa      	bne.n	80012ae <main+0xb6>
	    HAL_Delay((uint32_t)Ton);
 80012b8:	4b23      	ldr	r3, [pc, #140]	; (8001348 <main+0x150>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	1c18      	adds	r0, r3, #0
 80012be:	f7ff f8f9 	bl	80004b4 <__aeabi_f2uiz>
 80012c2:	0003      	movs	r3, r0
 80012c4:	0018      	movs	r0, r3
 80012c6:	f000 fd1f 	bl	8001d08 <HAL_Delay>
	    GPIOC->BSRR = (1U<<4);
 80012ca:	4b1e      	ldr	r3, [pc, #120]	; (8001344 <main+0x14c>)
 80012cc:	2210      	movs	r2, #16
 80012ce:	619a      	str	r2, [r3, #24]
	    while(!(GPIOC->ODR & GPIO_ODR_OD4)){}
 80012d0:	46c0      	nop			; (mov r8, r8)
 80012d2:	4b1c      	ldr	r3, [pc, #112]	; (8001344 <main+0x14c>)
 80012d4:	695b      	ldr	r3, [r3, #20]
 80012d6:	2210      	movs	r2, #16
 80012d8:	4013      	ands	r3, r2
 80012da:	d0fa      	beq.n	80012d2 <main+0xda>
	    HAL_Delay((uint32_t)Toff);
 80012dc:	4b1b      	ldr	r3, [pc, #108]	; (800134c <main+0x154>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	1c18      	adds	r0, r3, #0
 80012e2:	f7ff f8e7 	bl	80004b4 <__aeabi_f2uiz>
 80012e6:	0003      	movs	r3, r0
 80012e8:	0018      	movs	r0, r3
 80012ea:	f000 fd0d 	bl	8001d08 <HAL_Delay>
	    total_pulses++;
 80012ee:	4b18      	ldr	r3, [pc, #96]	; (8001350 <main+0x158>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	1c5a      	adds	r2, r3, #1
 80012f4:	4b16      	ldr	r3, [pc, #88]	; (8001350 <main+0x158>)
 80012f6:	601a      	str	r2, [r3, #0]
	    num--;
 80012f8:	4b16      	ldr	r3, [pc, #88]	; (8001354 <main+0x15c>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	1e5a      	subs	r2, r3, #1
 80012fe:	4b15      	ldr	r3, [pc, #84]	; (8001354 <main+0x15c>)
 8001300:	601a      	str	r2, [r3, #0]
	    if(num>0){
 8001302:	4b14      	ldr	r3, [pc, #80]	; (8001354 <main+0x15c>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d003      	beq.n	8001312 <main+0x11a>
	    	state=2;
 800130a:	4b0d      	ldr	r3, [pc, #52]	; (8001340 <main+0x148>)
 800130c:	2202      	movs	r2, #2
 800130e:	601a      	str	r2, [r3, #0]
	    	}
	    else{
	    	state=0;
	    	}
	    break;
 8001310:	e00d      	b.n	800132e <main+0x136>
	    	state=0;
 8001312:	4b0b      	ldr	r3, [pc, #44]	; (8001340 <main+0x148>)
 8001314:	2200      	movs	r2, #0
 8001316:	601a      	str	r2, [r3, #0]
	    break;
 8001318:	e009      	b.n	800132e <main+0x136>
	  case 3:
	    //fdata=100;
	    //HAL_UART_Transmit(&huart2, &value, 1, 0);
	    state=0;
 800131a:	4b09      	ldr	r3, [pc, #36]	; (8001340 <main+0x148>)
 800131c:	2200      	movs	r2, #0
 800131e:	601a      	str	r2, [r3, #0]
	    break;
 8001320:	e005      	b.n	800132e <main+0x136>
	  default:
		  total_pulses=0;
 8001322:	4b0b      	ldr	r3, [pc, #44]	; (8001350 <main+0x158>)
 8001324:	2200      	movs	r2, #0
 8001326:	601a      	str	r2, [r3, #0]
		  state=0;
 8001328:	4b05      	ldr	r3, [pc, #20]	; (8001340 <main+0x148>)
 800132a:	2200      	movs	r2, #0
 800132c:	601a      	str	r2, [r3, #0]
		  }
	  	  break;
 800132e:	46c0      	nop			; (mov r8, r8)
 8001330:	2300      	movs	r3, #0
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
 8001332:	0018      	movs	r0, r3
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}
 8001338:	20000190 	.word	0x20000190
 800133c:	2000021c 	.word	0x2000021c
 8001340:	20000214 	.word	0x20000214
 8001344:	50000800 	.word	0x50000800
 8001348:	2000019c 	.word	0x2000019c
 800134c:	200001a0 	.word	0x200001a0
 8001350:	20000194 	.word	0x20000194
 8001354:	20000198 	.word	0x20000198

08001358 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001358:	b590      	push	{r4, r7, lr}
 800135a:	b09f      	sub	sp, #124	; 0x7c
 800135c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800135e:	2440      	movs	r4, #64	; 0x40
 8001360:	193b      	adds	r3, r7, r4
 8001362:	0018      	movs	r0, r3
 8001364:	2338      	movs	r3, #56	; 0x38
 8001366:	001a      	movs	r2, r3
 8001368:	2100      	movs	r1, #0
 800136a:	f003 fb99 	bl	8004aa0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800136e:	232c      	movs	r3, #44	; 0x2c
 8001370:	18fb      	adds	r3, r7, r3
 8001372:	0018      	movs	r0, r3
 8001374:	2314      	movs	r3, #20
 8001376:	001a      	movs	r2, r3
 8001378:	2100      	movs	r1, #0
 800137a:	f003 fb91 	bl	8004aa0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800137e:	1d3b      	adds	r3, r7, #4
 8001380:	0018      	movs	r0, r3
 8001382:	2328      	movs	r3, #40	; 0x28
 8001384:	001a      	movs	r2, r3
 8001386:	2100      	movs	r1, #0
 8001388:	f003 fb8a 	bl	8004aa0 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800138c:	4b26      	ldr	r3, [pc, #152]	; (8001428 <SystemClock_Config+0xd0>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	4a26      	ldr	r2, [pc, #152]	; (800142c <SystemClock_Config+0xd4>)
 8001392:	401a      	ands	r2, r3
 8001394:	4b24      	ldr	r3, [pc, #144]	; (8001428 <SystemClock_Config+0xd0>)
 8001396:	2180      	movs	r1, #128	; 0x80
 8001398:	0109      	lsls	r1, r1, #4
 800139a:	430a      	orrs	r2, r1
 800139c:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800139e:	0021      	movs	r1, r4
 80013a0:	187b      	adds	r3, r7, r1
 80013a2:	2210      	movs	r2, #16
 80013a4:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80013a6:	187b      	adds	r3, r7, r1
 80013a8:	2201      	movs	r2, #1
 80013aa:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80013ac:	187b      	adds	r3, r7, r1
 80013ae:	2200      	movs	r2, #0
 80013b0:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 80013b2:	187b      	adds	r3, r7, r1
 80013b4:	22a0      	movs	r2, #160	; 0xa0
 80013b6:	0212      	lsls	r2, r2, #8
 80013b8:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80013ba:	187b      	adds	r3, r7, r1
 80013bc:	2200      	movs	r2, #0
 80013be:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013c0:	187b      	adds	r3, r7, r1
 80013c2:	0018      	movs	r0, r3
 80013c4:	f000 ffa8 	bl	8002318 <HAL_RCC_OscConfig>
 80013c8:	1e03      	subs	r3, r0, #0
 80013ca:	d001      	beq.n	80013d0 <SystemClock_Config+0x78>
  {
    Error_Handler();
 80013cc:	f000 fa66 	bl	800189c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013d0:	212c      	movs	r1, #44	; 0x2c
 80013d2:	187b      	adds	r3, r7, r1
 80013d4:	220f      	movs	r2, #15
 80013d6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80013d8:	187b      	adds	r3, r7, r1
 80013da:	2200      	movs	r2, #0
 80013dc:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013de:	187b      	adds	r3, r7, r1
 80013e0:	2200      	movs	r2, #0
 80013e2:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80013e4:	187b      	adds	r3, r7, r1
 80013e6:	2200      	movs	r2, #0
 80013e8:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013ea:	187b      	adds	r3, r7, r1
 80013ec:	2200      	movs	r2, #0
 80013ee:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80013f0:	187b      	adds	r3, r7, r1
 80013f2:	2100      	movs	r1, #0
 80013f4:	0018      	movs	r0, r3
 80013f6:	f001 fb63 	bl	8002ac0 <HAL_RCC_ClockConfig>
 80013fa:	1e03      	subs	r3, r0, #0
 80013fc:	d001      	beq.n	8001402 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80013fe:	f000 fa4d 	bl	800189c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001402:	1d3b      	adds	r3, r7, #4
 8001404:	2202      	movs	r2, #2
 8001406:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001408:	1d3b      	adds	r3, r7, #4
 800140a:	2200      	movs	r2, #0
 800140c:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800140e:	1d3b      	adds	r3, r7, #4
 8001410:	0018      	movs	r0, r3
 8001412:	f001 fd79 	bl	8002f08 <HAL_RCCEx_PeriphCLKConfig>
 8001416:	1e03      	subs	r3, r0, #0
 8001418:	d001      	beq.n	800141e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800141a:	f000 fa3f 	bl	800189c <Error_Handler>
  }
}
 800141e:	46c0      	nop			; (mov r8, r8)
 8001420:	46bd      	mov	sp, r7
 8001422:	b01f      	add	sp, #124	; 0x7c
 8001424:	bd90      	pop	{r4, r7, pc}
 8001426:	46c0      	nop			; (mov r8, r8)
 8001428:	40007000 	.word	0x40007000
 800142c:	ffffe7ff 	.word	0xffffe7ff

08001430 <GPIO_LEDS>:

/* USER CODE BEGIN 4 */

void GPIO_LEDS(void){
 8001430:	b580      	push	{r7, lr}
 8001432:	af00      	add	r7, sp, #0
	RCC->IOPENR |= RCC_IOPENR_GPIOBEN;
 8001434:	4b16      	ldr	r3, [pc, #88]	; (8001490 <GPIO_LEDS+0x60>)
 8001436:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001438:	4b15      	ldr	r3, [pc, #84]	; (8001490 <GPIO_LEDS+0x60>)
 800143a:	2102      	movs	r1, #2
 800143c:	430a      	orrs	r2, r1
 800143e:	62da      	str	r2, [r3, #44]	; 0x2c
	//2
	GPIOB->MODER &= ((GPIOA->MODER & ~(GPIO_MODER_MODE2)) | (GPIO_MODER_MODE2_0));
 8001440:	23a0      	movs	r3, #160	; 0xa0
 8001442:	05db      	lsls	r3, r3, #23
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	2230      	movs	r2, #48	; 0x30
 8001448:	4393      	bics	r3, r2
 800144a:	2210      	movs	r2, #16
 800144c:	431a      	orrs	r2, r3
 800144e:	4b11      	ldr	r3, [pc, #68]	; (8001494 <GPIO_LEDS+0x64>)
 8001450:	6819      	ldr	r1, [r3, #0]
 8001452:	4b10      	ldr	r3, [pc, #64]	; (8001494 <GPIO_LEDS+0x64>)
 8001454:	400a      	ands	r2, r1
 8001456:	601a      	str	r2, [r3, #0]
	//1
	GPIOB->MODER &= ((GPIOA->MODER & ~(GPIO_MODER_MODE1)) | (GPIO_MODER_MODE1_0));
 8001458:	23a0      	movs	r3, #160	; 0xa0
 800145a:	05db      	lsls	r3, r3, #23
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	220c      	movs	r2, #12
 8001460:	4393      	bics	r3, r2
 8001462:	2204      	movs	r2, #4
 8001464:	431a      	orrs	r2, r3
 8001466:	4b0b      	ldr	r3, [pc, #44]	; (8001494 <GPIO_LEDS+0x64>)
 8001468:	6819      	ldr	r1, [r3, #0]
 800146a:	4b0a      	ldr	r3, [pc, #40]	; (8001494 <GPIO_LEDS+0x64>)
 800146c:	400a      	ands	r2, r1
 800146e:	601a      	str	r2, [r3, #0]
	//15
	GPIOB->MODER &= ((GPIOA->MODER & ~(GPIO_MODER_MODE15)) | (GPIO_MODER_MODE15_0));
 8001470:	23a0      	movs	r3, #160	; 0xa0
 8001472:	05db      	lsls	r3, r3, #23
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	009b      	lsls	r3, r3, #2
 8001478:	089b      	lsrs	r3, r3, #2
 800147a:	2280      	movs	r2, #128	; 0x80
 800147c:	05d2      	lsls	r2, r2, #23
 800147e:	431a      	orrs	r2, r3
 8001480:	4b04      	ldr	r3, [pc, #16]	; (8001494 <GPIO_LEDS+0x64>)
 8001482:	6819      	ldr	r1, [r3, #0]
 8001484:	4b03      	ldr	r3, [pc, #12]	; (8001494 <GPIO_LEDS+0x64>)
 8001486:	400a      	ands	r2, r1
 8001488:	601a      	str	r2, [r3, #0]
}
 800148a:	46c0      	nop			; (mov r8, r8)
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}
 8001490:	40021000 	.word	0x40021000
 8001494:	50000400 	.word	0x50000400

08001498 <MENU_USB>:

void MENU_USB(uint8_t value){
 8001498:	b580      	push	{r7, lr}
 800149a:	b084      	sub	sp, #16
 800149c:	af00      	add	r7, sp, #0
 800149e:	0002      	movs	r2, r0
 80014a0:	1dfb      	adds	r3, r7, #7
 80014a2:	701a      	strb	r2, [r3, #0]
 		if (value == '\r' || value == '\n') {
 80014a4:	1dfb      	adds	r3, r7, #7
 80014a6:	781b      	ldrb	r3, [r3, #0]
 80014a8:	2b0d      	cmp	r3, #13
 80014aa:	d004      	beq.n	80014b6 <MENU_USB+0x1e>
 80014ac:	1dfb      	adds	r3, r7, #7
 80014ae:	781b      	ldrb	r3, [r3, #0]
 80014b0:	2b0a      	cmp	r3, #10
 80014b2:	d000      	beq.n	80014b6 <MENU_USB+0x1e>
 80014b4:	e133      	b.n	800171e <MENU_USB+0x286>
			if (line_length > 0) {
 80014b6:	4ba8      	ldr	r3, [pc, #672]	; (8001758 <MENU_USB+0x2c0>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d100      	bne.n	80014c0 <MENU_USB+0x28>
 80014be:	e114      	b.n	80016ea <MENU_USB+0x252>
				line_buffer[line_length] = '\0';
 80014c0:	4ba5      	ldr	r3, [pc, #660]	; (8001758 <MENU_USB+0x2c0>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4aa5      	ldr	r2, [pc, #660]	; (800175c <MENU_USB+0x2c4>)
 80014c6:	2100      	movs	r1, #0
 80014c8:	54d1      	strb	r1, [r2, r3]
				splitString(line_buffer, tokens);
 80014ca:	4aa5      	ldr	r2, [pc, #660]	; (8001760 <MENU_USB+0x2c8>)
 80014cc:	4ba3      	ldr	r3, [pc, #652]	; (800175c <MENU_USB+0x2c4>)
 80014ce:	0011      	movs	r1, r2
 80014d0:	0018      	movs	r0, r3
 80014d2:	f000 f9a3 	bl	800181c <splitString>
				if (strncmp(line_buffer, "run",3) == 0) {
 80014d6:	49a3      	ldr	r1, [pc, #652]	; (8001764 <MENU_USB+0x2cc>)
 80014d8:	4ba0      	ldr	r3, [pc, #640]	; (800175c <MENU_USB+0x2c4>)
 80014da:	2203      	movs	r2, #3
 80014dc:	0018      	movs	r0, r3
 80014de:	f003 fc12 	bl	8004d06 <strncmp>
 80014e2:	1e03      	subs	r3, r0, #0
 80014e4:	d000      	beq.n	80014e8 <MENU_USB+0x50>
 80014e6:	e0e8      	b.n	80016ba <MENU_USB+0x222>
					ptr=strpbrk(tokens[1], "oo");
 80014e8:	4b9d      	ldr	r3, [pc, #628]	; (8001760 <MENU_USB+0x2c8>)
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	4a9e      	ldr	r2, [pc, #632]	; (8001768 <MENU_USB+0x2d0>)
 80014ee:	0011      	movs	r1, r2
 80014f0:	0018      	movs	r0, r3
 80014f2:	f003 fc1a 	bl	8004d2a <strpbrk>
 80014f6:	0002      	movs	r2, r0
 80014f8:	4b9c      	ldr	r3, [pc, #624]	; (800176c <MENU_USB+0x2d4>)
 80014fa:	601a      	str	r2, [r3, #0]
					if(!(ptr==NULL)){
 80014fc:	4b9b      	ldr	r3, [pc, #620]	; (800176c <MENU_USB+0x2d4>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	2b00      	cmp	r3, #0
 8001502:	d05a      	beq.n	80015ba <MENU_USB+0x122>
//						for(int i=2;i<4;i++){
//							for(int j=0;j<strlen(tokens[i]);j++){
//								result*= isdigit(tokens[i][j])/2048;
//							}
//						}
							freq=ACII_TO_uint8_t(tokens[MAX_TOKENS-2]);
 8001504:	4b96      	ldr	r3, [pc, #600]	; (8001760 <MENU_USB+0x2c8>)
 8001506:	689b      	ldr	r3, [r3, #8]
 8001508:	0018      	movs	r0, r3
 800150a:	f000 f951 	bl	80017b0 <ACII_TO_uint8_t>
 800150e:	0003      	movs	r3, r0
 8001510:	b2da      	uxtb	r2, r3
 8001512:	4b97      	ldr	r3, [pc, #604]	; (8001770 <MENU_USB+0x2d8>)
 8001514:	701a      	strb	r2, [r3, #0]
							duty_cycle=ACII_TO_uint8_t(tokens[MAX_TOKENS-1]);
 8001516:	4b92      	ldr	r3, [pc, #584]	; (8001760 <MENU_USB+0x2c8>)
 8001518:	68db      	ldr	r3, [r3, #12]
 800151a:	0018      	movs	r0, r3
 800151c:	f000 f948 	bl	80017b0 <ACII_TO_uint8_t>
 8001520:	0003      	movs	r3, r0
 8001522:	b2da      	uxtb	r2, r3
 8001524:	4b93      	ldr	r3, [pc, #588]	; (8001774 <MENU_USB+0x2dc>)
 8001526:	701a      	strb	r2, [r3, #0]
							if(freq==0 || duty_cycle==0){
 8001528:	4b91      	ldr	r3, [pc, #580]	; (8001770 <MENU_USB+0x2d8>)
 800152a:	781b      	ldrb	r3, [r3, #0]
 800152c:	2b00      	cmp	r3, #0
 800152e:	d003      	beq.n	8001538 <MENU_USB+0xa0>
 8001530:	4b90      	ldr	r3, [pc, #576]	; (8001774 <MENU_USB+0x2dc>)
 8001532:	781b      	ldrb	r3, [r3, #0]
 8001534:	2b00      	cmp	r3, #0
 8001536:	d104      	bne.n	8001542 <MENU_USB+0xaa>
								printf(error_with_run);
 8001538:	4b8f      	ldr	r3, [pc, #572]	; (8001778 <MENU_USB+0x2e0>)
 800153a:	0018      	movs	r0, r3
 800153c:	f003 fb9a 	bl	8004c74 <iprintf>
 8001540:	e0aa      	b.n	8001698 <MENU_USB+0x200>
							}
							else if(duty_cycle>=100){
 8001542:	4b8c      	ldr	r3, [pc, #560]	; (8001774 <MENU_USB+0x2dc>)
 8001544:	781b      	ldrb	r3, [r3, #0]
 8001546:	2b63      	cmp	r3, #99	; 0x63
 8001548:	d904      	bls.n	8001554 <MENU_USB+0xbc>
								printf(error_with_duty_cycle);
 800154a:	4b8c      	ldr	r3, [pc, #560]	; (800177c <MENU_USB+0x2e4>)
 800154c:	0018      	movs	r0, r3
 800154e:	f003 fb91 	bl	8004c74 <iprintf>
 8001552:	e0a1      	b.n	8001698 <MENU_USB+0x200>
							}
							else{
							  	Period=(float)(1000/freq);
 8001554:	4b86      	ldr	r3, [pc, #536]	; (8001770 <MENU_USB+0x2d8>)
 8001556:	781b      	ldrb	r3, [r3, #0]
 8001558:	0019      	movs	r1, r3
 800155a:	23fa      	movs	r3, #250	; 0xfa
 800155c:	0098      	lsls	r0, r3, #2
 800155e:	f7fe fe6f 	bl	8000240 <__divsi3>
 8001562:	0003      	movs	r3, r0
 8001564:	0018      	movs	r0, r3
 8001566:	f7ff fc95 	bl	8000e94 <__aeabi_i2f>
 800156a:	1c02      	adds	r2, r0, #0
 800156c:	4b84      	ldr	r3, [pc, #528]	; (8001780 <MENU_USB+0x2e8>)
 800156e:	601a      	str	r2, [r3, #0]
							  	Ton=(float)((Period*duty_cycle)/100);
 8001570:	4b80      	ldr	r3, [pc, #512]	; (8001774 <MENU_USB+0x2dc>)
 8001572:	781b      	ldrb	r3, [r3, #0]
 8001574:	0018      	movs	r0, r3
 8001576:	f7ff fc8d 	bl	8000e94 <__aeabi_i2f>
 800157a:	1c02      	adds	r2, r0, #0
 800157c:	4b80      	ldr	r3, [pc, #512]	; (8001780 <MENU_USB+0x2e8>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	1c19      	adds	r1, r3, #0
 8001582:	1c10      	adds	r0, r2, #0
 8001584:	f7ff f992 	bl	80008ac <__aeabi_fmul>
 8001588:	1c03      	adds	r3, r0, #0
 800158a:	497e      	ldr	r1, [pc, #504]	; (8001784 <MENU_USB+0x2ec>)
 800158c:	1c18      	adds	r0, r3, #0
 800158e:	f7ff f875 	bl	800067c <__aeabi_fdiv>
 8001592:	1c03      	adds	r3, r0, #0
 8001594:	1c1a      	adds	r2, r3, #0
 8001596:	4b7c      	ldr	r3, [pc, #496]	; (8001788 <MENU_USB+0x2f0>)
 8001598:	601a      	str	r2, [r3, #0]
							  	Toff=Period-Ton;
 800159a:	4b79      	ldr	r3, [pc, #484]	; (8001780 <MENU_USB+0x2e8>)
 800159c:	681a      	ldr	r2, [r3, #0]
 800159e:	4b7a      	ldr	r3, [pc, #488]	; (8001788 <MENU_USB+0x2f0>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	1c19      	adds	r1, r3, #0
 80015a4:	1c10      	adds	r0, r2, #0
 80015a6:	f7ff faa7 	bl	8000af8 <__aeabi_fsub>
 80015aa:	1c03      	adds	r3, r0, #0
 80015ac:	1c1a      	adds	r2, r3, #0
 80015ae:	4b77      	ldr	r3, [pc, #476]	; (800178c <MENU_USB+0x2f4>)
 80015b0:	601a      	str	r2, [r3, #0]
								state=1;
 80015b2:	4b77      	ldr	r3, [pc, #476]	; (8001790 <MENU_USB+0x2f8>)
 80015b4:	2201      	movs	r2, #1
 80015b6:	601a      	str	r2, [r3, #0]
 80015b8:	e06e      	b.n	8001698 <MENU_USB+0x200>
					else{
//							for(int i=1;i<4;i++){
//									result*= isdigit(tokens[i])/2048;
//								}
//							}
							if(result!=0){
 80015ba:	4b76      	ldr	r3, [pc, #472]	; (8001794 <MENU_USB+0x2fc>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d066      	beq.n	8001690 <MENU_USB+0x1f8>
								num=ACII_TO_uint8_t(tokens[MAX_TOKENS-3]);
 80015c2:	4b67      	ldr	r3, [pc, #412]	; (8001760 <MENU_USB+0x2c8>)
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	0018      	movs	r0, r3
 80015c8:	f000 f8f2 	bl	80017b0 <ACII_TO_uint8_t>
 80015cc:	0002      	movs	r2, r0
 80015ce:	4b72      	ldr	r3, [pc, #456]	; (8001798 <MENU_USB+0x300>)
 80015d0:	601a      	str	r2, [r3, #0]
								freq=ACII_TO_uint8_t(tokens[MAX_TOKENS-2]);
 80015d2:	4b63      	ldr	r3, [pc, #396]	; (8001760 <MENU_USB+0x2c8>)
 80015d4:	689b      	ldr	r3, [r3, #8]
 80015d6:	0018      	movs	r0, r3
 80015d8:	f000 f8ea 	bl	80017b0 <ACII_TO_uint8_t>
 80015dc:	0003      	movs	r3, r0
 80015de:	b2da      	uxtb	r2, r3
 80015e0:	4b63      	ldr	r3, [pc, #396]	; (8001770 <MENU_USB+0x2d8>)
 80015e2:	701a      	strb	r2, [r3, #0]
								duty_cycle=ACII_TO_uint8_t(tokens[MAX_TOKENS-1]);
 80015e4:	4b5e      	ldr	r3, [pc, #376]	; (8001760 <MENU_USB+0x2c8>)
 80015e6:	68db      	ldr	r3, [r3, #12]
 80015e8:	0018      	movs	r0, r3
 80015ea:	f000 f8e1 	bl	80017b0 <ACII_TO_uint8_t>
 80015ee:	0003      	movs	r3, r0
 80015f0:	b2da      	uxtb	r2, r3
 80015f2:	4b60      	ldr	r3, [pc, #384]	; (8001774 <MENU_USB+0x2dc>)
 80015f4:	701a      	strb	r2, [r3, #0]
								if(num==0 || freq==0 || duty_cycle==0 ){
 80015f6:	4b68      	ldr	r3, [pc, #416]	; (8001798 <MENU_USB+0x300>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d007      	beq.n	800160e <MENU_USB+0x176>
 80015fe:	4b5c      	ldr	r3, [pc, #368]	; (8001770 <MENU_USB+0x2d8>)
 8001600:	781b      	ldrb	r3, [r3, #0]
 8001602:	2b00      	cmp	r3, #0
 8001604:	d003      	beq.n	800160e <MENU_USB+0x176>
 8001606:	4b5b      	ldr	r3, [pc, #364]	; (8001774 <MENU_USB+0x2dc>)
 8001608:	781b      	ldrb	r3, [r3, #0]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d104      	bne.n	8001618 <MENU_USB+0x180>
									printf(error_with_run);
 800160e:	4b5a      	ldr	r3, [pc, #360]	; (8001778 <MENU_USB+0x2e0>)
 8001610:	0018      	movs	r0, r3
 8001612:	f003 fb2f 	bl	8004c74 <iprintf>
 8001616:	e03f      	b.n	8001698 <MENU_USB+0x200>
								}
								else if(duty_cycle>=100){
 8001618:	4b56      	ldr	r3, [pc, #344]	; (8001774 <MENU_USB+0x2dc>)
 800161a:	781b      	ldrb	r3, [r3, #0]
 800161c:	2b63      	cmp	r3, #99	; 0x63
 800161e:	d904      	bls.n	800162a <MENU_USB+0x192>
									printf(error_with_duty_cycle);
 8001620:	4b56      	ldr	r3, [pc, #344]	; (800177c <MENU_USB+0x2e4>)
 8001622:	0018      	movs	r0, r3
 8001624:	f003 fb26 	bl	8004c74 <iprintf>
 8001628:	e036      	b.n	8001698 <MENU_USB+0x200>
								}
								else{
								  	Period=(float)(1000/freq);
 800162a:	4b51      	ldr	r3, [pc, #324]	; (8001770 <MENU_USB+0x2d8>)
 800162c:	781b      	ldrb	r3, [r3, #0]
 800162e:	0019      	movs	r1, r3
 8001630:	23fa      	movs	r3, #250	; 0xfa
 8001632:	0098      	lsls	r0, r3, #2
 8001634:	f7fe fe04 	bl	8000240 <__divsi3>
 8001638:	0003      	movs	r3, r0
 800163a:	0018      	movs	r0, r3
 800163c:	f7ff fc2a 	bl	8000e94 <__aeabi_i2f>
 8001640:	1c02      	adds	r2, r0, #0
 8001642:	4b4f      	ldr	r3, [pc, #316]	; (8001780 <MENU_USB+0x2e8>)
 8001644:	601a      	str	r2, [r3, #0]
								  	Ton=(float)((Period*duty_cycle)/100);
 8001646:	4b4b      	ldr	r3, [pc, #300]	; (8001774 <MENU_USB+0x2dc>)
 8001648:	781b      	ldrb	r3, [r3, #0]
 800164a:	0018      	movs	r0, r3
 800164c:	f7ff fc22 	bl	8000e94 <__aeabi_i2f>
 8001650:	1c02      	adds	r2, r0, #0
 8001652:	4b4b      	ldr	r3, [pc, #300]	; (8001780 <MENU_USB+0x2e8>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	1c19      	adds	r1, r3, #0
 8001658:	1c10      	adds	r0, r2, #0
 800165a:	f7ff f927 	bl	80008ac <__aeabi_fmul>
 800165e:	1c03      	adds	r3, r0, #0
 8001660:	4948      	ldr	r1, [pc, #288]	; (8001784 <MENU_USB+0x2ec>)
 8001662:	1c18      	adds	r0, r3, #0
 8001664:	f7ff f80a 	bl	800067c <__aeabi_fdiv>
 8001668:	1c03      	adds	r3, r0, #0
 800166a:	1c1a      	adds	r2, r3, #0
 800166c:	4b46      	ldr	r3, [pc, #280]	; (8001788 <MENU_USB+0x2f0>)
 800166e:	601a      	str	r2, [r3, #0]
								  	Toff=Period-Ton;
 8001670:	4b43      	ldr	r3, [pc, #268]	; (8001780 <MENU_USB+0x2e8>)
 8001672:	681a      	ldr	r2, [r3, #0]
 8001674:	4b44      	ldr	r3, [pc, #272]	; (8001788 <MENU_USB+0x2f0>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	1c19      	adds	r1, r3, #0
 800167a:	1c10      	adds	r0, r2, #0
 800167c:	f7ff fa3c 	bl	8000af8 <__aeabi_fsub>
 8001680:	1c03      	adds	r3, r0, #0
 8001682:	1c1a      	adds	r2, r3, #0
 8001684:	4b41      	ldr	r3, [pc, #260]	; (800178c <MENU_USB+0x2f4>)
 8001686:	601a      	str	r2, [r3, #0]
								  	state=2;
 8001688:	4b41      	ldr	r3, [pc, #260]	; (8001790 <MENU_USB+0x2f8>)
 800168a:	2202      	movs	r2, #2
 800168c:	601a      	str	r2, [r3, #0]
 800168e:	e003      	b.n	8001698 <MENU_USB+0x200>
								}
							}
							else{
								printf(error_with_run);
 8001690:	4b39      	ldr	r3, [pc, #228]	; (8001778 <MENU_USB+0x2e0>)
 8001692:	0018      	movs	r0, r3
 8001694:	f003 faee 	bl	8004c74 <iprintf>
							}
					}
					for (int i = 0; i < sizeof(tokens) / sizeof(tokens[0]); i++) {
 8001698:	2300      	movs	r3, #0
 800169a:	60fb      	str	r3, [r7, #12]
 800169c:	e009      	b.n	80016b2 <MENU_USB+0x21a>
						 free(tokens[i]);
 800169e:	4b30      	ldr	r3, [pc, #192]	; (8001760 <MENU_USB+0x2c8>)
 80016a0:	68fa      	ldr	r2, [r7, #12]
 80016a2:	0092      	lsls	r2, r2, #2
 80016a4:	58d3      	ldr	r3, [r2, r3]
 80016a6:	0018      	movs	r0, r3
 80016a8:	f003 f9f0 	bl	8004a8c <free>
					for (int i = 0; i < sizeof(tokens) / sizeof(tokens[0]); i++) {
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	3301      	adds	r3, #1
 80016b0:	60fb      	str	r3, [r7, #12]
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	2b03      	cmp	r3, #3
 80016b6:	d9f2      	bls.n	800169e <MENU_USB+0x206>
 80016b8:	e028      	b.n	800170c <MENU_USB+0x274>
					}

				}
				else if (strncmp(line_buffer, "stop",4) == 0) {
 80016ba:	4938      	ldr	r1, [pc, #224]	; (800179c <MENU_USB+0x304>)
 80016bc:	4b27      	ldr	r3, [pc, #156]	; (800175c <MENU_USB+0x2c4>)
 80016be:	2204      	movs	r2, #4
 80016c0:	0018      	movs	r0, r3
 80016c2:	f003 fb20 	bl	8004d06 <strncmp>
 80016c6:	1e03      	subs	r3, r0, #0
 80016c8:	d103      	bne.n	80016d2 <MENU_USB+0x23a>
					state=0;
 80016ca:	4b31      	ldr	r3, [pc, #196]	; (8001790 <MENU_USB+0x2f8>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	601a      	str	r2, [r3, #0]
 80016d0:	e01c      	b.n	800170c <MENU_USB+0x274>
				}
				else if (strncmp(line_buffer, "read",4) == 0) {
 80016d2:	4933      	ldr	r1, [pc, #204]	; (80017a0 <MENU_USB+0x308>)
 80016d4:	4b21      	ldr	r3, [pc, #132]	; (800175c <MENU_USB+0x2c4>)
 80016d6:	2204      	movs	r2, #4
 80016d8:	0018      	movs	r0, r3
 80016da:	f003 fb14 	bl	8004d06 <strncmp>
 80016de:	1e03      	subs	r3, r0, #0
 80016e0:	d114      	bne.n	800170c <MENU_USB+0x274>
					state=3;
 80016e2:	4b2b      	ldr	r3, [pc, #172]	; (8001790 <MENU_USB+0x2f8>)
 80016e4:	2203      	movs	r2, #3
 80016e6:	601a      	str	r2, [r3, #0]
 80016e8:	e010      	b.n	800170c <MENU_USB+0x274>
				}
			}
				else {
					printf(error);
 80016ea:	4b2e      	ldr	r3, [pc, #184]	; (80017a4 <MENU_USB+0x30c>)
 80016ec:	0018      	movs	r0, r3
 80016ee:	f003 fac1 	bl	8004c74 <iprintf>
					printf(menu);
 80016f2:	4b2d      	ldr	r3, [pc, #180]	; (80017a8 <MENU_USB+0x310>)
 80016f4:	0018      	movs	r0, r3
 80016f6:	f003 fabd 	bl	8004c74 <iprintf>
				}
			for(int i;i<line_length;i++){
 80016fa:	e007      	b.n	800170c <MENU_USB+0x274>
				line_buffer[i]='\0';
 80016fc:	4a17      	ldr	r2, [pc, #92]	; (800175c <MENU_USB+0x2c4>)
 80016fe:	68bb      	ldr	r3, [r7, #8]
 8001700:	18d3      	adds	r3, r2, r3
 8001702:	2200      	movs	r2, #0
 8001704:	701a      	strb	r2, [r3, #0]
			for(int i;i<line_length;i++){
 8001706:	68bb      	ldr	r3, [r7, #8]
 8001708:	3301      	adds	r3, #1
 800170a:	60bb      	str	r3, [r7, #8]
 800170c:	68ba      	ldr	r2, [r7, #8]
 800170e:	4b12      	ldr	r3, [pc, #72]	; (8001758 <MENU_USB+0x2c0>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	429a      	cmp	r2, r3
 8001714:	d3f2      	bcc.n	80016fc <MENU_USB+0x264>
				}
				line_length = 0;
 8001716:	4b10      	ldr	r3, [pc, #64]	; (8001758 <MENU_USB+0x2c0>)
 8001718:	2200      	movs	r2, #0
 800171a:	601a      	str	r2, [r3, #0]
 800171c:	e018      	b.n	8001750 <MENU_USB+0x2b8>
		}
		else {
			if (line_length >= LINE_MAX_LENGTH) {
 800171e:	4b0e      	ldr	r3, [pc, #56]	; (8001758 <MENU_USB+0x2c0>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	2b4f      	cmp	r3, #79	; 0x4f
 8001724:	d90a      	bls.n	800173c <MENU_USB+0x2a4>
				line_length = 0;
 8001726:	4b0c      	ldr	r3, [pc, #48]	; (8001758 <MENU_USB+0x2c0>)
 8001728:	2200      	movs	r2, #0
 800172a:	601a      	str	r2, [r3, #0]
				printf(error);
 800172c:	4b1d      	ldr	r3, [pc, #116]	; (80017a4 <MENU_USB+0x30c>)
 800172e:	0018      	movs	r0, r3
 8001730:	f003 faa0 	bl	8004c74 <iprintf>
				printf(error_with_lenght);
 8001734:	4b1d      	ldr	r3, [pc, #116]	; (80017ac <MENU_USB+0x314>)
 8001736:	0018      	movs	r0, r3
 8001738:	f003 fa9c 	bl	8004c74 <iprintf>
			}
			line_buffer[line_length++] = value;
 800173c:	4b06      	ldr	r3, [pc, #24]	; (8001758 <MENU_USB+0x2c0>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	1c59      	adds	r1, r3, #1
 8001742:	4a05      	ldr	r2, [pc, #20]	; (8001758 <MENU_USB+0x2c0>)
 8001744:	6011      	str	r1, [r2, #0]
 8001746:	4a05      	ldr	r2, [pc, #20]	; (800175c <MENU_USB+0x2c4>)
 8001748:	1df9      	adds	r1, r7, #7
 800174a:	7809      	ldrb	r1, [r1, #0]
 800174c:	54d1      	strb	r1, [r2, r3]
		}
}
 800174e:	46c0      	nop			; (mov r8, r8)
 8001750:	46c0      	nop			; (mov r8, r8)
 8001752:	46bd      	mov	sp, r7
 8001754:	b004      	add	sp, #16
 8001756:	bd80      	pop	{r7, pc}
 8001758:	20000210 	.word	0x20000210
 800175c:	200001a8 	.word	0x200001a8
 8001760:	200001fc 	.word	0x200001fc
 8001764:	08005ce4 	.word	0x08005ce4
 8001768:	08005ce8 	.word	0x08005ce8
 800176c:	2000020c 	.word	0x2000020c
 8001770:	20000191 	.word	0x20000191
 8001774:	20000192 	.word	0x20000192
 8001778:	200000a0 	.word	0x200000a0
 800177c:	200000c4 	.word	0x200000c4
 8001780:	200001a4 	.word	0x200001a4
 8001784:	42c80000 	.word	0x42c80000
 8001788:	2000019c 	.word	0x2000019c
 800178c:	200001a0 	.word	0x200001a0
 8001790:	20000214 	.word	0x20000214
 8001794:	20000100 	.word	0x20000100
 8001798:	20000198 	.word	0x20000198
 800179c:	08005cec 	.word	0x08005cec
 80017a0:	08005cf4 	.word	0x08005cf4
 80017a4:	20000090 	.word	0x20000090
 80017a8:	20000000 	.word	0x20000000
 80017ac:	200000e8 	.word	0x200000e8

080017b0 <ACII_TO_uint8_t>:
	}


}

uint32_t ACII_TO_uint8_t(const char *table){
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b086      	sub	sp, #24
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
	uint32_t result = 0;
 80017b8:	2300      	movs	r3, #0
 80017ba:	617b      	str	r3, [r7, #20]
	uint32_t numvalue=0;
 80017bc:	2300      	movs	r3, #0
 80017be:	60fb      	str	r3, [r7, #12]
    int size = sizeof(table) / sizeof(char);
 80017c0:	2304      	movs	r3, #4
 80017c2:	60bb      	str	r3, [r7, #8]
    for (int i = 0; i < size-1; i++) {
 80017c4:	2300      	movs	r3, #0
 80017c6:	613b      	str	r3, [r7, #16]
 80017c8:	e01d      	b.n	8001806 <ACII_TO_uint8_t+0x56>
    	if(table[i]==' ' || table[i]=='\0'){
 80017ca:	693b      	ldr	r3, [r7, #16]
 80017cc:	687a      	ldr	r2, [r7, #4]
 80017ce:	18d3      	adds	r3, r2, r3
 80017d0:	781b      	ldrb	r3, [r3, #0]
 80017d2:	2b20      	cmp	r3, #32
 80017d4:	d01c      	beq.n	8001810 <ACII_TO_uint8_t+0x60>
 80017d6:	693b      	ldr	r3, [r7, #16]
 80017d8:	687a      	ldr	r2, [r7, #4]
 80017da:	18d3      	adds	r3, r2, r3
 80017dc:	781b      	ldrb	r3, [r3, #0]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d016      	beq.n	8001810 <ACII_TO_uint8_t+0x60>
    		break;
    	}
    	else{
    		numvalue = table[i] - '0';
 80017e2:	693b      	ldr	r3, [r7, #16]
 80017e4:	687a      	ldr	r2, [r7, #4]
 80017e6:	18d3      	adds	r3, r2, r3
 80017e8:	781b      	ldrb	r3, [r3, #0]
 80017ea:	3b30      	subs	r3, #48	; 0x30
 80017ec:	60fb      	str	r3, [r7, #12]
            result = result * 10 + numvalue;
 80017ee:	697a      	ldr	r2, [r7, #20]
 80017f0:	0013      	movs	r3, r2
 80017f2:	009b      	lsls	r3, r3, #2
 80017f4:	189b      	adds	r3, r3, r2
 80017f6:	005b      	lsls	r3, r3, #1
 80017f8:	001a      	movs	r2, r3
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	189b      	adds	r3, r3, r2
 80017fe:	617b      	str	r3, [r7, #20]
    for (int i = 0; i < size-1; i++) {
 8001800:	693b      	ldr	r3, [r7, #16]
 8001802:	3301      	adds	r3, #1
 8001804:	613b      	str	r3, [r7, #16]
 8001806:	68bb      	ldr	r3, [r7, #8]
 8001808:	3b01      	subs	r3, #1
 800180a:	693a      	ldr	r2, [r7, #16]
 800180c:	429a      	cmp	r2, r3
 800180e:	dbdc      	blt.n	80017ca <ACII_TO_uint8_t+0x1a>
    	}
    }
    return result;
 8001810:	697b      	ldr	r3, [r7, #20]
}
 8001812:	0018      	movs	r0, r3
 8001814:	46bd      	mov	sp, r7
 8001816:	b006      	add	sp, #24
 8001818:	bd80      	pop	{r7, pc}
	...

0800181c <splitString>:

void splitString(const char* input_string, char** tokens) {
 800181c:	b590      	push	{r4, r7, lr}
 800181e:	b087      	sub	sp, #28
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
 8001824:	6039      	str	r1, [r7, #0]
	const char spacebar[] = " \r\n";
 8001826:	2408      	movs	r4, #8
 8001828:	193b      	adds	r3, r7, r4
 800182a:	4a1b      	ldr	r2, [pc, #108]	; (8001898 <splitString+0x7c>)
 800182c:	601a      	str	r2, [r3, #0]
    char* copy_of_input = strdup(input_string);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	0018      	movs	r0, r3
 8001832:	f003 fa4b 	bl	8004ccc <strdup>
 8001836:	0003      	movs	r3, r0
 8001838:	60fb      	str	r3, [r7, #12]
    char* token = strtok(copy_of_input, spacebar);
 800183a:	193a      	adds	r2, r7, r4
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	0011      	movs	r1, r2
 8001840:	0018      	movs	r0, r3
 8001842:	f003 fa8d 	bl	8004d60 <strtok>
 8001846:	0003      	movs	r3, r0
 8001848:	617b      	str	r3, [r7, #20]

    int token_count = 0;
 800184a:	2300      	movs	r3, #0
 800184c:	613b      	str	r3, [r7, #16]
    while (token != NULL && token_count < MAX_TOKENS) {
 800184e:	e014      	b.n	800187a <splitString+0x5e>
        tokens[token_count] = strdup(token);
 8001850:	693b      	ldr	r3, [r7, #16]
 8001852:	009b      	lsls	r3, r3, #2
 8001854:	683a      	ldr	r2, [r7, #0]
 8001856:	18d4      	adds	r4, r2, r3
 8001858:	697b      	ldr	r3, [r7, #20]
 800185a:	0018      	movs	r0, r3
 800185c:	f003 fa36 	bl	8004ccc <strdup>
 8001860:	0003      	movs	r3, r0
 8001862:	6023      	str	r3, [r4, #0]
        token = strtok(NULL, spacebar);
 8001864:	2308      	movs	r3, #8
 8001866:	18fb      	adds	r3, r7, r3
 8001868:	0019      	movs	r1, r3
 800186a:	2000      	movs	r0, #0
 800186c:	f003 fa78 	bl	8004d60 <strtok>
 8001870:	0003      	movs	r3, r0
 8001872:	617b      	str	r3, [r7, #20]
        token_count++;
 8001874:	693b      	ldr	r3, [r7, #16]
 8001876:	3301      	adds	r3, #1
 8001878:	613b      	str	r3, [r7, #16]
    while (token != NULL && token_count < MAX_TOKENS) {
 800187a:	697b      	ldr	r3, [r7, #20]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d002      	beq.n	8001886 <splitString+0x6a>
 8001880:	693b      	ldr	r3, [r7, #16]
 8001882:	2b03      	cmp	r3, #3
 8001884:	dde4      	ble.n	8001850 <splitString+0x34>
    }
    free(copy_of_input);
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	0018      	movs	r0, r3
 800188a:	f003 f8ff 	bl	8004a8c <free>
}
 800188e:	46c0      	nop			; (mov r8, r8)
 8001890:	46bd      	mov	sp, r7
 8001892:	b007      	add	sp, #28
 8001894:	bd90      	pop	{r4, r7, pc}
 8001896:	46c0      	nop			; (mov r8, r8)
 8001898:	000a0d20 	.word	0x000a0d20

0800189c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018a0:	b672      	cpsid	i
}
 80018a2:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018a4:	e7fe      	b.n	80018a4 <Error_Handler+0x8>
	...

080018a8 <PG_init>:
#define LOAD_VAL 			 2097
#define Systick_EN 			(1U<<0)
#define Systick_CLKS 		(1U<<2)
#define SysTick_COUNTFLAG 	(1U<<16)
/*PC*/
void PG_init(void){
 80018a8:	b580      	push	{r7, lr}
 80018aa:	af00      	add	r7, sp, #0
	RCC->IOPENR  |= RCC_IOPENR_GPIOCEN;
 80018ac:	4b0a      	ldr	r3, [pc, #40]	; (80018d8 <PG_init+0x30>)
 80018ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018b0:	4b09      	ldr	r3, [pc, #36]	; (80018d8 <PG_init+0x30>)
 80018b2:	2104      	movs	r1, #4
 80018b4:	430a      	orrs	r2, r1
 80018b6:	62da      	str	r2, [r3, #44]	; 0x2c
	GPIOC -> MODER = (GPIO_MODER_MODE4_0)|(GPIOC->MODER & ~GPIO_MODER_MODE4);
 80018b8:	4b08      	ldr	r3, [pc, #32]	; (80018dc <PG_init+0x34>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4a08      	ldr	r2, [pc, #32]	; (80018e0 <PG_init+0x38>)
 80018be:	401a      	ands	r2, r3
 80018c0:	4b06      	ldr	r3, [pc, #24]	; (80018dc <PG_init+0x34>)
 80018c2:	2180      	movs	r1, #128	; 0x80
 80018c4:	0049      	lsls	r1, r1, #1
 80018c6:	430a      	orrs	r2, r1
 80018c8:	601a      	str	r2, [r3, #0]
	GPIOC->BSRR = (1U<<4);
 80018ca:	4b04      	ldr	r3, [pc, #16]	; (80018dc <PG_init+0x34>)
 80018cc:	2210      	movs	r2, #16
 80018ce:	619a      	str	r2, [r3, #24]
}
 80018d0:	46c0      	nop			; (mov r8, r8)
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	46c0      	nop			; (mov r8, r8)
 80018d8:	40021000 	.word	0x40021000
 80018dc:	50000800 	.word	0x50000800
 80018e0:	fffffcff 	.word	0xfffffcff

080018e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018e8:	4b07      	ldr	r3, [pc, #28]	; (8001908 <HAL_MspInit+0x24>)
 80018ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80018ec:	4b06      	ldr	r3, [pc, #24]	; (8001908 <HAL_MspInit+0x24>)
 80018ee:	2101      	movs	r1, #1
 80018f0:	430a      	orrs	r2, r1
 80018f2:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80018f4:	4b04      	ldr	r3, [pc, #16]	; (8001908 <HAL_MspInit+0x24>)
 80018f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80018f8:	4b03      	ldr	r3, [pc, #12]	; (8001908 <HAL_MspInit+0x24>)
 80018fa:	2180      	movs	r1, #128	; 0x80
 80018fc:	0549      	lsls	r1, r1, #21
 80018fe:	430a      	orrs	r2, r1
 8001900:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001902:	46c0      	nop			; (mov r8, r8)
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}
 8001908:	40021000 	.word	0x40021000

0800190c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001910:	e7fe      	b.n	8001910 <NMI_Handler+0x4>

08001912 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001912:	b580      	push	{r7, lr}
 8001914:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001916:	e7fe      	b.n	8001916 <HardFault_Handler+0x4>

08001918 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800191c:	46c0      	nop			; (mov r8, r8)
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}

08001922 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001922:	b580      	push	{r7, lr}
 8001924:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001926:	46c0      	nop			; (mov r8, r8)
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}

0800192c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001930:	f000 f9ce 	bl	8001cd0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001934:	46c0      	nop			; (mov r8, r8)
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}
	...

0800193c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001940:	4b03      	ldr	r3, [pc, #12]	; (8001950 <USART2_IRQHandler+0x14>)
 8001942:	0018      	movs	r0, r3
 8001944:	f001 fdd0 	bl	80034e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001948:	46c0      	nop			; (mov r8, r8)
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}
 800194e:	46c0      	nop			; (mov r8, r8)
 8001950:	2000021c 	.word	0x2000021c

08001954 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	af00      	add	r7, sp, #0
  return 1;
 8001958:	2301      	movs	r3, #1
}
 800195a:	0018      	movs	r0, r3
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}

08001960 <_kill>:

int _kill(int pid, int sig)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b082      	sub	sp, #8
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
 8001968:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800196a:	f003 f85b 	bl	8004a24 <__errno>
 800196e:	0003      	movs	r3, r0
 8001970:	2216      	movs	r2, #22
 8001972:	601a      	str	r2, [r3, #0]
  return -1;
 8001974:	2301      	movs	r3, #1
 8001976:	425b      	negs	r3, r3
}
 8001978:	0018      	movs	r0, r3
 800197a:	46bd      	mov	sp, r7
 800197c:	b002      	add	sp, #8
 800197e:	bd80      	pop	{r7, pc}

08001980 <_exit>:

void _exit (int status)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b082      	sub	sp, #8
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001988:	2301      	movs	r3, #1
 800198a:	425a      	negs	r2, r3
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	0011      	movs	r1, r2
 8001990:	0018      	movs	r0, r3
 8001992:	f7ff ffe5 	bl	8001960 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001996:	e7fe      	b.n	8001996 <_exit+0x16>

08001998 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b086      	sub	sp, #24
 800199c:	af00      	add	r7, sp, #0
 800199e:	60f8      	str	r0, [r7, #12]
 80019a0:	60b9      	str	r1, [r7, #8]
 80019a2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019a4:	2300      	movs	r3, #0
 80019a6:	617b      	str	r3, [r7, #20]
 80019a8:	e00a      	b.n	80019c0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80019aa:	e000      	b.n	80019ae <_read+0x16>
 80019ac:	bf00      	nop
 80019ae:	0001      	movs	r1, r0
 80019b0:	68bb      	ldr	r3, [r7, #8]
 80019b2:	1c5a      	adds	r2, r3, #1
 80019b4:	60ba      	str	r2, [r7, #8]
 80019b6:	b2ca      	uxtb	r2, r1
 80019b8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019ba:	697b      	ldr	r3, [r7, #20]
 80019bc:	3301      	adds	r3, #1
 80019be:	617b      	str	r3, [r7, #20]
 80019c0:	697a      	ldr	r2, [r7, #20]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	429a      	cmp	r2, r3
 80019c6:	dbf0      	blt.n	80019aa <_read+0x12>
  }

  return len;
 80019c8:	687b      	ldr	r3, [r7, #4]
}
 80019ca:	0018      	movs	r0, r3
 80019cc:	46bd      	mov	sp, r7
 80019ce:	b006      	add	sp, #24
 80019d0:	bd80      	pop	{r7, pc}

080019d2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80019d2:	b580      	push	{r7, lr}
 80019d4:	b086      	sub	sp, #24
 80019d6:	af00      	add	r7, sp, #0
 80019d8:	60f8      	str	r0, [r7, #12]
 80019da:	60b9      	str	r1, [r7, #8]
 80019dc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019de:	2300      	movs	r3, #0
 80019e0:	617b      	str	r3, [r7, #20]
 80019e2:	e009      	b.n	80019f8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80019e4:	68bb      	ldr	r3, [r7, #8]
 80019e6:	1c5a      	adds	r2, r3, #1
 80019e8:	60ba      	str	r2, [r7, #8]
 80019ea:	781b      	ldrb	r3, [r3, #0]
 80019ec:	0018      	movs	r0, r3
 80019ee:	f7ff fbd5 	bl	800119c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019f2:	697b      	ldr	r3, [r7, #20]
 80019f4:	3301      	adds	r3, #1
 80019f6:	617b      	str	r3, [r7, #20]
 80019f8:	697a      	ldr	r2, [r7, #20]
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	429a      	cmp	r2, r3
 80019fe:	dbf1      	blt.n	80019e4 <_write+0x12>
  }
  return len;
 8001a00:	687b      	ldr	r3, [r7, #4]
}
 8001a02:	0018      	movs	r0, r3
 8001a04:	46bd      	mov	sp, r7
 8001a06:	b006      	add	sp, #24
 8001a08:	bd80      	pop	{r7, pc}

08001a0a <_close>:

int _close(int file)
{
 8001a0a:	b580      	push	{r7, lr}
 8001a0c:	b082      	sub	sp, #8
 8001a0e:	af00      	add	r7, sp, #0
 8001a10:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001a12:	2301      	movs	r3, #1
 8001a14:	425b      	negs	r3, r3
}
 8001a16:	0018      	movs	r0, r3
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	b002      	add	sp, #8
 8001a1c:	bd80      	pop	{r7, pc}

08001a1e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a1e:	b580      	push	{r7, lr}
 8001a20:	b082      	sub	sp, #8
 8001a22:	af00      	add	r7, sp, #0
 8001a24:	6078      	str	r0, [r7, #4]
 8001a26:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	2280      	movs	r2, #128	; 0x80
 8001a2c:	0192      	lsls	r2, r2, #6
 8001a2e:	605a      	str	r2, [r3, #4]
  return 0;
 8001a30:	2300      	movs	r3, #0
}
 8001a32:	0018      	movs	r0, r3
 8001a34:	46bd      	mov	sp, r7
 8001a36:	b002      	add	sp, #8
 8001a38:	bd80      	pop	{r7, pc}

08001a3a <_isatty>:

int _isatty(int file)
{
 8001a3a:	b580      	push	{r7, lr}
 8001a3c:	b082      	sub	sp, #8
 8001a3e:	af00      	add	r7, sp, #0
 8001a40:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001a42:	2301      	movs	r3, #1
}
 8001a44:	0018      	movs	r0, r3
 8001a46:	46bd      	mov	sp, r7
 8001a48:	b002      	add	sp, #8
 8001a4a:	bd80      	pop	{r7, pc}

08001a4c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b084      	sub	sp, #16
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	60f8      	str	r0, [r7, #12]
 8001a54:	60b9      	str	r1, [r7, #8]
 8001a56:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001a58:	2300      	movs	r3, #0
}
 8001a5a:	0018      	movs	r0, r3
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	b004      	add	sp, #16
 8001a60:	bd80      	pop	{r7, pc}
	...

08001a64 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b086      	sub	sp, #24
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a6c:	4a14      	ldr	r2, [pc, #80]	; (8001ac0 <_sbrk+0x5c>)
 8001a6e:	4b15      	ldr	r3, [pc, #84]	; (8001ac4 <_sbrk+0x60>)
 8001a70:	1ad3      	subs	r3, r2, r3
 8001a72:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a78:	4b13      	ldr	r3, [pc, #76]	; (8001ac8 <_sbrk+0x64>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d102      	bne.n	8001a86 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a80:	4b11      	ldr	r3, [pc, #68]	; (8001ac8 <_sbrk+0x64>)
 8001a82:	4a12      	ldr	r2, [pc, #72]	; (8001acc <_sbrk+0x68>)
 8001a84:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a86:	4b10      	ldr	r3, [pc, #64]	; (8001ac8 <_sbrk+0x64>)
 8001a88:	681a      	ldr	r2, [r3, #0]
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	18d3      	adds	r3, r2, r3
 8001a8e:	693a      	ldr	r2, [r7, #16]
 8001a90:	429a      	cmp	r2, r3
 8001a92:	d207      	bcs.n	8001aa4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a94:	f002 ffc6 	bl	8004a24 <__errno>
 8001a98:	0003      	movs	r3, r0
 8001a9a:	220c      	movs	r2, #12
 8001a9c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	425b      	negs	r3, r3
 8001aa2:	e009      	b.n	8001ab8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001aa4:	4b08      	ldr	r3, [pc, #32]	; (8001ac8 <_sbrk+0x64>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001aaa:	4b07      	ldr	r3, [pc, #28]	; (8001ac8 <_sbrk+0x64>)
 8001aac:	681a      	ldr	r2, [r3, #0]
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	18d2      	adds	r2, r2, r3
 8001ab2:	4b05      	ldr	r3, [pc, #20]	; (8001ac8 <_sbrk+0x64>)
 8001ab4:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001ab6:	68fb      	ldr	r3, [r7, #12]
}
 8001ab8:	0018      	movs	r0, r3
 8001aba:	46bd      	mov	sp, r7
 8001abc:	b006      	add	sp, #24
 8001abe:	bd80      	pop	{r7, pc}
 8001ac0:	20005000 	.word	0x20005000
 8001ac4:	00000400 	.word	0x00000400
 8001ac8:	20000218 	.word	0x20000218
 8001acc:	200002b8 	.word	0x200002b8

08001ad0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ad4:	46c0      	nop			; (mov r8, r8)
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
	...

08001adc <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001ae0:	4b14      	ldr	r3, [pc, #80]	; (8001b34 <MX_USART2_UART_Init+0x58>)
 8001ae2:	4a15      	ldr	r2, [pc, #84]	; (8001b38 <MX_USART2_UART_Init+0x5c>)
 8001ae4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001ae6:	4b13      	ldr	r3, [pc, #76]	; (8001b34 <MX_USART2_UART_Init+0x58>)
 8001ae8:	22e1      	movs	r2, #225	; 0xe1
 8001aea:	0252      	lsls	r2, r2, #9
 8001aec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001aee:	4b11      	ldr	r3, [pc, #68]	; (8001b34 <MX_USART2_UART_Init+0x58>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001af4:	4b0f      	ldr	r3, [pc, #60]	; (8001b34 <MX_USART2_UART_Init+0x58>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001afa:	4b0e      	ldr	r3, [pc, #56]	; (8001b34 <MX_USART2_UART_Init+0x58>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001b00:	4b0c      	ldr	r3, [pc, #48]	; (8001b34 <MX_USART2_UART_Init+0x58>)
 8001b02:	220c      	movs	r2, #12
 8001b04:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b06:	4b0b      	ldr	r3, [pc, #44]	; (8001b34 <MX_USART2_UART_Init+0x58>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b0c:	4b09      	ldr	r3, [pc, #36]	; (8001b34 <MX_USART2_UART_Init+0x58>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b12:	4b08      	ldr	r3, [pc, #32]	; (8001b34 <MX_USART2_UART_Init+0x58>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b18:	4b06      	ldr	r3, [pc, #24]	; (8001b34 <MX_USART2_UART_Init+0x58>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001b1e:	4b05      	ldr	r3, [pc, #20]	; (8001b34 <MX_USART2_UART_Init+0x58>)
 8001b20:	0018      	movs	r0, r3
 8001b22:	f001 fb8f 	bl	8003244 <HAL_UART_Init>
 8001b26:	1e03      	subs	r3, r0, #0
 8001b28:	d001      	beq.n	8001b2e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001b2a:	f7ff feb7 	bl	800189c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001b2e:	46c0      	nop			; (mov r8, r8)
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}
 8001b34:	2000021c 	.word	0x2000021c
 8001b38:	40004400 	.word	0x40004400

08001b3c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001b3c:	b590      	push	{r4, r7, lr}
 8001b3e:	b089      	sub	sp, #36	; 0x24
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b44:	240c      	movs	r4, #12
 8001b46:	193b      	adds	r3, r7, r4
 8001b48:	0018      	movs	r0, r3
 8001b4a:	2314      	movs	r3, #20
 8001b4c:	001a      	movs	r2, r3
 8001b4e:	2100      	movs	r1, #0
 8001b50:	f002 ffa6 	bl	8004aa0 <memset>
  if(uartHandle->Instance==USART2)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a1c      	ldr	r2, [pc, #112]	; (8001bcc <HAL_UART_MspInit+0x90>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d131      	bne.n	8001bc2 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b5e:	4b1c      	ldr	r3, [pc, #112]	; (8001bd0 <HAL_UART_MspInit+0x94>)
 8001b60:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001b62:	4b1b      	ldr	r3, [pc, #108]	; (8001bd0 <HAL_UART_MspInit+0x94>)
 8001b64:	2180      	movs	r1, #128	; 0x80
 8001b66:	0289      	lsls	r1, r1, #10
 8001b68:	430a      	orrs	r2, r1
 8001b6a:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b6c:	4b18      	ldr	r3, [pc, #96]	; (8001bd0 <HAL_UART_MspInit+0x94>)
 8001b6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b70:	4b17      	ldr	r3, [pc, #92]	; (8001bd0 <HAL_UART_MspInit+0x94>)
 8001b72:	2101      	movs	r1, #1
 8001b74:	430a      	orrs	r2, r1
 8001b76:	62da      	str	r2, [r3, #44]	; 0x2c
 8001b78:	4b15      	ldr	r3, [pc, #84]	; (8001bd0 <HAL_UART_MspInit+0x94>)
 8001b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b7c:	2201      	movs	r2, #1
 8001b7e:	4013      	ands	r3, r2
 8001b80:	60bb      	str	r3, [r7, #8]
 8001b82:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001b84:	0021      	movs	r1, r4
 8001b86:	187b      	adds	r3, r7, r1
 8001b88:	220c      	movs	r2, #12
 8001b8a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b8c:	187b      	adds	r3, r7, r1
 8001b8e:	2202      	movs	r2, #2
 8001b90:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b92:	187b      	adds	r3, r7, r1
 8001b94:	2200      	movs	r2, #0
 8001b96:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b98:	187b      	adds	r3, r7, r1
 8001b9a:	2203      	movs	r2, #3
 8001b9c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8001b9e:	187b      	adds	r3, r7, r1
 8001ba0:	2204      	movs	r2, #4
 8001ba2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ba4:	187a      	adds	r2, r7, r1
 8001ba6:	23a0      	movs	r3, #160	; 0xa0
 8001ba8:	05db      	lsls	r3, r3, #23
 8001baa:	0011      	movs	r1, r2
 8001bac:	0018      	movs	r0, r3
 8001bae:	f000 fa35 	bl	800201c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 3, 0);
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	2103      	movs	r1, #3
 8001bb6:	201c      	movs	r0, #28
 8001bb8:	f000 f976 	bl	8001ea8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001bbc:	201c      	movs	r0, #28
 8001bbe:	f000 f988 	bl	8001ed2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001bc2:	46c0      	nop			; (mov r8, r8)
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	b009      	add	sp, #36	; 0x24
 8001bc8:	bd90      	pop	{r4, r7, pc}
 8001bca:	46c0      	nop			; (mov r8, r8)
 8001bcc:	40004400 	.word	0x40004400
 8001bd0:	40021000 	.word	0x40021000

08001bd4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8001bd4:	480d      	ldr	r0, [pc, #52]	; (8001c0c <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8001bd6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001bd8:	f7ff ff7a 	bl	8001ad0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001bdc:	480c      	ldr	r0, [pc, #48]	; (8001c10 <LoopForever+0x6>)
  ldr r1, =_edata
 8001bde:	490d      	ldr	r1, [pc, #52]	; (8001c14 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001be0:	4a0d      	ldr	r2, [pc, #52]	; (8001c18 <LoopForever+0xe>)
  movs r3, #0
 8001be2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001be4:	e002      	b.n	8001bec <LoopCopyDataInit>

08001be6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001be6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001be8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bea:	3304      	adds	r3, #4

08001bec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bf0:	d3f9      	bcc.n	8001be6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bf2:	4a0a      	ldr	r2, [pc, #40]	; (8001c1c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001bf4:	4c0a      	ldr	r4, [pc, #40]	; (8001c20 <LoopForever+0x16>)
  movs r3, #0
 8001bf6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bf8:	e001      	b.n	8001bfe <LoopFillZerobss>

08001bfa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bfa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bfc:	3204      	adds	r2, #4

08001bfe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bfe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c00:	d3fb      	bcc.n	8001bfa <FillZerobss>


/* Call static constructors */
    bl __libc_init_array
 8001c02:	f002 ff15 	bl	8004a30 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c06:	f7ff faf7 	bl	80011f8 <main>

08001c0a <LoopForever>:

LoopForever:
    b LoopForever
 8001c0a:	e7fe      	b.n	8001c0a <LoopForever>
   ldr   r0, =_estack
 8001c0c:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8001c10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c14:	20000174 	.word	0x20000174
  ldr r2, =_sidata
 8001c18:	08005f98 	.word	0x08005f98
  ldr r2, =_sbss
 8001c1c:	20000174 	.word	0x20000174
  ldr r4, =_ebss
 8001c20:	200002b8 	.word	0x200002b8

08001c24 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c24:	e7fe      	b.n	8001c24 <ADC1_COMP_IRQHandler>
	...

08001c28 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b082      	sub	sp, #8
 8001c2c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001c2e:	1dfb      	adds	r3, r7, #7
 8001c30:	2200      	movs	r2, #0
 8001c32:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8001c34:	4b0b      	ldr	r3, [pc, #44]	; (8001c64 <HAL_Init+0x3c>)
 8001c36:	681a      	ldr	r2, [r3, #0]
 8001c38:	4b0a      	ldr	r3, [pc, #40]	; (8001c64 <HAL_Init+0x3c>)
 8001c3a:	2140      	movs	r1, #64	; 0x40
 8001c3c:	430a      	orrs	r2, r1
 8001c3e:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001c40:	2000      	movs	r0, #0
 8001c42:	f000 f811 	bl	8001c68 <HAL_InitTick>
 8001c46:	1e03      	subs	r3, r0, #0
 8001c48:	d003      	beq.n	8001c52 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8001c4a:	1dfb      	adds	r3, r7, #7
 8001c4c:	2201      	movs	r2, #1
 8001c4e:	701a      	strb	r2, [r3, #0]
 8001c50:	e001      	b.n	8001c56 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001c52:	f7ff fe47 	bl	80018e4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001c56:	1dfb      	adds	r3, r7, #7
 8001c58:	781b      	ldrb	r3, [r3, #0]
}
 8001c5a:	0018      	movs	r0, r3
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	b002      	add	sp, #8
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	46c0      	nop			; (mov r8, r8)
 8001c64:	40022000 	.word	0x40022000

08001c68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c68:	b590      	push	{r4, r7, lr}
 8001c6a:	b083      	sub	sp, #12
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c70:	4b14      	ldr	r3, [pc, #80]	; (8001cc4 <HAL_InitTick+0x5c>)
 8001c72:	681c      	ldr	r4, [r3, #0]
 8001c74:	4b14      	ldr	r3, [pc, #80]	; (8001cc8 <HAL_InitTick+0x60>)
 8001c76:	781b      	ldrb	r3, [r3, #0]
 8001c78:	0019      	movs	r1, r3
 8001c7a:	23fa      	movs	r3, #250	; 0xfa
 8001c7c:	0098      	lsls	r0, r3, #2
 8001c7e:	f7fe fa55 	bl	800012c <__udivsi3>
 8001c82:	0003      	movs	r3, r0
 8001c84:	0019      	movs	r1, r3
 8001c86:	0020      	movs	r0, r4
 8001c88:	f7fe fa50 	bl	800012c <__udivsi3>
 8001c8c:	0003      	movs	r3, r0
 8001c8e:	0018      	movs	r0, r3
 8001c90:	f000 f92f 	bl	8001ef2 <HAL_SYSTICK_Config>
 8001c94:	1e03      	subs	r3, r0, #0
 8001c96:	d001      	beq.n	8001c9c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001c98:	2301      	movs	r3, #1
 8001c9a:	e00f      	b.n	8001cbc <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2b03      	cmp	r3, #3
 8001ca0:	d80b      	bhi.n	8001cba <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ca2:	6879      	ldr	r1, [r7, #4]
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	425b      	negs	r3, r3
 8001ca8:	2200      	movs	r2, #0
 8001caa:	0018      	movs	r0, r3
 8001cac:	f000 f8fc 	bl	8001ea8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001cb0:	4b06      	ldr	r3, [pc, #24]	; (8001ccc <HAL_InitTick+0x64>)
 8001cb2:	687a      	ldr	r2, [r7, #4]
 8001cb4:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	e000      	b.n	8001cbc <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001cba:	2301      	movs	r3, #1
}
 8001cbc:	0018      	movs	r0, r3
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	b003      	add	sp, #12
 8001cc2:	bd90      	pop	{r4, r7, pc}
 8001cc4:	20000104 	.word	0x20000104
 8001cc8:	2000010c 	.word	0x2000010c
 8001ccc:	20000108 	.word	0x20000108

08001cd0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001cd4:	4b05      	ldr	r3, [pc, #20]	; (8001cec <HAL_IncTick+0x1c>)
 8001cd6:	781b      	ldrb	r3, [r3, #0]
 8001cd8:	001a      	movs	r2, r3
 8001cda:	4b05      	ldr	r3, [pc, #20]	; (8001cf0 <HAL_IncTick+0x20>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	18d2      	adds	r2, r2, r3
 8001ce0:	4b03      	ldr	r3, [pc, #12]	; (8001cf0 <HAL_IncTick+0x20>)
 8001ce2:	601a      	str	r2, [r3, #0]
}
 8001ce4:	46c0      	nop			; (mov r8, r8)
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	46c0      	nop			; (mov r8, r8)
 8001cec:	2000010c 	.word	0x2000010c
 8001cf0:	200002a4 	.word	0x200002a4

08001cf4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	af00      	add	r7, sp, #0
  return uwTick;
 8001cf8:	4b02      	ldr	r3, [pc, #8]	; (8001d04 <HAL_GetTick+0x10>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
}
 8001cfc:	0018      	movs	r0, r3
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	46c0      	nop			; (mov r8, r8)
 8001d04:	200002a4 	.word	0x200002a4

08001d08 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b084      	sub	sp, #16
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d10:	f7ff fff0 	bl	8001cf4 <HAL_GetTick>
 8001d14:	0003      	movs	r3, r0
 8001d16:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	3301      	adds	r3, #1
 8001d20:	d005      	beq.n	8001d2e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d22:	4b0a      	ldr	r3, [pc, #40]	; (8001d4c <HAL_Delay+0x44>)
 8001d24:	781b      	ldrb	r3, [r3, #0]
 8001d26:	001a      	movs	r2, r3
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	189b      	adds	r3, r3, r2
 8001d2c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001d2e:	46c0      	nop			; (mov r8, r8)
 8001d30:	f7ff ffe0 	bl	8001cf4 <HAL_GetTick>
 8001d34:	0002      	movs	r2, r0
 8001d36:	68bb      	ldr	r3, [r7, #8]
 8001d38:	1ad3      	subs	r3, r2, r3
 8001d3a:	68fa      	ldr	r2, [r7, #12]
 8001d3c:	429a      	cmp	r2, r3
 8001d3e:	d8f7      	bhi.n	8001d30 <HAL_Delay+0x28>
  {
  }
}
 8001d40:	46c0      	nop			; (mov r8, r8)
 8001d42:	46c0      	nop			; (mov r8, r8)
 8001d44:	46bd      	mov	sp, r7
 8001d46:	b004      	add	sp, #16
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	46c0      	nop			; (mov r8, r8)
 8001d4c:	2000010c 	.word	0x2000010c

08001d50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b082      	sub	sp, #8
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	0002      	movs	r2, r0
 8001d58:	1dfb      	adds	r3, r7, #7
 8001d5a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001d5c:	1dfb      	adds	r3, r7, #7
 8001d5e:	781b      	ldrb	r3, [r3, #0]
 8001d60:	2b7f      	cmp	r3, #127	; 0x7f
 8001d62:	d809      	bhi.n	8001d78 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d64:	1dfb      	adds	r3, r7, #7
 8001d66:	781b      	ldrb	r3, [r3, #0]
 8001d68:	001a      	movs	r2, r3
 8001d6a:	231f      	movs	r3, #31
 8001d6c:	401a      	ands	r2, r3
 8001d6e:	4b04      	ldr	r3, [pc, #16]	; (8001d80 <__NVIC_EnableIRQ+0x30>)
 8001d70:	2101      	movs	r1, #1
 8001d72:	4091      	lsls	r1, r2
 8001d74:	000a      	movs	r2, r1
 8001d76:	601a      	str	r2, [r3, #0]
  }
}
 8001d78:	46c0      	nop			; (mov r8, r8)
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	b002      	add	sp, #8
 8001d7e:	bd80      	pop	{r7, pc}
 8001d80:	e000e100 	.word	0xe000e100

08001d84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d84:	b590      	push	{r4, r7, lr}
 8001d86:	b083      	sub	sp, #12
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	0002      	movs	r2, r0
 8001d8c:	6039      	str	r1, [r7, #0]
 8001d8e:	1dfb      	adds	r3, r7, #7
 8001d90:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001d92:	1dfb      	adds	r3, r7, #7
 8001d94:	781b      	ldrb	r3, [r3, #0]
 8001d96:	2b7f      	cmp	r3, #127	; 0x7f
 8001d98:	d828      	bhi.n	8001dec <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001d9a:	4a2f      	ldr	r2, [pc, #188]	; (8001e58 <__NVIC_SetPriority+0xd4>)
 8001d9c:	1dfb      	adds	r3, r7, #7
 8001d9e:	781b      	ldrb	r3, [r3, #0]
 8001da0:	b25b      	sxtb	r3, r3
 8001da2:	089b      	lsrs	r3, r3, #2
 8001da4:	33c0      	adds	r3, #192	; 0xc0
 8001da6:	009b      	lsls	r3, r3, #2
 8001da8:	589b      	ldr	r3, [r3, r2]
 8001daa:	1dfa      	adds	r2, r7, #7
 8001dac:	7812      	ldrb	r2, [r2, #0]
 8001dae:	0011      	movs	r1, r2
 8001db0:	2203      	movs	r2, #3
 8001db2:	400a      	ands	r2, r1
 8001db4:	00d2      	lsls	r2, r2, #3
 8001db6:	21ff      	movs	r1, #255	; 0xff
 8001db8:	4091      	lsls	r1, r2
 8001dba:	000a      	movs	r2, r1
 8001dbc:	43d2      	mvns	r2, r2
 8001dbe:	401a      	ands	r2, r3
 8001dc0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	019b      	lsls	r3, r3, #6
 8001dc6:	22ff      	movs	r2, #255	; 0xff
 8001dc8:	401a      	ands	r2, r3
 8001dca:	1dfb      	adds	r3, r7, #7
 8001dcc:	781b      	ldrb	r3, [r3, #0]
 8001dce:	0018      	movs	r0, r3
 8001dd0:	2303      	movs	r3, #3
 8001dd2:	4003      	ands	r3, r0
 8001dd4:	00db      	lsls	r3, r3, #3
 8001dd6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001dd8:	481f      	ldr	r0, [pc, #124]	; (8001e58 <__NVIC_SetPriority+0xd4>)
 8001dda:	1dfb      	adds	r3, r7, #7
 8001ddc:	781b      	ldrb	r3, [r3, #0]
 8001dde:	b25b      	sxtb	r3, r3
 8001de0:	089b      	lsrs	r3, r3, #2
 8001de2:	430a      	orrs	r2, r1
 8001de4:	33c0      	adds	r3, #192	; 0xc0
 8001de6:	009b      	lsls	r3, r3, #2
 8001de8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001dea:	e031      	b.n	8001e50 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001dec:	4a1b      	ldr	r2, [pc, #108]	; (8001e5c <__NVIC_SetPriority+0xd8>)
 8001dee:	1dfb      	adds	r3, r7, #7
 8001df0:	781b      	ldrb	r3, [r3, #0]
 8001df2:	0019      	movs	r1, r3
 8001df4:	230f      	movs	r3, #15
 8001df6:	400b      	ands	r3, r1
 8001df8:	3b08      	subs	r3, #8
 8001dfa:	089b      	lsrs	r3, r3, #2
 8001dfc:	3306      	adds	r3, #6
 8001dfe:	009b      	lsls	r3, r3, #2
 8001e00:	18d3      	adds	r3, r2, r3
 8001e02:	3304      	adds	r3, #4
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	1dfa      	adds	r2, r7, #7
 8001e08:	7812      	ldrb	r2, [r2, #0]
 8001e0a:	0011      	movs	r1, r2
 8001e0c:	2203      	movs	r2, #3
 8001e0e:	400a      	ands	r2, r1
 8001e10:	00d2      	lsls	r2, r2, #3
 8001e12:	21ff      	movs	r1, #255	; 0xff
 8001e14:	4091      	lsls	r1, r2
 8001e16:	000a      	movs	r2, r1
 8001e18:	43d2      	mvns	r2, r2
 8001e1a:	401a      	ands	r2, r3
 8001e1c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	019b      	lsls	r3, r3, #6
 8001e22:	22ff      	movs	r2, #255	; 0xff
 8001e24:	401a      	ands	r2, r3
 8001e26:	1dfb      	adds	r3, r7, #7
 8001e28:	781b      	ldrb	r3, [r3, #0]
 8001e2a:	0018      	movs	r0, r3
 8001e2c:	2303      	movs	r3, #3
 8001e2e:	4003      	ands	r3, r0
 8001e30:	00db      	lsls	r3, r3, #3
 8001e32:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001e34:	4809      	ldr	r0, [pc, #36]	; (8001e5c <__NVIC_SetPriority+0xd8>)
 8001e36:	1dfb      	adds	r3, r7, #7
 8001e38:	781b      	ldrb	r3, [r3, #0]
 8001e3a:	001c      	movs	r4, r3
 8001e3c:	230f      	movs	r3, #15
 8001e3e:	4023      	ands	r3, r4
 8001e40:	3b08      	subs	r3, #8
 8001e42:	089b      	lsrs	r3, r3, #2
 8001e44:	430a      	orrs	r2, r1
 8001e46:	3306      	adds	r3, #6
 8001e48:	009b      	lsls	r3, r3, #2
 8001e4a:	18c3      	adds	r3, r0, r3
 8001e4c:	3304      	adds	r3, #4
 8001e4e:	601a      	str	r2, [r3, #0]
}
 8001e50:	46c0      	nop			; (mov r8, r8)
 8001e52:	46bd      	mov	sp, r7
 8001e54:	b003      	add	sp, #12
 8001e56:	bd90      	pop	{r4, r7, pc}
 8001e58:	e000e100 	.word	0xe000e100
 8001e5c:	e000ed00 	.word	0xe000ed00

08001e60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b082      	sub	sp, #8
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	1e5a      	subs	r2, r3, #1
 8001e6c:	2380      	movs	r3, #128	; 0x80
 8001e6e:	045b      	lsls	r3, r3, #17
 8001e70:	429a      	cmp	r2, r3
 8001e72:	d301      	bcc.n	8001e78 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e74:	2301      	movs	r3, #1
 8001e76:	e010      	b.n	8001e9a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e78:	4b0a      	ldr	r3, [pc, #40]	; (8001ea4 <SysTick_Config+0x44>)
 8001e7a:	687a      	ldr	r2, [r7, #4]
 8001e7c:	3a01      	subs	r2, #1
 8001e7e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e80:	2301      	movs	r3, #1
 8001e82:	425b      	negs	r3, r3
 8001e84:	2103      	movs	r1, #3
 8001e86:	0018      	movs	r0, r3
 8001e88:	f7ff ff7c 	bl	8001d84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e8c:	4b05      	ldr	r3, [pc, #20]	; (8001ea4 <SysTick_Config+0x44>)
 8001e8e:	2200      	movs	r2, #0
 8001e90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e92:	4b04      	ldr	r3, [pc, #16]	; (8001ea4 <SysTick_Config+0x44>)
 8001e94:	2207      	movs	r2, #7
 8001e96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e98:	2300      	movs	r3, #0
}
 8001e9a:	0018      	movs	r0, r3
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	b002      	add	sp, #8
 8001ea0:	bd80      	pop	{r7, pc}
 8001ea2:	46c0      	nop			; (mov r8, r8)
 8001ea4:	e000e010 	.word	0xe000e010

08001ea8 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b084      	sub	sp, #16
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	60b9      	str	r1, [r7, #8]
 8001eb0:	607a      	str	r2, [r7, #4]
 8001eb2:	210f      	movs	r1, #15
 8001eb4:	187b      	adds	r3, r7, r1
 8001eb6:	1c02      	adds	r2, r0, #0
 8001eb8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001eba:	68ba      	ldr	r2, [r7, #8]
 8001ebc:	187b      	adds	r3, r7, r1
 8001ebe:	781b      	ldrb	r3, [r3, #0]
 8001ec0:	b25b      	sxtb	r3, r3
 8001ec2:	0011      	movs	r1, r2
 8001ec4:	0018      	movs	r0, r3
 8001ec6:	f7ff ff5d 	bl	8001d84 <__NVIC_SetPriority>
}
 8001eca:	46c0      	nop			; (mov r8, r8)
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	b004      	add	sp, #16
 8001ed0:	bd80      	pop	{r7, pc}

08001ed2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ed2:	b580      	push	{r7, lr}
 8001ed4:	b082      	sub	sp, #8
 8001ed6:	af00      	add	r7, sp, #0
 8001ed8:	0002      	movs	r2, r0
 8001eda:	1dfb      	adds	r3, r7, #7
 8001edc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ede:	1dfb      	adds	r3, r7, #7
 8001ee0:	781b      	ldrb	r3, [r3, #0]
 8001ee2:	b25b      	sxtb	r3, r3
 8001ee4:	0018      	movs	r0, r3
 8001ee6:	f7ff ff33 	bl	8001d50 <__NVIC_EnableIRQ>
}
 8001eea:	46c0      	nop			; (mov r8, r8)
 8001eec:	46bd      	mov	sp, r7
 8001eee:	b002      	add	sp, #8
 8001ef0:	bd80      	pop	{r7, pc}

08001ef2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ef2:	b580      	push	{r7, lr}
 8001ef4:	b082      	sub	sp, #8
 8001ef6:	af00      	add	r7, sp, #0
 8001ef8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	0018      	movs	r0, r3
 8001efe:	f7ff ffaf 	bl	8001e60 <SysTick_Config>
 8001f02:	0003      	movs	r3, r0
}
 8001f04:	0018      	movs	r0, r3
 8001f06:	46bd      	mov	sp, r7
 8001f08:	b002      	add	sp, #8
 8001f0a:	bd80      	pop	{r7, pc}

08001f0c <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b084      	sub	sp, #16
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f14:	230f      	movs	r3, #15
 8001f16:	18fb      	adds	r3, r7, r3
 8001f18:	2200      	movs	r2, #0
 8001f1a:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2225      	movs	r2, #37	; 0x25
 8001f20:	5c9b      	ldrb	r3, [r3, r2]
 8001f22:	b2db      	uxtb	r3, r3
 8001f24:	2b02      	cmp	r3, #2
 8001f26:	d008      	beq.n	8001f3a <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2204      	movs	r2, #4
 8001f2c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2224      	movs	r2, #36	; 0x24
 8001f32:	2100      	movs	r1, #0
 8001f34:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8001f36:	2301      	movs	r3, #1
 8001f38:	e024      	b.n	8001f84 <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	681a      	ldr	r2, [r3, #0]
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	210e      	movs	r1, #14
 8001f46:	438a      	bics	r2, r1
 8001f48:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	681a      	ldr	r2, [r3, #0]
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	2101      	movs	r1, #1
 8001f56:	438a      	bics	r2, r1
 8001f58:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f5e:	221c      	movs	r2, #28
 8001f60:	401a      	ands	r2, r3
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f66:	2101      	movs	r1, #1
 8001f68:	4091      	lsls	r1, r2
 8001f6a:	000a      	movs	r2, r1
 8001f6c:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2225      	movs	r2, #37	; 0x25
 8001f72:	2101      	movs	r1, #1
 8001f74:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2224      	movs	r2, #36	; 0x24
 8001f7a:	2100      	movs	r1, #0
 8001f7c:	5499      	strb	r1, [r3, r2]

    return status;
 8001f7e:	230f      	movs	r3, #15
 8001f80:	18fb      	adds	r3, r7, r3
 8001f82:	781b      	ldrb	r3, [r3, #0]
  }
}
 8001f84:	0018      	movs	r0, r3
 8001f86:	46bd      	mov	sp, r7
 8001f88:	b004      	add	sp, #16
 8001f8a:	bd80      	pop	{r7, pc}

08001f8c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b084      	sub	sp, #16
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f94:	210f      	movs	r1, #15
 8001f96:	187b      	adds	r3, r7, r1
 8001f98:	2200      	movs	r2, #0
 8001f9a:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2225      	movs	r2, #37	; 0x25
 8001fa0:	5c9b      	ldrb	r3, [r3, r2]
 8001fa2:	b2db      	uxtb	r3, r3
 8001fa4:	2b02      	cmp	r3, #2
 8001fa6:	d006      	beq.n	8001fb6 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2204      	movs	r2, #4
 8001fac:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001fae:	187b      	adds	r3, r7, r1
 8001fb0:	2201      	movs	r2, #1
 8001fb2:	701a      	strb	r2, [r3, #0]
 8001fb4:	e02a      	b.n	800200c <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	681a      	ldr	r2, [r3, #0]
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	210e      	movs	r1, #14
 8001fc2:	438a      	bics	r2, r1
 8001fc4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	681a      	ldr	r2, [r3, #0]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	2101      	movs	r1, #1
 8001fd2:	438a      	bics	r2, r1
 8001fd4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fda:	221c      	movs	r2, #28
 8001fdc:	401a      	ands	r2, r3
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe2:	2101      	movs	r1, #1
 8001fe4:	4091      	lsls	r1, r2
 8001fe6:	000a      	movs	r2, r1
 8001fe8:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2225      	movs	r2, #37	; 0x25
 8001fee:	2101      	movs	r1, #1
 8001ff0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2224      	movs	r2, #36	; 0x24
 8001ff6:	2100      	movs	r1, #0
 8001ff8:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d004      	beq.n	800200c <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002006:	687a      	ldr	r2, [r7, #4]
 8002008:	0010      	movs	r0, r2
 800200a:	4798      	blx	r3
    }
  }
  return status;
 800200c:	230f      	movs	r3, #15
 800200e:	18fb      	adds	r3, r7, r3
 8002010:	781b      	ldrb	r3, [r3, #0]
}
 8002012:	0018      	movs	r0, r3
 8002014:	46bd      	mov	sp, r7
 8002016:	b004      	add	sp, #16
 8002018:	bd80      	pop	{r7, pc}
	...

0800201c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b086      	sub	sp, #24
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
 8002024:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002026:	2300      	movs	r3, #0
 8002028:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800202a:	2300      	movs	r3, #0
 800202c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800202e:	2300      	movs	r3, #0
 8002030:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8002032:	e155      	b.n	80022e0 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	2101      	movs	r1, #1
 800203a:	697a      	ldr	r2, [r7, #20]
 800203c:	4091      	lsls	r1, r2
 800203e:	000a      	movs	r2, r1
 8002040:	4013      	ands	r3, r2
 8002042:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d100      	bne.n	800204c <HAL_GPIO_Init+0x30>
 800204a:	e146      	b.n	80022da <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	2203      	movs	r2, #3
 8002052:	4013      	ands	r3, r2
 8002054:	2b01      	cmp	r3, #1
 8002056:	d005      	beq.n	8002064 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	2203      	movs	r2, #3
 800205e:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002060:	2b02      	cmp	r3, #2
 8002062:	d130      	bne.n	80020c6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	689b      	ldr	r3, [r3, #8]
 8002068:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800206a:	697b      	ldr	r3, [r7, #20]
 800206c:	005b      	lsls	r3, r3, #1
 800206e:	2203      	movs	r2, #3
 8002070:	409a      	lsls	r2, r3
 8002072:	0013      	movs	r3, r2
 8002074:	43da      	mvns	r2, r3
 8002076:	693b      	ldr	r3, [r7, #16]
 8002078:	4013      	ands	r3, r2
 800207a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	68da      	ldr	r2, [r3, #12]
 8002080:	697b      	ldr	r3, [r7, #20]
 8002082:	005b      	lsls	r3, r3, #1
 8002084:	409a      	lsls	r2, r3
 8002086:	0013      	movs	r3, r2
 8002088:	693a      	ldr	r2, [r7, #16]
 800208a:	4313      	orrs	r3, r2
 800208c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	693a      	ldr	r2, [r7, #16]
 8002092:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800209a:	2201      	movs	r2, #1
 800209c:	697b      	ldr	r3, [r7, #20]
 800209e:	409a      	lsls	r2, r3
 80020a0:	0013      	movs	r3, r2
 80020a2:	43da      	mvns	r2, r3
 80020a4:	693b      	ldr	r3, [r7, #16]
 80020a6:	4013      	ands	r3, r2
 80020a8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	091b      	lsrs	r3, r3, #4
 80020b0:	2201      	movs	r2, #1
 80020b2:	401a      	ands	r2, r3
 80020b4:	697b      	ldr	r3, [r7, #20]
 80020b6:	409a      	lsls	r2, r3
 80020b8:	0013      	movs	r3, r2
 80020ba:	693a      	ldr	r2, [r7, #16]
 80020bc:	4313      	orrs	r3, r2
 80020be:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	693a      	ldr	r2, [r7, #16]
 80020c4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	2203      	movs	r2, #3
 80020cc:	4013      	ands	r3, r2
 80020ce:	2b03      	cmp	r3, #3
 80020d0:	d017      	beq.n	8002102 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	68db      	ldr	r3, [r3, #12]
 80020d6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80020d8:	697b      	ldr	r3, [r7, #20]
 80020da:	005b      	lsls	r3, r3, #1
 80020dc:	2203      	movs	r2, #3
 80020de:	409a      	lsls	r2, r3
 80020e0:	0013      	movs	r3, r2
 80020e2:	43da      	mvns	r2, r3
 80020e4:	693b      	ldr	r3, [r7, #16]
 80020e6:	4013      	ands	r3, r2
 80020e8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	689a      	ldr	r2, [r3, #8]
 80020ee:	697b      	ldr	r3, [r7, #20]
 80020f0:	005b      	lsls	r3, r3, #1
 80020f2:	409a      	lsls	r2, r3
 80020f4:	0013      	movs	r3, r2
 80020f6:	693a      	ldr	r2, [r7, #16]
 80020f8:	4313      	orrs	r3, r2
 80020fa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	693a      	ldr	r2, [r7, #16]
 8002100:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	2203      	movs	r2, #3
 8002108:	4013      	ands	r3, r2
 800210a:	2b02      	cmp	r3, #2
 800210c:	d123      	bne.n	8002156 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800210e:	697b      	ldr	r3, [r7, #20]
 8002110:	08da      	lsrs	r2, r3, #3
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	3208      	adds	r2, #8
 8002116:	0092      	lsls	r2, r2, #2
 8002118:	58d3      	ldr	r3, [r2, r3]
 800211a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	2207      	movs	r2, #7
 8002120:	4013      	ands	r3, r2
 8002122:	009b      	lsls	r3, r3, #2
 8002124:	220f      	movs	r2, #15
 8002126:	409a      	lsls	r2, r3
 8002128:	0013      	movs	r3, r2
 800212a:	43da      	mvns	r2, r3
 800212c:	693b      	ldr	r3, [r7, #16]
 800212e:	4013      	ands	r3, r2
 8002130:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	691a      	ldr	r2, [r3, #16]
 8002136:	697b      	ldr	r3, [r7, #20]
 8002138:	2107      	movs	r1, #7
 800213a:	400b      	ands	r3, r1
 800213c:	009b      	lsls	r3, r3, #2
 800213e:	409a      	lsls	r2, r3
 8002140:	0013      	movs	r3, r2
 8002142:	693a      	ldr	r2, [r7, #16]
 8002144:	4313      	orrs	r3, r2
 8002146:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002148:	697b      	ldr	r3, [r7, #20]
 800214a:	08da      	lsrs	r2, r3, #3
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	3208      	adds	r2, #8
 8002150:	0092      	lsls	r2, r2, #2
 8002152:	6939      	ldr	r1, [r7, #16]
 8002154:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800215c:	697b      	ldr	r3, [r7, #20]
 800215e:	005b      	lsls	r3, r3, #1
 8002160:	2203      	movs	r2, #3
 8002162:	409a      	lsls	r2, r3
 8002164:	0013      	movs	r3, r2
 8002166:	43da      	mvns	r2, r3
 8002168:	693b      	ldr	r3, [r7, #16]
 800216a:	4013      	ands	r3, r2
 800216c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	2203      	movs	r2, #3
 8002174:	401a      	ands	r2, r3
 8002176:	697b      	ldr	r3, [r7, #20]
 8002178:	005b      	lsls	r3, r3, #1
 800217a:	409a      	lsls	r2, r3
 800217c:	0013      	movs	r3, r2
 800217e:	693a      	ldr	r2, [r7, #16]
 8002180:	4313      	orrs	r3, r2
 8002182:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	693a      	ldr	r2, [r7, #16]
 8002188:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	685a      	ldr	r2, [r3, #4]
 800218e:	23c0      	movs	r3, #192	; 0xc0
 8002190:	029b      	lsls	r3, r3, #10
 8002192:	4013      	ands	r3, r2
 8002194:	d100      	bne.n	8002198 <HAL_GPIO_Init+0x17c>
 8002196:	e0a0      	b.n	80022da <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002198:	4b57      	ldr	r3, [pc, #348]	; (80022f8 <HAL_GPIO_Init+0x2dc>)
 800219a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800219c:	4b56      	ldr	r3, [pc, #344]	; (80022f8 <HAL_GPIO_Init+0x2dc>)
 800219e:	2101      	movs	r1, #1
 80021a0:	430a      	orrs	r2, r1
 80021a2:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 80021a4:	4a55      	ldr	r2, [pc, #340]	; (80022fc <HAL_GPIO_Init+0x2e0>)
 80021a6:	697b      	ldr	r3, [r7, #20]
 80021a8:	089b      	lsrs	r3, r3, #2
 80021aa:	3302      	adds	r3, #2
 80021ac:	009b      	lsls	r3, r3, #2
 80021ae:	589b      	ldr	r3, [r3, r2]
 80021b0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80021b2:	697b      	ldr	r3, [r7, #20]
 80021b4:	2203      	movs	r2, #3
 80021b6:	4013      	ands	r3, r2
 80021b8:	009b      	lsls	r3, r3, #2
 80021ba:	220f      	movs	r2, #15
 80021bc:	409a      	lsls	r2, r3
 80021be:	0013      	movs	r3, r2
 80021c0:	43da      	mvns	r2, r3
 80021c2:	693b      	ldr	r3, [r7, #16]
 80021c4:	4013      	ands	r3, r2
 80021c6:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80021c8:	687a      	ldr	r2, [r7, #4]
 80021ca:	23a0      	movs	r3, #160	; 0xa0
 80021cc:	05db      	lsls	r3, r3, #23
 80021ce:	429a      	cmp	r2, r3
 80021d0:	d01f      	beq.n	8002212 <HAL_GPIO_Init+0x1f6>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	4a4a      	ldr	r2, [pc, #296]	; (8002300 <HAL_GPIO_Init+0x2e4>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d019      	beq.n	800220e <HAL_GPIO_Init+0x1f2>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	4a49      	ldr	r2, [pc, #292]	; (8002304 <HAL_GPIO_Init+0x2e8>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d013      	beq.n	800220a <HAL_GPIO_Init+0x1ee>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	4a48      	ldr	r2, [pc, #288]	; (8002308 <HAL_GPIO_Init+0x2ec>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d00d      	beq.n	8002206 <HAL_GPIO_Init+0x1ea>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	4a47      	ldr	r2, [pc, #284]	; (800230c <HAL_GPIO_Init+0x2f0>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d007      	beq.n	8002202 <HAL_GPIO_Init+0x1e6>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	4a46      	ldr	r2, [pc, #280]	; (8002310 <HAL_GPIO_Init+0x2f4>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d101      	bne.n	80021fe <HAL_GPIO_Init+0x1e2>
 80021fa:	2305      	movs	r3, #5
 80021fc:	e00a      	b.n	8002214 <HAL_GPIO_Init+0x1f8>
 80021fe:	2306      	movs	r3, #6
 8002200:	e008      	b.n	8002214 <HAL_GPIO_Init+0x1f8>
 8002202:	2304      	movs	r3, #4
 8002204:	e006      	b.n	8002214 <HAL_GPIO_Init+0x1f8>
 8002206:	2303      	movs	r3, #3
 8002208:	e004      	b.n	8002214 <HAL_GPIO_Init+0x1f8>
 800220a:	2302      	movs	r3, #2
 800220c:	e002      	b.n	8002214 <HAL_GPIO_Init+0x1f8>
 800220e:	2301      	movs	r3, #1
 8002210:	e000      	b.n	8002214 <HAL_GPIO_Init+0x1f8>
 8002212:	2300      	movs	r3, #0
 8002214:	697a      	ldr	r2, [r7, #20]
 8002216:	2103      	movs	r1, #3
 8002218:	400a      	ands	r2, r1
 800221a:	0092      	lsls	r2, r2, #2
 800221c:	4093      	lsls	r3, r2
 800221e:	693a      	ldr	r2, [r7, #16]
 8002220:	4313      	orrs	r3, r2
 8002222:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002224:	4935      	ldr	r1, [pc, #212]	; (80022fc <HAL_GPIO_Init+0x2e0>)
 8002226:	697b      	ldr	r3, [r7, #20]
 8002228:	089b      	lsrs	r3, r3, #2
 800222a:	3302      	adds	r3, #2
 800222c:	009b      	lsls	r3, r3, #2
 800222e:	693a      	ldr	r2, [r7, #16]
 8002230:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002232:	4b38      	ldr	r3, [pc, #224]	; (8002314 <HAL_GPIO_Init+0x2f8>)
 8002234:	689b      	ldr	r3, [r3, #8]
 8002236:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	43da      	mvns	r2, r3
 800223c:	693b      	ldr	r3, [r7, #16]
 800223e:	4013      	ands	r3, r2
 8002240:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	685a      	ldr	r2, [r3, #4]
 8002246:	2380      	movs	r3, #128	; 0x80
 8002248:	035b      	lsls	r3, r3, #13
 800224a:	4013      	ands	r3, r2
 800224c:	d003      	beq.n	8002256 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 800224e:	693a      	ldr	r2, [r7, #16]
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	4313      	orrs	r3, r2
 8002254:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002256:	4b2f      	ldr	r3, [pc, #188]	; (8002314 <HAL_GPIO_Init+0x2f8>)
 8002258:	693a      	ldr	r2, [r7, #16]
 800225a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800225c:	4b2d      	ldr	r3, [pc, #180]	; (8002314 <HAL_GPIO_Init+0x2f8>)
 800225e:	68db      	ldr	r3, [r3, #12]
 8002260:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	43da      	mvns	r2, r3
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	4013      	ands	r3, r2
 800226a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	685a      	ldr	r2, [r3, #4]
 8002270:	2380      	movs	r3, #128	; 0x80
 8002272:	039b      	lsls	r3, r3, #14
 8002274:	4013      	ands	r3, r2
 8002276:	d003      	beq.n	8002280 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8002278:	693a      	ldr	r2, [r7, #16]
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	4313      	orrs	r3, r2
 800227e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002280:	4b24      	ldr	r3, [pc, #144]	; (8002314 <HAL_GPIO_Init+0x2f8>)
 8002282:	693a      	ldr	r2, [r7, #16]
 8002284:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8002286:	4b23      	ldr	r3, [pc, #140]	; (8002314 <HAL_GPIO_Init+0x2f8>)
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	43da      	mvns	r2, r3
 8002290:	693b      	ldr	r3, [r7, #16]
 8002292:	4013      	ands	r3, r2
 8002294:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	685a      	ldr	r2, [r3, #4]
 800229a:	2380      	movs	r3, #128	; 0x80
 800229c:	029b      	lsls	r3, r3, #10
 800229e:	4013      	ands	r3, r2
 80022a0:	d003      	beq.n	80022aa <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 80022a2:	693a      	ldr	r2, [r7, #16]
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	4313      	orrs	r3, r2
 80022a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80022aa:	4b1a      	ldr	r3, [pc, #104]	; (8002314 <HAL_GPIO_Init+0x2f8>)
 80022ac:	693a      	ldr	r2, [r7, #16]
 80022ae:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80022b0:	4b18      	ldr	r3, [pc, #96]	; (8002314 <HAL_GPIO_Init+0x2f8>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	43da      	mvns	r2, r3
 80022ba:	693b      	ldr	r3, [r7, #16]
 80022bc:	4013      	ands	r3, r2
 80022be:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	685a      	ldr	r2, [r3, #4]
 80022c4:	2380      	movs	r3, #128	; 0x80
 80022c6:	025b      	lsls	r3, r3, #9
 80022c8:	4013      	ands	r3, r2
 80022ca:	d003      	beq.n	80022d4 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 80022cc:	693a      	ldr	r2, [r7, #16]
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	4313      	orrs	r3, r2
 80022d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80022d4:	4b0f      	ldr	r3, [pc, #60]	; (8002314 <HAL_GPIO_Init+0x2f8>)
 80022d6:	693a      	ldr	r2, [r7, #16]
 80022d8:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 80022da:	697b      	ldr	r3, [r7, #20]
 80022dc:	3301      	adds	r3, #1
 80022de:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	681a      	ldr	r2, [r3, #0]
 80022e4:	697b      	ldr	r3, [r7, #20]
 80022e6:	40da      	lsrs	r2, r3
 80022e8:	1e13      	subs	r3, r2, #0
 80022ea:	d000      	beq.n	80022ee <HAL_GPIO_Init+0x2d2>
 80022ec:	e6a2      	b.n	8002034 <HAL_GPIO_Init+0x18>
  }
}
 80022ee:	46c0      	nop			; (mov r8, r8)
 80022f0:	46c0      	nop			; (mov r8, r8)
 80022f2:	46bd      	mov	sp, r7
 80022f4:	b006      	add	sp, #24
 80022f6:	bd80      	pop	{r7, pc}
 80022f8:	40021000 	.word	0x40021000
 80022fc:	40010000 	.word	0x40010000
 8002300:	50000400 	.word	0x50000400
 8002304:	50000800 	.word	0x50000800
 8002308:	50000c00 	.word	0x50000c00
 800230c:	50001000 	.word	0x50001000
 8002310:	50001c00 	.word	0x50001c00
 8002314:	40010400 	.word	0x40010400

08002318 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002318:	b5b0      	push	{r4, r5, r7, lr}
 800231a:	b08a      	sub	sp, #40	; 0x28
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d102      	bne.n	800232c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002326:	2301      	movs	r3, #1
 8002328:	f000 fbbf 	bl	8002aaa <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800232c:	4bc9      	ldr	r3, [pc, #804]	; (8002654 <HAL_RCC_OscConfig+0x33c>)
 800232e:	68db      	ldr	r3, [r3, #12]
 8002330:	220c      	movs	r2, #12
 8002332:	4013      	ands	r3, r2
 8002334:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002336:	4bc7      	ldr	r3, [pc, #796]	; (8002654 <HAL_RCC_OscConfig+0x33c>)
 8002338:	68da      	ldr	r2, [r3, #12]
 800233a:	2380      	movs	r3, #128	; 0x80
 800233c:	025b      	lsls	r3, r3, #9
 800233e:	4013      	ands	r3, r2
 8002340:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	2201      	movs	r2, #1
 8002348:	4013      	ands	r3, r2
 800234a:	d100      	bne.n	800234e <HAL_RCC_OscConfig+0x36>
 800234c:	e07e      	b.n	800244c <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800234e:	69fb      	ldr	r3, [r7, #28]
 8002350:	2b08      	cmp	r3, #8
 8002352:	d007      	beq.n	8002364 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002354:	69fb      	ldr	r3, [r7, #28]
 8002356:	2b0c      	cmp	r3, #12
 8002358:	d112      	bne.n	8002380 <HAL_RCC_OscConfig+0x68>
 800235a:	69ba      	ldr	r2, [r7, #24]
 800235c:	2380      	movs	r3, #128	; 0x80
 800235e:	025b      	lsls	r3, r3, #9
 8002360:	429a      	cmp	r2, r3
 8002362:	d10d      	bne.n	8002380 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002364:	4bbb      	ldr	r3, [pc, #748]	; (8002654 <HAL_RCC_OscConfig+0x33c>)
 8002366:	681a      	ldr	r2, [r3, #0]
 8002368:	2380      	movs	r3, #128	; 0x80
 800236a:	029b      	lsls	r3, r3, #10
 800236c:	4013      	ands	r3, r2
 800236e:	d100      	bne.n	8002372 <HAL_RCC_OscConfig+0x5a>
 8002370:	e06b      	b.n	800244a <HAL_RCC_OscConfig+0x132>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d167      	bne.n	800244a <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 800237a:	2301      	movs	r3, #1
 800237c:	f000 fb95 	bl	8002aaa <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	685a      	ldr	r2, [r3, #4]
 8002384:	2380      	movs	r3, #128	; 0x80
 8002386:	025b      	lsls	r3, r3, #9
 8002388:	429a      	cmp	r2, r3
 800238a:	d107      	bne.n	800239c <HAL_RCC_OscConfig+0x84>
 800238c:	4bb1      	ldr	r3, [pc, #708]	; (8002654 <HAL_RCC_OscConfig+0x33c>)
 800238e:	681a      	ldr	r2, [r3, #0]
 8002390:	4bb0      	ldr	r3, [pc, #704]	; (8002654 <HAL_RCC_OscConfig+0x33c>)
 8002392:	2180      	movs	r1, #128	; 0x80
 8002394:	0249      	lsls	r1, r1, #9
 8002396:	430a      	orrs	r2, r1
 8002398:	601a      	str	r2, [r3, #0]
 800239a:	e027      	b.n	80023ec <HAL_RCC_OscConfig+0xd4>
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	685a      	ldr	r2, [r3, #4]
 80023a0:	23a0      	movs	r3, #160	; 0xa0
 80023a2:	02db      	lsls	r3, r3, #11
 80023a4:	429a      	cmp	r2, r3
 80023a6:	d10e      	bne.n	80023c6 <HAL_RCC_OscConfig+0xae>
 80023a8:	4baa      	ldr	r3, [pc, #680]	; (8002654 <HAL_RCC_OscConfig+0x33c>)
 80023aa:	681a      	ldr	r2, [r3, #0]
 80023ac:	4ba9      	ldr	r3, [pc, #676]	; (8002654 <HAL_RCC_OscConfig+0x33c>)
 80023ae:	2180      	movs	r1, #128	; 0x80
 80023b0:	02c9      	lsls	r1, r1, #11
 80023b2:	430a      	orrs	r2, r1
 80023b4:	601a      	str	r2, [r3, #0]
 80023b6:	4ba7      	ldr	r3, [pc, #668]	; (8002654 <HAL_RCC_OscConfig+0x33c>)
 80023b8:	681a      	ldr	r2, [r3, #0]
 80023ba:	4ba6      	ldr	r3, [pc, #664]	; (8002654 <HAL_RCC_OscConfig+0x33c>)
 80023bc:	2180      	movs	r1, #128	; 0x80
 80023be:	0249      	lsls	r1, r1, #9
 80023c0:	430a      	orrs	r2, r1
 80023c2:	601a      	str	r2, [r3, #0]
 80023c4:	e012      	b.n	80023ec <HAL_RCC_OscConfig+0xd4>
 80023c6:	4ba3      	ldr	r3, [pc, #652]	; (8002654 <HAL_RCC_OscConfig+0x33c>)
 80023c8:	681a      	ldr	r2, [r3, #0]
 80023ca:	4ba2      	ldr	r3, [pc, #648]	; (8002654 <HAL_RCC_OscConfig+0x33c>)
 80023cc:	49a2      	ldr	r1, [pc, #648]	; (8002658 <HAL_RCC_OscConfig+0x340>)
 80023ce:	400a      	ands	r2, r1
 80023d0:	601a      	str	r2, [r3, #0]
 80023d2:	4ba0      	ldr	r3, [pc, #640]	; (8002654 <HAL_RCC_OscConfig+0x33c>)
 80023d4:	681a      	ldr	r2, [r3, #0]
 80023d6:	2380      	movs	r3, #128	; 0x80
 80023d8:	025b      	lsls	r3, r3, #9
 80023da:	4013      	ands	r3, r2
 80023dc:	60fb      	str	r3, [r7, #12]
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	4b9c      	ldr	r3, [pc, #624]	; (8002654 <HAL_RCC_OscConfig+0x33c>)
 80023e2:	681a      	ldr	r2, [r3, #0]
 80023e4:	4b9b      	ldr	r3, [pc, #620]	; (8002654 <HAL_RCC_OscConfig+0x33c>)
 80023e6:	499d      	ldr	r1, [pc, #628]	; (800265c <HAL_RCC_OscConfig+0x344>)
 80023e8:	400a      	ands	r2, r1
 80023ea:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d015      	beq.n	8002420 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023f4:	f7ff fc7e 	bl	8001cf4 <HAL_GetTick>
 80023f8:	0003      	movs	r3, r0
 80023fa:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80023fc:	e009      	b.n	8002412 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023fe:	f7ff fc79 	bl	8001cf4 <HAL_GetTick>
 8002402:	0002      	movs	r2, r0
 8002404:	697b      	ldr	r3, [r7, #20]
 8002406:	1ad3      	subs	r3, r2, r3
 8002408:	2b64      	cmp	r3, #100	; 0x64
 800240a:	d902      	bls.n	8002412 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800240c:	2303      	movs	r3, #3
 800240e:	f000 fb4c 	bl	8002aaa <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002412:	4b90      	ldr	r3, [pc, #576]	; (8002654 <HAL_RCC_OscConfig+0x33c>)
 8002414:	681a      	ldr	r2, [r3, #0]
 8002416:	2380      	movs	r3, #128	; 0x80
 8002418:	029b      	lsls	r3, r3, #10
 800241a:	4013      	ands	r3, r2
 800241c:	d0ef      	beq.n	80023fe <HAL_RCC_OscConfig+0xe6>
 800241e:	e015      	b.n	800244c <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002420:	f7ff fc68 	bl	8001cf4 <HAL_GetTick>
 8002424:	0003      	movs	r3, r0
 8002426:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002428:	e008      	b.n	800243c <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800242a:	f7ff fc63 	bl	8001cf4 <HAL_GetTick>
 800242e:	0002      	movs	r2, r0
 8002430:	697b      	ldr	r3, [r7, #20]
 8002432:	1ad3      	subs	r3, r2, r3
 8002434:	2b64      	cmp	r3, #100	; 0x64
 8002436:	d901      	bls.n	800243c <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8002438:	2303      	movs	r3, #3
 800243a:	e336      	b.n	8002aaa <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800243c:	4b85      	ldr	r3, [pc, #532]	; (8002654 <HAL_RCC_OscConfig+0x33c>)
 800243e:	681a      	ldr	r2, [r3, #0]
 8002440:	2380      	movs	r3, #128	; 0x80
 8002442:	029b      	lsls	r3, r3, #10
 8002444:	4013      	ands	r3, r2
 8002446:	d1f0      	bne.n	800242a <HAL_RCC_OscConfig+0x112>
 8002448:	e000      	b.n	800244c <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800244a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	2202      	movs	r2, #2
 8002452:	4013      	ands	r3, r2
 8002454:	d100      	bne.n	8002458 <HAL_RCC_OscConfig+0x140>
 8002456:	e099      	b.n	800258c <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	68db      	ldr	r3, [r3, #12]
 800245c:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 800245e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002460:	2220      	movs	r2, #32
 8002462:	4013      	ands	r3, r2
 8002464:	d009      	beq.n	800247a <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8002466:	4b7b      	ldr	r3, [pc, #492]	; (8002654 <HAL_RCC_OscConfig+0x33c>)
 8002468:	681a      	ldr	r2, [r3, #0]
 800246a:	4b7a      	ldr	r3, [pc, #488]	; (8002654 <HAL_RCC_OscConfig+0x33c>)
 800246c:	2120      	movs	r1, #32
 800246e:	430a      	orrs	r2, r1
 8002470:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8002472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002474:	2220      	movs	r2, #32
 8002476:	4393      	bics	r3, r2
 8002478:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800247a:	69fb      	ldr	r3, [r7, #28]
 800247c:	2b04      	cmp	r3, #4
 800247e:	d005      	beq.n	800248c <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002480:	69fb      	ldr	r3, [r7, #28]
 8002482:	2b0c      	cmp	r3, #12
 8002484:	d13e      	bne.n	8002504 <HAL_RCC_OscConfig+0x1ec>
 8002486:	69bb      	ldr	r3, [r7, #24]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d13b      	bne.n	8002504 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 800248c:	4b71      	ldr	r3, [pc, #452]	; (8002654 <HAL_RCC_OscConfig+0x33c>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	2204      	movs	r2, #4
 8002492:	4013      	ands	r3, r2
 8002494:	d004      	beq.n	80024a0 <HAL_RCC_OscConfig+0x188>
 8002496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002498:	2b00      	cmp	r3, #0
 800249a:	d101      	bne.n	80024a0 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 800249c:	2301      	movs	r3, #1
 800249e:	e304      	b.n	8002aaa <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024a0:	4b6c      	ldr	r3, [pc, #432]	; (8002654 <HAL_RCC_OscConfig+0x33c>)
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	4a6e      	ldr	r2, [pc, #440]	; (8002660 <HAL_RCC_OscConfig+0x348>)
 80024a6:	4013      	ands	r3, r2
 80024a8:	0019      	movs	r1, r3
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	691b      	ldr	r3, [r3, #16]
 80024ae:	021a      	lsls	r2, r3, #8
 80024b0:	4b68      	ldr	r3, [pc, #416]	; (8002654 <HAL_RCC_OscConfig+0x33c>)
 80024b2:	430a      	orrs	r2, r1
 80024b4:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80024b6:	4b67      	ldr	r3, [pc, #412]	; (8002654 <HAL_RCC_OscConfig+0x33c>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	2209      	movs	r2, #9
 80024bc:	4393      	bics	r3, r2
 80024be:	0019      	movs	r1, r3
 80024c0:	4b64      	ldr	r3, [pc, #400]	; (8002654 <HAL_RCC_OscConfig+0x33c>)
 80024c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024c4:	430a      	orrs	r2, r1
 80024c6:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80024c8:	f000 fc42 	bl	8002d50 <HAL_RCC_GetSysClockFreq>
 80024cc:	0001      	movs	r1, r0
 80024ce:	4b61      	ldr	r3, [pc, #388]	; (8002654 <HAL_RCC_OscConfig+0x33c>)
 80024d0:	68db      	ldr	r3, [r3, #12]
 80024d2:	091b      	lsrs	r3, r3, #4
 80024d4:	220f      	movs	r2, #15
 80024d6:	4013      	ands	r3, r2
 80024d8:	4a62      	ldr	r2, [pc, #392]	; (8002664 <HAL_RCC_OscConfig+0x34c>)
 80024da:	5cd3      	ldrb	r3, [r2, r3]
 80024dc:	000a      	movs	r2, r1
 80024de:	40da      	lsrs	r2, r3
 80024e0:	4b61      	ldr	r3, [pc, #388]	; (8002668 <HAL_RCC_OscConfig+0x350>)
 80024e2:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 80024e4:	4b61      	ldr	r3, [pc, #388]	; (800266c <HAL_RCC_OscConfig+0x354>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	2513      	movs	r5, #19
 80024ea:	197c      	adds	r4, r7, r5
 80024ec:	0018      	movs	r0, r3
 80024ee:	f7ff fbbb 	bl	8001c68 <HAL_InitTick>
 80024f2:	0003      	movs	r3, r0
 80024f4:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 80024f6:	197b      	adds	r3, r7, r5
 80024f8:	781b      	ldrb	r3, [r3, #0]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d046      	beq.n	800258c <HAL_RCC_OscConfig+0x274>
      {
        return status;
 80024fe:	197b      	adds	r3, r7, r5
 8002500:	781b      	ldrb	r3, [r3, #0]
 8002502:	e2d2      	b.n	8002aaa <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8002504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002506:	2b00      	cmp	r3, #0
 8002508:	d027      	beq.n	800255a <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800250a:	4b52      	ldr	r3, [pc, #328]	; (8002654 <HAL_RCC_OscConfig+0x33c>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	2209      	movs	r2, #9
 8002510:	4393      	bics	r3, r2
 8002512:	0019      	movs	r1, r3
 8002514:	4b4f      	ldr	r3, [pc, #316]	; (8002654 <HAL_RCC_OscConfig+0x33c>)
 8002516:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002518:	430a      	orrs	r2, r1
 800251a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800251c:	f7ff fbea 	bl	8001cf4 <HAL_GetTick>
 8002520:	0003      	movs	r3, r0
 8002522:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002524:	e008      	b.n	8002538 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002526:	f7ff fbe5 	bl	8001cf4 <HAL_GetTick>
 800252a:	0002      	movs	r2, r0
 800252c:	697b      	ldr	r3, [r7, #20]
 800252e:	1ad3      	subs	r3, r2, r3
 8002530:	2b02      	cmp	r3, #2
 8002532:	d901      	bls.n	8002538 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 8002534:	2303      	movs	r3, #3
 8002536:	e2b8      	b.n	8002aaa <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002538:	4b46      	ldr	r3, [pc, #280]	; (8002654 <HAL_RCC_OscConfig+0x33c>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	2204      	movs	r2, #4
 800253e:	4013      	ands	r3, r2
 8002540:	d0f1      	beq.n	8002526 <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002542:	4b44      	ldr	r3, [pc, #272]	; (8002654 <HAL_RCC_OscConfig+0x33c>)
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	4a46      	ldr	r2, [pc, #280]	; (8002660 <HAL_RCC_OscConfig+0x348>)
 8002548:	4013      	ands	r3, r2
 800254a:	0019      	movs	r1, r3
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	691b      	ldr	r3, [r3, #16]
 8002550:	021a      	lsls	r2, r3, #8
 8002552:	4b40      	ldr	r3, [pc, #256]	; (8002654 <HAL_RCC_OscConfig+0x33c>)
 8002554:	430a      	orrs	r2, r1
 8002556:	605a      	str	r2, [r3, #4]
 8002558:	e018      	b.n	800258c <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800255a:	4b3e      	ldr	r3, [pc, #248]	; (8002654 <HAL_RCC_OscConfig+0x33c>)
 800255c:	681a      	ldr	r2, [r3, #0]
 800255e:	4b3d      	ldr	r3, [pc, #244]	; (8002654 <HAL_RCC_OscConfig+0x33c>)
 8002560:	2101      	movs	r1, #1
 8002562:	438a      	bics	r2, r1
 8002564:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002566:	f7ff fbc5 	bl	8001cf4 <HAL_GetTick>
 800256a:	0003      	movs	r3, r0
 800256c:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800256e:	e008      	b.n	8002582 <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002570:	f7ff fbc0 	bl	8001cf4 <HAL_GetTick>
 8002574:	0002      	movs	r2, r0
 8002576:	697b      	ldr	r3, [r7, #20]
 8002578:	1ad3      	subs	r3, r2, r3
 800257a:	2b02      	cmp	r3, #2
 800257c:	d901      	bls.n	8002582 <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 800257e:	2303      	movs	r3, #3
 8002580:	e293      	b.n	8002aaa <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002582:	4b34      	ldr	r3, [pc, #208]	; (8002654 <HAL_RCC_OscConfig+0x33c>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	2204      	movs	r2, #4
 8002588:	4013      	ands	r3, r2
 800258a:	d1f1      	bne.n	8002570 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	2210      	movs	r2, #16
 8002592:	4013      	ands	r3, r2
 8002594:	d100      	bne.n	8002598 <HAL_RCC_OscConfig+0x280>
 8002596:	e0a2      	b.n	80026de <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002598:	69fb      	ldr	r3, [r7, #28]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d140      	bne.n	8002620 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800259e:	4b2d      	ldr	r3, [pc, #180]	; (8002654 <HAL_RCC_OscConfig+0x33c>)
 80025a0:	681a      	ldr	r2, [r3, #0]
 80025a2:	2380      	movs	r3, #128	; 0x80
 80025a4:	009b      	lsls	r3, r3, #2
 80025a6:	4013      	ands	r3, r2
 80025a8:	d005      	beq.n	80025b6 <HAL_RCC_OscConfig+0x29e>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	69db      	ldr	r3, [r3, #28]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d101      	bne.n	80025b6 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 80025b2:	2301      	movs	r3, #1
 80025b4:	e279      	b.n	8002aaa <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80025b6:	4b27      	ldr	r3, [pc, #156]	; (8002654 <HAL_RCC_OscConfig+0x33c>)
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	4a2d      	ldr	r2, [pc, #180]	; (8002670 <HAL_RCC_OscConfig+0x358>)
 80025bc:	4013      	ands	r3, r2
 80025be:	0019      	movs	r1, r3
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80025c4:	4b23      	ldr	r3, [pc, #140]	; (8002654 <HAL_RCC_OscConfig+0x33c>)
 80025c6:	430a      	orrs	r2, r1
 80025c8:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80025ca:	4b22      	ldr	r3, [pc, #136]	; (8002654 <HAL_RCC_OscConfig+0x33c>)
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	021b      	lsls	r3, r3, #8
 80025d0:	0a19      	lsrs	r1, r3, #8
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6a1b      	ldr	r3, [r3, #32]
 80025d6:	061a      	lsls	r2, r3, #24
 80025d8:	4b1e      	ldr	r3, [pc, #120]	; (8002654 <HAL_RCC_OscConfig+0x33c>)
 80025da:	430a      	orrs	r2, r1
 80025dc:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025e2:	0b5b      	lsrs	r3, r3, #13
 80025e4:	3301      	adds	r3, #1
 80025e6:	2280      	movs	r2, #128	; 0x80
 80025e8:	0212      	lsls	r2, r2, #8
 80025ea:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80025ec:	4b19      	ldr	r3, [pc, #100]	; (8002654 <HAL_RCC_OscConfig+0x33c>)
 80025ee:	68db      	ldr	r3, [r3, #12]
 80025f0:	091b      	lsrs	r3, r3, #4
 80025f2:	210f      	movs	r1, #15
 80025f4:	400b      	ands	r3, r1
 80025f6:	491b      	ldr	r1, [pc, #108]	; (8002664 <HAL_RCC_OscConfig+0x34c>)
 80025f8:	5ccb      	ldrb	r3, [r1, r3]
 80025fa:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80025fc:	4b1a      	ldr	r3, [pc, #104]	; (8002668 <HAL_RCC_OscConfig+0x350>)
 80025fe:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8002600:	4b1a      	ldr	r3, [pc, #104]	; (800266c <HAL_RCC_OscConfig+0x354>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	2513      	movs	r5, #19
 8002606:	197c      	adds	r4, r7, r5
 8002608:	0018      	movs	r0, r3
 800260a:	f7ff fb2d 	bl	8001c68 <HAL_InitTick>
 800260e:	0003      	movs	r3, r0
 8002610:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8002612:	197b      	adds	r3, r7, r5
 8002614:	781b      	ldrb	r3, [r3, #0]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d061      	beq.n	80026de <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 800261a:	197b      	adds	r3, r7, r5
 800261c:	781b      	ldrb	r3, [r3, #0]
 800261e:	e244      	b.n	8002aaa <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	69db      	ldr	r3, [r3, #28]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d040      	beq.n	80026aa <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002628:	4b0a      	ldr	r3, [pc, #40]	; (8002654 <HAL_RCC_OscConfig+0x33c>)
 800262a:	681a      	ldr	r2, [r3, #0]
 800262c:	4b09      	ldr	r3, [pc, #36]	; (8002654 <HAL_RCC_OscConfig+0x33c>)
 800262e:	2180      	movs	r1, #128	; 0x80
 8002630:	0049      	lsls	r1, r1, #1
 8002632:	430a      	orrs	r2, r1
 8002634:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002636:	f7ff fb5d 	bl	8001cf4 <HAL_GetTick>
 800263a:	0003      	movs	r3, r0
 800263c:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800263e:	e019      	b.n	8002674 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002640:	f7ff fb58 	bl	8001cf4 <HAL_GetTick>
 8002644:	0002      	movs	r2, r0
 8002646:	697b      	ldr	r3, [r7, #20]
 8002648:	1ad3      	subs	r3, r2, r3
 800264a:	2b02      	cmp	r3, #2
 800264c:	d912      	bls.n	8002674 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 800264e:	2303      	movs	r3, #3
 8002650:	e22b      	b.n	8002aaa <HAL_RCC_OscConfig+0x792>
 8002652:	46c0      	nop			; (mov r8, r8)
 8002654:	40021000 	.word	0x40021000
 8002658:	fffeffff 	.word	0xfffeffff
 800265c:	fffbffff 	.word	0xfffbffff
 8002660:	ffffe0ff 	.word	0xffffe0ff
 8002664:	08005dd4 	.word	0x08005dd4
 8002668:	20000104 	.word	0x20000104
 800266c:	20000108 	.word	0x20000108
 8002670:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002674:	4bca      	ldr	r3, [pc, #808]	; (80029a0 <HAL_RCC_OscConfig+0x688>)
 8002676:	681a      	ldr	r2, [r3, #0]
 8002678:	2380      	movs	r3, #128	; 0x80
 800267a:	009b      	lsls	r3, r3, #2
 800267c:	4013      	ands	r3, r2
 800267e:	d0df      	beq.n	8002640 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002680:	4bc7      	ldr	r3, [pc, #796]	; (80029a0 <HAL_RCC_OscConfig+0x688>)
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	4ac7      	ldr	r2, [pc, #796]	; (80029a4 <HAL_RCC_OscConfig+0x68c>)
 8002686:	4013      	ands	r3, r2
 8002688:	0019      	movs	r1, r3
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800268e:	4bc4      	ldr	r3, [pc, #784]	; (80029a0 <HAL_RCC_OscConfig+0x688>)
 8002690:	430a      	orrs	r2, r1
 8002692:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002694:	4bc2      	ldr	r3, [pc, #776]	; (80029a0 <HAL_RCC_OscConfig+0x688>)
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	021b      	lsls	r3, r3, #8
 800269a:	0a19      	lsrs	r1, r3, #8
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6a1b      	ldr	r3, [r3, #32]
 80026a0:	061a      	lsls	r2, r3, #24
 80026a2:	4bbf      	ldr	r3, [pc, #764]	; (80029a0 <HAL_RCC_OscConfig+0x688>)
 80026a4:	430a      	orrs	r2, r1
 80026a6:	605a      	str	r2, [r3, #4]
 80026a8:	e019      	b.n	80026de <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80026aa:	4bbd      	ldr	r3, [pc, #756]	; (80029a0 <HAL_RCC_OscConfig+0x688>)
 80026ac:	681a      	ldr	r2, [r3, #0]
 80026ae:	4bbc      	ldr	r3, [pc, #752]	; (80029a0 <HAL_RCC_OscConfig+0x688>)
 80026b0:	49bd      	ldr	r1, [pc, #756]	; (80029a8 <HAL_RCC_OscConfig+0x690>)
 80026b2:	400a      	ands	r2, r1
 80026b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026b6:	f7ff fb1d 	bl	8001cf4 <HAL_GetTick>
 80026ba:	0003      	movs	r3, r0
 80026bc:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80026be:	e008      	b.n	80026d2 <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80026c0:	f7ff fb18 	bl	8001cf4 <HAL_GetTick>
 80026c4:	0002      	movs	r2, r0
 80026c6:	697b      	ldr	r3, [r7, #20]
 80026c8:	1ad3      	subs	r3, r2, r3
 80026ca:	2b02      	cmp	r3, #2
 80026cc:	d901      	bls.n	80026d2 <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 80026ce:	2303      	movs	r3, #3
 80026d0:	e1eb      	b.n	8002aaa <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80026d2:	4bb3      	ldr	r3, [pc, #716]	; (80029a0 <HAL_RCC_OscConfig+0x688>)
 80026d4:	681a      	ldr	r2, [r3, #0]
 80026d6:	2380      	movs	r3, #128	; 0x80
 80026d8:	009b      	lsls	r3, r3, #2
 80026da:	4013      	ands	r3, r2
 80026dc:	d1f0      	bne.n	80026c0 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	2208      	movs	r2, #8
 80026e4:	4013      	ands	r3, r2
 80026e6:	d036      	beq.n	8002756 <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	695b      	ldr	r3, [r3, #20]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d019      	beq.n	8002724 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026f0:	4bab      	ldr	r3, [pc, #684]	; (80029a0 <HAL_RCC_OscConfig+0x688>)
 80026f2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80026f4:	4baa      	ldr	r3, [pc, #680]	; (80029a0 <HAL_RCC_OscConfig+0x688>)
 80026f6:	2101      	movs	r1, #1
 80026f8:	430a      	orrs	r2, r1
 80026fa:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026fc:	f7ff fafa 	bl	8001cf4 <HAL_GetTick>
 8002700:	0003      	movs	r3, r0
 8002702:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002704:	e008      	b.n	8002718 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002706:	f7ff faf5 	bl	8001cf4 <HAL_GetTick>
 800270a:	0002      	movs	r2, r0
 800270c:	697b      	ldr	r3, [r7, #20]
 800270e:	1ad3      	subs	r3, r2, r3
 8002710:	2b02      	cmp	r3, #2
 8002712:	d901      	bls.n	8002718 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 8002714:	2303      	movs	r3, #3
 8002716:	e1c8      	b.n	8002aaa <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002718:	4ba1      	ldr	r3, [pc, #644]	; (80029a0 <HAL_RCC_OscConfig+0x688>)
 800271a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800271c:	2202      	movs	r2, #2
 800271e:	4013      	ands	r3, r2
 8002720:	d0f1      	beq.n	8002706 <HAL_RCC_OscConfig+0x3ee>
 8002722:	e018      	b.n	8002756 <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002724:	4b9e      	ldr	r3, [pc, #632]	; (80029a0 <HAL_RCC_OscConfig+0x688>)
 8002726:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002728:	4b9d      	ldr	r3, [pc, #628]	; (80029a0 <HAL_RCC_OscConfig+0x688>)
 800272a:	2101      	movs	r1, #1
 800272c:	438a      	bics	r2, r1
 800272e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002730:	f7ff fae0 	bl	8001cf4 <HAL_GetTick>
 8002734:	0003      	movs	r3, r0
 8002736:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002738:	e008      	b.n	800274c <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800273a:	f7ff fadb 	bl	8001cf4 <HAL_GetTick>
 800273e:	0002      	movs	r2, r0
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	1ad3      	subs	r3, r2, r3
 8002744:	2b02      	cmp	r3, #2
 8002746:	d901      	bls.n	800274c <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8002748:	2303      	movs	r3, #3
 800274a:	e1ae      	b.n	8002aaa <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800274c:	4b94      	ldr	r3, [pc, #592]	; (80029a0 <HAL_RCC_OscConfig+0x688>)
 800274e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002750:	2202      	movs	r2, #2
 8002752:	4013      	ands	r3, r2
 8002754:	d1f1      	bne.n	800273a <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	2204      	movs	r2, #4
 800275c:	4013      	ands	r3, r2
 800275e:	d100      	bne.n	8002762 <HAL_RCC_OscConfig+0x44a>
 8002760:	e0ae      	b.n	80028c0 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002762:	2023      	movs	r0, #35	; 0x23
 8002764:	183b      	adds	r3, r7, r0
 8002766:	2200      	movs	r2, #0
 8002768:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800276a:	4b8d      	ldr	r3, [pc, #564]	; (80029a0 <HAL_RCC_OscConfig+0x688>)
 800276c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800276e:	2380      	movs	r3, #128	; 0x80
 8002770:	055b      	lsls	r3, r3, #21
 8002772:	4013      	ands	r3, r2
 8002774:	d109      	bne.n	800278a <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002776:	4b8a      	ldr	r3, [pc, #552]	; (80029a0 <HAL_RCC_OscConfig+0x688>)
 8002778:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800277a:	4b89      	ldr	r3, [pc, #548]	; (80029a0 <HAL_RCC_OscConfig+0x688>)
 800277c:	2180      	movs	r1, #128	; 0x80
 800277e:	0549      	lsls	r1, r1, #21
 8002780:	430a      	orrs	r2, r1
 8002782:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8002784:	183b      	adds	r3, r7, r0
 8002786:	2201      	movs	r2, #1
 8002788:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800278a:	4b88      	ldr	r3, [pc, #544]	; (80029ac <HAL_RCC_OscConfig+0x694>)
 800278c:	681a      	ldr	r2, [r3, #0]
 800278e:	2380      	movs	r3, #128	; 0x80
 8002790:	005b      	lsls	r3, r3, #1
 8002792:	4013      	ands	r3, r2
 8002794:	d11a      	bne.n	80027cc <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002796:	4b85      	ldr	r3, [pc, #532]	; (80029ac <HAL_RCC_OscConfig+0x694>)
 8002798:	681a      	ldr	r2, [r3, #0]
 800279a:	4b84      	ldr	r3, [pc, #528]	; (80029ac <HAL_RCC_OscConfig+0x694>)
 800279c:	2180      	movs	r1, #128	; 0x80
 800279e:	0049      	lsls	r1, r1, #1
 80027a0:	430a      	orrs	r2, r1
 80027a2:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027a4:	f7ff faa6 	bl	8001cf4 <HAL_GetTick>
 80027a8:	0003      	movs	r3, r0
 80027aa:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027ac:	e008      	b.n	80027c0 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027ae:	f7ff faa1 	bl	8001cf4 <HAL_GetTick>
 80027b2:	0002      	movs	r2, r0
 80027b4:	697b      	ldr	r3, [r7, #20]
 80027b6:	1ad3      	subs	r3, r2, r3
 80027b8:	2b64      	cmp	r3, #100	; 0x64
 80027ba:	d901      	bls.n	80027c0 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 80027bc:	2303      	movs	r3, #3
 80027be:	e174      	b.n	8002aaa <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027c0:	4b7a      	ldr	r3, [pc, #488]	; (80029ac <HAL_RCC_OscConfig+0x694>)
 80027c2:	681a      	ldr	r2, [r3, #0]
 80027c4:	2380      	movs	r3, #128	; 0x80
 80027c6:	005b      	lsls	r3, r3, #1
 80027c8:	4013      	ands	r3, r2
 80027ca:	d0f0      	beq.n	80027ae <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	689a      	ldr	r2, [r3, #8]
 80027d0:	2380      	movs	r3, #128	; 0x80
 80027d2:	005b      	lsls	r3, r3, #1
 80027d4:	429a      	cmp	r2, r3
 80027d6:	d107      	bne.n	80027e8 <HAL_RCC_OscConfig+0x4d0>
 80027d8:	4b71      	ldr	r3, [pc, #452]	; (80029a0 <HAL_RCC_OscConfig+0x688>)
 80027da:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80027dc:	4b70      	ldr	r3, [pc, #448]	; (80029a0 <HAL_RCC_OscConfig+0x688>)
 80027de:	2180      	movs	r1, #128	; 0x80
 80027e0:	0049      	lsls	r1, r1, #1
 80027e2:	430a      	orrs	r2, r1
 80027e4:	651a      	str	r2, [r3, #80]	; 0x50
 80027e6:	e031      	b.n	800284c <HAL_RCC_OscConfig+0x534>
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	689b      	ldr	r3, [r3, #8]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d10c      	bne.n	800280a <HAL_RCC_OscConfig+0x4f2>
 80027f0:	4b6b      	ldr	r3, [pc, #428]	; (80029a0 <HAL_RCC_OscConfig+0x688>)
 80027f2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80027f4:	4b6a      	ldr	r3, [pc, #424]	; (80029a0 <HAL_RCC_OscConfig+0x688>)
 80027f6:	496c      	ldr	r1, [pc, #432]	; (80029a8 <HAL_RCC_OscConfig+0x690>)
 80027f8:	400a      	ands	r2, r1
 80027fa:	651a      	str	r2, [r3, #80]	; 0x50
 80027fc:	4b68      	ldr	r3, [pc, #416]	; (80029a0 <HAL_RCC_OscConfig+0x688>)
 80027fe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002800:	4b67      	ldr	r3, [pc, #412]	; (80029a0 <HAL_RCC_OscConfig+0x688>)
 8002802:	496b      	ldr	r1, [pc, #428]	; (80029b0 <HAL_RCC_OscConfig+0x698>)
 8002804:	400a      	ands	r2, r1
 8002806:	651a      	str	r2, [r3, #80]	; 0x50
 8002808:	e020      	b.n	800284c <HAL_RCC_OscConfig+0x534>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	689a      	ldr	r2, [r3, #8]
 800280e:	23a0      	movs	r3, #160	; 0xa0
 8002810:	00db      	lsls	r3, r3, #3
 8002812:	429a      	cmp	r2, r3
 8002814:	d10e      	bne.n	8002834 <HAL_RCC_OscConfig+0x51c>
 8002816:	4b62      	ldr	r3, [pc, #392]	; (80029a0 <HAL_RCC_OscConfig+0x688>)
 8002818:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800281a:	4b61      	ldr	r3, [pc, #388]	; (80029a0 <HAL_RCC_OscConfig+0x688>)
 800281c:	2180      	movs	r1, #128	; 0x80
 800281e:	00c9      	lsls	r1, r1, #3
 8002820:	430a      	orrs	r2, r1
 8002822:	651a      	str	r2, [r3, #80]	; 0x50
 8002824:	4b5e      	ldr	r3, [pc, #376]	; (80029a0 <HAL_RCC_OscConfig+0x688>)
 8002826:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002828:	4b5d      	ldr	r3, [pc, #372]	; (80029a0 <HAL_RCC_OscConfig+0x688>)
 800282a:	2180      	movs	r1, #128	; 0x80
 800282c:	0049      	lsls	r1, r1, #1
 800282e:	430a      	orrs	r2, r1
 8002830:	651a      	str	r2, [r3, #80]	; 0x50
 8002832:	e00b      	b.n	800284c <HAL_RCC_OscConfig+0x534>
 8002834:	4b5a      	ldr	r3, [pc, #360]	; (80029a0 <HAL_RCC_OscConfig+0x688>)
 8002836:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002838:	4b59      	ldr	r3, [pc, #356]	; (80029a0 <HAL_RCC_OscConfig+0x688>)
 800283a:	495b      	ldr	r1, [pc, #364]	; (80029a8 <HAL_RCC_OscConfig+0x690>)
 800283c:	400a      	ands	r2, r1
 800283e:	651a      	str	r2, [r3, #80]	; 0x50
 8002840:	4b57      	ldr	r3, [pc, #348]	; (80029a0 <HAL_RCC_OscConfig+0x688>)
 8002842:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002844:	4b56      	ldr	r3, [pc, #344]	; (80029a0 <HAL_RCC_OscConfig+0x688>)
 8002846:	495a      	ldr	r1, [pc, #360]	; (80029b0 <HAL_RCC_OscConfig+0x698>)
 8002848:	400a      	ands	r2, r1
 800284a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	689b      	ldr	r3, [r3, #8]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d015      	beq.n	8002880 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002854:	f7ff fa4e 	bl	8001cf4 <HAL_GetTick>
 8002858:	0003      	movs	r3, r0
 800285a:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800285c:	e009      	b.n	8002872 <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800285e:	f7ff fa49 	bl	8001cf4 <HAL_GetTick>
 8002862:	0002      	movs	r2, r0
 8002864:	697b      	ldr	r3, [r7, #20]
 8002866:	1ad3      	subs	r3, r2, r3
 8002868:	4a52      	ldr	r2, [pc, #328]	; (80029b4 <HAL_RCC_OscConfig+0x69c>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d901      	bls.n	8002872 <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 800286e:	2303      	movs	r3, #3
 8002870:	e11b      	b.n	8002aaa <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002872:	4b4b      	ldr	r3, [pc, #300]	; (80029a0 <HAL_RCC_OscConfig+0x688>)
 8002874:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002876:	2380      	movs	r3, #128	; 0x80
 8002878:	009b      	lsls	r3, r3, #2
 800287a:	4013      	ands	r3, r2
 800287c:	d0ef      	beq.n	800285e <HAL_RCC_OscConfig+0x546>
 800287e:	e014      	b.n	80028aa <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002880:	f7ff fa38 	bl	8001cf4 <HAL_GetTick>
 8002884:	0003      	movs	r3, r0
 8002886:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002888:	e009      	b.n	800289e <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800288a:	f7ff fa33 	bl	8001cf4 <HAL_GetTick>
 800288e:	0002      	movs	r2, r0
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	1ad3      	subs	r3, r2, r3
 8002894:	4a47      	ldr	r2, [pc, #284]	; (80029b4 <HAL_RCC_OscConfig+0x69c>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d901      	bls.n	800289e <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 800289a:	2303      	movs	r3, #3
 800289c:	e105      	b.n	8002aaa <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800289e:	4b40      	ldr	r3, [pc, #256]	; (80029a0 <HAL_RCC_OscConfig+0x688>)
 80028a0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80028a2:	2380      	movs	r3, #128	; 0x80
 80028a4:	009b      	lsls	r3, r3, #2
 80028a6:	4013      	ands	r3, r2
 80028a8:	d1ef      	bne.n	800288a <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80028aa:	2323      	movs	r3, #35	; 0x23
 80028ac:	18fb      	adds	r3, r7, r3
 80028ae:	781b      	ldrb	r3, [r3, #0]
 80028b0:	2b01      	cmp	r3, #1
 80028b2:	d105      	bne.n	80028c0 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028b4:	4b3a      	ldr	r3, [pc, #232]	; (80029a0 <HAL_RCC_OscConfig+0x688>)
 80028b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80028b8:	4b39      	ldr	r3, [pc, #228]	; (80029a0 <HAL_RCC_OscConfig+0x688>)
 80028ba:	493f      	ldr	r1, [pc, #252]	; (80029b8 <HAL_RCC_OscConfig+0x6a0>)
 80028bc:	400a      	ands	r2, r1
 80028be:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	2220      	movs	r2, #32
 80028c6:	4013      	ands	r3, r2
 80028c8:	d049      	beq.n	800295e <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	699b      	ldr	r3, [r3, #24]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d026      	beq.n	8002920 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80028d2:	4b33      	ldr	r3, [pc, #204]	; (80029a0 <HAL_RCC_OscConfig+0x688>)
 80028d4:	689a      	ldr	r2, [r3, #8]
 80028d6:	4b32      	ldr	r3, [pc, #200]	; (80029a0 <HAL_RCC_OscConfig+0x688>)
 80028d8:	2101      	movs	r1, #1
 80028da:	430a      	orrs	r2, r1
 80028dc:	609a      	str	r2, [r3, #8]
 80028de:	4b30      	ldr	r3, [pc, #192]	; (80029a0 <HAL_RCC_OscConfig+0x688>)
 80028e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80028e2:	4b2f      	ldr	r3, [pc, #188]	; (80029a0 <HAL_RCC_OscConfig+0x688>)
 80028e4:	2101      	movs	r1, #1
 80028e6:	430a      	orrs	r2, r1
 80028e8:	635a      	str	r2, [r3, #52]	; 0x34
 80028ea:	4b34      	ldr	r3, [pc, #208]	; (80029bc <HAL_RCC_OscConfig+0x6a4>)
 80028ec:	6a1a      	ldr	r2, [r3, #32]
 80028ee:	4b33      	ldr	r3, [pc, #204]	; (80029bc <HAL_RCC_OscConfig+0x6a4>)
 80028f0:	2180      	movs	r1, #128	; 0x80
 80028f2:	0189      	lsls	r1, r1, #6
 80028f4:	430a      	orrs	r2, r1
 80028f6:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028f8:	f7ff f9fc 	bl	8001cf4 <HAL_GetTick>
 80028fc:	0003      	movs	r3, r0
 80028fe:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002900:	e008      	b.n	8002914 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002902:	f7ff f9f7 	bl	8001cf4 <HAL_GetTick>
 8002906:	0002      	movs	r2, r0
 8002908:	697b      	ldr	r3, [r7, #20]
 800290a:	1ad3      	subs	r3, r2, r3
 800290c:	2b02      	cmp	r3, #2
 800290e:	d901      	bls.n	8002914 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 8002910:	2303      	movs	r3, #3
 8002912:	e0ca      	b.n	8002aaa <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002914:	4b22      	ldr	r3, [pc, #136]	; (80029a0 <HAL_RCC_OscConfig+0x688>)
 8002916:	689b      	ldr	r3, [r3, #8]
 8002918:	2202      	movs	r2, #2
 800291a:	4013      	ands	r3, r2
 800291c:	d0f1      	beq.n	8002902 <HAL_RCC_OscConfig+0x5ea>
 800291e:	e01e      	b.n	800295e <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8002920:	4b1f      	ldr	r3, [pc, #124]	; (80029a0 <HAL_RCC_OscConfig+0x688>)
 8002922:	689a      	ldr	r2, [r3, #8]
 8002924:	4b1e      	ldr	r3, [pc, #120]	; (80029a0 <HAL_RCC_OscConfig+0x688>)
 8002926:	2101      	movs	r1, #1
 8002928:	438a      	bics	r2, r1
 800292a:	609a      	str	r2, [r3, #8]
 800292c:	4b23      	ldr	r3, [pc, #140]	; (80029bc <HAL_RCC_OscConfig+0x6a4>)
 800292e:	6a1a      	ldr	r2, [r3, #32]
 8002930:	4b22      	ldr	r3, [pc, #136]	; (80029bc <HAL_RCC_OscConfig+0x6a4>)
 8002932:	4923      	ldr	r1, [pc, #140]	; (80029c0 <HAL_RCC_OscConfig+0x6a8>)
 8002934:	400a      	ands	r2, r1
 8002936:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002938:	f7ff f9dc 	bl	8001cf4 <HAL_GetTick>
 800293c:	0003      	movs	r3, r0
 800293e:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002940:	e008      	b.n	8002954 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002942:	f7ff f9d7 	bl	8001cf4 <HAL_GetTick>
 8002946:	0002      	movs	r2, r0
 8002948:	697b      	ldr	r3, [r7, #20]
 800294a:	1ad3      	subs	r3, r2, r3
 800294c:	2b02      	cmp	r3, #2
 800294e:	d901      	bls.n	8002954 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8002950:	2303      	movs	r3, #3
 8002952:	e0aa      	b.n	8002aaa <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002954:	4b12      	ldr	r3, [pc, #72]	; (80029a0 <HAL_RCC_OscConfig+0x688>)
 8002956:	689b      	ldr	r3, [r3, #8]
 8002958:	2202      	movs	r2, #2
 800295a:	4013      	ands	r3, r2
 800295c:	d1f1      	bne.n	8002942 <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002962:	2b00      	cmp	r3, #0
 8002964:	d100      	bne.n	8002968 <HAL_RCC_OscConfig+0x650>
 8002966:	e09f      	b.n	8002aa8 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002968:	69fb      	ldr	r3, [r7, #28]
 800296a:	2b0c      	cmp	r3, #12
 800296c:	d100      	bne.n	8002970 <HAL_RCC_OscConfig+0x658>
 800296e:	e078      	b.n	8002a62 <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002974:	2b02      	cmp	r3, #2
 8002976:	d159      	bne.n	8002a2c <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002978:	4b09      	ldr	r3, [pc, #36]	; (80029a0 <HAL_RCC_OscConfig+0x688>)
 800297a:	681a      	ldr	r2, [r3, #0]
 800297c:	4b08      	ldr	r3, [pc, #32]	; (80029a0 <HAL_RCC_OscConfig+0x688>)
 800297e:	4911      	ldr	r1, [pc, #68]	; (80029c4 <HAL_RCC_OscConfig+0x6ac>)
 8002980:	400a      	ands	r2, r1
 8002982:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002984:	f7ff f9b6 	bl	8001cf4 <HAL_GetTick>
 8002988:	0003      	movs	r3, r0
 800298a:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800298c:	e01c      	b.n	80029c8 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800298e:	f7ff f9b1 	bl	8001cf4 <HAL_GetTick>
 8002992:	0002      	movs	r2, r0
 8002994:	697b      	ldr	r3, [r7, #20]
 8002996:	1ad3      	subs	r3, r2, r3
 8002998:	2b02      	cmp	r3, #2
 800299a:	d915      	bls.n	80029c8 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 800299c:	2303      	movs	r3, #3
 800299e:	e084      	b.n	8002aaa <HAL_RCC_OscConfig+0x792>
 80029a0:	40021000 	.word	0x40021000
 80029a4:	ffff1fff 	.word	0xffff1fff
 80029a8:	fffffeff 	.word	0xfffffeff
 80029ac:	40007000 	.word	0x40007000
 80029b0:	fffffbff 	.word	0xfffffbff
 80029b4:	00001388 	.word	0x00001388
 80029b8:	efffffff 	.word	0xefffffff
 80029bc:	40010000 	.word	0x40010000
 80029c0:	ffffdfff 	.word	0xffffdfff
 80029c4:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80029c8:	4b3a      	ldr	r3, [pc, #232]	; (8002ab4 <HAL_RCC_OscConfig+0x79c>)
 80029ca:	681a      	ldr	r2, [r3, #0]
 80029cc:	2380      	movs	r3, #128	; 0x80
 80029ce:	049b      	lsls	r3, r3, #18
 80029d0:	4013      	ands	r3, r2
 80029d2:	d1dc      	bne.n	800298e <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80029d4:	4b37      	ldr	r3, [pc, #220]	; (8002ab4 <HAL_RCC_OscConfig+0x79c>)
 80029d6:	68db      	ldr	r3, [r3, #12]
 80029d8:	4a37      	ldr	r2, [pc, #220]	; (8002ab8 <HAL_RCC_OscConfig+0x7a0>)
 80029da:	4013      	ands	r3, r2
 80029dc:	0019      	movs	r1, r3
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029e6:	431a      	orrs	r2, r3
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029ec:	431a      	orrs	r2, r3
 80029ee:	4b31      	ldr	r3, [pc, #196]	; (8002ab4 <HAL_RCC_OscConfig+0x79c>)
 80029f0:	430a      	orrs	r2, r1
 80029f2:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80029f4:	4b2f      	ldr	r3, [pc, #188]	; (8002ab4 <HAL_RCC_OscConfig+0x79c>)
 80029f6:	681a      	ldr	r2, [r3, #0]
 80029f8:	4b2e      	ldr	r3, [pc, #184]	; (8002ab4 <HAL_RCC_OscConfig+0x79c>)
 80029fa:	2180      	movs	r1, #128	; 0x80
 80029fc:	0449      	lsls	r1, r1, #17
 80029fe:	430a      	orrs	r2, r1
 8002a00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a02:	f7ff f977 	bl	8001cf4 <HAL_GetTick>
 8002a06:	0003      	movs	r3, r0
 8002a08:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002a0a:	e008      	b.n	8002a1e <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a0c:	f7ff f972 	bl	8001cf4 <HAL_GetTick>
 8002a10:	0002      	movs	r2, r0
 8002a12:	697b      	ldr	r3, [r7, #20]
 8002a14:	1ad3      	subs	r3, r2, r3
 8002a16:	2b02      	cmp	r3, #2
 8002a18:	d901      	bls.n	8002a1e <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 8002a1a:	2303      	movs	r3, #3
 8002a1c:	e045      	b.n	8002aaa <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002a1e:	4b25      	ldr	r3, [pc, #148]	; (8002ab4 <HAL_RCC_OscConfig+0x79c>)
 8002a20:	681a      	ldr	r2, [r3, #0]
 8002a22:	2380      	movs	r3, #128	; 0x80
 8002a24:	049b      	lsls	r3, r3, #18
 8002a26:	4013      	ands	r3, r2
 8002a28:	d0f0      	beq.n	8002a0c <HAL_RCC_OscConfig+0x6f4>
 8002a2a:	e03d      	b.n	8002aa8 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a2c:	4b21      	ldr	r3, [pc, #132]	; (8002ab4 <HAL_RCC_OscConfig+0x79c>)
 8002a2e:	681a      	ldr	r2, [r3, #0]
 8002a30:	4b20      	ldr	r3, [pc, #128]	; (8002ab4 <HAL_RCC_OscConfig+0x79c>)
 8002a32:	4922      	ldr	r1, [pc, #136]	; (8002abc <HAL_RCC_OscConfig+0x7a4>)
 8002a34:	400a      	ands	r2, r1
 8002a36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a38:	f7ff f95c 	bl	8001cf4 <HAL_GetTick>
 8002a3c:	0003      	movs	r3, r0
 8002a3e:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002a40:	e008      	b.n	8002a54 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a42:	f7ff f957 	bl	8001cf4 <HAL_GetTick>
 8002a46:	0002      	movs	r2, r0
 8002a48:	697b      	ldr	r3, [r7, #20]
 8002a4a:	1ad3      	subs	r3, r2, r3
 8002a4c:	2b02      	cmp	r3, #2
 8002a4e:	d901      	bls.n	8002a54 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 8002a50:	2303      	movs	r3, #3
 8002a52:	e02a      	b.n	8002aaa <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002a54:	4b17      	ldr	r3, [pc, #92]	; (8002ab4 <HAL_RCC_OscConfig+0x79c>)
 8002a56:	681a      	ldr	r2, [r3, #0]
 8002a58:	2380      	movs	r3, #128	; 0x80
 8002a5a:	049b      	lsls	r3, r3, #18
 8002a5c:	4013      	ands	r3, r2
 8002a5e:	d1f0      	bne.n	8002a42 <HAL_RCC_OscConfig+0x72a>
 8002a60:	e022      	b.n	8002aa8 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a66:	2b01      	cmp	r3, #1
 8002a68:	d101      	bne.n	8002a6e <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	e01d      	b.n	8002aaa <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002a6e:	4b11      	ldr	r3, [pc, #68]	; (8002ab4 <HAL_RCC_OscConfig+0x79c>)
 8002a70:	68db      	ldr	r3, [r3, #12]
 8002a72:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a74:	69ba      	ldr	r2, [r7, #24]
 8002a76:	2380      	movs	r3, #128	; 0x80
 8002a78:	025b      	lsls	r3, r3, #9
 8002a7a:	401a      	ands	r2, r3
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a80:	429a      	cmp	r2, r3
 8002a82:	d10f      	bne.n	8002aa4 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002a84:	69ba      	ldr	r2, [r7, #24]
 8002a86:	23f0      	movs	r3, #240	; 0xf0
 8002a88:	039b      	lsls	r3, r3, #14
 8002a8a:	401a      	ands	r2, r3
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a90:	429a      	cmp	r2, r3
 8002a92:	d107      	bne.n	8002aa4 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8002a94:	69ba      	ldr	r2, [r7, #24]
 8002a96:	23c0      	movs	r3, #192	; 0xc0
 8002a98:	041b      	lsls	r3, r3, #16
 8002a9a:	401a      	ands	r2, r3
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002aa0:	429a      	cmp	r2, r3
 8002aa2:	d001      	beq.n	8002aa8 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	e000      	b.n	8002aaa <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 8002aa8:	2300      	movs	r3, #0
}
 8002aaa:	0018      	movs	r0, r3
 8002aac:	46bd      	mov	sp, r7
 8002aae:	b00a      	add	sp, #40	; 0x28
 8002ab0:	bdb0      	pop	{r4, r5, r7, pc}
 8002ab2:	46c0      	nop			; (mov r8, r8)
 8002ab4:	40021000 	.word	0x40021000
 8002ab8:	ff02ffff 	.word	0xff02ffff
 8002abc:	feffffff 	.word	0xfeffffff

08002ac0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ac0:	b5b0      	push	{r4, r5, r7, lr}
 8002ac2:	b084      	sub	sp, #16
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
 8002ac8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d101      	bne.n	8002ad4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	e128      	b.n	8002d26 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ad4:	4b96      	ldr	r3, [pc, #600]	; (8002d30 <HAL_RCC_ClockConfig+0x270>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	2201      	movs	r2, #1
 8002ada:	4013      	ands	r3, r2
 8002adc:	683a      	ldr	r2, [r7, #0]
 8002ade:	429a      	cmp	r2, r3
 8002ae0:	d91e      	bls.n	8002b20 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ae2:	4b93      	ldr	r3, [pc, #588]	; (8002d30 <HAL_RCC_ClockConfig+0x270>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	4393      	bics	r3, r2
 8002aea:	0019      	movs	r1, r3
 8002aec:	4b90      	ldr	r3, [pc, #576]	; (8002d30 <HAL_RCC_ClockConfig+0x270>)
 8002aee:	683a      	ldr	r2, [r7, #0]
 8002af0:	430a      	orrs	r2, r1
 8002af2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002af4:	f7ff f8fe 	bl	8001cf4 <HAL_GetTick>
 8002af8:	0003      	movs	r3, r0
 8002afa:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002afc:	e009      	b.n	8002b12 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002afe:	f7ff f8f9 	bl	8001cf4 <HAL_GetTick>
 8002b02:	0002      	movs	r2, r0
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	1ad3      	subs	r3, r2, r3
 8002b08:	4a8a      	ldr	r2, [pc, #552]	; (8002d34 <HAL_RCC_ClockConfig+0x274>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d901      	bls.n	8002b12 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002b0e:	2303      	movs	r3, #3
 8002b10:	e109      	b.n	8002d26 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b12:	4b87      	ldr	r3, [pc, #540]	; (8002d30 <HAL_RCC_ClockConfig+0x270>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	2201      	movs	r2, #1
 8002b18:	4013      	ands	r3, r2
 8002b1a:	683a      	ldr	r2, [r7, #0]
 8002b1c:	429a      	cmp	r2, r3
 8002b1e:	d1ee      	bne.n	8002afe <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	2202      	movs	r2, #2
 8002b26:	4013      	ands	r3, r2
 8002b28:	d009      	beq.n	8002b3e <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b2a:	4b83      	ldr	r3, [pc, #524]	; (8002d38 <HAL_RCC_ClockConfig+0x278>)
 8002b2c:	68db      	ldr	r3, [r3, #12]
 8002b2e:	22f0      	movs	r2, #240	; 0xf0
 8002b30:	4393      	bics	r3, r2
 8002b32:	0019      	movs	r1, r3
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	689a      	ldr	r2, [r3, #8]
 8002b38:	4b7f      	ldr	r3, [pc, #508]	; (8002d38 <HAL_RCC_ClockConfig+0x278>)
 8002b3a:	430a      	orrs	r2, r1
 8002b3c:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	2201      	movs	r2, #1
 8002b44:	4013      	ands	r3, r2
 8002b46:	d100      	bne.n	8002b4a <HAL_RCC_ClockConfig+0x8a>
 8002b48:	e089      	b.n	8002c5e <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	2b02      	cmp	r3, #2
 8002b50:	d107      	bne.n	8002b62 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002b52:	4b79      	ldr	r3, [pc, #484]	; (8002d38 <HAL_RCC_ClockConfig+0x278>)
 8002b54:	681a      	ldr	r2, [r3, #0]
 8002b56:	2380      	movs	r3, #128	; 0x80
 8002b58:	029b      	lsls	r3, r3, #10
 8002b5a:	4013      	ands	r3, r2
 8002b5c:	d120      	bne.n	8002ba0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e0e1      	b.n	8002d26 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	2b03      	cmp	r3, #3
 8002b68:	d107      	bne.n	8002b7a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002b6a:	4b73      	ldr	r3, [pc, #460]	; (8002d38 <HAL_RCC_ClockConfig+0x278>)
 8002b6c:	681a      	ldr	r2, [r3, #0]
 8002b6e:	2380      	movs	r3, #128	; 0x80
 8002b70:	049b      	lsls	r3, r3, #18
 8002b72:	4013      	ands	r3, r2
 8002b74:	d114      	bne.n	8002ba0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002b76:	2301      	movs	r3, #1
 8002b78:	e0d5      	b.n	8002d26 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	2b01      	cmp	r3, #1
 8002b80:	d106      	bne.n	8002b90 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002b82:	4b6d      	ldr	r3, [pc, #436]	; (8002d38 <HAL_RCC_ClockConfig+0x278>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	2204      	movs	r2, #4
 8002b88:	4013      	ands	r3, r2
 8002b8a:	d109      	bne.n	8002ba0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	e0ca      	b.n	8002d26 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002b90:	4b69      	ldr	r3, [pc, #420]	; (8002d38 <HAL_RCC_ClockConfig+0x278>)
 8002b92:	681a      	ldr	r2, [r3, #0]
 8002b94:	2380      	movs	r3, #128	; 0x80
 8002b96:	009b      	lsls	r3, r3, #2
 8002b98:	4013      	ands	r3, r2
 8002b9a:	d101      	bne.n	8002ba0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	e0c2      	b.n	8002d26 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ba0:	4b65      	ldr	r3, [pc, #404]	; (8002d38 <HAL_RCC_ClockConfig+0x278>)
 8002ba2:	68db      	ldr	r3, [r3, #12]
 8002ba4:	2203      	movs	r2, #3
 8002ba6:	4393      	bics	r3, r2
 8002ba8:	0019      	movs	r1, r3
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	685a      	ldr	r2, [r3, #4]
 8002bae:	4b62      	ldr	r3, [pc, #392]	; (8002d38 <HAL_RCC_ClockConfig+0x278>)
 8002bb0:	430a      	orrs	r2, r1
 8002bb2:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002bb4:	f7ff f89e 	bl	8001cf4 <HAL_GetTick>
 8002bb8:	0003      	movs	r3, r0
 8002bba:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	2b02      	cmp	r3, #2
 8002bc2:	d111      	bne.n	8002be8 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002bc4:	e009      	b.n	8002bda <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bc6:	f7ff f895 	bl	8001cf4 <HAL_GetTick>
 8002bca:	0002      	movs	r2, r0
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	1ad3      	subs	r3, r2, r3
 8002bd0:	4a58      	ldr	r2, [pc, #352]	; (8002d34 <HAL_RCC_ClockConfig+0x274>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d901      	bls.n	8002bda <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8002bd6:	2303      	movs	r3, #3
 8002bd8:	e0a5      	b.n	8002d26 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002bda:	4b57      	ldr	r3, [pc, #348]	; (8002d38 <HAL_RCC_ClockConfig+0x278>)
 8002bdc:	68db      	ldr	r3, [r3, #12]
 8002bde:	220c      	movs	r2, #12
 8002be0:	4013      	ands	r3, r2
 8002be2:	2b08      	cmp	r3, #8
 8002be4:	d1ef      	bne.n	8002bc6 <HAL_RCC_ClockConfig+0x106>
 8002be6:	e03a      	b.n	8002c5e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	2b03      	cmp	r3, #3
 8002bee:	d111      	bne.n	8002c14 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002bf0:	e009      	b.n	8002c06 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bf2:	f7ff f87f 	bl	8001cf4 <HAL_GetTick>
 8002bf6:	0002      	movs	r2, r0
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	1ad3      	subs	r3, r2, r3
 8002bfc:	4a4d      	ldr	r2, [pc, #308]	; (8002d34 <HAL_RCC_ClockConfig+0x274>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d901      	bls.n	8002c06 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8002c02:	2303      	movs	r3, #3
 8002c04:	e08f      	b.n	8002d26 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c06:	4b4c      	ldr	r3, [pc, #304]	; (8002d38 <HAL_RCC_ClockConfig+0x278>)
 8002c08:	68db      	ldr	r3, [r3, #12]
 8002c0a:	220c      	movs	r2, #12
 8002c0c:	4013      	ands	r3, r2
 8002c0e:	2b0c      	cmp	r3, #12
 8002c10:	d1ef      	bne.n	8002bf2 <HAL_RCC_ClockConfig+0x132>
 8002c12:	e024      	b.n	8002c5e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	2b01      	cmp	r3, #1
 8002c1a:	d11b      	bne.n	8002c54 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002c1c:	e009      	b.n	8002c32 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c1e:	f7ff f869 	bl	8001cf4 <HAL_GetTick>
 8002c22:	0002      	movs	r2, r0
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	1ad3      	subs	r3, r2, r3
 8002c28:	4a42      	ldr	r2, [pc, #264]	; (8002d34 <HAL_RCC_ClockConfig+0x274>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d901      	bls.n	8002c32 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8002c2e:	2303      	movs	r3, #3
 8002c30:	e079      	b.n	8002d26 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002c32:	4b41      	ldr	r3, [pc, #260]	; (8002d38 <HAL_RCC_ClockConfig+0x278>)
 8002c34:	68db      	ldr	r3, [r3, #12]
 8002c36:	220c      	movs	r2, #12
 8002c38:	4013      	ands	r3, r2
 8002c3a:	2b04      	cmp	r3, #4
 8002c3c:	d1ef      	bne.n	8002c1e <HAL_RCC_ClockConfig+0x15e>
 8002c3e:	e00e      	b.n	8002c5e <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c40:	f7ff f858 	bl	8001cf4 <HAL_GetTick>
 8002c44:	0002      	movs	r2, r0
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	1ad3      	subs	r3, r2, r3
 8002c4a:	4a3a      	ldr	r2, [pc, #232]	; (8002d34 <HAL_RCC_ClockConfig+0x274>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d901      	bls.n	8002c54 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8002c50:	2303      	movs	r3, #3
 8002c52:	e068      	b.n	8002d26 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002c54:	4b38      	ldr	r3, [pc, #224]	; (8002d38 <HAL_RCC_ClockConfig+0x278>)
 8002c56:	68db      	ldr	r3, [r3, #12]
 8002c58:	220c      	movs	r2, #12
 8002c5a:	4013      	ands	r3, r2
 8002c5c:	d1f0      	bne.n	8002c40 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c5e:	4b34      	ldr	r3, [pc, #208]	; (8002d30 <HAL_RCC_ClockConfig+0x270>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	2201      	movs	r2, #1
 8002c64:	4013      	ands	r3, r2
 8002c66:	683a      	ldr	r2, [r7, #0]
 8002c68:	429a      	cmp	r2, r3
 8002c6a:	d21e      	bcs.n	8002caa <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c6c:	4b30      	ldr	r3, [pc, #192]	; (8002d30 <HAL_RCC_ClockConfig+0x270>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	2201      	movs	r2, #1
 8002c72:	4393      	bics	r3, r2
 8002c74:	0019      	movs	r1, r3
 8002c76:	4b2e      	ldr	r3, [pc, #184]	; (8002d30 <HAL_RCC_ClockConfig+0x270>)
 8002c78:	683a      	ldr	r2, [r7, #0]
 8002c7a:	430a      	orrs	r2, r1
 8002c7c:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002c7e:	f7ff f839 	bl	8001cf4 <HAL_GetTick>
 8002c82:	0003      	movs	r3, r0
 8002c84:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c86:	e009      	b.n	8002c9c <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c88:	f7ff f834 	bl	8001cf4 <HAL_GetTick>
 8002c8c:	0002      	movs	r2, r0
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	1ad3      	subs	r3, r2, r3
 8002c92:	4a28      	ldr	r2, [pc, #160]	; (8002d34 <HAL_RCC_ClockConfig+0x274>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d901      	bls.n	8002c9c <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8002c98:	2303      	movs	r3, #3
 8002c9a:	e044      	b.n	8002d26 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c9c:	4b24      	ldr	r3, [pc, #144]	; (8002d30 <HAL_RCC_ClockConfig+0x270>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	2201      	movs	r2, #1
 8002ca2:	4013      	ands	r3, r2
 8002ca4:	683a      	ldr	r2, [r7, #0]
 8002ca6:	429a      	cmp	r2, r3
 8002ca8:	d1ee      	bne.n	8002c88 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	2204      	movs	r2, #4
 8002cb0:	4013      	ands	r3, r2
 8002cb2:	d009      	beq.n	8002cc8 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002cb4:	4b20      	ldr	r3, [pc, #128]	; (8002d38 <HAL_RCC_ClockConfig+0x278>)
 8002cb6:	68db      	ldr	r3, [r3, #12]
 8002cb8:	4a20      	ldr	r2, [pc, #128]	; (8002d3c <HAL_RCC_ClockConfig+0x27c>)
 8002cba:	4013      	ands	r3, r2
 8002cbc:	0019      	movs	r1, r3
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	68da      	ldr	r2, [r3, #12]
 8002cc2:	4b1d      	ldr	r3, [pc, #116]	; (8002d38 <HAL_RCC_ClockConfig+0x278>)
 8002cc4:	430a      	orrs	r2, r1
 8002cc6:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	2208      	movs	r2, #8
 8002cce:	4013      	ands	r3, r2
 8002cd0:	d00a      	beq.n	8002ce8 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002cd2:	4b19      	ldr	r3, [pc, #100]	; (8002d38 <HAL_RCC_ClockConfig+0x278>)
 8002cd4:	68db      	ldr	r3, [r3, #12]
 8002cd6:	4a1a      	ldr	r2, [pc, #104]	; (8002d40 <HAL_RCC_ClockConfig+0x280>)
 8002cd8:	4013      	ands	r3, r2
 8002cda:	0019      	movs	r1, r3
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	691b      	ldr	r3, [r3, #16]
 8002ce0:	00da      	lsls	r2, r3, #3
 8002ce2:	4b15      	ldr	r3, [pc, #84]	; (8002d38 <HAL_RCC_ClockConfig+0x278>)
 8002ce4:	430a      	orrs	r2, r1
 8002ce6:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002ce8:	f000 f832 	bl	8002d50 <HAL_RCC_GetSysClockFreq>
 8002cec:	0001      	movs	r1, r0
 8002cee:	4b12      	ldr	r3, [pc, #72]	; (8002d38 <HAL_RCC_ClockConfig+0x278>)
 8002cf0:	68db      	ldr	r3, [r3, #12]
 8002cf2:	091b      	lsrs	r3, r3, #4
 8002cf4:	220f      	movs	r2, #15
 8002cf6:	4013      	ands	r3, r2
 8002cf8:	4a12      	ldr	r2, [pc, #72]	; (8002d44 <HAL_RCC_ClockConfig+0x284>)
 8002cfa:	5cd3      	ldrb	r3, [r2, r3]
 8002cfc:	000a      	movs	r2, r1
 8002cfe:	40da      	lsrs	r2, r3
 8002d00:	4b11      	ldr	r3, [pc, #68]	; (8002d48 <HAL_RCC_ClockConfig+0x288>)
 8002d02:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002d04:	4b11      	ldr	r3, [pc, #68]	; (8002d4c <HAL_RCC_ClockConfig+0x28c>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	250b      	movs	r5, #11
 8002d0a:	197c      	adds	r4, r7, r5
 8002d0c:	0018      	movs	r0, r3
 8002d0e:	f7fe ffab 	bl	8001c68 <HAL_InitTick>
 8002d12:	0003      	movs	r3, r0
 8002d14:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8002d16:	197b      	adds	r3, r7, r5
 8002d18:	781b      	ldrb	r3, [r3, #0]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d002      	beq.n	8002d24 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8002d1e:	197b      	adds	r3, r7, r5
 8002d20:	781b      	ldrb	r3, [r3, #0]
 8002d22:	e000      	b.n	8002d26 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8002d24:	2300      	movs	r3, #0
}
 8002d26:	0018      	movs	r0, r3
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	b004      	add	sp, #16
 8002d2c:	bdb0      	pop	{r4, r5, r7, pc}
 8002d2e:	46c0      	nop			; (mov r8, r8)
 8002d30:	40022000 	.word	0x40022000
 8002d34:	00001388 	.word	0x00001388
 8002d38:	40021000 	.word	0x40021000
 8002d3c:	fffff8ff 	.word	0xfffff8ff
 8002d40:	ffffc7ff 	.word	0xffffc7ff
 8002d44:	08005dd4 	.word	0x08005dd4
 8002d48:	20000104 	.word	0x20000104
 8002d4c:	20000108 	.word	0x20000108

08002d50 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d50:	b5b0      	push	{r4, r5, r7, lr}
 8002d52:	b08e      	sub	sp, #56	; 0x38
 8002d54:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8002d56:	4b4c      	ldr	r3, [pc, #304]	; (8002e88 <HAL_RCC_GetSysClockFreq+0x138>)
 8002d58:	68db      	ldr	r3, [r3, #12]
 8002d5a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002d5c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d5e:	230c      	movs	r3, #12
 8002d60:	4013      	ands	r3, r2
 8002d62:	2b0c      	cmp	r3, #12
 8002d64:	d014      	beq.n	8002d90 <HAL_RCC_GetSysClockFreq+0x40>
 8002d66:	d900      	bls.n	8002d6a <HAL_RCC_GetSysClockFreq+0x1a>
 8002d68:	e07b      	b.n	8002e62 <HAL_RCC_GetSysClockFreq+0x112>
 8002d6a:	2b04      	cmp	r3, #4
 8002d6c:	d002      	beq.n	8002d74 <HAL_RCC_GetSysClockFreq+0x24>
 8002d6e:	2b08      	cmp	r3, #8
 8002d70:	d00b      	beq.n	8002d8a <HAL_RCC_GetSysClockFreq+0x3a>
 8002d72:	e076      	b.n	8002e62 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002d74:	4b44      	ldr	r3, [pc, #272]	; (8002e88 <HAL_RCC_GetSysClockFreq+0x138>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	2210      	movs	r2, #16
 8002d7a:	4013      	ands	r3, r2
 8002d7c:	d002      	beq.n	8002d84 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8002d7e:	4b43      	ldr	r3, [pc, #268]	; (8002e8c <HAL_RCC_GetSysClockFreq+0x13c>)
 8002d80:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8002d82:	e07c      	b.n	8002e7e <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8002d84:	4b42      	ldr	r3, [pc, #264]	; (8002e90 <HAL_RCC_GetSysClockFreq+0x140>)
 8002d86:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002d88:	e079      	b.n	8002e7e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002d8a:	4b42      	ldr	r3, [pc, #264]	; (8002e94 <HAL_RCC_GetSysClockFreq+0x144>)
 8002d8c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002d8e:	e076      	b.n	8002e7e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002d90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d92:	0c9a      	lsrs	r2, r3, #18
 8002d94:	230f      	movs	r3, #15
 8002d96:	401a      	ands	r2, r3
 8002d98:	4b3f      	ldr	r3, [pc, #252]	; (8002e98 <HAL_RCC_GetSysClockFreq+0x148>)
 8002d9a:	5c9b      	ldrb	r3, [r3, r2]
 8002d9c:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002d9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002da0:	0d9a      	lsrs	r2, r3, #22
 8002da2:	2303      	movs	r3, #3
 8002da4:	4013      	ands	r3, r2
 8002da6:	3301      	adds	r3, #1
 8002da8:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002daa:	4b37      	ldr	r3, [pc, #220]	; (8002e88 <HAL_RCC_GetSysClockFreq+0x138>)
 8002dac:	68da      	ldr	r2, [r3, #12]
 8002dae:	2380      	movs	r3, #128	; 0x80
 8002db0:	025b      	lsls	r3, r3, #9
 8002db2:	4013      	ands	r3, r2
 8002db4:	d01a      	beq.n	8002dec <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002db6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002db8:	61bb      	str	r3, [r7, #24]
 8002dba:	2300      	movs	r3, #0
 8002dbc:	61fb      	str	r3, [r7, #28]
 8002dbe:	4a35      	ldr	r2, [pc, #212]	; (8002e94 <HAL_RCC_GetSysClockFreq+0x144>)
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	69b8      	ldr	r0, [r7, #24]
 8002dc4:	69f9      	ldr	r1, [r7, #28]
 8002dc6:	f7fd fb47 	bl	8000458 <__aeabi_lmul>
 8002dca:	0002      	movs	r2, r0
 8002dcc:	000b      	movs	r3, r1
 8002dce:	0010      	movs	r0, r2
 8002dd0:	0019      	movs	r1, r3
 8002dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd4:	613b      	str	r3, [r7, #16]
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	617b      	str	r3, [r7, #20]
 8002dda:	693a      	ldr	r2, [r7, #16]
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	f7fd fb1b 	bl	8000418 <__aeabi_uldivmod>
 8002de2:	0002      	movs	r2, r0
 8002de4:	000b      	movs	r3, r1
 8002de6:	0013      	movs	r3, r2
 8002de8:	637b      	str	r3, [r7, #52]	; 0x34
 8002dea:	e037      	b.n	8002e5c <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002dec:	4b26      	ldr	r3, [pc, #152]	; (8002e88 <HAL_RCC_GetSysClockFreq+0x138>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	2210      	movs	r2, #16
 8002df2:	4013      	ands	r3, r2
 8002df4:	d01a      	beq.n	8002e2c <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8002df6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002df8:	60bb      	str	r3, [r7, #8]
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	60fb      	str	r3, [r7, #12]
 8002dfe:	4a23      	ldr	r2, [pc, #140]	; (8002e8c <HAL_RCC_GetSysClockFreq+0x13c>)
 8002e00:	2300      	movs	r3, #0
 8002e02:	68b8      	ldr	r0, [r7, #8]
 8002e04:	68f9      	ldr	r1, [r7, #12]
 8002e06:	f7fd fb27 	bl	8000458 <__aeabi_lmul>
 8002e0a:	0002      	movs	r2, r0
 8002e0c:	000b      	movs	r3, r1
 8002e0e:	0010      	movs	r0, r2
 8002e10:	0019      	movs	r1, r3
 8002e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e14:	603b      	str	r3, [r7, #0]
 8002e16:	2300      	movs	r3, #0
 8002e18:	607b      	str	r3, [r7, #4]
 8002e1a:	683a      	ldr	r2, [r7, #0]
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	f7fd fafb 	bl	8000418 <__aeabi_uldivmod>
 8002e22:	0002      	movs	r2, r0
 8002e24:	000b      	movs	r3, r1
 8002e26:	0013      	movs	r3, r2
 8002e28:	637b      	str	r3, [r7, #52]	; 0x34
 8002e2a:	e017      	b.n	8002e5c <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002e2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e2e:	0018      	movs	r0, r3
 8002e30:	2300      	movs	r3, #0
 8002e32:	0019      	movs	r1, r3
 8002e34:	4a16      	ldr	r2, [pc, #88]	; (8002e90 <HAL_RCC_GetSysClockFreq+0x140>)
 8002e36:	2300      	movs	r3, #0
 8002e38:	f7fd fb0e 	bl	8000458 <__aeabi_lmul>
 8002e3c:	0002      	movs	r2, r0
 8002e3e:	000b      	movs	r3, r1
 8002e40:	0010      	movs	r0, r2
 8002e42:	0019      	movs	r1, r3
 8002e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e46:	001c      	movs	r4, r3
 8002e48:	2300      	movs	r3, #0
 8002e4a:	001d      	movs	r5, r3
 8002e4c:	0022      	movs	r2, r4
 8002e4e:	002b      	movs	r3, r5
 8002e50:	f7fd fae2 	bl	8000418 <__aeabi_uldivmod>
 8002e54:	0002      	movs	r2, r0
 8002e56:	000b      	movs	r3, r1
 8002e58:	0013      	movs	r3, r2
 8002e5a:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8002e5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e5e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002e60:	e00d      	b.n	8002e7e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8002e62:	4b09      	ldr	r3, [pc, #36]	; (8002e88 <HAL_RCC_GetSysClockFreq+0x138>)
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	0b5b      	lsrs	r3, r3, #13
 8002e68:	2207      	movs	r2, #7
 8002e6a:	4013      	ands	r3, r2
 8002e6c:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002e6e:	6a3b      	ldr	r3, [r7, #32]
 8002e70:	3301      	adds	r3, #1
 8002e72:	2280      	movs	r2, #128	; 0x80
 8002e74:	0212      	lsls	r2, r2, #8
 8002e76:	409a      	lsls	r2, r3
 8002e78:	0013      	movs	r3, r2
 8002e7a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002e7c:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002e7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002e80:	0018      	movs	r0, r3
 8002e82:	46bd      	mov	sp, r7
 8002e84:	b00e      	add	sp, #56	; 0x38
 8002e86:	bdb0      	pop	{r4, r5, r7, pc}
 8002e88:	40021000 	.word	0x40021000
 8002e8c:	003d0900 	.word	0x003d0900
 8002e90:	00f42400 	.word	0x00f42400
 8002e94:	007a1200 	.word	0x007a1200
 8002e98:	08005dec 	.word	0x08005dec

08002e9c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ea0:	4b02      	ldr	r3, [pc, #8]	; (8002eac <HAL_RCC_GetHCLKFreq+0x10>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
}
 8002ea4:	0018      	movs	r0, r3
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bd80      	pop	{r7, pc}
 8002eaa:	46c0      	nop			; (mov r8, r8)
 8002eac:	20000104 	.word	0x20000104

08002eb0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002eb4:	f7ff fff2 	bl	8002e9c <HAL_RCC_GetHCLKFreq>
 8002eb8:	0001      	movs	r1, r0
 8002eba:	4b06      	ldr	r3, [pc, #24]	; (8002ed4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ebc:	68db      	ldr	r3, [r3, #12]
 8002ebe:	0a1b      	lsrs	r3, r3, #8
 8002ec0:	2207      	movs	r2, #7
 8002ec2:	4013      	ands	r3, r2
 8002ec4:	4a04      	ldr	r2, [pc, #16]	; (8002ed8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002ec6:	5cd3      	ldrb	r3, [r2, r3]
 8002ec8:	40d9      	lsrs	r1, r3
 8002eca:	000b      	movs	r3, r1
}
 8002ecc:	0018      	movs	r0, r3
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd80      	pop	{r7, pc}
 8002ed2:	46c0      	nop			; (mov r8, r8)
 8002ed4:	40021000 	.word	0x40021000
 8002ed8:	08005de4 	.word	0x08005de4

08002edc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002ee0:	f7ff ffdc 	bl	8002e9c <HAL_RCC_GetHCLKFreq>
 8002ee4:	0001      	movs	r1, r0
 8002ee6:	4b06      	ldr	r3, [pc, #24]	; (8002f00 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ee8:	68db      	ldr	r3, [r3, #12]
 8002eea:	0adb      	lsrs	r3, r3, #11
 8002eec:	2207      	movs	r2, #7
 8002eee:	4013      	ands	r3, r2
 8002ef0:	4a04      	ldr	r2, [pc, #16]	; (8002f04 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002ef2:	5cd3      	ldrb	r3, [r2, r3]
 8002ef4:	40d9      	lsrs	r1, r3
 8002ef6:	000b      	movs	r3, r1
}
 8002ef8:	0018      	movs	r0, r3
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bd80      	pop	{r7, pc}
 8002efe:	46c0      	nop			; (mov r8, r8)
 8002f00:	40021000 	.word	0x40021000
 8002f04:	08005de4 	.word	0x08005de4

08002f08 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b086      	sub	sp, #24
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8002f10:	2317      	movs	r3, #23
 8002f12:	18fb      	adds	r3, r7, r3
 8002f14:	2200      	movs	r2, #0
 8002f16:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	2220      	movs	r2, #32
 8002f1e:	4013      	ands	r3, r2
 8002f20:	d106      	bne.n	8002f30 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681a      	ldr	r2, [r3, #0]
 8002f26:	2380      	movs	r3, #128	; 0x80
 8002f28:	011b      	lsls	r3, r3, #4
 8002f2a:	4013      	ands	r3, r2
 8002f2c:	d100      	bne.n	8002f30 <HAL_RCCEx_PeriphCLKConfig+0x28>
 8002f2e:	e104      	b.n	800313a <HAL_RCCEx_PeriphCLKConfig+0x232>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f30:	4bb9      	ldr	r3, [pc, #740]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002f32:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f34:	2380      	movs	r3, #128	; 0x80
 8002f36:	055b      	lsls	r3, r3, #21
 8002f38:	4013      	ands	r3, r2
 8002f3a:	d10a      	bne.n	8002f52 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f3c:	4bb6      	ldr	r3, [pc, #728]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002f3e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f40:	4bb5      	ldr	r3, [pc, #724]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002f42:	2180      	movs	r1, #128	; 0x80
 8002f44:	0549      	lsls	r1, r1, #21
 8002f46:	430a      	orrs	r2, r1
 8002f48:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8002f4a:	2317      	movs	r3, #23
 8002f4c:	18fb      	adds	r3, r7, r3
 8002f4e:	2201      	movs	r2, #1
 8002f50:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f52:	4bb2      	ldr	r3, [pc, #712]	; (800321c <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8002f54:	681a      	ldr	r2, [r3, #0]
 8002f56:	2380      	movs	r3, #128	; 0x80
 8002f58:	005b      	lsls	r3, r3, #1
 8002f5a:	4013      	ands	r3, r2
 8002f5c:	d11a      	bne.n	8002f94 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f5e:	4baf      	ldr	r3, [pc, #700]	; (800321c <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8002f60:	681a      	ldr	r2, [r3, #0]
 8002f62:	4bae      	ldr	r3, [pc, #696]	; (800321c <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8002f64:	2180      	movs	r1, #128	; 0x80
 8002f66:	0049      	lsls	r1, r1, #1
 8002f68:	430a      	orrs	r2, r1
 8002f6a:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f6c:	f7fe fec2 	bl	8001cf4 <HAL_GetTick>
 8002f70:	0003      	movs	r3, r0
 8002f72:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f74:	e008      	b.n	8002f88 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f76:	f7fe febd 	bl	8001cf4 <HAL_GetTick>
 8002f7a:	0002      	movs	r2, r0
 8002f7c:	693b      	ldr	r3, [r7, #16]
 8002f7e:	1ad3      	subs	r3, r2, r3
 8002f80:	2b64      	cmp	r3, #100	; 0x64
 8002f82:	d901      	bls.n	8002f88 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002f84:	2303      	movs	r3, #3
 8002f86:	e143      	b.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0x308>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f88:	4ba4      	ldr	r3, [pc, #656]	; (800321c <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8002f8a:	681a      	ldr	r2, [r3, #0]
 8002f8c:	2380      	movs	r3, #128	; 0x80
 8002f8e:	005b      	lsls	r3, r3, #1
 8002f90:	4013      	ands	r3, r2
 8002f92:	d0f0      	beq.n	8002f76 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8002f94:	4ba0      	ldr	r3, [pc, #640]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002f96:	681a      	ldr	r2, [r3, #0]
 8002f98:	23c0      	movs	r3, #192	; 0xc0
 8002f9a:	039b      	lsls	r3, r3, #14
 8002f9c:	4013      	ands	r3, r2
 8002f9e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	685a      	ldr	r2, [r3, #4]
 8002fa4:	23c0      	movs	r3, #192	; 0xc0
 8002fa6:	039b      	lsls	r3, r3, #14
 8002fa8:	4013      	ands	r3, r2
 8002faa:	68fa      	ldr	r2, [r7, #12]
 8002fac:	429a      	cmp	r2, r3
 8002fae:	d107      	bne.n	8002fc0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	689a      	ldr	r2, [r3, #8]
 8002fb4:	23c0      	movs	r3, #192	; 0xc0
 8002fb6:	039b      	lsls	r3, r3, #14
 8002fb8:	4013      	ands	r3, r2
 8002fba:	68fa      	ldr	r2, [r7, #12]
 8002fbc:	429a      	cmp	r2, r3
 8002fbe:	d013      	beq.n	8002fe8 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	685a      	ldr	r2, [r3, #4]
 8002fc4:	23c0      	movs	r3, #192	; 0xc0
 8002fc6:	029b      	lsls	r3, r3, #10
 8002fc8:	401a      	ands	r2, r3
 8002fca:	23c0      	movs	r3, #192	; 0xc0
 8002fcc:	029b      	lsls	r3, r3, #10
 8002fce:	429a      	cmp	r2, r3
 8002fd0:	d10a      	bne.n	8002fe8 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8002fd2:	4b91      	ldr	r3, [pc, #580]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002fd4:	681a      	ldr	r2, [r3, #0]
 8002fd6:	2380      	movs	r3, #128	; 0x80
 8002fd8:	029b      	lsls	r3, r3, #10
 8002fda:	401a      	ands	r2, r3
 8002fdc:	2380      	movs	r3, #128	; 0x80
 8002fde:	029b      	lsls	r3, r3, #10
 8002fe0:	429a      	cmp	r2, r3
 8002fe2:	d101      	bne.n	8002fe8 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	e113      	b.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0x308>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8002fe8:	4b8b      	ldr	r3, [pc, #556]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8002fea:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002fec:	23c0      	movs	r3, #192	; 0xc0
 8002fee:	029b      	lsls	r3, r3, #10
 8002ff0:	4013      	ands	r3, r2
 8002ff2:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d049      	beq.n	800308e <HAL_RCCEx_PeriphCLKConfig+0x186>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	685a      	ldr	r2, [r3, #4]
 8002ffe:	23c0      	movs	r3, #192	; 0xc0
 8003000:	029b      	lsls	r3, r3, #10
 8003002:	4013      	ands	r3, r2
 8003004:	68fa      	ldr	r2, [r7, #12]
 8003006:	429a      	cmp	r2, r3
 8003008:	d004      	beq.n	8003014 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	2220      	movs	r2, #32
 8003010:	4013      	ands	r3, r2
 8003012:	d10d      	bne.n	8003030 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	689a      	ldr	r2, [r3, #8]
 8003018:	23c0      	movs	r3, #192	; 0xc0
 800301a:	029b      	lsls	r3, r3, #10
 800301c:	4013      	ands	r3, r2
 800301e:	68fa      	ldr	r2, [r7, #12]
 8003020:	429a      	cmp	r2, r3
 8003022:	d034      	beq.n	800308e <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681a      	ldr	r2, [r3, #0]
 8003028:	2380      	movs	r3, #128	; 0x80
 800302a:	011b      	lsls	r3, r3, #4
 800302c:	4013      	ands	r3, r2
 800302e:	d02e      	beq.n	800308e <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8003030:	4b79      	ldr	r3, [pc, #484]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003032:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003034:	4a7a      	ldr	r2, [pc, #488]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8003036:	4013      	ands	r3, r2
 8003038:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800303a:	4b77      	ldr	r3, [pc, #476]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800303c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800303e:	4b76      	ldr	r3, [pc, #472]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003040:	2180      	movs	r1, #128	; 0x80
 8003042:	0309      	lsls	r1, r1, #12
 8003044:	430a      	orrs	r2, r1
 8003046:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003048:	4b73      	ldr	r3, [pc, #460]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800304a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800304c:	4b72      	ldr	r3, [pc, #456]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800304e:	4975      	ldr	r1, [pc, #468]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8003050:	400a      	ands	r2, r1
 8003052:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8003054:	4b70      	ldr	r3, [pc, #448]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003056:	68fa      	ldr	r2, [r7, #12]
 8003058:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 800305a:	68fa      	ldr	r2, [r7, #12]
 800305c:	2380      	movs	r3, #128	; 0x80
 800305e:	005b      	lsls	r3, r3, #1
 8003060:	4013      	ands	r3, r2
 8003062:	d014      	beq.n	800308e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003064:	f7fe fe46 	bl	8001cf4 <HAL_GetTick>
 8003068:	0003      	movs	r3, r0
 800306a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800306c:	e009      	b.n	8003082 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800306e:	f7fe fe41 	bl	8001cf4 <HAL_GetTick>
 8003072:	0002      	movs	r2, r0
 8003074:	693b      	ldr	r3, [r7, #16]
 8003076:	1ad3      	subs	r3, r2, r3
 8003078:	4a6b      	ldr	r2, [pc, #428]	; (8003228 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d901      	bls.n	8003082 <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 800307e:	2303      	movs	r3, #3
 8003080:	e0c6      	b.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0x308>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003082:	4b65      	ldr	r3, [pc, #404]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003084:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003086:	2380      	movs	r3, #128	; 0x80
 8003088:	009b      	lsls	r3, r3, #2
 800308a:	4013      	ands	r3, r2
 800308c:	d0ef      	beq.n	800306e <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681a      	ldr	r2, [r3, #0]
 8003092:	2380      	movs	r3, #128	; 0x80
 8003094:	011b      	lsls	r3, r3, #4
 8003096:	4013      	ands	r3, r2
 8003098:	d01f      	beq.n	80030da <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	689a      	ldr	r2, [r3, #8]
 800309e:	23c0      	movs	r3, #192	; 0xc0
 80030a0:	029b      	lsls	r3, r3, #10
 80030a2:	401a      	ands	r2, r3
 80030a4:	23c0      	movs	r3, #192	; 0xc0
 80030a6:	029b      	lsls	r3, r3, #10
 80030a8:	429a      	cmp	r2, r3
 80030aa:	d10c      	bne.n	80030c6 <HAL_RCCEx_PeriphCLKConfig+0x1be>
 80030ac:	4b5a      	ldr	r3, [pc, #360]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4a5e      	ldr	r2, [pc, #376]	; (800322c <HAL_RCCEx_PeriphCLKConfig+0x324>)
 80030b2:	4013      	ands	r3, r2
 80030b4:	0019      	movs	r1, r3
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	689a      	ldr	r2, [r3, #8]
 80030ba:	23c0      	movs	r3, #192	; 0xc0
 80030bc:	039b      	lsls	r3, r3, #14
 80030be:	401a      	ands	r2, r3
 80030c0:	4b55      	ldr	r3, [pc, #340]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80030c2:	430a      	orrs	r2, r1
 80030c4:	601a      	str	r2, [r3, #0]
 80030c6:	4b54      	ldr	r3, [pc, #336]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80030c8:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	689a      	ldr	r2, [r3, #8]
 80030ce:	23c0      	movs	r3, #192	; 0xc0
 80030d0:	029b      	lsls	r3, r3, #10
 80030d2:	401a      	ands	r2, r3
 80030d4:	4b50      	ldr	r3, [pc, #320]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80030d6:	430a      	orrs	r2, r1
 80030d8:	651a      	str	r2, [r3, #80]	; 0x50
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	2220      	movs	r2, #32
 80030e0:	4013      	ands	r3, r2
 80030e2:	d01f      	beq.n	8003124 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	685a      	ldr	r2, [r3, #4]
 80030e8:	23c0      	movs	r3, #192	; 0xc0
 80030ea:	029b      	lsls	r3, r3, #10
 80030ec:	401a      	ands	r2, r3
 80030ee:	23c0      	movs	r3, #192	; 0xc0
 80030f0:	029b      	lsls	r3, r3, #10
 80030f2:	429a      	cmp	r2, r3
 80030f4:	d10c      	bne.n	8003110 <HAL_RCCEx_PeriphCLKConfig+0x208>
 80030f6:	4b48      	ldr	r3, [pc, #288]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4a4c      	ldr	r2, [pc, #304]	; (800322c <HAL_RCCEx_PeriphCLKConfig+0x324>)
 80030fc:	4013      	ands	r3, r2
 80030fe:	0019      	movs	r1, r3
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	685a      	ldr	r2, [r3, #4]
 8003104:	23c0      	movs	r3, #192	; 0xc0
 8003106:	039b      	lsls	r3, r3, #14
 8003108:	401a      	ands	r2, r3
 800310a:	4b43      	ldr	r3, [pc, #268]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800310c:	430a      	orrs	r2, r1
 800310e:	601a      	str	r2, [r3, #0]
 8003110:	4b41      	ldr	r3, [pc, #260]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003112:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	685a      	ldr	r2, [r3, #4]
 8003118:	23c0      	movs	r3, #192	; 0xc0
 800311a:	029b      	lsls	r3, r3, #10
 800311c:	401a      	ands	r2, r3
 800311e:	4b3e      	ldr	r3, [pc, #248]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003120:	430a      	orrs	r2, r1
 8003122:	651a      	str	r2, [r3, #80]	; 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003124:	2317      	movs	r3, #23
 8003126:	18fb      	adds	r3, r7, r3
 8003128:	781b      	ldrb	r3, [r3, #0]
 800312a:	2b01      	cmp	r3, #1
 800312c:	d105      	bne.n	800313a <HAL_RCCEx_PeriphCLKConfig+0x232>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800312e:	4b3a      	ldr	r3, [pc, #232]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003130:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003132:	4b39      	ldr	r3, [pc, #228]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003134:	493e      	ldr	r1, [pc, #248]	; (8003230 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8003136:	400a      	ands	r2, r1
 8003138:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	2201      	movs	r2, #1
 8003140:	4013      	ands	r3, r2
 8003142:	d009      	beq.n	8003158 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003144:	4b34      	ldr	r3, [pc, #208]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003146:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003148:	2203      	movs	r2, #3
 800314a:	4393      	bics	r3, r2
 800314c:	0019      	movs	r1, r3
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	68da      	ldr	r2, [r3, #12]
 8003152:	4b31      	ldr	r3, [pc, #196]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003154:	430a      	orrs	r2, r1
 8003156:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	2202      	movs	r2, #2
 800315e:	4013      	ands	r3, r2
 8003160:	d009      	beq.n	8003176 <HAL_RCCEx_PeriphCLKConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003162:	4b2d      	ldr	r3, [pc, #180]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003164:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003166:	220c      	movs	r2, #12
 8003168:	4393      	bics	r3, r2
 800316a:	0019      	movs	r1, r3
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	691a      	ldr	r2, [r3, #16]
 8003170:	4b29      	ldr	r3, [pc, #164]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003172:	430a      	orrs	r2, r1
 8003174:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	2204      	movs	r2, #4
 800317c:	4013      	ands	r3, r2
 800317e:	d009      	beq.n	8003194 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003180:	4b25      	ldr	r3, [pc, #148]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003182:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003184:	4a2b      	ldr	r2, [pc, #172]	; (8003234 <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 8003186:	4013      	ands	r3, r2
 8003188:	0019      	movs	r1, r3
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	695a      	ldr	r2, [r3, #20]
 800318e:	4b22      	ldr	r3, [pc, #136]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003190:	430a      	orrs	r2, r1
 8003192:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	2208      	movs	r2, #8
 800319a:	4013      	ands	r3, r2
 800319c:	d009      	beq.n	80031b2 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800319e:	4b1e      	ldr	r3, [pc, #120]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80031a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031a2:	4a25      	ldr	r2, [pc, #148]	; (8003238 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80031a4:	4013      	ands	r3, r2
 80031a6:	0019      	movs	r1, r3
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	699a      	ldr	r2, [r3, #24]
 80031ac:	4b1a      	ldr	r3, [pc, #104]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80031ae:	430a      	orrs	r2, r1
 80031b0:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681a      	ldr	r2, [r3, #0]
 80031b6:	2380      	movs	r3, #128	; 0x80
 80031b8:	005b      	lsls	r3, r3, #1
 80031ba:	4013      	ands	r3, r2
 80031bc:	d009      	beq.n	80031d2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80031be:	4b16      	ldr	r3, [pc, #88]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80031c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031c2:	4a17      	ldr	r2, [pc, #92]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 80031c4:	4013      	ands	r3, r2
 80031c6:	0019      	movs	r1, r3
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	69da      	ldr	r2, [r3, #28]
 80031cc:	4b12      	ldr	r3, [pc, #72]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80031ce:	430a      	orrs	r2, r1
 80031d0:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	2240      	movs	r2, #64	; 0x40
 80031d8:	4013      	ands	r3, r2
 80031da:	d009      	beq.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80031dc:	4b0e      	ldr	r3, [pc, #56]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80031de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031e0:	4a16      	ldr	r2, [pc, #88]	; (800323c <HAL_RCCEx_PeriphCLKConfig+0x334>)
 80031e2:	4013      	ands	r3, r2
 80031e4:	0019      	movs	r1, r3
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80031ea:	4b0b      	ldr	r3, [pc, #44]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80031ec:	430a      	orrs	r2, r1
 80031ee:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	2280      	movs	r2, #128	; 0x80
 80031f6:	4013      	ands	r3, r2
 80031f8:	d009      	beq.n	800320e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80031fa:	4b07      	ldr	r3, [pc, #28]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80031fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031fe:	4a10      	ldr	r2, [pc, #64]	; (8003240 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003200:	4013      	ands	r3, r2
 8003202:	0019      	movs	r1, r3
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6a1a      	ldr	r2, [r3, #32]
 8003208:	4b03      	ldr	r3, [pc, #12]	; (8003218 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800320a:	430a      	orrs	r2, r1
 800320c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800320e:	2300      	movs	r3, #0
}
 8003210:	0018      	movs	r0, r3
 8003212:	46bd      	mov	sp, r7
 8003214:	b006      	add	sp, #24
 8003216:	bd80      	pop	{r7, pc}
 8003218:	40021000 	.word	0x40021000
 800321c:	40007000 	.word	0x40007000
 8003220:	fffcffff 	.word	0xfffcffff
 8003224:	fff7ffff 	.word	0xfff7ffff
 8003228:	00001388 	.word	0x00001388
 800322c:	ffcfffff 	.word	0xffcfffff
 8003230:	efffffff 	.word	0xefffffff
 8003234:	fffff3ff 	.word	0xfffff3ff
 8003238:	ffffcfff 	.word	0xffffcfff
 800323c:	fbffffff 	.word	0xfbffffff
 8003240:	fff3ffff 	.word	0xfff3ffff

08003244 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b082      	sub	sp, #8
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d101      	bne.n	8003256 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003252:	2301      	movs	r3, #1
 8003254:	e044      	b.n	80032e0 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800325a:	2b00      	cmp	r3, #0
 800325c:	d107      	bne.n	800326e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2278      	movs	r2, #120	; 0x78
 8003262:	2100      	movs	r1, #0
 8003264:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	0018      	movs	r0, r3
 800326a:	f7fe fc67 	bl	8001b3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2224      	movs	r2, #36	; 0x24
 8003272:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	681a      	ldr	r2, [r3, #0]
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	2101      	movs	r1, #1
 8003280:	438a      	bics	r2, r1
 8003282:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	0018      	movs	r0, r3
 8003288:	f000 fc2c 	bl	8003ae4 <UART_SetConfig>
 800328c:	0003      	movs	r3, r0
 800328e:	2b01      	cmp	r3, #1
 8003290:	d101      	bne.n	8003296 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003292:	2301      	movs	r3, #1
 8003294:	e024      	b.n	80032e0 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800329a:	2b00      	cmp	r3, #0
 800329c:	d003      	beq.n	80032a6 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	0018      	movs	r0, r3
 80032a2:	f000 febd 	bl	8004020 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	685a      	ldr	r2, [r3, #4]
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	490d      	ldr	r1, [pc, #52]	; (80032e8 <HAL_UART_Init+0xa4>)
 80032b2:	400a      	ands	r2, r1
 80032b4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	689a      	ldr	r2, [r3, #8]
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	212a      	movs	r1, #42	; 0x2a
 80032c2:	438a      	bics	r2, r1
 80032c4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	681a      	ldr	r2, [r3, #0]
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	2101      	movs	r1, #1
 80032d2:	430a      	orrs	r2, r1
 80032d4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	0018      	movs	r0, r3
 80032da:	f000 ff55 	bl	8004188 <UART_CheckIdleState>
 80032de:	0003      	movs	r3, r0
}
 80032e0:	0018      	movs	r0, r3
 80032e2:	46bd      	mov	sp, r7
 80032e4:	b002      	add	sp, #8
 80032e6:	bd80      	pop	{r7, pc}
 80032e8:	ffffb7ff 	.word	0xffffb7ff

080032ec <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b08a      	sub	sp, #40	; 0x28
 80032f0:	af02      	add	r7, sp, #8
 80032f2:	60f8      	str	r0, [r7, #12]
 80032f4:	60b9      	str	r1, [r7, #8]
 80032f6:	603b      	str	r3, [r7, #0]
 80032f8:	1dbb      	adds	r3, r7, #6
 80032fa:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003300:	2b20      	cmp	r3, #32
 8003302:	d000      	beq.n	8003306 <HAL_UART_Transmit+0x1a>
 8003304:	e08c      	b.n	8003420 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8003306:	68bb      	ldr	r3, [r7, #8]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d003      	beq.n	8003314 <HAL_UART_Transmit+0x28>
 800330c:	1dbb      	adds	r3, r7, #6
 800330e:	881b      	ldrh	r3, [r3, #0]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d101      	bne.n	8003318 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8003314:	2301      	movs	r3, #1
 8003316:	e084      	b.n	8003422 <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	689a      	ldr	r2, [r3, #8]
 800331c:	2380      	movs	r3, #128	; 0x80
 800331e:	015b      	lsls	r3, r3, #5
 8003320:	429a      	cmp	r2, r3
 8003322:	d109      	bne.n	8003338 <HAL_UART_Transmit+0x4c>
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	691b      	ldr	r3, [r3, #16]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d105      	bne.n	8003338 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800332c:	68bb      	ldr	r3, [r7, #8]
 800332e:	2201      	movs	r2, #1
 8003330:	4013      	ands	r3, r2
 8003332:	d001      	beq.n	8003338 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8003334:	2301      	movs	r3, #1
 8003336:	e074      	b.n	8003422 <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	2284      	movs	r2, #132	; 0x84
 800333c:	2100      	movs	r1, #0
 800333e:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	2221      	movs	r2, #33	; 0x21
 8003344:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003346:	f7fe fcd5 	bl	8001cf4 <HAL_GetTick>
 800334a:	0003      	movs	r3, r0
 800334c:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	1dba      	adds	r2, r7, #6
 8003352:	2150      	movs	r1, #80	; 0x50
 8003354:	8812      	ldrh	r2, [r2, #0]
 8003356:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	1dba      	adds	r2, r7, #6
 800335c:	2152      	movs	r1, #82	; 0x52
 800335e:	8812      	ldrh	r2, [r2, #0]
 8003360:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	689a      	ldr	r2, [r3, #8]
 8003366:	2380      	movs	r3, #128	; 0x80
 8003368:	015b      	lsls	r3, r3, #5
 800336a:	429a      	cmp	r2, r3
 800336c:	d108      	bne.n	8003380 <HAL_UART_Transmit+0x94>
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	691b      	ldr	r3, [r3, #16]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d104      	bne.n	8003380 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8003376:	2300      	movs	r3, #0
 8003378:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800337a:	68bb      	ldr	r3, [r7, #8]
 800337c:	61bb      	str	r3, [r7, #24]
 800337e:	e003      	b.n	8003388 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8003380:	68bb      	ldr	r3, [r7, #8]
 8003382:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003384:	2300      	movs	r3, #0
 8003386:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003388:	e02f      	b.n	80033ea <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800338a:	697a      	ldr	r2, [r7, #20]
 800338c:	68f8      	ldr	r0, [r7, #12]
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	9300      	str	r3, [sp, #0]
 8003392:	0013      	movs	r3, r2
 8003394:	2200      	movs	r2, #0
 8003396:	2180      	movs	r1, #128	; 0x80
 8003398:	f000 ff9e 	bl	80042d8 <UART_WaitOnFlagUntilTimeout>
 800339c:	1e03      	subs	r3, r0, #0
 800339e:	d004      	beq.n	80033aa <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	2220      	movs	r2, #32
 80033a4:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80033a6:	2303      	movs	r3, #3
 80033a8:	e03b      	b.n	8003422 <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 80033aa:	69fb      	ldr	r3, [r7, #28]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d10b      	bne.n	80033c8 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80033b0:	69bb      	ldr	r3, [r7, #24]
 80033b2:	881b      	ldrh	r3, [r3, #0]
 80033b4:	001a      	movs	r2, r3
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	05d2      	lsls	r2, r2, #23
 80033bc:	0dd2      	lsrs	r2, r2, #23
 80033be:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80033c0:	69bb      	ldr	r3, [r7, #24]
 80033c2:	3302      	adds	r3, #2
 80033c4:	61bb      	str	r3, [r7, #24]
 80033c6:	e007      	b.n	80033d8 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80033c8:	69fb      	ldr	r3, [r7, #28]
 80033ca:	781a      	ldrb	r2, [r3, #0]
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80033d2:	69fb      	ldr	r3, [r7, #28]
 80033d4:	3301      	adds	r3, #1
 80033d6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	2252      	movs	r2, #82	; 0x52
 80033dc:	5a9b      	ldrh	r3, [r3, r2]
 80033de:	b29b      	uxth	r3, r3
 80033e0:	3b01      	subs	r3, #1
 80033e2:	b299      	uxth	r1, r3
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	2252      	movs	r2, #82	; 0x52
 80033e8:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	2252      	movs	r2, #82	; 0x52
 80033ee:	5a9b      	ldrh	r3, [r3, r2]
 80033f0:	b29b      	uxth	r3, r3
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d1c9      	bne.n	800338a <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80033f6:	697a      	ldr	r2, [r7, #20]
 80033f8:	68f8      	ldr	r0, [r7, #12]
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	9300      	str	r3, [sp, #0]
 80033fe:	0013      	movs	r3, r2
 8003400:	2200      	movs	r2, #0
 8003402:	2140      	movs	r1, #64	; 0x40
 8003404:	f000 ff68 	bl	80042d8 <UART_WaitOnFlagUntilTimeout>
 8003408:	1e03      	subs	r3, r0, #0
 800340a:	d004      	beq.n	8003416 <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	2220      	movs	r2, #32
 8003410:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8003412:	2303      	movs	r3, #3
 8003414:	e005      	b.n	8003422 <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	2220      	movs	r2, #32
 800341a:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800341c:	2300      	movs	r3, #0
 800341e:	e000      	b.n	8003422 <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8003420:	2302      	movs	r3, #2
  }
}
 8003422:	0018      	movs	r0, r3
 8003424:	46bd      	mov	sp, r7
 8003426:	b008      	add	sp, #32
 8003428:	bd80      	pop	{r7, pc}
	...

0800342c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b088      	sub	sp, #32
 8003430:	af00      	add	r7, sp, #0
 8003432:	60f8      	str	r0, [r7, #12]
 8003434:	60b9      	str	r1, [r7, #8]
 8003436:	1dbb      	adds	r3, r7, #6
 8003438:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	2280      	movs	r2, #128	; 0x80
 800343e:	589b      	ldr	r3, [r3, r2]
 8003440:	2b20      	cmp	r3, #32
 8003442:	d14a      	bne.n	80034da <HAL_UART_Receive_IT+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d003      	beq.n	8003452 <HAL_UART_Receive_IT+0x26>
 800344a:	1dbb      	adds	r3, r7, #6
 800344c:	881b      	ldrh	r3, [r3, #0]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d101      	bne.n	8003456 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003452:	2301      	movs	r3, #1
 8003454:	e042      	b.n	80034dc <HAL_UART_Receive_IT+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	689a      	ldr	r2, [r3, #8]
 800345a:	2380      	movs	r3, #128	; 0x80
 800345c:	015b      	lsls	r3, r3, #5
 800345e:	429a      	cmp	r2, r3
 8003460:	d109      	bne.n	8003476 <HAL_UART_Receive_IT+0x4a>
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	691b      	ldr	r3, [r3, #16]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d105      	bne.n	8003476 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800346a:	68bb      	ldr	r3, [r7, #8]
 800346c:	2201      	movs	r2, #1
 800346e:	4013      	ands	r3, r2
 8003470:	d001      	beq.n	8003476 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 8003472:	2301      	movs	r3, #1
 8003474:	e032      	b.n	80034dc <HAL_UART_Receive_IT+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	2200      	movs	r2, #0
 800347a:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a18      	ldr	r2, [pc, #96]	; (80034e4 <HAL_UART_Receive_IT+0xb8>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d020      	beq.n	80034c8 <HAL_UART_Receive_IT+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	685a      	ldr	r2, [r3, #4]
 800348c:	2380      	movs	r3, #128	; 0x80
 800348e:	041b      	lsls	r3, r3, #16
 8003490:	4013      	ands	r3, r2
 8003492:	d019      	beq.n	80034c8 <HAL_UART_Receive_IT+0x9c>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003494:	f3ef 8310 	mrs	r3, PRIMASK
 8003498:	613b      	str	r3, [r7, #16]
  return(result);
 800349a:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800349c:	61fb      	str	r3, [r7, #28]
 800349e:	2301      	movs	r3, #1
 80034a0:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034a2:	697b      	ldr	r3, [r7, #20]
 80034a4:	f383 8810 	msr	PRIMASK, r3
}
 80034a8:	46c0      	nop			; (mov r8, r8)
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	681a      	ldr	r2, [r3, #0]
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	2180      	movs	r1, #128	; 0x80
 80034b6:	04c9      	lsls	r1, r1, #19
 80034b8:	430a      	orrs	r2, r1
 80034ba:	601a      	str	r2, [r3, #0]
 80034bc:	69fb      	ldr	r3, [r7, #28]
 80034be:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034c0:	69bb      	ldr	r3, [r7, #24]
 80034c2:	f383 8810 	msr	PRIMASK, r3
}
 80034c6:	46c0      	nop			; (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80034c8:	1dbb      	adds	r3, r7, #6
 80034ca:	881a      	ldrh	r2, [r3, #0]
 80034cc:	68b9      	ldr	r1, [r7, #8]
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	0018      	movs	r0, r3
 80034d2:	f000 ff6b 	bl	80043ac <UART_Start_Receive_IT>
 80034d6:	0003      	movs	r3, r0
 80034d8:	e000      	b.n	80034dc <HAL_UART_Receive_IT+0xb0>
  }
  else
  {
    return HAL_BUSY;
 80034da:	2302      	movs	r3, #2
  }
}
 80034dc:	0018      	movs	r0, r3
 80034de:	46bd      	mov	sp, r7
 80034e0:	b008      	add	sp, #32
 80034e2:	bd80      	pop	{r7, pc}
 80034e4:	40004800 	.word	0x40004800

080034e8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80034e8:	b590      	push	{r4, r7, lr}
 80034ea:	b0ab      	sub	sp, #172	; 0xac
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	69db      	ldr	r3, [r3, #28]
 80034f6:	22a4      	movs	r2, #164	; 0xa4
 80034f8:	18b9      	adds	r1, r7, r2
 80034fa:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	20a0      	movs	r0, #160	; 0xa0
 8003504:	1839      	adds	r1, r7, r0
 8003506:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	689b      	ldr	r3, [r3, #8]
 800350e:	219c      	movs	r1, #156	; 0x9c
 8003510:	1879      	adds	r1, r7, r1
 8003512:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003514:	0011      	movs	r1, r2
 8003516:	18bb      	adds	r3, r7, r2
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4a99      	ldr	r2, [pc, #612]	; (8003780 <HAL_UART_IRQHandler+0x298>)
 800351c:	4013      	ands	r3, r2
 800351e:	2298      	movs	r2, #152	; 0x98
 8003520:	18bc      	adds	r4, r7, r2
 8003522:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8003524:	18bb      	adds	r3, r7, r2
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d114      	bne.n	8003556 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800352c:	187b      	adds	r3, r7, r1
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	2220      	movs	r2, #32
 8003532:	4013      	ands	r3, r2
 8003534:	d00f      	beq.n	8003556 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003536:	183b      	adds	r3, r7, r0
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	2220      	movs	r2, #32
 800353c:	4013      	ands	r3, r2
 800353e:	d00a      	beq.n	8003556 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003544:	2b00      	cmp	r3, #0
 8003546:	d100      	bne.n	800354a <HAL_UART_IRQHandler+0x62>
 8003548:	e2a0      	b.n	8003a8c <HAL_UART_IRQHandler+0x5a4>
      {
        huart->RxISR(huart);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800354e:	687a      	ldr	r2, [r7, #4]
 8003550:	0010      	movs	r0, r2
 8003552:	4798      	blx	r3
      }
      return;
 8003554:	e29a      	b.n	8003a8c <HAL_UART_IRQHandler+0x5a4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003556:	2398      	movs	r3, #152	; 0x98
 8003558:	18fb      	adds	r3, r7, r3
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d100      	bne.n	8003562 <HAL_UART_IRQHandler+0x7a>
 8003560:	e114      	b.n	800378c <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003562:	239c      	movs	r3, #156	; 0x9c
 8003564:	18fb      	adds	r3, r7, r3
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	2201      	movs	r2, #1
 800356a:	4013      	ands	r3, r2
 800356c:	d106      	bne.n	800357c <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800356e:	23a0      	movs	r3, #160	; 0xa0
 8003570:	18fb      	adds	r3, r7, r3
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a83      	ldr	r2, [pc, #524]	; (8003784 <HAL_UART_IRQHandler+0x29c>)
 8003576:	4013      	ands	r3, r2
 8003578:	d100      	bne.n	800357c <HAL_UART_IRQHandler+0x94>
 800357a:	e107      	b.n	800378c <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800357c:	23a4      	movs	r3, #164	; 0xa4
 800357e:	18fb      	adds	r3, r7, r3
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	2201      	movs	r2, #1
 8003584:	4013      	ands	r3, r2
 8003586:	d012      	beq.n	80035ae <HAL_UART_IRQHandler+0xc6>
 8003588:	23a0      	movs	r3, #160	; 0xa0
 800358a:	18fb      	adds	r3, r7, r3
 800358c:	681a      	ldr	r2, [r3, #0]
 800358e:	2380      	movs	r3, #128	; 0x80
 8003590:	005b      	lsls	r3, r3, #1
 8003592:	4013      	ands	r3, r2
 8003594:	d00b      	beq.n	80035ae <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	2201      	movs	r2, #1
 800359c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2284      	movs	r2, #132	; 0x84
 80035a2:	589b      	ldr	r3, [r3, r2]
 80035a4:	2201      	movs	r2, #1
 80035a6:	431a      	orrs	r2, r3
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2184      	movs	r1, #132	; 0x84
 80035ac:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80035ae:	23a4      	movs	r3, #164	; 0xa4
 80035b0:	18fb      	adds	r3, r7, r3
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	2202      	movs	r2, #2
 80035b6:	4013      	ands	r3, r2
 80035b8:	d011      	beq.n	80035de <HAL_UART_IRQHandler+0xf6>
 80035ba:	239c      	movs	r3, #156	; 0x9c
 80035bc:	18fb      	adds	r3, r7, r3
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	2201      	movs	r2, #1
 80035c2:	4013      	ands	r3, r2
 80035c4:	d00b      	beq.n	80035de <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	2202      	movs	r2, #2
 80035cc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2284      	movs	r2, #132	; 0x84
 80035d2:	589b      	ldr	r3, [r3, r2]
 80035d4:	2204      	movs	r2, #4
 80035d6:	431a      	orrs	r2, r3
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2184      	movs	r1, #132	; 0x84
 80035dc:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80035de:	23a4      	movs	r3, #164	; 0xa4
 80035e0:	18fb      	adds	r3, r7, r3
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	2204      	movs	r2, #4
 80035e6:	4013      	ands	r3, r2
 80035e8:	d011      	beq.n	800360e <HAL_UART_IRQHandler+0x126>
 80035ea:	239c      	movs	r3, #156	; 0x9c
 80035ec:	18fb      	adds	r3, r7, r3
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	2201      	movs	r2, #1
 80035f2:	4013      	ands	r3, r2
 80035f4:	d00b      	beq.n	800360e <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	2204      	movs	r2, #4
 80035fc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2284      	movs	r2, #132	; 0x84
 8003602:	589b      	ldr	r3, [r3, r2]
 8003604:	2202      	movs	r2, #2
 8003606:	431a      	orrs	r2, r3
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2184      	movs	r1, #132	; 0x84
 800360c:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800360e:	23a4      	movs	r3, #164	; 0xa4
 8003610:	18fb      	adds	r3, r7, r3
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	2208      	movs	r2, #8
 8003616:	4013      	ands	r3, r2
 8003618:	d017      	beq.n	800364a <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800361a:	23a0      	movs	r3, #160	; 0xa0
 800361c:	18fb      	adds	r3, r7, r3
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	2220      	movs	r2, #32
 8003622:	4013      	ands	r3, r2
 8003624:	d105      	bne.n	8003632 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003626:	239c      	movs	r3, #156	; 0x9c
 8003628:	18fb      	adds	r3, r7, r3
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	2201      	movs	r2, #1
 800362e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003630:	d00b      	beq.n	800364a <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	2208      	movs	r2, #8
 8003638:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2284      	movs	r2, #132	; 0x84
 800363e:	589b      	ldr	r3, [r3, r2]
 8003640:	2208      	movs	r2, #8
 8003642:	431a      	orrs	r2, r3
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2184      	movs	r1, #132	; 0x84
 8003648:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800364a:	23a4      	movs	r3, #164	; 0xa4
 800364c:	18fb      	adds	r3, r7, r3
 800364e:	681a      	ldr	r2, [r3, #0]
 8003650:	2380      	movs	r3, #128	; 0x80
 8003652:	011b      	lsls	r3, r3, #4
 8003654:	4013      	ands	r3, r2
 8003656:	d013      	beq.n	8003680 <HAL_UART_IRQHandler+0x198>
 8003658:	23a0      	movs	r3, #160	; 0xa0
 800365a:	18fb      	adds	r3, r7, r3
 800365c:	681a      	ldr	r2, [r3, #0]
 800365e:	2380      	movs	r3, #128	; 0x80
 8003660:	04db      	lsls	r3, r3, #19
 8003662:	4013      	ands	r3, r2
 8003664:	d00c      	beq.n	8003680 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	2280      	movs	r2, #128	; 0x80
 800366c:	0112      	lsls	r2, r2, #4
 800366e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2284      	movs	r2, #132	; 0x84
 8003674:	589b      	ldr	r3, [r3, r2]
 8003676:	2220      	movs	r2, #32
 8003678:	431a      	orrs	r2, r3
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2184      	movs	r1, #132	; 0x84
 800367e:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2284      	movs	r2, #132	; 0x84
 8003684:	589b      	ldr	r3, [r3, r2]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d100      	bne.n	800368c <HAL_UART_IRQHandler+0x1a4>
 800368a:	e201      	b.n	8003a90 <HAL_UART_IRQHandler+0x5a8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800368c:	23a4      	movs	r3, #164	; 0xa4
 800368e:	18fb      	adds	r3, r7, r3
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	2220      	movs	r2, #32
 8003694:	4013      	ands	r3, r2
 8003696:	d00e      	beq.n	80036b6 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003698:	23a0      	movs	r3, #160	; 0xa0
 800369a:	18fb      	adds	r3, r7, r3
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	2220      	movs	r2, #32
 80036a0:	4013      	ands	r3, r2
 80036a2:	d008      	beq.n	80036b6 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d004      	beq.n	80036b6 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80036b0:	687a      	ldr	r2, [r7, #4]
 80036b2:	0010      	movs	r0, r2
 80036b4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2284      	movs	r2, #132	; 0x84
 80036ba:	589b      	ldr	r3, [r3, r2]
 80036bc:	2194      	movs	r1, #148	; 0x94
 80036be:	187a      	adds	r2, r7, r1
 80036c0:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	689b      	ldr	r3, [r3, #8]
 80036c8:	2240      	movs	r2, #64	; 0x40
 80036ca:	4013      	ands	r3, r2
 80036cc:	2b40      	cmp	r3, #64	; 0x40
 80036ce:	d004      	beq.n	80036da <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80036d0:	187b      	adds	r3, r7, r1
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	2228      	movs	r2, #40	; 0x28
 80036d6:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80036d8:	d047      	beq.n	800376a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	0018      	movs	r0, r3
 80036de:	f000 ff2f 	bl	8004540 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	689b      	ldr	r3, [r3, #8]
 80036e8:	2240      	movs	r2, #64	; 0x40
 80036ea:	4013      	ands	r3, r2
 80036ec:	2b40      	cmp	r3, #64	; 0x40
 80036ee:	d137      	bne.n	8003760 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80036f0:	f3ef 8310 	mrs	r3, PRIMASK
 80036f4:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 80036f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80036f8:	2090      	movs	r0, #144	; 0x90
 80036fa:	183a      	adds	r2, r7, r0
 80036fc:	6013      	str	r3, [r2, #0]
 80036fe:	2301      	movs	r3, #1
 8003700:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003702:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003704:	f383 8810 	msr	PRIMASK, r3
}
 8003708:	46c0      	nop			; (mov r8, r8)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	689a      	ldr	r2, [r3, #8]
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	2140      	movs	r1, #64	; 0x40
 8003716:	438a      	bics	r2, r1
 8003718:	609a      	str	r2, [r3, #8]
 800371a:	183b      	adds	r3, r7, r0
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003720:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003722:	f383 8810 	msr	PRIMASK, r3
}
 8003726:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800372c:	2b00      	cmp	r3, #0
 800372e:	d012      	beq.n	8003756 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003734:	4a14      	ldr	r2, [pc, #80]	; (8003788 <HAL_UART_IRQHandler+0x2a0>)
 8003736:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800373c:	0018      	movs	r0, r3
 800373e:	f7fe fc25 	bl	8001f8c <HAL_DMA_Abort_IT>
 8003742:	1e03      	subs	r3, r0, #0
 8003744:	d01a      	beq.n	800377c <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800374a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003750:	0018      	movs	r0, r3
 8003752:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003754:	e012      	b.n	800377c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	0018      	movs	r0, r3
 800375a:	f000 f9af 	bl	8003abc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800375e:	e00d      	b.n	800377c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	0018      	movs	r0, r3
 8003764:	f000 f9aa 	bl	8003abc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003768:	e008      	b.n	800377c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	0018      	movs	r0, r3
 800376e:	f000 f9a5 	bl	8003abc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2284      	movs	r2, #132	; 0x84
 8003776:	2100      	movs	r1, #0
 8003778:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800377a:	e189      	b.n	8003a90 <HAL_UART_IRQHandler+0x5a8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800377c:	46c0      	nop			; (mov r8, r8)
    return;
 800377e:	e187      	b.n	8003a90 <HAL_UART_IRQHandler+0x5a8>
 8003780:	0000080f 	.word	0x0000080f
 8003784:	04000120 	.word	0x04000120
 8003788:	08004609 	.word	0x08004609

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003790:	2b01      	cmp	r3, #1
 8003792:	d000      	beq.n	8003796 <HAL_UART_IRQHandler+0x2ae>
 8003794:	e13b      	b.n	8003a0e <HAL_UART_IRQHandler+0x526>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003796:	23a4      	movs	r3, #164	; 0xa4
 8003798:	18fb      	adds	r3, r7, r3
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	2210      	movs	r2, #16
 800379e:	4013      	ands	r3, r2
 80037a0:	d100      	bne.n	80037a4 <HAL_UART_IRQHandler+0x2bc>
 80037a2:	e134      	b.n	8003a0e <HAL_UART_IRQHandler+0x526>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80037a4:	23a0      	movs	r3, #160	; 0xa0
 80037a6:	18fb      	adds	r3, r7, r3
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	2210      	movs	r2, #16
 80037ac:	4013      	ands	r3, r2
 80037ae:	d100      	bne.n	80037b2 <HAL_UART_IRQHandler+0x2ca>
 80037b0:	e12d      	b.n	8003a0e <HAL_UART_IRQHandler+0x526>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	2210      	movs	r2, #16
 80037b8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	689b      	ldr	r3, [r3, #8]
 80037c0:	2240      	movs	r2, #64	; 0x40
 80037c2:	4013      	ands	r3, r2
 80037c4:	2b40      	cmp	r3, #64	; 0x40
 80037c6:	d000      	beq.n	80037ca <HAL_UART_IRQHandler+0x2e2>
 80037c8:	e0a1      	b.n	800390e <HAL_UART_IRQHandler+0x426>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	685a      	ldr	r2, [r3, #4]
 80037d2:	217e      	movs	r1, #126	; 0x7e
 80037d4:	187b      	adds	r3, r7, r1
 80037d6:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 80037d8:	187b      	adds	r3, r7, r1
 80037da:	881b      	ldrh	r3, [r3, #0]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d100      	bne.n	80037e2 <HAL_UART_IRQHandler+0x2fa>
 80037e0:	e158      	b.n	8003a94 <HAL_UART_IRQHandler+0x5ac>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2258      	movs	r2, #88	; 0x58
 80037e6:	5a9b      	ldrh	r3, [r3, r2]
 80037e8:	187a      	adds	r2, r7, r1
 80037ea:	8812      	ldrh	r2, [r2, #0]
 80037ec:	429a      	cmp	r2, r3
 80037ee:	d300      	bcc.n	80037f2 <HAL_UART_IRQHandler+0x30a>
 80037f0:	e150      	b.n	8003a94 <HAL_UART_IRQHandler+0x5ac>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	187a      	adds	r2, r7, r1
 80037f6:	215a      	movs	r1, #90	; 0x5a
 80037f8:	8812      	ldrh	r2, [r2, #0]
 80037fa:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	2220      	movs	r2, #32
 8003806:	4013      	ands	r3, r2
 8003808:	d16f      	bne.n	80038ea <HAL_UART_IRQHandler+0x402>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800380a:	f3ef 8310 	mrs	r3, PRIMASK
 800380e:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8003810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003812:	67bb      	str	r3, [r7, #120]	; 0x78
 8003814:	2301      	movs	r3, #1
 8003816:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003818:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800381a:	f383 8810 	msr	PRIMASK, r3
}
 800381e:	46c0      	nop			; (mov r8, r8)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	681a      	ldr	r2, [r3, #0]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	499e      	ldr	r1, [pc, #632]	; (8003aa4 <HAL_UART_IRQHandler+0x5bc>)
 800382c:	400a      	ands	r2, r1
 800382e:	601a      	str	r2, [r3, #0]
 8003830:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003832:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003834:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003836:	f383 8810 	msr	PRIMASK, r3
}
 800383a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800383c:	f3ef 8310 	mrs	r3, PRIMASK
 8003840:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8003842:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003844:	677b      	str	r3, [r7, #116]	; 0x74
 8003846:	2301      	movs	r3, #1
 8003848:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800384a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800384c:	f383 8810 	msr	PRIMASK, r3
}
 8003850:	46c0      	nop			; (mov r8, r8)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	689a      	ldr	r2, [r3, #8]
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	2101      	movs	r1, #1
 800385e:	438a      	bics	r2, r1
 8003860:	609a      	str	r2, [r3, #8]
 8003862:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003864:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003866:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003868:	f383 8810 	msr	PRIMASK, r3
}
 800386c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800386e:	f3ef 8310 	mrs	r3, PRIMASK
 8003872:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8003874:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003876:	673b      	str	r3, [r7, #112]	; 0x70
 8003878:	2301      	movs	r3, #1
 800387a:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800387c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800387e:	f383 8810 	msr	PRIMASK, r3
}
 8003882:	46c0      	nop			; (mov r8, r8)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	689a      	ldr	r2, [r3, #8]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	2140      	movs	r1, #64	; 0x40
 8003890:	438a      	bics	r2, r1
 8003892:	609a      	str	r2, [r3, #8]
 8003894:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003896:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003898:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800389a:	f383 8810 	msr	PRIMASK, r3
}
 800389e:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2280      	movs	r2, #128	; 0x80
 80038a4:	2120      	movs	r1, #32
 80038a6:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2200      	movs	r2, #0
 80038ac:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80038ae:	f3ef 8310 	mrs	r3, PRIMASK
 80038b2:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 80038b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80038b6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80038b8:	2301      	movs	r3, #1
 80038ba:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038bc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80038be:	f383 8810 	msr	PRIMASK, r3
}
 80038c2:	46c0      	nop			; (mov r8, r8)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	681a      	ldr	r2, [r3, #0]
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	2110      	movs	r1, #16
 80038d0:	438a      	bics	r2, r1
 80038d2:	601a      	str	r2, [r3, #0]
 80038d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038d6:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80038da:	f383 8810 	msr	PRIMASK, r3
}
 80038de:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038e4:	0018      	movs	r0, r3
 80038e6:	f7fe fb11 	bl	8001f0c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2202      	movs	r2, #2
 80038ee:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2258      	movs	r2, #88	; 0x58
 80038f4:	5a9a      	ldrh	r2, [r3, r2]
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	215a      	movs	r1, #90	; 0x5a
 80038fa:	5a5b      	ldrh	r3, [r3, r1]
 80038fc:	b29b      	uxth	r3, r3
 80038fe:	1ad3      	subs	r3, r2, r3
 8003900:	b29a      	uxth	r2, r3
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	0011      	movs	r1, r2
 8003906:	0018      	movs	r0, r3
 8003908:	f000 f8e0 	bl	8003acc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800390c:	e0c2      	b.n	8003a94 <HAL_UART_IRQHandler+0x5ac>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2258      	movs	r2, #88	; 0x58
 8003912:	5a99      	ldrh	r1, [r3, r2]
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	225a      	movs	r2, #90	; 0x5a
 8003918:	5a9b      	ldrh	r3, [r3, r2]
 800391a:	b29a      	uxth	r2, r3
 800391c:	208e      	movs	r0, #142	; 0x8e
 800391e:	183b      	adds	r3, r7, r0
 8003920:	1a8a      	subs	r2, r1, r2
 8003922:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	225a      	movs	r2, #90	; 0x5a
 8003928:	5a9b      	ldrh	r3, [r3, r2]
 800392a:	b29b      	uxth	r3, r3
 800392c:	2b00      	cmp	r3, #0
 800392e:	d100      	bne.n	8003932 <HAL_UART_IRQHandler+0x44a>
 8003930:	e0b2      	b.n	8003a98 <HAL_UART_IRQHandler+0x5b0>
          && (nb_rx_data > 0U))
 8003932:	183b      	adds	r3, r7, r0
 8003934:	881b      	ldrh	r3, [r3, #0]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d100      	bne.n	800393c <HAL_UART_IRQHandler+0x454>
 800393a:	e0ad      	b.n	8003a98 <HAL_UART_IRQHandler+0x5b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800393c:	f3ef 8310 	mrs	r3, PRIMASK
 8003940:	60fb      	str	r3, [r7, #12]
  return(result);
 8003942:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003944:	2488      	movs	r4, #136	; 0x88
 8003946:	193a      	adds	r2, r7, r4
 8003948:	6013      	str	r3, [r2, #0]
 800394a:	2301      	movs	r3, #1
 800394c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800394e:	693b      	ldr	r3, [r7, #16]
 8003950:	f383 8810 	msr	PRIMASK, r3
}
 8003954:	46c0      	nop			; (mov r8, r8)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	681a      	ldr	r2, [r3, #0]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4951      	ldr	r1, [pc, #324]	; (8003aa8 <HAL_UART_IRQHandler+0x5c0>)
 8003962:	400a      	ands	r2, r1
 8003964:	601a      	str	r2, [r3, #0]
 8003966:	193b      	adds	r3, r7, r4
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800396c:	697b      	ldr	r3, [r7, #20]
 800396e:	f383 8810 	msr	PRIMASK, r3
}
 8003972:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003974:	f3ef 8310 	mrs	r3, PRIMASK
 8003978:	61bb      	str	r3, [r7, #24]
  return(result);
 800397a:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800397c:	2484      	movs	r4, #132	; 0x84
 800397e:	193a      	adds	r2, r7, r4
 8003980:	6013      	str	r3, [r2, #0]
 8003982:	2301      	movs	r3, #1
 8003984:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003986:	69fb      	ldr	r3, [r7, #28]
 8003988:	f383 8810 	msr	PRIMASK, r3
}
 800398c:	46c0      	nop			; (mov r8, r8)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	689a      	ldr	r2, [r3, #8]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	2101      	movs	r1, #1
 800399a:	438a      	bics	r2, r1
 800399c:	609a      	str	r2, [r3, #8]
 800399e:	193b      	adds	r3, r7, r4
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039a4:	6a3b      	ldr	r3, [r7, #32]
 80039a6:	f383 8810 	msr	PRIMASK, r3
}
 80039aa:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2280      	movs	r2, #128	; 0x80
 80039b0:	2120      	movs	r1, #32
 80039b2:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2200      	movs	r2, #0
 80039b8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2200      	movs	r2, #0
 80039be:	669a      	str	r2, [r3, #104]	; 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80039c0:	f3ef 8310 	mrs	r3, PRIMASK
 80039c4:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80039c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80039c8:	2480      	movs	r4, #128	; 0x80
 80039ca:	193a      	adds	r2, r7, r4
 80039cc:	6013      	str	r3, [r2, #0]
 80039ce:	2301      	movs	r3, #1
 80039d0:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039d4:	f383 8810 	msr	PRIMASK, r3
}
 80039d8:	46c0      	nop			; (mov r8, r8)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	681a      	ldr	r2, [r3, #0]
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	2110      	movs	r1, #16
 80039e6:	438a      	bics	r2, r1
 80039e8:	601a      	str	r2, [r3, #0]
 80039ea:	193b      	adds	r3, r7, r4
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039f2:	f383 8810 	msr	PRIMASK, r3
}
 80039f6:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2202      	movs	r2, #2
 80039fc:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80039fe:	183b      	adds	r3, r7, r0
 8003a00:	881a      	ldrh	r2, [r3, #0]
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	0011      	movs	r1, r2
 8003a06:	0018      	movs	r0, r3
 8003a08:	f000 f860 	bl	8003acc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003a0c:	e044      	b.n	8003a98 <HAL_UART_IRQHandler+0x5b0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003a0e:	23a4      	movs	r3, #164	; 0xa4
 8003a10:	18fb      	adds	r3, r7, r3
 8003a12:	681a      	ldr	r2, [r3, #0]
 8003a14:	2380      	movs	r3, #128	; 0x80
 8003a16:	035b      	lsls	r3, r3, #13
 8003a18:	4013      	ands	r3, r2
 8003a1a:	d010      	beq.n	8003a3e <HAL_UART_IRQHandler+0x556>
 8003a1c:	239c      	movs	r3, #156	; 0x9c
 8003a1e:	18fb      	adds	r3, r7, r3
 8003a20:	681a      	ldr	r2, [r3, #0]
 8003a22:	2380      	movs	r3, #128	; 0x80
 8003a24:	03db      	lsls	r3, r3, #15
 8003a26:	4013      	ands	r3, r2
 8003a28:	d009      	beq.n	8003a3e <HAL_UART_IRQHandler+0x556>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	2280      	movs	r2, #128	; 0x80
 8003a30:	0352      	lsls	r2, r2, #13
 8003a32:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	0018      	movs	r0, r3
 8003a38:	f000 ffec 	bl	8004a14 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003a3c:	e02f      	b.n	8003a9e <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003a3e:	23a4      	movs	r3, #164	; 0xa4
 8003a40:	18fb      	adds	r3, r7, r3
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	2280      	movs	r2, #128	; 0x80
 8003a46:	4013      	ands	r3, r2
 8003a48:	d00f      	beq.n	8003a6a <HAL_UART_IRQHandler+0x582>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003a4a:	23a0      	movs	r3, #160	; 0xa0
 8003a4c:	18fb      	adds	r3, r7, r3
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	2280      	movs	r2, #128	; 0x80
 8003a52:	4013      	ands	r3, r2
 8003a54:	d009      	beq.n	8003a6a <HAL_UART_IRQHandler+0x582>
  {
    if (huart->TxISR != NULL)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d01e      	beq.n	8003a9c <HAL_UART_IRQHandler+0x5b4>
    {
      huart->TxISR(huart);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a62:	687a      	ldr	r2, [r7, #4]
 8003a64:	0010      	movs	r0, r2
 8003a66:	4798      	blx	r3
    }
    return;
 8003a68:	e018      	b.n	8003a9c <HAL_UART_IRQHandler+0x5b4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003a6a:	23a4      	movs	r3, #164	; 0xa4
 8003a6c:	18fb      	adds	r3, r7, r3
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	2240      	movs	r2, #64	; 0x40
 8003a72:	4013      	ands	r3, r2
 8003a74:	d013      	beq.n	8003a9e <HAL_UART_IRQHandler+0x5b6>
 8003a76:	23a0      	movs	r3, #160	; 0xa0
 8003a78:	18fb      	adds	r3, r7, r3
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	2240      	movs	r2, #64	; 0x40
 8003a7e:	4013      	ands	r3, r2
 8003a80:	d00d      	beq.n	8003a9e <HAL_UART_IRQHandler+0x5b6>
  {
    UART_EndTransmit_IT(huart);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	0018      	movs	r0, r3
 8003a86:	f000 fdd6 	bl	8004636 <UART_EndTransmit_IT>
    return;
 8003a8a:	e008      	b.n	8003a9e <HAL_UART_IRQHandler+0x5b6>
      return;
 8003a8c:	46c0      	nop			; (mov r8, r8)
 8003a8e:	e006      	b.n	8003a9e <HAL_UART_IRQHandler+0x5b6>
    return;
 8003a90:	46c0      	nop			; (mov r8, r8)
 8003a92:	e004      	b.n	8003a9e <HAL_UART_IRQHandler+0x5b6>
      return;
 8003a94:	46c0      	nop			; (mov r8, r8)
 8003a96:	e002      	b.n	8003a9e <HAL_UART_IRQHandler+0x5b6>
      return;
 8003a98:	46c0      	nop			; (mov r8, r8)
 8003a9a:	e000      	b.n	8003a9e <HAL_UART_IRQHandler+0x5b6>
    return;
 8003a9c:	46c0      	nop			; (mov r8, r8)
  }

}
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	b02b      	add	sp, #172	; 0xac
 8003aa2:	bd90      	pop	{r4, r7, pc}
 8003aa4:	fffffeff 	.word	0xfffffeff
 8003aa8:	fffffedf 	.word	0xfffffedf

08003aac <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b082      	sub	sp, #8
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003ab4:	46c0      	nop			; (mov r8, r8)
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	b002      	add	sp, #8
 8003aba:	bd80      	pop	{r7, pc}

08003abc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b082      	sub	sp, #8
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003ac4:	46c0      	nop			; (mov r8, r8)
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	b002      	add	sp, #8
 8003aca:	bd80      	pop	{r7, pc}

08003acc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b082      	sub	sp, #8
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
 8003ad4:	000a      	movs	r2, r1
 8003ad6:	1cbb      	adds	r3, r7, #2
 8003ad8:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003ada:	46c0      	nop			; (mov r8, r8)
 8003adc:	46bd      	mov	sp, r7
 8003ade:	b002      	add	sp, #8
 8003ae0:	bd80      	pop	{r7, pc}
	...

08003ae4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ae4:	b5b0      	push	{r4, r5, r7, lr}
 8003ae6:	b08e      	sub	sp, #56	; 0x38
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003aec:	231a      	movs	r3, #26
 8003aee:	2218      	movs	r2, #24
 8003af0:	189b      	adds	r3, r3, r2
 8003af2:	19db      	adds	r3, r3, r7
 8003af4:	2200      	movs	r2, #0
 8003af6:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003af8:	69fb      	ldr	r3, [r7, #28]
 8003afa:	689a      	ldr	r2, [r3, #8]
 8003afc:	69fb      	ldr	r3, [r7, #28]
 8003afe:	691b      	ldr	r3, [r3, #16]
 8003b00:	431a      	orrs	r2, r3
 8003b02:	69fb      	ldr	r3, [r7, #28]
 8003b04:	695b      	ldr	r3, [r3, #20]
 8003b06:	431a      	orrs	r2, r3
 8003b08:	69fb      	ldr	r3, [r7, #28]
 8003b0a:	69db      	ldr	r3, [r3, #28]
 8003b0c:	4313      	orrs	r3, r2
 8003b0e:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003b10:	69fb      	ldr	r3, [r7, #28]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4ac3      	ldr	r2, [pc, #780]	; (8003e24 <UART_SetConfig+0x340>)
 8003b18:	4013      	ands	r3, r2
 8003b1a:	0019      	movs	r1, r3
 8003b1c:	69fb      	ldr	r3, [r7, #28]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003b22:	430a      	orrs	r2, r1
 8003b24:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b26:	69fb      	ldr	r3, [r7, #28]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	685b      	ldr	r3, [r3, #4]
 8003b2c:	4abe      	ldr	r2, [pc, #760]	; (8003e28 <UART_SetConfig+0x344>)
 8003b2e:	4013      	ands	r3, r2
 8003b30:	0019      	movs	r1, r3
 8003b32:	69fb      	ldr	r3, [r7, #28]
 8003b34:	68da      	ldr	r2, [r3, #12]
 8003b36:	69fb      	ldr	r3, [r7, #28]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	430a      	orrs	r2, r1
 8003b3c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003b3e:	69fb      	ldr	r3, [r7, #28]
 8003b40:	699b      	ldr	r3, [r3, #24]
 8003b42:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003b44:	69fb      	ldr	r3, [r7, #28]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4ab8      	ldr	r2, [pc, #736]	; (8003e2c <UART_SetConfig+0x348>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d004      	beq.n	8003b58 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003b4e:	69fb      	ldr	r3, [r7, #28]
 8003b50:	6a1b      	ldr	r3, [r3, #32]
 8003b52:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003b54:	4313      	orrs	r3, r2
 8003b56:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003b58:	69fb      	ldr	r3, [r7, #28]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	689b      	ldr	r3, [r3, #8]
 8003b5e:	4ab4      	ldr	r2, [pc, #720]	; (8003e30 <UART_SetConfig+0x34c>)
 8003b60:	4013      	ands	r3, r2
 8003b62:	0019      	movs	r1, r3
 8003b64:	69fb      	ldr	r3, [r7, #28]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003b6a:	430a      	orrs	r2, r1
 8003b6c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003b6e:	69fb      	ldr	r3, [r7, #28]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4ab0      	ldr	r2, [pc, #704]	; (8003e34 <UART_SetConfig+0x350>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d131      	bne.n	8003bdc <UART_SetConfig+0xf8>
 8003b78:	4baf      	ldr	r3, [pc, #700]	; (8003e38 <UART_SetConfig+0x354>)
 8003b7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b7c:	2203      	movs	r2, #3
 8003b7e:	4013      	ands	r3, r2
 8003b80:	2b03      	cmp	r3, #3
 8003b82:	d01d      	beq.n	8003bc0 <UART_SetConfig+0xdc>
 8003b84:	d823      	bhi.n	8003bce <UART_SetConfig+0xea>
 8003b86:	2b02      	cmp	r3, #2
 8003b88:	d00c      	beq.n	8003ba4 <UART_SetConfig+0xc0>
 8003b8a:	d820      	bhi.n	8003bce <UART_SetConfig+0xea>
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d002      	beq.n	8003b96 <UART_SetConfig+0xb2>
 8003b90:	2b01      	cmp	r3, #1
 8003b92:	d00e      	beq.n	8003bb2 <UART_SetConfig+0xce>
 8003b94:	e01b      	b.n	8003bce <UART_SetConfig+0xea>
 8003b96:	231b      	movs	r3, #27
 8003b98:	2218      	movs	r2, #24
 8003b9a:	189b      	adds	r3, r3, r2
 8003b9c:	19db      	adds	r3, r3, r7
 8003b9e:	2201      	movs	r2, #1
 8003ba0:	701a      	strb	r2, [r3, #0]
 8003ba2:	e0b4      	b.n	8003d0e <UART_SetConfig+0x22a>
 8003ba4:	231b      	movs	r3, #27
 8003ba6:	2218      	movs	r2, #24
 8003ba8:	189b      	adds	r3, r3, r2
 8003baa:	19db      	adds	r3, r3, r7
 8003bac:	2202      	movs	r2, #2
 8003bae:	701a      	strb	r2, [r3, #0]
 8003bb0:	e0ad      	b.n	8003d0e <UART_SetConfig+0x22a>
 8003bb2:	231b      	movs	r3, #27
 8003bb4:	2218      	movs	r2, #24
 8003bb6:	189b      	adds	r3, r3, r2
 8003bb8:	19db      	adds	r3, r3, r7
 8003bba:	2204      	movs	r2, #4
 8003bbc:	701a      	strb	r2, [r3, #0]
 8003bbe:	e0a6      	b.n	8003d0e <UART_SetConfig+0x22a>
 8003bc0:	231b      	movs	r3, #27
 8003bc2:	2218      	movs	r2, #24
 8003bc4:	189b      	adds	r3, r3, r2
 8003bc6:	19db      	adds	r3, r3, r7
 8003bc8:	2208      	movs	r2, #8
 8003bca:	701a      	strb	r2, [r3, #0]
 8003bcc:	e09f      	b.n	8003d0e <UART_SetConfig+0x22a>
 8003bce:	231b      	movs	r3, #27
 8003bd0:	2218      	movs	r2, #24
 8003bd2:	189b      	adds	r3, r3, r2
 8003bd4:	19db      	adds	r3, r3, r7
 8003bd6:	2210      	movs	r2, #16
 8003bd8:	701a      	strb	r2, [r3, #0]
 8003bda:	e098      	b.n	8003d0e <UART_SetConfig+0x22a>
 8003bdc:	69fb      	ldr	r3, [r7, #28]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4a96      	ldr	r2, [pc, #600]	; (8003e3c <UART_SetConfig+0x358>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d131      	bne.n	8003c4a <UART_SetConfig+0x166>
 8003be6:	4b94      	ldr	r3, [pc, #592]	; (8003e38 <UART_SetConfig+0x354>)
 8003be8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bea:	220c      	movs	r2, #12
 8003bec:	4013      	ands	r3, r2
 8003bee:	2b0c      	cmp	r3, #12
 8003bf0:	d01d      	beq.n	8003c2e <UART_SetConfig+0x14a>
 8003bf2:	d823      	bhi.n	8003c3c <UART_SetConfig+0x158>
 8003bf4:	2b08      	cmp	r3, #8
 8003bf6:	d00c      	beq.n	8003c12 <UART_SetConfig+0x12e>
 8003bf8:	d820      	bhi.n	8003c3c <UART_SetConfig+0x158>
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d002      	beq.n	8003c04 <UART_SetConfig+0x120>
 8003bfe:	2b04      	cmp	r3, #4
 8003c00:	d00e      	beq.n	8003c20 <UART_SetConfig+0x13c>
 8003c02:	e01b      	b.n	8003c3c <UART_SetConfig+0x158>
 8003c04:	231b      	movs	r3, #27
 8003c06:	2218      	movs	r2, #24
 8003c08:	189b      	adds	r3, r3, r2
 8003c0a:	19db      	adds	r3, r3, r7
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	701a      	strb	r2, [r3, #0]
 8003c10:	e07d      	b.n	8003d0e <UART_SetConfig+0x22a>
 8003c12:	231b      	movs	r3, #27
 8003c14:	2218      	movs	r2, #24
 8003c16:	189b      	adds	r3, r3, r2
 8003c18:	19db      	adds	r3, r3, r7
 8003c1a:	2202      	movs	r2, #2
 8003c1c:	701a      	strb	r2, [r3, #0]
 8003c1e:	e076      	b.n	8003d0e <UART_SetConfig+0x22a>
 8003c20:	231b      	movs	r3, #27
 8003c22:	2218      	movs	r2, #24
 8003c24:	189b      	adds	r3, r3, r2
 8003c26:	19db      	adds	r3, r3, r7
 8003c28:	2204      	movs	r2, #4
 8003c2a:	701a      	strb	r2, [r3, #0]
 8003c2c:	e06f      	b.n	8003d0e <UART_SetConfig+0x22a>
 8003c2e:	231b      	movs	r3, #27
 8003c30:	2218      	movs	r2, #24
 8003c32:	189b      	adds	r3, r3, r2
 8003c34:	19db      	adds	r3, r3, r7
 8003c36:	2208      	movs	r2, #8
 8003c38:	701a      	strb	r2, [r3, #0]
 8003c3a:	e068      	b.n	8003d0e <UART_SetConfig+0x22a>
 8003c3c:	231b      	movs	r3, #27
 8003c3e:	2218      	movs	r2, #24
 8003c40:	189b      	adds	r3, r3, r2
 8003c42:	19db      	adds	r3, r3, r7
 8003c44:	2210      	movs	r2, #16
 8003c46:	701a      	strb	r2, [r3, #0]
 8003c48:	e061      	b.n	8003d0e <UART_SetConfig+0x22a>
 8003c4a:	69fb      	ldr	r3, [r7, #28]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4a7c      	ldr	r2, [pc, #496]	; (8003e40 <UART_SetConfig+0x35c>)
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d106      	bne.n	8003c62 <UART_SetConfig+0x17e>
 8003c54:	231b      	movs	r3, #27
 8003c56:	2218      	movs	r2, #24
 8003c58:	189b      	adds	r3, r3, r2
 8003c5a:	19db      	adds	r3, r3, r7
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	701a      	strb	r2, [r3, #0]
 8003c60:	e055      	b.n	8003d0e <UART_SetConfig+0x22a>
 8003c62:	69fb      	ldr	r3, [r7, #28]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4a77      	ldr	r2, [pc, #476]	; (8003e44 <UART_SetConfig+0x360>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d106      	bne.n	8003c7a <UART_SetConfig+0x196>
 8003c6c:	231b      	movs	r3, #27
 8003c6e:	2218      	movs	r2, #24
 8003c70:	189b      	adds	r3, r3, r2
 8003c72:	19db      	adds	r3, r3, r7
 8003c74:	2200      	movs	r2, #0
 8003c76:	701a      	strb	r2, [r3, #0]
 8003c78:	e049      	b.n	8003d0e <UART_SetConfig+0x22a>
 8003c7a:	69fb      	ldr	r3, [r7, #28]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4a6b      	ldr	r2, [pc, #428]	; (8003e2c <UART_SetConfig+0x348>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d13e      	bne.n	8003d02 <UART_SetConfig+0x21e>
 8003c84:	4b6c      	ldr	r3, [pc, #432]	; (8003e38 <UART_SetConfig+0x354>)
 8003c86:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003c88:	23c0      	movs	r3, #192	; 0xc0
 8003c8a:	011b      	lsls	r3, r3, #4
 8003c8c:	4013      	ands	r3, r2
 8003c8e:	22c0      	movs	r2, #192	; 0xc0
 8003c90:	0112      	lsls	r2, r2, #4
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d027      	beq.n	8003ce6 <UART_SetConfig+0x202>
 8003c96:	22c0      	movs	r2, #192	; 0xc0
 8003c98:	0112      	lsls	r2, r2, #4
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d82a      	bhi.n	8003cf4 <UART_SetConfig+0x210>
 8003c9e:	2280      	movs	r2, #128	; 0x80
 8003ca0:	0112      	lsls	r2, r2, #4
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d011      	beq.n	8003cca <UART_SetConfig+0x1e6>
 8003ca6:	2280      	movs	r2, #128	; 0x80
 8003ca8:	0112      	lsls	r2, r2, #4
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d822      	bhi.n	8003cf4 <UART_SetConfig+0x210>
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d004      	beq.n	8003cbc <UART_SetConfig+0x1d8>
 8003cb2:	2280      	movs	r2, #128	; 0x80
 8003cb4:	00d2      	lsls	r2, r2, #3
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d00e      	beq.n	8003cd8 <UART_SetConfig+0x1f4>
 8003cba:	e01b      	b.n	8003cf4 <UART_SetConfig+0x210>
 8003cbc:	231b      	movs	r3, #27
 8003cbe:	2218      	movs	r2, #24
 8003cc0:	189b      	adds	r3, r3, r2
 8003cc2:	19db      	adds	r3, r3, r7
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	701a      	strb	r2, [r3, #0]
 8003cc8:	e021      	b.n	8003d0e <UART_SetConfig+0x22a>
 8003cca:	231b      	movs	r3, #27
 8003ccc:	2218      	movs	r2, #24
 8003cce:	189b      	adds	r3, r3, r2
 8003cd0:	19db      	adds	r3, r3, r7
 8003cd2:	2202      	movs	r2, #2
 8003cd4:	701a      	strb	r2, [r3, #0]
 8003cd6:	e01a      	b.n	8003d0e <UART_SetConfig+0x22a>
 8003cd8:	231b      	movs	r3, #27
 8003cda:	2218      	movs	r2, #24
 8003cdc:	189b      	adds	r3, r3, r2
 8003cde:	19db      	adds	r3, r3, r7
 8003ce0:	2204      	movs	r2, #4
 8003ce2:	701a      	strb	r2, [r3, #0]
 8003ce4:	e013      	b.n	8003d0e <UART_SetConfig+0x22a>
 8003ce6:	231b      	movs	r3, #27
 8003ce8:	2218      	movs	r2, #24
 8003cea:	189b      	adds	r3, r3, r2
 8003cec:	19db      	adds	r3, r3, r7
 8003cee:	2208      	movs	r2, #8
 8003cf0:	701a      	strb	r2, [r3, #0]
 8003cf2:	e00c      	b.n	8003d0e <UART_SetConfig+0x22a>
 8003cf4:	231b      	movs	r3, #27
 8003cf6:	2218      	movs	r2, #24
 8003cf8:	189b      	adds	r3, r3, r2
 8003cfa:	19db      	adds	r3, r3, r7
 8003cfc:	2210      	movs	r2, #16
 8003cfe:	701a      	strb	r2, [r3, #0]
 8003d00:	e005      	b.n	8003d0e <UART_SetConfig+0x22a>
 8003d02:	231b      	movs	r3, #27
 8003d04:	2218      	movs	r2, #24
 8003d06:	189b      	adds	r3, r3, r2
 8003d08:	19db      	adds	r3, r3, r7
 8003d0a:	2210      	movs	r2, #16
 8003d0c:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003d0e:	69fb      	ldr	r3, [r7, #28]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4a46      	ldr	r2, [pc, #280]	; (8003e2c <UART_SetConfig+0x348>)
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d000      	beq.n	8003d1a <UART_SetConfig+0x236>
 8003d18:	e09a      	b.n	8003e50 <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003d1a:	231b      	movs	r3, #27
 8003d1c:	2218      	movs	r2, #24
 8003d1e:	189b      	adds	r3, r3, r2
 8003d20:	19db      	adds	r3, r3, r7
 8003d22:	781b      	ldrb	r3, [r3, #0]
 8003d24:	2b08      	cmp	r3, #8
 8003d26:	d01d      	beq.n	8003d64 <UART_SetConfig+0x280>
 8003d28:	dc20      	bgt.n	8003d6c <UART_SetConfig+0x288>
 8003d2a:	2b04      	cmp	r3, #4
 8003d2c:	d015      	beq.n	8003d5a <UART_SetConfig+0x276>
 8003d2e:	dc1d      	bgt.n	8003d6c <UART_SetConfig+0x288>
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d002      	beq.n	8003d3a <UART_SetConfig+0x256>
 8003d34:	2b02      	cmp	r3, #2
 8003d36:	d005      	beq.n	8003d44 <UART_SetConfig+0x260>
 8003d38:	e018      	b.n	8003d6c <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d3a:	f7ff f8b9 	bl	8002eb0 <HAL_RCC_GetPCLK1Freq>
 8003d3e:	0003      	movs	r3, r0
 8003d40:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003d42:	e01c      	b.n	8003d7e <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003d44:	4b3c      	ldr	r3, [pc, #240]	; (8003e38 <UART_SetConfig+0x354>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	2210      	movs	r2, #16
 8003d4a:	4013      	ands	r3, r2
 8003d4c:	d002      	beq.n	8003d54 <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003d4e:	4b3e      	ldr	r3, [pc, #248]	; (8003e48 <UART_SetConfig+0x364>)
 8003d50:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003d52:	e014      	b.n	8003d7e <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 8003d54:	4b3d      	ldr	r3, [pc, #244]	; (8003e4c <UART_SetConfig+0x368>)
 8003d56:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003d58:	e011      	b.n	8003d7e <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d5a:	f7fe fff9 	bl	8002d50 <HAL_RCC_GetSysClockFreq>
 8003d5e:	0003      	movs	r3, r0
 8003d60:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003d62:	e00c      	b.n	8003d7e <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d64:	2380      	movs	r3, #128	; 0x80
 8003d66:	021b      	lsls	r3, r3, #8
 8003d68:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003d6a:	e008      	b.n	8003d7e <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8003d70:	231a      	movs	r3, #26
 8003d72:	2218      	movs	r2, #24
 8003d74:	189b      	adds	r3, r3, r2
 8003d76:	19db      	adds	r3, r3, r7
 8003d78:	2201      	movs	r2, #1
 8003d7a:	701a      	strb	r2, [r3, #0]
        break;
 8003d7c:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003d7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d100      	bne.n	8003d86 <UART_SetConfig+0x2a2>
 8003d84:	e133      	b.n	8003fee <UART_SetConfig+0x50a>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003d86:	69fb      	ldr	r3, [r7, #28]
 8003d88:	685a      	ldr	r2, [r3, #4]
 8003d8a:	0013      	movs	r3, r2
 8003d8c:	005b      	lsls	r3, r3, #1
 8003d8e:	189b      	adds	r3, r3, r2
 8003d90:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d92:	429a      	cmp	r2, r3
 8003d94:	d305      	bcc.n	8003da2 <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003d96:	69fb      	ldr	r3, [r7, #28]
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003d9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d9e:	429a      	cmp	r2, r3
 8003da0:	d906      	bls.n	8003db0 <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 8003da2:	231a      	movs	r3, #26
 8003da4:	2218      	movs	r2, #24
 8003da6:	189b      	adds	r3, r3, r2
 8003da8:	19db      	adds	r3, r3, r7
 8003daa:	2201      	movs	r2, #1
 8003dac:	701a      	strb	r2, [r3, #0]
 8003dae:	e11e      	b.n	8003fee <UART_SetConfig+0x50a>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003db0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003db2:	613b      	str	r3, [r7, #16]
 8003db4:	2300      	movs	r3, #0
 8003db6:	617b      	str	r3, [r7, #20]
 8003db8:	6939      	ldr	r1, [r7, #16]
 8003dba:	697a      	ldr	r2, [r7, #20]
 8003dbc:	000b      	movs	r3, r1
 8003dbe:	0e1b      	lsrs	r3, r3, #24
 8003dc0:	0010      	movs	r0, r2
 8003dc2:	0205      	lsls	r5, r0, #8
 8003dc4:	431d      	orrs	r5, r3
 8003dc6:	000b      	movs	r3, r1
 8003dc8:	021c      	lsls	r4, r3, #8
 8003dca:	69fb      	ldr	r3, [r7, #28]
 8003dcc:	685b      	ldr	r3, [r3, #4]
 8003dce:	085b      	lsrs	r3, r3, #1
 8003dd0:	60bb      	str	r3, [r7, #8]
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	60fb      	str	r3, [r7, #12]
 8003dd6:	68b8      	ldr	r0, [r7, #8]
 8003dd8:	68f9      	ldr	r1, [r7, #12]
 8003dda:	1900      	adds	r0, r0, r4
 8003ddc:	4169      	adcs	r1, r5
 8003dde:	69fb      	ldr	r3, [r7, #28]
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	603b      	str	r3, [r7, #0]
 8003de4:	2300      	movs	r3, #0
 8003de6:	607b      	str	r3, [r7, #4]
 8003de8:	683a      	ldr	r2, [r7, #0]
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	f7fc fb14 	bl	8000418 <__aeabi_uldivmod>
 8003df0:	0002      	movs	r2, r0
 8003df2:	000b      	movs	r3, r1
 8003df4:	0013      	movs	r3, r2
 8003df6:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003df8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003dfa:	23c0      	movs	r3, #192	; 0xc0
 8003dfc:	009b      	lsls	r3, r3, #2
 8003dfe:	429a      	cmp	r2, r3
 8003e00:	d309      	bcc.n	8003e16 <UART_SetConfig+0x332>
 8003e02:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003e04:	2380      	movs	r3, #128	; 0x80
 8003e06:	035b      	lsls	r3, r3, #13
 8003e08:	429a      	cmp	r2, r3
 8003e0a:	d204      	bcs.n	8003e16 <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 8003e0c:	69fb      	ldr	r3, [r7, #28]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003e12:	60da      	str	r2, [r3, #12]
 8003e14:	e0eb      	b.n	8003fee <UART_SetConfig+0x50a>
        }
        else
        {
          ret = HAL_ERROR;
 8003e16:	231a      	movs	r3, #26
 8003e18:	2218      	movs	r2, #24
 8003e1a:	189b      	adds	r3, r3, r2
 8003e1c:	19db      	adds	r3, r3, r7
 8003e1e:	2201      	movs	r2, #1
 8003e20:	701a      	strb	r2, [r3, #0]
 8003e22:	e0e4      	b.n	8003fee <UART_SetConfig+0x50a>
 8003e24:	efff69f3 	.word	0xefff69f3
 8003e28:	ffffcfff 	.word	0xffffcfff
 8003e2c:	40004800 	.word	0x40004800
 8003e30:	fffff4ff 	.word	0xfffff4ff
 8003e34:	40013800 	.word	0x40013800
 8003e38:	40021000 	.word	0x40021000
 8003e3c:	40004400 	.word	0x40004400
 8003e40:	40004c00 	.word	0x40004c00
 8003e44:	40005000 	.word	0x40005000
 8003e48:	003d0900 	.word	0x003d0900
 8003e4c:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003e50:	69fb      	ldr	r3, [r7, #28]
 8003e52:	69da      	ldr	r2, [r3, #28]
 8003e54:	2380      	movs	r3, #128	; 0x80
 8003e56:	021b      	lsls	r3, r3, #8
 8003e58:	429a      	cmp	r2, r3
 8003e5a:	d000      	beq.n	8003e5e <UART_SetConfig+0x37a>
 8003e5c:	e070      	b.n	8003f40 <UART_SetConfig+0x45c>
  {
    switch (clocksource)
 8003e5e:	231b      	movs	r3, #27
 8003e60:	2218      	movs	r2, #24
 8003e62:	189b      	adds	r3, r3, r2
 8003e64:	19db      	adds	r3, r3, r7
 8003e66:	781b      	ldrb	r3, [r3, #0]
 8003e68:	2b08      	cmp	r3, #8
 8003e6a:	d822      	bhi.n	8003eb2 <UART_SetConfig+0x3ce>
 8003e6c:	009a      	lsls	r2, r3, #2
 8003e6e:	4b67      	ldr	r3, [pc, #412]	; (800400c <UART_SetConfig+0x528>)
 8003e70:	18d3      	adds	r3, r2, r3
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e76:	f7ff f81b 	bl	8002eb0 <HAL_RCC_GetPCLK1Freq>
 8003e7a:	0003      	movs	r3, r0
 8003e7c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003e7e:	e021      	b.n	8003ec4 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003e80:	f7ff f82c 	bl	8002edc <HAL_RCC_GetPCLK2Freq>
 8003e84:	0003      	movs	r3, r0
 8003e86:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003e88:	e01c      	b.n	8003ec4 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003e8a:	4b61      	ldr	r3, [pc, #388]	; (8004010 <UART_SetConfig+0x52c>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	2210      	movs	r2, #16
 8003e90:	4013      	ands	r3, r2
 8003e92:	d002      	beq.n	8003e9a <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003e94:	4b5f      	ldr	r3, [pc, #380]	; (8004014 <UART_SetConfig+0x530>)
 8003e96:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003e98:	e014      	b.n	8003ec4 <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 8003e9a:	4b5f      	ldr	r3, [pc, #380]	; (8004018 <UART_SetConfig+0x534>)
 8003e9c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003e9e:	e011      	b.n	8003ec4 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ea0:	f7fe ff56 	bl	8002d50 <HAL_RCC_GetSysClockFreq>
 8003ea4:	0003      	movs	r3, r0
 8003ea6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003ea8:	e00c      	b.n	8003ec4 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003eaa:	2380      	movs	r3, #128	; 0x80
 8003eac:	021b      	lsls	r3, r3, #8
 8003eae:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003eb0:	e008      	b.n	8003ec4 <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8003eb6:	231a      	movs	r3, #26
 8003eb8:	2218      	movs	r2, #24
 8003eba:	189b      	adds	r3, r3, r2
 8003ebc:	19db      	adds	r3, r3, r7
 8003ebe:	2201      	movs	r2, #1
 8003ec0:	701a      	strb	r2, [r3, #0]
        break;
 8003ec2:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003ec4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d100      	bne.n	8003ecc <UART_SetConfig+0x3e8>
 8003eca:	e090      	b.n	8003fee <UART_SetConfig+0x50a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003ecc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ece:	005a      	lsls	r2, r3, #1
 8003ed0:	69fb      	ldr	r3, [r7, #28]
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	085b      	lsrs	r3, r3, #1
 8003ed6:	18d2      	adds	r2, r2, r3
 8003ed8:	69fb      	ldr	r3, [r7, #28]
 8003eda:	685b      	ldr	r3, [r3, #4]
 8003edc:	0019      	movs	r1, r3
 8003ede:	0010      	movs	r0, r2
 8003ee0:	f7fc f924 	bl	800012c <__udivsi3>
 8003ee4:	0003      	movs	r3, r0
 8003ee6:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003ee8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eea:	2b0f      	cmp	r3, #15
 8003eec:	d921      	bls.n	8003f32 <UART_SetConfig+0x44e>
 8003eee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003ef0:	2380      	movs	r3, #128	; 0x80
 8003ef2:	025b      	lsls	r3, r3, #9
 8003ef4:	429a      	cmp	r2, r3
 8003ef6:	d21c      	bcs.n	8003f32 <UART_SetConfig+0x44e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003ef8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003efa:	b29a      	uxth	r2, r3
 8003efc:	200e      	movs	r0, #14
 8003efe:	2418      	movs	r4, #24
 8003f00:	1903      	adds	r3, r0, r4
 8003f02:	19db      	adds	r3, r3, r7
 8003f04:	210f      	movs	r1, #15
 8003f06:	438a      	bics	r2, r1
 8003f08:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003f0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f0c:	085b      	lsrs	r3, r3, #1
 8003f0e:	b29b      	uxth	r3, r3
 8003f10:	2207      	movs	r2, #7
 8003f12:	4013      	ands	r3, r2
 8003f14:	b299      	uxth	r1, r3
 8003f16:	1903      	adds	r3, r0, r4
 8003f18:	19db      	adds	r3, r3, r7
 8003f1a:	1902      	adds	r2, r0, r4
 8003f1c:	19d2      	adds	r2, r2, r7
 8003f1e:	8812      	ldrh	r2, [r2, #0]
 8003f20:	430a      	orrs	r2, r1
 8003f22:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003f24:	69fb      	ldr	r3, [r7, #28]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	1902      	adds	r2, r0, r4
 8003f2a:	19d2      	adds	r2, r2, r7
 8003f2c:	8812      	ldrh	r2, [r2, #0]
 8003f2e:	60da      	str	r2, [r3, #12]
 8003f30:	e05d      	b.n	8003fee <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 8003f32:	231a      	movs	r3, #26
 8003f34:	2218      	movs	r2, #24
 8003f36:	189b      	adds	r3, r3, r2
 8003f38:	19db      	adds	r3, r3, r7
 8003f3a:	2201      	movs	r2, #1
 8003f3c:	701a      	strb	r2, [r3, #0]
 8003f3e:	e056      	b.n	8003fee <UART_SetConfig+0x50a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003f40:	231b      	movs	r3, #27
 8003f42:	2218      	movs	r2, #24
 8003f44:	189b      	adds	r3, r3, r2
 8003f46:	19db      	adds	r3, r3, r7
 8003f48:	781b      	ldrb	r3, [r3, #0]
 8003f4a:	2b08      	cmp	r3, #8
 8003f4c:	d822      	bhi.n	8003f94 <UART_SetConfig+0x4b0>
 8003f4e:	009a      	lsls	r2, r3, #2
 8003f50:	4b32      	ldr	r3, [pc, #200]	; (800401c <UART_SetConfig+0x538>)
 8003f52:	18d3      	adds	r3, r2, r3
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f58:	f7fe ffaa 	bl	8002eb0 <HAL_RCC_GetPCLK1Freq>
 8003f5c:	0003      	movs	r3, r0
 8003f5e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003f60:	e021      	b.n	8003fa6 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003f62:	f7fe ffbb 	bl	8002edc <HAL_RCC_GetPCLK2Freq>
 8003f66:	0003      	movs	r3, r0
 8003f68:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003f6a:	e01c      	b.n	8003fa6 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003f6c:	4b28      	ldr	r3, [pc, #160]	; (8004010 <UART_SetConfig+0x52c>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	2210      	movs	r2, #16
 8003f72:	4013      	ands	r3, r2
 8003f74:	d002      	beq.n	8003f7c <UART_SetConfig+0x498>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003f76:	4b27      	ldr	r3, [pc, #156]	; (8004014 <UART_SetConfig+0x530>)
 8003f78:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003f7a:	e014      	b.n	8003fa6 <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 8003f7c:	4b26      	ldr	r3, [pc, #152]	; (8004018 <UART_SetConfig+0x534>)
 8003f7e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003f80:	e011      	b.n	8003fa6 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f82:	f7fe fee5 	bl	8002d50 <HAL_RCC_GetSysClockFreq>
 8003f86:	0003      	movs	r3, r0
 8003f88:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003f8a:	e00c      	b.n	8003fa6 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f8c:	2380      	movs	r3, #128	; 0x80
 8003f8e:	021b      	lsls	r3, r3, #8
 8003f90:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003f92:	e008      	b.n	8003fa6 <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 8003f94:	2300      	movs	r3, #0
 8003f96:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8003f98:	231a      	movs	r3, #26
 8003f9a:	2218      	movs	r2, #24
 8003f9c:	189b      	adds	r3, r3, r2
 8003f9e:	19db      	adds	r3, r3, r7
 8003fa0:	2201      	movs	r2, #1
 8003fa2:	701a      	strb	r2, [r3, #0]
        break;
 8003fa4:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8003fa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d020      	beq.n	8003fee <UART_SetConfig+0x50a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003fac:	69fb      	ldr	r3, [r7, #28]
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	085a      	lsrs	r2, r3, #1
 8003fb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fb4:	18d2      	adds	r2, r2, r3
 8003fb6:	69fb      	ldr	r3, [r7, #28]
 8003fb8:	685b      	ldr	r3, [r3, #4]
 8003fba:	0019      	movs	r1, r3
 8003fbc:	0010      	movs	r0, r2
 8003fbe:	f7fc f8b5 	bl	800012c <__udivsi3>
 8003fc2:	0003      	movs	r3, r0
 8003fc4:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003fc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fc8:	2b0f      	cmp	r3, #15
 8003fca:	d90a      	bls.n	8003fe2 <UART_SetConfig+0x4fe>
 8003fcc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003fce:	2380      	movs	r3, #128	; 0x80
 8003fd0:	025b      	lsls	r3, r3, #9
 8003fd2:	429a      	cmp	r2, r3
 8003fd4:	d205      	bcs.n	8003fe2 <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003fd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fd8:	b29a      	uxth	r2, r3
 8003fda:	69fb      	ldr	r3, [r7, #28]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	60da      	str	r2, [r3, #12]
 8003fe0:	e005      	b.n	8003fee <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 8003fe2:	231a      	movs	r3, #26
 8003fe4:	2218      	movs	r2, #24
 8003fe6:	189b      	adds	r3, r3, r2
 8003fe8:	19db      	adds	r3, r3, r7
 8003fea:	2201      	movs	r2, #1
 8003fec:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003fee:	69fb      	ldr	r3, [r7, #28]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003ff4:	69fb      	ldr	r3, [r7, #28]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003ffa:	231a      	movs	r3, #26
 8003ffc:	2218      	movs	r2, #24
 8003ffe:	189b      	adds	r3, r3, r2
 8004000:	19db      	adds	r3, r3, r7
 8004002:	781b      	ldrb	r3, [r3, #0]
}
 8004004:	0018      	movs	r0, r3
 8004006:	46bd      	mov	sp, r7
 8004008:	b00e      	add	sp, #56	; 0x38
 800400a:	bdb0      	pop	{r4, r5, r7, pc}
 800400c:	08005df8 	.word	0x08005df8
 8004010:	40021000 	.word	0x40021000
 8004014:	003d0900 	.word	0x003d0900
 8004018:	00f42400 	.word	0x00f42400
 800401c:	08005e1c 	.word	0x08005e1c

08004020 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b082      	sub	sp, #8
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800402c:	2201      	movs	r2, #1
 800402e:	4013      	ands	r3, r2
 8004030:	d00b      	beq.n	800404a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	685b      	ldr	r3, [r3, #4]
 8004038:	4a4a      	ldr	r2, [pc, #296]	; (8004164 <UART_AdvFeatureConfig+0x144>)
 800403a:	4013      	ands	r3, r2
 800403c:	0019      	movs	r1, r3
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	430a      	orrs	r2, r1
 8004048:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800404e:	2202      	movs	r2, #2
 8004050:	4013      	ands	r3, r2
 8004052:	d00b      	beq.n	800406c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	685b      	ldr	r3, [r3, #4]
 800405a:	4a43      	ldr	r2, [pc, #268]	; (8004168 <UART_AdvFeatureConfig+0x148>)
 800405c:	4013      	ands	r3, r2
 800405e:	0019      	movs	r1, r3
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	430a      	orrs	r2, r1
 800406a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004070:	2204      	movs	r2, #4
 8004072:	4013      	ands	r3, r2
 8004074:	d00b      	beq.n	800408e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	685b      	ldr	r3, [r3, #4]
 800407c:	4a3b      	ldr	r2, [pc, #236]	; (800416c <UART_AdvFeatureConfig+0x14c>)
 800407e:	4013      	ands	r3, r2
 8004080:	0019      	movs	r1, r3
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	430a      	orrs	r2, r1
 800408c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004092:	2208      	movs	r2, #8
 8004094:	4013      	ands	r3, r2
 8004096:	d00b      	beq.n	80040b0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	4a34      	ldr	r2, [pc, #208]	; (8004170 <UART_AdvFeatureConfig+0x150>)
 80040a0:	4013      	ands	r3, r2
 80040a2:	0019      	movs	r1, r3
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	430a      	orrs	r2, r1
 80040ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b4:	2210      	movs	r2, #16
 80040b6:	4013      	ands	r3, r2
 80040b8:	d00b      	beq.n	80040d2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	689b      	ldr	r3, [r3, #8]
 80040c0:	4a2c      	ldr	r2, [pc, #176]	; (8004174 <UART_AdvFeatureConfig+0x154>)
 80040c2:	4013      	ands	r3, r2
 80040c4:	0019      	movs	r1, r3
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	430a      	orrs	r2, r1
 80040d0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040d6:	2220      	movs	r2, #32
 80040d8:	4013      	ands	r3, r2
 80040da:	d00b      	beq.n	80040f4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	689b      	ldr	r3, [r3, #8]
 80040e2:	4a25      	ldr	r2, [pc, #148]	; (8004178 <UART_AdvFeatureConfig+0x158>)
 80040e4:	4013      	ands	r3, r2
 80040e6:	0019      	movs	r1, r3
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	430a      	orrs	r2, r1
 80040f2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040f8:	2240      	movs	r2, #64	; 0x40
 80040fa:	4013      	ands	r3, r2
 80040fc:	d01d      	beq.n	800413a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	4a1d      	ldr	r2, [pc, #116]	; (800417c <UART_AdvFeatureConfig+0x15c>)
 8004106:	4013      	ands	r3, r2
 8004108:	0019      	movs	r1, r3
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	430a      	orrs	r2, r1
 8004114:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800411a:	2380      	movs	r3, #128	; 0x80
 800411c:	035b      	lsls	r3, r3, #13
 800411e:	429a      	cmp	r2, r3
 8004120:	d10b      	bne.n	800413a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	685b      	ldr	r3, [r3, #4]
 8004128:	4a15      	ldr	r2, [pc, #84]	; (8004180 <UART_AdvFeatureConfig+0x160>)
 800412a:	4013      	ands	r3, r2
 800412c:	0019      	movs	r1, r3
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	430a      	orrs	r2, r1
 8004138:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800413e:	2280      	movs	r2, #128	; 0x80
 8004140:	4013      	ands	r3, r2
 8004142:	d00b      	beq.n	800415c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	685b      	ldr	r3, [r3, #4]
 800414a:	4a0e      	ldr	r2, [pc, #56]	; (8004184 <UART_AdvFeatureConfig+0x164>)
 800414c:	4013      	ands	r3, r2
 800414e:	0019      	movs	r1, r3
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	430a      	orrs	r2, r1
 800415a:	605a      	str	r2, [r3, #4]
  }
}
 800415c:	46c0      	nop			; (mov r8, r8)
 800415e:	46bd      	mov	sp, r7
 8004160:	b002      	add	sp, #8
 8004162:	bd80      	pop	{r7, pc}
 8004164:	fffdffff 	.word	0xfffdffff
 8004168:	fffeffff 	.word	0xfffeffff
 800416c:	fffbffff 	.word	0xfffbffff
 8004170:	ffff7fff 	.word	0xffff7fff
 8004174:	ffffefff 	.word	0xffffefff
 8004178:	ffffdfff 	.word	0xffffdfff
 800417c:	ffefffff 	.word	0xffefffff
 8004180:	ff9fffff 	.word	0xff9fffff
 8004184:	fff7ffff 	.word	0xfff7ffff

08004188 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b092      	sub	sp, #72	; 0x48
 800418c:	af02      	add	r7, sp, #8
 800418e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2284      	movs	r2, #132	; 0x84
 8004194:	2100      	movs	r1, #0
 8004196:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004198:	f7fd fdac 	bl	8001cf4 <HAL_GetTick>
 800419c:	0003      	movs	r3, r0
 800419e:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	2208      	movs	r2, #8
 80041a8:	4013      	ands	r3, r2
 80041aa:	2b08      	cmp	r3, #8
 80041ac:	d12c      	bne.n	8004208 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80041ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041b0:	2280      	movs	r2, #128	; 0x80
 80041b2:	0391      	lsls	r1, r2, #14
 80041b4:	6878      	ldr	r0, [r7, #4]
 80041b6:	4a46      	ldr	r2, [pc, #280]	; (80042d0 <UART_CheckIdleState+0x148>)
 80041b8:	9200      	str	r2, [sp, #0]
 80041ba:	2200      	movs	r2, #0
 80041bc:	f000 f88c 	bl	80042d8 <UART_WaitOnFlagUntilTimeout>
 80041c0:	1e03      	subs	r3, r0, #0
 80041c2:	d021      	beq.n	8004208 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80041c4:	f3ef 8310 	mrs	r3, PRIMASK
 80041c8:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80041ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80041cc:	63bb      	str	r3, [r7, #56]	; 0x38
 80041ce:	2301      	movs	r3, #1
 80041d0:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041d4:	f383 8810 	msr	PRIMASK, r3
}
 80041d8:	46c0      	nop			; (mov r8, r8)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	681a      	ldr	r2, [r3, #0]
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	2180      	movs	r1, #128	; 0x80
 80041e6:	438a      	bics	r2, r1
 80041e8:	601a      	str	r2, [r3, #0]
 80041ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041f0:	f383 8810 	msr	PRIMASK, r3
}
 80041f4:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2220      	movs	r2, #32
 80041fa:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2278      	movs	r2, #120	; 0x78
 8004200:	2100      	movs	r1, #0
 8004202:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004204:	2303      	movs	r3, #3
 8004206:	e05f      	b.n	80042c8 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	2204      	movs	r2, #4
 8004210:	4013      	ands	r3, r2
 8004212:	2b04      	cmp	r3, #4
 8004214:	d146      	bne.n	80042a4 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004216:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004218:	2280      	movs	r2, #128	; 0x80
 800421a:	03d1      	lsls	r1, r2, #15
 800421c:	6878      	ldr	r0, [r7, #4]
 800421e:	4a2c      	ldr	r2, [pc, #176]	; (80042d0 <UART_CheckIdleState+0x148>)
 8004220:	9200      	str	r2, [sp, #0]
 8004222:	2200      	movs	r2, #0
 8004224:	f000 f858 	bl	80042d8 <UART_WaitOnFlagUntilTimeout>
 8004228:	1e03      	subs	r3, r0, #0
 800422a:	d03b      	beq.n	80042a4 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800422c:	f3ef 8310 	mrs	r3, PRIMASK
 8004230:	60fb      	str	r3, [r7, #12]
  return(result);
 8004232:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004234:	637b      	str	r3, [r7, #52]	; 0x34
 8004236:	2301      	movs	r3, #1
 8004238:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800423a:	693b      	ldr	r3, [r7, #16]
 800423c:	f383 8810 	msr	PRIMASK, r3
}
 8004240:	46c0      	nop			; (mov r8, r8)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	681a      	ldr	r2, [r3, #0]
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	4921      	ldr	r1, [pc, #132]	; (80042d4 <UART_CheckIdleState+0x14c>)
 800424e:	400a      	ands	r2, r1
 8004250:	601a      	str	r2, [r3, #0]
 8004252:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004254:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004256:	697b      	ldr	r3, [r7, #20]
 8004258:	f383 8810 	msr	PRIMASK, r3
}
 800425c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800425e:	f3ef 8310 	mrs	r3, PRIMASK
 8004262:	61bb      	str	r3, [r7, #24]
  return(result);
 8004264:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004266:	633b      	str	r3, [r7, #48]	; 0x30
 8004268:	2301      	movs	r3, #1
 800426a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800426c:	69fb      	ldr	r3, [r7, #28]
 800426e:	f383 8810 	msr	PRIMASK, r3
}
 8004272:	46c0      	nop			; (mov r8, r8)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	689a      	ldr	r2, [r3, #8]
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	2101      	movs	r1, #1
 8004280:	438a      	bics	r2, r1
 8004282:	609a      	str	r2, [r3, #8]
 8004284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004286:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004288:	6a3b      	ldr	r3, [r7, #32]
 800428a:	f383 8810 	msr	PRIMASK, r3
}
 800428e:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2280      	movs	r2, #128	; 0x80
 8004294:	2120      	movs	r1, #32
 8004296:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2278      	movs	r2, #120	; 0x78
 800429c:	2100      	movs	r1, #0
 800429e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80042a0:	2303      	movs	r3, #3
 80042a2:	e011      	b.n	80042c8 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2220      	movs	r2, #32
 80042a8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2280      	movs	r2, #128	; 0x80
 80042ae:	2120      	movs	r1, #32
 80042b0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2200      	movs	r2, #0
 80042b6:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2200      	movs	r2, #0
 80042bc:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2278      	movs	r2, #120	; 0x78
 80042c2:	2100      	movs	r1, #0
 80042c4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80042c6:	2300      	movs	r3, #0
}
 80042c8:	0018      	movs	r0, r3
 80042ca:	46bd      	mov	sp, r7
 80042cc:	b010      	add	sp, #64	; 0x40
 80042ce:	bd80      	pop	{r7, pc}
 80042d0:	01ffffff 	.word	0x01ffffff
 80042d4:	fffffedf 	.word	0xfffffedf

080042d8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b084      	sub	sp, #16
 80042dc:	af00      	add	r7, sp, #0
 80042de:	60f8      	str	r0, [r7, #12]
 80042e0:	60b9      	str	r1, [r7, #8]
 80042e2:	603b      	str	r3, [r7, #0]
 80042e4:	1dfb      	adds	r3, r7, #7
 80042e6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042e8:	e04b      	b.n	8004382 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042ea:	69bb      	ldr	r3, [r7, #24]
 80042ec:	3301      	adds	r3, #1
 80042ee:	d048      	beq.n	8004382 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042f0:	f7fd fd00 	bl	8001cf4 <HAL_GetTick>
 80042f4:	0002      	movs	r2, r0
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	1ad3      	subs	r3, r2, r3
 80042fa:	69ba      	ldr	r2, [r7, #24]
 80042fc:	429a      	cmp	r2, r3
 80042fe:	d302      	bcc.n	8004306 <UART_WaitOnFlagUntilTimeout+0x2e>
 8004300:	69bb      	ldr	r3, [r7, #24]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d101      	bne.n	800430a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8004306:	2303      	movs	r3, #3
 8004308:	e04b      	b.n	80043a2 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	2204      	movs	r2, #4
 8004312:	4013      	ands	r3, r2
 8004314:	d035      	beq.n	8004382 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	69db      	ldr	r3, [r3, #28]
 800431c:	2208      	movs	r2, #8
 800431e:	4013      	ands	r3, r2
 8004320:	2b08      	cmp	r3, #8
 8004322:	d111      	bne.n	8004348 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	2208      	movs	r2, #8
 800432a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	0018      	movs	r0, r3
 8004330:	f000 f906 	bl	8004540 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	2284      	movs	r2, #132	; 0x84
 8004338:	2108      	movs	r1, #8
 800433a:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	2278      	movs	r2, #120	; 0x78
 8004340:	2100      	movs	r1, #0
 8004342:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8004344:	2301      	movs	r3, #1
 8004346:	e02c      	b.n	80043a2 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	69da      	ldr	r2, [r3, #28]
 800434e:	2380      	movs	r3, #128	; 0x80
 8004350:	011b      	lsls	r3, r3, #4
 8004352:	401a      	ands	r2, r3
 8004354:	2380      	movs	r3, #128	; 0x80
 8004356:	011b      	lsls	r3, r3, #4
 8004358:	429a      	cmp	r2, r3
 800435a:	d112      	bne.n	8004382 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	2280      	movs	r2, #128	; 0x80
 8004362:	0112      	lsls	r2, r2, #4
 8004364:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	0018      	movs	r0, r3
 800436a:	f000 f8e9 	bl	8004540 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	2284      	movs	r2, #132	; 0x84
 8004372:	2120      	movs	r1, #32
 8004374:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	2278      	movs	r2, #120	; 0x78
 800437a:	2100      	movs	r1, #0
 800437c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800437e:	2303      	movs	r3, #3
 8004380:	e00f      	b.n	80043a2 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	69db      	ldr	r3, [r3, #28]
 8004388:	68ba      	ldr	r2, [r7, #8]
 800438a:	4013      	ands	r3, r2
 800438c:	68ba      	ldr	r2, [r7, #8]
 800438e:	1ad3      	subs	r3, r2, r3
 8004390:	425a      	negs	r2, r3
 8004392:	4153      	adcs	r3, r2
 8004394:	b2db      	uxtb	r3, r3
 8004396:	001a      	movs	r2, r3
 8004398:	1dfb      	adds	r3, r7, #7
 800439a:	781b      	ldrb	r3, [r3, #0]
 800439c:	429a      	cmp	r2, r3
 800439e:	d0a4      	beq.n	80042ea <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80043a0:	2300      	movs	r3, #0
}
 80043a2:	0018      	movs	r0, r3
 80043a4:	46bd      	mov	sp, r7
 80043a6:	b004      	add	sp, #16
 80043a8:	bd80      	pop	{r7, pc}
	...

080043ac <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b090      	sub	sp, #64	; 0x40
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	60f8      	str	r0, [r7, #12]
 80043b4:	60b9      	str	r1, [r7, #8]
 80043b6:	1dbb      	adds	r3, r7, #6
 80043b8:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	68ba      	ldr	r2, [r7, #8]
 80043be:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	1dba      	adds	r2, r7, #6
 80043c4:	2158      	movs	r1, #88	; 0x58
 80043c6:	8812      	ldrh	r2, [r2, #0]
 80043c8:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	1dba      	adds	r2, r7, #6
 80043ce:	215a      	movs	r1, #90	; 0x5a
 80043d0:	8812      	ldrh	r2, [r2, #0]
 80043d2:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	2200      	movs	r2, #0
 80043d8:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	689a      	ldr	r2, [r3, #8]
 80043de:	2380      	movs	r3, #128	; 0x80
 80043e0:	015b      	lsls	r3, r3, #5
 80043e2:	429a      	cmp	r2, r3
 80043e4:	d10d      	bne.n	8004402 <UART_Start_Receive_IT+0x56>
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	691b      	ldr	r3, [r3, #16]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d104      	bne.n	80043f8 <UART_Start_Receive_IT+0x4c>
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	225c      	movs	r2, #92	; 0x5c
 80043f2:	4950      	ldr	r1, [pc, #320]	; (8004534 <UART_Start_Receive_IT+0x188>)
 80043f4:	5299      	strh	r1, [r3, r2]
 80043f6:	e02e      	b.n	8004456 <UART_Start_Receive_IT+0xaa>
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	225c      	movs	r2, #92	; 0x5c
 80043fc:	21ff      	movs	r1, #255	; 0xff
 80043fe:	5299      	strh	r1, [r3, r2]
 8004400:	e029      	b.n	8004456 <UART_Start_Receive_IT+0xaa>
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	689b      	ldr	r3, [r3, #8]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d10d      	bne.n	8004426 <UART_Start_Receive_IT+0x7a>
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	691b      	ldr	r3, [r3, #16]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d104      	bne.n	800441c <UART_Start_Receive_IT+0x70>
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	225c      	movs	r2, #92	; 0x5c
 8004416:	21ff      	movs	r1, #255	; 0xff
 8004418:	5299      	strh	r1, [r3, r2]
 800441a:	e01c      	b.n	8004456 <UART_Start_Receive_IT+0xaa>
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	225c      	movs	r2, #92	; 0x5c
 8004420:	217f      	movs	r1, #127	; 0x7f
 8004422:	5299      	strh	r1, [r3, r2]
 8004424:	e017      	b.n	8004456 <UART_Start_Receive_IT+0xaa>
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	689a      	ldr	r2, [r3, #8]
 800442a:	2380      	movs	r3, #128	; 0x80
 800442c:	055b      	lsls	r3, r3, #21
 800442e:	429a      	cmp	r2, r3
 8004430:	d10d      	bne.n	800444e <UART_Start_Receive_IT+0xa2>
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	691b      	ldr	r3, [r3, #16]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d104      	bne.n	8004444 <UART_Start_Receive_IT+0x98>
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	225c      	movs	r2, #92	; 0x5c
 800443e:	217f      	movs	r1, #127	; 0x7f
 8004440:	5299      	strh	r1, [r3, r2]
 8004442:	e008      	b.n	8004456 <UART_Start_Receive_IT+0xaa>
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	225c      	movs	r2, #92	; 0x5c
 8004448:	213f      	movs	r1, #63	; 0x3f
 800444a:	5299      	strh	r1, [r3, r2]
 800444c:	e003      	b.n	8004456 <UART_Start_Receive_IT+0xaa>
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	225c      	movs	r2, #92	; 0x5c
 8004452:	2100      	movs	r1, #0
 8004454:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	2284      	movs	r2, #132	; 0x84
 800445a:	2100      	movs	r1, #0
 800445c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	2280      	movs	r2, #128	; 0x80
 8004462:	2122      	movs	r1, #34	; 0x22
 8004464:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004466:	f3ef 8310 	mrs	r3, PRIMASK
 800446a:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800446c:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800446e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004470:	2301      	movs	r3, #1
 8004472:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004474:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004476:	f383 8810 	msr	PRIMASK, r3
}
 800447a:	46c0      	nop			; (mov r8, r8)
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	689a      	ldr	r2, [r3, #8]
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	2101      	movs	r1, #1
 8004488:	430a      	orrs	r2, r1
 800448a:	609a      	str	r2, [r3, #8]
 800448c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800448e:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004490:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004492:	f383 8810 	msr	PRIMASK, r3
}
 8004496:	46c0      	nop			; (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	689a      	ldr	r2, [r3, #8]
 800449c:	2380      	movs	r3, #128	; 0x80
 800449e:	015b      	lsls	r3, r3, #5
 80044a0:	429a      	cmp	r2, r3
 80044a2:	d107      	bne.n	80044b4 <UART_Start_Receive_IT+0x108>
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	691b      	ldr	r3, [r3, #16]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d103      	bne.n	80044b4 <UART_Start_Receive_IT+0x108>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	4a22      	ldr	r2, [pc, #136]	; (8004538 <UART_Start_Receive_IT+0x18c>)
 80044b0:	669a      	str	r2, [r3, #104]	; 0x68
 80044b2:	e002      	b.n	80044ba <UART_Start_Receive_IT+0x10e>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	4a21      	ldr	r2, [pc, #132]	; (800453c <UART_Start_Receive_IT+0x190>)
 80044b8:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	691b      	ldr	r3, [r3, #16]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d019      	beq.n	80044f6 <UART_Start_Receive_IT+0x14a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80044c2:	f3ef 8310 	mrs	r3, PRIMASK
 80044c6:	61fb      	str	r3, [r7, #28]
  return(result);
 80044c8:	69fb      	ldr	r3, [r7, #28]
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80044ca:	637b      	str	r3, [r7, #52]	; 0x34
 80044cc:	2301      	movs	r3, #1
 80044ce:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044d0:	6a3b      	ldr	r3, [r7, #32]
 80044d2:	f383 8810 	msr	PRIMASK, r3
}
 80044d6:	46c0      	nop			; (mov r8, r8)
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	681a      	ldr	r2, [r3, #0]
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	2190      	movs	r1, #144	; 0x90
 80044e4:	0049      	lsls	r1, r1, #1
 80044e6:	430a      	orrs	r2, r1
 80044e8:	601a      	str	r2, [r3, #0]
 80044ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044ec:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044f0:	f383 8810 	msr	PRIMASK, r3
}
 80044f4:	e018      	b.n	8004528 <UART_Start_Receive_IT+0x17c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80044f6:	f3ef 8310 	mrs	r3, PRIMASK
 80044fa:	613b      	str	r3, [r7, #16]
  return(result);
 80044fc:	693b      	ldr	r3, [r7, #16]
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80044fe:	63bb      	str	r3, [r7, #56]	; 0x38
 8004500:	2301      	movs	r3, #1
 8004502:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004504:	697b      	ldr	r3, [r7, #20]
 8004506:	f383 8810 	msr	PRIMASK, r3
}
 800450a:	46c0      	nop			; (mov r8, r8)
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	681a      	ldr	r2, [r3, #0]
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	2120      	movs	r1, #32
 8004518:	430a      	orrs	r2, r1
 800451a:	601a      	str	r2, [r3, #0]
 800451c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800451e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004520:	69bb      	ldr	r3, [r7, #24]
 8004522:	f383 8810 	msr	PRIMASK, r3
}
 8004526:	46c0      	nop			; (mov r8, r8)
  }
  return HAL_OK;
 8004528:	2300      	movs	r3, #0
}
 800452a:	0018      	movs	r0, r3
 800452c:	46bd      	mov	sp, r7
 800452e:	b010      	add	sp, #64	; 0x40
 8004530:	bd80      	pop	{r7, pc}
 8004532:	46c0      	nop			; (mov r8, r8)
 8004534:	000001ff 	.word	0x000001ff
 8004538:	08004851 	.word	0x08004851
 800453c:	0800468d 	.word	0x0800468d

08004540 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b08e      	sub	sp, #56	; 0x38
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004548:	f3ef 8310 	mrs	r3, PRIMASK
 800454c:	617b      	str	r3, [r7, #20]
  return(result);
 800454e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004550:	637b      	str	r3, [r7, #52]	; 0x34
 8004552:	2301      	movs	r3, #1
 8004554:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004556:	69bb      	ldr	r3, [r7, #24]
 8004558:	f383 8810 	msr	PRIMASK, r3
}
 800455c:	46c0      	nop			; (mov r8, r8)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	681a      	ldr	r2, [r3, #0]
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	4926      	ldr	r1, [pc, #152]	; (8004604 <UART_EndRxTransfer+0xc4>)
 800456a:	400a      	ands	r2, r1
 800456c:	601a      	str	r2, [r3, #0]
 800456e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004570:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004572:	69fb      	ldr	r3, [r7, #28]
 8004574:	f383 8810 	msr	PRIMASK, r3
}
 8004578:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800457a:	f3ef 8310 	mrs	r3, PRIMASK
 800457e:	623b      	str	r3, [r7, #32]
  return(result);
 8004580:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004582:	633b      	str	r3, [r7, #48]	; 0x30
 8004584:	2301      	movs	r3, #1
 8004586:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800458a:	f383 8810 	msr	PRIMASK, r3
}
 800458e:	46c0      	nop			; (mov r8, r8)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	689a      	ldr	r2, [r3, #8]
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	2101      	movs	r1, #1
 800459c:	438a      	bics	r2, r1
 800459e:	609a      	str	r2, [r3, #8]
 80045a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045a2:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045a6:	f383 8810 	msr	PRIMASK, r3
}
 80045aa:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045b0:	2b01      	cmp	r3, #1
 80045b2:	d118      	bne.n	80045e6 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80045b4:	f3ef 8310 	mrs	r3, PRIMASK
 80045b8:	60bb      	str	r3, [r7, #8]
  return(result);
 80045ba:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80045be:	2301      	movs	r3, #1
 80045c0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	f383 8810 	msr	PRIMASK, r3
}
 80045c8:	46c0      	nop			; (mov r8, r8)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	681a      	ldr	r2, [r3, #0]
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	2110      	movs	r1, #16
 80045d6:	438a      	bics	r2, r1
 80045d8:	601a      	str	r2, [r3, #0]
 80045da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045dc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045de:	693b      	ldr	r3, [r7, #16]
 80045e0:	f383 8810 	msr	PRIMASK, r3
}
 80045e4:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2280      	movs	r2, #128	; 0x80
 80045ea:	2120      	movs	r1, #32
 80045ec:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2200      	movs	r2, #0
 80045f2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2200      	movs	r2, #0
 80045f8:	669a      	str	r2, [r3, #104]	; 0x68
}
 80045fa:	46c0      	nop			; (mov r8, r8)
 80045fc:	46bd      	mov	sp, r7
 80045fe:	b00e      	add	sp, #56	; 0x38
 8004600:	bd80      	pop	{r7, pc}
 8004602:	46c0      	nop			; (mov r8, r8)
 8004604:	fffffedf 	.word	0xfffffedf

08004608 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b084      	sub	sp, #16
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004614:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	225a      	movs	r2, #90	; 0x5a
 800461a:	2100      	movs	r1, #0
 800461c:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	2252      	movs	r2, #82	; 0x52
 8004622:	2100      	movs	r1, #0
 8004624:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	0018      	movs	r0, r3
 800462a:	f7ff fa47 	bl	8003abc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800462e:	46c0      	nop			; (mov r8, r8)
 8004630:	46bd      	mov	sp, r7
 8004632:	b004      	add	sp, #16
 8004634:	bd80      	pop	{r7, pc}

08004636 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004636:	b580      	push	{r7, lr}
 8004638:	b086      	sub	sp, #24
 800463a:	af00      	add	r7, sp, #0
 800463c:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800463e:	f3ef 8310 	mrs	r3, PRIMASK
 8004642:	60bb      	str	r3, [r7, #8]
  return(result);
 8004644:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004646:	617b      	str	r3, [r7, #20]
 8004648:	2301      	movs	r3, #1
 800464a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	f383 8810 	msr	PRIMASK, r3
}
 8004652:	46c0      	nop			; (mov r8, r8)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	681a      	ldr	r2, [r3, #0]
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	2140      	movs	r1, #64	; 0x40
 8004660:	438a      	bics	r2, r1
 8004662:	601a      	str	r2, [r3, #0]
 8004664:	697b      	ldr	r3, [r7, #20]
 8004666:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004668:	693b      	ldr	r3, [r7, #16]
 800466a:	f383 8810 	msr	PRIMASK, r3
}
 800466e:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2220      	movs	r2, #32
 8004674:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2200      	movs	r2, #0
 800467a:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	0018      	movs	r0, r3
 8004680:	f7ff fa14 	bl	8003aac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004684:	46c0      	nop			; (mov r8, r8)
 8004686:	46bd      	mov	sp, r7
 8004688:	b006      	add	sp, #24
 800468a:	bd80      	pop	{r7, pc}

0800468c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b094      	sub	sp, #80	; 0x50
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004694:	204e      	movs	r0, #78	; 0x4e
 8004696:	183b      	adds	r3, r7, r0
 8004698:	687a      	ldr	r2, [r7, #4]
 800469a:	215c      	movs	r1, #92	; 0x5c
 800469c:	5a52      	ldrh	r2, [r2, r1]
 800469e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2280      	movs	r2, #128	; 0x80
 80046a4:	589b      	ldr	r3, [r3, r2]
 80046a6:	2b22      	cmp	r3, #34	; 0x22
 80046a8:	d000      	beq.n	80046ac <UART_RxISR_8BIT+0x20>
 80046aa:	e0bf      	b.n	800482c <UART_RxISR_8BIT+0x1a0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80046b2:	214c      	movs	r1, #76	; 0x4c
 80046b4:	187b      	adds	r3, r7, r1
 80046b6:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80046b8:	187b      	adds	r3, r7, r1
 80046ba:	881b      	ldrh	r3, [r3, #0]
 80046bc:	b2da      	uxtb	r2, r3
 80046be:	183b      	adds	r3, r7, r0
 80046c0:	881b      	ldrh	r3, [r3, #0]
 80046c2:	b2d9      	uxtb	r1, r3
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046c8:	400a      	ands	r2, r1
 80046ca:	b2d2      	uxtb	r2, r2
 80046cc:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046d2:	1c5a      	adds	r2, r3, #1
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	225a      	movs	r2, #90	; 0x5a
 80046dc:	5a9b      	ldrh	r3, [r3, r2]
 80046de:	b29b      	uxth	r3, r3
 80046e0:	3b01      	subs	r3, #1
 80046e2:	b299      	uxth	r1, r3
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	225a      	movs	r2, #90	; 0x5a
 80046e8:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	225a      	movs	r2, #90	; 0x5a
 80046ee:	5a9b      	ldrh	r3, [r3, r2]
 80046f0:	b29b      	uxth	r3, r3
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d000      	beq.n	80046f8 <UART_RxISR_8BIT+0x6c>
 80046f6:	e0a1      	b.n	800483c <UART_RxISR_8BIT+0x1b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80046f8:	f3ef 8310 	mrs	r3, PRIMASK
 80046fc:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80046fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004700:	64bb      	str	r3, [r7, #72]	; 0x48
 8004702:	2301      	movs	r3, #1
 8004704:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004708:	f383 8810 	msr	PRIMASK, r3
}
 800470c:	46c0      	nop			; (mov r8, r8)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	681a      	ldr	r2, [r3, #0]
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	494a      	ldr	r1, [pc, #296]	; (8004844 <UART_RxISR_8BIT+0x1b8>)
 800471a:	400a      	ands	r2, r1
 800471c:	601a      	str	r2, [r3, #0]
 800471e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004720:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004722:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004724:	f383 8810 	msr	PRIMASK, r3
}
 8004728:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800472a:	f3ef 8310 	mrs	r3, PRIMASK
 800472e:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8004730:	6b3b      	ldr	r3, [r7, #48]	; 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004732:	647b      	str	r3, [r7, #68]	; 0x44
 8004734:	2301      	movs	r3, #1
 8004736:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004738:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800473a:	f383 8810 	msr	PRIMASK, r3
}
 800473e:	46c0      	nop			; (mov r8, r8)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	689a      	ldr	r2, [r3, #8]
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	2101      	movs	r1, #1
 800474c:	438a      	bics	r2, r1
 800474e:	609a      	str	r2, [r3, #8]
 8004750:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004752:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004754:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004756:	f383 8810 	msr	PRIMASK, r3
}
 800475a:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2280      	movs	r2, #128	; 0x80
 8004760:	2120      	movs	r1, #32
 8004762:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2200      	movs	r2, #0
 8004768:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2200      	movs	r2, #0
 800476e:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	4a34      	ldr	r2, [pc, #208]	; (8004848 <UART_RxISR_8BIT+0x1bc>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d01f      	beq.n	80047ba <UART_RxISR_8BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	685a      	ldr	r2, [r3, #4]
 8004780:	2380      	movs	r3, #128	; 0x80
 8004782:	041b      	lsls	r3, r3, #16
 8004784:	4013      	ands	r3, r2
 8004786:	d018      	beq.n	80047ba <UART_RxISR_8BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004788:	f3ef 8310 	mrs	r3, PRIMASK
 800478c:	61bb      	str	r3, [r7, #24]
  return(result);
 800478e:	69bb      	ldr	r3, [r7, #24]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004790:	643b      	str	r3, [r7, #64]	; 0x40
 8004792:	2301      	movs	r3, #1
 8004794:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004796:	69fb      	ldr	r3, [r7, #28]
 8004798:	f383 8810 	msr	PRIMASK, r3
}
 800479c:	46c0      	nop			; (mov r8, r8)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	681a      	ldr	r2, [r3, #0]
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4928      	ldr	r1, [pc, #160]	; (800484c <UART_RxISR_8BIT+0x1c0>)
 80047aa:	400a      	ands	r2, r1
 80047ac:	601a      	str	r2, [r3, #0]
 80047ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047b0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047b2:	6a3b      	ldr	r3, [r7, #32]
 80047b4:	f383 8810 	msr	PRIMASK, r3
}
 80047b8:	46c0      	nop			; (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047be:	2b01      	cmp	r3, #1
 80047c0:	d12f      	bne.n	8004822 <UART_RxISR_8BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2200      	movs	r2, #0
 80047c6:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80047c8:	f3ef 8310 	mrs	r3, PRIMASK
 80047cc:	60fb      	str	r3, [r7, #12]
  return(result);
 80047ce:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80047d2:	2301      	movs	r3, #1
 80047d4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047d6:	693b      	ldr	r3, [r7, #16]
 80047d8:	f383 8810 	msr	PRIMASK, r3
}
 80047dc:	46c0      	nop			; (mov r8, r8)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	681a      	ldr	r2, [r3, #0]
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	2110      	movs	r1, #16
 80047ea:	438a      	bics	r2, r1
 80047ec:	601a      	str	r2, [r3, #0]
 80047ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047f0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047f2:	697b      	ldr	r3, [r7, #20]
 80047f4:	f383 8810 	msr	PRIMASK, r3
}
 80047f8:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	69db      	ldr	r3, [r3, #28]
 8004800:	2210      	movs	r2, #16
 8004802:	4013      	ands	r3, r2
 8004804:	2b10      	cmp	r3, #16
 8004806:	d103      	bne.n	8004810 <UART_RxISR_8BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	2210      	movs	r2, #16
 800480e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2258      	movs	r2, #88	; 0x58
 8004814:	5a9a      	ldrh	r2, [r3, r2]
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	0011      	movs	r1, r2
 800481a:	0018      	movs	r0, r3
 800481c:	f7ff f956 	bl	8003acc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004820:	e00c      	b.n	800483c <UART_RxISR_8BIT+0x1b0>
        HAL_UART_RxCpltCallback(huart);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	0018      	movs	r0, r3
 8004826:	f7fc fccb 	bl	80011c0 <HAL_UART_RxCpltCallback>
}
 800482a:	e007      	b.n	800483c <UART_RxISR_8BIT+0x1b0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	699a      	ldr	r2, [r3, #24]
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	2108      	movs	r1, #8
 8004838:	430a      	orrs	r2, r1
 800483a:	619a      	str	r2, [r3, #24]
}
 800483c:	46c0      	nop			; (mov r8, r8)
 800483e:	46bd      	mov	sp, r7
 8004840:	b014      	add	sp, #80	; 0x50
 8004842:	bd80      	pop	{r7, pc}
 8004844:	fffffedf 	.word	0xfffffedf
 8004848:	40004800 	.word	0x40004800
 800484c:	fbffffff 	.word	0xfbffffff

08004850 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b094      	sub	sp, #80	; 0x50
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004858:	204e      	movs	r0, #78	; 0x4e
 800485a:	183b      	adds	r3, r7, r0
 800485c:	687a      	ldr	r2, [r7, #4]
 800485e:	215c      	movs	r1, #92	; 0x5c
 8004860:	5a52      	ldrh	r2, [r2, r1]
 8004862:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2280      	movs	r2, #128	; 0x80
 8004868:	589b      	ldr	r3, [r3, r2]
 800486a:	2b22      	cmp	r3, #34	; 0x22
 800486c:	d000      	beq.n	8004870 <UART_RxISR_16BIT+0x20>
 800486e:	e0bf      	b.n	80049f0 <UART_RxISR_16BIT+0x1a0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004876:	214c      	movs	r1, #76	; 0x4c
 8004878:	187b      	adds	r3, r7, r1
 800487a:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004880:	64bb      	str	r3, [r7, #72]	; 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 8004882:	187b      	adds	r3, r7, r1
 8004884:	183a      	adds	r2, r7, r0
 8004886:	881b      	ldrh	r3, [r3, #0]
 8004888:	8812      	ldrh	r2, [r2, #0]
 800488a:	4013      	ands	r3, r2
 800488c:	b29a      	uxth	r2, r3
 800488e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004890:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004896:	1c9a      	adds	r2, r3, #2
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	225a      	movs	r2, #90	; 0x5a
 80048a0:	5a9b      	ldrh	r3, [r3, r2]
 80048a2:	b29b      	uxth	r3, r3
 80048a4:	3b01      	subs	r3, #1
 80048a6:	b299      	uxth	r1, r3
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	225a      	movs	r2, #90	; 0x5a
 80048ac:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	225a      	movs	r2, #90	; 0x5a
 80048b2:	5a9b      	ldrh	r3, [r3, r2]
 80048b4:	b29b      	uxth	r3, r3
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d000      	beq.n	80048bc <UART_RxISR_16BIT+0x6c>
 80048ba:	e0a1      	b.n	8004a00 <UART_RxISR_16BIT+0x1b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80048bc:	f3ef 8310 	mrs	r3, PRIMASK
 80048c0:	623b      	str	r3, [r7, #32]
  return(result);
 80048c2:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80048c4:	647b      	str	r3, [r7, #68]	; 0x44
 80048c6:	2301      	movs	r3, #1
 80048c8:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048cc:	f383 8810 	msr	PRIMASK, r3
}
 80048d0:	46c0      	nop			; (mov r8, r8)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	681a      	ldr	r2, [r3, #0]
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	494a      	ldr	r1, [pc, #296]	; (8004a08 <UART_RxISR_16BIT+0x1b8>)
 80048de:	400a      	ands	r2, r1
 80048e0:	601a      	str	r2, [r3, #0]
 80048e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80048e4:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048e8:	f383 8810 	msr	PRIMASK, r3
}
 80048ec:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80048ee:	f3ef 8310 	mrs	r3, PRIMASK
 80048f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 80048f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048f6:	643b      	str	r3, [r7, #64]	; 0x40
 80048f8:	2301      	movs	r3, #1
 80048fa:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048fe:	f383 8810 	msr	PRIMASK, r3
}
 8004902:	46c0      	nop			; (mov r8, r8)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	689a      	ldr	r2, [r3, #8]
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	2101      	movs	r1, #1
 8004910:	438a      	bics	r2, r1
 8004912:	609a      	str	r2, [r3, #8]
 8004914:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004916:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004918:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800491a:	f383 8810 	msr	PRIMASK, r3
}
 800491e:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2280      	movs	r2, #128	; 0x80
 8004924:	2120      	movs	r1, #32
 8004926:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2200      	movs	r2, #0
 800492c:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2200      	movs	r2, #0
 8004932:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	4a34      	ldr	r2, [pc, #208]	; (8004a0c <UART_RxISR_16BIT+0x1bc>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d01f      	beq.n	800497e <UART_RxISR_16BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	685a      	ldr	r2, [r3, #4]
 8004944:	2380      	movs	r3, #128	; 0x80
 8004946:	041b      	lsls	r3, r3, #16
 8004948:	4013      	ands	r3, r2
 800494a:	d018      	beq.n	800497e <UART_RxISR_16BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800494c:	f3ef 8310 	mrs	r3, PRIMASK
 8004950:	617b      	str	r3, [r7, #20]
  return(result);
 8004952:	697b      	ldr	r3, [r7, #20]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004954:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004956:	2301      	movs	r3, #1
 8004958:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800495a:	69bb      	ldr	r3, [r7, #24]
 800495c:	f383 8810 	msr	PRIMASK, r3
}
 8004960:	46c0      	nop			; (mov r8, r8)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	681a      	ldr	r2, [r3, #0]
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4928      	ldr	r1, [pc, #160]	; (8004a10 <UART_RxISR_16BIT+0x1c0>)
 800496e:	400a      	ands	r2, r1
 8004970:	601a      	str	r2, [r3, #0]
 8004972:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004974:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004976:	69fb      	ldr	r3, [r7, #28]
 8004978:	f383 8810 	msr	PRIMASK, r3
}
 800497c:	46c0      	nop			; (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004982:	2b01      	cmp	r3, #1
 8004984:	d12f      	bne.n	80049e6 <UART_RxISR_16BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2200      	movs	r2, #0
 800498a:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800498c:	f3ef 8310 	mrs	r3, PRIMASK
 8004990:	60bb      	str	r3, [r7, #8]
  return(result);
 8004992:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004994:	63bb      	str	r3, [r7, #56]	; 0x38
 8004996:	2301      	movs	r3, #1
 8004998:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	f383 8810 	msr	PRIMASK, r3
}
 80049a0:	46c0      	nop			; (mov r8, r8)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	681a      	ldr	r2, [r3, #0]
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	2110      	movs	r1, #16
 80049ae:	438a      	bics	r2, r1
 80049b0:	601a      	str	r2, [r3, #0]
 80049b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049b4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049b6:	693b      	ldr	r3, [r7, #16]
 80049b8:	f383 8810 	msr	PRIMASK, r3
}
 80049bc:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	69db      	ldr	r3, [r3, #28]
 80049c4:	2210      	movs	r2, #16
 80049c6:	4013      	ands	r3, r2
 80049c8:	2b10      	cmp	r3, #16
 80049ca:	d103      	bne.n	80049d4 <UART_RxISR_16BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	2210      	movs	r2, #16
 80049d2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2258      	movs	r2, #88	; 0x58
 80049d8:	5a9a      	ldrh	r2, [r3, r2]
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	0011      	movs	r1, r2
 80049de:	0018      	movs	r0, r3
 80049e0:	f7ff f874 	bl	8003acc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80049e4:	e00c      	b.n	8004a00 <UART_RxISR_16BIT+0x1b0>
        HAL_UART_RxCpltCallback(huart);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	0018      	movs	r0, r3
 80049ea:	f7fc fbe9 	bl	80011c0 <HAL_UART_RxCpltCallback>
}
 80049ee:	e007      	b.n	8004a00 <UART_RxISR_16BIT+0x1b0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	699a      	ldr	r2, [r3, #24]
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	2108      	movs	r1, #8
 80049fc:	430a      	orrs	r2, r1
 80049fe:	619a      	str	r2, [r3, #24]
}
 8004a00:	46c0      	nop			; (mov r8, r8)
 8004a02:	46bd      	mov	sp, r7
 8004a04:	b014      	add	sp, #80	; 0x50
 8004a06:	bd80      	pop	{r7, pc}
 8004a08:	fffffedf 	.word	0xfffffedf
 8004a0c:	40004800 	.word	0x40004800
 8004a10:	fbffffff 	.word	0xfbffffff

08004a14 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b082      	sub	sp, #8
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004a1c:	46c0      	nop			; (mov r8, r8)
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	b002      	add	sp, #8
 8004a22:	bd80      	pop	{r7, pc}

08004a24 <__errno>:
 8004a24:	4b01      	ldr	r3, [pc, #4]	; (8004a2c <__errno+0x8>)
 8004a26:	6818      	ldr	r0, [r3, #0]
 8004a28:	4770      	bx	lr
 8004a2a:	46c0      	nop			; (mov r8, r8)
 8004a2c:	20000110 	.word	0x20000110

08004a30 <__libc_init_array>:
 8004a30:	b570      	push	{r4, r5, r6, lr}
 8004a32:	2600      	movs	r6, #0
 8004a34:	4d0c      	ldr	r5, [pc, #48]	; (8004a68 <__libc_init_array+0x38>)
 8004a36:	4c0d      	ldr	r4, [pc, #52]	; (8004a6c <__libc_init_array+0x3c>)
 8004a38:	1b64      	subs	r4, r4, r5
 8004a3a:	10a4      	asrs	r4, r4, #2
 8004a3c:	42a6      	cmp	r6, r4
 8004a3e:	d109      	bne.n	8004a54 <__libc_init_array+0x24>
 8004a40:	2600      	movs	r6, #0
 8004a42:	f001 f943 	bl	8005ccc <_init>
 8004a46:	4d0a      	ldr	r5, [pc, #40]	; (8004a70 <__libc_init_array+0x40>)
 8004a48:	4c0a      	ldr	r4, [pc, #40]	; (8004a74 <__libc_init_array+0x44>)
 8004a4a:	1b64      	subs	r4, r4, r5
 8004a4c:	10a4      	asrs	r4, r4, #2
 8004a4e:	42a6      	cmp	r6, r4
 8004a50:	d105      	bne.n	8004a5e <__libc_init_array+0x2e>
 8004a52:	bd70      	pop	{r4, r5, r6, pc}
 8004a54:	00b3      	lsls	r3, r6, #2
 8004a56:	58eb      	ldr	r3, [r5, r3]
 8004a58:	4798      	blx	r3
 8004a5a:	3601      	adds	r6, #1
 8004a5c:	e7ee      	b.n	8004a3c <__libc_init_array+0xc>
 8004a5e:	00b3      	lsls	r3, r6, #2
 8004a60:	58eb      	ldr	r3, [r5, r3]
 8004a62:	4798      	blx	r3
 8004a64:	3601      	adds	r6, #1
 8004a66:	e7f2      	b.n	8004a4e <__libc_init_array+0x1e>
 8004a68:	08005f90 	.word	0x08005f90
 8004a6c:	08005f90 	.word	0x08005f90
 8004a70:	08005f90 	.word	0x08005f90
 8004a74:	08005f94 	.word	0x08005f94

08004a78 <malloc>:
 8004a78:	b510      	push	{r4, lr}
 8004a7a:	4b03      	ldr	r3, [pc, #12]	; (8004a88 <malloc+0x10>)
 8004a7c:	0001      	movs	r1, r0
 8004a7e:	6818      	ldr	r0, [r3, #0]
 8004a80:	f000 f882 	bl	8004b88 <_malloc_r>
 8004a84:	bd10      	pop	{r4, pc}
 8004a86:	46c0      	nop			; (mov r8, r8)
 8004a88:	20000110 	.word	0x20000110

08004a8c <free>:
 8004a8c:	b510      	push	{r4, lr}
 8004a8e:	4b03      	ldr	r3, [pc, #12]	; (8004a9c <free+0x10>)
 8004a90:	0001      	movs	r1, r0
 8004a92:	6818      	ldr	r0, [r3, #0]
 8004a94:	f000 f80c 	bl	8004ab0 <_free_r>
 8004a98:	bd10      	pop	{r4, pc}
 8004a9a:	46c0      	nop			; (mov r8, r8)
 8004a9c:	20000110 	.word	0x20000110

08004aa0 <memset>:
 8004aa0:	0003      	movs	r3, r0
 8004aa2:	1882      	adds	r2, r0, r2
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d100      	bne.n	8004aaa <memset+0xa>
 8004aa8:	4770      	bx	lr
 8004aaa:	7019      	strb	r1, [r3, #0]
 8004aac:	3301      	adds	r3, #1
 8004aae:	e7f9      	b.n	8004aa4 <memset+0x4>

08004ab0 <_free_r>:
 8004ab0:	b570      	push	{r4, r5, r6, lr}
 8004ab2:	0005      	movs	r5, r0
 8004ab4:	2900      	cmp	r1, #0
 8004ab6:	d010      	beq.n	8004ada <_free_r+0x2a>
 8004ab8:	1f0c      	subs	r4, r1, #4
 8004aba:	6823      	ldr	r3, [r4, #0]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	da00      	bge.n	8004ac2 <_free_r+0x12>
 8004ac0:	18e4      	adds	r4, r4, r3
 8004ac2:	0028      	movs	r0, r5
 8004ac4:	f000 faec 	bl	80050a0 <__malloc_lock>
 8004ac8:	4a1d      	ldr	r2, [pc, #116]	; (8004b40 <_free_r+0x90>)
 8004aca:	6813      	ldr	r3, [r2, #0]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d105      	bne.n	8004adc <_free_r+0x2c>
 8004ad0:	6063      	str	r3, [r4, #4]
 8004ad2:	6014      	str	r4, [r2, #0]
 8004ad4:	0028      	movs	r0, r5
 8004ad6:	f000 faeb 	bl	80050b0 <__malloc_unlock>
 8004ada:	bd70      	pop	{r4, r5, r6, pc}
 8004adc:	42a3      	cmp	r3, r4
 8004ade:	d908      	bls.n	8004af2 <_free_r+0x42>
 8004ae0:	6821      	ldr	r1, [r4, #0]
 8004ae2:	1860      	adds	r0, r4, r1
 8004ae4:	4283      	cmp	r3, r0
 8004ae6:	d1f3      	bne.n	8004ad0 <_free_r+0x20>
 8004ae8:	6818      	ldr	r0, [r3, #0]
 8004aea:	685b      	ldr	r3, [r3, #4]
 8004aec:	1841      	adds	r1, r0, r1
 8004aee:	6021      	str	r1, [r4, #0]
 8004af0:	e7ee      	b.n	8004ad0 <_free_r+0x20>
 8004af2:	001a      	movs	r2, r3
 8004af4:	685b      	ldr	r3, [r3, #4]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d001      	beq.n	8004afe <_free_r+0x4e>
 8004afa:	42a3      	cmp	r3, r4
 8004afc:	d9f9      	bls.n	8004af2 <_free_r+0x42>
 8004afe:	6811      	ldr	r1, [r2, #0]
 8004b00:	1850      	adds	r0, r2, r1
 8004b02:	42a0      	cmp	r0, r4
 8004b04:	d10b      	bne.n	8004b1e <_free_r+0x6e>
 8004b06:	6820      	ldr	r0, [r4, #0]
 8004b08:	1809      	adds	r1, r1, r0
 8004b0a:	1850      	adds	r0, r2, r1
 8004b0c:	6011      	str	r1, [r2, #0]
 8004b0e:	4283      	cmp	r3, r0
 8004b10:	d1e0      	bne.n	8004ad4 <_free_r+0x24>
 8004b12:	6818      	ldr	r0, [r3, #0]
 8004b14:	685b      	ldr	r3, [r3, #4]
 8004b16:	1841      	adds	r1, r0, r1
 8004b18:	6011      	str	r1, [r2, #0]
 8004b1a:	6053      	str	r3, [r2, #4]
 8004b1c:	e7da      	b.n	8004ad4 <_free_r+0x24>
 8004b1e:	42a0      	cmp	r0, r4
 8004b20:	d902      	bls.n	8004b28 <_free_r+0x78>
 8004b22:	230c      	movs	r3, #12
 8004b24:	602b      	str	r3, [r5, #0]
 8004b26:	e7d5      	b.n	8004ad4 <_free_r+0x24>
 8004b28:	6821      	ldr	r1, [r4, #0]
 8004b2a:	1860      	adds	r0, r4, r1
 8004b2c:	4283      	cmp	r3, r0
 8004b2e:	d103      	bne.n	8004b38 <_free_r+0x88>
 8004b30:	6818      	ldr	r0, [r3, #0]
 8004b32:	685b      	ldr	r3, [r3, #4]
 8004b34:	1841      	adds	r1, r0, r1
 8004b36:	6021      	str	r1, [r4, #0]
 8004b38:	6063      	str	r3, [r4, #4]
 8004b3a:	6054      	str	r4, [r2, #4]
 8004b3c:	e7ca      	b.n	8004ad4 <_free_r+0x24>
 8004b3e:	46c0      	nop			; (mov r8, r8)
 8004b40:	200002a8 	.word	0x200002a8

08004b44 <sbrk_aligned>:
 8004b44:	b570      	push	{r4, r5, r6, lr}
 8004b46:	4e0f      	ldr	r6, [pc, #60]	; (8004b84 <sbrk_aligned+0x40>)
 8004b48:	000d      	movs	r5, r1
 8004b4a:	6831      	ldr	r1, [r6, #0]
 8004b4c:	0004      	movs	r4, r0
 8004b4e:	2900      	cmp	r1, #0
 8004b50:	d102      	bne.n	8004b58 <sbrk_aligned+0x14>
 8004b52:	f000 f8a9 	bl	8004ca8 <_sbrk_r>
 8004b56:	6030      	str	r0, [r6, #0]
 8004b58:	0029      	movs	r1, r5
 8004b5a:	0020      	movs	r0, r4
 8004b5c:	f000 f8a4 	bl	8004ca8 <_sbrk_r>
 8004b60:	1c43      	adds	r3, r0, #1
 8004b62:	d00a      	beq.n	8004b7a <sbrk_aligned+0x36>
 8004b64:	2303      	movs	r3, #3
 8004b66:	1cc5      	adds	r5, r0, #3
 8004b68:	439d      	bics	r5, r3
 8004b6a:	42a8      	cmp	r0, r5
 8004b6c:	d007      	beq.n	8004b7e <sbrk_aligned+0x3a>
 8004b6e:	1a29      	subs	r1, r5, r0
 8004b70:	0020      	movs	r0, r4
 8004b72:	f000 f899 	bl	8004ca8 <_sbrk_r>
 8004b76:	1c43      	adds	r3, r0, #1
 8004b78:	d101      	bne.n	8004b7e <sbrk_aligned+0x3a>
 8004b7a:	2501      	movs	r5, #1
 8004b7c:	426d      	negs	r5, r5
 8004b7e:	0028      	movs	r0, r5
 8004b80:	bd70      	pop	{r4, r5, r6, pc}
 8004b82:	46c0      	nop			; (mov r8, r8)
 8004b84:	200002ac 	.word	0x200002ac

08004b88 <_malloc_r>:
 8004b88:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004b8a:	2203      	movs	r2, #3
 8004b8c:	1ccb      	adds	r3, r1, #3
 8004b8e:	4393      	bics	r3, r2
 8004b90:	3308      	adds	r3, #8
 8004b92:	0006      	movs	r6, r0
 8004b94:	001f      	movs	r7, r3
 8004b96:	2b0c      	cmp	r3, #12
 8004b98:	d232      	bcs.n	8004c00 <_malloc_r+0x78>
 8004b9a:	270c      	movs	r7, #12
 8004b9c:	42b9      	cmp	r1, r7
 8004b9e:	d831      	bhi.n	8004c04 <_malloc_r+0x7c>
 8004ba0:	0030      	movs	r0, r6
 8004ba2:	f000 fa7d 	bl	80050a0 <__malloc_lock>
 8004ba6:	4d32      	ldr	r5, [pc, #200]	; (8004c70 <_malloc_r+0xe8>)
 8004ba8:	682b      	ldr	r3, [r5, #0]
 8004baa:	001c      	movs	r4, r3
 8004bac:	2c00      	cmp	r4, #0
 8004bae:	d12e      	bne.n	8004c0e <_malloc_r+0x86>
 8004bb0:	0039      	movs	r1, r7
 8004bb2:	0030      	movs	r0, r6
 8004bb4:	f7ff ffc6 	bl	8004b44 <sbrk_aligned>
 8004bb8:	0004      	movs	r4, r0
 8004bba:	1c43      	adds	r3, r0, #1
 8004bbc:	d11e      	bne.n	8004bfc <_malloc_r+0x74>
 8004bbe:	682c      	ldr	r4, [r5, #0]
 8004bc0:	0025      	movs	r5, r4
 8004bc2:	2d00      	cmp	r5, #0
 8004bc4:	d14a      	bne.n	8004c5c <_malloc_r+0xd4>
 8004bc6:	6823      	ldr	r3, [r4, #0]
 8004bc8:	0029      	movs	r1, r5
 8004bca:	18e3      	adds	r3, r4, r3
 8004bcc:	0030      	movs	r0, r6
 8004bce:	9301      	str	r3, [sp, #4]
 8004bd0:	f000 f86a 	bl	8004ca8 <_sbrk_r>
 8004bd4:	9b01      	ldr	r3, [sp, #4]
 8004bd6:	4283      	cmp	r3, r0
 8004bd8:	d143      	bne.n	8004c62 <_malloc_r+0xda>
 8004bda:	6823      	ldr	r3, [r4, #0]
 8004bdc:	3703      	adds	r7, #3
 8004bde:	1aff      	subs	r7, r7, r3
 8004be0:	2303      	movs	r3, #3
 8004be2:	439f      	bics	r7, r3
 8004be4:	3708      	adds	r7, #8
 8004be6:	2f0c      	cmp	r7, #12
 8004be8:	d200      	bcs.n	8004bec <_malloc_r+0x64>
 8004bea:	270c      	movs	r7, #12
 8004bec:	0039      	movs	r1, r7
 8004bee:	0030      	movs	r0, r6
 8004bf0:	f7ff ffa8 	bl	8004b44 <sbrk_aligned>
 8004bf4:	1c43      	adds	r3, r0, #1
 8004bf6:	d034      	beq.n	8004c62 <_malloc_r+0xda>
 8004bf8:	6823      	ldr	r3, [r4, #0]
 8004bfa:	19df      	adds	r7, r3, r7
 8004bfc:	6027      	str	r7, [r4, #0]
 8004bfe:	e013      	b.n	8004c28 <_malloc_r+0xa0>
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	dacb      	bge.n	8004b9c <_malloc_r+0x14>
 8004c04:	230c      	movs	r3, #12
 8004c06:	2500      	movs	r5, #0
 8004c08:	6033      	str	r3, [r6, #0]
 8004c0a:	0028      	movs	r0, r5
 8004c0c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004c0e:	6822      	ldr	r2, [r4, #0]
 8004c10:	1bd1      	subs	r1, r2, r7
 8004c12:	d420      	bmi.n	8004c56 <_malloc_r+0xce>
 8004c14:	290b      	cmp	r1, #11
 8004c16:	d917      	bls.n	8004c48 <_malloc_r+0xc0>
 8004c18:	19e2      	adds	r2, r4, r7
 8004c1a:	6027      	str	r7, [r4, #0]
 8004c1c:	42a3      	cmp	r3, r4
 8004c1e:	d111      	bne.n	8004c44 <_malloc_r+0xbc>
 8004c20:	602a      	str	r2, [r5, #0]
 8004c22:	6863      	ldr	r3, [r4, #4]
 8004c24:	6011      	str	r1, [r2, #0]
 8004c26:	6053      	str	r3, [r2, #4]
 8004c28:	0030      	movs	r0, r6
 8004c2a:	0025      	movs	r5, r4
 8004c2c:	f000 fa40 	bl	80050b0 <__malloc_unlock>
 8004c30:	2207      	movs	r2, #7
 8004c32:	350b      	adds	r5, #11
 8004c34:	1d23      	adds	r3, r4, #4
 8004c36:	4395      	bics	r5, r2
 8004c38:	1aea      	subs	r2, r5, r3
 8004c3a:	429d      	cmp	r5, r3
 8004c3c:	d0e5      	beq.n	8004c0a <_malloc_r+0x82>
 8004c3e:	1b5b      	subs	r3, r3, r5
 8004c40:	50a3      	str	r3, [r4, r2]
 8004c42:	e7e2      	b.n	8004c0a <_malloc_r+0x82>
 8004c44:	605a      	str	r2, [r3, #4]
 8004c46:	e7ec      	b.n	8004c22 <_malloc_r+0x9a>
 8004c48:	6862      	ldr	r2, [r4, #4]
 8004c4a:	42a3      	cmp	r3, r4
 8004c4c:	d101      	bne.n	8004c52 <_malloc_r+0xca>
 8004c4e:	602a      	str	r2, [r5, #0]
 8004c50:	e7ea      	b.n	8004c28 <_malloc_r+0xa0>
 8004c52:	605a      	str	r2, [r3, #4]
 8004c54:	e7e8      	b.n	8004c28 <_malloc_r+0xa0>
 8004c56:	0023      	movs	r3, r4
 8004c58:	6864      	ldr	r4, [r4, #4]
 8004c5a:	e7a7      	b.n	8004bac <_malloc_r+0x24>
 8004c5c:	002c      	movs	r4, r5
 8004c5e:	686d      	ldr	r5, [r5, #4]
 8004c60:	e7af      	b.n	8004bc2 <_malloc_r+0x3a>
 8004c62:	230c      	movs	r3, #12
 8004c64:	0030      	movs	r0, r6
 8004c66:	6033      	str	r3, [r6, #0]
 8004c68:	f000 fa22 	bl	80050b0 <__malloc_unlock>
 8004c6c:	e7cd      	b.n	8004c0a <_malloc_r+0x82>
 8004c6e:	46c0      	nop			; (mov r8, r8)
 8004c70:	200002a8 	.word	0x200002a8

08004c74 <iprintf>:
 8004c74:	b40f      	push	{r0, r1, r2, r3}
 8004c76:	4b0b      	ldr	r3, [pc, #44]	; (8004ca4 <iprintf+0x30>)
 8004c78:	b513      	push	{r0, r1, r4, lr}
 8004c7a:	681c      	ldr	r4, [r3, #0]
 8004c7c:	2c00      	cmp	r4, #0
 8004c7e:	d005      	beq.n	8004c8c <iprintf+0x18>
 8004c80:	69a3      	ldr	r3, [r4, #24]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d102      	bne.n	8004c8c <iprintf+0x18>
 8004c86:	0020      	movs	r0, r4
 8004c88:	f000 f94e 	bl	8004f28 <__sinit>
 8004c8c:	ab05      	add	r3, sp, #20
 8004c8e:	0020      	movs	r0, r4
 8004c90:	9a04      	ldr	r2, [sp, #16]
 8004c92:	68a1      	ldr	r1, [r4, #8]
 8004c94:	9301      	str	r3, [sp, #4]
 8004c96:	f000 fa3b 	bl	8005110 <_vfiprintf_r>
 8004c9a:	bc16      	pop	{r1, r2, r4}
 8004c9c:	bc08      	pop	{r3}
 8004c9e:	b004      	add	sp, #16
 8004ca0:	4718      	bx	r3
 8004ca2:	46c0      	nop			; (mov r8, r8)
 8004ca4:	20000110 	.word	0x20000110

08004ca8 <_sbrk_r>:
 8004ca8:	2300      	movs	r3, #0
 8004caa:	b570      	push	{r4, r5, r6, lr}
 8004cac:	4d06      	ldr	r5, [pc, #24]	; (8004cc8 <_sbrk_r+0x20>)
 8004cae:	0004      	movs	r4, r0
 8004cb0:	0008      	movs	r0, r1
 8004cb2:	602b      	str	r3, [r5, #0]
 8004cb4:	f7fc fed6 	bl	8001a64 <_sbrk>
 8004cb8:	1c43      	adds	r3, r0, #1
 8004cba:	d103      	bne.n	8004cc4 <_sbrk_r+0x1c>
 8004cbc:	682b      	ldr	r3, [r5, #0]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d000      	beq.n	8004cc4 <_sbrk_r+0x1c>
 8004cc2:	6023      	str	r3, [r4, #0]
 8004cc4:	bd70      	pop	{r4, r5, r6, pc}
 8004cc6:	46c0      	nop			; (mov r8, r8)
 8004cc8:	200002b4 	.word	0x200002b4

08004ccc <strdup>:
 8004ccc:	b510      	push	{r4, lr}
 8004cce:	4b03      	ldr	r3, [pc, #12]	; (8004cdc <strdup+0x10>)
 8004cd0:	0001      	movs	r1, r0
 8004cd2:	6818      	ldr	r0, [r3, #0]
 8004cd4:	f000 f804 	bl	8004ce0 <_strdup_r>
 8004cd8:	bd10      	pop	{r4, pc}
 8004cda:	46c0      	nop			; (mov r8, r8)
 8004cdc:	20000110 	.word	0x20000110

08004ce0 <_strdup_r>:
 8004ce0:	b570      	push	{r4, r5, r6, lr}
 8004ce2:	0004      	movs	r4, r0
 8004ce4:	0008      	movs	r0, r1
 8004ce6:	000d      	movs	r5, r1
 8004ce8:	f7fb fa0e 	bl	8000108 <strlen>
 8004cec:	1c46      	adds	r6, r0, #1
 8004cee:	0031      	movs	r1, r6
 8004cf0:	0020      	movs	r0, r4
 8004cf2:	f7ff ff49 	bl	8004b88 <_malloc_r>
 8004cf6:	1e04      	subs	r4, r0, #0
 8004cf8:	d003      	beq.n	8004d02 <_strdup_r+0x22>
 8004cfa:	0032      	movs	r2, r6
 8004cfc:	0029      	movs	r1, r5
 8004cfe:	f000 f9c6 	bl	800508e <memcpy>
 8004d02:	0020      	movs	r0, r4
 8004d04:	bd70      	pop	{r4, r5, r6, pc}

08004d06 <strncmp>:
 8004d06:	b530      	push	{r4, r5, lr}
 8004d08:	0005      	movs	r5, r0
 8004d0a:	1e10      	subs	r0, r2, #0
 8004d0c:	d008      	beq.n	8004d20 <strncmp+0x1a>
 8004d0e:	2400      	movs	r4, #0
 8004d10:	3a01      	subs	r2, #1
 8004d12:	5d2b      	ldrb	r3, [r5, r4]
 8004d14:	5d08      	ldrb	r0, [r1, r4]
 8004d16:	4283      	cmp	r3, r0
 8004d18:	d101      	bne.n	8004d1e <strncmp+0x18>
 8004d1a:	4294      	cmp	r4, r2
 8004d1c:	d101      	bne.n	8004d22 <strncmp+0x1c>
 8004d1e:	1a18      	subs	r0, r3, r0
 8004d20:	bd30      	pop	{r4, r5, pc}
 8004d22:	3401      	adds	r4, #1
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d1f4      	bne.n	8004d12 <strncmp+0xc>
 8004d28:	e7f9      	b.n	8004d1e <strncmp+0x18>

08004d2a <strpbrk>:
 8004d2a:	b510      	push	{r4, lr}
 8004d2c:	7803      	ldrb	r3, [r0, #0]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d013      	beq.n	8004d5a <strpbrk+0x30>
 8004d32:	000b      	movs	r3, r1
 8004d34:	7802      	ldrb	r2, [r0, #0]
 8004d36:	2a00      	cmp	r2, #0
 8004d38:	d10d      	bne.n	8004d56 <strpbrk+0x2c>
 8004d3a:	781b      	ldrb	r3, [r3, #0]
 8004d3c:	1e5a      	subs	r2, r3, #1
 8004d3e:	4193      	sbcs	r3, r2
 8004d40:	425b      	negs	r3, r3
 8004d42:	4018      	ands	r0, r3
 8004d44:	bd10      	pop	{r4, pc}
 8004d46:	4294      	cmp	r4, r2
 8004d48:	d0fc      	beq.n	8004d44 <strpbrk+0x1a>
 8004d4a:	3301      	adds	r3, #1
 8004d4c:	781c      	ldrb	r4, [r3, #0]
 8004d4e:	2c00      	cmp	r4, #0
 8004d50:	d1f9      	bne.n	8004d46 <strpbrk+0x1c>
 8004d52:	3001      	adds	r0, #1
 8004d54:	e7ee      	b.n	8004d34 <strpbrk+0xa>
 8004d56:	000b      	movs	r3, r1
 8004d58:	e7f8      	b.n	8004d4c <strpbrk+0x22>
 8004d5a:	0018      	movs	r0, r3
 8004d5c:	e7f2      	b.n	8004d44 <strpbrk+0x1a>
	...

08004d60 <strtok>:
 8004d60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d62:	4b16      	ldr	r3, [pc, #88]	; (8004dbc <strtok+0x5c>)
 8004d64:	0005      	movs	r5, r0
 8004d66:	681f      	ldr	r7, [r3, #0]
 8004d68:	000e      	movs	r6, r1
 8004d6a:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 8004d6c:	2c00      	cmp	r4, #0
 8004d6e:	d11d      	bne.n	8004dac <strtok+0x4c>
 8004d70:	2050      	movs	r0, #80	; 0x50
 8004d72:	f7ff fe81 	bl	8004a78 <malloc>
 8004d76:	1e02      	subs	r2, r0, #0
 8004d78:	65b8      	str	r0, [r7, #88]	; 0x58
 8004d7a:	d104      	bne.n	8004d86 <strtok+0x26>
 8004d7c:	2157      	movs	r1, #87	; 0x57
 8004d7e:	4b10      	ldr	r3, [pc, #64]	; (8004dc0 <strtok+0x60>)
 8004d80:	4810      	ldr	r0, [pc, #64]	; (8004dc4 <strtok+0x64>)
 8004d82:	f000 f851 	bl	8004e28 <__assert_func>
 8004d86:	6004      	str	r4, [r0, #0]
 8004d88:	6044      	str	r4, [r0, #4]
 8004d8a:	6084      	str	r4, [r0, #8]
 8004d8c:	60c4      	str	r4, [r0, #12]
 8004d8e:	6104      	str	r4, [r0, #16]
 8004d90:	6144      	str	r4, [r0, #20]
 8004d92:	6184      	str	r4, [r0, #24]
 8004d94:	6284      	str	r4, [r0, #40]	; 0x28
 8004d96:	62c4      	str	r4, [r0, #44]	; 0x2c
 8004d98:	6304      	str	r4, [r0, #48]	; 0x30
 8004d9a:	6344      	str	r4, [r0, #52]	; 0x34
 8004d9c:	6384      	str	r4, [r0, #56]	; 0x38
 8004d9e:	63c4      	str	r4, [r0, #60]	; 0x3c
 8004da0:	6404      	str	r4, [r0, #64]	; 0x40
 8004da2:	6444      	str	r4, [r0, #68]	; 0x44
 8004da4:	6484      	str	r4, [r0, #72]	; 0x48
 8004da6:	64c4      	str	r4, [r0, #76]	; 0x4c
 8004da8:	7704      	strb	r4, [r0, #28]
 8004daa:	6244      	str	r4, [r0, #36]	; 0x24
 8004dac:	0031      	movs	r1, r6
 8004dae:	0028      	movs	r0, r5
 8004db0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004db2:	2301      	movs	r3, #1
 8004db4:	f000 f808 	bl	8004dc8 <__strtok_r>
 8004db8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004dba:	46c0      	nop			; (mov r8, r8)
 8004dbc:	20000110 	.word	0x20000110
 8004dc0:	08005e44 	.word	0x08005e44
 8004dc4:	08005e5b 	.word	0x08005e5b

08004dc8 <__strtok_r>:
 8004dc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004dca:	2800      	cmp	r0, #0
 8004dcc:	d102      	bne.n	8004dd4 <__strtok_r+0xc>
 8004dce:	6810      	ldr	r0, [r2, #0]
 8004dd0:	2800      	cmp	r0, #0
 8004dd2:	d013      	beq.n	8004dfc <__strtok_r+0x34>
 8004dd4:	0004      	movs	r4, r0
 8004dd6:	0020      	movs	r0, r4
 8004dd8:	000e      	movs	r6, r1
 8004dda:	7805      	ldrb	r5, [r0, #0]
 8004ddc:	3401      	adds	r4, #1
 8004dde:	7837      	ldrb	r7, [r6, #0]
 8004de0:	2f00      	cmp	r7, #0
 8004de2:	d104      	bne.n	8004dee <__strtok_r+0x26>
 8004de4:	2d00      	cmp	r5, #0
 8004de6:	d10f      	bne.n	8004e08 <__strtok_r+0x40>
 8004de8:	0028      	movs	r0, r5
 8004dea:	6015      	str	r5, [r2, #0]
 8004dec:	e006      	b.n	8004dfc <__strtok_r+0x34>
 8004dee:	3601      	adds	r6, #1
 8004df0:	42bd      	cmp	r5, r7
 8004df2:	d1f4      	bne.n	8004dde <__strtok_r+0x16>
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d1ee      	bne.n	8004dd6 <__strtok_r+0xe>
 8004df8:	6014      	str	r4, [r2, #0]
 8004dfa:	7003      	strb	r3, [r0, #0]
 8004dfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004dfe:	002f      	movs	r7, r5
 8004e00:	e00f      	b.n	8004e22 <__strtok_r+0x5a>
 8004e02:	3301      	adds	r3, #1
 8004e04:	2e00      	cmp	r6, #0
 8004e06:	d104      	bne.n	8004e12 <__strtok_r+0x4a>
 8004e08:	0023      	movs	r3, r4
 8004e0a:	3401      	adds	r4, #1
 8004e0c:	781d      	ldrb	r5, [r3, #0]
 8004e0e:	0027      	movs	r7, r4
 8004e10:	000b      	movs	r3, r1
 8004e12:	781e      	ldrb	r6, [r3, #0]
 8004e14:	42b5      	cmp	r5, r6
 8004e16:	d1f4      	bne.n	8004e02 <__strtok_r+0x3a>
 8004e18:	2d00      	cmp	r5, #0
 8004e1a:	d0f0      	beq.n	8004dfe <__strtok_r+0x36>
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	3c01      	subs	r4, #1
 8004e20:	7023      	strb	r3, [r4, #0]
 8004e22:	6017      	str	r7, [r2, #0]
 8004e24:	e7ea      	b.n	8004dfc <__strtok_r+0x34>
	...

08004e28 <__assert_func>:
 8004e28:	b530      	push	{r4, r5, lr}
 8004e2a:	0014      	movs	r4, r2
 8004e2c:	001a      	movs	r2, r3
 8004e2e:	4b09      	ldr	r3, [pc, #36]	; (8004e54 <__assert_func+0x2c>)
 8004e30:	0005      	movs	r5, r0
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	b085      	sub	sp, #20
 8004e36:	68d8      	ldr	r0, [r3, #12]
 8004e38:	4b07      	ldr	r3, [pc, #28]	; (8004e58 <__assert_func+0x30>)
 8004e3a:	2c00      	cmp	r4, #0
 8004e3c:	d101      	bne.n	8004e42 <__assert_func+0x1a>
 8004e3e:	4b07      	ldr	r3, [pc, #28]	; (8004e5c <__assert_func+0x34>)
 8004e40:	001c      	movs	r4, r3
 8004e42:	9301      	str	r3, [sp, #4]
 8004e44:	9100      	str	r1, [sp, #0]
 8004e46:	002b      	movs	r3, r5
 8004e48:	4905      	ldr	r1, [pc, #20]	; (8004e60 <__assert_func+0x38>)
 8004e4a:	9402      	str	r4, [sp, #8]
 8004e4c:	f000 f8ec 	bl	8005028 <fiprintf>
 8004e50:	f000 fd48 	bl	80058e4 <abort>
 8004e54:	20000110 	.word	0x20000110
 8004e58:	08005eb8 	.word	0x08005eb8
 8004e5c:	08005ef3 	.word	0x08005ef3
 8004e60:	08005ec5 	.word	0x08005ec5

08004e64 <std>:
 8004e64:	2300      	movs	r3, #0
 8004e66:	b510      	push	{r4, lr}
 8004e68:	0004      	movs	r4, r0
 8004e6a:	6003      	str	r3, [r0, #0]
 8004e6c:	6043      	str	r3, [r0, #4]
 8004e6e:	6083      	str	r3, [r0, #8]
 8004e70:	8181      	strh	r1, [r0, #12]
 8004e72:	6643      	str	r3, [r0, #100]	; 0x64
 8004e74:	0019      	movs	r1, r3
 8004e76:	81c2      	strh	r2, [r0, #14]
 8004e78:	6103      	str	r3, [r0, #16]
 8004e7a:	6143      	str	r3, [r0, #20]
 8004e7c:	6183      	str	r3, [r0, #24]
 8004e7e:	2208      	movs	r2, #8
 8004e80:	305c      	adds	r0, #92	; 0x5c
 8004e82:	f7ff fe0d 	bl	8004aa0 <memset>
 8004e86:	4b05      	ldr	r3, [pc, #20]	; (8004e9c <std+0x38>)
 8004e88:	6224      	str	r4, [r4, #32]
 8004e8a:	6263      	str	r3, [r4, #36]	; 0x24
 8004e8c:	4b04      	ldr	r3, [pc, #16]	; (8004ea0 <std+0x3c>)
 8004e8e:	62a3      	str	r3, [r4, #40]	; 0x28
 8004e90:	4b04      	ldr	r3, [pc, #16]	; (8004ea4 <std+0x40>)
 8004e92:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004e94:	4b04      	ldr	r3, [pc, #16]	; (8004ea8 <std+0x44>)
 8004e96:	6323      	str	r3, [r4, #48]	; 0x30
 8004e98:	bd10      	pop	{r4, pc}
 8004e9a:	46c0      	nop			; (mov r8, r8)
 8004e9c:	08005689 	.word	0x08005689
 8004ea0:	080056b1 	.word	0x080056b1
 8004ea4:	080056e9 	.word	0x080056e9
 8004ea8:	08005715 	.word	0x08005715

08004eac <_cleanup_r>:
 8004eac:	b510      	push	{r4, lr}
 8004eae:	4902      	ldr	r1, [pc, #8]	; (8004eb8 <_cleanup_r+0xc>)
 8004eb0:	f000 f8ca 	bl	8005048 <_fwalk_reent>
 8004eb4:	bd10      	pop	{r4, pc}
 8004eb6:	46c0      	nop			; (mov r8, r8)
 8004eb8:	08005a31 	.word	0x08005a31

08004ebc <__sfmoreglue>:
 8004ebc:	b570      	push	{r4, r5, r6, lr}
 8004ebe:	2568      	movs	r5, #104	; 0x68
 8004ec0:	1e4a      	subs	r2, r1, #1
 8004ec2:	4355      	muls	r5, r2
 8004ec4:	000e      	movs	r6, r1
 8004ec6:	0029      	movs	r1, r5
 8004ec8:	3174      	adds	r1, #116	; 0x74
 8004eca:	f7ff fe5d 	bl	8004b88 <_malloc_r>
 8004ece:	1e04      	subs	r4, r0, #0
 8004ed0:	d008      	beq.n	8004ee4 <__sfmoreglue+0x28>
 8004ed2:	2100      	movs	r1, #0
 8004ed4:	002a      	movs	r2, r5
 8004ed6:	6001      	str	r1, [r0, #0]
 8004ed8:	6046      	str	r6, [r0, #4]
 8004eda:	300c      	adds	r0, #12
 8004edc:	60a0      	str	r0, [r4, #8]
 8004ede:	3268      	adds	r2, #104	; 0x68
 8004ee0:	f7ff fdde 	bl	8004aa0 <memset>
 8004ee4:	0020      	movs	r0, r4
 8004ee6:	bd70      	pop	{r4, r5, r6, pc}

08004ee8 <__sfp_lock_acquire>:
 8004ee8:	b510      	push	{r4, lr}
 8004eea:	4802      	ldr	r0, [pc, #8]	; (8004ef4 <__sfp_lock_acquire+0xc>)
 8004eec:	f000 f8cd 	bl	800508a <__retarget_lock_acquire_recursive>
 8004ef0:	bd10      	pop	{r4, pc}
 8004ef2:	46c0      	nop			; (mov r8, r8)
 8004ef4:	200002b1 	.word	0x200002b1

08004ef8 <__sfp_lock_release>:
 8004ef8:	b510      	push	{r4, lr}
 8004efa:	4802      	ldr	r0, [pc, #8]	; (8004f04 <__sfp_lock_release+0xc>)
 8004efc:	f000 f8c6 	bl	800508c <__retarget_lock_release_recursive>
 8004f00:	bd10      	pop	{r4, pc}
 8004f02:	46c0      	nop			; (mov r8, r8)
 8004f04:	200002b1 	.word	0x200002b1

08004f08 <__sinit_lock_acquire>:
 8004f08:	b510      	push	{r4, lr}
 8004f0a:	4802      	ldr	r0, [pc, #8]	; (8004f14 <__sinit_lock_acquire+0xc>)
 8004f0c:	f000 f8bd 	bl	800508a <__retarget_lock_acquire_recursive>
 8004f10:	bd10      	pop	{r4, pc}
 8004f12:	46c0      	nop			; (mov r8, r8)
 8004f14:	200002b2 	.word	0x200002b2

08004f18 <__sinit_lock_release>:
 8004f18:	b510      	push	{r4, lr}
 8004f1a:	4802      	ldr	r0, [pc, #8]	; (8004f24 <__sinit_lock_release+0xc>)
 8004f1c:	f000 f8b6 	bl	800508c <__retarget_lock_release_recursive>
 8004f20:	bd10      	pop	{r4, pc}
 8004f22:	46c0      	nop			; (mov r8, r8)
 8004f24:	200002b2 	.word	0x200002b2

08004f28 <__sinit>:
 8004f28:	b513      	push	{r0, r1, r4, lr}
 8004f2a:	0004      	movs	r4, r0
 8004f2c:	f7ff ffec 	bl	8004f08 <__sinit_lock_acquire>
 8004f30:	69a3      	ldr	r3, [r4, #24]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d002      	beq.n	8004f3c <__sinit+0x14>
 8004f36:	f7ff ffef 	bl	8004f18 <__sinit_lock_release>
 8004f3a:	bd13      	pop	{r0, r1, r4, pc}
 8004f3c:	64a3      	str	r3, [r4, #72]	; 0x48
 8004f3e:	64e3      	str	r3, [r4, #76]	; 0x4c
 8004f40:	6523      	str	r3, [r4, #80]	; 0x50
 8004f42:	4b13      	ldr	r3, [pc, #76]	; (8004f90 <__sinit+0x68>)
 8004f44:	4a13      	ldr	r2, [pc, #76]	; (8004f94 <__sinit+0x6c>)
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	62a2      	str	r2, [r4, #40]	; 0x28
 8004f4a:	9301      	str	r3, [sp, #4]
 8004f4c:	42a3      	cmp	r3, r4
 8004f4e:	d101      	bne.n	8004f54 <__sinit+0x2c>
 8004f50:	2301      	movs	r3, #1
 8004f52:	61a3      	str	r3, [r4, #24]
 8004f54:	0020      	movs	r0, r4
 8004f56:	f000 f81f 	bl	8004f98 <__sfp>
 8004f5a:	6060      	str	r0, [r4, #4]
 8004f5c:	0020      	movs	r0, r4
 8004f5e:	f000 f81b 	bl	8004f98 <__sfp>
 8004f62:	60a0      	str	r0, [r4, #8]
 8004f64:	0020      	movs	r0, r4
 8004f66:	f000 f817 	bl	8004f98 <__sfp>
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	2104      	movs	r1, #4
 8004f6e:	60e0      	str	r0, [r4, #12]
 8004f70:	6860      	ldr	r0, [r4, #4]
 8004f72:	f7ff ff77 	bl	8004e64 <std>
 8004f76:	2201      	movs	r2, #1
 8004f78:	2109      	movs	r1, #9
 8004f7a:	68a0      	ldr	r0, [r4, #8]
 8004f7c:	f7ff ff72 	bl	8004e64 <std>
 8004f80:	2202      	movs	r2, #2
 8004f82:	2112      	movs	r1, #18
 8004f84:	68e0      	ldr	r0, [r4, #12]
 8004f86:	f7ff ff6d 	bl	8004e64 <std>
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	61a3      	str	r3, [r4, #24]
 8004f8e:	e7d2      	b.n	8004f36 <__sinit+0xe>
 8004f90:	08005e40 	.word	0x08005e40
 8004f94:	08004ead 	.word	0x08004ead

08004f98 <__sfp>:
 8004f98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f9a:	0007      	movs	r7, r0
 8004f9c:	f7ff ffa4 	bl	8004ee8 <__sfp_lock_acquire>
 8004fa0:	4b1f      	ldr	r3, [pc, #124]	; (8005020 <__sfp+0x88>)
 8004fa2:	681e      	ldr	r6, [r3, #0]
 8004fa4:	69b3      	ldr	r3, [r6, #24]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d102      	bne.n	8004fb0 <__sfp+0x18>
 8004faa:	0030      	movs	r0, r6
 8004fac:	f7ff ffbc 	bl	8004f28 <__sinit>
 8004fb0:	3648      	adds	r6, #72	; 0x48
 8004fb2:	68b4      	ldr	r4, [r6, #8]
 8004fb4:	6873      	ldr	r3, [r6, #4]
 8004fb6:	3b01      	subs	r3, #1
 8004fb8:	d504      	bpl.n	8004fc4 <__sfp+0x2c>
 8004fba:	6833      	ldr	r3, [r6, #0]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d022      	beq.n	8005006 <__sfp+0x6e>
 8004fc0:	6836      	ldr	r6, [r6, #0]
 8004fc2:	e7f6      	b.n	8004fb2 <__sfp+0x1a>
 8004fc4:	220c      	movs	r2, #12
 8004fc6:	5ea5      	ldrsh	r5, [r4, r2]
 8004fc8:	2d00      	cmp	r5, #0
 8004fca:	d11a      	bne.n	8005002 <__sfp+0x6a>
 8004fcc:	0020      	movs	r0, r4
 8004fce:	4b15      	ldr	r3, [pc, #84]	; (8005024 <__sfp+0x8c>)
 8004fd0:	3058      	adds	r0, #88	; 0x58
 8004fd2:	60e3      	str	r3, [r4, #12]
 8004fd4:	6665      	str	r5, [r4, #100]	; 0x64
 8004fd6:	f000 f857 	bl	8005088 <__retarget_lock_init_recursive>
 8004fda:	f7ff ff8d 	bl	8004ef8 <__sfp_lock_release>
 8004fde:	0020      	movs	r0, r4
 8004fe0:	2208      	movs	r2, #8
 8004fe2:	0029      	movs	r1, r5
 8004fe4:	6025      	str	r5, [r4, #0]
 8004fe6:	60a5      	str	r5, [r4, #8]
 8004fe8:	6065      	str	r5, [r4, #4]
 8004fea:	6125      	str	r5, [r4, #16]
 8004fec:	6165      	str	r5, [r4, #20]
 8004fee:	61a5      	str	r5, [r4, #24]
 8004ff0:	305c      	adds	r0, #92	; 0x5c
 8004ff2:	f7ff fd55 	bl	8004aa0 <memset>
 8004ff6:	6365      	str	r5, [r4, #52]	; 0x34
 8004ff8:	63a5      	str	r5, [r4, #56]	; 0x38
 8004ffa:	64a5      	str	r5, [r4, #72]	; 0x48
 8004ffc:	64e5      	str	r5, [r4, #76]	; 0x4c
 8004ffe:	0020      	movs	r0, r4
 8005000:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005002:	3468      	adds	r4, #104	; 0x68
 8005004:	e7d7      	b.n	8004fb6 <__sfp+0x1e>
 8005006:	2104      	movs	r1, #4
 8005008:	0038      	movs	r0, r7
 800500a:	f7ff ff57 	bl	8004ebc <__sfmoreglue>
 800500e:	1e04      	subs	r4, r0, #0
 8005010:	6030      	str	r0, [r6, #0]
 8005012:	d1d5      	bne.n	8004fc0 <__sfp+0x28>
 8005014:	f7ff ff70 	bl	8004ef8 <__sfp_lock_release>
 8005018:	230c      	movs	r3, #12
 800501a:	603b      	str	r3, [r7, #0]
 800501c:	e7ef      	b.n	8004ffe <__sfp+0x66>
 800501e:	46c0      	nop			; (mov r8, r8)
 8005020:	08005e40 	.word	0x08005e40
 8005024:	ffff0001 	.word	0xffff0001

08005028 <fiprintf>:
 8005028:	b40e      	push	{r1, r2, r3}
 800502a:	b503      	push	{r0, r1, lr}
 800502c:	0001      	movs	r1, r0
 800502e:	ab03      	add	r3, sp, #12
 8005030:	4804      	ldr	r0, [pc, #16]	; (8005044 <fiprintf+0x1c>)
 8005032:	cb04      	ldmia	r3!, {r2}
 8005034:	6800      	ldr	r0, [r0, #0]
 8005036:	9301      	str	r3, [sp, #4]
 8005038:	f000 f86a 	bl	8005110 <_vfiprintf_r>
 800503c:	b002      	add	sp, #8
 800503e:	bc08      	pop	{r3}
 8005040:	b003      	add	sp, #12
 8005042:	4718      	bx	r3
 8005044:	20000110 	.word	0x20000110

08005048 <_fwalk_reent>:
 8005048:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800504a:	0004      	movs	r4, r0
 800504c:	0006      	movs	r6, r0
 800504e:	2700      	movs	r7, #0
 8005050:	9101      	str	r1, [sp, #4]
 8005052:	3448      	adds	r4, #72	; 0x48
 8005054:	6863      	ldr	r3, [r4, #4]
 8005056:	68a5      	ldr	r5, [r4, #8]
 8005058:	9300      	str	r3, [sp, #0]
 800505a:	9b00      	ldr	r3, [sp, #0]
 800505c:	3b01      	subs	r3, #1
 800505e:	9300      	str	r3, [sp, #0]
 8005060:	d504      	bpl.n	800506c <_fwalk_reent+0x24>
 8005062:	6824      	ldr	r4, [r4, #0]
 8005064:	2c00      	cmp	r4, #0
 8005066:	d1f5      	bne.n	8005054 <_fwalk_reent+0xc>
 8005068:	0038      	movs	r0, r7
 800506a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800506c:	89ab      	ldrh	r3, [r5, #12]
 800506e:	2b01      	cmp	r3, #1
 8005070:	d908      	bls.n	8005084 <_fwalk_reent+0x3c>
 8005072:	220e      	movs	r2, #14
 8005074:	5eab      	ldrsh	r3, [r5, r2]
 8005076:	3301      	adds	r3, #1
 8005078:	d004      	beq.n	8005084 <_fwalk_reent+0x3c>
 800507a:	0029      	movs	r1, r5
 800507c:	0030      	movs	r0, r6
 800507e:	9b01      	ldr	r3, [sp, #4]
 8005080:	4798      	blx	r3
 8005082:	4307      	orrs	r7, r0
 8005084:	3568      	adds	r5, #104	; 0x68
 8005086:	e7e8      	b.n	800505a <_fwalk_reent+0x12>

08005088 <__retarget_lock_init_recursive>:
 8005088:	4770      	bx	lr

0800508a <__retarget_lock_acquire_recursive>:
 800508a:	4770      	bx	lr

0800508c <__retarget_lock_release_recursive>:
 800508c:	4770      	bx	lr

0800508e <memcpy>:
 800508e:	2300      	movs	r3, #0
 8005090:	b510      	push	{r4, lr}
 8005092:	429a      	cmp	r2, r3
 8005094:	d100      	bne.n	8005098 <memcpy+0xa>
 8005096:	bd10      	pop	{r4, pc}
 8005098:	5ccc      	ldrb	r4, [r1, r3]
 800509a:	54c4      	strb	r4, [r0, r3]
 800509c:	3301      	adds	r3, #1
 800509e:	e7f8      	b.n	8005092 <memcpy+0x4>

080050a0 <__malloc_lock>:
 80050a0:	b510      	push	{r4, lr}
 80050a2:	4802      	ldr	r0, [pc, #8]	; (80050ac <__malloc_lock+0xc>)
 80050a4:	f7ff fff1 	bl	800508a <__retarget_lock_acquire_recursive>
 80050a8:	bd10      	pop	{r4, pc}
 80050aa:	46c0      	nop			; (mov r8, r8)
 80050ac:	200002b0 	.word	0x200002b0

080050b0 <__malloc_unlock>:
 80050b0:	b510      	push	{r4, lr}
 80050b2:	4802      	ldr	r0, [pc, #8]	; (80050bc <__malloc_unlock+0xc>)
 80050b4:	f7ff ffea 	bl	800508c <__retarget_lock_release_recursive>
 80050b8:	bd10      	pop	{r4, pc}
 80050ba:	46c0      	nop			; (mov r8, r8)
 80050bc:	200002b0 	.word	0x200002b0

080050c0 <__sfputc_r>:
 80050c0:	6893      	ldr	r3, [r2, #8]
 80050c2:	b510      	push	{r4, lr}
 80050c4:	3b01      	subs	r3, #1
 80050c6:	6093      	str	r3, [r2, #8]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	da04      	bge.n	80050d6 <__sfputc_r+0x16>
 80050cc:	6994      	ldr	r4, [r2, #24]
 80050ce:	42a3      	cmp	r3, r4
 80050d0:	db07      	blt.n	80050e2 <__sfputc_r+0x22>
 80050d2:	290a      	cmp	r1, #10
 80050d4:	d005      	beq.n	80050e2 <__sfputc_r+0x22>
 80050d6:	6813      	ldr	r3, [r2, #0]
 80050d8:	1c58      	adds	r0, r3, #1
 80050da:	6010      	str	r0, [r2, #0]
 80050dc:	7019      	strb	r1, [r3, #0]
 80050de:	0008      	movs	r0, r1
 80050e0:	bd10      	pop	{r4, pc}
 80050e2:	f000 fb1d 	bl	8005720 <__swbuf_r>
 80050e6:	0001      	movs	r1, r0
 80050e8:	e7f9      	b.n	80050de <__sfputc_r+0x1e>

080050ea <__sfputs_r>:
 80050ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050ec:	0006      	movs	r6, r0
 80050ee:	000f      	movs	r7, r1
 80050f0:	0014      	movs	r4, r2
 80050f2:	18d5      	adds	r5, r2, r3
 80050f4:	42ac      	cmp	r4, r5
 80050f6:	d101      	bne.n	80050fc <__sfputs_r+0x12>
 80050f8:	2000      	movs	r0, #0
 80050fa:	e007      	b.n	800510c <__sfputs_r+0x22>
 80050fc:	7821      	ldrb	r1, [r4, #0]
 80050fe:	003a      	movs	r2, r7
 8005100:	0030      	movs	r0, r6
 8005102:	f7ff ffdd 	bl	80050c0 <__sfputc_r>
 8005106:	3401      	adds	r4, #1
 8005108:	1c43      	adds	r3, r0, #1
 800510a:	d1f3      	bne.n	80050f4 <__sfputs_r+0xa>
 800510c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005110 <_vfiprintf_r>:
 8005110:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005112:	b0a1      	sub	sp, #132	; 0x84
 8005114:	0006      	movs	r6, r0
 8005116:	000c      	movs	r4, r1
 8005118:	001f      	movs	r7, r3
 800511a:	9203      	str	r2, [sp, #12]
 800511c:	2800      	cmp	r0, #0
 800511e:	d004      	beq.n	800512a <_vfiprintf_r+0x1a>
 8005120:	6983      	ldr	r3, [r0, #24]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d101      	bne.n	800512a <_vfiprintf_r+0x1a>
 8005126:	f7ff feff 	bl	8004f28 <__sinit>
 800512a:	4b8e      	ldr	r3, [pc, #568]	; (8005364 <_vfiprintf_r+0x254>)
 800512c:	429c      	cmp	r4, r3
 800512e:	d11c      	bne.n	800516a <_vfiprintf_r+0x5a>
 8005130:	6874      	ldr	r4, [r6, #4]
 8005132:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005134:	07db      	lsls	r3, r3, #31
 8005136:	d405      	bmi.n	8005144 <_vfiprintf_r+0x34>
 8005138:	89a3      	ldrh	r3, [r4, #12]
 800513a:	059b      	lsls	r3, r3, #22
 800513c:	d402      	bmi.n	8005144 <_vfiprintf_r+0x34>
 800513e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005140:	f7ff ffa3 	bl	800508a <__retarget_lock_acquire_recursive>
 8005144:	89a3      	ldrh	r3, [r4, #12]
 8005146:	071b      	lsls	r3, r3, #28
 8005148:	d502      	bpl.n	8005150 <_vfiprintf_r+0x40>
 800514a:	6923      	ldr	r3, [r4, #16]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d11d      	bne.n	800518c <_vfiprintf_r+0x7c>
 8005150:	0021      	movs	r1, r4
 8005152:	0030      	movs	r0, r6
 8005154:	f000 fb4e 	bl	80057f4 <__swsetup_r>
 8005158:	2800      	cmp	r0, #0
 800515a:	d017      	beq.n	800518c <_vfiprintf_r+0x7c>
 800515c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800515e:	07db      	lsls	r3, r3, #31
 8005160:	d50d      	bpl.n	800517e <_vfiprintf_r+0x6e>
 8005162:	2001      	movs	r0, #1
 8005164:	4240      	negs	r0, r0
 8005166:	b021      	add	sp, #132	; 0x84
 8005168:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800516a:	4b7f      	ldr	r3, [pc, #508]	; (8005368 <_vfiprintf_r+0x258>)
 800516c:	429c      	cmp	r4, r3
 800516e:	d101      	bne.n	8005174 <_vfiprintf_r+0x64>
 8005170:	68b4      	ldr	r4, [r6, #8]
 8005172:	e7de      	b.n	8005132 <_vfiprintf_r+0x22>
 8005174:	4b7d      	ldr	r3, [pc, #500]	; (800536c <_vfiprintf_r+0x25c>)
 8005176:	429c      	cmp	r4, r3
 8005178:	d1db      	bne.n	8005132 <_vfiprintf_r+0x22>
 800517a:	68f4      	ldr	r4, [r6, #12]
 800517c:	e7d9      	b.n	8005132 <_vfiprintf_r+0x22>
 800517e:	89a3      	ldrh	r3, [r4, #12]
 8005180:	059b      	lsls	r3, r3, #22
 8005182:	d4ee      	bmi.n	8005162 <_vfiprintf_r+0x52>
 8005184:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005186:	f7ff ff81 	bl	800508c <__retarget_lock_release_recursive>
 800518a:	e7ea      	b.n	8005162 <_vfiprintf_r+0x52>
 800518c:	2300      	movs	r3, #0
 800518e:	ad08      	add	r5, sp, #32
 8005190:	616b      	str	r3, [r5, #20]
 8005192:	3320      	adds	r3, #32
 8005194:	766b      	strb	r3, [r5, #25]
 8005196:	3310      	adds	r3, #16
 8005198:	76ab      	strb	r3, [r5, #26]
 800519a:	9707      	str	r7, [sp, #28]
 800519c:	9f03      	ldr	r7, [sp, #12]
 800519e:	783b      	ldrb	r3, [r7, #0]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d001      	beq.n	80051a8 <_vfiprintf_r+0x98>
 80051a4:	2b25      	cmp	r3, #37	; 0x25
 80051a6:	d14e      	bne.n	8005246 <_vfiprintf_r+0x136>
 80051a8:	9b03      	ldr	r3, [sp, #12]
 80051aa:	1afb      	subs	r3, r7, r3
 80051ac:	9305      	str	r3, [sp, #20]
 80051ae:	9b03      	ldr	r3, [sp, #12]
 80051b0:	429f      	cmp	r7, r3
 80051b2:	d00d      	beq.n	80051d0 <_vfiprintf_r+0xc0>
 80051b4:	9b05      	ldr	r3, [sp, #20]
 80051b6:	0021      	movs	r1, r4
 80051b8:	0030      	movs	r0, r6
 80051ba:	9a03      	ldr	r2, [sp, #12]
 80051bc:	f7ff ff95 	bl	80050ea <__sfputs_r>
 80051c0:	1c43      	adds	r3, r0, #1
 80051c2:	d100      	bne.n	80051c6 <_vfiprintf_r+0xb6>
 80051c4:	e0b5      	b.n	8005332 <_vfiprintf_r+0x222>
 80051c6:	696a      	ldr	r2, [r5, #20]
 80051c8:	9b05      	ldr	r3, [sp, #20]
 80051ca:	4694      	mov	ip, r2
 80051cc:	4463      	add	r3, ip
 80051ce:	616b      	str	r3, [r5, #20]
 80051d0:	783b      	ldrb	r3, [r7, #0]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d100      	bne.n	80051d8 <_vfiprintf_r+0xc8>
 80051d6:	e0ac      	b.n	8005332 <_vfiprintf_r+0x222>
 80051d8:	2201      	movs	r2, #1
 80051da:	1c7b      	adds	r3, r7, #1
 80051dc:	9303      	str	r3, [sp, #12]
 80051de:	2300      	movs	r3, #0
 80051e0:	4252      	negs	r2, r2
 80051e2:	606a      	str	r2, [r5, #4]
 80051e4:	a904      	add	r1, sp, #16
 80051e6:	3254      	adds	r2, #84	; 0x54
 80051e8:	1852      	adds	r2, r2, r1
 80051ea:	602b      	str	r3, [r5, #0]
 80051ec:	60eb      	str	r3, [r5, #12]
 80051ee:	60ab      	str	r3, [r5, #8]
 80051f0:	7013      	strb	r3, [r2, #0]
 80051f2:	65ab      	str	r3, [r5, #88]	; 0x58
 80051f4:	9b03      	ldr	r3, [sp, #12]
 80051f6:	2205      	movs	r2, #5
 80051f8:	7819      	ldrb	r1, [r3, #0]
 80051fa:	485d      	ldr	r0, [pc, #372]	; (8005370 <_vfiprintf_r+0x260>)
 80051fc:	f000 fcd8 	bl	8005bb0 <memchr>
 8005200:	9b03      	ldr	r3, [sp, #12]
 8005202:	1c5f      	adds	r7, r3, #1
 8005204:	2800      	cmp	r0, #0
 8005206:	d120      	bne.n	800524a <_vfiprintf_r+0x13a>
 8005208:	682a      	ldr	r2, [r5, #0]
 800520a:	06d3      	lsls	r3, r2, #27
 800520c:	d504      	bpl.n	8005218 <_vfiprintf_r+0x108>
 800520e:	2353      	movs	r3, #83	; 0x53
 8005210:	a904      	add	r1, sp, #16
 8005212:	185b      	adds	r3, r3, r1
 8005214:	2120      	movs	r1, #32
 8005216:	7019      	strb	r1, [r3, #0]
 8005218:	0713      	lsls	r3, r2, #28
 800521a:	d504      	bpl.n	8005226 <_vfiprintf_r+0x116>
 800521c:	2353      	movs	r3, #83	; 0x53
 800521e:	a904      	add	r1, sp, #16
 8005220:	185b      	adds	r3, r3, r1
 8005222:	212b      	movs	r1, #43	; 0x2b
 8005224:	7019      	strb	r1, [r3, #0]
 8005226:	9b03      	ldr	r3, [sp, #12]
 8005228:	781b      	ldrb	r3, [r3, #0]
 800522a:	2b2a      	cmp	r3, #42	; 0x2a
 800522c:	d016      	beq.n	800525c <_vfiprintf_r+0x14c>
 800522e:	2100      	movs	r1, #0
 8005230:	68eb      	ldr	r3, [r5, #12]
 8005232:	9f03      	ldr	r7, [sp, #12]
 8005234:	783a      	ldrb	r2, [r7, #0]
 8005236:	1c78      	adds	r0, r7, #1
 8005238:	3a30      	subs	r2, #48	; 0x30
 800523a:	4684      	mov	ip, r0
 800523c:	2a09      	cmp	r2, #9
 800523e:	d94f      	bls.n	80052e0 <_vfiprintf_r+0x1d0>
 8005240:	2900      	cmp	r1, #0
 8005242:	d111      	bne.n	8005268 <_vfiprintf_r+0x158>
 8005244:	e017      	b.n	8005276 <_vfiprintf_r+0x166>
 8005246:	3701      	adds	r7, #1
 8005248:	e7a9      	b.n	800519e <_vfiprintf_r+0x8e>
 800524a:	4b49      	ldr	r3, [pc, #292]	; (8005370 <_vfiprintf_r+0x260>)
 800524c:	682a      	ldr	r2, [r5, #0]
 800524e:	1ac0      	subs	r0, r0, r3
 8005250:	2301      	movs	r3, #1
 8005252:	4083      	lsls	r3, r0
 8005254:	4313      	orrs	r3, r2
 8005256:	602b      	str	r3, [r5, #0]
 8005258:	9703      	str	r7, [sp, #12]
 800525a:	e7cb      	b.n	80051f4 <_vfiprintf_r+0xe4>
 800525c:	9b07      	ldr	r3, [sp, #28]
 800525e:	1d19      	adds	r1, r3, #4
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	9107      	str	r1, [sp, #28]
 8005264:	2b00      	cmp	r3, #0
 8005266:	db01      	blt.n	800526c <_vfiprintf_r+0x15c>
 8005268:	930b      	str	r3, [sp, #44]	; 0x2c
 800526a:	e004      	b.n	8005276 <_vfiprintf_r+0x166>
 800526c:	425b      	negs	r3, r3
 800526e:	60eb      	str	r3, [r5, #12]
 8005270:	2302      	movs	r3, #2
 8005272:	4313      	orrs	r3, r2
 8005274:	602b      	str	r3, [r5, #0]
 8005276:	783b      	ldrb	r3, [r7, #0]
 8005278:	2b2e      	cmp	r3, #46	; 0x2e
 800527a:	d10a      	bne.n	8005292 <_vfiprintf_r+0x182>
 800527c:	787b      	ldrb	r3, [r7, #1]
 800527e:	2b2a      	cmp	r3, #42	; 0x2a
 8005280:	d137      	bne.n	80052f2 <_vfiprintf_r+0x1e2>
 8005282:	9b07      	ldr	r3, [sp, #28]
 8005284:	3702      	adds	r7, #2
 8005286:	1d1a      	adds	r2, r3, #4
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	9207      	str	r2, [sp, #28]
 800528c:	2b00      	cmp	r3, #0
 800528e:	db2d      	blt.n	80052ec <_vfiprintf_r+0x1dc>
 8005290:	9309      	str	r3, [sp, #36]	; 0x24
 8005292:	2203      	movs	r2, #3
 8005294:	7839      	ldrb	r1, [r7, #0]
 8005296:	4837      	ldr	r0, [pc, #220]	; (8005374 <_vfiprintf_r+0x264>)
 8005298:	f000 fc8a 	bl	8005bb0 <memchr>
 800529c:	2800      	cmp	r0, #0
 800529e:	d007      	beq.n	80052b0 <_vfiprintf_r+0x1a0>
 80052a0:	4b34      	ldr	r3, [pc, #208]	; (8005374 <_vfiprintf_r+0x264>)
 80052a2:	682a      	ldr	r2, [r5, #0]
 80052a4:	1ac0      	subs	r0, r0, r3
 80052a6:	2340      	movs	r3, #64	; 0x40
 80052a8:	4083      	lsls	r3, r0
 80052aa:	4313      	orrs	r3, r2
 80052ac:	3701      	adds	r7, #1
 80052ae:	602b      	str	r3, [r5, #0]
 80052b0:	7839      	ldrb	r1, [r7, #0]
 80052b2:	1c7b      	adds	r3, r7, #1
 80052b4:	2206      	movs	r2, #6
 80052b6:	4830      	ldr	r0, [pc, #192]	; (8005378 <_vfiprintf_r+0x268>)
 80052b8:	9303      	str	r3, [sp, #12]
 80052ba:	7629      	strb	r1, [r5, #24]
 80052bc:	f000 fc78 	bl	8005bb0 <memchr>
 80052c0:	2800      	cmp	r0, #0
 80052c2:	d045      	beq.n	8005350 <_vfiprintf_r+0x240>
 80052c4:	4b2d      	ldr	r3, [pc, #180]	; (800537c <_vfiprintf_r+0x26c>)
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d127      	bne.n	800531a <_vfiprintf_r+0x20a>
 80052ca:	2207      	movs	r2, #7
 80052cc:	9b07      	ldr	r3, [sp, #28]
 80052ce:	3307      	adds	r3, #7
 80052d0:	4393      	bics	r3, r2
 80052d2:	3308      	adds	r3, #8
 80052d4:	9307      	str	r3, [sp, #28]
 80052d6:	696b      	ldr	r3, [r5, #20]
 80052d8:	9a04      	ldr	r2, [sp, #16]
 80052da:	189b      	adds	r3, r3, r2
 80052dc:	616b      	str	r3, [r5, #20]
 80052de:	e75d      	b.n	800519c <_vfiprintf_r+0x8c>
 80052e0:	210a      	movs	r1, #10
 80052e2:	434b      	muls	r3, r1
 80052e4:	4667      	mov	r7, ip
 80052e6:	189b      	adds	r3, r3, r2
 80052e8:	3909      	subs	r1, #9
 80052ea:	e7a3      	b.n	8005234 <_vfiprintf_r+0x124>
 80052ec:	2301      	movs	r3, #1
 80052ee:	425b      	negs	r3, r3
 80052f0:	e7ce      	b.n	8005290 <_vfiprintf_r+0x180>
 80052f2:	2300      	movs	r3, #0
 80052f4:	001a      	movs	r2, r3
 80052f6:	3701      	adds	r7, #1
 80052f8:	606b      	str	r3, [r5, #4]
 80052fa:	7839      	ldrb	r1, [r7, #0]
 80052fc:	1c78      	adds	r0, r7, #1
 80052fe:	3930      	subs	r1, #48	; 0x30
 8005300:	4684      	mov	ip, r0
 8005302:	2909      	cmp	r1, #9
 8005304:	d903      	bls.n	800530e <_vfiprintf_r+0x1fe>
 8005306:	2b00      	cmp	r3, #0
 8005308:	d0c3      	beq.n	8005292 <_vfiprintf_r+0x182>
 800530a:	9209      	str	r2, [sp, #36]	; 0x24
 800530c:	e7c1      	b.n	8005292 <_vfiprintf_r+0x182>
 800530e:	230a      	movs	r3, #10
 8005310:	435a      	muls	r2, r3
 8005312:	4667      	mov	r7, ip
 8005314:	1852      	adds	r2, r2, r1
 8005316:	3b09      	subs	r3, #9
 8005318:	e7ef      	b.n	80052fa <_vfiprintf_r+0x1ea>
 800531a:	ab07      	add	r3, sp, #28
 800531c:	9300      	str	r3, [sp, #0]
 800531e:	0022      	movs	r2, r4
 8005320:	0029      	movs	r1, r5
 8005322:	0030      	movs	r0, r6
 8005324:	4b16      	ldr	r3, [pc, #88]	; (8005380 <_vfiprintf_r+0x270>)
 8005326:	e000      	b.n	800532a <_vfiprintf_r+0x21a>
 8005328:	bf00      	nop
 800532a:	9004      	str	r0, [sp, #16]
 800532c:	9b04      	ldr	r3, [sp, #16]
 800532e:	3301      	adds	r3, #1
 8005330:	d1d1      	bne.n	80052d6 <_vfiprintf_r+0x1c6>
 8005332:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005334:	07db      	lsls	r3, r3, #31
 8005336:	d405      	bmi.n	8005344 <_vfiprintf_r+0x234>
 8005338:	89a3      	ldrh	r3, [r4, #12]
 800533a:	059b      	lsls	r3, r3, #22
 800533c:	d402      	bmi.n	8005344 <_vfiprintf_r+0x234>
 800533e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005340:	f7ff fea4 	bl	800508c <__retarget_lock_release_recursive>
 8005344:	89a3      	ldrh	r3, [r4, #12]
 8005346:	065b      	lsls	r3, r3, #25
 8005348:	d500      	bpl.n	800534c <_vfiprintf_r+0x23c>
 800534a:	e70a      	b.n	8005162 <_vfiprintf_r+0x52>
 800534c:	980d      	ldr	r0, [sp, #52]	; 0x34
 800534e:	e70a      	b.n	8005166 <_vfiprintf_r+0x56>
 8005350:	ab07      	add	r3, sp, #28
 8005352:	9300      	str	r3, [sp, #0]
 8005354:	0022      	movs	r2, r4
 8005356:	0029      	movs	r1, r5
 8005358:	0030      	movs	r0, r6
 800535a:	4b09      	ldr	r3, [pc, #36]	; (8005380 <_vfiprintf_r+0x270>)
 800535c:	f000 f882 	bl	8005464 <_printf_i>
 8005360:	e7e3      	b.n	800532a <_vfiprintf_r+0x21a>
 8005362:	46c0      	nop			; (mov r8, r8)
 8005364:	08005f14 	.word	0x08005f14
 8005368:	08005f34 	.word	0x08005f34
 800536c:	08005ef4 	.word	0x08005ef4
 8005370:	08005f54 	.word	0x08005f54
 8005374:	08005f5a 	.word	0x08005f5a
 8005378:	08005f5e 	.word	0x08005f5e
 800537c:	00000000 	.word	0x00000000
 8005380:	080050eb 	.word	0x080050eb

08005384 <_printf_common>:
 8005384:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005386:	0015      	movs	r5, r2
 8005388:	9301      	str	r3, [sp, #4]
 800538a:	688a      	ldr	r2, [r1, #8]
 800538c:	690b      	ldr	r3, [r1, #16]
 800538e:	000c      	movs	r4, r1
 8005390:	9000      	str	r0, [sp, #0]
 8005392:	4293      	cmp	r3, r2
 8005394:	da00      	bge.n	8005398 <_printf_common+0x14>
 8005396:	0013      	movs	r3, r2
 8005398:	0022      	movs	r2, r4
 800539a:	602b      	str	r3, [r5, #0]
 800539c:	3243      	adds	r2, #67	; 0x43
 800539e:	7812      	ldrb	r2, [r2, #0]
 80053a0:	2a00      	cmp	r2, #0
 80053a2:	d001      	beq.n	80053a8 <_printf_common+0x24>
 80053a4:	3301      	adds	r3, #1
 80053a6:	602b      	str	r3, [r5, #0]
 80053a8:	6823      	ldr	r3, [r4, #0]
 80053aa:	069b      	lsls	r3, r3, #26
 80053ac:	d502      	bpl.n	80053b4 <_printf_common+0x30>
 80053ae:	682b      	ldr	r3, [r5, #0]
 80053b0:	3302      	adds	r3, #2
 80053b2:	602b      	str	r3, [r5, #0]
 80053b4:	6822      	ldr	r2, [r4, #0]
 80053b6:	2306      	movs	r3, #6
 80053b8:	0017      	movs	r7, r2
 80053ba:	401f      	ands	r7, r3
 80053bc:	421a      	tst	r2, r3
 80053be:	d027      	beq.n	8005410 <_printf_common+0x8c>
 80053c0:	0023      	movs	r3, r4
 80053c2:	3343      	adds	r3, #67	; 0x43
 80053c4:	781b      	ldrb	r3, [r3, #0]
 80053c6:	1e5a      	subs	r2, r3, #1
 80053c8:	4193      	sbcs	r3, r2
 80053ca:	6822      	ldr	r2, [r4, #0]
 80053cc:	0692      	lsls	r2, r2, #26
 80053ce:	d430      	bmi.n	8005432 <_printf_common+0xae>
 80053d0:	0022      	movs	r2, r4
 80053d2:	9901      	ldr	r1, [sp, #4]
 80053d4:	9800      	ldr	r0, [sp, #0]
 80053d6:	9e08      	ldr	r6, [sp, #32]
 80053d8:	3243      	adds	r2, #67	; 0x43
 80053da:	47b0      	blx	r6
 80053dc:	1c43      	adds	r3, r0, #1
 80053de:	d025      	beq.n	800542c <_printf_common+0xa8>
 80053e0:	2306      	movs	r3, #6
 80053e2:	6820      	ldr	r0, [r4, #0]
 80053e4:	682a      	ldr	r2, [r5, #0]
 80053e6:	68e1      	ldr	r1, [r4, #12]
 80053e8:	2500      	movs	r5, #0
 80053ea:	4003      	ands	r3, r0
 80053ec:	2b04      	cmp	r3, #4
 80053ee:	d103      	bne.n	80053f8 <_printf_common+0x74>
 80053f0:	1a8d      	subs	r5, r1, r2
 80053f2:	43eb      	mvns	r3, r5
 80053f4:	17db      	asrs	r3, r3, #31
 80053f6:	401d      	ands	r5, r3
 80053f8:	68a3      	ldr	r3, [r4, #8]
 80053fa:	6922      	ldr	r2, [r4, #16]
 80053fc:	4293      	cmp	r3, r2
 80053fe:	dd01      	ble.n	8005404 <_printf_common+0x80>
 8005400:	1a9b      	subs	r3, r3, r2
 8005402:	18ed      	adds	r5, r5, r3
 8005404:	2700      	movs	r7, #0
 8005406:	42bd      	cmp	r5, r7
 8005408:	d120      	bne.n	800544c <_printf_common+0xc8>
 800540a:	2000      	movs	r0, #0
 800540c:	e010      	b.n	8005430 <_printf_common+0xac>
 800540e:	3701      	adds	r7, #1
 8005410:	68e3      	ldr	r3, [r4, #12]
 8005412:	682a      	ldr	r2, [r5, #0]
 8005414:	1a9b      	subs	r3, r3, r2
 8005416:	42bb      	cmp	r3, r7
 8005418:	ddd2      	ble.n	80053c0 <_printf_common+0x3c>
 800541a:	0022      	movs	r2, r4
 800541c:	2301      	movs	r3, #1
 800541e:	9901      	ldr	r1, [sp, #4]
 8005420:	9800      	ldr	r0, [sp, #0]
 8005422:	9e08      	ldr	r6, [sp, #32]
 8005424:	3219      	adds	r2, #25
 8005426:	47b0      	blx	r6
 8005428:	1c43      	adds	r3, r0, #1
 800542a:	d1f0      	bne.n	800540e <_printf_common+0x8a>
 800542c:	2001      	movs	r0, #1
 800542e:	4240      	negs	r0, r0
 8005430:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005432:	2030      	movs	r0, #48	; 0x30
 8005434:	18e1      	adds	r1, r4, r3
 8005436:	3143      	adds	r1, #67	; 0x43
 8005438:	7008      	strb	r0, [r1, #0]
 800543a:	0021      	movs	r1, r4
 800543c:	1c5a      	adds	r2, r3, #1
 800543e:	3145      	adds	r1, #69	; 0x45
 8005440:	7809      	ldrb	r1, [r1, #0]
 8005442:	18a2      	adds	r2, r4, r2
 8005444:	3243      	adds	r2, #67	; 0x43
 8005446:	3302      	adds	r3, #2
 8005448:	7011      	strb	r1, [r2, #0]
 800544a:	e7c1      	b.n	80053d0 <_printf_common+0x4c>
 800544c:	0022      	movs	r2, r4
 800544e:	2301      	movs	r3, #1
 8005450:	9901      	ldr	r1, [sp, #4]
 8005452:	9800      	ldr	r0, [sp, #0]
 8005454:	9e08      	ldr	r6, [sp, #32]
 8005456:	321a      	adds	r2, #26
 8005458:	47b0      	blx	r6
 800545a:	1c43      	adds	r3, r0, #1
 800545c:	d0e6      	beq.n	800542c <_printf_common+0xa8>
 800545e:	3701      	adds	r7, #1
 8005460:	e7d1      	b.n	8005406 <_printf_common+0x82>
	...

08005464 <_printf_i>:
 8005464:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005466:	b08b      	sub	sp, #44	; 0x2c
 8005468:	9206      	str	r2, [sp, #24]
 800546a:	000a      	movs	r2, r1
 800546c:	3243      	adds	r2, #67	; 0x43
 800546e:	9307      	str	r3, [sp, #28]
 8005470:	9005      	str	r0, [sp, #20]
 8005472:	9204      	str	r2, [sp, #16]
 8005474:	7e0a      	ldrb	r2, [r1, #24]
 8005476:	000c      	movs	r4, r1
 8005478:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800547a:	2a78      	cmp	r2, #120	; 0x78
 800547c:	d807      	bhi.n	800548e <_printf_i+0x2a>
 800547e:	2a62      	cmp	r2, #98	; 0x62
 8005480:	d809      	bhi.n	8005496 <_printf_i+0x32>
 8005482:	2a00      	cmp	r2, #0
 8005484:	d100      	bne.n	8005488 <_printf_i+0x24>
 8005486:	e0c1      	b.n	800560c <_printf_i+0x1a8>
 8005488:	2a58      	cmp	r2, #88	; 0x58
 800548a:	d100      	bne.n	800548e <_printf_i+0x2a>
 800548c:	e08c      	b.n	80055a8 <_printf_i+0x144>
 800548e:	0026      	movs	r6, r4
 8005490:	3642      	adds	r6, #66	; 0x42
 8005492:	7032      	strb	r2, [r6, #0]
 8005494:	e022      	b.n	80054dc <_printf_i+0x78>
 8005496:	0010      	movs	r0, r2
 8005498:	3863      	subs	r0, #99	; 0x63
 800549a:	2815      	cmp	r0, #21
 800549c:	d8f7      	bhi.n	800548e <_printf_i+0x2a>
 800549e:	f7fa fe3b 	bl	8000118 <__gnu_thumb1_case_shi>
 80054a2:	0016      	.short	0x0016
 80054a4:	fff6001f 	.word	0xfff6001f
 80054a8:	fff6fff6 	.word	0xfff6fff6
 80054ac:	001ffff6 	.word	0x001ffff6
 80054b0:	fff6fff6 	.word	0xfff6fff6
 80054b4:	fff6fff6 	.word	0xfff6fff6
 80054b8:	003600a8 	.word	0x003600a8
 80054bc:	fff6009a 	.word	0xfff6009a
 80054c0:	00b9fff6 	.word	0x00b9fff6
 80054c4:	0036fff6 	.word	0x0036fff6
 80054c8:	fff6fff6 	.word	0xfff6fff6
 80054cc:	009e      	.short	0x009e
 80054ce:	0026      	movs	r6, r4
 80054d0:	681a      	ldr	r2, [r3, #0]
 80054d2:	3642      	adds	r6, #66	; 0x42
 80054d4:	1d11      	adds	r1, r2, #4
 80054d6:	6019      	str	r1, [r3, #0]
 80054d8:	6813      	ldr	r3, [r2, #0]
 80054da:	7033      	strb	r3, [r6, #0]
 80054dc:	2301      	movs	r3, #1
 80054de:	e0a7      	b.n	8005630 <_printf_i+0x1cc>
 80054e0:	6808      	ldr	r0, [r1, #0]
 80054e2:	6819      	ldr	r1, [r3, #0]
 80054e4:	1d0a      	adds	r2, r1, #4
 80054e6:	0605      	lsls	r5, r0, #24
 80054e8:	d50b      	bpl.n	8005502 <_printf_i+0x9e>
 80054ea:	680d      	ldr	r5, [r1, #0]
 80054ec:	601a      	str	r2, [r3, #0]
 80054ee:	2d00      	cmp	r5, #0
 80054f0:	da03      	bge.n	80054fa <_printf_i+0x96>
 80054f2:	232d      	movs	r3, #45	; 0x2d
 80054f4:	9a04      	ldr	r2, [sp, #16]
 80054f6:	426d      	negs	r5, r5
 80054f8:	7013      	strb	r3, [r2, #0]
 80054fa:	4b61      	ldr	r3, [pc, #388]	; (8005680 <_printf_i+0x21c>)
 80054fc:	270a      	movs	r7, #10
 80054fe:	9303      	str	r3, [sp, #12]
 8005500:	e01b      	b.n	800553a <_printf_i+0xd6>
 8005502:	680d      	ldr	r5, [r1, #0]
 8005504:	601a      	str	r2, [r3, #0]
 8005506:	0641      	lsls	r1, r0, #25
 8005508:	d5f1      	bpl.n	80054ee <_printf_i+0x8a>
 800550a:	b22d      	sxth	r5, r5
 800550c:	e7ef      	b.n	80054ee <_printf_i+0x8a>
 800550e:	680d      	ldr	r5, [r1, #0]
 8005510:	6819      	ldr	r1, [r3, #0]
 8005512:	1d08      	adds	r0, r1, #4
 8005514:	6018      	str	r0, [r3, #0]
 8005516:	062e      	lsls	r6, r5, #24
 8005518:	d501      	bpl.n	800551e <_printf_i+0xba>
 800551a:	680d      	ldr	r5, [r1, #0]
 800551c:	e003      	b.n	8005526 <_printf_i+0xc2>
 800551e:	066d      	lsls	r5, r5, #25
 8005520:	d5fb      	bpl.n	800551a <_printf_i+0xb6>
 8005522:	680d      	ldr	r5, [r1, #0]
 8005524:	b2ad      	uxth	r5, r5
 8005526:	4b56      	ldr	r3, [pc, #344]	; (8005680 <_printf_i+0x21c>)
 8005528:	2708      	movs	r7, #8
 800552a:	9303      	str	r3, [sp, #12]
 800552c:	2a6f      	cmp	r2, #111	; 0x6f
 800552e:	d000      	beq.n	8005532 <_printf_i+0xce>
 8005530:	3702      	adds	r7, #2
 8005532:	0023      	movs	r3, r4
 8005534:	2200      	movs	r2, #0
 8005536:	3343      	adds	r3, #67	; 0x43
 8005538:	701a      	strb	r2, [r3, #0]
 800553a:	6863      	ldr	r3, [r4, #4]
 800553c:	60a3      	str	r3, [r4, #8]
 800553e:	2b00      	cmp	r3, #0
 8005540:	db03      	blt.n	800554a <_printf_i+0xe6>
 8005542:	2204      	movs	r2, #4
 8005544:	6821      	ldr	r1, [r4, #0]
 8005546:	4391      	bics	r1, r2
 8005548:	6021      	str	r1, [r4, #0]
 800554a:	2d00      	cmp	r5, #0
 800554c:	d102      	bne.n	8005554 <_printf_i+0xf0>
 800554e:	9e04      	ldr	r6, [sp, #16]
 8005550:	2b00      	cmp	r3, #0
 8005552:	d00c      	beq.n	800556e <_printf_i+0x10a>
 8005554:	9e04      	ldr	r6, [sp, #16]
 8005556:	0028      	movs	r0, r5
 8005558:	0039      	movs	r1, r7
 800555a:	f7fa fe6d 	bl	8000238 <__aeabi_uidivmod>
 800555e:	9b03      	ldr	r3, [sp, #12]
 8005560:	3e01      	subs	r6, #1
 8005562:	5c5b      	ldrb	r3, [r3, r1]
 8005564:	7033      	strb	r3, [r6, #0]
 8005566:	002b      	movs	r3, r5
 8005568:	0005      	movs	r5, r0
 800556a:	429f      	cmp	r7, r3
 800556c:	d9f3      	bls.n	8005556 <_printf_i+0xf2>
 800556e:	2f08      	cmp	r7, #8
 8005570:	d109      	bne.n	8005586 <_printf_i+0x122>
 8005572:	6823      	ldr	r3, [r4, #0]
 8005574:	07db      	lsls	r3, r3, #31
 8005576:	d506      	bpl.n	8005586 <_printf_i+0x122>
 8005578:	6863      	ldr	r3, [r4, #4]
 800557a:	6922      	ldr	r2, [r4, #16]
 800557c:	4293      	cmp	r3, r2
 800557e:	dc02      	bgt.n	8005586 <_printf_i+0x122>
 8005580:	2330      	movs	r3, #48	; 0x30
 8005582:	3e01      	subs	r6, #1
 8005584:	7033      	strb	r3, [r6, #0]
 8005586:	9b04      	ldr	r3, [sp, #16]
 8005588:	1b9b      	subs	r3, r3, r6
 800558a:	6123      	str	r3, [r4, #16]
 800558c:	9b07      	ldr	r3, [sp, #28]
 800558e:	0021      	movs	r1, r4
 8005590:	9300      	str	r3, [sp, #0]
 8005592:	9805      	ldr	r0, [sp, #20]
 8005594:	9b06      	ldr	r3, [sp, #24]
 8005596:	aa09      	add	r2, sp, #36	; 0x24
 8005598:	f7ff fef4 	bl	8005384 <_printf_common>
 800559c:	1c43      	adds	r3, r0, #1
 800559e:	d14c      	bne.n	800563a <_printf_i+0x1d6>
 80055a0:	2001      	movs	r0, #1
 80055a2:	4240      	negs	r0, r0
 80055a4:	b00b      	add	sp, #44	; 0x2c
 80055a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80055a8:	3145      	adds	r1, #69	; 0x45
 80055aa:	700a      	strb	r2, [r1, #0]
 80055ac:	4a34      	ldr	r2, [pc, #208]	; (8005680 <_printf_i+0x21c>)
 80055ae:	9203      	str	r2, [sp, #12]
 80055b0:	681a      	ldr	r2, [r3, #0]
 80055b2:	6821      	ldr	r1, [r4, #0]
 80055b4:	ca20      	ldmia	r2!, {r5}
 80055b6:	601a      	str	r2, [r3, #0]
 80055b8:	0608      	lsls	r0, r1, #24
 80055ba:	d516      	bpl.n	80055ea <_printf_i+0x186>
 80055bc:	07cb      	lsls	r3, r1, #31
 80055be:	d502      	bpl.n	80055c6 <_printf_i+0x162>
 80055c0:	2320      	movs	r3, #32
 80055c2:	4319      	orrs	r1, r3
 80055c4:	6021      	str	r1, [r4, #0]
 80055c6:	2710      	movs	r7, #16
 80055c8:	2d00      	cmp	r5, #0
 80055ca:	d1b2      	bne.n	8005532 <_printf_i+0xce>
 80055cc:	2320      	movs	r3, #32
 80055ce:	6822      	ldr	r2, [r4, #0]
 80055d0:	439a      	bics	r2, r3
 80055d2:	6022      	str	r2, [r4, #0]
 80055d4:	e7ad      	b.n	8005532 <_printf_i+0xce>
 80055d6:	2220      	movs	r2, #32
 80055d8:	6809      	ldr	r1, [r1, #0]
 80055da:	430a      	orrs	r2, r1
 80055dc:	6022      	str	r2, [r4, #0]
 80055de:	0022      	movs	r2, r4
 80055e0:	2178      	movs	r1, #120	; 0x78
 80055e2:	3245      	adds	r2, #69	; 0x45
 80055e4:	7011      	strb	r1, [r2, #0]
 80055e6:	4a27      	ldr	r2, [pc, #156]	; (8005684 <_printf_i+0x220>)
 80055e8:	e7e1      	b.n	80055ae <_printf_i+0x14a>
 80055ea:	0648      	lsls	r0, r1, #25
 80055ec:	d5e6      	bpl.n	80055bc <_printf_i+0x158>
 80055ee:	b2ad      	uxth	r5, r5
 80055f0:	e7e4      	b.n	80055bc <_printf_i+0x158>
 80055f2:	681a      	ldr	r2, [r3, #0]
 80055f4:	680d      	ldr	r5, [r1, #0]
 80055f6:	1d10      	adds	r0, r2, #4
 80055f8:	6949      	ldr	r1, [r1, #20]
 80055fa:	6018      	str	r0, [r3, #0]
 80055fc:	6813      	ldr	r3, [r2, #0]
 80055fe:	062e      	lsls	r6, r5, #24
 8005600:	d501      	bpl.n	8005606 <_printf_i+0x1a2>
 8005602:	6019      	str	r1, [r3, #0]
 8005604:	e002      	b.n	800560c <_printf_i+0x1a8>
 8005606:	066d      	lsls	r5, r5, #25
 8005608:	d5fb      	bpl.n	8005602 <_printf_i+0x19e>
 800560a:	8019      	strh	r1, [r3, #0]
 800560c:	2300      	movs	r3, #0
 800560e:	9e04      	ldr	r6, [sp, #16]
 8005610:	6123      	str	r3, [r4, #16]
 8005612:	e7bb      	b.n	800558c <_printf_i+0x128>
 8005614:	681a      	ldr	r2, [r3, #0]
 8005616:	1d11      	adds	r1, r2, #4
 8005618:	6019      	str	r1, [r3, #0]
 800561a:	6816      	ldr	r6, [r2, #0]
 800561c:	2100      	movs	r1, #0
 800561e:	0030      	movs	r0, r6
 8005620:	6862      	ldr	r2, [r4, #4]
 8005622:	f000 fac5 	bl	8005bb0 <memchr>
 8005626:	2800      	cmp	r0, #0
 8005628:	d001      	beq.n	800562e <_printf_i+0x1ca>
 800562a:	1b80      	subs	r0, r0, r6
 800562c:	6060      	str	r0, [r4, #4]
 800562e:	6863      	ldr	r3, [r4, #4]
 8005630:	6123      	str	r3, [r4, #16]
 8005632:	2300      	movs	r3, #0
 8005634:	9a04      	ldr	r2, [sp, #16]
 8005636:	7013      	strb	r3, [r2, #0]
 8005638:	e7a8      	b.n	800558c <_printf_i+0x128>
 800563a:	6923      	ldr	r3, [r4, #16]
 800563c:	0032      	movs	r2, r6
 800563e:	9906      	ldr	r1, [sp, #24]
 8005640:	9805      	ldr	r0, [sp, #20]
 8005642:	9d07      	ldr	r5, [sp, #28]
 8005644:	47a8      	blx	r5
 8005646:	1c43      	adds	r3, r0, #1
 8005648:	d0aa      	beq.n	80055a0 <_printf_i+0x13c>
 800564a:	6823      	ldr	r3, [r4, #0]
 800564c:	079b      	lsls	r3, r3, #30
 800564e:	d415      	bmi.n	800567c <_printf_i+0x218>
 8005650:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005652:	68e0      	ldr	r0, [r4, #12]
 8005654:	4298      	cmp	r0, r3
 8005656:	daa5      	bge.n	80055a4 <_printf_i+0x140>
 8005658:	0018      	movs	r0, r3
 800565a:	e7a3      	b.n	80055a4 <_printf_i+0x140>
 800565c:	0022      	movs	r2, r4
 800565e:	2301      	movs	r3, #1
 8005660:	9906      	ldr	r1, [sp, #24]
 8005662:	9805      	ldr	r0, [sp, #20]
 8005664:	9e07      	ldr	r6, [sp, #28]
 8005666:	3219      	adds	r2, #25
 8005668:	47b0      	blx	r6
 800566a:	1c43      	adds	r3, r0, #1
 800566c:	d098      	beq.n	80055a0 <_printf_i+0x13c>
 800566e:	3501      	adds	r5, #1
 8005670:	68e3      	ldr	r3, [r4, #12]
 8005672:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005674:	1a9b      	subs	r3, r3, r2
 8005676:	42ab      	cmp	r3, r5
 8005678:	dcf0      	bgt.n	800565c <_printf_i+0x1f8>
 800567a:	e7e9      	b.n	8005650 <_printf_i+0x1ec>
 800567c:	2500      	movs	r5, #0
 800567e:	e7f7      	b.n	8005670 <_printf_i+0x20c>
 8005680:	08005f65 	.word	0x08005f65
 8005684:	08005f76 	.word	0x08005f76

08005688 <__sread>:
 8005688:	b570      	push	{r4, r5, r6, lr}
 800568a:	000c      	movs	r4, r1
 800568c:	250e      	movs	r5, #14
 800568e:	5f49      	ldrsh	r1, [r1, r5]
 8005690:	f000 fa9a 	bl	8005bc8 <_read_r>
 8005694:	2800      	cmp	r0, #0
 8005696:	db03      	blt.n	80056a0 <__sread+0x18>
 8005698:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800569a:	181b      	adds	r3, r3, r0
 800569c:	6563      	str	r3, [r4, #84]	; 0x54
 800569e:	bd70      	pop	{r4, r5, r6, pc}
 80056a0:	89a3      	ldrh	r3, [r4, #12]
 80056a2:	4a02      	ldr	r2, [pc, #8]	; (80056ac <__sread+0x24>)
 80056a4:	4013      	ands	r3, r2
 80056a6:	81a3      	strh	r3, [r4, #12]
 80056a8:	e7f9      	b.n	800569e <__sread+0x16>
 80056aa:	46c0      	nop			; (mov r8, r8)
 80056ac:	ffffefff 	.word	0xffffefff

080056b0 <__swrite>:
 80056b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056b2:	001f      	movs	r7, r3
 80056b4:	898b      	ldrh	r3, [r1, #12]
 80056b6:	0005      	movs	r5, r0
 80056b8:	000c      	movs	r4, r1
 80056ba:	0016      	movs	r6, r2
 80056bc:	05db      	lsls	r3, r3, #23
 80056be:	d505      	bpl.n	80056cc <__swrite+0x1c>
 80056c0:	230e      	movs	r3, #14
 80056c2:	5ec9      	ldrsh	r1, [r1, r3]
 80056c4:	2200      	movs	r2, #0
 80056c6:	2302      	movs	r3, #2
 80056c8:	f000 f9f2 	bl	8005ab0 <_lseek_r>
 80056cc:	89a3      	ldrh	r3, [r4, #12]
 80056ce:	4a05      	ldr	r2, [pc, #20]	; (80056e4 <__swrite+0x34>)
 80056d0:	0028      	movs	r0, r5
 80056d2:	4013      	ands	r3, r2
 80056d4:	81a3      	strh	r3, [r4, #12]
 80056d6:	0032      	movs	r2, r6
 80056d8:	230e      	movs	r3, #14
 80056da:	5ee1      	ldrsh	r1, [r4, r3]
 80056dc:	003b      	movs	r3, r7
 80056de:	f000 f875 	bl	80057cc <_write_r>
 80056e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80056e4:	ffffefff 	.word	0xffffefff

080056e8 <__sseek>:
 80056e8:	b570      	push	{r4, r5, r6, lr}
 80056ea:	000c      	movs	r4, r1
 80056ec:	250e      	movs	r5, #14
 80056ee:	5f49      	ldrsh	r1, [r1, r5]
 80056f0:	f000 f9de 	bl	8005ab0 <_lseek_r>
 80056f4:	89a3      	ldrh	r3, [r4, #12]
 80056f6:	1c42      	adds	r2, r0, #1
 80056f8:	d103      	bne.n	8005702 <__sseek+0x1a>
 80056fa:	4a05      	ldr	r2, [pc, #20]	; (8005710 <__sseek+0x28>)
 80056fc:	4013      	ands	r3, r2
 80056fe:	81a3      	strh	r3, [r4, #12]
 8005700:	bd70      	pop	{r4, r5, r6, pc}
 8005702:	2280      	movs	r2, #128	; 0x80
 8005704:	0152      	lsls	r2, r2, #5
 8005706:	4313      	orrs	r3, r2
 8005708:	81a3      	strh	r3, [r4, #12]
 800570a:	6560      	str	r0, [r4, #84]	; 0x54
 800570c:	e7f8      	b.n	8005700 <__sseek+0x18>
 800570e:	46c0      	nop			; (mov r8, r8)
 8005710:	ffffefff 	.word	0xffffefff

08005714 <__sclose>:
 8005714:	b510      	push	{r4, lr}
 8005716:	230e      	movs	r3, #14
 8005718:	5ec9      	ldrsh	r1, [r1, r3]
 800571a:	f000 f8eb 	bl	80058f4 <_close_r>
 800571e:	bd10      	pop	{r4, pc}

08005720 <__swbuf_r>:
 8005720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005722:	0005      	movs	r5, r0
 8005724:	000e      	movs	r6, r1
 8005726:	0014      	movs	r4, r2
 8005728:	2800      	cmp	r0, #0
 800572a:	d004      	beq.n	8005736 <__swbuf_r+0x16>
 800572c:	6983      	ldr	r3, [r0, #24]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d101      	bne.n	8005736 <__swbuf_r+0x16>
 8005732:	f7ff fbf9 	bl	8004f28 <__sinit>
 8005736:	4b22      	ldr	r3, [pc, #136]	; (80057c0 <__swbuf_r+0xa0>)
 8005738:	429c      	cmp	r4, r3
 800573a:	d12e      	bne.n	800579a <__swbuf_r+0x7a>
 800573c:	686c      	ldr	r4, [r5, #4]
 800573e:	69a3      	ldr	r3, [r4, #24]
 8005740:	60a3      	str	r3, [r4, #8]
 8005742:	89a3      	ldrh	r3, [r4, #12]
 8005744:	071b      	lsls	r3, r3, #28
 8005746:	d532      	bpl.n	80057ae <__swbuf_r+0x8e>
 8005748:	6923      	ldr	r3, [r4, #16]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d02f      	beq.n	80057ae <__swbuf_r+0x8e>
 800574e:	6823      	ldr	r3, [r4, #0]
 8005750:	6922      	ldr	r2, [r4, #16]
 8005752:	b2f7      	uxtb	r7, r6
 8005754:	1a98      	subs	r0, r3, r2
 8005756:	6963      	ldr	r3, [r4, #20]
 8005758:	b2f6      	uxtb	r6, r6
 800575a:	4283      	cmp	r3, r0
 800575c:	dc05      	bgt.n	800576a <__swbuf_r+0x4a>
 800575e:	0021      	movs	r1, r4
 8005760:	0028      	movs	r0, r5
 8005762:	f000 f965 	bl	8005a30 <_fflush_r>
 8005766:	2800      	cmp	r0, #0
 8005768:	d127      	bne.n	80057ba <__swbuf_r+0x9a>
 800576a:	68a3      	ldr	r3, [r4, #8]
 800576c:	3001      	adds	r0, #1
 800576e:	3b01      	subs	r3, #1
 8005770:	60a3      	str	r3, [r4, #8]
 8005772:	6823      	ldr	r3, [r4, #0]
 8005774:	1c5a      	adds	r2, r3, #1
 8005776:	6022      	str	r2, [r4, #0]
 8005778:	701f      	strb	r7, [r3, #0]
 800577a:	6963      	ldr	r3, [r4, #20]
 800577c:	4283      	cmp	r3, r0
 800577e:	d004      	beq.n	800578a <__swbuf_r+0x6a>
 8005780:	89a3      	ldrh	r3, [r4, #12]
 8005782:	07db      	lsls	r3, r3, #31
 8005784:	d507      	bpl.n	8005796 <__swbuf_r+0x76>
 8005786:	2e0a      	cmp	r6, #10
 8005788:	d105      	bne.n	8005796 <__swbuf_r+0x76>
 800578a:	0021      	movs	r1, r4
 800578c:	0028      	movs	r0, r5
 800578e:	f000 f94f 	bl	8005a30 <_fflush_r>
 8005792:	2800      	cmp	r0, #0
 8005794:	d111      	bne.n	80057ba <__swbuf_r+0x9a>
 8005796:	0030      	movs	r0, r6
 8005798:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800579a:	4b0a      	ldr	r3, [pc, #40]	; (80057c4 <__swbuf_r+0xa4>)
 800579c:	429c      	cmp	r4, r3
 800579e:	d101      	bne.n	80057a4 <__swbuf_r+0x84>
 80057a0:	68ac      	ldr	r4, [r5, #8]
 80057a2:	e7cc      	b.n	800573e <__swbuf_r+0x1e>
 80057a4:	4b08      	ldr	r3, [pc, #32]	; (80057c8 <__swbuf_r+0xa8>)
 80057a6:	429c      	cmp	r4, r3
 80057a8:	d1c9      	bne.n	800573e <__swbuf_r+0x1e>
 80057aa:	68ec      	ldr	r4, [r5, #12]
 80057ac:	e7c7      	b.n	800573e <__swbuf_r+0x1e>
 80057ae:	0021      	movs	r1, r4
 80057b0:	0028      	movs	r0, r5
 80057b2:	f000 f81f 	bl	80057f4 <__swsetup_r>
 80057b6:	2800      	cmp	r0, #0
 80057b8:	d0c9      	beq.n	800574e <__swbuf_r+0x2e>
 80057ba:	2601      	movs	r6, #1
 80057bc:	4276      	negs	r6, r6
 80057be:	e7ea      	b.n	8005796 <__swbuf_r+0x76>
 80057c0:	08005f14 	.word	0x08005f14
 80057c4:	08005f34 	.word	0x08005f34
 80057c8:	08005ef4 	.word	0x08005ef4

080057cc <_write_r>:
 80057cc:	b570      	push	{r4, r5, r6, lr}
 80057ce:	0004      	movs	r4, r0
 80057d0:	0008      	movs	r0, r1
 80057d2:	0011      	movs	r1, r2
 80057d4:	001a      	movs	r2, r3
 80057d6:	2300      	movs	r3, #0
 80057d8:	4d05      	ldr	r5, [pc, #20]	; (80057f0 <_write_r+0x24>)
 80057da:	602b      	str	r3, [r5, #0]
 80057dc:	f7fc f8f9 	bl	80019d2 <_write>
 80057e0:	1c43      	adds	r3, r0, #1
 80057e2:	d103      	bne.n	80057ec <_write_r+0x20>
 80057e4:	682b      	ldr	r3, [r5, #0]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d000      	beq.n	80057ec <_write_r+0x20>
 80057ea:	6023      	str	r3, [r4, #0]
 80057ec:	bd70      	pop	{r4, r5, r6, pc}
 80057ee:	46c0      	nop			; (mov r8, r8)
 80057f0:	200002b4 	.word	0x200002b4

080057f4 <__swsetup_r>:
 80057f4:	4b37      	ldr	r3, [pc, #220]	; (80058d4 <__swsetup_r+0xe0>)
 80057f6:	b570      	push	{r4, r5, r6, lr}
 80057f8:	681d      	ldr	r5, [r3, #0]
 80057fa:	0006      	movs	r6, r0
 80057fc:	000c      	movs	r4, r1
 80057fe:	2d00      	cmp	r5, #0
 8005800:	d005      	beq.n	800580e <__swsetup_r+0x1a>
 8005802:	69ab      	ldr	r3, [r5, #24]
 8005804:	2b00      	cmp	r3, #0
 8005806:	d102      	bne.n	800580e <__swsetup_r+0x1a>
 8005808:	0028      	movs	r0, r5
 800580a:	f7ff fb8d 	bl	8004f28 <__sinit>
 800580e:	4b32      	ldr	r3, [pc, #200]	; (80058d8 <__swsetup_r+0xe4>)
 8005810:	429c      	cmp	r4, r3
 8005812:	d10f      	bne.n	8005834 <__swsetup_r+0x40>
 8005814:	686c      	ldr	r4, [r5, #4]
 8005816:	230c      	movs	r3, #12
 8005818:	5ee2      	ldrsh	r2, [r4, r3]
 800581a:	b293      	uxth	r3, r2
 800581c:	0711      	lsls	r1, r2, #28
 800581e:	d42d      	bmi.n	800587c <__swsetup_r+0x88>
 8005820:	06d9      	lsls	r1, r3, #27
 8005822:	d411      	bmi.n	8005848 <__swsetup_r+0x54>
 8005824:	2309      	movs	r3, #9
 8005826:	2001      	movs	r0, #1
 8005828:	6033      	str	r3, [r6, #0]
 800582a:	3337      	adds	r3, #55	; 0x37
 800582c:	4313      	orrs	r3, r2
 800582e:	81a3      	strh	r3, [r4, #12]
 8005830:	4240      	negs	r0, r0
 8005832:	bd70      	pop	{r4, r5, r6, pc}
 8005834:	4b29      	ldr	r3, [pc, #164]	; (80058dc <__swsetup_r+0xe8>)
 8005836:	429c      	cmp	r4, r3
 8005838:	d101      	bne.n	800583e <__swsetup_r+0x4a>
 800583a:	68ac      	ldr	r4, [r5, #8]
 800583c:	e7eb      	b.n	8005816 <__swsetup_r+0x22>
 800583e:	4b28      	ldr	r3, [pc, #160]	; (80058e0 <__swsetup_r+0xec>)
 8005840:	429c      	cmp	r4, r3
 8005842:	d1e8      	bne.n	8005816 <__swsetup_r+0x22>
 8005844:	68ec      	ldr	r4, [r5, #12]
 8005846:	e7e6      	b.n	8005816 <__swsetup_r+0x22>
 8005848:	075b      	lsls	r3, r3, #29
 800584a:	d513      	bpl.n	8005874 <__swsetup_r+0x80>
 800584c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800584e:	2900      	cmp	r1, #0
 8005850:	d008      	beq.n	8005864 <__swsetup_r+0x70>
 8005852:	0023      	movs	r3, r4
 8005854:	3344      	adds	r3, #68	; 0x44
 8005856:	4299      	cmp	r1, r3
 8005858:	d002      	beq.n	8005860 <__swsetup_r+0x6c>
 800585a:	0030      	movs	r0, r6
 800585c:	f7ff f928 	bl	8004ab0 <_free_r>
 8005860:	2300      	movs	r3, #0
 8005862:	6363      	str	r3, [r4, #52]	; 0x34
 8005864:	2224      	movs	r2, #36	; 0x24
 8005866:	89a3      	ldrh	r3, [r4, #12]
 8005868:	4393      	bics	r3, r2
 800586a:	81a3      	strh	r3, [r4, #12]
 800586c:	2300      	movs	r3, #0
 800586e:	6063      	str	r3, [r4, #4]
 8005870:	6923      	ldr	r3, [r4, #16]
 8005872:	6023      	str	r3, [r4, #0]
 8005874:	2308      	movs	r3, #8
 8005876:	89a2      	ldrh	r2, [r4, #12]
 8005878:	4313      	orrs	r3, r2
 800587a:	81a3      	strh	r3, [r4, #12]
 800587c:	6923      	ldr	r3, [r4, #16]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d10b      	bne.n	800589a <__swsetup_r+0xa6>
 8005882:	21a0      	movs	r1, #160	; 0xa0
 8005884:	2280      	movs	r2, #128	; 0x80
 8005886:	89a3      	ldrh	r3, [r4, #12]
 8005888:	0089      	lsls	r1, r1, #2
 800588a:	0092      	lsls	r2, r2, #2
 800588c:	400b      	ands	r3, r1
 800588e:	4293      	cmp	r3, r2
 8005890:	d003      	beq.n	800589a <__swsetup_r+0xa6>
 8005892:	0021      	movs	r1, r4
 8005894:	0030      	movs	r0, r6
 8005896:	f000 f947 	bl	8005b28 <__smakebuf_r>
 800589a:	220c      	movs	r2, #12
 800589c:	5ea3      	ldrsh	r3, [r4, r2]
 800589e:	2001      	movs	r0, #1
 80058a0:	001a      	movs	r2, r3
 80058a2:	b299      	uxth	r1, r3
 80058a4:	4002      	ands	r2, r0
 80058a6:	4203      	tst	r3, r0
 80058a8:	d00f      	beq.n	80058ca <__swsetup_r+0xd6>
 80058aa:	2200      	movs	r2, #0
 80058ac:	60a2      	str	r2, [r4, #8]
 80058ae:	6962      	ldr	r2, [r4, #20]
 80058b0:	4252      	negs	r2, r2
 80058b2:	61a2      	str	r2, [r4, #24]
 80058b4:	2000      	movs	r0, #0
 80058b6:	6922      	ldr	r2, [r4, #16]
 80058b8:	4282      	cmp	r2, r0
 80058ba:	d1ba      	bne.n	8005832 <__swsetup_r+0x3e>
 80058bc:	060a      	lsls	r2, r1, #24
 80058be:	d5b8      	bpl.n	8005832 <__swsetup_r+0x3e>
 80058c0:	2240      	movs	r2, #64	; 0x40
 80058c2:	4313      	orrs	r3, r2
 80058c4:	81a3      	strh	r3, [r4, #12]
 80058c6:	3801      	subs	r0, #1
 80058c8:	e7b3      	b.n	8005832 <__swsetup_r+0x3e>
 80058ca:	0788      	lsls	r0, r1, #30
 80058cc:	d400      	bmi.n	80058d0 <__swsetup_r+0xdc>
 80058ce:	6962      	ldr	r2, [r4, #20]
 80058d0:	60a2      	str	r2, [r4, #8]
 80058d2:	e7ef      	b.n	80058b4 <__swsetup_r+0xc0>
 80058d4:	20000110 	.word	0x20000110
 80058d8:	08005f14 	.word	0x08005f14
 80058dc:	08005f34 	.word	0x08005f34
 80058e0:	08005ef4 	.word	0x08005ef4

080058e4 <abort>:
 80058e4:	2006      	movs	r0, #6
 80058e6:	b510      	push	{r4, lr}
 80058e8:	f000 f9ac 	bl	8005c44 <raise>
 80058ec:	2001      	movs	r0, #1
 80058ee:	f7fc f847 	bl	8001980 <_exit>
	...

080058f4 <_close_r>:
 80058f4:	2300      	movs	r3, #0
 80058f6:	b570      	push	{r4, r5, r6, lr}
 80058f8:	4d06      	ldr	r5, [pc, #24]	; (8005914 <_close_r+0x20>)
 80058fa:	0004      	movs	r4, r0
 80058fc:	0008      	movs	r0, r1
 80058fe:	602b      	str	r3, [r5, #0]
 8005900:	f7fc f883 	bl	8001a0a <_close>
 8005904:	1c43      	adds	r3, r0, #1
 8005906:	d103      	bne.n	8005910 <_close_r+0x1c>
 8005908:	682b      	ldr	r3, [r5, #0]
 800590a:	2b00      	cmp	r3, #0
 800590c:	d000      	beq.n	8005910 <_close_r+0x1c>
 800590e:	6023      	str	r3, [r4, #0]
 8005910:	bd70      	pop	{r4, r5, r6, pc}
 8005912:	46c0      	nop			; (mov r8, r8)
 8005914:	200002b4 	.word	0x200002b4

08005918 <__sflush_r>:
 8005918:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800591a:	898b      	ldrh	r3, [r1, #12]
 800591c:	0005      	movs	r5, r0
 800591e:	000c      	movs	r4, r1
 8005920:	071a      	lsls	r2, r3, #28
 8005922:	d45f      	bmi.n	80059e4 <__sflush_r+0xcc>
 8005924:	684a      	ldr	r2, [r1, #4]
 8005926:	2a00      	cmp	r2, #0
 8005928:	dc04      	bgt.n	8005934 <__sflush_r+0x1c>
 800592a:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 800592c:	2a00      	cmp	r2, #0
 800592e:	dc01      	bgt.n	8005934 <__sflush_r+0x1c>
 8005930:	2000      	movs	r0, #0
 8005932:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005934:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8005936:	2f00      	cmp	r7, #0
 8005938:	d0fa      	beq.n	8005930 <__sflush_r+0x18>
 800593a:	2200      	movs	r2, #0
 800593c:	2180      	movs	r1, #128	; 0x80
 800593e:	682e      	ldr	r6, [r5, #0]
 8005940:	602a      	str	r2, [r5, #0]
 8005942:	001a      	movs	r2, r3
 8005944:	0149      	lsls	r1, r1, #5
 8005946:	400a      	ands	r2, r1
 8005948:	420b      	tst	r3, r1
 800594a:	d034      	beq.n	80059b6 <__sflush_r+0x9e>
 800594c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800594e:	89a3      	ldrh	r3, [r4, #12]
 8005950:	075b      	lsls	r3, r3, #29
 8005952:	d506      	bpl.n	8005962 <__sflush_r+0x4a>
 8005954:	6863      	ldr	r3, [r4, #4]
 8005956:	1ac0      	subs	r0, r0, r3
 8005958:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800595a:	2b00      	cmp	r3, #0
 800595c:	d001      	beq.n	8005962 <__sflush_r+0x4a>
 800595e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005960:	1ac0      	subs	r0, r0, r3
 8005962:	0002      	movs	r2, r0
 8005964:	6a21      	ldr	r1, [r4, #32]
 8005966:	2300      	movs	r3, #0
 8005968:	0028      	movs	r0, r5
 800596a:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800596c:	47b8      	blx	r7
 800596e:	89a1      	ldrh	r1, [r4, #12]
 8005970:	1c43      	adds	r3, r0, #1
 8005972:	d106      	bne.n	8005982 <__sflush_r+0x6a>
 8005974:	682b      	ldr	r3, [r5, #0]
 8005976:	2b1d      	cmp	r3, #29
 8005978:	d831      	bhi.n	80059de <__sflush_r+0xc6>
 800597a:	4a2c      	ldr	r2, [pc, #176]	; (8005a2c <__sflush_r+0x114>)
 800597c:	40da      	lsrs	r2, r3
 800597e:	07d3      	lsls	r3, r2, #31
 8005980:	d52d      	bpl.n	80059de <__sflush_r+0xc6>
 8005982:	2300      	movs	r3, #0
 8005984:	6063      	str	r3, [r4, #4]
 8005986:	6923      	ldr	r3, [r4, #16]
 8005988:	6023      	str	r3, [r4, #0]
 800598a:	04cb      	lsls	r3, r1, #19
 800598c:	d505      	bpl.n	800599a <__sflush_r+0x82>
 800598e:	1c43      	adds	r3, r0, #1
 8005990:	d102      	bne.n	8005998 <__sflush_r+0x80>
 8005992:	682b      	ldr	r3, [r5, #0]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d100      	bne.n	800599a <__sflush_r+0x82>
 8005998:	6560      	str	r0, [r4, #84]	; 0x54
 800599a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800599c:	602e      	str	r6, [r5, #0]
 800599e:	2900      	cmp	r1, #0
 80059a0:	d0c6      	beq.n	8005930 <__sflush_r+0x18>
 80059a2:	0023      	movs	r3, r4
 80059a4:	3344      	adds	r3, #68	; 0x44
 80059a6:	4299      	cmp	r1, r3
 80059a8:	d002      	beq.n	80059b0 <__sflush_r+0x98>
 80059aa:	0028      	movs	r0, r5
 80059ac:	f7ff f880 	bl	8004ab0 <_free_r>
 80059b0:	2000      	movs	r0, #0
 80059b2:	6360      	str	r0, [r4, #52]	; 0x34
 80059b4:	e7bd      	b.n	8005932 <__sflush_r+0x1a>
 80059b6:	2301      	movs	r3, #1
 80059b8:	0028      	movs	r0, r5
 80059ba:	6a21      	ldr	r1, [r4, #32]
 80059bc:	47b8      	blx	r7
 80059be:	1c43      	adds	r3, r0, #1
 80059c0:	d1c5      	bne.n	800594e <__sflush_r+0x36>
 80059c2:	682b      	ldr	r3, [r5, #0]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d0c2      	beq.n	800594e <__sflush_r+0x36>
 80059c8:	2b1d      	cmp	r3, #29
 80059ca:	d001      	beq.n	80059d0 <__sflush_r+0xb8>
 80059cc:	2b16      	cmp	r3, #22
 80059ce:	d101      	bne.n	80059d4 <__sflush_r+0xbc>
 80059d0:	602e      	str	r6, [r5, #0]
 80059d2:	e7ad      	b.n	8005930 <__sflush_r+0x18>
 80059d4:	2340      	movs	r3, #64	; 0x40
 80059d6:	89a2      	ldrh	r2, [r4, #12]
 80059d8:	4313      	orrs	r3, r2
 80059da:	81a3      	strh	r3, [r4, #12]
 80059dc:	e7a9      	b.n	8005932 <__sflush_r+0x1a>
 80059de:	2340      	movs	r3, #64	; 0x40
 80059e0:	430b      	orrs	r3, r1
 80059e2:	e7fa      	b.n	80059da <__sflush_r+0xc2>
 80059e4:	690f      	ldr	r7, [r1, #16]
 80059e6:	2f00      	cmp	r7, #0
 80059e8:	d0a2      	beq.n	8005930 <__sflush_r+0x18>
 80059ea:	680a      	ldr	r2, [r1, #0]
 80059ec:	600f      	str	r7, [r1, #0]
 80059ee:	1bd2      	subs	r2, r2, r7
 80059f0:	9201      	str	r2, [sp, #4]
 80059f2:	2200      	movs	r2, #0
 80059f4:	079b      	lsls	r3, r3, #30
 80059f6:	d100      	bne.n	80059fa <__sflush_r+0xe2>
 80059f8:	694a      	ldr	r2, [r1, #20]
 80059fa:	60a2      	str	r2, [r4, #8]
 80059fc:	9b01      	ldr	r3, [sp, #4]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	dc00      	bgt.n	8005a04 <__sflush_r+0xec>
 8005a02:	e795      	b.n	8005930 <__sflush_r+0x18>
 8005a04:	003a      	movs	r2, r7
 8005a06:	0028      	movs	r0, r5
 8005a08:	9b01      	ldr	r3, [sp, #4]
 8005a0a:	6a21      	ldr	r1, [r4, #32]
 8005a0c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005a0e:	47b0      	blx	r6
 8005a10:	2800      	cmp	r0, #0
 8005a12:	dc06      	bgt.n	8005a22 <__sflush_r+0x10a>
 8005a14:	2340      	movs	r3, #64	; 0x40
 8005a16:	2001      	movs	r0, #1
 8005a18:	89a2      	ldrh	r2, [r4, #12]
 8005a1a:	4240      	negs	r0, r0
 8005a1c:	4313      	orrs	r3, r2
 8005a1e:	81a3      	strh	r3, [r4, #12]
 8005a20:	e787      	b.n	8005932 <__sflush_r+0x1a>
 8005a22:	9b01      	ldr	r3, [sp, #4]
 8005a24:	183f      	adds	r7, r7, r0
 8005a26:	1a1b      	subs	r3, r3, r0
 8005a28:	9301      	str	r3, [sp, #4]
 8005a2a:	e7e7      	b.n	80059fc <__sflush_r+0xe4>
 8005a2c:	20400001 	.word	0x20400001

08005a30 <_fflush_r>:
 8005a30:	690b      	ldr	r3, [r1, #16]
 8005a32:	b570      	push	{r4, r5, r6, lr}
 8005a34:	0005      	movs	r5, r0
 8005a36:	000c      	movs	r4, r1
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d102      	bne.n	8005a42 <_fflush_r+0x12>
 8005a3c:	2500      	movs	r5, #0
 8005a3e:	0028      	movs	r0, r5
 8005a40:	bd70      	pop	{r4, r5, r6, pc}
 8005a42:	2800      	cmp	r0, #0
 8005a44:	d004      	beq.n	8005a50 <_fflush_r+0x20>
 8005a46:	6983      	ldr	r3, [r0, #24]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d101      	bne.n	8005a50 <_fflush_r+0x20>
 8005a4c:	f7ff fa6c 	bl	8004f28 <__sinit>
 8005a50:	4b14      	ldr	r3, [pc, #80]	; (8005aa4 <_fflush_r+0x74>)
 8005a52:	429c      	cmp	r4, r3
 8005a54:	d11b      	bne.n	8005a8e <_fflush_r+0x5e>
 8005a56:	686c      	ldr	r4, [r5, #4]
 8005a58:	220c      	movs	r2, #12
 8005a5a:	5ea3      	ldrsh	r3, [r4, r2]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d0ed      	beq.n	8005a3c <_fflush_r+0xc>
 8005a60:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005a62:	07d2      	lsls	r2, r2, #31
 8005a64:	d404      	bmi.n	8005a70 <_fflush_r+0x40>
 8005a66:	059b      	lsls	r3, r3, #22
 8005a68:	d402      	bmi.n	8005a70 <_fflush_r+0x40>
 8005a6a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005a6c:	f7ff fb0d 	bl	800508a <__retarget_lock_acquire_recursive>
 8005a70:	0028      	movs	r0, r5
 8005a72:	0021      	movs	r1, r4
 8005a74:	f7ff ff50 	bl	8005918 <__sflush_r>
 8005a78:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005a7a:	0005      	movs	r5, r0
 8005a7c:	07db      	lsls	r3, r3, #31
 8005a7e:	d4de      	bmi.n	8005a3e <_fflush_r+0xe>
 8005a80:	89a3      	ldrh	r3, [r4, #12]
 8005a82:	059b      	lsls	r3, r3, #22
 8005a84:	d4db      	bmi.n	8005a3e <_fflush_r+0xe>
 8005a86:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005a88:	f7ff fb00 	bl	800508c <__retarget_lock_release_recursive>
 8005a8c:	e7d7      	b.n	8005a3e <_fflush_r+0xe>
 8005a8e:	4b06      	ldr	r3, [pc, #24]	; (8005aa8 <_fflush_r+0x78>)
 8005a90:	429c      	cmp	r4, r3
 8005a92:	d101      	bne.n	8005a98 <_fflush_r+0x68>
 8005a94:	68ac      	ldr	r4, [r5, #8]
 8005a96:	e7df      	b.n	8005a58 <_fflush_r+0x28>
 8005a98:	4b04      	ldr	r3, [pc, #16]	; (8005aac <_fflush_r+0x7c>)
 8005a9a:	429c      	cmp	r4, r3
 8005a9c:	d1dc      	bne.n	8005a58 <_fflush_r+0x28>
 8005a9e:	68ec      	ldr	r4, [r5, #12]
 8005aa0:	e7da      	b.n	8005a58 <_fflush_r+0x28>
 8005aa2:	46c0      	nop			; (mov r8, r8)
 8005aa4:	08005f14 	.word	0x08005f14
 8005aa8:	08005f34 	.word	0x08005f34
 8005aac:	08005ef4 	.word	0x08005ef4

08005ab0 <_lseek_r>:
 8005ab0:	b570      	push	{r4, r5, r6, lr}
 8005ab2:	0004      	movs	r4, r0
 8005ab4:	0008      	movs	r0, r1
 8005ab6:	0011      	movs	r1, r2
 8005ab8:	001a      	movs	r2, r3
 8005aba:	2300      	movs	r3, #0
 8005abc:	4d05      	ldr	r5, [pc, #20]	; (8005ad4 <_lseek_r+0x24>)
 8005abe:	602b      	str	r3, [r5, #0]
 8005ac0:	f7fb ffc4 	bl	8001a4c <_lseek>
 8005ac4:	1c43      	adds	r3, r0, #1
 8005ac6:	d103      	bne.n	8005ad0 <_lseek_r+0x20>
 8005ac8:	682b      	ldr	r3, [r5, #0]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d000      	beq.n	8005ad0 <_lseek_r+0x20>
 8005ace:	6023      	str	r3, [r4, #0]
 8005ad0:	bd70      	pop	{r4, r5, r6, pc}
 8005ad2:	46c0      	nop			; (mov r8, r8)
 8005ad4:	200002b4 	.word	0x200002b4

08005ad8 <__swhatbuf_r>:
 8005ad8:	b570      	push	{r4, r5, r6, lr}
 8005ada:	000e      	movs	r6, r1
 8005adc:	001d      	movs	r5, r3
 8005ade:	230e      	movs	r3, #14
 8005ae0:	5ec9      	ldrsh	r1, [r1, r3]
 8005ae2:	0014      	movs	r4, r2
 8005ae4:	b096      	sub	sp, #88	; 0x58
 8005ae6:	2900      	cmp	r1, #0
 8005ae8:	da08      	bge.n	8005afc <__swhatbuf_r+0x24>
 8005aea:	220c      	movs	r2, #12
 8005aec:	5eb3      	ldrsh	r3, [r6, r2]
 8005aee:	2200      	movs	r2, #0
 8005af0:	602a      	str	r2, [r5, #0]
 8005af2:	061b      	lsls	r3, r3, #24
 8005af4:	d411      	bmi.n	8005b1a <__swhatbuf_r+0x42>
 8005af6:	2380      	movs	r3, #128	; 0x80
 8005af8:	00db      	lsls	r3, r3, #3
 8005afa:	e00f      	b.n	8005b1c <__swhatbuf_r+0x44>
 8005afc:	466a      	mov	r2, sp
 8005afe:	f000 f8c1 	bl	8005c84 <_fstat_r>
 8005b02:	2800      	cmp	r0, #0
 8005b04:	dbf1      	blt.n	8005aea <__swhatbuf_r+0x12>
 8005b06:	23f0      	movs	r3, #240	; 0xf0
 8005b08:	9901      	ldr	r1, [sp, #4]
 8005b0a:	021b      	lsls	r3, r3, #8
 8005b0c:	4019      	ands	r1, r3
 8005b0e:	4b05      	ldr	r3, [pc, #20]	; (8005b24 <__swhatbuf_r+0x4c>)
 8005b10:	18c9      	adds	r1, r1, r3
 8005b12:	424b      	negs	r3, r1
 8005b14:	4159      	adcs	r1, r3
 8005b16:	6029      	str	r1, [r5, #0]
 8005b18:	e7ed      	b.n	8005af6 <__swhatbuf_r+0x1e>
 8005b1a:	2340      	movs	r3, #64	; 0x40
 8005b1c:	2000      	movs	r0, #0
 8005b1e:	6023      	str	r3, [r4, #0]
 8005b20:	b016      	add	sp, #88	; 0x58
 8005b22:	bd70      	pop	{r4, r5, r6, pc}
 8005b24:	ffffe000 	.word	0xffffe000

08005b28 <__smakebuf_r>:
 8005b28:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005b2a:	2602      	movs	r6, #2
 8005b2c:	898b      	ldrh	r3, [r1, #12]
 8005b2e:	0005      	movs	r5, r0
 8005b30:	000c      	movs	r4, r1
 8005b32:	4233      	tst	r3, r6
 8005b34:	d006      	beq.n	8005b44 <__smakebuf_r+0x1c>
 8005b36:	0023      	movs	r3, r4
 8005b38:	3347      	adds	r3, #71	; 0x47
 8005b3a:	6023      	str	r3, [r4, #0]
 8005b3c:	6123      	str	r3, [r4, #16]
 8005b3e:	2301      	movs	r3, #1
 8005b40:	6163      	str	r3, [r4, #20]
 8005b42:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8005b44:	466a      	mov	r2, sp
 8005b46:	ab01      	add	r3, sp, #4
 8005b48:	f7ff ffc6 	bl	8005ad8 <__swhatbuf_r>
 8005b4c:	9900      	ldr	r1, [sp, #0]
 8005b4e:	0007      	movs	r7, r0
 8005b50:	0028      	movs	r0, r5
 8005b52:	f7ff f819 	bl	8004b88 <_malloc_r>
 8005b56:	2800      	cmp	r0, #0
 8005b58:	d108      	bne.n	8005b6c <__smakebuf_r+0x44>
 8005b5a:	220c      	movs	r2, #12
 8005b5c:	5ea3      	ldrsh	r3, [r4, r2]
 8005b5e:	059a      	lsls	r2, r3, #22
 8005b60:	d4ef      	bmi.n	8005b42 <__smakebuf_r+0x1a>
 8005b62:	2203      	movs	r2, #3
 8005b64:	4393      	bics	r3, r2
 8005b66:	431e      	orrs	r6, r3
 8005b68:	81a6      	strh	r6, [r4, #12]
 8005b6a:	e7e4      	b.n	8005b36 <__smakebuf_r+0xe>
 8005b6c:	4b0f      	ldr	r3, [pc, #60]	; (8005bac <__smakebuf_r+0x84>)
 8005b6e:	62ab      	str	r3, [r5, #40]	; 0x28
 8005b70:	2380      	movs	r3, #128	; 0x80
 8005b72:	89a2      	ldrh	r2, [r4, #12]
 8005b74:	6020      	str	r0, [r4, #0]
 8005b76:	4313      	orrs	r3, r2
 8005b78:	81a3      	strh	r3, [r4, #12]
 8005b7a:	9b00      	ldr	r3, [sp, #0]
 8005b7c:	6120      	str	r0, [r4, #16]
 8005b7e:	6163      	str	r3, [r4, #20]
 8005b80:	9b01      	ldr	r3, [sp, #4]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d00d      	beq.n	8005ba2 <__smakebuf_r+0x7a>
 8005b86:	0028      	movs	r0, r5
 8005b88:	230e      	movs	r3, #14
 8005b8a:	5ee1      	ldrsh	r1, [r4, r3]
 8005b8c:	f000 f88c 	bl	8005ca8 <_isatty_r>
 8005b90:	2800      	cmp	r0, #0
 8005b92:	d006      	beq.n	8005ba2 <__smakebuf_r+0x7a>
 8005b94:	2203      	movs	r2, #3
 8005b96:	89a3      	ldrh	r3, [r4, #12]
 8005b98:	4393      	bics	r3, r2
 8005b9a:	001a      	movs	r2, r3
 8005b9c:	2301      	movs	r3, #1
 8005b9e:	4313      	orrs	r3, r2
 8005ba0:	81a3      	strh	r3, [r4, #12]
 8005ba2:	89a0      	ldrh	r0, [r4, #12]
 8005ba4:	4307      	orrs	r7, r0
 8005ba6:	81a7      	strh	r7, [r4, #12]
 8005ba8:	e7cb      	b.n	8005b42 <__smakebuf_r+0x1a>
 8005baa:	46c0      	nop			; (mov r8, r8)
 8005bac:	08004ead 	.word	0x08004ead

08005bb0 <memchr>:
 8005bb0:	b2c9      	uxtb	r1, r1
 8005bb2:	1882      	adds	r2, r0, r2
 8005bb4:	4290      	cmp	r0, r2
 8005bb6:	d101      	bne.n	8005bbc <memchr+0xc>
 8005bb8:	2000      	movs	r0, #0
 8005bba:	4770      	bx	lr
 8005bbc:	7803      	ldrb	r3, [r0, #0]
 8005bbe:	428b      	cmp	r3, r1
 8005bc0:	d0fb      	beq.n	8005bba <memchr+0xa>
 8005bc2:	3001      	adds	r0, #1
 8005bc4:	e7f6      	b.n	8005bb4 <memchr+0x4>
	...

08005bc8 <_read_r>:
 8005bc8:	b570      	push	{r4, r5, r6, lr}
 8005bca:	0004      	movs	r4, r0
 8005bcc:	0008      	movs	r0, r1
 8005bce:	0011      	movs	r1, r2
 8005bd0:	001a      	movs	r2, r3
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	4d05      	ldr	r5, [pc, #20]	; (8005bec <_read_r+0x24>)
 8005bd6:	602b      	str	r3, [r5, #0]
 8005bd8:	f7fb fede 	bl	8001998 <_read>
 8005bdc:	1c43      	adds	r3, r0, #1
 8005bde:	d103      	bne.n	8005be8 <_read_r+0x20>
 8005be0:	682b      	ldr	r3, [r5, #0]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d000      	beq.n	8005be8 <_read_r+0x20>
 8005be6:	6023      	str	r3, [r4, #0]
 8005be8:	bd70      	pop	{r4, r5, r6, pc}
 8005bea:	46c0      	nop			; (mov r8, r8)
 8005bec:	200002b4 	.word	0x200002b4

08005bf0 <_raise_r>:
 8005bf0:	b570      	push	{r4, r5, r6, lr}
 8005bf2:	0004      	movs	r4, r0
 8005bf4:	000d      	movs	r5, r1
 8005bf6:	291f      	cmp	r1, #31
 8005bf8:	d904      	bls.n	8005c04 <_raise_r+0x14>
 8005bfa:	2316      	movs	r3, #22
 8005bfc:	6003      	str	r3, [r0, #0]
 8005bfe:	2001      	movs	r0, #1
 8005c00:	4240      	negs	r0, r0
 8005c02:	bd70      	pop	{r4, r5, r6, pc}
 8005c04:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d004      	beq.n	8005c14 <_raise_r+0x24>
 8005c0a:	008a      	lsls	r2, r1, #2
 8005c0c:	189b      	adds	r3, r3, r2
 8005c0e:	681a      	ldr	r2, [r3, #0]
 8005c10:	2a00      	cmp	r2, #0
 8005c12:	d108      	bne.n	8005c26 <_raise_r+0x36>
 8005c14:	0020      	movs	r0, r4
 8005c16:	f000 f831 	bl	8005c7c <_getpid_r>
 8005c1a:	002a      	movs	r2, r5
 8005c1c:	0001      	movs	r1, r0
 8005c1e:	0020      	movs	r0, r4
 8005c20:	f000 f81a 	bl	8005c58 <_kill_r>
 8005c24:	e7ed      	b.n	8005c02 <_raise_r+0x12>
 8005c26:	2000      	movs	r0, #0
 8005c28:	2a01      	cmp	r2, #1
 8005c2a:	d0ea      	beq.n	8005c02 <_raise_r+0x12>
 8005c2c:	1c51      	adds	r1, r2, #1
 8005c2e:	d103      	bne.n	8005c38 <_raise_r+0x48>
 8005c30:	2316      	movs	r3, #22
 8005c32:	3001      	adds	r0, #1
 8005c34:	6023      	str	r3, [r4, #0]
 8005c36:	e7e4      	b.n	8005c02 <_raise_r+0x12>
 8005c38:	2400      	movs	r4, #0
 8005c3a:	0028      	movs	r0, r5
 8005c3c:	601c      	str	r4, [r3, #0]
 8005c3e:	4790      	blx	r2
 8005c40:	0020      	movs	r0, r4
 8005c42:	e7de      	b.n	8005c02 <_raise_r+0x12>

08005c44 <raise>:
 8005c44:	b510      	push	{r4, lr}
 8005c46:	4b03      	ldr	r3, [pc, #12]	; (8005c54 <raise+0x10>)
 8005c48:	0001      	movs	r1, r0
 8005c4a:	6818      	ldr	r0, [r3, #0]
 8005c4c:	f7ff ffd0 	bl	8005bf0 <_raise_r>
 8005c50:	bd10      	pop	{r4, pc}
 8005c52:	46c0      	nop			; (mov r8, r8)
 8005c54:	20000110 	.word	0x20000110

08005c58 <_kill_r>:
 8005c58:	2300      	movs	r3, #0
 8005c5a:	b570      	push	{r4, r5, r6, lr}
 8005c5c:	4d06      	ldr	r5, [pc, #24]	; (8005c78 <_kill_r+0x20>)
 8005c5e:	0004      	movs	r4, r0
 8005c60:	0008      	movs	r0, r1
 8005c62:	0011      	movs	r1, r2
 8005c64:	602b      	str	r3, [r5, #0]
 8005c66:	f7fb fe7b 	bl	8001960 <_kill>
 8005c6a:	1c43      	adds	r3, r0, #1
 8005c6c:	d103      	bne.n	8005c76 <_kill_r+0x1e>
 8005c6e:	682b      	ldr	r3, [r5, #0]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d000      	beq.n	8005c76 <_kill_r+0x1e>
 8005c74:	6023      	str	r3, [r4, #0]
 8005c76:	bd70      	pop	{r4, r5, r6, pc}
 8005c78:	200002b4 	.word	0x200002b4

08005c7c <_getpid_r>:
 8005c7c:	b510      	push	{r4, lr}
 8005c7e:	f7fb fe69 	bl	8001954 <_getpid>
 8005c82:	bd10      	pop	{r4, pc}

08005c84 <_fstat_r>:
 8005c84:	2300      	movs	r3, #0
 8005c86:	b570      	push	{r4, r5, r6, lr}
 8005c88:	4d06      	ldr	r5, [pc, #24]	; (8005ca4 <_fstat_r+0x20>)
 8005c8a:	0004      	movs	r4, r0
 8005c8c:	0008      	movs	r0, r1
 8005c8e:	0011      	movs	r1, r2
 8005c90:	602b      	str	r3, [r5, #0]
 8005c92:	f7fb fec4 	bl	8001a1e <_fstat>
 8005c96:	1c43      	adds	r3, r0, #1
 8005c98:	d103      	bne.n	8005ca2 <_fstat_r+0x1e>
 8005c9a:	682b      	ldr	r3, [r5, #0]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d000      	beq.n	8005ca2 <_fstat_r+0x1e>
 8005ca0:	6023      	str	r3, [r4, #0]
 8005ca2:	bd70      	pop	{r4, r5, r6, pc}
 8005ca4:	200002b4 	.word	0x200002b4

08005ca8 <_isatty_r>:
 8005ca8:	2300      	movs	r3, #0
 8005caa:	b570      	push	{r4, r5, r6, lr}
 8005cac:	4d06      	ldr	r5, [pc, #24]	; (8005cc8 <_isatty_r+0x20>)
 8005cae:	0004      	movs	r4, r0
 8005cb0:	0008      	movs	r0, r1
 8005cb2:	602b      	str	r3, [r5, #0]
 8005cb4:	f7fb fec1 	bl	8001a3a <_isatty>
 8005cb8:	1c43      	adds	r3, r0, #1
 8005cba:	d103      	bne.n	8005cc4 <_isatty_r+0x1c>
 8005cbc:	682b      	ldr	r3, [r5, #0]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d000      	beq.n	8005cc4 <_isatty_r+0x1c>
 8005cc2:	6023      	str	r3, [r4, #0]
 8005cc4:	bd70      	pop	{r4, r5, r6, pc}
 8005cc6:	46c0      	nop			; (mov r8, r8)
 8005cc8:	200002b4 	.word	0x200002b4

08005ccc <_init>:
 8005ccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cce:	46c0      	nop			; (mov r8, r8)
 8005cd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005cd2:	bc08      	pop	{r3}
 8005cd4:	469e      	mov	lr, r3
 8005cd6:	4770      	bx	lr

08005cd8 <_fini>:
 8005cd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cda:	46c0      	nop			; (mov r8, r8)
 8005cdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005cde:	bc08      	pop	{r3}
 8005ce0:	469e      	mov	lr, r3
 8005ce2:	4770      	bx	lr
