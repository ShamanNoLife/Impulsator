
test2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006a4c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000035c  08006b0c  08006b0c  00016b0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006e68  08006e68  00020190  2**0
                  CONTENTS
  4 .ARM          00000008  08006e68  08006e68  00016e68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006e70  08006e70  00020190  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006e70  08006e70  00016e70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006e74  08006e74  00016e74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000190  20000000  08006e78  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b4  20000190  08007008  00020190  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000444  08007008  00020444  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020190  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000201b8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000cdc2  00000000  00000000  000201fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002add  00000000  00000000  0002cfbd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b78  00000000  00000000  0002faa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000008a2  00000000  00000000  00030618  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000163fe  00000000  00000000  00030eba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001041e  00000000  00000000  000472b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000804ae  00000000  00000000  000576d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003408  00000000  00000000  000d7b84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004b  00000000  00000000  000daf8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000190 	.word	0x20000190
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08006af4 	.word	0x08006af4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000194 	.word	0x20000194
 8000104:	08006af4 	.word	0x08006af4

08000108 <strcmp>:
 8000108:	7802      	ldrb	r2, [r0, #0]
 800010a:	780b      	ldrb	r3, [r1, #0]
 800010c:	2a00      	cmp	r2, #0
 800010e:	d003      	beq.n	8000118 <strcmp+0x10>
 8000110:	3001      	adds	r0, #1
 8000112:	3101      	adds	r1, #1
 8000114:	429a      	cmp	r2, r3
 8000116:	d0f7      	beq.n	8000108 <strcmp>
 8000118:	1ad0      	subs	r0, r2, r3
 800011a:	4770      	bx	lr

0800011c <strlen>:
 800011c:	2300      	movs	r3, #0
 800011e:	5cc2      	ldrb	r2, [r0, r3]
 8000120:	3301      	adds	r3, #1
 8000122:	2a00      	cmp	r2, #0
 8000124:	d1fb      	bne.n	800011e <strlen+0x2>
 8000126:	1e58      	subs	r0, r3, #1
 8000128:	4770      	bx	lr
	...

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	; 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f806 	bl	8000254 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			; (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__aeabi_idiv0>:
 8000254:	4770      	bx	lr
 8000256:	46c0      	nop			; (mov r8, r8)

08000258 <__aeabi_uldivmod>:
 8000258:	2b00      	cmp	r3, #0
 800025a:	d111      	bne.n	8000280 <__aeabi_uldivmod+0x28>
 800025c:	2a00      	cmp	r2, #0
 800025e:	d10f      	bne.n	8000280 <__aeabi_uldivmod+0x28>
 8000260:	2900      	cmp	r1, #0
 8000262:	d100      	bne.n	8000266 <__aeabi_uldivmod+0xe>
 8000264:	2800      	cmp	r0, #0
 8000266:	d002      	beq.n	800026e <__aeabi_uldivmod+0x16>
 8000268:	2100      	movs	r1, #0
 800026a:	43c9      	mvns	r1, r1
 800026c:	0008      	movs	r0, r1
 800026e:	b407      	push	{r0, r1, r2}
 8000270:	4802      	ldr	r0, [pc, #8]	; (800027c <__aeabi_uldivmod+0x24>)
 8000272:	a102      	add	r1, pc, #8	; (adr r1, 800027c <__aeabi_uldivmod+0x24>)
 8000274:	1840      	adds	r0, r0, r1
 8000276:	9002      	str	r0, [sp, #8]
 8000278:	bd03      	pop	{r0, r1, pc}
 800027a:	46c0      	nop			; (mov r8, r8)
 800027c:	ffffffd9 	.word	0xffffffd9
 8000280:	b403      	push	{r0, r1}
 8000282:	4668      	mov	r0, sp
 8000284:	b501      	push	{r0, lr}
 8000286:	9802      	ldr	r0, [sp, #8]
 8000288:	f000 f84c 	bl	8000324 <__udivmoddi4>
 800028c:	9b01      	ldr	r3, [sp, #4]
 800028e:	469e      	mov	lr, r3
 8000290:	b002      	add	sp, #8
 8000292:	bc0c      	pop	{r2, r3}
 8000294:	4770      	bx	lr
 8000296:	46c0      	nop			; (mov r8, r8)

08000298 <__aeabi_lmul>:
 8000298:	b5f0      	push	{r4, r5, r6, r7, lr}
 800029a:	46ce      	mov	lr, r9
 800029c:	4699      	mov	r9, r3
 800029e:	0c03      	lsrs	r3, r0, #16
 80002a0:	469c      	mov	ip, r3
 80002a2:	0413      	lsls	r3, r2, #16
 80002a4:	4647      	mov	r7, r8
 80002a6:	0c1b      	lsrs	r3, r3, #16
 80002a8:	001d      	movs	r5, r3
 80002aa:	000e      	movs	r6, r1
 80002ac:	4661      	mov	r1, ip
 80002ae:	0404      	lsls	r4, r0, #16
 80002b0:	0c24      	lsrs	r4, r4, #16
 80002b2:	b580      	push	{r7, lr}
 80002b4:	0007      	movs	r7, r0
 80002b6:	0c10      	lsrs	r0, r2, #16
 80002b8:	434b      	muls	r3, r1
 80002ba:	4365      	muls	r5, r4
 80002bc:	4341      	muls	r1, r0
 80002be:	4360      	muls	r0, r4
 80002c0:	0c2c      	lsrs	r4, r5, #16
 80002c2:	18c0      	adds	r0, r0, r3
 80002c4:	1820      	adds	r0, r4, r0
 80002c6:	468c      	mov	ip, r1
 80002c8:	4283      	cmp	r3, r0
 80002ca:	d903      	bls.n	80002d4 <__aeabi_lmul+0x3c>
 80002cc:	2380      	movs	r3, #128	; 0x80
 80002ce:	025b      	lsls	r3, r3, #9
 80002d0:	4698      	mov	r8, r3
 80002d2:	44c4      	add	ip, r8
 80002d4:	4649      	mov	r1, r9
 80002d6:	4379      	muls	r1, r7
 80002d8:	4356      	muls	r6, r2
 80002da:	0c03      	lsrs	r3, r0, #16
 80002dc:	042d      	lsls	r5, r5, #16
 80002de:	0c2d      	lsrs	r5, r5, #16
 80002e0:	1989      	adds	r1, r1, r6
 80002e2:	4463      	add	r3, ip
 80002e4:	0400      	lsls	r0, r0, #16
 80002e6:	1940      	adds	r0, r0, r5
 80002e8:	18c9      	adds	r1, r1, r3
 80002ea:	bcc0      	pop	{r6, r7}
 80002ec:	46b9      	mov	r9, r7
 80002ee:	46b0      	mov	r8, r6
 80002f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002f2:	46c0      	nop			; (mov r8, r8)

080002f4 <__aeabi_f2uiz>:
 80002f4:	219e      	movs	r1, #158	; 0x9e
 80002f6:	b510      	push	{r4, lr}
 80002f8:	05c9      	lsls	r1, r1, #23
 80002fa:	1c04      	adds	r4, r0, #0
 80002fc:	f000 fd7e 	bl	8000dfc <__aeabi_fcmpge>
 8000300:	2800      	cmp	r0, #0
 8000302:	d103      	bne.n	800030c <__aeabi_f2uiz+0x18>
 8000304:	1c20      	adds	r0, r4, #0
 8000306:	f000 fce1 	bl	8000ccc <__aeabi_f2iz>
 800030a:	bd10      	pop	{r4, pc}
 800030c:	219e      	movs	r1, #158	; 0x9e
 800030e:	1c20      	adds	r0, r4, #0
 8000310:	05c9      	lsls	r1, r1, #23
 8000312:	f000 fb3b 	bl	800098c <__aeabi_fsub>
 8000316:	f000 fcd9 	bl	8000ccc <__aeabi_f2iz>
 800031a:	2380      	movs	r3, #128	; 0x80
 800031c:	061b      	lsls	r3, r3, #24
 800031e:	469c      	mov	ip, r3
 8000320:	4460      	add	r0, ip
 8000322:	e7f2      	b.n	800030a <__aeabi_f2uiz+0x16>

08000324 <__udivmoddi4>:
 8000324:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000326:	4657      	mov	r7, sl
 8000328:	464e      	mov	r6, r9
 800032a:	4645      	mov	r5, r8
 800032c:	46de      	mov	lr, fp
 800032e:	b5e0      	push	{r5, r6, r7, lr}
 8000330:	0004      	movs	r4, r0
 8000332:	000d      	movs	r5, r1
 8000334:	4692      	mov	sl, r2
 8000336:	4699      	mov	r9, r3
 8000338:	b083      	sub	sp, #12
 800033a:	428b      	cmp	r3, r1
 800033c:	d830      	bhi.n	80003a0 <__udivmoddi4+0x7c>
 800033e:	d02d      	beq.n	800039c <__udivmoddi4+0x78>
 8000340:	4649      	mov	r1, r9
 8000342:	4650      	mov	r0, sl
 8000344:	f000 fd82 	bl	8000e4c <__clzdi2>
 8000348:	0029      	movs	r1, r5
 800034a:	0006      	movs	r6, r0
 800034c:	0020      	movs	r0, r4
 800034e:	f000 fd7d 	bl	8000e4c <__clzdi2>
 8000352:	1a33      	subs	r3, r6, r0
 8000354:	4698      	mov	r8, r3
 8000356:	3b20      	subs	r3, #32
 8000358:	d434      	bmi.n	80003c4 <__udivmoddi4+0xa0>
 800035a:	469b      	mov	fp, r3
 800035c:	4653      	mov	r3, sl
 800035e:	465a      	mov	r2, fp
 8000360:	4093      	lsls	r3, r2
 8000362:	4642      	mov	r2, r8
 8000364:	001f      	movs	r7, r3
 8000366:	4653      	mov	r3, sl
 8000368:	4093      	lsls	r3, r2
 800036a:	001e      	movs	r6, r3
 800036c:	42af      	cmp	r7, r5
 800036e:	d83b      	bhi.n	80003e8 <__udivmoddi4+0xc4>
 8000370:	42af      	cmp	r7, r5
 8000372:	d100      	bne.n	8000376 <__udivmoddi4+0x52>
 8000374:	e079      	b.n	800046a <__udivmoddi4+0x146>
 8000376:	465b      	mov	r3, fp
 8000378:	1ba4      	subs	r4, r4, r6
 800037a:	41bd      	sbcs	r5, r7
 800037c:	2b00      	cmp	r3, #0
 800037e:	da00      	bge.n	8000382 <__udivmoddi4+0x5e>
 8000380:	e076      	b.n	8000470 <__udivmoddi4+0x14c>
 8000382:	2200      	movs	r2, #0
 8000384:	2300      	movs	r3, #0
 8000386:	9200      	str	r2, [sp, #0]
 8000388:	9301      	str	r3, [sp, #4]
 800038a:	2301      	movs	r3, #1
 800038c:	465a      	mov	r2, fp
 800038e:	4093      	lsls	r3, r2
 8000390:	9301      	str	r3, [sp, #4]
 8000392:	2301      	movs	r3, #1
 8000394:	4642      	mov	r2, r8
 8000396:	4093      	lsls	r3, r2
 8000398:	9300      	str	r3, [sp, #0]
 800039a:	e029      	b.n	80003f0 <__udivmoddi4+0xcc>
 800039c:	4282      	cmp	r2, r0
 800039e:	d9cf      	bls.n	8000340 <__udivmoddi4+0x1c>
 80003a0:	2200      	movs	r2, #0
 80003a2:	2300      	movs	r3, #0
 80003a4:	9200      	str	r2, [sp, #0]
 80003a6:	9301      	str	r3, [sp, #4]
 80003a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	d001      	beq.n	80003b2 <__udivmoddi4+0x8e>
 80003ae:	601c      	str	r4, [r3, #0]
 80003b0:	605d      	str	r5, [r3, #4]
 80003b2:	9800      	ldr	r0, [sp, #0]
 80003b4:	9901      	ldr	r1, [sp, #4]
 80003b6:	b003      	add	sp, #12
 80003b8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ba:	46bb      	mov	fp, r7
 80003bc:	46b2      	mov	sl, r6
 80003be:	46a9      	mov	r9, r5
 80003c0:	46a0      	mov	r8, r4
 80003c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80003c4:	4642      	mov	r2, r8
 80003c6:	469b      	mov	fp, r3
 80003c8:	2320      	movs	r3, #32
 80003ca:	1a9b      	subs	r3, r3, r2
 80003cc:	4652      	mov	r2, sl
 80003ce:	40da      	lsrs	r2, r3
 80003d0:	4641      	mov	r1, r8
 80003d2:	0013      	movs	r3, r2
 80003d4:	464a      	mov	r2, r9
 80003d6:	408a      	lsls	r2, r1
 80003d8:	0017      	movs	r7, r2
 80003da:	4642      	mov	r2, r8
 80003dc:	431f      	orrs	r7, r3
 80003de:	4653      	mov	r3, sl
 80003e0:	4093      	lsls	r3, r2
 80003e2:	001e      	movs	r6, r3
 80003e4:	42af      	cmp	r7, r5
 80003e6:	d9c3      	bls.n	8000370 <__udivmoddi4+0x4c>
 80003e8:	2200      	movs	r2, #0
 80003ea:	2300      	movs	r3, #0
 80003ec:	9200      	str	r2, [sp, #0]
 80003ee:	9301      	str	r3, [sp, #4]
 80003f0:	4643      	mov	r3, r8
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d0d8      	beq.n	80003a8 <__udivmoddi4+0x84>
 80003f6:	07fb      	lsls	r3, r7, #31
 80003f8:	0872      	lsrs	r2, r6, #1
 80003fa:	431a      	orrs	r2, r3
 80003fc:	4646      	mov	r6, r8
 80003fe:	087b      	lsrs	r3, r7, #1
 8000400:	e00e      	b.n	8000420 <__udivmoddi4+0xfc>
 8000402:	42ab      	cmp	r3, r5
 8000404:	d101      	bne.n	800040a <__udivmoddi4+0xe6>
 8000406:	42a2      	cmp	r2, r4
 8000408:	d80c      	bhi.n	8000424 <__udivmoddi4+0x100>
 800040a:	1aa4      	subs	r4, r4, r2
 800040c:	419d      	sbcs	r5, r3
 800040e:	2001      	movs	r0, #1
 8000410:	1924      	adds	r4, r4, r4
 8000412:	416d      	adcs	r5, r5
 8000414:	2100      	movs	r1, #0
 8000416:	3e01      	subs	r6, #1
 8000418:	1824      	adds	r4, r4, r0
 800041a:	414d      	adcs	r5, r1
 800041c:	2e00      	cmp	r6, #0
 800041e:	d006      	beq.n	800042e <__udivmoddi4+0x10a>
 8000420:	42ab      	cmp	r3, r5
 8000422:	d9ee      	bls.n	8000402 <__udivmoddi4+0xde>
 8000424:	3e01      	subs	r6, #1
 8000426:	1924      	adds	r4, r4, r4
 8000428:	416d      	adcs	r5, r5
 800042a:	2e00      	cmp	r6, #0
 800042c:	d1f8      	bne.n	8000420 <__udivmoddi4+0xfc>
 800042e:	9800      	ldr	r0, [sp, #0]
 8000430:	9901      	ldr	r1, [sp, #4]
 8000432:	465b      	mov	r3, fp
 8000434:	1900      	adds	r0, r0, r4
 8000436:	4169      	adcs	r1, r5
 8000438:	2b00      	cmp	r3, #0
 800043a:	db24      	blt.n	8000486 <__udivmoddi4+0x162>
 800043c:	002b      	movs	r3, r5
 800043e:	465a      	mov	r2, fp
 8000440:	4644      	mov	r4, r8
 8000442:	40d3      	lsrs	r3, r2
 8000444:	002a      	movs	r2, r5
 8000446:	40e2      	lsrs	r2, r4
 8000448:	001c      	movs	r4, r3
 800044a:	465b      	mov	r3, fp
 800044c:	0015      	movs	r5, r2
 800044e:	2b00      	cmp	r3, #0
 8000450:	db2a      	blt.n	80004a8 <__udivmoddi4+0x184>
 8000452:	0026      	movs	r6, r4
 8000454:	409e      	lsls	r6, r3
 8000456:	0033      	movs	r3, r6
 8000458:	0026      	movs	r6, r4
 800045a:	4647      	mov	r7, r8
 800045c:	40be      	lsls	r6, r7
 800045e:	0032      	movs	r2, r6
 8000460:	1a80      	subs	r0, r0, r2
 8000462:	4199      	sbcs	r1, r3
 8000464:	9000      	str	r0, [sp, #0]
 8000466:	9101      	str	r1, [sp, #4]
 8000468:	e79e      	b.n	80003a8 <__udivmoddi4+0x84>
 800046a:	42a3      	cmp	r3, r4
 800046c:	d8bc      	bhi.n	80003e8 <__udivmoddi4+0xc4>
 800046e:	e782      	b.n	8000376 <__udivmoddi4+0x52>
 8000470:	4642      	mov	r2, r8
 8000472:	2320      	movs	r3, #32
 8000474:	2100      	movs	r1, #0
 8000476:	1a9b      	subs	r3, r3, r2
 8000478:	2200      	movs	r2, #0
 800047a:	9100      	str	r1, [sp, #0]
 800047c:	9201      	str	r2, [sp, #4]
 800047e:	2201      	movs	r2, #1
 8000480:	40da      	lsrs	r2, r3
 8000482:	9201      	str	r2, [sp, #4]
 8000484:	e785      	b.n	8000392 <__udivmoddi4+0x6e>
 8000486:	4642      	mov	r2, r8
 8000488:	2320      	movs	r3, #32
 800048a:	1a9b      	subs	r3, r3, r2
 800048c:	002a      	movs	r2, r5
 800048e:	4646      	mov	r6, r8
 8000490:	409a      	lsls	r2, r3
 8000492:	0023      	movs	r3, r4
 8000494:	40f3      	lsrs	r3, r6
 8000496:	4644      	mov	r4, r8
 8000498:	4313      	orrs	r3, r2
 800049a:	002a      	movs	r2, r5
 800049c:	40e2      	lsrs	r2, r4
 800049e:	001c      	movs	r4, r3
 80004a0:	465b      	mov	r3, fp
 80004a2:	0015      	movs	r5, r2
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	dad4      	bge.n	8000452 <__udivmoddi4+0x12e>
 80004a8:	4642      	mov	r2, r8
 80004aa:	002f      	movs	r7, r5
 80004ac:	2320      	movs	r3, #32
 80004ae:	0026      	movs	r6, r4
 80004b0:	4097      	lsls	r7, r2
 80004b2:	1a9b      	subs	r3, r3, r2
 80004b4:	40de      	lsrs	r6, r3
 80004b6:	003b      	movs	r3, r7
 80004b8:	4333      	orrs	r3, r6
 80004ba:	e7cd      	b.n	8000458 <__udivmoddi4+0x134>

080004bc <__aeabi_fdiv>:
 80004bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004be:	464f      	mov	r7, r9
 80004c0:	4646      	mov	r6, r8
 80004c2:	46d6      	mov	lr, sl
 80004c4:	0245      	lsls	r5, r0, #9
 80004c6:	b5c0      	push	{r6, r7, lr}
 80004c8:	0047      	lsls	r7, r0, #1
 80004ca:	1c0c      	adds	r4, r1, #0
 80004cc:	0a6d      	lsrs	r5, r5, #9
 80004ce:	0e3f      	lsrs	r7, r7, #24
 80004d0:	0fc6      	lsrs	r6, r0, #31
 80004d2:	2f00      	cmp	r7, #0
 80004d4:	d100      	bne.n	80004d8 <__aeabi_fdiv+0x1c>
 80004d6:	e06f      	b.n	80005b8 <__aeabi_fdiv+0xfc>
 80004d8:	2fff      	cmp	r7, #255	; 0xff
 80004da:	d100      	bne.n	80004de <__aeabi_fdiv+0x22>
 80004dc:	e074      	b.n	80005c8 <__aeabi_fdiv+0x10c>
 80004de:	2300      	movs	r3, #0
 80004e0:	2280      	movs	r2, #128	; 0x80
 80004e2:	4699      	mov	r9, r3
 80004e4:	469a      	mov	sl, r3
 80004e6:	00ed      	lsls	r5, r5, #3
 80004e8:	04d2      	lsls	r2, r2, #19
 80004ea:	4315      	orrs	r5, r2
 80004ec:	3f7f      	subs	r7, #127	; 0x7f
 80004ee:	0263      	lsls	r3, r4, #9
 80004f0:	0a5b      	lsrs	r3, r3, #9
 80004f2:	4698      	mov	r8, r3
 80004f4:	0063      	lsls	r3, r4, #1
 80004f6:	0e1b      	lsrs	r3, r3, #24
 80004f8:	0fe4      	lsrs	r4, r4, #31
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	d04d      	beq.n	800059a <__aeabi_fdiv+0xde>
 80004fe:	2bff      	cmp	r3, #255	; 0xff
 8000500:	d045      	beq.n	800058e <__aeabi_fdiv+0xd2>
 8000502:	4642      	mov	r2, r8
 8000504:	2180      	movs	r1, #128	; 0x80
 8000506:	00d2      	lsls	r2, r2, #3
 8000508:	04c9      	lsls	r1, r1, #19
 800050a:	4311      	orrs	r1, r2
 800050c:	4688      	mov	r8, r1
 800050e:	2200      	movs	r2, #0
 8000510:	3b7f      	subs	r3, #127	; 0x7f
 8000512:	0031      	movs	r1, r6
 8000514:	1aff      	subs	r7, r7, r3
 8000516:	464b      	mov	r3, r9
 8000518:	4061      	eors	r1, r4
 800051a:	b2c9      	uxtb	r1, r1
 800051c:	2b0f      	cmp	r3, #15
 800051e:	d900      	bls.n	8000522 <__aeabi_fdiv+0x66>
 8000520:	e0b8      	b.n	8000694 <__aeabi_fdiv+0x1d8>
 8000522:	4870      	ldr	r0, [pc, #448]	; (80006e4 <__aeabi_fdiv+0x228>)
 8000524:	009b      	lsls	r3, r3, #2
 8000526:	58c3      	ldr	r3, [r0, r3]
 8000528:	469f      	mov	pc, r3
 800052a:	2300      	movs	r3, #0
 800052c:	4698      	mov	r8, r3
 800052e:	0026      	movs	r6, r4
 8000530:	4645      	mov	r5, r8
 8000532:	4692      	mov	sl, r2
 8000534:	4653      	mov	r3, sl
 8000536:	2b02      	cmp	r3, #2
 8000538:	d100      	bne.n	800053c <__aeabi_fdiv+0x80>
 800053a:	e08d      	b.n	8000658 <__aeabi_fdiv+0x19c>
 800053c:	2b03      	cmp	r3, #3
 800053e:	d100      	bne.n	8000542 <__aeabi_fdiv+0x86>
 8000540:	e0a1      	b.n	8000686 <__aeabi_fdiv+0x1ca>
 8000542:	2b01      	cmp	r3, #1
 8000544:	d018      	beq.n	8000578 <__aeabi_fdiv+0xbc>
 8000546:	003b      	movs	r3, r7
 8000548:	337f      	adds	r3, #127	; 0x7f
 800054a:	2b00      	cmp	r3, #0
 800054c:	dd6d      	ble.n	800062a <__aeabi_fdiv+0x16e>
 800054e:	076a      	lsls	r2, r5, #29
 8000550:	d004      	beq.n	800055c <__aeabi_fdiv+0xa0>
 8000552:	220f      	movs	r2, #15
 8000554:	402a      	ands	r2, r5
 8000556:	2a04      	cmp	r2, #4
 8000558:	d000      	beq.n	800055c <__aeabi_fdiv+0xa0>
 800055a:	3504      	adds	r5, #4
 800055c:	012a      	lsls	r2, r5, #4
 800055e:	d503      	bpl.n	8000568 <__aeabi_fdiv+0xac>
 8000560:	4b61      	ldr	r3, [pc, #388]	; (80006e8 <__aeabi_fdiv+0x22c>)
 8000562:	401d      	ands	r5, r3
 8000564:	003b      	movs	r3, r7
 8000566:	3380      	adds	r3, #128	; 0x80
 8000568:	2bfe      	cmp	r3, #254	; 0xfe
 800056a:	dd00      	ble.n	800056e <__aeabi_fdiv+0xb2>
 800056c:	e074      	b.n	8000658 <__aeabi_fdiv+0x19c>
 800056e:	01aa      	lsls	r2, r5, #6
 8000570:	0a52      	lsrs	r2, r2, #9
 8000572:	b2d8      	uxtb	r0, r3
 8000574:	e002      	b.n	800057c <__aeabi_fdiv+0xc0>
 8000576:	000e      	movs	r6, r1
 8000578:	2000      	movs	r0, #0
 800057a:	2200      	movs	r2, #0
 800057c:	05c0      	lsls	r0, r0, #23
 800057e:	07f6      	lsls	r6, r6, #31
 8000580:	4310      	orrs	r0, r2
 8000582:	4330      	orrs	r0, r6
 8000584:	bce0      	pop	{r5, r6, r7}
 8000586:	46ba      	mov	sl, r7
 8000588:	46b1      	mov	r9, r6
 800058a:	46a8      	mov	r8, r5
 800058c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800058e:	4643      	mov	r3, r8
 8000590:	2b00      	cmp	r3, #0
 8000592:	d13f      	bne.n	8000614 <__aeabi_fdiv+0x158>
 8000594:	2202      	movs	r2, #2
 8000596:	3fff      	subs	r7, #255	; 0xff
 8000598:	e003      	b.n	80005a2 <__aeabi_fdiv+0xe6>
 800059a:	4643      	mov	r3, r8
 800059c:	2b00      	cmp	r3, #0
 800059e:	d12d      	bne.n	80005fc <__aeabi_fdiv+0x140>
 80005a0:	2201      	movs	r2, #1
 80005a2:	0031      	movs	r1, r6
 80005a4:	464b      	mov	r3, r9
 80005a6:	4061      	eors	r1, r4
 80005a8:	b2c9      	uxtb	r1, r1
 80005aa:	4313      	orrs	r3, r2
 80005ac:	2b0f      	cmp	r3, #15
 80005ae:	d838      	bhi.n	8000622 <__aeabi_fdiv+0x166>
 80005b0:	484e      	ldr	r0, [pc, #312]	; (80006ec <__aeabi_fdiv+0x230>)
 80005b2:	009b      	lsls	r3, r3, #2
 80005b4:	58c3      	ldr	r3, [r0, r3]
 80005b6:	469f      	mov	pc, r3
 80005b8:	2d00      	cmp	r5, #0
 80005ba:	d113      	bne.n	80005e4 <__aeabi_fdiv+0x128>
 80005bc:	2304      	movs	r3, #4
 80005be:	4699      	mov	r9, r3
 80005c0:	3b03      	subs	r3, #3
 80005c2:	2700      	movs	r7, #0
 80005c4:	469a      	mov	sl, r3
 80005c6:	e792      	b.n	80004ee <__aeabi_fdiv+0x32>
 80005c8:	2d00      	cmp	r5, #0
 80005ca:	d105      	bne.n	80005d8 <__aeabi_fdiv+0x11c>
 80005cc:	2308      	movs	r3, #8
 80005ce:	4699      	mov	r9, r3
 80005d0:	3b06      	subs	r3, #6
 80005d2:	27ff      	movs	r7, #255	; 0xff
 80005d4:	469a      	mov	sl, r3
 80005d6:	e78a      	b.n	80004ee <__aeabi_fdiv+0x32>
 80005d8:	230c      	movs	r3, #12
 80005da:	4699      	mov	r9, r3
 80005dc:	3b09      	subs	r3, #9
 80005de:	27ff      	movs	r7, #255	; 0xff
 80005e0:	469a      	mov	sl, r3
 80005e2:	e784      	b.n	80004ee <__aeabi_fdiv+0x32>
 80005e4:	0028      	movs	r0, r5
 80005e6:	f000 fc13 	bl	8000e10 <__clzsi2>
 80005ea:	2776      	movs	r7, #118	; 0x76
 80005ec:	1f43      	subs	r3, r0, #5
 80005ee:	409d      	lsls	r5, r3
 80005f0:	2300      	movs	r3, #0
 80005f2:	427f      	negs	r7, r7
 80005f4:	4699      	mov	r9, r3
 80005f6:	469a      	mov	sl, r3
 80005f8:	1a3f      	subs	r7, r7, r0
 80005fa:	e778      	b.n	80004ee <__aeabi_fdiv+0x32>
 80005fc:	4640      	mov	r0, r8
 80005fe:	f000 fc07 	bl	8000e10 <__clzsi2>
 8000602:	4642      	mov	r2, r8
 8000604:	1f43      	subs	r3, r0, #5
 8000606:	409a      	lsls	r2, r3
 8000608:	2376      	movs	r3, #118	; 0x76
 800060a:	425b      	negs	r3, r3
 800060c:	4690      	mov	r8, r2
 800060e:	1a1b      	subs	r3, r3, r0
 8000610:	2200      	movs	r2, #0
 8000612:	e77e      	b.n	8000512 <__aeabi_fdiv+0x56>
 8000614:	2303      	movs	r3, #3
 8000616:	464a      	mov	r2, r9
 8000618:	431a      	orrs	r2, r3
 800061a:	4691      	mov	r9, r2
 800061c:	33fc      	adds	r3, #252	; 0xfc
 800061e:	2203      	movs	r2, #3
 8000620:	e777      	b.n	8000512 <__aeabi_fdiv+0x56>
 8000622:	000e      	movs	r6, r1
 8000624:	20ff      	movs	r0, #255	; 0xff
 8000626:	2200      	movs	r2, #0
 8000628:	e7a8      	b.n	800057c <__aeabi_fdiv+0xc0>
 800062a:	2201      	movs	r2, #1
 800062c:	1ad3      	subs	r3, r2, r3
 800062e:	2b1b      	cmp	r3, #27
 8000630:	dca2      	bgt.n	8000578 <__aeabi_fdiv+0xbc>
 8000632:	379e      	adds	r7, #158	; 0x9e
 8000634:	002a      	movs	r2, r5
 8000636:	40bd      	lsls	r5, r7
 8000638:	40da      	lsrs	r2, r3
 800063a:	1e6b      	subs	r3, r5, #1
 800063c:	419d      	sbcs	r5, r3
 800063e:	4315      	orrs	r5, r2
 8000640:	076a      	lsls	r2, r5, #29
 8000642:	d004      	beq.n	800064e <__aeabi_fdiv+0x192>
 8000644:	220f      	movs	r2, #15
 8000646:	402a      	ands	r2, r5
 8000648:	2a04      	cmp	r2, #4
 800064a:	d000      	beq.n	800064e <__aeabi_fdiv+0x192>
 800064c:	3504      	adds	r5, #4
 800064e:	016a      	lsls	r2, r5, #5
 8000650:	d544      	bpl.n	80006dc <__aeabi_fdiv+0x220>
 8000652:	2001      	movs	r0, #1
 8000654:	2200      	movs	r2, #0
 8000656:	e791      	b.n	800057c <__aeabi_fdiv+0xc0>
 8000658:	20ff      	movs	r0, #255	; 0xff
 800065a:	2200      	movs	r2, #0
 800065c:	e78e      	b.n	800057c <__aeabi_fdiv+0xc0>
 800065e:	2280      	movs	r2, #128	; 0x80
 8000660:	2600      	movs	r6, #0
 8000662:	20ff      	movs	r0, #255	; 0xff
 8000664:	03d2      	lsls	r2, r2, #15
 8000666:	e789      	b.n	800057c <__aeabi_fdiv+0xc0>
 8000668:	2300      	movs	r3, #0
 800066a:	4698      	mov	r8, r3
 800066c:	2280      	movs	r2, #128	; 0x80
 800066e:	03d2      	lsls	r2, r2, #15
 8000670:	4215      	tst	r5, r2
 8000672:	d008      	beq.n	8000686 <__aeabi_fdiv+0x1ca>
 8000674:	4643      	mov	r3, r8
 8000676:	4213      	tst	r3, r2
 8000678:	d105      	bne.n	8000686 <__aeabi_fdiv+0x1ca>
 800067a:	431a      	orrs	r2, r3
 800067c:	0252      	lsls	r2, r2, #9
 800067e:	0026      	movs	r6, r4
 8000680:	20ff      	movs	r0, #255	; 0xff
 8000682:	0a52      	lsrs	r2, r2, #9
 8000684:	e77a      	b.n	800057c <__aeabi_fdiv+0xc0>
 8000686:	2280      	movs	r2, #128	; 0x80
 8000688:	03d2      	lsls	r2, r2, #15
 800068a:	432a      	orrs	r2, r5
 800068c:	0252      	lsls	r2, r2, #9
 800068e:	20ff      	movs	r0, #255	; 0xff
 8000690:	0a52      	lsrs	r2, r2, #9
 8000692:	e773      	b.n	800057c <__aeabi_fdiv+0xc0>
 8000694:	4642      	mov	r2, r8
 8000696:	016b      	lsls	r3, r5, #5
 8000698:	0155      	lsls	r5, r2, #5
 800069a:	42ab      	cmp	r3, r5
 800069c:	d21a      	bcs.n	80006d4 <__aeabi_fdiv+0x218>
 800069e:	201b      	movs	r0, #27
 80006a0:	2200      	movs	r2, #0
 80006a2:	3f01      	subs	r7, #1
 80006a4:	2601      	movs	r6, #1
 80006a6:	001c      	movs	r4, r3
 80006a8:	0052      	lsls	r2, r2, #1
 80006aa:	005b      	lsls	r3, r3, #1
 80006ac:	2c00      	cmp	r4, #0
 80006ae:	db01      	blt.n	80006b4 <__aeabi_fdiv+0x1f8>
 80006b0:	429d      	cmp	r5, r3
 80006b2:	d801      	bhi.n	80006b8 <__aeabi_fdiv+0x1fc>
 80006b4:	1b5b      	subs	r3, r3, r5
 80006b6:	4332      	orrs	r2, r6
 80006b8:	3801      	subs	r0, #1
 80006ba:	2800      	cmp	r0, #0
 80006bc:	d1f3      	bne.n	80006a6 <__aeabi_fdiv+0x1ea>
 80006be:	1e58      	subs	r0, r3, #1
 80006c0:	4183      	sbcs	r3, r0
 80006c2:	4313      	orrs	r3, r2
 80006c4:	001d      	movs	r5, r3
 80006c6:	003b      	movs	r3, r7
 80006c8:	337f      	adds	r3, #127	; 0x7f
 80006ca:	000e      	movs	r6, r1
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	dd00      	ble.n	80006d2 <__aeabi_fdiv+0x216>
 80006d0:	e73d      	b.n	800054e <__aeabi_fdiv+0x92>
 80006d2:	e7aa      	b.n	800062a <__aeabi_fdiv+0x16e>
 80006d4:	201a      	movs	r0, #26
 80006d6:	2201      	movs	r2, #1
 80006d8:	1b5b      	subs	r3, r3, r5
 80006da:	e7e3      	b.n	80006a4 <__aeabi_fdiv+0x1e8>
 80006dc:	01aa      	lsls	r2, r5, #6
 80006de:	2000      	movs	r0, #0
 80006e0:	0a52      	lsrs	r2, r2, #9
 80006e2:	e74b      	b.n	800057c <__aeabi_fdiv+0xc0>
 80006e4:	08006b80 	.word	0x08006b80
 80006e8:	f7ffffff 	.word	0xf7ffffff
 80006ec:	08006bc0 	.word	0x08006bc0

080006f0 <__aeabi_fmul>:
 80006f0:	0243      	lsls	r3, r0, #9
 80006f2:	0a5b      	lsrs	r3, r3, #9
 80006f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006f6:	464f      	mov	r7, r9
 80006f8:	4646      	mov	r6, r8
 80006fa:	4699      	mov	r9, r3
 80006fc:	46d6      	mov	lr, sl
 80006fe:	0fc3      	lsrs	r3, r0, #31
 8000700:	0045      	lsls	r5, r0, #1
 8000702:	4698      	mov	r8, r3
 8000704:	b5c0      	push	{r6, r7, lr}
 8000706:	464b      	mov	r3, r9
 8000708:	1c0f      	adds	r7, r1, #0
 800070a:	0e2d      	lsrs	r5, r5, #24
 800070c:	d100      	bne.n	8000710 <__aeabi_fmul+0x20>
 800070e:	e0cb      	b.n	80008a8 <__aeabi_fmul+0x1b8>
 8000710:	2dff      	cmp	r5, #255	; 0xff
 8000712:	d100      	bne.n	8000716 <__aeabi_fmul+0x26>
 8000714:	e0cf      	b.n	80008b6 <__aeabi_fmul+0x1c6>
 8000716:	2280      	movs	r2, #128	; 0x80
 8000718:	00db      	lsls	r3, r3, #3
 800071a:	04d2      	lsls	r2, r2, #19
 800071c:	431a      	orrs	r2, r3
 800071e:	2300      	movs	r3, #0
 8000720:	4691      	mov	r9, r2
 8000722:	2600      	movs	r6, #0
 8000724:	469a      	mov	sl, r3
 8000726:	3d7f      	subs	r5, #127	; 0x7f
 8000728:	027c      	lsls	r4, r7, #9
 800072a:	007b      	lsls	r3, r7, #1
 800072c:	0a64      	lsrs	r4, r4, #9
 800072e:	0e1b      	lsrs	r3, r3, #24
 8000730:	0fff      	lsrs	r7, r7, #31
 8000732:	2b00      	cmp	r3, #0
 8000734:	d100      	bne.n	8000738 <__aeabi_fmul+0x48>
 8000736:	e0a9      	b.n	800088c <__aeabi_fmul+0x19c>
 8000738:	2bff      	cmp	r3, #255	; 0xff
 800073a:	d011      	beq.n	8000760 <__aeabi_fmul+0x70>
 800073c:	2280      	movs	r2, #128	; 0x80
 800073e:	00e4      	lsls	r4, r4, #3
 8000740:	04d2      	lsls	r2, r2, #19
 8000742:	4314      	orrs	r4, r2
 8000744:	4642      	mov	r2, r8
 8000746:	3b7f      	subs	r3, #127	; 0x7f
 8000748:	195b      	adds	r3, r3, r5
 800074a:	407a      	eors	r2, r7
 800074c:	2000      	movs	r0, #0
 800074e:	b2d2      	uxtb	r2, r2
 8000750:	1c5d      	adds	r5, r3, #1
 8000752:	2e0a      	cmp	r6, #10
 8000754:	dd13      	ble.n	800077e <__aeabi_fmul+0x8e>
 8000756:	003a      	movs	r2, r7
 8000758:	2e0b      	cmp	r6, #11
 800075a:	d047      	beq.n	80007ec <__aeabi_fmul+0xfc>
 800075c:	4647      	mov	r7, r8
 800075e:	e03f      	b.n	80007e0 <__aeabi_fmul+0xf0>
 8000760:	002b      	movs	r3, r5
 8000762:	33ff      	adds	r3, #255	; 0xff
 8000764:	2c00      	cmp	r4, #0
 8000766:	d11e      	bne.n	80007a6 <__aeabi_fmul+0xb6>
 8000768:	2202      	movs	r2, #2
 800076a:	4316      	orrs	r6, r2
 800076c:	4642      	mov	r2, r8
 800076e:	3501      	adds	r5, #1
 8000770:	407a      	eors	r2, r7
 8000772:	b2d2      	uxtb	r2, r2
 8000774:	35ff      	adds	r5, #255	; 0xff
 8000776:	2e0a      	cmp	r6, #10
 8000778:	dd00      	ble.n	800077c <__aeabi_fmul+0x8c>
 800077a:	e0e4      	b.n	8000946 <__aeabi_fmul+0x256>
 800077c:	2002      	movs	r0, #2
 800077e:	2e02      	cmp	r6, #2
 8000780:	dc1c      	bgt.n	80007bc <__aeabi_fmul+0xcc>
 8000782:	3e01      	subs	r6, #1
 8000784:	2e01      	cmp	r6, #1
 8000786:	d842      	bhi.n	800080e <__aeabi_fmul+0x11e>
 8000788:	2802      	cmp	r0, #2
 800078a:	d03d      	beq.n	8000808 <__aeabi_fmul+0x118>
 800078c:	2801      	cmp	r0, #1
 800078e:	d166      	bne.n	800085e <__aeabi_fmul+0x16e>
 8000790:	2000      	movs	r0, #0
 8000792:	2100      	movs	r1, #0
 8000794:	05c0      	lsls	r0, r0, #23
 8000796:	4308      	orrs	r0, r1
 8000798:	07d2      	lsls	r2, r2, #31
 800079a:	4310      	orrs	r0, r2
 800079c:	bce0      	pop	{r5, r6, r7}
 800079e:	46ba      	mov	sl, r7
 80007a0:	46b1      	mov	r9, r6
 80007a2:	46a8      	mov	r8, r5
 80007a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007a6:	2203      	movs	r2, #3
 80007a8:	4316      	orrs	r6, r2
 80007aa:	4642      	mov	r2, r8
 80007ac:	3501      	adds	r5, #1
 80007ae:	407a      	eors	r2, r7
 80007b0:	b2d2      	uxtb	r2, r2
 80007b2:	35ff      	adds	r5, #255	; 0xff
 80007b4:	2e0a      	cmp	r6, #10
 80007b6:	dd00      	ble.n	80007ba <__aeabi_fmul+0xca>
 80007b8:	e0e4      	b.n	8000984 <__aeabi_fmul+0x294>
 80007ba:	2003      	movs	r0, #3
 80007bc:	2101      	movs	r1, #1
 80007be:	40b1      	lsls	r1, r6
 80007c0:	26a6      	movs	r6, #166	; 0xa6
 80007c2:	00f6      	lsls	r6, r6, #3
 80007c4:	4231      	tst	r1, r6
 80007c6:	d10a      	bne.n	80007de <__aeabi_fmul+0xee>
 80007c8:	2690      	movs	r6, #144	; 0x90
 80007ca:	00b6      	lsls	r6, r6, #2
 80007cc:	4231      	tst	r1, r6
 80007ce:	d116      	bne.n	80007fe <__aeabi_fmul+0x10e>
 80007d0:	3eb9      	subs	r6, #185	; 0xb9
 80007d2:	3eff      	subs	r6, #255	; 0xff
 80007d4:	420e      	tst	r6, r1
 80007d6:	d01a      	beq.n	800080e <__aeabi_fmul+0x11e>
 80007d8:	46a1      	mov	r9, r4
 80007da:	4682      	mov	sl, r0
 80007dc:	e000      	b.n	80007e0 <__aeabi_fmul+0xf0>
 80007de:	0017      	movs	r7, r2
 80007e0:	4653      	mov	r3, sl
 80007e2:	003a      	movs	r2, r7
 80007e4:	2b02      	cmp	r3, #2
 80007e6:	d00f      	beq.n	8000808 <__aeabi_fmul+0x118>
 80007e8:	464c      	mov	r4, r9
 80007ea:	4650      	mov	r0, sl
 80007ec:	2803      	cmp	r0, #3
 80007ee:	d1cd      	bne.n	800078c <__aeabi_fmul+0x9c>
 80007f0:	2180      	movs	r1, #128	; 0x80
 80007f2:	03c9      	lsls	r1, r1, #15
 80007f4:	4321      	orrs	r1, r4
 80007f6:	0249      	lsls	r1, r1, #9
 80007f8:	20ff      	movs	r0, #255	; 0xff
 80007fa:	0a49      	lsrs	r1, r1, #9
 80007fc:	e7ca      	b.n	8000794 <__aeabi_fmul+0xa4>
 80007fe:	2180      	movs	r1, #128	; 0x80
 8000800:	2200      	movs	r2, #0
 8000802:	20ff      	movs	r0, #255	; 0xff
 8000804:	03c9      	lsls	r1, r1, #15
 8000806:	e7c5      	b.n	8000794 <__aeabi_fmul+0xa4>
 8000808:	20ff      	movs	r0, #255	; 0xff
 800080a:	2100      	movs	r1, #0
 800080c:	e7c2      	b.n	8000794 <__aeabi_fmul+0xa4>
 800080e:	0c20      	lsrs	r0, r4, #16
 8000810:	4649      	mov	r1, r9
 8000812:	0424      	lsls	r4, r4, #16
 8000814:	0c24      	lsrs	r4, r4, #16
 8000816:	0027      	movs	r7, r4
 8000818:	0c0e      	lsrs	r6, r1, #16
 800081a:	0409      	lsls	r1, r1, #16
 800081c:	0c09      	lsrs	r1, r1, #16
 800081e:	4374      	muls	r4, r6
 8000820:	434f      	muls	r7, r1
 8000822:	4346      	muls	r6, r0
 8000824:	4348      	muls	r0, r1
 8000826:	0c39      	lsrs	r1, r7, #16
 8000828:	1900      	adds	r0, r0, r4
 800082a:	1809      	adds	r1, r1, r0
 800082c:	428c      	cmp	r4, r1
 800082e:	d903      	bls.n	8000838 <__aeabi_fmul+0x148>
 8000830:	2080      	movs	r0, #128	; 0x80
 8000832:	0240      	lsls	r0, r0, #9
 8000834:	4684      	mov	ip, r0
 8000836:	4466      	add	r6, ip
 8000838:	043f      	lsls	r7, r7, #16
 800083a:	0408      	lsls	r0, r1, #16
 800083c:	0c3f      	lsrs	r7, r7, #16
 800083e:	19c0      	adds	r0, r0, r7
 8000840:	0184      	lsls	r4, r0, #6
 8000842:	1e67      	subs	r7, r4, #1
 8000844:	41bc      	sbcs	r4, r7
 8000846:	0c09      	lsrs	r1, r1, #16
 8000848:	0e80      	lsrs	r0, r0, #26
 800084a:	1989      	adds	r1, r1, r6
 800084c:	4304      	orrs	r4, r0
 800084e:	0189      	lsls	r1, r1, #6
 8000850:	430c      	orrs	r4, r1
 8000852:	0109      	lsls	r1, r1, #4
 8000854:	d571      	bpl.n	800093a <__aeabi_fmul+0x24a>
 8000856:	2301      	movs	r3, #1
 8000858:	0861      	lsrs	r1, r4, #1
 800085a:	401c      	ands	r4, r3
 800085c:	430c      	orrs	r4, r1
 800085e:	002b      	movs	r3, r5
 8000860:	337f      	adds	r3, #127	; 0x7f
 8000862:	2b00      	cmp	r3, #0
 8000864:	dd51      	ble.n	800090a <__aeabi_fmul+0x21a>
 8000866:	0761      	lsls	r1, r4, #29
 8000868:	d004      	beq.n	8000874 <__aeabi_fmul+0x184>
 800086a:	210f      	movs	r1, #15
 800086c:	4021      	ands	r1, r4
 800086e:	2904      	cmp	r1, #4
 8000870:	d000      	beq.n	8000874 <__aeabi_fmul+0x184>
 8000872:	3404      	adds	r4, #4
 8000874:	0121      	lsls	r1, r4, #4
 8000876:	d503      	bpl.n	8000880 <__aeabi_fmul+0x190>
 8000878:	4b43      	ldr	r3, [pc, #268]	; (8000988 <__aeabi_fmul+0x298>)
 800087a:	401c      	ands	r4, r3
 800087c:	002b      	movs	r3, r5
 800087e:	3380      	adds	r3, #128	; 0x80
 8000880:	2bfe      	cmp	r3, #254	; 0xfe
 8000882:	dcc1      	bgt.n	8000808 <__aeabi_fmul+0x118>
 8000884:	01a1      	lsls	r1, r4, #6
 8000886:	0a49      	lsrs	r1, r1, #9
 8000888:	b2d8      	uxtb	r0, r3
 800088a:	e783      	b.n	8000794 <__aeabi_fmul+0xa4>
 800088c:	2c00      	cmp	r4, #0
 800088e:	d12c      	bne.n	80008ea <__aeabi_fmul+0x1fa>
 8000890:	2301      	movs	r3, #1
 8000892:	4642      	mov	r2, r8
 8000894:	431e      	orrs	r6, r3
 8000896:	002b      	movs	r3, r5
 8000898:	407a      	eors	r2, r7
 800089a:	2001      	movs	r0, #1
 800089c:	b2d2      	uxtb	r2, r2
 800089e:	1c5d      	adds	r5, r3, #1
 80008a0:	2e0a      	cmp	r6, #10
 80008a2:	dd00      	ble.n	80008a6 <__aeabi_fmul+0x1b6>
 80008a4:	e757      	b.n	8000756 <__aeabi_fmul+0x66>
 80008a6:	e76a      	b.n	800077e <__aeabi_fmul+0x8e>
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d110      	bne.n	80008ce <__aeabi_fmul+0x1de>
 80008ac:	2301      	movs	r3, #1
 80008ae:	2604      	movs	r6, #4
 80008b0:	2500      	movs	r5, #0
 80008b2:	469a      	mov	sl, r3
 80008b4:	e738      	b.n	8000728 <__aeabi_fmul+0x38>
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d104      	bne.n	80008c4 <__aeabi_fmul+0x1d4>
 80008ba:	2302      	movs	r3, #2
 80008bc:	2608      	movs	r6, #8
 80008be:	25ff      	movs	r5, #255	; 0xff
 80008c0:	469a      	mov	sl, r3
 80008c2:	e731      	b.n	8000728 <__aeabi_fmul+0x38>
 80008c4:	2303      	movs	r3, #3
 80008c6:	260c      	movs	r6, #12
 80008c8:	25ff      	movs	r5, #255	; 0xff
 80008ca:	469a      	mov	sl, r3
 80008cc:	e72c      	b.n	8000728 <__aeabi_fmul+0x38>
 80008ce:	4648      	mov	r0, r9
 80008d0:	f000 fa9e 	bl	8000e10 <__clzsi2>
 80008d4:	464a      	mov	r2, r9
 80008d6:	1f43      	subs	r3, r0, #5
 80008d8:	2576      	movs	r5, #118	; 0x76
 80008da:	409a      	lsls	r2, r3
 80008dc:	2300      	movs	r3, #0
 80008de:	426d      	negs	r5, r5
 80008e0:	4691      	mov	r9, r2
 80008e2:	2600      	movs	r6, #0
 80008e4:	469a      	mov	sl, r3
 80008e6:	1a2d      	subs	r5, r5, r0
 80008e8:	e71e      	b.n	8000728 <__aeabi_fmul+0x38>
 80008ea:	0020      	movs	r0, r4
 80008ec:	f000 fa90 	bl	8000e10 <__clzsi2>
 80008f0:	4642      	mov	r2, r8
 80008f2:	1f43      	subs	r3, r0, #5
 80008f4:	409c      	lsls	r4, r3
 80008f6:	1a2b      	subs	r3, r5, r0
 80008f8:	3b76      	subs	r3, #118	; 0x76
 80008fa:	407a      	eors	r2, r7
 80008fc:	2000      	movs	r0, #0
 80008fe:	b2d2      	uxtb	r2, r2
 8000900:	1c5d      	adds	r5, r3, #1
 8000902:	2e0a      	cmp	r6, #10
 8000904:	dd00      	ble.n	8000908 <__aeabi_fmul+0x218>
 8000906:	e726      	b.n	8000756 <__aeabi_fmul+0x66>
 8000908:	e739      	b.n	800077e <__aeabi_fmul+0x8e>
 800090a:	2101      	movs	r1, #1
 800090c:	1acb      	subs	r3, r1, r3
 800090e:	2b1b      	cmp	r3, #27
 8000910:	dd00      	ble.n	8000914 <__aeabi_fmul+0x224>
 8000912:	e73d      	b.n	8000790 <__aeabi_fmul+0xa0>
 8000914:	359e      	adds	r5, #158	; 0x9e
 8000916:	0021      	movs	r1, r4
 8000918:	40ac      	lsls	r4, r5
 800091a:	40d9      	lsrs	r1, r3
 800091c:	1e63      	subs	r3, r4, #1
 800091e:	419c      	sbcs	r4, r3
 8000920:	4321      	orrs	r1, r4
 8000922:	074b      	lsls	r3, r1, #29
 8000924:	d004      	beq.n	8000930 <__aeabi_fmul+0x240>
 8000926:	230f      	movs	r3, #15
 8000928:	400b      	ands	r3, r1
 800092a:	2b04      	cmp	r3, #4
 800092c:	d000      	beq.n	8000930 <__aeabi_fmul+0x240>
 800092e:	3104      	adds	r1, #4
 8000930:	014b      	lsls	r3, r1, #5
 8000932:	d504      	bpl.n	800093e <__aeabi_fmul+0x24e>
 8000934:	2001      	movs	r0, #1
 8000936:	2100      	movs	r1, #0
 8000938:	e72c      	b.n	8000794 <__aeabi_fmul+0xa4>
 800093a:	001d      	movs	r5, r3
 800093c:	e78f      	b.n	800085e <__aeabi_fmul+0x16e>
 800093e:	0189      	lsls	r1, r1, #6
 8000940:	2000      	movs	r0, #0
 8000942:	0a49      	lsrs	r1, r1, #9
 8000944:	e726      	b.n	8000794 <__aeabi_fmul+0xa4>
 8000946:	2302      	movs	r3, #2
 8000948:	2e0f      	cmp	r6, #15
 800094a:	d10c      	bne.n	8000966 <__aeabi_fmul+0x276>
 800094c:	2180      	movs	r1, #128	; 0x80
 800094e:	464b      	mov	r3, r9
 8000950:	03c9      	lsls	r1, r1, #15
 8000952:	420b      	tst	r3, r1
 8000954:	d00d      	beq.n	8000972 <__aeabi_fmul+0x282>
 8000956:	420c      	tst	r4, r1
 8000958:	d10b      	bne.n	8000972 <__aeabi_fmul+0x282>
 800095a:	4321      	orrs	r1, r4
 800095c:	0249      	lsls	r1, r1, #9
 800095e:	003a      	movs	r2, r7
 8000960:	20ff      	movs	r0, #255	; 0xff
 8000962:	0a49      	lsrs	r1, r1, #9
 8000964:	e716      	b.n	8000794 <__aeabi_fmul+0xa4>
 8000966:	2e0b      	cmp	r6, #11
 8000968:	d000      	beq.n	800096c <__aeabi_fmul+0x27c>
 800096a:	e6f7      	b.n	800075c <__aeabi_fmul+0x6c>
 800096c:	46a1      	mov	r9, r4
 800096e:	469a      	mov	sl, r3
 8000970:	e736      	b.n	80007e0 <__aeabi_fmul+0xf0>
 8000972:	2180      	movs	r1, #128	; 0x80
 8000974:	464b      	mov	r3, r9
 8000976:	03c9      	lsls	r1, r1, #15
 8000978:	4319      	orrs	r1, r3
 800097a:	0249      	lsls	r1, r1, #9
 800097c:	4642      	mov	r2, r8
 800097e:	20ff      	movs	r0, #255	; 0xff
 8000980:	0a49      	lsrs	r1, r1, #9
 8000982:	e707      	b.n	8000794 <__aeabi_fmul+0xa4>
 8000984:	2303      	movs	r3, #3
 8000986:	e7df      	b.n	8000948 <__aeabi_fmul+0x258>
 8000988:	f7ffffff 	.word	0xf7ffffff

0800098c <__aeabi_fsub>:
 800098c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800098e:	46c6      	mov	lr, r8
 8000990:	0243      	lsls	r3, r0, #9
 8000992:	0a5b      	lsrs	r3, r3, #9
 8000994:	0045      	lsls	r5, r0, #1
 8000996:	00da      	lsls	r2, r3, #3
 8000998:	0fc4      	lsrs	r4, r0, #31
 800099a:	0248      	lsls	r0, r1, #9
 800099c:	004f      	lsls	r7, r1, #1
 800099e:	4694      	mov	ip, r2
 80009a0:	0a42      	lsrs	r2, r0, #9
 80009a2:	001e      	movs	r6, r3
 80009a4:	4690      	mov	r8, r2
 80009a6:	b500      	push	{lr}
 80009a8:	0e2d      	lsrs	r5, r5, #24
 80009aa:	0e3f      	lsrs	r7, r7, #24
 80009ac:	0fc9      	lsrs	r1, r1, #31
 80009ae:	0980      	lsrs	r0, r0, #6
 80009b0:	2fff      	cmp	r7, #255	; 0xff
 80009b2:	d059      	beq.n	8000a68 <__aeabi_fsub+0xdc>
 80009b4:	2201      	movs	r2, #1
 80009b6:	4051      	eors	r1, r2
 80009b8:	428c      	cmp	r4, r1
 80009ba:	d039      	beq.n	8000a30 <__aeabi_fsub+0xa4>
 80009bc:	1bea      	subs	r2, r5, r7
 80009be:	2a00      	cmp	r2, #0
 80009c0:	dd58      	ble.n	8000a74 <__aeabi_fsub+0xe8>
 80009c2:	2f00      	cmp	r7, #0
 80009c4:	d068      	beq.n	8000a98 <__aeabi_fsub+0x10c>
 80009c6:	2dff      	cmp	r5, #255	; 0xff
 80009c8:	d100      	bne.n	80009cc <__aeabi_fsub+0x40>
 80009ca:	e0d1      	b.n	8000b70 <__aeabi_fsub+0x1e4>
 80009cc:	2380      	movs	r3, #128	; 0x80
 80009ce:	04db      	lsls	r3, r3, #19
 80009d0:	4318      	orrs	r0, r3
 80009d2:	2a1b      	cmp	r2, #27
 80009d4:	dc00      	bgt.n	80009d8 <__aeabi_fsub+0x4c>
 80009d6:	e0e3      	b.n	8000ba0 <__aeabi_fsub+0x214>
 80009d8:	2301      	movs	r3, #1
 80009da:	4662      	mov	r2, ip
 80009dc:	1ad3      	subs	r3, r2, r3
 80009de:	015a      	lsls	r2, r3, #5
 80009e0:	d400      	bmi.n	80009e4 <__aeabi_fsub+0x58>
 80009e2:	e0ac      	b.n	8000b3e <__aeabi_fsub+0x1b2>
 80009e4:	019b      	lsls	r3, r3, #6
 80009e6:	099e      	lsrs	r6, r3, #6
 80009e8:	0030      	movs	r0, r6
 80009ea:	f000 fa11 	bl	8000e10 <__clzsi2>
 80009ee:	0033      	movs	r3, r6
 80009f0:	3805      	subs	r0, #5
 80009f2:	4083      	lsls	r3, r0
 80009f4:	4285      	cmp	r5, r0
 80009f6:	dc00      	bgt.n	80009fa <__aeabi_fsub+0x6e>
 80009f8:	e0c6      	b.n	8000b88 <__aeabi_fsub+0x1fc>
 80009fa:	4ab2      	ldr	r2, [pc, #712]	; (8000cc4 <__aeabi_fsub+0x338>)
 80009fc:	1a2d      	subs	r5, r5, r0
 80009fe:	4013      	ands	r3, r2
 8000a00:	075a      	lsls	r2, r3, #29
 8000a02:	d004      	beq.n	8000a0e <__aeabi_fsub+0x82>
 8000a04:	220f      	movs	r2, #15
 8000a06:	401a      	ands	r2, r3
 8000a08:	2a04      	cmp	r2, #4
 8000a0a:	d000      	beq.n	8000a0e <__aeabi_fsub+0x82>
 8000a0c:	3304      	adds	r3, #4
 8000a0e:	015a      	lsls	r2, r3, #5
 8000a10:	d400      	bmi.n	8000a14 <__aeabi_fsub+0x88>
 8000a12:	e097      	b.n	8000b44 <__aeabi_fsub+0x1b8>
 8000a14:	1c6a      	adds	r2, r5, #1
 8000a16:	2dfe      	cmp	r5, #254	; 0xfe
 8000a18:	d100      	bne.n	8000a1c <__aeabi_fsub+0x90>
 8000a1a:	e084      	b.n	8000b26 <__aeabi_fsub+0x19a>
 8000a1c:	019b      	lsls	r3, r3, #6
 8000a1e:	0a5e      	lsrs	r6, r3, #9
 8000a20:	b2d2      	uxtb	r2, r2
 8000a22:	05d0      	lsls	r0, r2, #23
 8000a24:	4330      	orrs	r0, r6
 8000a26:	07e4      	lsls	r4, r4, #31
 8000a28:	4320      	orrs	r0, r4
 8000a2a:	bc80      	pop	{r7}
 8000a2c:	46b8      	mov	r8, r7
 8000a2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a30:	1bea      	subs	r2, r5, r7
 8000a32:	2a00      	cmp	r2, #0
 8000a34:	dd41      	ble.n	8000aba <__aeabi_fsub+0x12e>
 8000a36:	2f00      	cmp	r7, #0
 8000a38:	d06b      	beq.n	8000b12 <__aeabi_fsub+0x186>
 8000a3a:	2dff      	cmp	r5, #255	; 0xff
 8000a3c:	d100      	bne.n	8000a40 <__aeabi_fsub+0xb4>
 8000a3e:	e097      	b.n	8000b70 <__aeabi_fsub+0x1e4>
 8000a40:	2380      	movs	r3, #128	; 0x80
 8000a42:	04db      	lsls	r3, r3, #19
 8000a44:	4318      	orrs	r0, r3
 8000a46:	2a1b      	cmp	r2, #27
 8000a48:	dc00      	bgt.n	8000a4c <__aeabi_fsub+0xc0>
 8000a4a:	e0cc      	b.n	8000be6 <__aeabi_fsub+0x25a>
 8000a4c:	2301      	movs	r3, #1
 8000a4e:	4463      	add	r3, ip
 8000a50:	015a      	lsls	r2, r3, #5
 8000a52:	d574      	bpl.n	8000b3e <__aeabi_fsub+0x1b2>
 8000a54:	3501      	adds	r5, #1
 8000a56:	2dff      	cmp	r5, #255	; 0xff
 8000a58:	d065      	beq.n	8000b26 <__aeabi_fsub+0x19a>
 8000a5a:	2201      	movs	r2, #1
 8000a5c:	499a      	ldr	r1, [pc, #616]	; (8000cc8 <__aeabi_fsub+0x33c>)
 8000a5e:	401a      	ands	r2, r3
 8000a60:	085b      	lsrs	r3, r3, #1
 8000a62:	400b      	ands	r3, r1
 8000a64:	4313      	orrs	r3, r2
 8000a66:	e7cb      	b.n	8000a00 <__aeabi_fsub+0x74>
 8000a68:	2800      	cmp	r0, #0
 8000a6a:	d01f      	beq.n	8000aac <__aeabi_fsub+0x120>
 8000a6c:	428c      	cmp	r4, r1
 8000a6e:	d022      	beq.n	8000ab6 <__aeabi_fsub+0x12a>
 8000a70:	002a      	movs	r2, r5
 8000a72:	3aff      	subs	r2, #255	; 0xff
 8000a74:	2a00      	cmp	r2, #0
 8000a76:	d035      	beq.n	8000ae4 <__aeabi_fsub+0x158>
 8000a78:	1b7a      	subs	r2, r7, r5
 8000a7a:	2d00      	cmp	r5, #0
 8000a7c:	d000      	beq.n	8000a80 <__aeabi_fsub+0xf4>
 8000a7e:	e099      	b.n	8000bb4 <__aeabi_fsub+0x228>
 8000a80:	4663      	mov	r3, ip
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d100      	bne.n	8000a88 <__aeabi_fsub+0xfc>
 8000a86:	e0dd      	b.n	8000c44 <__aeabi_fsub+0x2b8>
 8000a88:	1e53      	subs	r3, r2, #1
 8000a8a:	2a01      	cmp	r2, #1
 8000a8c:	d100      	bne.n	8000a90 <__aeabi_fsub+0x104>
 8000a8e:	e105      	b.n	8000c9c <__aeabi_fsub+0x310>
 8000a90:	2aff      	cmp	r2, #255	; 0xff
 8000a92:	d06b      	beq.n	8000b6c <__aeabi_fsub+0x1e0>
 8000a94:	001a      	movs	r2, r3
 8000a96:	e094      	b.n	8000bc2 <__aeabi_fsub+0x236>
 8000a98:	2800      	cmp	r0, #0
 8000a9a:	d073      	beq.n	8000b84 <__aeabi_fsub+0x1f8>
 8000a9c:	1e51      	subs	r1, r2, #1
 8000a9e:	2a01      	cmp	r2, #1
 8000aa0:	d100      	bne.n	8000aa4 <__aeabi_fsub+0x118>
 8000aa2:	e0df      	b.n	8000c64 <__aeabi_fsub+0x2d8>
 8000aa4:	2aff      	cmp	r2, #255	; 0xff
 8000aa6:	d063      	beq.n	8000b70 <__aeabi_fsub+0x1e4>
 8000aa8:	000a      	movs	r2, r1
 8000aaa:	e792      	b.n	80009d2 <__aeabi_fsub+0x46>
 8000aac:	2201      	movs	r2, #1
 8000aae:	4051      	eors	r1, r2
 8000ab0:	42a1      	cmp	r1, r4
 8000ab2:	d000      	beq.n	8000ab6 <__aeabi_fsub+0x12a>
 8000ab4:	e782      	b.n	80009bc <__aeabi_fsub+0x30>
 8000ab6:	002a      	movs	r2, r5
 8000ab8:	3aff      	subs	r2, #255	; 0xff
 8000aba:	2a00      	cmp	r2, #0
 8000abc:	d036      	beq.n	8000b2c <__aeabi_fsub+0x1a0>
 8000abe:	1b7a      	subs	r2, r7, r5
 8000ac0:	2d00      	cmp	r5, #0
 8000ac2:	d100      	bne.n	8000ac6 <__aeabi_fsub+0x13a>
 8000ac4:	e0aa      	b.n	8000c1c <__aeabi_fsub+0x290>
 8000ac6:	2fff      	cmp	r7, #255	; 0xff
 8000ac8:	d100      	bne.n	8000acc <__aeabi_fsub+0x140>
 8000aca:	e0da      	b.n	8000c82 <__aeabi_fsub+0x2f6>
 8000acc:	2380      	movs	r3, #128	; 0x80
 8000ace:	4661      	mov	r1, ip
 8000ad0:	04db      	lsls	r3, r3, #19
 8000ad2:	4319      	orrs	r1, r3
 8000ad4:	468c      	mov	ip, r1
 8000ad6:	2a1b      	cmp	r2, #27
 8000ad8:	dc00      	bgt.n	8000adc <__aeabi_fsub+0x150>
 8000ada:	e0d4      	b.n	8000c86 <__aeabi_fsub+0x2fa>
 8000adc:	2301      	movs	r3, #1
 8000ade:	003d      	movs	r5, r7
 8000ae0:	181b      	adds	r3, r3, r0
 8000ae2:	e7b5      	b.n	8000a50 <__aeabi_fsub+0xc4>
 8000ae4:	27fe      	movs	r7, #254	; 0xfe
 8000ae6:	1c6a      	adds	r2, r5, #1
 8000ae8:	4217      	tst	r7, r2
 8000aea:	d171      	bne.n	8000bd0 <__aeabi_fsub+0x244>
 8000aec:	2d00      	cmp	r5, #0
 8000aee:	d000      	beq.n	8000af2 <__aeabi_fsub+0x166>
 8000af0:	e09e      	b.n	8000c30 <__aeabi_fsub+0x2a4>
 8000af2:	4663      	mov	r3, ip
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d100      	bne.n	8000afa <__aeabi_fsub+0x16e>
 8000af8:	e0d5      	b.n	8000ca6 <__aeabi_fsub+0x31a>
 8000afa:	2200      	movs	r2, #0
 8000afc:	2800      	cmp	r0, #0
 8000afe:	d100      	bne.n	8000b02 <__aeabi_fsub+0x176>
 8000b00:	e78f      	b.n	8000a22 <__aeabi_fsub+0x96>
 8000b02:	1a1b      	subs	r3, r3, r0
 8000b04:	015e      	lsls	r6, r3, #5
 8000b06:	d400      	bmi.n	8000b0a <__aeabi_fsub+0x17e>
 8000b08:	e0d6      	b.n	8000cb8 <__aeabi_fsub+0x32c>
 8000b0a:	4663      	mov	r3, ip
 8000b0c:	000c      	movs	r4, r1
 8000b0e:	1ac3      	subs	r3, r0, r3
 8000b10:	e776      	b.n	8000a00 <__aeabi_fsub+0x74>
 8000b12:	2800      	cmp	r0, #0
 8000b14:	d036      	beq.n	8000b84 <__aeabi_fsub+0x1f8>
 8000b16:	1e51      	subs	r1, r2, #1
 8000b18:	2a01      	cmp	r2, #1
 8000b1a:	d100      	bne.n	8000b1e <__aeabi_fsub+0x192>
 8000b1c:	e09a      	b.n	8000c54 <__aeabi_fsub+0x2c8>
 8000b1e:	2aff      	cmp	r2, #255	; 0xff
 8000b20:	d026      	beq.n	8000b70 <__aeabi_fsub+0x1e4>
 8000b22:	000a      	movs	r2, r1
 8000b24:	e78f      	b.n	8000a46 <__aeabi_fsub+0xba>
 8000b26:	22ff      	movs	r2, #255	; 0xff
 8000b28:	2600      	movs	r6, #0
 8000b2a:	e77a      	b.n	8000a22 <__aeabi_fsub+0x96>
 8000b2c:	27fe      	movs	r7, #254	; 0xfe
 8000b2e:	1c6a      	adds	r2, r5, #1
 8000b30:	4217      	tst	r7, r2
 8000b32:	d062      	beq.n	8000bfa <__aeabi_fsub+0x26e>
 8000b34:	2aff      	cmp	r2, #255	; 0xff
 8000b36:	d0f6      	beq.n	8000b26 <__aeabi_fsub+0x19a>
 8000b38:	0015      	movs	r5, r2
 8000b3a:	4460      	add	r0, ip
 8000b3c:	0843      	lsrs	r3, r0, #1
 8000b3e:	075a      	lsls	r2, r3, #29
 8000b40:	d000      	beq.n	8000b44 <__aeabi_fsub+0x1b8>
 8000b42:	e75f      	b.n	8000a04 <__aeabi_fsub+0x78>
 8000b44:	08db      	lsrs	r3, r3, #3
 8000b46:	2dff      	cmp	r5, #255	; 0xff
 8000b48:	d012      	beq.n	8000b70 <__aeabi_fsub+0x1e4>
 8000b4a:	025b      	lsls	r3, r3, #9
 8000b4c:	0a5e      	lsrs	r6, r3, #9
 8000b4e:	b2ea      	uxtb	r2, r5
 8000b50:	e767      	b.n	8000a22 <__aeabi_fsub+0x96>
 8000b52:	4662      	mov	r2, ip
 8000b54:	2a00      	cmp	r2, #0
 8000b56:	d100      	bne.n	8000b5a <__aeabi_fsub+0x1ce>
 8000b58:	e093      	b.n	8000c82 <__aeabi_fsub+0x2f6>
 8000b5a:	2800      	cmp	r0, #0
 8000b5c:	d008      	beq.n	8000b70 <__aeabi_fsub+0x1e4>
 8000b5e:	2280      	movs	r2, #128	; 0x80
 8000b60:	03d2      	lsls	r2, r2, #15
 8000b62:	4213      	tst	r3, r2
 8000b64:	d004      	beq.n	8000b70 <__aeabi_fsub+0x1e4>
 8000b66:	4640      	mov	r0, r8
 8000b68:	4210      	tst	r0, r2
 8000b6a:	d101      	bne.n	8000b70 <__aeabi_fsub+0x1e4>
 8000b6c:	000c      	movs	r4, r1
 8000b6e:	4643      	mov	r3, r8
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d0d8      	beq.n	8000b26 <__aeabi_fsub+0x19a>
 8000b74:	2680      	movs	r6, #128	; 0x80
 8000b76:	03f6      	lsls	r6, r6, #15
 8000b78:	431e      	orrs	r6, r3
 8000b7a:	0276      	lsls	r6, r6, #9
 8000b7c:	22ff      	movs	r2, #255	; 0xff
 8000b7e:	0a76      	lsrs	r6, r6, #9
 8000b80:	e74f      	b.n	8000a22 <__aeabi_fsub+0x96>
 8000b82:	4643      	mov	r3, r8
 8000b84:	0015      	movs	r5, r2
 8000b86:	e7de      	b.n	8000b46 <__aeabi_fsub+0x1ba>
 8000b88:	2220      	movs	r2, #32
 8000b8a:	1b40      	subs	r0, r0, r5
 8000b8c:	3001      	adds	r0, #1
 8000b8e:	1a12      	subs	r2, r2, r0
 8000b90:	0019      	movs	r1, r3
 8000b92:	4093      	lsls	r3, r2
 8000b94:	40c1      	lsrs	r1, r0
 8000b96:	1e5a      	subs	r2, r3, #1
 8000b98:	4193      	sbcs	r3, r2
 8000b9a:	2500      	movs	r5, #0
 8000b9c:	430b      	orrs	r3, r1
 8000b9e:	e72f      	b.n	8000a00 <__aeabi_fsub+0x74>
 8000ba0:	2320      	movs	r3, #32
 8000ba2:	1a9b      	subs	r3, r3, r2
 8000ba4:	0001      	movs	r1, r0
 8000ba6:	4098      	lsls	r0, r3
 8000ba8:	0003      	movs	r3, r0
 8000baa:	40d1      	lsrs	r1, r2
 8000bac:	1e5a      	subs	r2, r3, #1
 8000bae:	4193      	sbcs	r3, r2
 8000bb0:	430b      	orrs	r3, r1
 8000bb2:	e712      	b.n	80009da <__aeabi_fsub+0x4e>
 8000bb4:	2fff      	cmp	r7, #255	; 0xff
 8000bb6:	d0d9      	beq.n	8000b6c <__aeabi_fsub+0x1e0>
 8000bb8:	2380      	movs	r3, #128	; 0x80
 8000bba:	4664      	mov	r4, ip
 8000bbc:	04db      	lsls	r3, r3, #19
 8000bbe:	431c      	orrs	r4, r3
 8000bc0:	46a4      	mov	ip, r4
 8000bc2:	2a1b      	cmp	r2, #27
 8000bc4:	dd52      	ble.n	8000c6c <__aeabi_fsub+0x2e0>
 8000bc6:	2301      	movs	r3, #1
 8000bc8:	000c      	movs	r4, r1
 8000bca:	003d      	movs	r5, r7
 8000bcc:	1ac3      	subs	r3, r0, r3
 8000bce:	e706      	b.n	80009de <__aeabi_fsub+0x52>
 8000bd0:	4663      	mov	r3, ip
 8000bd2:	1a1e      	subs	r6, r3, r0
 8000bd4:	0173      	lsls	r3, r6, #5
 8000bd6:	d439      	bmi.n	8000c4c <__aeabi_fsub+0x2c0>
 8000bd8:	2e00      	cmp	r6, #0
 8000bda:	d000      	beq.n	8000bde <__aeabi_fsub+0x252>
 8000bdc:	e704      	b.n	80009e8 <__aeabi_fsub+0x5c>
 8000bde:	2400      	movs	r4, #0
 8000be0:	2200      	movs	r2, #0
 8000be2:	2600      	movs	r6, #0
 8000be4:	e71d      	b.n	8000a22 <__aeabi_fsub+0x96>
 8000be6:	2320      	movs	r3, #32
 8000be8:	1a9b      	subs	r3, r3, r2
 8000bea:	0001      	movs	r1, r0
 8000bec:	4098      	lsls	r0, r3
 8000bee:	0003      	movs	r3, r0
 8000bf0:	40d1      	lsrs	r1, r2
 8000bf2:	1e5a      	subs	r2, r3, #1
 8000bf4:	4193      	sbcs	r3, r2
 8000bf6:	430b      	orrs	r3, r1
 8000bf8:	e729      	b.n	8000a4e <__aeabi_fsub+0xc2>
 8000bfa:	2d00      	cmp	r5, #0
 8000bfc:	d1a9      	bne.n	8000b52 <__aeabi_fsub+0x1c6>
 8000bfe:	4663      	mov	r3, ip
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d056      	beq.n	8000cb2 <__aeabi_fsub+0x326>
 8000c04:	2200      	movs	r2, #0
 8000c06:	2800      	cmp	r0, #0
 8000c08:	d100      	bne.n	8000c0c <__aeabi_fsub+0x280>
 8000c0a:	e70a      	b.n	8000a22 <__aeabi_fsub+0x96>
 8000c0c:	0003      	movs	r3, r0
 8000c0e:	4463      	add	r3, ip
 8000c10:	015a      	lsls	r2, r3, #5
 8000c12:	d594      	bpl.n	8000b3e <__aeabi_fsub+0x1b2>
 8000c14:	4a2b      	ldr	r2, [pc, #172]	; (8000cc4 <__aeabi_fsub+0x338>)
 8000c16:	3501      	adds	r5, #1
 8000c18:	4013      	ands	r3, r2
 8000c1a:	e790      	b.n	8000b3e <__aeabi_fsub+0x1b2>
 8000c1c:	4663      	mov	r3, ip
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d0af      	beq.n	8000b82 <__aeabi_fsub+0x1f6>
 8000c22:	1e53      	subs	r3, r2, #1
 8000c24:	2a01      	cmp	r2, #1
 8000c26:	d015      	beq.n	8000c54 <__aeabi_fsub+0x2c8>
 8000c28:	2aff      	cmp	r2, #255	; 0xff
 8000c2a:	d02a      	beq.n	8000c82 <__aeabi_fsub+0x2f6>
 8000c2c:	001a      	movs	r2, r3
 8000c2e:	e752      	b.n	8000ad6 <__aeabi_fsub+0x14a>
 8000c30:	4662      	mov	r2, ip
 8000c32:	2a00      	cmp	r2, #0
 8000c34:	d191      	bne.n	8000b5a <__aeabi_fsub+0x1ce>
 8000c36:	2800      	cmp	r0, #0
 8000c38:	d198      	bne.n	8000b6c <__aeabi_fsub+0x1e0>
 8000c3a:	2680      	movs	r6, #128	; 0x80
 8000c3c:	2400      	movs	r4, #0
 8000c3e:	22ff      	movs	r2, #255	; 0xff
 8000c40:	03f6      	lsls	r6, r6, #15
 8000c42:	e6ee      	b.n	8000a22 <__aeabi_fsub+0x96>
 8000c44:	000c      	movs	r4, r1
 8000c46:	4643      	mov	r3, r8
 8000c48:	0015      	movs	r5, r2
 8000c4a:	e77c      	b.n	8000b46 <__aeabi_fsub+0x1ba>
 8000c4c:	4663      	mov	r3, ip
 8000c4e:	000c      	movs	r4, r1
 8000c50:	1ac6      	subs	r6, r0, r3
 8000c52:	e6c9      	b.n	80009e8 <__aeabi_fsub+0x5c>
 8000c54:	0003      	movs	r3, r0
 8000c56:	4463      	add	r3, ip
 8000c58:	2501      	movs	r5, #1
 8000c5a:	015a      	lsls	r2, r3, #5
 8000c5c:	d400      	bmi.n	8000c60 <__aeabi_fsub+0x2d4>
 8000c5e:	e76e      	b.n	8000b3e <__aeabi_fsub+0x1b2>
 8000c60:	2502      	movs	r5, #2
 8000c62:	e6fa      	b.n	8000a5a <__aeabi_fsub+0xce>
 8000c64:	4663      	mov	r3, ip
 8000c66:	2501      	movs	r5, #1
 8000c68:	1a1b      	subs	r3, r3, r0
 8000c6a:	e6b8      	b.n	80009de <__aeabi_fsub+0x52>
 8000c6c:	4664      	mov	r4, ip
 8000c6e:	2320      	movs	r3, #32
 8000c70:	40d4      	lsrs	r4, r2
 8000c72:	1a9b      	subs	r3, r3, r2
 8000c74:	4662      	mov	r2, ip
 8000c76:	409a      	lsls	r2, r3
 8000c78:	0013      	movs	r3, r2
 8000c7a:	1e5a      	subs	r2, r3, #1
 8000c7c:	4193      	sbcs	r3, r2
 8000c7e:	4323      	orrs	r3, r4
 8000c80:	e7a2      	b.n	8000bc8 <__aeabi_fsub+0x23c>
 8000c82:	4643      	mov	r3, r8
 8000c84:	e774      	b.n	8000b70 <__aeabi_fsub+0x1e4>
 8000c86:	4661      	mov	r1, ip
 8000c88:	2320      	movs	r3, #32
 8000c8a:	40d1      	lsrs	r1, r2
 8000c8c:	1a9b      	subs	r3, r3, r2
 8000c8e:	4662      	mov	r2, ip
 8000c90:	409a      	lsls	r2, r3
 8000c92:	0013      	movs	r3, r2
 8000c94:	1e5a      	subs	r2, r3, #1
 8000c96:	4193      	sbcs	r3, r2
 8000c98:	430b      	orrs	r3, r1
 8000c9a:	e720      	b.n	8000ade <__aeabi_fsub+0x152>
 8000c9c:	4663      	mov	r3, ip
 8000c9e:	000c      	movs	r4, r1
 8000ca0:	2501      	movs	r5, #1
 8000ca2:	1ac3      	subs	r3, r0, r3
 8000ca4:	e69b      	b.n	80009de <__aeabi_fsub+0x52>
 8000ca6:	2800      	cmp	r0, #0
 8000ca8:	d099      	beq.n	8000bde <__aeabi_fsub+0x252>
 8000caa:	000c      	movs	r4, r1
 8000cac:	4646      	mov	r6, r8
 8000cae:	2200      	movs	r2, #0
 8000cb0:	e6b7      	b.n	8000a22 <__aeabi_fsub+0x96>
 8000cb2:	4646      	mov	r6, r8
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	e6b4      	b.n	8000a22 <__aeabi_fsub+0x96>
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d000      	beq.n	8000cbe <__aeabi_fsub+0x332>
 8000cbc:	e73f      	b.n	8000b3e <__aeabi_fsub+0x1b2>
 8000cbe:	2400      	movs	r4, #0
 8000cc0:	2600      	movs	r6, #0
 8000cc2:	e6ae      	b.n	8000a22 <__aeabi_fsub+0x96>
 8000cc4:	fbffffff 	.word	0xfbffffff
 8000cc8:	7dffffff 	.word	0x7dffffff

08000ccc <__aeabi_f2iz>:
 8000ccc:	0241      	lsls	r1, r0, #9
 8000cce:	0042      	lsls	r2, r0, #1
 8000cd0:	0fc3      	lsrs	r3, r0, #31
 8000cd2:	0a49      	lsrs	r1, r1, #9
 8000cd4:	2000      	movs	r0, #0
 8000cd6:	0e12      	lsrs	r2, r2, #24
 8000cd8:	2a7e      	cmp	r2, #126	; 0x7e
 8000cda:	dd03      	ble.n	8000ce4 <__aeabi_f2iz+0x18>
 8000cdc:	2a9d      	cmp	r2, #157	; 0x9d
 8000cde:	dd02      	ble.n	8000ce6 <__aeabi_f2iz+0x1a>
 8000ce0:	4a09      	ldr	r2, [pc, #36]	; (8000d08 <__aeabi_f2iz+0x3c>)
 8000ce2:	1898      	adds	r0, r3, r2
 8000ce4:	4770      	bx	lr
 8000ce6:	2080      	movs	r0, #128	; 0x80
 8000ce8:	0400      	lsls	r0, r0, #16
 8000cea:	4301      	orrs	r1, r0
 8000cec:	2a95      	cmp	r2, #149	; 0x95
 8000cee:	dc07      	bgt.n	8000d00 <__aeabi_f2iz+0x34>
 8000cf0:	2096      	movs	r0, #150	; 0x96
 8000cf2:	1a82      	subs	r2, r0, r2
 8000cf4:	40d1      	lsrs	r1, r2
 8000cf6:	4248      	negs	r0, r1
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d1f3      	bne.n	8000ce4 <__aeabi_f2iz+0x18>
 8000cfc:	0008      	movs	r0, r1
 8000cfe:	e7f1      	b.n	8000ce4 <__aeabi_f2iz+0x18>
 8000d00:	3a96      	subs	r2, #150	; 0x96
 8000d02:	4091      	lsls	r1, r2
 8000d04:	e7f7      	b.n	8000cf6 <__aeabi_f2iz+0x2a>
 8000d06:	46c0      	nop			; (mov r8, r8)
 8000d08:	7fffffff 	.word	0x7fffffff

08000d0c <__aeabi_ui2f>:
 8000d0c:	b570      	push	{r4, r5, r6, lr}
 8000d0e:	1e04      	subs	r4, r0, #0
 8000d10:	d00e      	beq.n	8000d30 <__aeabi_ui2f+0x24>
 8000d12:	f000 f87d 	bl	8000e10 <__clzsi2>
 8000d16:	239e      	movs	r3, #158	; 0x9e
 8000d18:	0001      	movs	r1, r0
 8000d1a:	1a1b      	subs	r3, r3, r0
 8000d1c:	2b96      	cmp	r3, #150	; 0x96
 8000d1e:	dc0c      	bgt.n	8000d3a <__aeabi_ui2f+0x2e>
 8000d20:	2808      	cmp	r0, #8
 8000d22:	d02c      	beq.n	8000d7e <__aeabi_ui2f+0x72>
 8000d24:	3908      	subs	r1, #8
 8000d26:	408c      	lsls	r4, r1
 8000d28:	0264      	lsls	r4, r4, #9
 8000d2a:	0a64      	lsrs	r4, r4, #9
 8000d2c:	b2d8      	uxtb	r0, r3
 8000d2e:	e001      	b.n	8000d34 <__aeabi_ui2f+0x28>
 8000d30:	2000      	movs	r0, #0
 8000d32:	2400      	movs	r4, #0
 8000d34:	05c0      	lsls	r0, r0, #23
 8000d36:	4320      	orrs	r0, r4
 8000d38:	bd70      	pop	{r4, r5, r6, pc}
 8000d3a:	2b99      	cmp	r3, #153	; 0x99
 8000d3c:	dd0a      	ble.n	8000d54 <__aeabi_ui2f+0x48>
 8000d3e:	0002      	movs	r2, r0
 8000d40:	0020      	movs	r0, r4
 8000d42:	321b      	adds	r2, #27
 8000d44:	4090      	lsls	r0, r2
 8000d46:	0002      	movs	r2, r0
 8000d48:	1e50      	subs	r0, r2, #1
 8000d4a:	4182      	sbcs	r2, r0
 8000d4c:	2005      	movs	r0, #5
 8000d4e:	1a40      	subs	r0, r0, r1
 8000d50:	40c4      	lsrs	r4, r0
 8000d52:	4314      	orrs	r4, r2
 8000d54:	2905      	cmp	r1, #5
 8000d56:	dc16      	bgt.n	8000d86 <__aeabi_ui2f+0x7a>
 8000d58:	0022      	movs	r2, r4
 8000d5a:	480f      	ldr	r0, [pc, #60]	; (8000d98 <__aeabi_ui2f+0x8c>)
 8000d5c:	4002      	ands	r2, r0
 8000d5e:	0765      	lsls	r5, r4, #29
 8000d60:	d009      	beq.n	8000d76 <__aeabi_ui2f+0x6a>
 8000d62:	250f      	movs	r5, #15
 8000d64:	402c      	ands	r4, r5
 8000d66:	2c04      	cmp	r4, #4
 8000d68:	d005      	beq.n	8000d76 <__aeabi_ui2f+0x6a>
 8000d6a:	3204      	adds	r2, #4
 8000d6c:	0154      	lsls	r4, r2, #5
 8000d6e:	d502      	bpl.n	8000d76 <__aeabi_ui2f+0x6a>
 8000d70:	239f      	movs	r3, #159	; 0x9f
 8000d72:	4002      	ands	r2, r0
 8000d74:	1a5b      	subs	r3, r3, r1
 8000d76:	0192      	lsls	r2, r2, #6
 8000d78:	0a54      	lsrs	r4, r2, #9
 8000d7a:	b2d8      	uxtb	r0, r3
 8000d7c:	e7da      	b.n	8000d34 <__aeabi_ui2f+0x28>
 8000d7e:	0264      	lsls	r4, r4, #9
 8000d80:	2096      	movs	r0, #150	; 0x96
 8000d82:	0a64      	lsrs	r4, r4, #9
 8000d84:	e7d6      	b.n	8000d34 <__aeabi_ui2f+0x28>
 8000d86:	1f4a      	subs	r2, r1, #5
 8000d88:	4094      	lsls	r4, r2
 8000d8a:	0022      	movs	r2, r4
 8000d8c:	4802      	ldr	r0, [pc, #8]	; (8000d98 <__aeabi_ui2f+0x8c>)
 8000d8e:	4002      	ands	r2, r0
 8000d90:	0765      	lsls	r5, r4, #29
 8000d92:	d0f0      	beq.n	8000d76 <__aeabi_ui2f+0x6a>
 8000d94:	e7e5      	b.n	8000d62 <__aeabi_ui2f+0x56>
 8000d96:	46c0      	nop			; (mov r8, r8)
 8000d98:	fbffffff 	.word	0xfbffffff

08000d9c <__aeabi_cfrcmple>:
 8000d9c:	4684      	mov	ip, r0
 8000d9e:	0008      	movs	r0, r1
 8000da0:	4661      	mov	r1, ip
 8000da2:	e7ff      	b.n	8000da4 <__aeabi_cfcmpeq>

08000da4 <__aeabi_cfcmpeq>:
 8000da4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000da6:	f000 f8c9 	bl	8000f3c <__lesf2>
 8000daa:	2800      	cmp	r0, #0
 8000dac:	d401      	bmi.n	8000db2 <__aeabi_cfcmpeq+0xe>
 8000dae:	2100      	movs	r1, #0
 8000db0:	42c8      	cmn	r0, r1
 8000db2:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000db4 <__aeabi_fcmpeq>:
 8000db4:	b510      	push	{r4, lr}
 8000db6:	f000 f855 	bl	8000e64 <__eqsf2>
 8000dba:	4240      	negs	r0, r0
 8000dbc:	3001      	adds	r0, #1
 8000dbe:	bd10      	pop	{r4, pc}

08000dc0 <__aeabi_fcmplt>:
 8000dc0:	b510      	push	{r4, lr}
 8000dc2:	f000 f8bb 	bl	8000f3c <__lesf2>
 8000dc6:	2800      	cmp	r0, #0
 8000dc8:	db01      	blt.n	8000dce <__aeabi_fcmplt+0xe>
 8000dca:	2000      	movs	r0, #0
 8000dcc:	bd10      	pop	{r4, pc}
 8000dce:	2001      	movs	r0, #1
 8000dd0:	bd10      	pop	{r4, pc}
 8000dd2:	46c0      	nop			; (mov r8, r8)

08000dd4 <__aeabi_fcmple>:
 8000dd4:	b510      	push	{r4, lr}
 8000dd6:	f000 f8b1 	bl	8000f3c <__lesf2>
 8000dda:	2800      	cmp	r0, #0
 8000ddc:	dd01      	ble.n	8000de2 <__aeabi_fcmple+0xe>
 8000dde:	2000      	movs	r0, #0
 8000de0:	bd10      	pop	{r4, pc}
 8000de2:	2001      	movs	r0, #1
 8000de4:	bd10      	pop	{r4, pc}
 8000de6:	46c0      	nop			; (mov r8, r8)

08000de8 <__aeabi_fcmpgt>:
 8000de8:	b510      	push	{r4, lr}
 8000dea:	f000 f861 	bl	8000eb0 <__gesf2>
 8000dee:	2800      	cmp	r0, #0
 8000df0:	dc01      	bgt.n	8000df6 <__aeabi_fcmpgt+0xe>
 8000df2:	2000      	movs	r0, #0
 8000df4:	bd10      	pop	{r4, pc}
 8000df6:	2001      	movs	r0, #1
 8000df8:	bd10      	pop	{r4, pc}
 8000dfa:	46c0      	nop			; (mov r8, r8)

08000dfc <__aeabi_fcmpge>:
 8000dfc:	b510      	push	{r4, lr}
 8000dfe:	f000 f857 	bl	8000eb0 <__gesf2>
 8000e02:	2800      	cmp	r0, #0
 8000e04:	da01      	bge.n	8000e0a <__aeabi_fcmpge+0xe>
 8000e06:	2000      	movs	r0, #0
 8000e08:	bd10      	pop	{r4, pc}
 8000e0a:	2001      	movs	r0, #1
 8000e0c:	bd10      	pop	{r4, pc}
 8000e0e:	46c0      	nop			; (mov r8, r8)

08000e10 <__clzsi2>:
 8000e10:	211c      	movs	r1, #28
 8000e12:	2301      	movs	r3, #1
 8000e14:	041b      	lsls	r3, r3, #16
 8000e16:	4298      	cmp	r0, r3
 8000e18:	d301      	bcc.n	8000e1e <__clzsi2+0xe>
 8000e1a:	0c00      	lsrs	r0, r0, #16
 8000e1c:	3910      	subs	r1, #16
 8000e1e:	0a1b      	lsrs	r3, r3, #8
 8000e20:	4298      	cmp	r0, r3
 8000e22:	d301      	bcc.n	8000e28 <__clzsi2+0x18>
 8000e24:	0a00      	lsrs	r0, r0, #8
 8000e26:	3908      	subs	r1, #8
 8000e28:	091b      	lsrs	r3, r3, #4
 8000e2a:	4298      	cmp	r0, r3
 8000e2c:	d301      	bcc.n	8000e32 <__clzsi2+0x22>
 8000e2e:	0900      	lsrs	r0, r0, #4
 8000e30:	3904      	subs	r1, #4
 8000e32:	a202      	add	r2, pc, #8	; (adr r2, 8000e3c <__clzsi2+0x2c>)
 8000e34:	5c10      	ldrb	r0, [r2, r0]
 8000e36:	1840      	adds	r0, r0, r1
 8000e38:	4770      	bx	lr
 8000e3a:	46c0      	nop			; (mov r8, r8)
 8000e3c:	02020304 	.word	0x02020304
 8000e40:	01010101 	.word	0x01010101
	...

08000e4c <__clzdi2>:
 8000e4c:	b510      	push	{r4, lr}
 8000e4e:	2900      	cmp	r1, #0
 8000e50:	d103      	bne.n	8000e5a <__clzdi2+0xe>
 8000e52:	f7ff ffdd 	bl	8000e10 <__clzsi2>
 8000e56:	3020      	adds	r0, #32
 8000e58:	e002      	b.n	8000e60 <__clzdi2+0x14>
 8000e5a:	0008      	movs	r0, r1
 8000e5c:	f7ff ffd8 	bl	8000e10 <__clzsi2>
 8000e60:	bd10      	pop	{r4, pc}
 8000e62:	46c0      	nop			; (mov r8, r8)

08000e64 <__eqsf2>:
 8000e64:	b570      	push	{r4, r5, r6, lr}
 8000e66:	0042      	lsls	r2, r0, #1
 8000e68:	0245      	lsls	r5, r0, #9
 8000e6a:	024e      	lsls	r6, r1, #9
 8000e6c:	004c      	lsls	r4, r1, #1
 8000e6e:	0fc3      	lsrs	r3, r0, #31
 8000e70:	0a6d      	lsrs	r5, r5, #9
 8000e72:	2001      	movs	r0, #1
 8000e74:	0e12      	lsrs	r2, r2, #24
 8000e76:	0a76      	lsrs	r6, r6, #9
 8000e78:	0e24      	lsrs	r4, r4, #24
 8000e7a:	0fc9      	lsrs	r1, r1, #31
 8000e7c:	2aff      	cmp	r2, #255	; 0xff
 8000e7e:	d006      	beq.n	8000e8e <__eqsf2+0x2a>
 8000e80:	2cff      	cmp	r4, #255	; 0xff
 8000e82:	d003      	beq.n	8000e8c <__eqsf2+0x28>
 8000e84:	42a2      	cmp	r2, r4
 8000e86:	d101      	bne.n	8000e8c <__eqsf2+0x28>
 8000e88:	42b5      	cmp	r5, r6
 8000e8a:	d006      	beq.n	8000e9a <__eqsf2+0x36>
 8000e8c:	bd70      	pop	{r4, r5, r6, pc}
 8000e8e:	2d00      	cmp	r5, #0
 8000e90:	d1fc      	bne.n	8000e8c <__eqsf2+0x28>
 8000e92:	2cff      	cmp	r4, #255	; 0xff
 8000e94:	d1fa      	bne.n	8000e8c <__eqsf2+0x28>
 8000e96:	2e00      	cmp	r6, #0
 8000e98:	d1f8      	bne.n	8000e8c <__eqsf2+0x28>
 8000e9a:	428b      	cmp	r3, r1
 8000e9c:	d006      	beq.n	8000eac <__eqsf2+0x48>
 8000e9e:	2001      	movs	r0, #1
 8000ea0:	2a00      	cmp	r2, #0
 8000ea2:	d1f3      	bne.n	8000e8c <__eqsf2+0x28>
 8000ea4:	0028      	movs	r0, r5
 8000ea6:	1e43      	subs	r3, r0, #1
 8000ea8:	4198      	sbcs	r0, r3
 8000eaa:	e7ef      	b.n	8000e8c <__eqsf2+0x28>
 8000eac:	2000      	movs	r0, #0
 8000eae:	e7ed      	b.n	8000e8c <__eqsf2+0x28>

08000eb0 <__gesf2>:
 8000eb0:	b570      	push	{r4, r5, r6, lr}
 8000eb2:	0042      	lsls	r2, r0, #1
 8000eb4:	0245      	lsls	r5, r0, #9
 8000eb6:	024e      	lsls	r6, r1, #9
 8000eb8:	004c      	lsls	r4, r1, #1
 8000eba:	0fc3      	lsrs	r3, r0, #31
 8000ebc:	0a6d      	lsrs	r5, r5, #9
 8000ebe:	0e12      	lsrs	r2, r2, #24
 8000ec0:	0a76      	lsrs	r6, r6, #9
 8000ec2:	0e24      	lsrs	r4, r4, #24
 8000ec4:	0fc8      	lsrs	r0, r1, #31
 8000ec6:	2aff      	cmp	r2, #255	; 0xff
 8000ec8:	d01b      	beq.n	8000f02 <__gesf2+0x52>
 8000eca:	2cff      	cmp	r4, #255	; 0xff
 8000ecc:	d00e      	beq.n	8000eec <__gesf2+0x3c>
 8000ece:	2a00      	cmp	r2, #0
 8000ed0:	d11b      	bne.n	8000f0a <__gesf2+0x5a>
 8000ed2:	2c00      	cmp	r4, #0
 8000ed4:	d101      	bne.n	8000eda <__gesf2+0x2a>
 8000ed6:	2e00      	cmp	r6, #0
 8000ed8:	d01c      	beq.n	8000f14 <__gesf2+0x64>
 8000eda:	2d00      	cmp	r5, #0
 8000edc:	d00c      	beq.n	8000ef8 <__gesf2+0x48>
 8000ede:	4283      	cmp	r3, r0
 8000ee0:	d01c      	beq.n	8000f1c <__gesf2+0x6c>
 8000ee2:	2102      	movs	r1, #2
 8000ee4:	1e58      	subs	r0, r3, #1
 8000ee6:	4008      	ands	r0, r1
 8000ee8:	3801      	subs	r0, #1
 8000eea:	bd70      	pop	{r4, r5, r6, pc}
 8000eec:	2e00      	cmp	r6, #0
 8000eee:	d122      	bne.n	8000f36 <__gesf2+0x86>
 8000ef0:	2a00      	cmp	r2, #0
 8000ef2:	d1f4      	bne.n	8000ede <__gesf2+0x2e>
 8000ef4:	2d00      	cmp	r5, #0
 8000ef6:	d1f2      	bne.n	8000ede <__gesf2+0x2e>
 8000ef8:	2800      	cmp	r0, #0
 8000efa:	d1f6      	bne.n	8000eea <__gesf2+0x3a>
 8000efc:	2001      	movs	r0, #1
 8000efe:	4240      	negs	r0, r0
 8000f00:	e7f3      	b.n	8000eea <__gesf2+0x3a>
 8000f02:	2d00      	cmp	r5, #0
 8000f04:	d117      	bne.n	8000f36 <__gesf2+0x86>
 8000f06:	2cff      	cmp	r4, #255	; 0xff
 8000f08:	d0f0      	beq.n	8000eec <__gesf2+0x3c>
 8000f0a:	2c00      	cmp	r4, #0
 8000f0c:	d1e7      	bne.n	8000ede <__gesf2+0x2e>
 8000f0e:	2e00      	cmp	r6, #0
 8000f10:	d1e5      	bne.n	8000ede <__gesf2+0x2e>
 8000f12:	e7e6      	b.n	8000ee2 <__gesf2+0x32>
 8000f14:	2000      	movs	r0, #0
 8000f16:	2d00      	cmp	r5, #0
 8000f18:	d0e7      	beq.n	8000eea <__gesf2+0x3a>
 8000f1a:	e7e2      	b.n	8000ee2 <__gesf2+0x32>
 8000f1c:	42a2      	cmp	r2, r4
 8000f1e:	dc05      	bgt.n	8000f2c <__gesf2+0x7c>
 8000f20:	dbea      	blt.n	8000ef8 <__gesf2+0x48>
 8000f22:	42b5      	cmp	r5, r6
 8000f24:	d802      	bhi.n	8000f2c <__gesf2+0x7c>
 8000f26:	d3e7      	bcc.n	8000ef8 <__gesf2+0x48>
 8000f28:	2000      	movs	r0, #0
 8000f2a:	e7de      	b.n	8000eea <__gesf2+0x3a>
 8000f2c:	4243      	negs	r3, r0
 8000f2e:	4158      	adcs	r0, r3
 8000f30:	0040      	lsls	r0, r0, #1
 8000f32:	3801      	subs	r0, #1
 8000f34:	e7d9      	b.n	8000eea <__gesf2+0x3a>
 8000f36:	2002      	movs	r0, #2
 8000f38:	4240      	negs	r0, r0
 8000f3a:	e7d6      	b.n	8000eea <__gesf2+0x3a>

08000f3c <__lesf2>:
 8000f3c:	b570      	push	{r4, r5, r6, lr}
 8000f3e:	0042      	lsls	r2, r0, #1
 8000f40:	0245      	lsls	r5, r0, #9
 8000f42:	024e      	lsls	r6, r1, #9
 8000f44:	004c      	lsls	r4, r1, #1
 8000f46:	0fc3      	lsrs	r3, r0, #31
 8000f48:	0a6d      	lsrs	r5, r5, #9
 8000f4a:	0e12      	lsrs	r2, r2, #24
 8000f4c:	0a76      	lsrs	r6, r6, #9
 8000f4e:	0e24      	lsrs	r4, r4, #24
 8000f50:	0fc8      	lsrs	r0, r1, #31
 8000f52:	2aff      	cmp	r2, #255	; 0xff
 8000f54:	d00b      	beq.n	8000f6e <__lesf2+0x32>
 8000f56:	2cff      	cmp	r4, #255	; 0xff
 8000f58:	d00d      	beq.n	8000f76 <__lesf2+0x3a>
 8000f5a:	2a00      	cmp	r2, #0
 8000f5c:	d11f      	bne.n	8000f9e <__lesf2+0x62>
 8000f5e:	2c00      	cmp	r4, #0
 8000f60:	d116      	bne.n	8000f90 <__lesf2+0x54>
 8000f62:	2e00      	cmp	r6, #0
 8000f64:	d114      	bne.n	8000f90 <__lesf2+0x54>
 8000f66:	2000      	movs	r0, #0
 8000f68:	2d00      	cmp	r5, #0
 8000f6a:	d010      	beq.n	8000f8e <__lesf2+0x52>
 8000f6c:	e009      	b.n	8000f82 <__lesf2+0x46>
 8000f6e:	2d00      	cmp	r5, #0
 8000f70:	d10c      	bne.n	8000f8c <__lesf2+0x50>
 8000f72:	2cff      	cmp	r4, #255	; 0xff
 8000f74:	d113      	bne.n	8000f9e <__lesf2+0x62>
 8000f76:	2e00      	cmp	r6, #0
 8000f78:	d108      	bne.n	8000f8c <__lesf2+0x50>
 8000f7a:	2a00      	cmp	r2, #0
 8000f7c:	d008      	beq.n	8000f90 <__lesf2+0x54>
 8000f7e:	4283      	cmp	r3, r0
 8000f80:	d012      	beq.n	8000fa8 <__lesf2+0x6c>
 8000f82:	2102      	movs	r1, #2
 8000f84:	1e58      	subs	r0, r3, #1
 8000f86:	4008      	ands	r0, r1
 8000f88:	3801      	subs	r0, #1
 8000f8a:	e000      	b.n	8000f8e <__lesf2+0x52>
 8000f8c:	2002      	movs	r0, #2
 8000f8e:	bd70      	pop	{r4, r5, r6, pc}
 8000f90:	2d00      	cmp	r5, #0
 8000f92:	d1f4      	bne.n	8000f7e <__lesf2+0x42>
 8000f94:	2800      	cmp	r0, #0
 8000f96:	d1fa      	bne.n	8000f8e <__lesf2+0x52>
 8000f98:	2001      	movs	r0, #1
 8000f9a:	4240      	negs	r0, r0
 8000f9c:	e7f7      	b.n	8000f8e <__lesf2+0x52>
 8000f9e:	2c00      	cmp	r4, #0
 8000fa0:	d1ed      	bne.n	8000f7e <__lesf2+0x42>
 8000fa2:	2e00      	cmp	r6, #0
 8000fa4:	d1eb      	bne.n	8000f7e <__lesf2+0x42>
 8000fa6:	e7ec      	b.n	8000f82 <__lesf2+0x46>
 8000fa8:	42a2      	cmp	r2, r4
 8000faa:	dc05      	bgt.n	8000fb8 <__lesf2+0x7c>
 8000fac:	dbf2      	blt.n	8000f94 <__lesf2+0x58>
 8000fae:	42b5      	cmp	r5, r6
 8000fb0:	d802      	bhi.n	8000fb8 <__lesf2+0x7c>
 8000fb2:	d3ef      	bcc.n	8000f94 <__lesf2+0x58>
 8000fb4:	2000      	movs	r0, #0
 8000fb6:	e7ea      	b.n	8000f8e <__lesf2+0x52>
 8000fb8:	4243      	negs	r3, r0
 8000fba:	4158      	adcs	r0, r3
 8000fbc:	0040      	lsls	r0, r0, #1
 8000fbe:	3801      	subs	r0, #1
 8000fc0:	e7e5      	b.n	8000f8e <__lesf2+0x52>
 8000fc2:	46c0      	nop			; (mov r8, r8)

08000fc4 <Stop_mode>:
 *  Created on: Jul 24, 2023
 *      Author: Karol
 */
#include  "PVD.h"

void Stop_mode(void){
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
	__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 8000fc8:	4b0c      	ldr	r3, [pc, #48]	; (8000ffc <Stop_mode+0x38>)
 8000fca:	681a      	ldr	r2, [r3, #0]
 8000fcc:	4b0b      	ldr	r3, [pc, #44]	; (8000ffc <Stop_mode+0x38>)
 8000fce:	2104      	movs	r1, #4
 8000fd0:	430a      	orrs	r2, r1
 8000fd2:	601a      	str	r2, [r3, #0]
    HAL_Delay(2000);
 8000fd4:	23fa      	movs	r3, #250	; 0xfa
 8000fd6:	00db      	lsls	r3, r3, #3
 8000fd8:	0018      	movs	r0, r3
 8000fda:	f001 f9d5 	bl	8002388 <HAL_Delay>
    /* Select Standby mode */
     SET_BIT(PWR->CR, PWR_CR_PDDS);
 8000fde:	4b07      	ldr	r3, [pc, #28]	; (8000ffc <Stop_mode+0x38>)
 8000fe0:	681a      	ldr	r2, [r3, #0]
 8000fe2:	4b06      	ldr	r3, [pc, #24]	; (8000ffc <Stop_mode+0x38>)
 8000fe4:	2102      	movs	r1, #2
 8000fe6:	430a      	orrs	r2, r1
 8000fe8:	601a      	str	r2, [r3, #0]

     /* Set SLEEPDEEP bit of Cortex System Control Register */
     SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8000fea:	4b05      	ldr	r3, [pc, #20]	; (8001000 <Stop_mode+0x3c>)
 8000fec:	691a      	ldr	r2, [r3, #16]
 8000fee:	4b04      	ldr	r3, [pc, #16]	; (8001000 <Stop_mode+0x3c>)
 8000ff0:	2104      	movs	r1, #4
 8000ff2:	430a      	orrs	r2, r1
 8000ff4:	611a      	str	r2, [r3, #16]

     /* This option is used to ensure that store operations are completed */
   #if defined ( __CC_ARM)
     __force_stores();
   #endif
}
 8000ff6:	46c0      	nop			; (mov r8, r8)
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	40007000 	.word	0x40007000
 8001000:	e000ed00 	.word	0xe000ed00

08001004 <save_data>:
 *      Author: Karol
 */

#include "flash.h"

void save_data(uint32_t Address,uint32_t data){
 8001004:	b580      	push	{r7, lr}
 8001006:	b084      	sub	sp, #16
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
 800100c:	6039      	str	r1, [r7, #0]

    HAL_FLASH_Unlock();
 800100e:	f001 fb81 	bl	8002714 <HAL_FLASH_Unlock>
	for(int i=0;i<50;i++){}
 8001012:	2300      	movs	r3, #0
 8001014:	60fb      	str	r3, [r7, #12]
 8001016:	e002      	b.n	800101e <save_data+0x1a>
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	3301      	adds	r3, #1
 800101c:	60fb      	str	r3, [r7, #12]
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	2b31      	cmp	r3, #49	; 0x31
 8001022:	ddf9      	ble.n	8001018 <save_data+0x14>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,Address,(uint32_t)data);
 8001024:	683a      	ldr	r2, [r7, #0]
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	0019      	movs	r1, r3
 800102a:	2002      	movs	r0, #2
 800102c:	f001 fb36 	bl	800269c <HAL_FLASH_Program>
	for(int i=0;i<50;i++){}
 8001030:	2300      	movs	r3, #0
 8001032:	60bb      	str	r3, [r7, #8]
 8001034:	e002      	b.n	800103c <save_data+0x38>
 8001036:	68bb      	ldr	r3, [r7, #8]
 8001038:	3301      	adds	r3, #1
 800103a:	60bb      	str	r3, [r7, #8]
 800103c:	68bb      	ldr	r3, [r7, #8]
 800103e:	2b31      	cmp	r3, #49	; 0x31
 8001040:	ddf9      	ble.n	8001036 <save_data+0x32>
	HAL_FLASH_Lock();
 8001042:	f001 fbbb 	bl	80027bc <HAL_FLASH_Lock>
}
 8001046:	46c0      	nop			; (mov r8, r8)
 8001048:	46bd      	mov	sp, r7
 800104a:	b004      	add	sp, #16
 800104c:	bd80      	pop	{r7, pc}

0800104e <read_data>:

uint32_t read_data(uint32_t Address){
 800104e:	b580      	push	{r7, lr}
 8001050:	b084      	sub	sp, #16
 8001052:	af00      	add	r7, sp, #0
 8001054:	6078      	str	r0, [r7, #4]

	__IO uint32_t read_data = *(__IO uint32_t *)Address;
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	60fb      	str	r3, [r7, #12]
	return (uint32_t)read_data;
 800105c:	68fb      	ldr	r3, [r7, #12]
}
 800105e:	0018      	movs	r0, r3
 8001060:	46bd      	mov	sp, r7
 8001062:	b004      	add	sp, #16
 8001064:	bd80      	pop	{r7, pc}

08001066 <erase_data>:

void erase_data(uint32_t Address){
 8001066:	b580      	push	{r7, lr}
 8001068:	b086      	sub	sp, #24
 800106a:	af00      	add	r7, sp, #0
 800106c:	6078      	str	r0, [r7, #4]
HAL_FLASH_Unlock();
 800106e:	f001 fb51 	bl	8002714 <HAL_FLASH_Unlock>
FLASH_EraseInitTypeDef EraseInitStruct;
EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 8001072:	210c      	movs	r1, #12
 8001074:	187b      	adds	r3, r7, r1
 8001076:	2200      	movs	r2, #0
 8001078:	601a      	str	r2, [r3, #0]
EraseInitStruct.PageAddress = Address;
 800107a:	187b      	adds	r3, r7, r1
 800107c:	687a      	ldr	r2, [r7, #4]
 800107e:	605a      	str	r2, [r3, #4]
EraseInitStruct.NbPages = 1;
 8001080:	187b      	adds	r3, r7, r1
 8001082:	2201      	movs	r2, #1
 8001084:	609a      	str	r2, [r3, #8]

uint32_t PageError;
if (HAL_FLASHEx_Erase(&EraseInitStruct, &PageError) != HAL_OK)
 8001086:	2308      	movs	r3, #8
 8001088:	18fa      	adds	r2, r7, r3
 800108a:	187b      	adds	r3, r7, r1
 800108c:	0011      	movs	r1, r2
 800108e:	0018      	movs	r0, r3
 8001090:	f001 fcb6 	bl	8002a00 <HAL_FLASHEx_Erase>
 8001094:	1e03      	subs	r3, r0, #0
 8001096:	d102      	bne.n	800109e <erase_data+0x38>
		return HAL_ERROR;
HAL_FLASH_Lock();
 8001098:	f001 fb90 	bl	80027bc <HAL_FLASH_Lock>
 800109c:	e000      	b.n	80010a0 <erase_data+0x3a>
		return HAL_ERROR;
 800109e:	46c0      	nop			; (mov r8, r8)
}
 80010a0:	46bd      	mov	sp, r7
 80010a2:	b006      	add	sp, #24
 80010a4:	bd80      	pop	{r7, pc}
	...

080010a8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b084      	sub	sp, #16
 80010ac:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010ae:	4b14      	ldr	r3, [pc, #80]	; (8001100 <MX_GPIO_Init+0x58>)
 80010b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80010b2:	4b13      	ldr	r3, [pc, #76]	; (8001100 <MX_GPIO_Init+0x58>)
 80010b4:	2104      	movs	r1, #4
 80010b6:	430a      	orrs	r2, r1
 80010b8:	62da      	str	r2, [r3, #44]	; 0x2c
 80010ba:	4b11      	ldr	r3, [pc, #68]	; (8001100 <MX_GPIO_Init+0x58>)
 80010bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010be:	2204      	movs	r2, #4
 80010c0:	4013      	ands	r3, r2
 80010c2:	60fb      	str	r3, [r7, #12]
 80010c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010c6:	4b0e      	ldr	r3, [pc, #56]	; (8001100 <MX_GPIO_Init+0x58>)
 80010c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80010ca:	4b0d      	ldr	r3, [pc, #52]	; (8001100 <MX_GPIO_Init+0x58>)
 80010cc:	2180      	movs	r1, #128	; 0x80
 80010ce:	430a      	orrs	r2, r1
 80010d0:	62da      	str	r2, [r3, #44]	; 0x2c
 80010d2:	4b0b      	ldr	r3, [pc, #44]	; (8001100 <MX_GPIO_Init+0x58>)
 80010d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010d6:	2280      	movs	r2, #128	; 0x80
 80010d8:	4013      	ands	r3, r2
 80010da:	60bb      	str	r3, [r7, #8]
 80010dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010de:	4b08      	ldr	r3, [pc, #32]	; (8001100 <MX_GPIO_Init+0x58>)
 80010e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80010e2:	4b07      	ldr	r3, [pc, #28]	; (8001100 <MX_GPIO_Init+0x58>)
 80010e4:	2101      	movs	r1, #1
 80010e6:	430a      	orrs	r2, r1
 80010e8:	62da      	str	r2, [r3, #44]	; 0x2c
 80010ea:	4b05      	ldr	r3, [pc, #20]	; (8001100 <MX_GPIO_Init+0x58>)
 80010ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010ee:	2201      	movs	r2, #1
 80010f0:	4013      	ands	r3, r2
 80010f2:	607b      	str	r3, [r7, #4]
 80010f4:	687b      	ldr	r3, [r7, #4]

}
 80010f6:	46c0      	nop			; (mov r8, r8)
 80010f8:	46bd      	mov	sp, r7
 80010fa:	b004      	add	sp, #16
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	46c0      	nop			; (mov r8, r8)
 8001100:	40021000 	.word	0x40021000

08001104 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b082      	sub	sp, #8
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, 0);
 800110c:	1d39      	adds	r1, r7, #4
 800110e:	4805      	ldr	r0, [pc, #20]	; (8001124 <__io_putchar+0x20>)
 8001110:	2300      	movs	r3, #0
 8001112:	2201      	movs	r2, #1
 8001114:	f002 fee8 	bl	8003ee8 <HAL_UART_Transmit>
    return 1;
 8001118:	2301      	movs	r3, #1
}
 800111a:	0018      	movs	r0, r3
 800111c:	46bd      	mov	sp, r7
 800111e:	b002      	add	sp, #8
 8001120:	bd80      	pop	{r7, pc}
 8001122:	46c0      	nop			; (mov r8, r8)
 8001124:	20000254 	.word	0x20000254

08001128 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001128:	b580      	push	{r7, lr}
 800112a:	b082      	sub	sp, #8
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  if (huart == &huart2) {
 8001130:	687a      	ldr	r2, [r7, #4]
 8001132:	4b0c      	ldr	r3, [pc, #48]	; (8001164 <HAL_UART_RxCpltCallback+0x3c>)
 8001134:	429a      	cmp	r2, r3
 8001136:	d110      	bne.n	800115a <HAL_UART_RxCpltCallback+0x32>
	  MENU_USB(value);
 8001138:	4b0b      	ldr	r3, [pc, #44]	; (8001168 <HAL_UART_RxCpltCallback+0x40>)
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	0018      	movs	r0, r3
 800113e:	f000 fb21 	bl	8001784 <MENU_USB>
	  HAL_UART_Receive_IT(&huart2, &value, 1);
 8001142:	4909      	ldr	r1, [pc, #36]	; (8001168 <HAL_UART_RxCpltCallback+0x40>)
 8001144:	4b07      	ldr	r3, [pc, #28]	; (8001164 <HAL_UART_RxCpltCallback+0x3c>)
 8001146:	2201      	movs	r2, #1
 8001148:	0018      	movs	r0, r3
 800114a:	f002 ff6d 	bl	8004028 <HAL_UART_Receive_IT>
	  HAL_UART_Transmit(&huart2, &value, 1, 0);
 800114e:	4906      	ldr	r1, [pc, #24]	; (8001168 <HAL_UART_RxCpltCallback+0x40>)
 8001150:	4804      	ldr	r0, [pc, #16]	; (8001164 <HAL_UART_RxCpltCallback+0x3c>)
 8001152:	2300      	movs	r3, #0
 8001154:	2201      	movs	r2, #1
 8001156:	f002 fec7 	bl	8003ee8 <HAL_UART_Transmit>
 }
}
 800115a:	46c0      	nop			; (mov r8, r8)
 800115c:	46bd      	mov	sp, r7
 800115e:	b002      	add	sp, #8
 8001160:	bd80      	pop	{r7, pc}
 8001162:	46c0      	nop			; (mov r8, r8)
 8001164:	20000254 	.word	0x20000254
 8001168:	200001ac 	.word	0x200001ac

0800116c <TIM6_Callback>:
//   else{
//	   pvd=0;
//   }
//}

void TIM6_Callback(void){
 800116c:	b580      	push	{r7, lr}
 800116e:	af00      	add	r7, sp, #0
	if(state==1 || state==2){
 8001170:	4b0c      	ldr	r3, [pc, #48]	; (80011a4 <TIM6_Callback+0x38>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	2b01      	cmp	r3, #1
 8001176:	d003      	beq.n	8001180 <TIM6_Callback+0x14>
 8001178:	4b0a      	ldr	r3, [pc, #40]	; (80011a4 <TIM6_Callback+0x38>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	2b02      	cmp	r3, #2
 800117e:	d108      	bne.n	8001192 <TIM6_Callback+0x26>
		GPIOA->ODR^=(1U<<5);
 8001180:	23a0      	movs	r3, #160	; 0xa0
 8001182:	05db      	lsls	r3, r3, #23
 8001184:	695a      	ldr	r2, [r3, #20]
 8001186:	23a0      	movs	r3, #160	; 0xa0
 8001188:	05db      	lsls	r3, r3, #23
 800118a:	2120      	movs	r1, #32
 800118c:	404a      	eors	r2, r1
 800118e:	615a      	str	r2, [r3, #20]
 8001190:	e004      	b.n	800119c <TIM6_Callback+0x30>
	}
	else{
		GPIOA->ODR=(1U<<5);
 8001192:	23a0      	movs	r3, #160	; 0xa0
 8001194:	05db      	lsls	r3, r3, #23
 8001196:	2220      	movs	r2, #32
 8001198:	615a      	str	r2, [r3, #20]
	}
}
 800119a:	46c0      	nop			; (mov r8, r8)
 800119c:	46c0      	nop			; (mov r8, r8)
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	46c0      	nop			; (mov r8, r8)
 80011a4:	2000024c 	.word	0x2000024c

080011a8 <HAL_PWR_PVDCallback>:

void HAL_PWR_PVDCallback(void){
 80011a8:	b580      	push	{r7, lr}
 80011aa:	af00      	add	r7, sp, #0
    if (pvd==0) {
 80011ac:	4b0c      	ldr	r3, [pc, #48]	; (80011e0 <HAL_PWR_PVDCallback+0x38>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d10f      	bne.n	80011d4 <HAL_PWR_PVDCallback+0x2c>
		pvd=1;
 80011b4:	4b0a      	ldr	r3, [pc, #40]	; (80011e0 <HAL_PWR_PVDCallback+0x38>)
 80011b6:	2201      	movs	r2, #1
 80011b8:	601a      	str	r2, [r3, #0]
		state=3;
 80011ba:	4b0a      	ldr	r3, [pc, #40]	; (80011e4 <HAL_PWR_PVDCallback+0x3c>)
 80011bc:	2203      	movs	r2, #3
 80011be:	601a      	str	r2, [r3, #0]
   		GPIOB->ODR=~(1U<<1);
 80011c0:	4b09      	ldr	r3, [pc, #36]	; (80011e8 <HAL_PWR_PVDCallback+0x40>)
 80011c2:	2203      	movs	r2, #3
 80011c4:	4252      	negs	r2, r2
 80011c6:	615a      	str	r2, [r3, #20]
   		GPIOA->ODR=~(1U<<5);
 80011c8:	23a0      	movs	r3, #160	; 0xa0
 80011ca:	05db      	lsls	r3, r3, #23
 80011cc:	2221      	movs	r2, #33	; 0x21
 80011ce:	4252      	negs	r2, r2
 80011d0:	615a      	str	r2, [r3, #20]
    }
    else{
    	pvd=0;
    }
}
 80011d2:	e002      	b.n	80011da <HAL_PWR_PVDCallback+0x32>
    	pvd=0;
 80011d4:	4b02      	ldr	r3, [pc, #8]	; (80011e0 <HAL_PWR_PVDCallback+0x38>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	601a      	str	r2, [r3, #0]
}
 80011da:	46c0      	nop			; (mov r8, r8)
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	2000001c 	.word	0x2000001c
 80011e4:	2000024c 	.word	0x2000024c
 80011e8:	50000400 	.word	0x50000400

080011ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011ee:	b087      	sub	sp, #28
 80011f0:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011f2:	f001 f859 	bl	80022a8 <HAL_Init>

  /* USER CODE BEGIN Init */
  PG_init();
 80011f6:	f000 faa7 	bl	8001748 <PG_init>
  GPIO_LEDS();
 80011fa:	f000 fa4d 	bl	8001698 <GPIO_LEDS>
  TIM6_init();
 80011fe:	f000 ff89 	bl	8002114 <TIM6_init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001202:	f000 f9dd 	bl	80015c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001206:	f7ff ff4f 	bl	80010a8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800120a:	f000 ffa7 	bl	800215c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  printf(menu);
 800120e:	4bce      	ldr	r3, [pc, #824]	; (8001548 <main+0x35c>)
 8001210:	0018      	movs	r0, r3
 8001212:	f004 fb7f 	bl	8005914 <iprintf>
  HAL_UART_Receive_IT(&huart2, &value, 1);
 8001216:	49cd      	ldr	r1, [pc, #820]	; (800154c <main+0x360>)
 8001218:	4bcd      	ldr	r3, [pc, #820]	; (8001550 <main+0x364>)
 800121a:	2201      	movs	r2, #1
 800121c:	0018      	movs	r0, r3
 800121e:	f002 ff03 	bl	8004028 <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while(1){
	  if(pvd==1){
 8001222:	4bcc      	ldr	r3, [pc, #816]	; (8001554 <main+0x368>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	2b01      	cmp	r3, #1
 8001228:	d108      	bne.n	800123c <main+0x50>
		  GPIOB->ODR^=(1U<<3);
 800122a:	4bcb      	ldr	r3, [pc, #812]	; (8001558 <main+0x36c>)
 800122c:	695a      	ldr	r2, [r3, #20]
 800122e:	4bca      	ldr	r3, [pc, #808]	; (8001558 <main+0x36c>)
 8001230:	2108      	movs	r1, #8
 8001232:	404a      	eors	r2, r1
 8001234:	615a      	str	r2, [r3, #20]
		  Stop_mode();
 8001236:	f7ff fec5 	bl	8000fc4 <Stop_mode>
 800123a:	e00c      	b.n	8001256 <main+0x6a>
	  }
	  else if(pvd==0){
 800123c:	4bc5      	ldr	r3, [pc, #788]	; (8001554 <main+0x368>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	2b00      	cmp	r3, #0
 8001242:	d108      	bne.n	8001256 <main+0x6a>
		  GPIOB->ODR=(1U<<1);
 8001244:	4bc4      	ldr	r3, [pc, #784]	; (8001558 <main+0x36c>)
 8001246:	2202      	movs	r2, #2
 8001248:	615a      	str	r2, [r3, #20]
		  GPIOB->ODR&=~(1U<<3);
 800124a:	4bc3      	ldr	r3, [pc, #780]	; (8001558 <main+0x36c>)
 800124c:	695a      	ldr	r2, [r3, #20]
 800124e:	4bc2      	ldr	r3, [pc, #776]	; (8001558 <main+0x36c>)
 8001250:	2108      	movs	r1, #8
 8001252:	438a      	bics	r2, r1
 8001254:	615a      	str	r2, [r3, #20]
	  }
	  switch(state) {
 8001256:	4bc1      	ldr	r3, [pc, #772]	; (800155c <main+0x370>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	2b05      	cmp	r3, #5
 800125c:	d900      	bls.n	8001260 <main+0x74>
 800125e:	e170      	b.n	8001542 <main+0x356>
 8001260:	009a      	lsls	r2, r3, #2
 8001262:	4bbf      	ldr	r3, [pc, #764]	; (8001560 <main+0x374>)
 8001264:	18d3      	adds	r3, r2, r3
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	469f      	mov	pc, r3
	  	  case 1:
	  		  GPIOC->BSRR = ~(1U<<4);
 800126a:	4bbe      	ldr	r3, [pc, #760]	; (8001564 <main+0x378>)
 800126c:	2211      	movs	r2, #17
 800126e:	4252      	negs	r2, r2
 8001270:	619a      	str	r2, [r3, #24]
	  		  while((GPIOC->ODR & GPIO_ODR_OD4)){}
 8001272:	46c0      	nop			; (mov r8, r8)
 8001274:	4bbb      	ldr	r3, [pc, #748]	; (8001564 <main+0x378>)
 8001276:	695b      	ldr	r3, [r3, #20]
 8001278:	2210      	movs	r2, #16
 800127a:	4013      	ands	r3, r2
 800127c:	d1fa      	bne.n	8001274 <main+0x88>
	  		  HAL_Delay((uint32_t)Ton);
 800127e:	4bba      	ldr	r3, [pc, #744]	; (8001568 <main+0x37c>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	1c18      	adds	r0, r3, #0
 8001284:	f7ff f836 	bl	80002f4 <__aeabi_f2uiz>
 8001288:	0003      	movs	r3, r0
 800128a:	0018      	movs	r0, r3
 800128c:	f001 f87c 	bl	8002388 <HAL_Delay>
	  		  GPIOC->BSRR = (1U<<4);
 8001290:	4bb4      	ldr	r3, [pc, #720]	; (8001564 <main+0x378>)
 8001292:	2210      	movs	r2, #16
 8001294:	619a      	str	r2, [r3, #24]
	  		  while(!(GPIOC->ODR & GPIO_ODR_OD4)){}
 8001296:	46c0      	nop			; (mov r8, r8)
 8001298:	4bb2      	ldr	r3, [pc, #712]	; (8001564 <main+0x378>)
 800129a:	695b      	ldr	r3, [r3, #20]
 800129c:	2210      	movs	r2, #16
 800129e:	4013      	ands	r3, r2
 80012a0:	d0fa      	beq.n	8001298 <main+0xac>
	  		  HAL_Delay((uint32_t)Toff);
 80012a2:	4bb2      	ldr	r3, [pc, #712]	; (800156c <main+0x380>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	1c18      	adds	r0, r3, #0
 80012a8:	f7ff f824 	bl	80002f4 <__aeabi_f2uiz>
 80012ac:	0003      	movs	r3, r0
 80012ae:	0018      	movs	r0, r3
 80012b0:	f001 f86a 	bl	8002388 <HAL_Delay>
	  		  total_pulses++;
 80012b4:	4bae      	ldr	r3, [pc, #696]	; (8001570 <main+0x384>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	1c5a      	adds	r2, r3, #1
 80012ba:	4bad      	ldr	r3, [pc, #692]	; (8001570 <main+0x384>)
 80012bc:	601a      	str	r2, [r3, #0]
	  		  flag=2;
 80012be:	4bad      	ldr	r3, [pc, #692]	; (8001574 <main+0x388>)
 80012c0:	2202      	movs	r2, #2
 80012c2:	601a      	str	r2, [r3, #0]
	  		  break;
 80012c4:	e13e      	b.n	8001544 <main+0x358>
	  	  case 2:
	  		  GPIOC->BSRR = ~(1U<<4);
 80012c6:	4ba7      	ldr	r3, [pc, #668]	; (8001564 <main+0x378>)
 80012c8:	2211      	movs	r2, #17
 80012ca:	4252      	negs	r2, r2
 80012cc:	619a      	str	r2, [r3, #24]
	  		  while((GPIOC->ODR & GPIO_ODR_OD4)){}
 80012ce:	46c0      	nop			; (mov r8, r8)
 80012d0:	4ba4      	ldr	r3, [pc, #656]	; (8001564 <main+0x378>)
 80012d2:	695b      	ldr	r3, [r3, #20]
 80012d4:	2210      	movs	r2, #16
 80012d6:	4013      	ands	r3, r2
 80012d8:	d1fa      	bne.n	80012d0 <main+0xe4>
	  		  HAL_Delay((uint32_t)Ton);
 80012da:	4ba3      	ldr	r3, [pc, #652]	; (8001568 <main+0x37c>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	1c18      	adds	r0, r3, #0
 80012e0:	f7ff f808 	bl	80002f4 <__aeabi_f2uiz>
 80012e4:	0003      	movs	r3, r0
 80012e6:	0018      	movs	r0, r3
 80012e8:	f001 f84e 	bl	8002388 <HAL_Delay>
	  		  GPIOC->BSRR = (1U<<4);
 80012ec:	4b9d      	ldr	r3, [pc, #628]	; (8001564 <main+0x378>)
 80012ee:	2210      	movs	r2, #16
 80012f0:	619a      	str	r2, [r3, #24]
	  		  while(!(GPIOC->ODR & GPIO_ODR_OD4)){}
 80012f2:	46c0      	nop			; (mov r8, r8)
 80012f4:	4b9b      	ldr	r3, [pc, #620]	; (8001564 <main+0x378>)
 80012f6:	695b      	ldr	r3, [r3, #20]
 80012f8:	2210      	movs	r2, #16
 80012fa:	4013      	ands	r3, r2
 80012fc:	d0fa      	beq.n	80012f4 <main+0x108>
	  		  HAL_Delay((uint32_t)Toff);
 80012fe:	4b9b      	ldr	r3, [pc, #620]	; (800156c <main+0x380>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	1c18      	adds	r0, r3, #0
 8001304:	f7fe fff6 	bl	80002f4 <__aeabi_f2uiz>
 8001308:	0003      	movs	r3, r0
 800130a:	0018      	movs	r0, r3
 800130c:	f001 f83c 	bl	8002388 <HAL_Delay>
	  		  total_pulses++;
 8001310:	4b97      	ldr	r3, [pc, #604]	; (8001570 <main+0x384>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	1c5a      	adds	r2, r3, #1
 8001316:	4b96      	ldr	r3, [pc, #600]	; (8001570 <main+0x384>)
 8001318:	601a      	str	r2, [r3, #0]
	  		  num--;
 800131a:	4b97      	ldr	r3, [pc, #604]	; (8001578 <main+0x38c>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	1e5a      	subs	r2, r3, #1
 8001320:	4b95      	ldr	r3, [pc, #596]	; (8001578 <main+0x38c>)
 8001322:	601a      	str	r2, [r3, #0]
	  		  if(num>0 && state==2){
 8001324:	4b94      	ldr	r3, [pc, #592]	; (8001578 <main+0x38c>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d00a      	beq.n	8001342 <main+0x156>
 800132c:	4b8b      	ldr	r3, [pc, #556]	; (800155c <main+0x370>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	2b02      	cmp	r3, #2
 8001332:	d106      	bne.n	8001342 <main+0x156>
	  			  state=2;
 8001334:	4b89      	ldr	r3, [pc, #548]	; (800155c <main+0x370>)
 8001336:	2202      	movs	r2, #2
 8001338:	601a      	str	r2, [r3, #0]
	  			  flag=1;
 800133a:	4b8e      	ldr	r3, [pc, #568]	; (8001574 <main+0x388>)
 800133c:	2201      	movs	r2, #1
 800133e:	601a      	str	r2, [r3, #0]
	  		  }
	  		  else{
	  			  state=3;
	  		  }
	  		  break;
 8001340:	e100      	b.n	8001544 <main+0x358>
	  			  state=3;
 8001342:	4b86      	ldr	r3, [pc, #536]	; (800155c <main+0x370>)
 8001344:	2203      	movs	r2, #3
 8001346:	601a      	str	r2, [r3, #0]
	  		  break;
 8001348:	e0fc      	b.n	8001544 <main+0x358>
	  	  case 3:
	  		  save_data(Addr_total_pulse, total_pulses);
 800134a:	4b8c      	ldr	r3, [pc, #560]	; (800157c <main+0x390>)
 800134c:	681a      	ldr	r2, [r3, #0]
 800134e:	4b88      	ldr	r3, [pc, #544]	; (8001570 <main+0x384>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	0019      	movs	r1, r3
 8001354:	0010      	movs	r0, r2
 8001356:	f7ff fe55 	bl	8001004 <save_data>
	  		  save_data(Addr_num, num);
 800135a:	4b89      	ldr	r3, [pc, #548]	; (8001580 <main+0x394>)
 800135c:	681a      	ldr	r2, [r3, #0]
 800135e:	4b86      	ldr	r3, [pc, #536]	; (8001578 <main+0x38c>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	0019      	movs	r1, r3
 8001364:	0010      	movs	r0, r2
 8001366:	f7ff fe4d 	bl	8001004 <save_data>
	  		  save_data(Addr_Ton, (uint32_t)Ton);
 800136a:	4b86      	ldr	r3, [pc, #536]	; (8001584 <main+0x398>)
 800136c:	681c      	ldr	r4, [r3, #0]
 800136e:	4b7e      	ldr	r3, [pc, #504]	; (8001568 <main+0x37c>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	1c18      	adds	r0, r3, #0
 8001374:	f7fe ffbe 	bl	80002f4 <__aeabi_f2uiz>
 8001378:	0003      	movs	r3, r0
 800137a:	0019      	movs	r1, r3
 800137c:	0020      	movs	r0, r4
 800137e:	f7ff fe41 	bl	8001004 <save_data>
	  		  save_data(Addr_Toff, (uint32_t)Toff);
 8001382:	4b81      	ldr	r3, [pc, #516]	; (8001588 <main+0x39c>)
 8001384:	681c      	ldr	r4, [r3, #0]
 8001386:	4b79      	ldr	r3, [pc, #484]	; (800156c <main+0x380>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	1c18      	adds	r0, r3, #0
 800138c:	f7fe ffb2 	bl	80002f4 <__aeabi_f2uiz>
 8001390:	0003      	movs	r3, r0
 8001392:	0019      	movs	r1, r3
 8001394:	0020      	movs	r0, r4
 8001396:	f7ff fe35 	bl	8001004 <save_data>
	  		  save_data(Addr_freq, freq);
 800139a:	4b7c      	ldr	r3, [pc, #496]	; (800158c <main+0x3a0>)
 800139c:	681a      	ldr	r2, [r3, #0]
 800139e:	4b7c      	ldr	r3, [pc, #496]	; (8001590 <main+0x3a4>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	0019      	movs	r1, r3
 80013a4:	0010      	movs	r0, r2
 80013a6:	f7ff fe2d 	bl	8001004 <save_data>
	  		  save_data(Addr_duty_cycle, duty_cycle);
 80013aa:	4b7a      	ldr	r3, [pc, #488]	; (8001594 <main+0x3a8>)
 80013ac:	681a      	ldr	r2, [r3, #0]
 80013ae:	4b7a      	ldr	r3, [pc, #488]	; (8001598 <main+0x3ac>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	0019      	movs	r1, r3
 80013b4:	0010      	movs	r0, r2
 80013b6:	f7ff fe25 	bl	8001004 <save_data>
	  		  state=4;
 80013ba:	4b68      	ldr	r3, [pc, #416]	; (800155c <main+0x370>)
 80013bc:	2204      	movs	r2, #4
 80013be:	601a      	str	r2, [r3, #0]
	  		  break;
 80013c0:	e0c0      	b.n	8001544 <main+0x358>
	  	  case 4:
	  		  if(flag==1){
 80013c2:	4b6c      	ldr	r3, [pc, #432]	; (8001574 <main+0x388>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	2b01      	cmp	r3, #1
 80013c8:	d130      	bne.n	800142c <main+0x240>
	  			  fdata1=read_data(Addr_num);
 80013ca:	4b6d      	ldr	r3, [pc, #436]	; (8001580 <main+0x394>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	0018      	movs	r0, r3
 80013d0:	f7ff fe3d 	bl	800104e <read_data>
 80013d4:	0002      	movs	r2, r0
 80013d6:	4b71      	ldr	r3, [pc, #452]	; (800159c <main+0x3b0>)
 80013d8:	601a      	str	r2, [r3, #0]
	  			  fdata2=read_data(Addr_total_pulse);
 80013da:	4b68      	ldr	r3, [pc, #416]	; (800157c <main+0x390>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	0018      	movs	r0, r3
 80013e0:	f7ff fe35 	bl	800104e <read_data>
 80013e4:	0002      	movs	r2, r0
 80013e6:	4b6e      	ldr	r3, [pc, #440]	; (80015a0 <main+0x3b4>)
 80013e8:	601a      	str	r2, [r3, #0]
	  			  fdata3=read_data(Addr_Ton);
 80013ea:	4b66      	ldr	r3, [pc, #408]	; (8001584 <main+0x398>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	0018      	movs	r0, r3
 80013f0:	f7ff fe2d 	bl	800104e <read_data>
 80013f4:	0002      	movs	r2, r0
 80013f6:	4b6b      	ldr	r3, [pc, #428]	; (80015a4 <main+0x3b8>)
 80013f8:	601a      	str	r2, [r3, #0]
	  			  fdata4=read_data(Addr_Toff);
 80013fa:	4b63      	ldr	r3, [pc, #396]	; (8001588 <main+0x39c>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	0018      	movs	r0, r3
 8001400:	f7ff fe25 	bl	800104e <read_data>
 8001404:	0002      	movs	r2, r0
 8001406:	4b68      	ldr	r3, [pc, #416]	; (80015a8 <main+0x3bc>)
 8001408:	601a      	str	r2, [r3, #0]
	  			  fdata5=read_data(Addr_freq);
 800140a:	4b60      	ldr	r3, [pc, #384]	; (800158c <main+0x3a0>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	0018      	movs	r0, r3
 8001410:	f7ff fe1d 	bl	800104e <read_data>
 8001414:	0002      	movs	r2, r0
 8001416:	4b65      	ldr	r3, [pc, #404]	; (80015ac <main+0x3c0>)
 8001418:	601a      	str	r2, [r3, #0]
	  			  fdata6=read_data(Addr_duty_cycle);
 800141a:	4b5e      	ldr	r3, [pc, #376]	; (8001594 <main+0x3a8>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	0018      	movs	r0, r3
 8001420:	f7ff fe15 	bl	800104e <read_data>
 8001424:	0002      	movs	r2, r0
 8001426:	4b62      	ldr	r3, [pc, #392]	; (80015b0 <main+0x3c4>)
 8001428:	601a      	str	r2, [r3, #0]
 800142a:	e02f      	b.n	800148c <main+0x2a0>
	  		  }
	  		  else{
	  			  fdata1=read_data(Addr_num);
 800142c:	4b54      	ldr	r3, [pc, #336]	; (8001580 <main+0x394>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	0018      	movs	r0, r3
 8001432:	f7ff fe0c 	bl	800104e <read_data>
 8001436:	0002      	movs	r2, r0
 8001438:	4b58      	ldr	r3, [pc, #352]	; (800159c <main+0x3b0>)
 800143a:	601a      	str	r2, [r3, #0]
	  			  fdata2=read_data(Addr_total_pulse);
 800143c:	4b4f      	ldr	r3, [pc, #316]	; (800157c <main+0x390>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	0018      	movs	r0, r3
 8001442:	f7ff fe04 	bl	800104e <read_data>
 8001446:	0002      	movs	r2, r0
 8001448:	4b55      	ldr	r3, [pc, #340]	; (80015a0 <main+0x3b4>)
 800144a:	601a      	str	r2, [r3, #0]
	  			  fdata3=read_data(Addr_Ton);
 800144c:	4b4d      	ldr	r3, [pc, #308]	; (8001584 <main+0x398>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	0018      	movs	r0, r3
 8001452:	f7ff fdfc 	bl	800104e <read_data>
 8001456:	0002      	movs	r2, r0
 8001458:	4b52      	ldr	r3, [pc, #328]	; (80015a4 <main+0x3b8>)
 800145a:	601a      	str	r2, [r3, #0]
	  			  fdata4=read_data(Addr_Toff);
 800145c:	4b4a      	ldr	r3, [pc, #296]	; (8001588 <main+0x39c>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	0018      	movs	r0, r3
 8001462:	f7ff fdf4 	bl	800104e <read_data>
 8001466:	0002      	movs	r2, r0
 8001468:	4b4f      	ldr	r3, [pc, #316]	; (80015a8 <main+0x3bc>)
 800146a:	601a      	str	r2, [r3, #0]
	  			  fdata5=read_data(Addr_freq);
 800146c:	4b47      	ldr	r3, [pc, #284]	; (800158c <main+0x3a0>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	0018      	movs	r0, r3
 8001472:	f7ff fdec 	bl	800104e <read_data>
 8001476:	0002      	movs	r2, r0
 8001478:	4b4c      	ldr	r3, [pc, #304]	; (80015ac <main+0x3c0>)
 800147a:	601a      	str	r2, [r3, #0]
	  			  fdata6=read_data(Addr_duty_cycle);
 800147c:	4b45      	ldr	r3, [pc, #276]	; (8001594 <main+0x3a8>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	0018      	movs	r0, r3
 8001482:	f7ff fde4 	bl	800104e <read_data>
 8001486:	0002      	movs	r2, r0
 8001488:	4b49      	ldr	r3, [pc, #292]	; (80015b0 <main+0x3c4>)
 800148a:	601a      	str	r2, [r3, #0]
	  		  }
	  		  num=0;
 800148c:	4b3a      	ldr	r3, [pc, #232]	; (8001578 <main+0x38c>)
 800148e:	2200      	movs	r2, #0
 8001490:	601a      	str	r2, [r3, #0]
	  		  freq=0;
 8001492:	4b3f      	ldr	r3, [pc, #252]	; (8001590 <main+0x3a4>)
 8001494:	2200      	movs	r2, #0
 8001496:	601a      	str	r2, [r3, #0]
	  		  duty_cycle=0;
 8001498:	4b3f      	ldr	r3, [pc, #252]	; (8001598 <main+0x3ac>)
 800149a:	2200      	movs	r2, #0
 800149c:	601a      	str	r2, [r3, #0]
	  		  Ton=0;
 800149e:	4b32      	ldr	r3, [pc, #200]	; (8001568 <main+0x37c>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	601a      	str	r2, [r3, #0]
	  		  Toff=0;
 80014a4:	4b31      	ldr	r3, [pc, #196]	; (800156c <main+0x380>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	601a      	str	r2, [r3, #0]
	  		  total_pulses=0;
 80014aa:	4b31      	ldr	r3, [pc, #196]	; (8001570 <main+0x384>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	601a      	str	r2, [r3, #0]
	  		  if(pvd==0){
 80014b0:	4b28      	ldr	r3, [pc, #160]	; (8001554 <main+0x368>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d103      	bne.n	80014c0 <main+0x2d4>
	  			  state=5;
 80014b8:	4b28      	ldr	r3, [pc, #160]	; (800155c <main+0x370>)
 80014ba:	2205      	movs	r2, #5
 80014bc:	601a      	str	r2, [r3, #0]
	  		  }
	  		  else{
	  			  state=0;
	  		  }
	  		  break;
 80014be:	e041      	b.n	8001544 <main+0x358>
	  			  state=0;
 80014c0:	4b26      	ldr	r3, [pc, #152]	; (800155c <main+0x370>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	601a      	str	r2, [r3, #0]
	  		  break;
 80014c6:	e03d      	b.n	8001544 <main+0x358>
	  	  case 5:
	  		  printf("\n\r");
 80014c8:	4b3a      	ldr	r3, [pc, #232]	; (80015b4 <main+0x3c8>)
 80014ca:	0018      	movs	r0, r3
 80014cc:	f004 fa22 	bl	8005914 <iprintf>
	  		  sprintf(line_buffer,"Num:%lu,Total pulse:%lu,Ton:%lu,Toff:%lu,Freq:%lu,Duty_cycle:%lu\r\n",fdata1,fdata2,fdata3,fdata4,fdata5,fdata6);
 80014d0:	4b32      	ldr	r3, [pc, #200]	; (800159c <main+0x3b0>)
 80014d2:	681e      	ldr	r6, [r3, #0]
 80014d4:	4b32      	ldr	r3, [pc, #200]	; (80015a0 <main+0x3b4>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	469c      	mov	ip, r3
 80014da:	4b32      	ldr	r3, [pc, #200]	; (80015a4 <main+0x3b8>)
 80014dc:	681a      	ldr	r2, [r3, #0]
 80014de:	4b32      	ldr	r3, [pc, #200]	; (80015a8 <main+0x3bc>)
 80014e0:	6819      	ldr	r1, [r3, #0]
 80014e2:	4b32      	ldr	r3, [pc, #200]	; (80015ac <main+0x3c0>)
 80014e4:	6818      	ldr	r0, [r3, #0]
 80014e6:	4b32      	ldr	r3, [pc, #200]	; (80015b0 <main+0x3c4>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	4d33      	ldr	r5, [pc, #204]	; (80015b8 <main+0x3cc>)
 80014ec:	4c33      	ldr	r4, [pc, #204]	; (80015bc <main+0x3d0>)
 80014ee:	9303      	str	r3, [sp, #12]
 80014f0:	9002      	str	r0, [sp, #8]
 80014f2:	9101      	str	r1, [sp, #4]
 80014f4:	9200      	str	r2, [sp, #0]
 80014f6:	4663      	mov	r3, ip
 80014f8:	0032      	movs	r2, r6
 80014fa:	0029      	movs	r1, r5
 80014fc:	0020      	movs	r0, r4
 80014fe:	f004 fa19 	bl	8005934 <siprintf>
	  		  HAL_UART_Transmit(&huart2, (uint8_t*)line_buffer, strlen(line_buffer), 50);
 8001502:	4b2e      	ldr	r3, [pc, #184]	; (80015bc <main+0x3d0>)
 8001504:	0018      	movs	r0, r3
 8001506:	f7fe fe09 	bl	800011c <strlen>
 800150a:	0003      	movs	r3, r0
 800150c:	b29a      	uxth	r2, r3
 800150e:	492b      	ldr	r1, [pc, #172]	; (80015bc <main+0x3d0>)
 8001510:	480f      	ldr	r0, [pc, #60]	; (8001550 <main+0x364>)
 8001512:	2332      	movs	r3, #50	; 0x32
 8001514:	f002 fce8 	bl	8003ee8 <HAL_UART_Transmit>
	  		  for(int i;i<strlen(line_buffer);i++){
 8001518:	e007      	b.n	800152a <main+0x33e>
	  			  line_buffer[i]='\0';
 800151a:	4a28      	ldr	r2, [pc, #160]	; (80015bc <main+0x3d0>)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	18d3      	adds	r3, r2, r3
 8001520:	2200      	movs	r2, #0
 8001522:	701a      	strb	r2, [r3, #0]
	  		  for(int i;i<strlen(line_buffer);i++){
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	3301      	adds	r3, #1
 8001528:	607b      	str	r3, [r7, #4]
 800152a:	4b24      	ldr	r3, [pc, #144]	; (80015bc <main+0x3d0>)
 800152c:	0018      	movs	r0, r3
 800152e:	f7fe fdf5 	bl	800011c <strlen>
 8001532:	0002      	movs	r2, r0
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	429a      	cmp	r2, r3
 8001538:	d8ef      	bhi.n	800151a <main+0x32e>
	  		  }
	  		  state=0;
 800153a:	4b08      	ldr	r3, [pc, #32]	; (800155c <main+0x370>)
 800153c:	2200      	movs	r2, #0
 800153e:	601a      	str	r2, [r3, #0]
	  		  break;
 8001540:	e000      	b.n	8001544 <main+0x358>
	  	  default:
	  		  break;
 8001542:	46c0      	nop			; (mov r8, r8)
	  if(pvd==1){
 8001544:	e66d      	b.n	8001222 <main+0x36>
 8001546:	46c0      	nop			; (mov r8, r8)
 8001548:	20000020 	.word	0x20000020
 800154c:	200001ac 	.word	0x200001ac
 8001550:	20000254 	.word	0x20000254
 8001554:	2000001c 	.word	0x2000001c
 8001558:	50000400 	.word	0x50000400
 800155c:	2000024c 	.word	0x2000024c
 8001560:	08006c00 	.word	0x08006c00
 8001564:	50000800 	.word	0x50000800
 8001568:	200001d8 	.word	0x200001d8
 800156c:	200001dc 	.word	0x200001dc
 8001570:	200001d4 	.word	0x200001d4
 8001574:	20000018 	.word	0x20000018
 8001578:	200001b0 	.word	0x200001b0
 800157c:	20000004 	.word	0x20000004
 8001580:	20000000 	.word	0x20000000
 8001584:	20000008 	.word	0x20000008
 8001588:	2000000c 	.word	0x2000000c
 800158c:	20000010 	.word	0x20000010
 8001590:	200001b4 	.word	0x200001b4
 8001594:	20000014 	.word	0x20000014
 8001598:	200001b8 	.word	0x200001b8
 800159c:	200001bc 	.word	0x200001bc
 80015a0:	200001c0 	.word	0x200001c0
 80015a4:	200001c4 	.word	0x200001c4
 80015a8:	200001c8 	.word	0x200001c8
 80015ac:	200001cc 	.word	0x200001cc
 80015b0:	200001d0 	.word	0x200001d0
 80015b4:	08006b0c 	.word	0x08006b0c
 80015b8:	08006b10 	.word	0x08006b10
 80015bc:	200001e4 	.word	0x200001e4

080015c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015c0:	b590      	push	{r4, r7, lr}
 80015c2:	b09f      	sub	sp, #124	; 0x7c
 80015c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015c6:	2440      	movs	r4, #64	; 0x40
 80015c8:	193b      	adds	r3, r7, r4
 80015ca:	0018      	movs	r0, r3
 80015cc:	2338      	movs	r3, #56	; 0x38
 80015ce:	001a      	movs	r2, r3
 80015d0:	2100      	movs	r1, #0
 80015d2:	f004 fa1b 	bl	8005a0c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015d6:	232c      	movs	r3, #44	; 0x2c
 80015d8:	18fb      	adds	r3, r7, r3
 80015da:	0018      	movs	r0, r3
 80015dc:	2314      	movs	r3, #20
 80015de:	001a      	movs	r2, r3
 80015e0:	2100      	movs	r1, #0
 80015e2:	f004 fa13 	bl	8005a0c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80015e6:	1d3b      	adds	r3, r7, #4
 80015e8:	0018      	movs	r0, r3
 80015ea:	2328      	movs	r3, #40	; 0x28
 80015ec:	001a      	movs	r2, r3
 80015ee:	2100      	movs	r1, #0
 80015f0:	f004 fa0c 	bl	8005a0c <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80015f4:	4b26      	ldr	r3, [pc, #152]	; (8001690 <SystemClock_Config+0xd0>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4a26      	ldr	r2, [pc, #152]	; (8001694 <SystemClock_Config+0xd4>)
 80015fa:	401a      	ands	r2, r3
 80015fc:	4b24      	ldr	r3, [pc, #144]	; (8001690 <SystemClock_Config+0xd0>)
 80015fe:	2180      	movs	r1, #128	; 0x80
 8001600:	0109      	lsls	r1, r1, #4
 8001602:	430a      	orrs	r2, r1
 8001604:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001606:	0021      	movs	r1, r4
 8001608:	187b      	adds	r3, r7, r1
 800160a:	2210      	movs	r2, #16
 800160c:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800160e:	187b      	adds	r3, r7, r1
 8001610:	2201      	movs	r2, #1
 8001612:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001614:	187b      	adds	r3, r7, r1
 8001616:	2200      	movs	r2, #0
 8001618:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 800161a:	187b      	adds	r3, r7, r1
 800161c:	22a0      	movs	r2, #160	; 0xa0
 800161e:	0212      	lsls	r2, r2, #8
 8001620:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001622:	187b      	adds	r3, r7, r1
 8001624:	2200      	movs	r2, #0
 8001626:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001628:	187b      	adds	r3, r7, r1
 800162a:	0018      	movs	r0, r3
 800162c:	f001 fc72 	bl	8002f14 <HAL_RCC_OscConfig>
 8001630:	1e03      	subs	r3, r0, #0
 8001632:	d001      	beq.n	8001638 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8001634:	f000 fc2c 	bl	8001e90 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001638:	212c      	movs	r1, #44	; 0x2c
 800163a:	187b      	adds	r3, r7, r1
 800163c:	220f      	movs	r2, #15
 800163e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001640:	187b      	adds	r3, r7, r1
 8001642:	2200      	movs	r2, #0
 8001644:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001646:	187b      	adds	r3, r7, r1
 8001648:	2200      	movs	r2, #0
 800164a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800164c:	187b      	adds	r3, r7, r1
 800164e:	2200      	movs	r2, #0
 8001650:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001652:	187b      	adds	r3, r7, r1
 8001654:	2200      	movs	r2, #0
 8001656:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001658:	187b      	adds	r3, r7, r1
 800165a:	2100      	movs	r1, #0
 800165c:	0018      	movs	r0, r3
 800165e:	f002 f82d 	bl	80036bc <HAL_RCC_ClockConfig>
 8001662:	1e03      	subs	r3, r0, #0
 8001664:	d001      	beq.n	800166a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8001666:	f000 fc13 	bl	8001e90 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800166a:	1d3b      	adds	r3, r7, #4
 800166c:	2202      	movs	r2, #2
 800166e:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 8001670:	1d3b      	adds	r3, r7, #4
 8001672:	2204      	movs	r2, #4
 8001674:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001676:	1d3b      	adds	r3, r7, #4
 8001678:	0018      	movs	r0, r3
 800167a:	f002 fa43 	bl	8003b04 <HAL_RCCEx_PeriphCLKConfig>
 800167e:	1e03      	subs	r3, r0, #0
 8001680:	d001      	beq.n	8001686 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001682:	f000 fc05 	bl	8001e90 <Error_Handler>
  }
}
 8001686:	46c0      	nop			; (mov r8, r8)
 8001688:	46bd      	mov	sp, r7
 800168a:	b01f      	add	sp, #124	; 0x7c
 800168c:	bd90      	pop	{r4, r7, pc}
 800168e:	46c0      	nop			; (mov r8, r8)
 8001690:	40007000 	.word	0x40007000
 8001694:	ffffe7ff 	.word	0xffffe7ff

08001698 <GPIO_LEDS>:

/* USER CODE BEGIN 4 */

void GPIO_LEDS(void){
 8001698:	b580      	push	{r7, lr}
 800169a:	af00      	add	r7, sp, #0
	RCC->IOPENR |= RCC_IOPENR_GPIOBEN;
 800169c:	4b26      	ldr	r3, [pc, #152]	; (8001738 <GPIO_LEDS+0xa0>)
 800169e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016a0:	4b25      	ldr	r3, [pc, #148]	; (8001738 <GPIO_LEDS+0xa0>)
 80016a2:	2102      	movs	r1, #2
 80016a4:	430a      	orrs	r2, r1
 80016a6:	62da      	str	r2, [r3, #44]	; 0x2c
	RCC->IOPENR |= RCC_IOPENR_GPIOAEN;
 80016a8:	4b23      	ldr	r3, [pc, #140]	; (8001738 <GPIO_LEDS+0xa0>)
 80016aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016ac:	4b22      	ldr	r3, [pc, #136]	; (8001738 <GPIO_LEDS+0xa0>)
 80016ae:	2101      	movs	r1, #1
 80016b0:	430a      	orrs	r2, r1
 80016b2:	62da      	str	r2, [r3, #44]	; 0x2c

	GPIOA->MODER &= ((GPIOB->MODER & ~(GPIO_MODER_MODE5)) | (GPIO_MODER_MODE5_0));
 80016b4:	4b21      	ldr	r3, [pc, #132]	; (800173c <GPIO_LEDS+0xa4>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4a21      	ldr	r2, [pc, #132]	; (8001740 <GPIO_LEDS+0xa8>)
 80016ba:	4013      	ands	r3, r2
 80016bc:	2280      	movs	r2, #128	; 0x80
 80016be:	00d2      	lsls	r2, r2, #3
 80016c0:	431a      	orrs	r2, r3
 80016c2:	23a0      	movs	r3, #160	; 0xa0
 80016c4:	05db      	lsls	r3, r3, #23
 80016c6:	6819      	ldr	r1, [r3, #0]
 80016c8:	23a0      	movs	r3, #160	; 0xa0
 80016ca:	05db      	lsls	r3, r3, #23
 80016cc:	400a      	ands	r2, r1
 80016ce:	601a      	str	r2, [r3, #0]
	GPIOB->MODER &= ((GPIOB->MODER & ~(GPIO_MODER_MODE1)) | (GPIO_MODER_MODE1_0));
 80016d0:	4b1a      	ldr	r3, [pc, #104]	; (800173c <GPIO_LEDS+0xa4>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	220c      	movs	r2, #12
 80016d6:	4393      	bics	r3, r2
 80016d8:	2204      	movs	r2, #4
 80016da:	431a      	orrs	r2, r3
 80016dc:	4b17      	ldr	r3, [pc, #92]	; (800173c <GPIO_LEDS+0xa4>)
 80016de:	6819      	ldr	r1, [r3, #0]
 80016e0:	4b16      	ldr	r3, [pc, #88]	; (800173c <GPIO_LEDS+0xa4>)
 80016e2:	400a      	ands	r2, r1
 80016e4:	601a      	str	r2, [r3, #0]
	GPIOB->MODER &= ((GPIOB->MODER & ~(GPIO_MODER_MODE15)) | (GPIO_MODER_MODE15_0));
 80016e6:	4b15      	ldr	r3, [pc, #84]	; (800173c <GPIO_LEDS+0xa4>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	009b      	lsls	r3, r3, #2
 80016ec:	089b      	lsrs	r3, r3, #2
 80016ee:	2280      	movs	r2, #128	; 0x80
 80016f0:	05d2      	lsls	r2, r2, #23
 80016f2:	431a      	orrs	r2, r3
 80016f4:	4b11      	ldr	r3, [pc, #68]	; (800173c <GPIO_LEDS+0xa4>)
 80016f6:	6819      	ldr	r1, [r3, #0]
 80016f8:	4b10      	ldr	r3, [pc, #64]	; (800173c <GPIO_LEDS+0xa4>)
 80016fa:	400a      	ands	r2, r1
 80016fc:	601a      	str	r2, [r3, #0]
	GPIOB->MODER &= ((GPIOB->MODER & ~(GPIO_MODER_MODE3)) | (GPIO_MODER_MODE3_0));
 80016fe:	4b0f      	ldr	r3, [pc, #60]	; (800173c <GPIO_LEDS+0xa4>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	22c0      	movs	r2, #192	; 0xc0
 8001704:	4393      	bics	r3, r2
 8001706:	2240      	movs	r2, #64	; 0x40
 8001708:	431a      	orrs	r2, r3
 800170a:	4b0c      	ldr	r3, [pc, #48]	; (800173c <GPIO_LEDS+0xa4>)
 800170c:	6819      	ldr	r1, [r3, #0]
 800170e:	4b0b      	ldr	r3, [pc, #44]	; (800173c <GPIO_LEDS+0xa4>)
 8001710:	400a      	ands	r2, r1
 8001712:	601a      	str	r2, [r3, #0]
	GPIOA->MODER &= ((GPIOB->MODER & ~(GPIO_MODER_MODE10)) | (GPIO_MODER_MODE10_0));
 8001714:	4b09      	ldr	r3, [pc, #36]	; (800173c <GPIO_LEDS+0xa4>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4a0a      	ldr	r2, [pc, #40]	; (8001744 <GPIO_LEDS+0xac>)
 800171a:	4013      	ands	r3, r2
 800171c:	2280      	movs	r2, #128	; 0x80
 800171e:	0352      	lsls	r2, r2, #13
 8001720:	431a      	orrs	r2, r3
 8001722:	23a0      	movs	r3, #160	; 0xa0
 8001724:	05db      	lsls	r3, r3, #23
 8001726:	6819      	ldr	r1, [r3, #0]
 8001728:	23a0      	movs	r3, #160	; 0xa0
 800172a:	05db      	lsls	r3, r3, #23
 800172c:	400a      	ands	r2, r1
 800172e:	601a      	str	r2, [r3, #0]
}
 8001730:	46c0      	nop			; (mov r8, r8)
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
 8001736:	46c0      	nop			; (mov r8, r8)
 8001738:	40021000 	.word	0x40021000
 800173c:	50000400 	.word	0x50000400
 8001740:	fffff3ff 	.word	0xfffff3ff
 8001744:	ffcfffff 	.word	0xffcfffff

08001748 <PG_init>:

void PG_init(void){
 8001748:	b580      	push	{r7, lr}
 800174a:	af00      	add	r7, sp, #0
	RCC->IOPENR  |= RCC_IOPENR_GPIOCEN;
 800174c:	4b0a      	ldr	r3, [pc, #40]	; (8001778 <PG_init+0x30>)
 800174e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001750:	4b09      	ldr	r3, [pc, #36]	; (8001778 <PG_init+0x30>)
 8001752:	2104      	movs	r1, #4
 8001754:	430a      	orrs	r2, r1
 8001756:	62da      	str	r2, [r3, #44]	; 0x2c
	GPIOC -> MODER = (GPIO_MODER_MODE4_0)|(GPIOC->MODER & ~GPIO_MODER_MODE4);
 8001758:	4b08      	ldr	r3, [pc, #32]	; (800177c <PG_init+0x34>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a08      	ldr	r2, [pc, #32]	; (8001780 <PG_init+0x38>)
 800175e:	401a      	ands	r2, r3
 8001760:	4b06      	ldr	r3, [pc, #24]	; (800177c <PG_init+0x34>)
 8001762:	2180      	movs	r1, #128	; 0x80
 8001764:	0049      	lsls	r1, r1, #1
 8001766:	430a      	orrs	r2, r1
 8001768:	601a      	str	r2, [r3, #0]
	GPIOC->BSRR = (1U<<4);
 800176a:	4b04      	ldr	r3, [pc, #16]	; (800177c <PG_init+0x34>)
 800176c:	2210      	movs	r2, #16
 800176e:	619a      	str	r2, [r3, #24]
}
 8001770:	46c0      	nop			; (mov r8, r8)
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}
 8001776:	46c0      	nop			; (mov r8, r8)
 8001778:	40021000 	.word	0x40021000
 800177c:	50000800 	.word	0x50000800
 8001780:	fffffcff 	.word	0xfffffcff

08001784 <MENU_USB>:

void MENU_USB(uint8_t value){
 8001784:	b580      	push	{r7, lr}
 8001786:	b08a      	sub	sp, #40	; 0x28
 8001788:	af00      	add	r7, sp, #0
 800178a:	0002      	movs	r2, r0
 800178c:	1dfb      	adds	r3, r7, #7
 800178e:	701a      	strb	r2, [r3, #0]
int result;
char * ptr;
 		if (value == '\r' || value == '\n') {
 8001790:	1dfb      	adds	r3, r7, #7
 8001792:	781b      	ldrb	r3, [r3, #0]
 8001794:	2b0d      	cmp	r3, #13
 8001796:	d004      	beq.n	80017a2 <MENU_USB+0x1e>
 8001798:	1dfb      	adds	r3, r7, #7
 800179a:	781b      	ldrb	r3, [r3, #0]
 800179c:	2b0a      	cmp	r3, #10
 800179e:	d000      	beq.n	80017a2 <MENU_USB+0x1e>
 80017a0:	e291      	b.n	8001cc6 <MENU_USB+0x542>
			if (line_length > 0) {
 80017a2:	4bce      	ldr	r3, [pc, #824]	; (8001adc <MENU_USB+0x358>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d100      	bne.n	80017ac <MENU_USB+0x28>
 80017aa:	e283      	b.n	8001cb4 <MENU_USB+0x530>
				line_buffer[line_length] = '\0';
 80017ac:	4bcb      	ldr	r3, [pc, #812]	; (8001adc <MENU_USB+0x358>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4acb      	ldr	r2, [pc, #812]	; (8001ae0 <MENU_USB+0x35c>)
 80017b2:	2100      	movs	r1, #0
 80017b4:	54d1      	strb	r1, [r2, r3]
					if (strncmp(line_buffer, "run",3) == 0) {
 80017b6:	49cb      	ldr	r1, [pc, #812]	; (8001ae4 <MENU_USB+0x360>)
 80017b8:	4bc9      	ldr	r3, [pc, #804]	; (8001ae0 <MENU_USB+0x35c>)
 80017ba:	2203      	movs	r2, #3
 80017bc:	0018      	movs	r0, r3
 80017be:	f004 f94a 	bl	8005a56 <strncmp>
 80017c2:	1e03      	subs	r3, r0, #0
 80017c4:	d000      	beq.n	80017c8 <MENU_USB+0x44>
 80017c6:	e15e      	b.n	8001a86 <MENU_USB+0x302>
						splitString(line_buffer, tokens);
 80017c8:	4ac7      	ldr	r2, [pc, #796]	; (8001ae8 <MENU_USB+0x364>)
 80017ca:	4bc5      	ldr	r3, [pc, #788]	; (8001ae0 <MENU_USB+0x35c>)
 80017cc:	0011      	movs	r1, r2
 80017ce:	0018      	movs	r0, r3
 80017d0:	f000 fb08 	bl	8001de4 <splitString>
						ptr=strpbrk(tokens[1], "oo");
 80017d4:	4bc4      	ldr	r3, [pc, #784]	; (8001ae8 <MENU_USB+0x364>)
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	4ac4      	ldr	r2, [pc, #784]	; (8001aec <MENU_USB+0x368>)
 80017da:	0011      	movs	r1, r2
 80017dc:	0018      	movs	r0, r3
 80017de:	f004 f94b 	bl	8005a78 <strpbrk>
 80017e2:	0003      	movs	r3, r0
 80017e4:	60bb      	str	r3, [r7, #8]
						if(!(ptr==NULL)){
 80017e6:	68bb      	ldr	r3, [r7, #8]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d100      	bne.n	80017ee <MENU_USB+0x6a>
 80017ec:	e097      	b.n	800191e <MENU_USB+0x19a>
							for(int i=2;i<MAX_TOKENS;i++){
 80017ee:	2302      	movs	r3, #2
 80017f0:	623b      	str	r3, [r7, #32]
 80017f2:	e029      	b.n	8001848 <MENU_USB+0xc4>
								result=1;
 80017f4:	2301      	movs	r3, #1
 80017f6:	627b      	str	r3, [r7, #36]	; 0x24
								for(int j=0;j<strlen(tokens[i]);j++){
 80017f8:	2300      	movs	r3, #0
 80017fa:	61fb      	str	r3, [r7, #28]
 80017fc:	e013      	b.n	8001826 <MENU_USB+0xa2>
									if(!isdigit(tokens[i][j])){
 80017fe:	4bba      	ldr	r3, [pc, #744]	; (8001ae8 <MENU_USB+0x364>)
 8001800:	6a3a      	ldr	r2, [r7, #32]
 8001802:	0092      	lsls	r2, r2, #2
 8001804:	58d2      	ldr	r2, [r2, r3]
 8001806:	69fb      	ldr	r3, [r7, #28]
 8001808:	18d3      	adds	r3, r2, r3
 800180a:	781b      	ldrb	r3, [r3, #0]
 800180c:	1c5a      	adds	r2, r3, #1
 800180e:	4bb8      	ldr	r3, [pc, #736]	; (8001af0 <MENU_USB+0x36c>)
 8001810:	18d3      	adds	r3, r2, r3
 8001812:	781b      	ldrb	r3, [r3, #0]
 8001814:	001a      	movs	r2, r3
 8001816:	2304      	movs	r3, #4
 8001818:	4013      	ands	r3, r2
 800181a:	d101      	bne.n	8001820 <MENU_USB+0x9c>
										result=0;
 800181c:	2300      	movs	r3, #0
 800181e:	627b      	str	r3, [r7, #36]	; 0x24
								for(int j=0;j<strlen(tokens[i]);j++){
 8001820:	69fb      	ldr	r3, [r7, #28]
 8001822:	3301      	adds	r3, #1
 8001824:	61fb      	str	r3, [r7, #28]
 8001826:	4bb0      	ldr	r3, [pc, #704]	; (8001ae8 <MENU_USB+0x364>)
 8001828:	6a3a      	ldr	r2, [r7, #32]
 800182a:	0092      	lsls	r2, r2, #2
 800182c:	58d3      	ldr	r3, [r2, r3]
 800182e:	0018      	movs	r0, r3
 8001830:	f7fe fc74 	bl	800011c <strlen>
 8001834:	0002      	movs	r2, r0
 8001836:	69fb      	ldr	r3, [r7, #28]
 8001838:	429a      	cmp	r2, r3
 800183a:	d8e0      	bhi.n	80017fe <MENU_USB+0x7a>
									}
								}
								if(result==0){
 800183c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800183e:	2b00      	cmp	r3, #0
 8001840:	d006      	beq.n	8001850 <MENU_USB+0xcc>
							for(int i=2;i<MAX_TOKENS;i++){
 8001842:	6a3b      	ldr	r3, [r7, #32]
 8001844:	3301      	adds	r3, #1
 8001846:	623b      	str	r3, [r7, #32]
 8001848:	6a3b      	ldr	r3, [r7, #32]
 800184a:	2b03      	cmp	r3, #3
 800184c:	ddd2      	ble.n	80017f4 <MENU_USB+0x70>
 800184e:	e000      	b.n	8001852 <MENU_USB+0xce>
									break;
 8001850:	46c0      	nop			; (mov r8, r8)
								}
							}
							if(result!=0){
 8001852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001854:	2b00      	cmp	r3, #0
 8001856:	d05d      	beq.n	8001914 <MENU_USB+0x190>
									freq=ASCII_TO_uint8_t(tokens[MAX_TOKENS-2]);
 8001858:	4ba3      	ldr	r3, [pc, #652]	; (8001ae8 <MENU_USB+0x364>)
 800185a:	689b      	ldr	r3, [r3, #8]
 800185c:	0018      	movs	r0, r3
 800185e:	f000 fa8d 	bl	8001d7c <ASCII_TO_uint8_t>
 8001862:	0002      	movs	r2, r0
 8001864:	4ba3      	ldr	r3, [pc, #652]	; (8001af4 <MENU_USB+0x370>)
 8001866:	601a      	str	r2, [r3, #0]
									duty_cycle=ASCII_TO_uint8_t(tokens[MAX_TOKENS-1]);
 8001868:	4b9f      	ldr	r3, [pc, #636]	; (8001ae8 <MENU_USB+0x364>)
 800186a:	68db      	ldr	r3, [r3, #12]
 800186c:	0018      	movs	r0, r3
 800186e:	f000 fa85 	bl	8001d7c <ASCII_TO_uint8_t>
 8001872:	0002      	movs	r2, r0
 8001874:	4ba0      	ldr	r3, [pc, #640]	; (8001af8 <MENU_USB+0x374>)
 8001876:	601a      	str	r2, [r3, #0]
									if(freq==0 || duty_cycle==0){
 8001878:	4b9e      	ldr	r3, [pc, #632]	; (8001af4 <MENU_USB+0x370>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d003      	beq.n	8001888 <MENU_USB+0x104>
 8001880:	4b9d      	ldr	r3, [pc, #628]	; (8001af8 <MENU_USB+0x374>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d104      	bne.n	8001892 <MENU_USB+0x10e>
										printf(error_with_run);
 8001888:	4b9c      	ldr	r3, [pc, #624]	; (8001afc <MENU_USB+0x378>)
 800188a:	0018      	movs	r0, r3
 800188c:	f004 f842 	bl	8005914 <iprintf>
 8001890:	e0e8      	b.n	8001a64 <MENU_USB+0x2e0>
									}
									else if(duty_cycle>=100){
 8001892:	4b99      	ldr	r3, [pc, #612]	; (8001af8 <MENU_USB+0x374>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	2b63      	cmp	r3, #99	; 0x63
 8001898:	d904      	bls.n	80018a4 <MENU_USB+0x120>
										printf(error_with_duty_cycle);
 800189a:	4b99      	ldr	r3, [pc, #612]	; (8001b00 <MENU_USB+0x37c>)
 800189c:	0018      	movs	r0, r3
 800189e:	f004 f839 	bl	8005914 <iprintf>
 80018a2:	e0df      	b.n	8001a64 <MENU_USB+0x2e0>
									}
									else{
										Period=(float)(1000/freq);
 80018a4:	4b93      	ldr	r3, [pc, #588]	; (8001af4 <MENU_USB+0x370>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	0019      	movs	r1, r3
 80018aa:	23fa      	movs	r3, #250	; 0xfa
 80018ac:	0098      	lsls	r0, r3, #2
 80018ae:	f7fe fc47 	bl	8000140 <__udivsi3>
 80018b2:	0003      	movs	r3, r0
 80018b4:	0018      	movs	r0, r3
 80018b6:	f7ff fa29 	bl	8000d0c <__aeabi_ui2f>
 80018ba:	1c02      	adds	r2, r0, #0
 80018bc:	4b91      	ldr	r3, [pc, #580]	; (8001b04 <MENU_USB+0x380>)
 80018be:	601a      	str	r2, [r3, #0]
										Ton=(float)((Period*duty_cycle)/100);
 80018c0:	4b8d      	ldr	r3, [pc, #564]	; (8001af8 <MENU_USB+0x374>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	0018      	movs	r0, r3
 80018c6:	f7ff fa21 	bl	8000d0c <__aeabi_ui2f>
 80018ca:	1c02      	adds	r2, r0, #0
 80018cc:	4b8d      	ldr	r3, [pc, #564]	; (8001b04 <MENU_USB+0x380>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	1c19      	adds	r1, r3, #0
 80018d2:	1c10      	adds	r0, r2, #0
 80018d4:	f7fe ff0c 	bl	80006f0 <__aeabi_fmul>
 80018d8:	1c03      	adds	r3, r0, #0
 80018da:	498b      	ldr	r1, [pc, #556]	; (8001b08 <MENU_USB+0x384>)
 80018dc:	1c18      	adds	r0, r3, #0
 80018de:	f7fe fded 	bl	80004bc <__aeabi_fdiv>
 80018e2:	1c03      	adds	r3, r0, #0
 80018e4:	1c1a      	adds	r2, r3, #0
 80018e6:	4b89      	ldr	r3, [pc, #548]	; (8001b0c <MENU_USB+0x388>)
 80018e8:	601a      	str	r2, [r3, #0]
										Toff=Period-Ton;
 80018ea:	4b86      	ldr	r3, [pc, #536]	; (8001b04 <MENU_USB+0x380>)
 80018ec:	681a      	ldr	r2, [r3, #0]
 80018ee:	4b87      	ldr	r3, [pc, #540]	; (8001b0c <MENU_USB+0x388>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	1c19      	adds	r1, r3, #0
 80018f4:	1c10      	adds	r0, r2, #0
 80018f6:	f7ff f849 	bl	800098c <__aeabi_fsub>
 80018fa:	1c03      	adds	r3, r0, #0
 80018fc:	1c1a      	adds	r2, r3, #0
 80018fe:	4b84      	ldr	r3, [pc, #528]	; (8001b10 <MENU_USB+0x38c>)
 8001900:	601a      	str	r2, [r3, #0]
										state=1;
 8001902:	4b84      	ldr	r3, [pc, #528]	; (8001b14 <MENU_USB+0x390>)
 8001904:	2201      	movs	r2, #1
 8001906:	601a      	str	r2, [r3, #0]
								  		erase_data(Addr_total_pulse);
 8001908:	4b83      	ldr	r3, [pc, #524]	; (8001b18 <MENU_USB+0x394>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	0018      	movs	r0, r3
 800190e:	f7ff fbaa 	bl	8001066 <erase_data>
 8001912:	e0a7      	b.n	8001a64 <MENU_USB+0x2e0>
									}
							}
							else{
								printf(error_with_run);
 8001914:	4b79      	ldr	r3, [pc, #484]	; (8001afc <MENU_USB+0x378>)
 8001916:	0018      	movs	r0, r3
 8001918:	f003 fffc 	bl	8005914 <iprintf>
 800191c:	e0a2      	b.n	8001a64 <MENU_USB+0x2e0>
							}
						}
						else{
							for(int i=1;i<MAX_TOKENS;i++){
 800191e:	2301      	movs	r3, #1
 8001920:	61bb      	str	r3, [r7, #24]
 8001922:	e029      	b.n	8001978 <MENU_USB+0x1f4>
								result=1;
 8001924:	2301      	movs	r3, #1
 8001926:	627b      	str	r3, [r7, #36]	; 0x24
								for(int j=0;j<strlen(tokens[i]);j++){
 8001928:	2300      	movs	r3, #0
 800192a:	617b      	str	r3, [r7, #20]
 800192c:	e013      	b.n	8001956 <MENU_USB+0x1d2>
									if(!isdigit(tokens[i][j])){
 800192e:	4b6e      	ldr	r3, [pc, #440]	; (8001ae8 <MENU_USB+0x364>)
 8001930:	69ba      	ldr	r2, [r7, #24]
 8001932:	0092      	lsls	r2, r2, #2
 8001934:	58d2      	ldr	r2, [r2, r3]
 8001936:	697b      	ldr	r3, [r7, #20]
 8001938:	18d3      	adds	r3, r2, r3
 800193a:	781b      	ldrb	r3, [r3, #0]
 800193c:	1c5a      	adds	r2, r3, #1
 800193e:	4b6c      	ldr	r3, [pc, #432]	; (8001af0 <MENU_USB+0x36c>)
 8001940:	18d3      	adds	r3, r2, r3
 8001942:	781b      	ldrb	r3, [r3, #0]
 8001944:	001a      	movs	r2, r3
 8001946:	2304      	movs	r3, #4
 8001948:	4013      	ands	r3, r2
 800194a:	d101      	bne.n	8001950 <MENU_USB+0x1cc>
										result=0;
 800194c:	2300      	movs	r3, #0
 800194e:	627b      	str	r3, [r7, #36]	; 0x24
								for(int j=0;j<strlen(tokens[i]);j++){
 8001950:	697b      	ldr	r3, [r7, #20]
 8001952:	3301      	adds	r3, #1
 8001954:	617b      	str	r3, [r7, #20]
 8001956:	4b64      	ldr	r3, [pc, #400]	; (8001ae8 <MENU_USB+0x364>)
 8001958:	69ba      	ldr	r2, [r7, #24]
 800195a:	0092      	lsls	r2, r2, #2
 800195c:	58d3      	ldr	r3, [r2, r3]
 800195e:	0018      	movs	r0, r3
 8001960:	f7fe fbdc 	bl	800011c <strlen>
 8001964:	0002      	movs	r2, r0
 8001966:	697b      	ldr	r3, [r7, #20]
 8001968:	429a      	cmp	r2, r3
 800196a:	d8e0      	bhi.n	800192e <MENU_USB+0x1aa>
									}
								}
								if(result==0){
 800196c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800196e:	2b00      	cmp	r3, #0
 8001970:	d006      	beq.n	8001980 <MENU_USB+0x1fc>
							for(int i=1;i<MAX_TOKENS;i++){
 8001972:	69bb      	ldr	r3, [r7, #24]
 8001974:	3301      	adds	r3, #1
 8001976:	61bb      	str	r3, [r7, #24]
 8001978:	69bb      	ldr	r3, [r7, #24]
 800197a:	2b03      	cmp	r3, #3
 800197c:	ddd2      	ble.n	8001924 <MENU_USB+0x1a0>
 800197e:	e000      	b.n	8001982 <MENU_USB+0x1fe>
									break;
 8001980:	46c0      	nop			; (mov r8, r8)
								}
							}
								if(result!=0){
 8001982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001984:	2b00      	cmp	r3, #0
 8001986:	d069      	beq.n	8001a5c <MENU_USB+0x2d8>
									num=ASCII_TO_uint8_t(tokens[MAX_TOKENS-3]);
 8001988:	4b57      	ldr	r3, [pc, #348]	; (8001ae8 <MENU_USB+0x364>)
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	0018      	movs	r0, r3
 800198e:	f000 f9f5 	bl	8001d7c <ASCII_TO_uint8_t>
 8001992:	0002      	movs	r2, r0
 8001994:	4b61      	ldr	r3, [pc, #388]	; (8001b1c <MENU_USB+0x398>)
 8001996:	601a      	str	r2, [r3, #0]
									freq=ASCII_TO_uint8_t(tokens[MAX_TOKENS-2]);
 8001998:	4b53      	ldr	r3, [pc, #332]	; (8001ae8 <MENU_USB+0x364>)
 800199a:	689b      	ldr	r3, [r3, #8]
 800199c:	0018      	movs	r0, r3
 800199e:	f000 f9ed 	bl	8001d7c <ASCII_TO_uint8_t>
 80019a2:	0002      	movs	r2, r0
 80019a4:	4b53      	ldr	r3, [pc, #332]	; (8001af4 <MENU_USB+0x370>)
 80019a6:	601a      	str	r2, [r3, #0]
									duty_cycle=ASCII_TO_uint8_t(tokens[MAX_TOKENS-1]);
 80019a8:	4b4f      	ldr	r3, [pc, #316]	; (8001ae8 <MENU_USB+0x364>)
 80019aa:	68db      	ldr	r3, [r3, #12]
 80019ac:	0018      	movs	r0, r3
 80019ae:	f000 f9e5 	bl	8001d7c <ASCII_TO_uint8_t>
 80019b2:	0002      	movs	r2, r0
 80019b4:	4b50      	ldr	r3, [pc, #320]	; (8001af8 <MENU_USB+0x374>)
 80019b6:	601a      	str	r2, [r3, #0]
									if(num==0 || freq==0 || duty_cycle==0 ){
 80019b8:	4b58      	ldr	r3, [pc, #352]	; (8001b1c <MENU_USB+0x398>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d007      	beq.n	80019d0 <MENU_USB+0x24c>
 80019c0:	4b4c      	ldr	r3, [pc, #304]	; (8001af4 <MENU_USB+0x370>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d003      	beq.n	80019d0 <MENU_USB+0x24c>
 80019c8:	4b4b      	ldr	r3, [pc, #300]	; (8001af8 <MENU_USB+0x374>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d104      	bne.n	80019da <MENU_USB+0x256>
										printf(error_with_run);
 80019d0:	4b4a      	ldr	r3, [pc, #296]	; (8001afc <MENU_USB+0x378>)
 80019d2:	0018      	movs	r0, r3
 80019d4:	f003 ff9e 	bl	8005914 <iprintf>
 80019d8:	e044      	b.n	8001a64 <MENU_USB+0x2e0>
									}
									else if(duty_cycle>=100){
 80019da:	4b47      	ldr	r3, [pc, #284]	; (8001af8 <MENU_USB+0x374>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	2b63      	cmp	r3, #99	; 0x63
 80019e0:	d904      	bls.n	80019ec <MENU_USB+0x268>
										printf(error_with_duty_cycle);
 80019e2:	4b47      	ldr	r3, [pc, #284]	; (8001b00 <MENU_USB+0x37c>)
 80019e4:	0018      	movs	r0, r3
 80019e6:	f003 ff95 	bl	8005914 <iprintf>
 80019ea:	e03b      	b.n	8001a64 <MENU_USB+0x2e0>
									}
									else{
										Period=(float)(1000/freq);
 80019ec:	4b41      	ldr	r3, [pc, #260]	; (8001af4 <MENU_USB+0x370>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	0019      	movs	r1, r3
 80019f2:	23fa      	movs	r3, #250	; 0xfa
 80019f4:	0098      	lsls	r0, r3, #2
 80019f6:	f7fe fba3 	bl	8000140 <__udivsi3>
 80019fa:	0003      	movs	r3, r0
 80019fc:	0018      	movs	r0, r3
 80019fe:	f7ff f985 	bl	8000d0c <__aeabi_ui2f>
 8001a02:	1c02      	adds	r2, r0, #0
 8001a04:	4b3f      	ldr	r3, [pc, #252]	; (8001b04 <MENU_USB+0x380>)
 8001a06:	601a      	str	r2, [r3, #0]
										Ton=(float)((Period*duty_cycle)/100);
 8001a08:	4b3b      	ldr	r3, [pc, #236]	; (8001af8 <MENU_USB+0x374>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	0018      	movs	r0, r3
 8001a0e:	f7ff f97d 	bl	8000d0c <__aeabi_ui2f>
 8001a12:	1c02      	adds	r2, r0, #0
 8001a14:	4b3b      	ldr	r3, [pc, #236]	; (8001b04 <MENU_USB+0x380>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	1c19      	adds	r1, r3, #0
 8001a1a:	1c10      	adds	r0, r2, #0
 8001a1c:	f7fe fe68 	bl	80006f0 <__aeabi_fmul>
 8001a20:	1c03      	adds	r3, r0, #0
 8001a22:	4939      	ldr	r1, [pc, #228]	; (8001b08 <MENU_USB+0x384>)
 8001a24:	1c18      	adds	r0, r3, #0
 8001a26:	f7fe fd49 	bl	80004bc <__aeabi_fdiv>
 8001a2a:	1c03      	adds	r3, r0, #0
 8001a2c:	1c1a      	adds	r2, r3, #0
 8001a2e:	4b37      	ldr	r3, [pc, #220]	; (8001b0c <MENU_USB+0x388>)
 8001a30:	601a      	str	r2, [r3, #0]
										Toff=Period-Ton;
 8001a32:	4b34      	ldr	r3, [pc, #208]	; (8001b04 <MENU_USB+0x380>)
 8001a34:	681a      	ldr	r2, [r3, #0]
 8001a36:	4b35      	ldr	r3, [pc, #212]	; (8001b0c <MENU_USB+0x388>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	1c19      	adds	r1, r3, #0
 8001a3c:	1c10      	adds	r0, r2, #0
 8001a3e:	f7fe ffa5 	bl	800098c <__aeabi_fsub>
 8001a42:	1c03      	adds	r3, r0, #0
 8001a44:	1c1a      	adds	r2, r3, #0
 8001a46:	4b32      	ldr	r3, [pc, #200]	; (8001b10 <MENU_USB+0x38c>)
 8001a48:	601a      	str	r2, [r3, #0]
								  		erase_data(Addr_total_pulse);
 8001a4a:	4b33      	ldr	r3, [pc, #204]	; (8001b18 <MENU_USB+0x394>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	0018      	movs	r0, r3
 8001a50:	f7ff fb09 	bl	8001066 <erase_data>
										state=2;
 8001a54:	4b2f      	ldr	r3, [pc, #188]	; (8001b14 <MENU_USB+0x390>)
 8001a56:	2202      	movs	r2, #2
 8001a58:	601a      	str	r2, [r3, #0]
 8001a5a:	e003      	b.n	8001a64 <MENU_USB+0x2e0>
									}
								}
								else{
									printf(error_with_run);
 8001a5c:	4b27      	ldr	r3, [pc, #156]	; (8001afc <MENU_USB+0x378>)
 8001a5e:	0018      	movs	r0, r3
 8001a60:	f003 ff58 	bl	8005914 <iprintf>
								}
						}
						for (int i = 0; i < sizeof(tokens) / sizeof(tokens[0]); i++) {
 8001a64:	2300      	movs	r3, #0
 8001a66:	613b      	str	r3, [r7, #16]
 8001a68:	e009      	b.n	8001a7e <MENU_USB+0x2fa>
							 free(tokens[i]);
 8001a6a:	4b1f      	ldr	r3, [pc, #124]	; (8001ae8 <MENU_USB+0x364>)
 8001a6c:	693a      	ldr	r2, [r7, #16]
 8001a6e:	0092      	lsls	r2, r2, #2
 8001a70:	58d3      	ldr	r3, [r2, r3]
 8001a72:	0018      	movs	r0, r3
 8001a74:	f003 fdde 	bl	8005634 <free>
						for (int i = 0; i < sizeof(tokens) / sizeof(tokens[0]); i++) {
 8001a78:	693b      	ldr	r3, [r7, #16]
 8001a7a:	3301      	adds	r3, #1
 8001a7c:	613b      	str	r3, [r7, #16]
 8001a7e:	693b      	ldr	r3, [r7, #16]
 8001a80:	2b03      	cmp	r3, #3
 8001a82:	d9f2      	bls.n	8001a6a <MENU_USB+0x2e6>
 8001a84:	e100      	b.n	8001c88 <MENU_USB+0x504>
						}
				}
				else if (strcmp(line_buffer, "stop") == 0){
 8001a86:	4a26      	ldr	r2, [pc, #152]	; (8001b20 <MENU_USB+0x39c>)
 8001a88:	4b15      	ldr	r3, [pc, #84]	; (8001ae0 <MENU_USB+0x35c>)
 8001a8a:	0011      	movs	r1, r2
 8001a8c:	0018      	movs	r0, r3
 8001a8e:	f7fe fb3b 	bl	8000108 <strcmp>
 8001a92:	1e03      	subs	r3, r0, #0
 8001a94:	d103      	bne.n	8001a9e <MENU_USB+0x31a>
					state=3;
 8001a96:	4b1f      	ldr	r3, [pc, #124]	; (8001b14 <MENU_USB+0x390>)
 8001a98:	2203      	movs	r2, #3
 8001a9a:	601a      	str	r2, [r3, #0]
 8001a9c:	e0f4      	b.n	8001c88 <MENU_USB+0x504>
				}
				else if (strcmp(line_buffer, "read") == 0){
 8001a9e:	4a21      	ldr	r2, [pc, #132]	; (8001b24 <MENU_USB+0x3a0>)
 8001aa0:	4b0f      	ldr	r3, [pc, #60]	; (8001ae0 <MENU_USB+0x35c>)
 8001aa2:	0011      	movs	r1, r2
 8001aa4:	0018      	movs	r0, r3
 8001aa6:	f7fe fb2f 	bl	8000108 <strcmp>
 8001aaa:	1e03      	subs	r3, r0, #0
 8001aac:	d106      	bne.n	8001abc <MENU_USB+0x338>
					pvd=0;
 8001aae:	4b1e      	ldr	r3, [pc, #120]	; (8001b28 <MENU_USB+0x3a4>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	601a      	str	r2, [r3, #0]
					state=4;
 8001ab4:	4b17      	ldr	r3, [pc, #92]	; (8001b14 <MENU_USB+0x390>)
 8001ab6:	2204      	movs	r2, #4
 8001ab8:	601a      	str	r2, [r3, #0]
 8001aba:	e0e5      	b.n	8001c88 <MENU_USB+0x504>
				}
				else if (strcmp(line_buffer, "test") == 0){
 8001abc:	4a1b      	ldr	r2, [pc, #108]	; (8001b2c <MENU_USB+0x3a8>)
 8001abe:	4b08      	ldr	r3, [pc, #32]	; (8001ae0 <MENU_USB+0x35c>)
 8001ac0:	0011      	movs	r1, r2
 8001ac2:	0018      	movs	r0, r3
 8001ac4:	f7fe fb20 	bl	8000108 <strcmp>
 8001ac8:	1e03      	subs	r3, r0, #0
 8001aca:	d131      	bne.n	8001b30 <MENU_USB+0x3ac>
					pvd=1;
 8001acc:	4b16      	ldr	r3, [pc, #88]	; (8001b28 <MENU_USB+0x3a4>)
 8001ace:	2201      	movs	r2, #1
 8001ad0:	601a      	str	r2, [r3, #0]
					state=3;
 8001ad2:	4b10      	ldr	r3, [pc, #64]	; (8001b14 <MENU_USB+0x390>)
 8001ad4:	2203      	movs	r2, #3
 8001ad6:	601a      	str	r2, [r3, #0]
 8001ad8:	e0d6      	b.n	8001c88 <MENU_USB+0x504>
 8001ada:	46c0      	nop			; (mov r8, r8)
 8001adc:	20000248 	.word	0x20000248
 8001ae0:	200001e4 	.word	0x200001e4
 8001ae4:	08006b54 	.word	0x08006b54
 8001ae8:	20000238 	.word	0x20000238
 8001aec:	08006b58 	.word	0x08006b58
 8001af0:	08006c84 	.word	0x08006c84
 8001af4:	200001b4 	.word	0x200001b4
 8001af8:	200001b8 	.word	0x200001b8
 8001afc:	2000009c 	.word	0x2000009c
 8001b00:	200000f0 	.word	0x200000f0
 8001b04:	200001e0 	.word	0x200001e0
 8001b08:	42c80000 	.word	0x42c80000
 8001b0c:	200001d8 	.word	0x200001d8
 8001b10:	200001dc 	.word	0x200001dc
 8001b14:	2000024c 	.word	0x2000024c
 8001b18:	20000004 	.word	0x20000004
 8001b1c:	200001b0 	.word	0x200001b0
 8001b20:	08006b5c 	.word	0x08006b5c
 8001b24:	08006b64 	.word	0x08006b64
 8001b28:	2000001c 	.word	0x2000001c
 8001b2c:	08006b6c 	.word	0x08006b6c
				}
				else if (strcmp(line_buffer, "cont") == 0){
 8001b30:	4a7c      	ldr	r2, [pc, #496]	; (8001d24 <MENU_USB+0x5a0>)
 8001b32:	4b7d      	ldr	r3, [pc, #500]	; (8001d28 <MENU_USB+0x5a4>)
 8001b34:	0011      	movs	r1, r2
 8001b36:	0018      	movs	r0, r3
 8001b38:	f7fe fae6 	bl	8000108 <strcmp>
 8001b3c:	1e03      	subs	r3, r0, #0
 8001b3e:	d000      	beq.n	8001b42 <MENU_USB+0x3be>
 8001b40:	e09a      	b.n	8001c78 <MENU_USB+0x4f4>
					if(flag==1){
 8001b42:	4b7a      	ldr	r3, [pc, #488]	; (8001d2c <MENU_USB+0x5a8>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	2b01      	cmp	r3, #1
 8001b48:	d14b      	bne.n	8001be2 <MENU_USB+0x45e>
                    	num=read_data(Addr_num);
 8001b4a:	4b79      	ldr	r3, [pc, #484]	; (8001d30 <MENU_USB+0x5ac>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	0018      	movs	r0, r3
 8001b50:	f7ff fa7d 	bl	800104e <read_data>
 8001b54:	0002      	movs	r2, r0
 8001b56:	4b77      	ldr	r3, [pc, #476]	; (8001d34 <MENU_USB+0x5b0>)
 8001b58:	601a      	str	r2, [r3, #0]
                    	if(num!=0){
 8001b5a:	4b76      	ldr	r3, [pc, #472]	; (8001d34 <MENU_USB+0x5b0>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d038      	beq.n	8001bd4 <MENU_USB+0x450>
							total_pulses=read_data(Addr_total_pulse);
 8001b62:	4b75      	ldr	r3, [pc, #468]	; (8001d38 <MENU_USB+0x5b4>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	0018      	movs	r0, r3
 8001b68:	f7ff fa71 	bl	800104e <read_data>
 8001b6c:	0002      	movs	r2, r0
 8001b6e:	4b73      	ldr	r3, [pc, #460]	; (8001d3c <MENU_USB+0x5b8>)
 8001b70:	601a      	str	r2, [r3, #0]
							Ton=read_data(Addr_Ton);
 8001b72:	4b73      	ldr	r3, [pc, #460]	; (8001d40 <MENU_USB+0x5bc>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	0018      	movs	r0, r3
 8001b78:	f7ff fa69 	bl	800104e <read_data>
 8001b7c:	0003      	movs	r3, r0
 8001b7e:	0018      	movs	r0, r3
 8001b80:	f7ff f8c4 	bl	8000d0c <__aeabi_ui2f>
 8001b84:	1c02      	adds	r2, r0, #0
 8001b86:	4b6f      	ldr	r3, [pc, #444]	; (8001d44 <MENU_USB+0x5c0>)
 8001b88:	601a      	str	r2, [r3, #0]
							Toff=read_data(Addr_Toff);
 8001b8a:	4b6f      	ldr	r3, [pc, #444]	; (8001d48 <MENU_USB+0x5c4>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	0018      	movs	r0, r3
 8001b90:	f7ff fa5d 	bl	800104e <read_data>
 8001b94:	0003      	movs	r3, r0
 8001b96:	0018      	movs	r0, r3
 8001b98:	f7ff f8b8 	bl	8000d0c <__aeabi_ui2f>
 8001b9c:	1c02      	adds	r2, r0, #0
 8001b9e:	4b6b      	ldr	r3, [pc, #428]	; (8001d4c <MENU_USB+0x5c8>)
 8001ba0:	601a      	str	r2, [r3, #0]
							duty_cycle=read_data(Addr_duty_cycle);
 8001ba2:	4b6b      	ldr	r3, [pc, #428]	; (8001d50 <MENU_USB+0x5cc>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	0018      	movs	r0, r3
 8001ba8:	f7ff fa51 	bl	800104e <read_data>
 8001bac:	0002      	movs	r2, r0
 8001bae:	4b69      	ldr	r3, [pc, #420]	; (8001d54 <MENU_USB+0x5d0>)
 8001bb0:	601a      	str	r2, [r3, #0]
							freq=read_data(Addr_freq);
 8001bb2:	4b69      	ldr	r3, [pc, #420]	; (8001d58 <MENU_USB+0x5d4>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	0018      	movs	r0, r3
 8001bb8:	f7ff fa49 	bl	800104e <read_data>
 8001bbc:	0002      	movs	r2, r0
 8001bbe:	4b67      	ldr	r3, [pc, #412]	; (8001d5c <MENU_USB+0x5d8>)
 8001bc0:	601a      	str	r2, [r3, #0]
							erase_data(Addr_total_pulse);
 8001bc2:	4b5d      	ldr	r3, [pc, #372]	; (8001d38 <MENU_USB+0x5b4>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	0018      	movs	r0, r3
 8001bc8:	f7ff fa4d 	bl	8001066 <erase_data>
							state=2;
 8001bcc:	4b64      	ldr	r3, [pc, #400]	; (8001d60 <MENU_USB+0x5dc>)
 8001bce:	2202      	movs	r2, #2
 8001bd0:	601a      	str	r2, [r3, #0]
 8001bd2:	e002      	b.n	8001bda <MENU_USB+0x456>
                    	}
                    	else{
                    		state=0;
 8001bd4:	4b62      	ldr	r3, [pc, #392]	; (8001d60 <MENU_USB+0x5dc>)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	601a      	str	r2, [r3, #0]
                    	}
                        flag=0;
 8001bda:	4b54      	ldr	r3, [pc, #336]	; (8001d2c <MENU_USB+0x5a8>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	601a      	str	r2, [r3, #0]
 8001be0:	e052      	b.n	8001c88 <MENU_USB+0x504>
					}
					else if(flag==2){
 8001be2:	4b52      	ldr	r3, [pc, #328]	; (8001d2c <MENU_USB+0x5a8>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	2b02      	cmp	r3, #2
 8001be8:	d14e      	bne.n	8001c88 <MENU_USB+0x504>
						if(read_data(Addr_Ton)>0){
 8001bea:	4b55      	ldr	r3, [pc, #340]	; (8001d40 <MENU_USB+0x5bc>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	0018      	movs	r0, r3
 8001bf0:	f7ff fa2d 	bl	800104e <read_data>
 8001bf4:	1e03      	subs	r3, r0, #0
 8001bf6:	d038      	beq.n	8001c6a <MENU_USB+0x4e6>
							total_pulses=read_data(Addr_total_pulse);
 8001bf8:	4b4f      	ldr	r3, [pc, #316]	; (8001d38 <MENU_USB+0x5b4>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	0018      	movs	r0, r3
 8001bfe:	f7ff fa26 	bl	800104e <read_data>
 8001c02:	0002      	movs	r2, r0
 8001c04:	4b4d      	ldr	r3, [pc, #308]	; (8001d3c <MENU_USB+0x5b8>)
 8001c06:	601a      	str	r2, [r3, #0]
							Ton=read_data(Addr_Ton);
 8001c08:	4b4d      	ldr	r3, [pc, #308]	; (8001d40 <MENU_USB+0x5bc>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	0018      	movs	r0, r3
 8001c0e:	f7ff fa1e 	bl	800104e <read_data>
 8001c12:	0003      	movs	r3, r0
 8001c14:	0018      	movs	r0, r3
 8001c16:	f7ff f879 	bl	8000d0c <__aeabi_ui2f>
 8001c1a:	1c02      	adds	r2, r0, #0
 8001c1c:	4b49      	ldr	r3, [pc, #292]	; (8001d44 <MENU_USB+0x5c0>)
 8001c1e:	601a      	str	r2, [r3, #0]
							Toff=read_data(Addr_Toff);
 8001c20:	4b49      	ldr	r3, [pc, #292]	; (8001d48 <MENU_USB+0x5c4>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	0018      	movs	r0, r3
 8001c26:	f7ff fa12 	bl	800104e <read_data>
 8001c2a:	0003      	movs	r3, r0
 8001c2c:	0018      	movs	r0, r3
 8001c2e:	f7ff f86d 	bl	8000d0c <__aeabi_ui2f>
 8001c32:	1c02      	adds	r2, r0, #0
 8001c34:	4b45      	ldr	r3, [pc, #276]	; (8001d4c <MENU_USB+0x5c8>)
 8001c36:	601a      	str	r2, [r3, #0]
							duty_cycle=read_data(Addr_duty_cycle);
 8001c38:	4b45      	ldr	r3, [pc, #276]	; (8001d50 <MENU_USB+0x5cc>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	0018      	movs	r0, r3
 8001c3e:	f7ff fa06 	bl	800104e <read_data>
 8001c42:	0002      	movs	r2, r0
 8001c44:	4b43      	ldr	r3, [pc, #268]	; (8001d54 <MENU_USB+0x5d0>)
 8001c46:	601a      	str	r2, [r3, #0]
							freq=read_data(Addr_freq);
 8001c48:	4b43      	ldr	r3, [pc, #268]	; (8001d58 <MENU_USB+0x5d4>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	0018      	movs	r0, r3
 8001c4e:	f7ff f9fe 	bl	800104e <read_data>
 8001c52:	0002      	movs	r2, r0
 8001c54:	4b41      	ldr	r3, [pc, #260]	; (8001d5c <MENU_USB+0x5d8>)
 8001c56:	601a      	str	r2, [r3, #0]
							erase_data(Addr_total_pulse);
 8001c58:	4b37      	ldr	r3, [pc, #220]	; (8001d38 <MENU_USB+0x5b4>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	0018      	movs	r0, r3
 8001c5e:	f7ff fa02 	bl	8001066 <erase_data>
							state=1;
 8001c62:	4b3f      	ldr	r3, [pc, #252]	; (8001d60 <MENU_USB+0x5dc>)
 8001c64:	2201      	movs	r2, #1
 8001c66:	601a      	str	r2, [r3, #0]
 8001c68:	e002      	b.n	8001c70 <MENU_USB+0x4ec>
						}
						else{
							state=0;
 8001c6a:	4b3d      	ldr	r3, [pc, #244]	; (8001d60 <MENU_USB+0x5dc>)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	601a      	str	r2, [r3, #0]
						}
                      flag=0;
 8001c70:	4b2e      	ldr	r3, [pc, #184]	; (8001d2c <MENU_USB+0x5a8>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	601a      	str	r2, [r3, #0]
 8001c76:	e007      	b.n	8001c88 <MENU_USB+0x504>
					}
				}
				else {
					printf(error);
 8001c78:	4b3a      	ldr	r3, [pc, #232]	; (8001d64 <MENU_USB+0x5e0>)
 8001c7a:	0018      	movs	r0, r3
 8001c7c:	f003 fe4a 	bl	8005914 <iprintf>
					printf( menu);
 8001c80:	4b39      	ldr	r3, [pc, #228]	; (8001d68 <MENU_USB+0x5e4>)
 8001c82:	0018      	movs	r0, r3
 8001c84:	f003 fe46 	bl	8005914 <iprintf>
				}
				printf("\n\r");
 8001c88:	4b38      	ldr	r3, [pc, #224]	; (8001d6c <MENU_USB+0x5e8>)
 8001c8a:	0018      	movs	r0, r3
 8001c8c:	f003 fe42 	bl	8005914 <iprintf>
				for(int i;i<line_length;i++){
 8001c90:	e007      	b.n	8001ca2 <MENU_USB+0x51e>
					line_buffer[i]='\0';
 8001c92:	4a25      	ldr	r2, [pc, #148]	; (8001d28 <MENU_USB+0x5a4>)
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	18d3      	adds	r3, r2, r3
 8001c98:	2200      	movs	r2, #0
 8001c9a:	701a      	strb	r2, [r3, #0]
				for(int i;i<line_length;i++){
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	3301      	adds	r3, #1
 8001ca0:	60fb      	str	r3, [r7, #12]
 8001ca2:	68fa      	ldr	r2, [r7, #12]
 8001ca4:	4b32      	ldr	r3, [pc, #200]	; (8001d70 <MENU_USB+0x5ec>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	429a      	cmp	r2, r3
 8001caa:	d3f2      	bcc.n	8001c92 <MENU_USB+0x50e>
					}
				line_length = 0;
 8001cac:	4b30      	ldr	r3, [pc, #192]	; (8001d70 <MENU_USB+0x5ec>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	601a      	str	r2, [r3, #0]
			if (line_length > 0) {
 8001cb2:	e033      	b.n	8001d1c <MENU_USB+0x598>
			}
			else{
				printf(error);
 8001cb4:	4b2b      	ldr	r3, [pc, #172]	; (8001d64 <MENU_USB+0x5e0>)
 8001cb6:	0018      	movs	r0, r3
 8001cb8:	f003 fe2c 	bl	8005914 <iprintf>
				printf(menu);
 8001cbc:	4b2a      	ldr	r3, [pc, #168]	; (8001d68 <MENU_USB+0x5e4>)
 8001cbe:	0018      	movs	r0, r3
 8001cc0:	f003 fe28 	bl	8005914 <iprintf>
			if (line_length > 0) {
 8001cc4:	e02a      	b.n	8001d1c <MENU_USB+0x598>
			}
		}
 		else if (value == '\177') {
 8001cc6:	1dfb      	adds	r3, r7, #7
 8001cc8:	781b      	ldrb	r3, [r3, #0]
 8001cca:	2b7f      	cmp	r3, #127	; 0x7f
 8001ccc:	d10d      	bne.n	8001cea <MENU_USB+0x566>
 		            if (line_length > 0) {
 8001cce:	4b28      	ldr	r3, [pc, #160]	; (8001d70 <MENU_USB+0x5ec>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d022      	beq.n	8001d1c <MENU_USB+0x598>
 		            	line_length--;
 8001cd6:	4b26      	ldr	r3, [pc, #152]	; (8001d70 <MENU_USB+0x5ec>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	1e5a      	subs	r2, r3, #1
 8001cdc:	4b24      	ldr	r3, [pc, #144]	; (8001d70 <MENU_USB+0x5ec>)
 8001cde:	601a      	str	r2, [r3, #0]
 		            	printf("\177 \177");
 8001ce0:	4b24      	ldr	r3, [pc, #144]	; (8001d74 <MENU_USB+0x5f0>)
 8001ce2:	0018      	movs	r0, r3
 8001ce4:	f003 fe16 	bl	8005914 <iprintf>
				printf(error);
				printf(error_with_lenght);
			}
			line_buffer[line_length++] = value;
		}
}
 8001ce8:	e018      	b.n	8001d1c <MENU_USB+0x598>
			if (line_length >= LINE_MAX_LENGTH) {
 8001cea:	4b21      	ldr	r3, [pc, #132]	; (8001d70 <MENU_USB+0x5ec>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	2b4f      	cmp	r3, #79	; 0x4f
 8001cf0:	d90a      	bls.n	8001d08 <MENU_USB+0x584>
				line_length = 0;
 8001cf2:	4b1f      	ldr	r3, [pc, #124]	; (8001d70 <MENU_USB+0x5ec>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	601a      	str	r2, [r3, #0]
				printf(error);
 8001cf8:	4b1a      	ldr	r3, [pc, #104]	; (8001d64 <MENU_USB+0x5e0>)
 8001cfa:	0018      	movs	r0, r3
 8001cfc:	f003 fe0a 	bl	8005914 <iprintf>
				printf(error_with_lenght);
 8001d00:	4b1d      	ldr	r3, [pc, #116]	; (8001d78 <MENU_USB+0x5f4>)
 8001d02:	0018      	movs	r0, r3
 8001d04:	f003 fe06 	bl	8005914 <iprintf>
			line_buffer[line_length++] = value;
 8001d08:	4b19      	ldr	r3, [pc, #100]	; (8001d70 <MENU_USB+0x5ec>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	1c59      	adds	r1, r3, #1
 8001d0e:	4a18      	ldr	r2, [pc, #96]	; (8001d70 <MENU_USB+0x5ec>)
 8001d10:	6011      	str	r1, [r2, #0]
 8001d12:	4a05      	ldr	r2, [pc, #20]	; (8001d28 <MENU_USB+0x5a4>)
 8001d14:	1df9      	adds	r1, r7, #7
 8001d16:	7809      	ldrb	r1, [r1, #0]
 8001d18:	54d1      	strb	r1, [r2, r3]
}
 8001d1a:	e7ff      	b.n	8001d1c <MENU_USB+0x598>
 8001d1c:	46c0      	nop			; (mov r8, r8)
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	b00a      	add	sp, #40	; 0x28
 8001d22:	bd80      	pop	{r7, pc}
 8001d24:	08006b74 	.word	0x08006b74
 8001d28:	200001e4 	.word	0x200001e4
 8001d2c:	20000018 	.word	0x20000018
 8001d30:	20000000 	.word	0x20000000
 8001d34:	200001b0 	.word	0x200001b0
 8001d38:	20000004 	.word	0x20000004
 8001d3c:	200001d4 	.word	0x200001d4
 8001d40:	20000008 	.word	0x20000008
 8001d44:	200001d8 	.word	0x200001d8
 8001d48:	2000000c 	.word	0x2000000c
 8001d4c:	200001dc 	.word	0x200001dc
 8001d50:	20000014 	.word	0x20000014
 8001d54:	200001b8 	.word	0x200001b8
 8001d58:	20000010 	.word	0x20000010
 8001d5c:	200001b4 	.word	0x200001b4
 8001d60:	2000024c 	.word	0x2000024c
 8001d64:	2000008c 	.word	0x2000008c
 8001d68:	20000020 	.word	0x20000020
 8001d6c:	08006b0c 	.word	0x08006b0c
 8001d70:	20000248 	.word	0x20000248
 8001d74:	08006b7c 	.word	0x08006b7c
 8001d78:	20000114 	.word	0x20000114

08001d7c <ASCII_TO_uint8_t>:

uint32_t ASCII_TO_uint8_t(const char *table){
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b086      	sub	sp, #24
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
	uint32_t result = 0;
 8001d84:	2300      	movs	r3, #0
 8001d86:	617b      	str	r3, [r7, #20]
	uint32_t numeric_value=0;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	60fb      	str	r3, [r7, #12]
    int size = sizeof(table) / sizeof(char);
 8001d8c:	2304      	movs	r3, #4
 8001d8e:	60bb      	str	r3, [r7, #8]
    for (int i = 0; i < size; i++) {
 8001d90:	2300      	movs	r3, #0
 8001d92:	613b      	str	r3, [r7, #16]
 8001d94:	e01d      	b.n	8001dd2 <ASCII_TO_uint8_t+0x56>
    	if(table[i]==' ' || table[i]=='\0'){
 8001d96:	693b      	ldr	r3, [r7, #16]
 8001d98:	687a      	ldr	r2, [r7, #4]
 8001d9a:	18d3      	adds	r3, r2, r3
 8001d9c:	781b      	ldrb	r3, [r3, #0]
 8001d9e:	2b20      	cmp	r3, #32
 8001da0:	d01b      	beq.n	8001dda <ASCII_TO_uint8_t+0x5e>
 8001da2:	693b      	ldr	r3, [r7, #16]
 8001da4:	687a      	ldr	r2, [r7, #4]
 8001da6:	18d3      	adds	r3, r2, r3
 8001da8:	781b      	ldrb	r3, [r3, #0]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d015      	beq.n	8001dda <ASCII_TO_uint8_t+0x5e>
    		break;
    	}
    	else{
        	numeric_value = table[i] - '0';
 8001dae:	693b      	ldr	r3, [r7, #16]
 8001db0:	687a      	ldr	r2, [r7, #4]
 8001db2:	18d3      	adds	r3, r2, r3
 8001db4:	781b      	ldrb	r3, [r3, #0]
 8001db6:	3b30      	subs	r3, #48	; 0x30
 8001db8:	60fb      	str	r3, [r7, #12]
            result = result * 10 + numeric_value;
 8001dba:	697a      	ldr	r2, [r7, #20]
 8001dbc:	0013      	movs	r3, r2
 8001dbe:	009b      	lsls	r3, r3, #2
 8001dc0:	189b      	adds	r3, r3, r2
 8001dc2:	005b      	lsls	r3, r3, #1
 8001dc4:	001a      	movs	r2, r3
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	189b      	adds	r3, r3, r2
 8001dca:	617b      	str	r3, [r7, #20]
    for (int i = 0; i < size; i++) {
 8001dcc:	693b      	ldr	r3, [r7, #16]
 8001dce:	3301      	adds	r3, #1
 8001dd0:	613b      	str	r3, [r7, #16]
 8001dd2:	693a      	ldr	r2, [r7, #16]
 8001dd4:	68bb      	ldr	r3, [r7, #8]
 8001dd6:	429a      	cmp	r2, r3
 8001dd8:	dbdd      	blt.n	8001d96 <ASCII_TO_uint8_t+0x1a>
    	}
    }
    return result;
 8001dda:	697b      	ldr	r3, [r7, #20]
}
 8001ddc:	0018      	movs	r0, r3
 8001dde:	46bd      	mov	sp, r7
 8001de0:	b006      	add	sp, #24
 8001de2:	bd80      	pop	{r7, pc}

08001de4 <splitString>:

void splitString(const char* input_string, char** tokens) {
 8001de4:	b590      	push	{r4, r7, lr}
 8001de6:	b087      	sub	sp, #28
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
 8001dec:	6039      	str	r1, [r7, #0]
	const char delimiters[] = " \r\n";
 8001dee:	2408      	movs	r4, #8
 8001df0:	193b      	adds	r3, r7, r4
 8001df2:	4a1b      	ldr	r2, [pc, #108]	; (8001e60 <splitString+0x7c>)
 8001df4:	601a      	str	r2, [r3, #0]
    char* copy_of_input = strdup(input_string);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	0018      	movs	r0, r3
 8001dfa:	f003 fe0f 	bl	8005a1c <strdup>
 8001dfe:	0003      	movs	r3, r0
 8001e00:	60fb      	str	r3, [r7, #12]
    char* token = strtok(copy_of_input, delimiters);
 8001e02:	193a      	adds	r2, r7, r4
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	0011      	movs	r1, r2
 8001e08:	0018      	movs	r0, r3
 8001e0a:	f003 fe4f 	bl	8005aac <strtok>
 8001e0e:	0003      	movs	r3, r0
 8001e10:	617b      	str	r3, [r7, #20]

    int token_count = 0;
 8001e12:	2300      	movs	r3, #0
 8001e14:	613b      	str	r3, [r7, #16]
    while (token != NULL && token_count < MAX_TOKENS) {
 8001e16:	e014      	b.n	8001e42 <splitString+0x5e>
        tokens[token_count] = strdup(token);
 8001e18:	693b      	ldr	r3, [r7, #16]
 8001e1a:	009b      	lsls	r3, r3, #2
 8001e1c:	683a      	ldr	r2, [r7, #0]
 8001e1e:	18d4      	adds	r4, r2, r3
 8001e20:	697b      	ldr	r3, [r7, #20]
 8001e22:	0018      	movs	r0, r3
 8001e24:	f003 fdfa 	bl	8005a1c <strdup>
 8001e28:	0003      	movs	r3, r0
 8001e2a:	6023      	str	r3, [r4, #0]
        token = strtok(NULL, delimiters);
 8001e2c:	2308      	movs	r3, #8
 8001e2e:	18fb      	adds	r3, r7, r3
 8001e30:	0019      	movs	r1, r3
 8001e32:	2000      	movs	r0, #0
 8001e34:	f003 fe3a 	bl	8005aac <strtok>
 8001e38:	0003      	movs	r3, r0
 8001e3a:	617b      	str	r3, [r7, #20]
        token_count++;
 8001e3c:	693b      	ldr	r3, [r7, #16]
 8001e3e:	3301      	adds	r3, #1
 8001e40:	613b      	str	r3, [r7, #16]
    while (token != NULL && token_count < MAX_TOKENS) {
 8001e42:	697b      	ldr	r3, [r7, #20]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d002      	beq.n	8001e4e <splitString+0x6a>
 8001e48:	693b      	ldr	r3, [r7, #16]
 8001e4a:	2b03      	cmp	r3, #3
 8001e4c:	dde4      	ble.n	8001e18 <splitString+0x34>
    }
    free(copy_of_input);
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	0018      	movs	r0, r3
 8001e52:	f003 fbef 	bl	8005634 <free>
}
 8001e56:	46c0      	nop			; (mov r8, r8)
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	b007      	add	sp, #28
 8001e5c:	bd90      	pop	{r4, r7, pc}
 8001e5e:	46c0      	nop			; (mov r8, r8)
 8001e60:	000a0d20 	.word	0x000a0d20

08001e64 <TIM6_DAC_IRQHandler>:
void TIM6_IRQHandler(void){
 8001e64:	b580      	push	{r7, lr}
 8001e66:	af00      	add	r7, sp, #0
	TIM6->SR &=~TIM_SR_UIF;
 8001e68:	4b07      	ldr	r3, [pc, #28]	; (8001e88 <TIM6_DAC_IRQHandler+0x24>)
 8001e6a:	691a      	ldr	r2, [r3, #16]
 8001e6c:	4b06      	ldr	r3, [pc, #24]	; (8001e88 <TIM6_DAC_IRQHandler+0x24>)
 8001e6e:	2101      	movs	r1, #1
 8001e70:	438a      	bics	r2, r1
 8001e72:	611a      	str	r2, [r3, #16]
	if(pvd==0){
 8001e74:	4b05      	ldr	r3, [pc, #20]	; (8001e8c <TIM6_DAC_IRQHandler+0x28>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d101      	bne.n	8001e80 <TIM6_DAC_IRQHandler+0x1c>
		TIM6_Callback();
 8001e7c:	f7ff f976 	bl	800116c <TIM6_Callback>
	}
}
 8001e80:	46c0      	nop			; (mov r8, r8)
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	46c0      	nop			; (mov r8, r8)
 8001e88:	40001000 	.word	0x40001000
 8001e8c:	2000001c 	.word	0x2000001c

08001e90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e94:	b672      	cpsid	i
}
 8001e96:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e98:	e7fe      	b.n	8001e98 <Error_Handler+0x8>
	...

08001e9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b082      	sub	sp, #8
 8001ea0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */
  PWR_PVDTypeDef sConfigPVD = {0};
 8001ea2:	003b      	movs	r3, r7
 8001ea4:	0018      	movs	r0, r3
 8001ea6:	2308      	movs	r3, #8
 8001ea8:	001a      	movs	r2, r3
 8001eaa:	2100      	movs	r1, #0
 8001eac:	f003 fdae 	bl	8005a0c <memset>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001eb0:	4b12      	ldr	r3, [pc, #72]	; (8001efc <HAL_MspInit+0x60>)
 8001eb2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001eb4:	4b11      	ldr	r3, [pc, #68]	; (8001efc <HAL_MspInit+0x60>)
 8001eb6:	2101      	movs	r1, #1
 8001eb8:	430a      	orrs	r2, r1
 8001eba:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ebc:	4b0f      	ldr	r3, [pc, #60]	; (8001efc <HAL_MspInit+0x60>)
 8001ebe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001ec0:	4b0e      	ldr	r3, [pc, #56]	; (8001efc <HAL_MspInit+0x60>)
 8001ec2:	2180      	movs	r1, #128	; 0x80
 8001ec4:	0549      	lsls	r1, r1, #21
 8001ec6:	430a      	orrs	r2, r1
 8001ec8:	639a      	str	r2, [r3, #56]	; 0x38

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* PVD_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_IRQn, 1, 0);
 8001eca:	2200      	movs	r2, #0
 8001ecc:	2101      	movs	r1, #1
 8001ece:	2001      	movs	r0, #1
 8001ed0:	f000 fb2a 	bl	8002528 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_IRQn);
 8001ed4:	2001      	movs	r0, #1
 8001ed6:	f000 fb3c 	bl	8002552 <HAL_NVIC_EnableIRQ>

  /** PVD Configuration
  */
  sConfigPVD.PVDLevel = PWR_PVDLEVEL_6;
 8001eda:	003b      	movs	r3, r7
 8001edc:	22c0      	movs	r2, #192	; 0xc0
 8001ede:	601a      	str	r2, [r3, #0]
  sConfigPVD.Mode = PWR_PVD_MODE_IT_RISING;
 8001ee0:	003b      	movs	r3, r7
 8001ee2:	4a07      	ldr	r2, [pc, #28]	; (8001f00 <HAL_MspInit+0x64>)
 8001ee4:	605a      	str	r2, [r3, #4]
  HAL_PWR_ConfigPVD(&sConfigPVD);
 8001ee6:	003b      	movs	r3, r7
 8001ee8:	0018      	movs	r0, r3
 8001eea:	f000 ff8f 	bl	8002e0c <HAL_PWR_ConfigPVD>

  /** Enable the PVD Output
  */
  HAL_PWR_EnablePVD();
 8001eee:	f000 ffef 	bl	8002ed0 <HAL_PWR_EnablePVD>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ef2:	46c0      	nop			; (mov r8, r8)
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	b002      	add	sp, #8
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	46c0      	nop			; (mov r8, r8)
 8001efc:	40021000 	.word	0x40021000
 8001f00:	00010001 	.word	0x00010001

08001f04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f08:	e7fe      	b.n	8001f08 <NMI_Handler+0x4>

08001f0a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f0a:	b580      	push	{r7, lr}
 8001f0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f0e:	e7fe      	b.n	8001f0e <HardFault_Handler+0x4>

08001f10 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001f14:	46c0      	nop			; (mov r8, r8)
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}

08001f1a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f1a:	b580      	push	{r7, lr}
 8001f1c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f1e:	46c0      	nop			; (mov r8, r8)
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd80      	pop	{r7, pc}

08001f24 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f28:	f000 fa12 	bl	8002350 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f2c:	46c0      	nop			; (mov r8, r8)
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}

08001f32 <PVD_IRQHandler>:

/**
  * @brief This function handles PVD interrupt through EXTI line 16.
  */
void PVD_IRQHandler(void)
{
 8001f32:	b580      	push	{r7, lr}
 8001f34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_IRQn 0 */

  /* USER CODE END PVD_IRQn 0 */
  HAL_PWR_PVD_IRQHandler();
 8001f36:	f000 ffd9 	bl	8002eec <HAL_PWR_PVD_IRQHandler>
  /* USER CODE BEGIN PVD_IRQn 1 */

  /* USER CODE END PVD_IRQn 1 */
}
 8001f3a:	46c0      	nop			; (mov r8, r8)
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}

08001f40 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001f44:	4b03      	ldr	r3, [pc, #12]	; (8001f54 <USART2_IRQHandler+0x14>)
 8001f46:	0018      	movs	r0, r3
 8001f48:	f002 f8cc 	bl	80040e4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001f4c:	46c0      	nop			; (mov r8, r8)
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}
 8001f52:	46c0      	nop			; (mov r8, r8)
 8001f54:	20000254 	.word	0x20000254

08001f58 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	af00      	add	r7, sp, #0
  return 1;
 8001f5c:	2301      	movs	r3, #1
}
 8001f5e:	0018      	movs	r0, r3
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bd80      	pop	{r7, pc}

08001f64 <_kill>:

int _kill(int pid, int sig)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b082      	sub	sp, #8
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
 8001f6c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001f6e:	f003 fe61 	bl	8005c34 <__errno>
 8001f72:	0003      	movs	r3, r0
 8001f74:	2216      	movs	r2, #22
 8001f76:	601a      	str	r2, [r3, #0]
  return -1;
 8001f78:	2301      	movs	r3, #1
 8001f7a:	425b      	negs	r3, r3
}
 8001f7c:	0018      	movs	r0, r3
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	b002      	add	sp, #8
 8001f82:	bd80      	pop	{r7, pc}

08001f84 <_exit>:

void _exit (int status)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b082      	sub	sp, #8
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	425a      	negs	r2, r3
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	0011      	movs	r1, r2
 8001f94:	0018      	movs	r0, r3
 8001f96:	f7ff ffe5 	bl	8001f64 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001f9a:	e7fe      	b.n	8001f9a <_exit+0x16>

08001f9c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b086      	sub	sp, #24
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	60f8      	str	r0, [r7, #12]
 8001fa4:	60b9      	str	r1, [r7, #8]
 8001fa6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fa8:	2300      	movs	r3, #0
 8001faa:	617b      	str	r3, [r7, #20]
 8001fac:	e00a      	b.n	8001fc4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001fae:	e000      	b.n	8001fb2 <_read+0x16>
 8001fb0:	bf00      	nop
 8001fb2:	0001      	movs	r1, r0
 8001fb4:	68bb      	ldr	r3, [r7, #8]
 8001fb6:	1c5a      	adds	r2, r3, #1
 8001fb8:	60ba      	str	r2, [r7, #8]
 8001fba:	b2ca      	uxtb	r2, r1
 8001fbc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fbe:	697b      	ldr	r3, [r7, #20]
 8001fc0:	3301      	adds	r3, #1
 8001fc2:	617b      	str	r3, [r7, #20]
 8001fc4:	697a      	ldr	r2, [r7, #20]
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	429a      	cmp	r2, r3
 8001fca:	dbf0      	blt.n	8001fae <_read+0x12>
  }

  return len;
 8001fcc:	687b      	ldr	r3, [r7, #4]
}
 8001fce:	0018      	movs	r0, r3
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	b006      	add	sp, #24
 8001fd4:	bd80      	pop	{r7, pc}

08001fd6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001fd6:	b580      	push	{r7, lr}
 8001fd8:	b086      	sub	sp, #24
 8001fda:	af00      	add	r7, sp, #0
 8001fdc:	60f8      	str	r0, [r7, #12]
 8001fde:	60b9      	str	r1, [r7, #8]
 8001fe0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	617b      	str	r3, [r7, #20]
 8001fe6:	e009      	b.n	8001ffc <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001fe8:	68bb      	ldr	r3, [r7, #8]
 8001fea:	1c5a      	adds	r2, r3, #1
 8001fec:	60ba      	str	r2, [r7, #8]
 8001fee:	781b      	ldrb	r3, [r3, #0]
 8001ff0:	0018      	movs	r0, r3
 8001ff2:	f7ff f887 	bl	8001104 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ff6:	697b      	ldr	r3, [r7, #20]
 8001ff8:	3301      	adds	r3, #1
 8001ffa:	617b      	str	r3, [r7, #20]
 8001ffc:	697a      	ldr	r2, [r7, #20]
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	429a      	cmp	r2, r3
 8002002:	dbf1      	blt.n	8001fe8 <_write+0x12>
  }
  return len;
 8002004:	687b      	ldr	r3, [r7, #4]
}
 8002006:	0018      	movs	r0, r3
 8002008:	46bd      	mov	sp, r7
 800200a:	b006      	add	sp, #24
 800200c:	bd80      	pop	{r7, pc}

0800200e <_close>:

int _close(int file)
{
 800200e:	b580      	push	{r7, lr}
 8002010:	b082      	sub	sp, #8
 8002012:	af00      	add	r7, sp, #0
 8002014:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002016:	2301      	movs	r3, #1
 8002018:	425b      	negs	r3, r3
}
 800201a:	0018      	movs	r0, r3
 800201c:	46bd      	mov	sp, r7
 800201e:	b002      	add	sp, #8
 8002020:	bd80      	pop	{r7, pc}

08002022 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002022:	b580      	push	{r7, lr}
 8002024:	b082      	sub	sp, #8
 8002026:	af00      	add	r7, sp, #0
 8002028:	6078      	str	r0, [r7, #4]
 800202a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	2280      	movs	r2, #128	; 0x80
 8002030:	0192      	lsls	r2, r2, #6
 8002032:	605a      	str	r2, [r3, #4]
  return 0;
 8002034:	2300      	movs	r3, #0
}
 8002036:	0018      	movs	r0, r3
 8002038:	46bd      	mov	sp, r7
 800203a:	b002      	add	sp, #8
 800203c:	bd80      	pop	{r7, pc}

0800203e <_isatty>:

int _isatty(int file)
{
 800203e:	b580      	push	{r7, lr}
 8002040:	b082      	sub	sp, #8
 8002042:	af00      	add	r7, sp, #0
 8002044:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002046:	2301      	movs	r3, #1
}
 8002048:	0018      	movs	r0, r3
 800204a:	46bd      	mov	sp, r7
 800204c:	b002      	add	sp, #8
 800204e:	bd80      	pop	{r7, pc}

08002050 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b084      	sub	sp, #16
 8002054:	af00      	add	r7, sp, #0
 8002056:	60f8      	str	r0, [r7, #12]
 8002058:	60b9      	str	r1, [r7, #8]
 800205a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800205c:	2300      	movs	r3, #0
}
 800205e:	0018      	movs	r0, r3
 8002060:	46bd      	mov	sp, r7
 8002062:	b004      	add	sp, #16
 8002064:	bd80      	pop	{r7, pc}
	...

08002068 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b086      	sub	sp, #24
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002070:	4a14      	ldr	r2, [pc, #80]	; (80020c4 <_sbrk+0x5c>)
 8002072:	4b15      	ldr	r3, [pc, #84]	; (80020c8 <_sbrk+0x60>)
 8002074:	1ad3      	subs	r3, r2, r3
 8002076:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002078:	697b      	ldr	r3, [r7, #20]
 800207a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800207c:	4b13      	ldr	r3, [pc, #76]	; (80020cc <_sbrk+0x64>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d102      	bne.n	800208a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002084:	4b11      	ldr	r3, [pc, #68]	; (80020cc <_sbrk+0x64>)
 8002086:	4a12      	ldr	r2, [pc, #72]	; (80020d0 <_sbrk+0x68>)
 8002088:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800208a:	4b10      	ldr	r3, [pc, #64]	; (80020cc <_sbrk+0x64>)
 800208c:	681a      	ldr	r2, [r3, #0]
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	18d3      	adds	r3, r2, r3
 8002092:	693a      	ldr	r2, [r7, #16]
 8002094:	429a      	cmp	r2, r3
 8002096:	d207      	bcs.n	80020a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002098:	f003 fdcc 	bl	8005c34 <__errno>
 800209c:	0003      	movs	r3, r0
 800209e:	220c      	movs	r2, #12
 80020a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80020a2:	2301      	movs	r3, #1
 80020a4:	425b      	negs	r3, r3
 80020a6:	e009      	b.n	80020bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80020a8:	4b08      	ldr	r3, [pc, #32]	; (80020cc <_sbrk+0x64>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80020ae:	4b07      	ldr	r3, [pc, #28]	; (80020cc <_sbrk+0x64>)
 80020b0:	681a      	ldr	r2, [r3, #0]
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	18d2      	adds	r2, r2, r3
 80020b6:	4b05      	ldr	r3, [pc, #20]	; (80020cc <_sbrk+0x64>)
 80020b8:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80020ba:	68fb      	ldr	r3, [r7, #12]
}
 80020bc:	0018      	movs	r0, r3
 80020be:	46bd      	mov	sp, r7
 80020c0:	b006      	add	sp, #24
 80020c2:	bd80      	pop	{r7, pc}
 80020c4:	20005000 	.word	0x20005000
 80020c8:	00000400 	.word	0x00000400
 80020cc:	20000250 	.word	0x20000250
 80020d0:	20000448 	.word	0x20000448

080020d4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80020d8:	46c0      	nop			; (mov r8, r8)
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}
	...

080020e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b082      	sub	sp, #8
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	0002      	movs	r2, r0
 80020e8:	1dfb      	adds	r3, r7, #7
 80020ea:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80020ec:	1dfb      	adds	r3, r7, #7
 80020ee:	781b      	ldrb	r3, [r3, #0]
 80020f0:	2b7f      	cmp	r3, #127	; 0x7f
 80020f2:	d809      	bhi.n	8002108 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020f4:	1dfb      	adds	r3, r7, #7
 80020f6:	781b      	ldrb	r3, [r3, #0]
 80020f8:	001a      	movs	r2, r3
 80020fa:	231f      	movs	r3, #31
 80020fc:	401a      	ands	r2, r3
 80020fe:	4b04      	ldr	r3, [pc, #16]	; (8002110 <__NVIC_EnableIRQ+0x30>)
 8002100:	2101      	movs	r1, #1
 8002102:	4091      	lsls	r1, r2
 8002104:	000a      	movs	r2, r1
 8002106:	601a      	str	r2, [r3, #0]
  }
}
 8002108:	46c0      	nop			; (mov r8, r8)
 800210a:	46bd      	mov	sp, r7
 800210c:	b002      	add	sp, #8
 800210e:	bd80      	pop	{r7, pc}
 8002110:	e000e100 	.word	0xe000e100

08002114 <TIM6_init>:
 *  Created on: Aug 9, 2023
 *      Author: Dell
 */
#include "tim6.h"

void TIM6_init(void){
 8002114:	b580      	push	{r7, lr}
 8002116:	af00      	add	r7, sp, #0
	RCC->APB1ENR=RCC_APB1ENR_TIM6EN;
 8002118:	4b0d      	ldr	r3, [pc, #52]	; (8002150 <TIM6_init+0x3c>)
 800211a:	2210      	movs	r2, #16
 800211c:	639a      	str	r2, [r3, #56]	; 0x38

	TIM6->PSC=400-1;
 800211e:	4b0d      	ldr	r3, [pc, #52]	; (8002154 <TIM6_init+0x40>)
 8002120:	2290      	movs	r2, #144	; 0x90
 8002122:	32ff      	adds	r2, #255	; 0xff
 8002124:	629a      	str	r2, [r3, #40]	; 0x28
	TIM6->ARR=5000-1;
 8002126:	4b0b      	ldr	r3, [pc, #44]	; (8002154 <TIM6_init+0x40>)
 8002128:	4a0b      	ldr	r2, [pc, #44]	; (8002158 <TIM6_init+0x44>)
 800212a:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM6->CNT=0;
 800212c:	4b09      	ldr	r3, [pc, #36]	; (8002154 <TIM6_init+0x40>)
 800212e:	2200      	movs	r2, #0
 8002130:	625a      	str	r2, [r3, #36]	; 0x24
	TIM6->CR1= TIM_CR1_CEN;
 8002132:	4b08      	ldr	r3, [pc, #32]	; (8002154 <TIM6_init+0x40>)
 8002134:	2201      	movs	r2, #1
 8002136:	601a      	str	r2, [r3, #0]
	TIM6->DIER|=TIM_DIER_UIE;
 8002138:	4b06      	ldr	r3, [pc, #24]	; (8002154 <TIM6_init+0x40>)
 800213a:	68da      	ldr	r2, [r3, #12]
 800213c:	4b05      	ldr	r3, [pc, #20]	; (8002154 <TIM6_init+0x40>)
 800213e:	2101      	movs	r1, #1
 8002140:	430a      	orrs	r2, r1
 8002142:	60da      	str	r2, [r3, #12]
	NVIC_EnableIRQ(TIM6_IRQn);
 8002144:	2011      	movs	r0, #17
 8002146:	f7ff ffcb 	bl	80020e0 <__NVIC_EnableIRQ>
}
 800214a:	46c0      	nop			; (mov r8, r8)
 800214c:	46bd      	mov	sp, r7
 800214e:	bd80      	pop	{r7, pc}
 8002150:	40021000 	.word	0x40021000
 8002154:	40001000 	.word	0x40001000
 8002158:	00001387 	.word	0x00001387

0800215c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002160:	4b14      	ldr	r3, [pc, #80]	; (80021b4 <MX_USART2_UART_Init+0x58>)
 8002162:	4a15      	ldr	r2, [pc, #84]	; (80021b8 <MX_USART2_UART_Init+0x5c>)
 8002164:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002166:	4b13      	ldr	r3, [pc, #76]	; (80021b4 <MX_USART2_UART_Init+0x58>)
 8002168:	22e1      	movs	r2, #225	; 0xe1
 800216a:	0252      	lsls	r2, r2, #9
 800216c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800216e:	4b11      	ldr	r3, [pc, #68]	; (80021b4 <MX_USART2_UART_Init+0x58>)
 8002170:	2200      	movs	r2, #0
 8002172:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002174:	4b0f      	ldr	r3, [pc, #60]	; (80021b4 <MX_USART2_UART_Init+0x58>)
 8002176:	2200      	movs	r2, #0
 8002178:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800217a:	4b0e      	ldr	r3, [pc, #56]	; (80021b4 <MX_USART2_UART_Init+0x58>)
 800217c:	2200      	movs	r2, #0
 800217e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002180:	4b0c      	ldr	r3, [pc, #48]	; (80021b4 <MX_USART2_UART_Init+0x58>)
 8002182:	220c      	movs	r2, #12
 8002184:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002186:	4b0b      	ldr	r3, [pc, #44]	; (80021b4 <MX_USART2_UART_Init+0x58>)
 8002188:	2200      	movs	r2, #0
 800218a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800218c:	4b09      	ldr	r3, [pc, #36]	; (80021b4 <MX_USART2_UART_Init+0x58>)
 800218e:	2200      	movs	r2, #0
 8002190:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002192:	4b08      	ldr	r3, [pc, #32]	; (80021b4 <MX_USART2_UART_Init+0x58>)
 8002194:	2200      	movs	r2, #0
 8002196:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002198:	4b06      	ldr	r3, [pc, #24]	; (80021b4 <MX_USART2_UART_Init+0x58>)
 800219a:	2200      	movs	r2, #0
 800219c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800219e:	4b05      	ldr	r3, [pc, #20]	; (80021b4 <MX_USART2_UART_Init+0x58>)
 80021a0:	0018      	movs	r0, r3
 80021a2:	f001 fe4d 	bl	8003e40 <HAL_UART_Init>
 80021a6:	1e03      	subs	r3, r0, #0
 80021a8:	d001      	beq.n	80021ae <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80021aa:	f7ff fe71 	bl	8001e90 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80021ae:	46c0      	nop			; (mov r8, r8)
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd80      	pop	{r7, pc}
 80021b4:	20000254 	.word	0x20000254
 80021b8:	40004400 	.word	0x40004400

080021bc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80021bc:	b590      	push	{r4, r7, lr}
 80021be:	b089      	sub	sp, #36	; 0x24
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021c4:	240c      	movs	r4, #12
 80021c6:	193b      	adds	r3, r7, r4
 80021c8:	0018      	movs	r0, r3
 80021ca:	2314      	movs	r3, #20
 80021cc:	001a      	movs	r2, r3
 80021ce:	2100      	movs	r1, #0
 80021d0:	f003 fc1c 	bl	8005a0c <memset>
  if(uartHandle->Instance==USART2)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a1c      	ldr	r2, [pc, #112]	; (800224c <HAL_UART_MspInit+0x90>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d131      	bne.n	8002242 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80021de:	4b1c      	ldr	r3, [pc, #112]	; (8002250 <HAL_UART_MspInit+0x94>)
 80021e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80021e2:	4b1b      	ldr	r3, [pc, #108]	; (8002250 <HAL_UART_MspInit+0x94>)
 80021e4:	2180      	movs	r1, #128	; 0x80
 80021e6:	0289      	lsls	r1, r1, #10
 80021e8:	430a      	orrs	r2, r1
 80021ea:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021ec:	4b18      	ldr	r3, [pc, #96]	; (8002250 <HAL_UART_MspInit+0x94>)
 80021ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021f0:	4b17      	ldr	r3, [pc, #92]	; (8002250 <HAL_UART_MspInit+0x94>)
 80021f2:	2101      	movs	r1, #1
 80021f4:	430a      	orrs	r2, r1
 80021f6:	62da      	str	r2, [r3, #44]	; 0x2c
 80021f8:	4b15      	ldr	r3, [pc, #84]	; (8002250 <HAL_UART_MspInit+0x94>)
 80021fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021fc:	2201      	movs	r2, #1
 80021fe:	4013      	ands	r3, r2
 8002200:	60bb      	str	r3, [r7, #8]
 8002202:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002204:	0021      	movs	r1, r4
 8002206:	187b      	adds	r3, r7, r1
 8002208:	220c      	movs	r2, #12
 800220a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800220c:	187b      	adds	r3, r7, r1
 800220e:	2202      	movs	r2, #2
 8002210:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002212:	187b      	adds	r3, r7, r1
 8002214:	2200      	movs	r2, #0
 8002216:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002218:	187b      	adds	r3, r7, r1
 800221a:	2203      	movs	r2, #3
 800221c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 800221e:	187b      	adds	r3, r7, r1
 8002220:	2204      	movs	r2, #4
 8002222:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002224:	187a      	adds	r2, r7, r1
 8002226:	23a0      	movs	r3, #160	; 0xa0
 8002228:	05db      	lsls	r3, r3, #23
 800222a:	0011      	movs	r1, r2
 800222c:	0018      	movs	r0, r3
 800222e:	f000 fc6f 	bl	8002b10 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 3, 0);
 8002232:	2200      	movs	r2, #0
 8002234:	2103      	movs	r1, #3
 8002236:	201c      	movs	r0, #28
 8002238:	f000 f976 	bl	8002528 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800223c:	201c      	movs	r0, #28
 800223e:	f000 f988 	bl	8002552 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002242:	46c0      	nop			; (mov r8, r8)
 8002244:	46bd      	mov	sp, r7
 8002246:	b009      	add	sp, #36	; 0x24
 8002248:	bd90      	pop	{r4, r7, pc}
 800224a:	46c0      	nop			; (mov r8, r8)
 800224c:	40004400 	.word	0x40004400
 8002250:	40021000 	.word	0x40021000

08002254 <Reset_Handler>:
    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

   ldr   r0, =_estack
 8002254:	480d      	ldr	r0, [pc, #52]	; (800228c <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8002256:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002258:	f7ff ff3c 	bl	80020d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800225c:	480c      	ldr	r0, [pc, #48]	; (8002290 <LoopForever+0x6>)
  ldr r1, =_edata
 800225e:	490d      	ldr	r1, [pc, #52]	; (8002294 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002260:	4a0d      	ldr	r2, [pc, #52]	; (8002298 <LoopForever+0xe>)
  movs r3, #0
 8002262:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002264:	e002      	b.n	800226c <LoopCopyDataInit>

08002266 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002266:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002268:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800226a:	3304      	adds	r3, #4

0800226c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800226c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800226e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002270:	d3f9      	bcc.n	8002266 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002272:	4a0a      	ldr	r2, [pc, #40]	; (800229c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002274:	4c0a      	ldr	r4, [pc, #40]	; (80022a0 <LoopForever+0x16>)
  movs r3, #0
 8002276:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002278:	e001      	b.n	800227e <LoopFillZerobss>

0800227a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800227a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800227c:	3204      	adds	r2, #4

0800227e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800227e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002280:	d3fb      	bcc.n	800227a <FillZerobss>


/* Call static constructors */
    bl __libc_init_array
 8002282:	f003 fcdd 	bl	8005c40 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002286:	f7fe ffb1 	bl	80011ec <main>

0800228a <LoopForever>:

LoopForever:
    b LoopForever
 800228a:	e7fe      	b.n	800228a <LoopForever>
   ldr   r0, =_estack
 800228c:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8002290:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002294:	20000190 	.word	0x20000190
  ldr r2, =_sidata
 8002298:	08006e78 	.word	0x08006e78
  ldr r2, =_sbss
 800229c:	20000190 	.word	0x20000190
  ldr r4, =_ebss
 80022a0:	20000444 	.word	0x20000444

080022a4 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80022a4:	e7fe      	b.n	80022a4 <ADC1_COMP_IRQHandler>
	...

080022a8 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b082      	sub	sp, #8
 80022ac:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80022ae:	1dfb      	adds	r3, r7, #7
 80022b0:	2200      	movs	r2, #0
 80022b2:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80022b4:	4b0b      	ldr	r3, [pc, #44]	; (80022e4 <HAL_Init+0x3c>)
 80022b6:	681a      	ldr	r2, [r3, #0]
 80022b8:	4b0a      	ldr	r3, [pc, #40]	; (80022e4 <HAL_Init+0x3c>)
 80022ba:	2140      	movs	r1, #64	; 0x40
 80022bc:	430a      	orrs	r2, r1
 80022be:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80022c0:	2000      	movs	r0, #0
 80022c2:	f000 f811 	bl	80022e8 <HAL_InitTick>
 80022c6:	1e03      	subs	r3, r0, #0
 80022c8:	d003      	beq.n	80022d2 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 80022ca:	1dfb      	adds	r3, r7, #7
 80022cc:	2201      	movs	r2, #1
 80022ce:	701a      	strb	r2, [r3, #0]
 80022d0:	e001      	b.n	80022d6 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80022d2:	f7ff fde3 	bl	8001e9c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80022d6:	1dfb      	adds	r3, r7, #7
 80022d8:	781b      	ldrb	r3, [r3, #0]
}
 80022da:	0018      	movs	r0, r3
 80022dc:	46bd      	mov	sp, r7
 80022de:	b002      	add	sp, #8
 80022e0:	bd80      	pop	{r7, pc}
 80022e2:	46c0      	nop			; (mov r8, r8)
 80022e4:	40022000 	.word	0x40022000

080022e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022e8:	b590      	push	{r4, r7, lr}
 80022ea:	b083      	sub	sp, #12
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80022f0:	4b14      	ldr	r3, [pc, #80]	; (8002344 <HAL_InitTick+0x5c>)
 80022f2:	681c      	ldr	r4, [r3, #0]
 80022f4:	4b14      	ldr	r3, [pc, #80]	; (8002348 <HAL_InitTick+0x60>)
 80022f6:	781b      	ldrb	r3, [r3, #0]
 80022f8:	0019      	movs	r1, r3
 80022fa:	23fa      	movs	r3, #250	; 0xfa
 80022fc:	0098      	lsls	r0, r3, #2
 80022fe:	f7fd ff1f 	bl	8000140 <__udivsi3>
 8002302:	0003      	movs	r3, r0
 8002304:	0019      	movs	r1, r3
 8002306:	0020      	movs	r0, r4
 8002308:	f7fd ff1a 	bl	8000140 <__udivsi3>
 800230c:	0003      	movs	r3, r0
 800230e:	0018      	movs	r0, r3
 8002310:	f000 f92f 	bl	8002572 <HAL_SYSTICK_Config>
 8002314:	1e03      	subs	r3, r0, #0
 8002316:	d001      	beq.n	800231c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8002318:	2301      	movs	r3, #1
 800231a:	e00f      	b.n	800233c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2b03      	cmp	r3, #3
 8002320:	d80b      	bhi.n	800233a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002322:	6879      	ldr	r1, [r7, #4]
 8002324:	2301      	movs	r3, #1
 8002326:	425b      	negs	r3, r3
 8002328:	2200      	movs	r2, #0
 800232a:	0018      	movs	r0, r3
 800232c:	f000 f8fc 	bl	8002528 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002330:	4b06      	ldr	r3, [pc, #24]	; (800234c <HAL_InitTick+0x64>)
 8002332:	687a      	ldr	r2, [r7, #4]
 8002334:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002336:	2300      	movs	r3, #0
 8002338:	e000      	b.n	800233c <HAL_InitTick+0x54>
    return HAL_ERROR;
 800233a:	2301      	movs	r3, #1
}
 800233c:	0018      	movs	r0, r3
 800233e:	46bd      	mov	sp, r7
 8002340:	b003      	add	sp, #12
 8002342:	bd90      	pop	{r4, r7, pc}
 8002344:	20000128 	.word	0x20000128
 8002348:	20000130 	.word	0x20000130
 800234c:	2000012c 	.word	0x2000012c

08002350 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002354:	4b05      	ldr	r3, [pc, #20]	; (800236c <HAL_IncTick+0x1c>)
 8002356:	781b      	ldrb	r3, [r3, #0]
 8002358:	001a      	movs	r2, r3
 800235a:	4b05      	ldr	r3, [pc, #20]	; (8002370 <HAL_IncTick+0x20>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	18d2      	adds	r2, r2, r3
 8002360:	4b03      	ldr	r3, [pc, #12]	; (8002370 <HAL_IncTick+0x20>)
 8002362:	601a      	str	r2, [r3, #0]
}
 8002364:	46c0      	nop			; (mov r8, r8)
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}
 800236a:	46c0      	nop			; (mov r8, r8)
 800236c:	20000130 	.word	0x20000130
 8002370:	200002dc 	.word	0x200002dc

08002374 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	af00      	add	r7, sp, #0
  return uwTick;
 8002378:	4b02      	ldr	r3, [pc, #8]	; (8002384 <HAL_GetTick+0x10>)
 800237a:	681b      	ldr	r3, [r3, #0]
}
 800237c:	0018      	movs	r0, r3
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}
 8002382:	46c0      	nop			; (mov r8, r8)
 8002384:	200002dc 	.word	0x200002dc

08002388 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b084      	sub	sp, #16
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002390:	f7ff fff0 	bl	8002374 <HAL_GetTick>
 8002394:	0003      	movs	r3, r0
 8002396:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	3301      	adds	r3, #1
 80023a0:	d005      	beq.n	80023ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80023a2:	4b0a      	ldr	r3, [pc, #40]	; (80023cc <HAL_Delay+0x44>)
 80023a4:	781b      	ldrb	r3, [r3, #0]
 80023a6:	001a      	movs	r2, r3
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	189b      	adds	r3, r3, r2
 80023ac:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80023ae:	46c0      	nop			; (mov r8, r8)
 80023b0:	f7ff ffe0 	bl	8002374 <HAL_GetTick>
 80023b4:	0002      	movs	r2, r0
 80023b6:	68bb      	ldr	r3, [r7, #8]
 80023b8:	1ad3      	subs	r3, r2, r3
 80023ba:	68fa      	ldr	r2, [r7, #12]
 80023bc:	429a      	cmp	r2, r3
 80023be:	d8f7      	bhi.n	80023b0 <HAL_Delay+0x28>
  {
  }
}
 80023c0:	46c0      	nop			; (mov r8, r8)
 80023c2:	46c0      	nop			; (mov r8, r8)
 80023c4:	46bd      	mov	sp, r7
 80023c6:	b004      	add	sp, #16
 80023c8:	bd80      	pop	{r7, pc}
 80023ca:	46c0      	nop			; (mov r8, r8)
 80023cc:	20000130 	.word	0x20000130

080023d0 <__NVIC_EnableIRQ>:
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b082      	sub	sp, #8
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	0002      	movs	r2, r0
 80023d8:	1dfb      	adds	r3, r7, #7
 80023da:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80023dc:	1dfb      	adds	r3, r7, #7
 80023de:	781b      	ldrb	r3, [r3, #0]
 80023e0:	2b7f      	cmp	r3, #127	; 0x7f
 80023e2:	d809      	bhi.n	80023f8 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023e4:	1dfb      	adds	r3, r7, #7
 80023e6:	781b      	ldrb	r3, [r3, #0]
 80023e8:	001a      	movs	r2, r3
 80023ea:	231f      	movs	r3, #31
 80023ec:	401a      	ands	r2, r3
 80023ee:	4b04      	ldr	r3, [pc, #16]	; (8002400 <__NVIC_EnableIRQ+0x30>)
 80023f0:	2101      	movs	r1, #1
 80023f2:	4091      	lsls	r1, r2
 80023f4:	000a      	movs	r2, r1
 80023f6:	601a      	str	r2, [r3, #0]
}
 80023f8:	46c0      	nop			; (mov r8, r8)
 80023fa:	46bd      	mov	sp, r7
 80023fc:	b002      	add	sp, #8
 80023fe:	bd80      	pop	{r7, pc}
 8002400:	e000e100 	.word	0xe000e100

08002404 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002404:	b590      	push	{r4, r7, lr}
 8002406:	b083      	sub	sp, #12
 8002408:	af00      	add	r7, sp, #0
 800240a:	0002      	movs	r2, r0
 800240c:	6039      	str	r1, [r7, #0]
 800240e:	1dfb      	adds	r3, r7, #7
 8002410:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002412:	1dfb      	adds	r3, r7, #7
 8002414:	781b      	ldrb	r3, [r3, #0]
 8002416:	2b7f      	cmp	r3, #127	; 0x7f
 8002418:	d828      	bhi.n	800246c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800241a:	4a2f      	ldr	r2, [pc, #188]	; (80024d8 <__NVIC_SetPriority+0xd4>)
 800241c:	1dfb      	adds	r3, r7, #7
 800241e:	781b      	ldrb	r3, [r3, #0]
 8002420:	b25b      	sxtb	r3, r3
 8002422:	089b      	lsrs	r3, r3, #2
 8002424:	33c0      	adds	r3, #192	; 0xc0
 8002426:	009b      	lsls	r3, r3, #2
 8002428:	589b      	ldr	r3, [r3, r2]
 800242a:	1dfa      	adds	r2, r7, #7
 800242c:	7812      	ldrb	r2, [r2, #0]
 800242e:	0011      	movs	r1, r2
 8002430:	2203      	movs	r2, #3
 8002432:	400a      	ands	r2, r1
 8002434:	00d2      	lsls	r2, r2, #3
 8002436:	21ff      	movs	r1, #255	; 0xff
 8002438:	4091      	lsls	r1, r2
 800243a:	000a      	movs	r2, r1
 800243c:	43d2      	mvns	r2, r2
 800243e:	401a      	ands	r2, r3
 8002440:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	019b      	lsls	r3, r3, #6
 8002446:	22ff      	movs	r2, #255	; 0xff
 8002448:	401a      	ands	r2, r3
 800244a:	1dfb      	adds	r3, r7, #7
 800244c:	781b      	ldrb	r3, [r3, #0]
 800244e:	0018      	movs	r0, r3
 8002450:	2303      	movs	r3, #3
 8002452:	4003      	ands	r3, r0
 8002454:	00db      	lsls	r3, r3, #3
 8002456:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002458:	481f      	ldr	r0, [pc, #124]	; (80024d8 <__NVIC_SetPriority+0xd4>)
 800245a:	1dfb      	adds	r3, r7, #7
 800245c:	781b      	ldrb	r3, [r3, #0]
 800245e:	b25b      	sxtb	r3, r3
 8002460:	089b      	lsrs	r3, r3, #2
 8002462:	430a      	orrs	r2, r1
 8002464:	33c0      	adds	r3, #192	; 0xc0
 8002466:	009b      	lsls	r3, r3, #2
 8002468:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800246a:	e031      	b.n	80024d0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800246c:	4a1b      	ldr	r2, [pc, #108]	; (80024dc <__NVIC_SetPriority+0xd8>)
 800246e:	1dfb      	adds	r3, r7, #7
 8002470:	781b      	ldrb	r3, [r3, #0]
 8002472:	0019      	movs	r1, r3
 8002474:	230f      	movs	r3, #15
 8002476:	400b      	ands	r3, r1
 8002478:	3b08      	subs	r3, #8
 800247a:	089b      	lsrs	r3, r3, #2
 800247c:	3306      	adds	r3, #6
 800247e:	009b      	lsls	r3, r3, #2
 8002480:	18d3      	adds	r3, r2, r3
 8002482:	3304      	adds	r3, #4
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	1dfa      	adds	r2, r7, #7
 8002488:	7812      	ldrb	r2, [r2, #0]
 800248a:	0011      	movs	r1, r2
 800248c:	2203      	movs	r2, #3
 800248e:	400a      	ands	r2, r1
 8002490:	00d2      	lsls	r2, r2, #3
 8002492:	21ff      	movs	r1, #255	; 0xff
 8002494:	4091      	lsls	r1, r2
 8002496:	000a      	movs	r2, r1
 8002498:	43d2      	mvns	r2, r2
 800249a:	401a      	ands	r2, r3
 800249c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	019b      	lsls	r3, r3, #6
 80024a2:	22ff      	movs	r2, #255	; 0xff
 80024a4:	401a      	ands	r2, r3
 80024a6:	1dfb      	adds	r3, r7, #7
 80024a8:	781b      	ldrb	r3, [r3, #0]
 80024aa:	0018      	movs	r0, r3
 80024ac:	2303      	movs	r3, #3
 80024ae:	4003      	ands	r3, r0
 80024b0:	00db      	lsls	r3, r3, #3
 80024b2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80024b4:	4809      	ldr	r0, [pc, #36]	; (80024dc <__NVIC_SetPriority+0xd8>)
 80024b6:	1dfb      	adds	r3, r7, #7
 80024b8:	781b      	ldrb	r3, [r3, #0]
 80024ba:	001c      	movs	r4, r3
 80024bc:	230f      	movs	r3, #15
 80024be:	4023      	ands	r3, r4
 80024c0:	3b08      	subs	r3, #8
 80024c2:	089b      	lsrs	r3, r3, #2
 80024c4:	430a      	orrs	r2, r1
 80024c6:	3306      	adds	r3, #6
 80024c8:	009b      	lsls	r3, r3, #2
 80024ca:	18c3      	adds	r3, r0, r3
 80024cc:	3304      	adds	r3, #4
 80024ce:	601a      	str	r2, [r3, #0]
}
 80024d0:	46c0      	nop			; (mov r8, r8)
 80024d2:	46bd      	mov	sp, r7
 80024d4:	b003      	add	sp, #12
 80024d6:	bd90      	pop	{r4, r7, pc}
 80024d8:	e000e100 	.word	0xe000e100
 80024dc:	e000ed00 	.word	0xe000ed00

080024e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b082      	sub	sp, #8
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	1e5a      	subs	r2, r3, #1
 80024ec:	2380      	movs	r3, #128	; 0x80
 80024ee:	045b      	lsls	r3, r3, #17
 80024f0:	429a      	cmp	r2, r3
 80024f2:	d301      	bcc.n	80024f8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024f4:	2301      	movs	r3, #1
 80024f6:	e010      	b.n	800251a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024f8:	4b0a      	ldr	r3, [pc, #40]	; (8002524 <SysTick_Config+0x44>)
 80024fa:	687a      	ldr	r2, [r7, #4]
 80024fc:	3a01      	subs	r2, #1
 80024fe:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002500:	2301      	movs	r3, #1
 8002502:	425b      	negs	r3, r3
 8002504:	2103      	movs	r1, #3
 8002506:	0018      	movs	r0, r3
 8002508:	f7ff ff7c 	bl	8002404 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800250c:	4b05      	ldr	r3, [pc, #20]	; (8002524 <SysTick_Config+0x44>)
 800250e:	2200      	movs	r2, #0
 8002510:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002512:	4b04      	ldr	r3, [pc, #16]	; (8002524 <SysTick_Config+0x44>)
 8002514:	2207      	movs	r2, #7
 8002516:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002518:	2300      	movs	r3, #0
}
 800251a:	0018      	movs	r0, r3
 800251c:	46bd      	mov	sp, r7
 800251e:	b002      	add	sp, #8
 8002520:	bd80      	pop	{r7, pc}
 8002522:	46c0      	nop			; (mov r8, r8)
 8002524:	e000e010 	.word	0xe000e010

08002528 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002528:	b580      	push	{r7, lr}
 800252a:	b084      	sub	sp, #16
 800252c:	af00      	add	r7, sp, #0
 800252e:	60b9      	str	r1, [r7, #8]
 8002530:	607a      	str	r2, [r7, #4]
 8002532:	210f      	movs	r1, #15
 8002534:	187b      	adds	r3, r7, r1
 8002536:	1c02      	adds	r2, r0, #0
 8002538:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800253a:	68ba      	ldr	r2, [r7, #8]
 800253c:	187b      	adds	r3, r7, r1
 800253e:	781b      	ldrb	r3, [r3, #0]
 8002540:	b25b      	sxtb	r3, r3
 8002542:	0011      	movs	r1, r2
 8002544:	0018      	movs	r0, r3
 8002546:	f7ff ff5d 	bl	8002404 <__NVIC_SetPriority>
}
 800254a:	46c0      	nop			; (mov r8, r8)
 800254c:	46bd      	mov	sp, r7
 800254e:	b004      	add	sp, #16
 8002550:	bd80      	pop	{r7, pc}

08002552 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002552:	b580      	push	{r7, lr}
 8002554:	b082      	sub	sp, #8
 8002556:	af00      	add	r7, sp, #0
 8002558:	0002      	movs	r2, r0
 800255a:	1dfb      	adds	r3, r7, #7
 800255c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800255e:	1dfb      	adds	r3, r7, #7
 8002560:	781b      	ldrb	r3, [r3, #0]
 8002562:	b25b      	sxtb	r3, r3
 8002564:	0018      	movs	r0, r3
 8002566:	f7ff ff33 	bl	80023d0 <__NVIC_EnableIRQ>
}
 800256a:	46c0      	nop			; (mov r8, r8)
 800256c:	46bd      	mov	sp, r7
 800256e:	b002      	add	sp, #8
 8002570:	bd80      	pop	{r7, pc}

08002572 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002572:	b580      	push	{r7, lr}
 8002574:	b082      	sub	sp, #8
 8002576:	af00      	add	r7, sp, #0
 8002578:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	0018      	movs	r0, r3
 800257e:	f7ff ffaf 	bl	80024e0 <SysTick_Config>
 8002582:	0003      	movs	r3, r0
}
 8002584:	0018      	movs	r0, r3
 8002586:	46bd      	mov	sp, r7
 8002588:	b002      	add	sp, #8
 800258a:	bd80      	pop	{r7, pc}

0800258c <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b084      	sub	sp, #16
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002594:	230f      	movs	r3, #15
 8002596:	18fb      	adds	r3, r7, r3
 8002598:	2200      	movs	r2, #0
 800259a:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2225      	movs	r2, #37	; 0x25
 80025a0:	5c9b      	ldrb	r3, [r3, r2]
 80025a2:	b2db      	uxtb	r3, r3
 80025a4:	2b02      	cmp	r3, #2
 80025a6:	d008      	beq.n	80025ba <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2204      	movs	r2, #4
 80025ac:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2224      	movs	r2, #36	; 0x24
 80025b2:	2100      	movs	r1, #0
 80025b4:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80025b6:	2301      	movs	r3, #1
 80025b8:	e024      	b.n	8002604 <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	681a      	ldr	r2, [r3, #0]
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	210e      	movs	r1, #14
 80025c6:	438a      	bics	r2, r1
 80025c8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	681a      	ldr	r2, [r3, #0]
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	2101      	movs	r1, #1
 80025d6:	438a      	bics	r2, r1
 80025d8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025de:	221c      	movs	r2, #28
 80025e0:	401a      	ands	r2, r3
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e6:	2101      	movs	r1, #1
 80025e8:	4091      	lsls	r1, r2
 80025ea:	000a      	movs	r2, r1
 80025ec:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2225      	movs	r2, #37	; 0x25
 80025f2:	2101      	movs	r1, #1
 80025f4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2224      	movs	r2, #36	; 0x24
 80025fa:	2100      	movs	r1, #0
 80025fc:	5499      	strb	r1, [r3, r2]

    return status;
 80025fe:	230f      	movs	r3, #15
 8002600:	18fb      	adds	r3, r7, r3
 8002602:	781b      	ldrb	r3, [r3, #0]
  }
}
 8002604:	0018      	movs	r0, r3
 8002606:	46bd      	mov	sp, r7
 8002608:	b004      	add	sp, #16
 800260a:	bd80      	pop	{r7, pc}

0800260c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b084      	sub	sp, #16
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002614:	210f      	movs	r1, #15
 8002616:	187b      	adds	r3, r7, r1
 8002618:	2200      	movs	r2, #0
 800261a:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2225      	movs	r2, #37	; 0x25
 8002620:	5c9b      	ldrb	r3, [r3, r2]
 8002622:	b2db      	uxtb	r3, r3
 8002624:	2b02      	cmp	r3, #2
 8002626:	d006      	beq.n	8002636 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2204      	movs	r2, #4
 800262c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800262e:	187b      	adds	r3, r7, r1
 8002630:	2201      	movs	r2, #1
 8002632:	701a      	strb	r2, [r3, #0]
 8002634:	e02a      	b.n	800268c <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	681a      	ldr	r2, [r3, #0]
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	210e      	movs	r1, #14
 8002642:	438a      	bics	r2, r1
 8002644:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	681a      	ldr	r2, [r3, #0]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	2101      	movs	r1, #1
 8002652:	438a      	bics	r2, r1
 8002654:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800265a:	221c      	movs	r2, #28
 800265c:	401a      	ands	r2, r3
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002662:	2101      	movs	r1, #1
 8002664:	4091      	lsls	r1, r2
 8002666:	000a      	movs	r2, r1
 8002668:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2225      	movs	r2, #37	; 0x25
 800266e:	2101      	movs	r1, #1
 8002670:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2224      	movs	r2, #36	; 0x24
 8002676:	2100      	movs	r1, #0
 8002678:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800267e:	2b00      	cmp	r3, #0
 8002680:	d004      	beq.n	800268c <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002686:	687a      	ldr	r2, [r7, #4]
 8002688:	0010      	movs	r0, r2
 800268a:	4798      	blx	r3
    }
  }
  return status;
 800268c:	230f      	movs	r3, #15
 800268e:	18fb      	adds	r3, r7, r3
 8002690:	781b      	ldrb	r3, [r3, #0]
}
 8002692:	0018      	movs	r0, r3
 8002694:	46bd      	mov	sp, r7
 8002696:	b004      	add	sp, #16
 8002698:	bd80      	pop	{r7, pc}
	...

0800269c <HAL_FLASH_Program>:
  * @param  Data          Specifie the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint32_t Data)
{
 800269c:	b5b0      	push	{r4, r5, r7, lr}
 800269e:	b086      	sub	sp, #24
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	60f8      	str	r0, [r7, #12]
 80026a4:	60b9      	str	r1, [r7, #8]
 80026a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80026a8:	2317      	movs	r3, #23
 80026aa:	18fb      	adds	r3, r7, r3
 80026ac:	2201      	movs	r2, #1
 80026ae:	701a      	strb	r2, [r3, #0]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80026b0:	4b16      	ldr	r3, [pc, #88]	; (800270c <HAL_FLASH_Program+0x70>)
 80026b2:	7c1b      	ldrb	r3, [r3, #16]
 80026b4:	2b01      	cmp	r3, #1
 80026b6:	d101      	bne.n	80026bc <HAL_FLASH_Program+0x20>
 80026b8:	2302      	movs	r3, #2
 80026ba:	e022      	b.n	8002702 <HAL_FLASH_Program+0x66>
 80026bc:	4b13      	ldr	r3, [pc, #76]	; (800270c <HAL_FLASH_Program+0x70>)
 80026be:	2201      	movs	r2, #1
 80026c0:	741a      	strb	r2, [r3, #16]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80026c2:	2517      	movs	r5, #23
 80026c4:	197c      	adds	r4, r7, r5
 80026c6:	4b12      	ldr	r3, [pc, #72]	; (8002710 <HAL_FLASH_Program+0x74>)
 80026c8:	0018      	movs	r0, r3
 80026ca:	f000 f88b 	bl	80027e4 <FLASH_WaitForLastOperation>
 80026ce:	0003      	movs	r3, r0
 80026d0:	7023      	strb	r3, [r4, #0]
  
  if(status == HAL_OK)
 80026d2:	0029      	movs	r1, r5
 80026d4:	187b      	adds	r3, r7, r1
 80026d6:	781b      	ldrb	r3, [r3, #0]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d10c      	bne.n	80026f6 <HAL_FLASH_Program+0x5a>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80026dc:	4b0b      	ldr	r3, [pc, #44]	; (800270c <HAL_FLASH_Program+0x70>)
 80026de:	2200      	movs	r2, #0
 80026e0:	615a      	str	r2, [r3, #20]

    /*Program word (32-bit) at a specified address.*/
    *(__IO uint32_t *)Address = Data;
 80026e2:	68bb      	ldr	r3, [r7, #8]
 80026e4:	687a      	ldr	r2, [r7, #4]
 80026e6:	601a      	str	r2, [r3, #0]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80026e8:	187c      	adds	r4, r7, r1
 80026ea:	4b09      	ldr	r3, [pc, #36]	; (8002710 <HAL_FLASH_Program+0x74>)
 80026ec:	0018      	movs	r0, r3
 80026ee:	f000 f879 	bl	80027e4 <FLASH_WaitForLastOperation>
 80026f2:	0003      	movs	r3, r0
 80026f4:	7023      	strb	r3, [r4, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80026f6:	4b05      	ldr	r3, [pc, #20]	; (800270c <HAL_FLASH_Program+0x70>)
 80026f8:	2200      	movs	r2, #0
 80026fa:	741a      	strb	r2, [r3, #16]

  return status;
 80026fc:	2317      	movs	r3, #23
 80026fe:	18fb      	adds	r3, r7, r3
 8002700:	781b      	ldrb	r3, [r3, #0]
}
 8002702:	0018      	movs	r0, r3
 8002704:	46bd      	mov	sp, r7
 8002706:	b006      	add	sp, #24
 8002708:	bdb0      	pop	{r4, r5, r7, pc}
 800270a:	46c0      	nop			; (mov r8, r8)
 800270c:	200002e0 	.word	0x200002e0
 8002710:	0000c350 	.word	0x0000c350

08002714 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b086      	sub	sp, #24
 8002718:	af00      	add	r7, sp, #0
  uint32_t primask_bit;

  /* Unlocking FLASH_PECR register access*/
  if(HAL_IS_BIT_SET(FLASH->PECR, FLASH_PECR_PELOCK))
 800271a:	4b23      	ldr	r3, [pc, #140]	; (80027a8 <HAL_FLASH_Unlock+0x94>)
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	2201      	movs	r2, #1
 8002720:	4013      	ands	r3, r2
 8002722:	2b01      	cmp	r3, #1
 8002724:	d11a      	bne.n	800275c <HAL_FLASH_Unlock+0x48>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002726:	f3ef 8310 	mrs	r3, PRIMASK
 800272a:	60fb      	str	r3, [r7, #12]
  return(result);
 800272c:	68fb      	ldr	r3, [r7, #12]
  {
    /* Disable interrupts to avoid any interruption during unlock sequence */
    primask_bit = __get_PRIMASK();
 800272e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8002730:	b672      	cpsid	i
}
 8002732:	46c0      	nop			; (mov r8, r8)
    __disable_irq();

    WRITE_REG(FLASH->PEKEYR, FLASH_PEKEY1);
 8002734:	4b1c      	ldr	r3, [pc, #112]	; (80027a8 <HAL_FLASH_Unlock+0x94>)
 8002736:	4a1d      	ldr	r2, [pc, #116]	; (80027ac <HAL_FLASH_Unlock+0x98>)
 8002738:	60da      	str	r2, [r3, #12]
    WRITE_REG(FLASH->PEKEYR, FLASH_PEKEY2);
 800273a:	4b1b      	ldr	r3, [pc, #108]	; (80027a8 <HAL_FLASH_Unlock+0x94>)
 800273c:	4a1c      	ldr	r2, [pc, #112]	; (80027b0 <HAL_FLASH_Unlock+0x9c>)
 800273e:	60da      	str	r2, [r3, #12]
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002744:	693b      	ldr	r3, [r7, #16]
 8002746:	f383 8810 	msr	PRIMASK, r3
}
 800274a:	46c0      	nop			; (mov r8, r8)

    /* Re-enable the interrupts: restore previous priority mask */
    __set_PRIMASK(primask_bit);

    if(HAL_IS_BIT_SET(FLASH->PECR, FLASH_PECR_PELOCK))
 800274c:	4b16      	ldr	r3, [pc, #88]	; (80027a8 <HAL_FLASH_Unlock+0x94>)
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	2201      	movs	r2, #1
 8002752:	4013      	ands	r3, r2
 8002754:	2b01      	cmp	r3, #1
 8002756:	d101      	bne.n	800275c <HAL_FLASH_Unlock+0x48>
    {
      return HAL_ERROR;
 8002758:	2301      	movs	r3, #1
 800275a:	e021      	b.n	80027a0 <HAL_FLASH_Unlock+0x8c>
    }
  }

  if (HAL_IS_BIT_SET(FLASH->PECR, FLASH_PECR_PRGLOCK))
 800275c:	4b12      	ldr	r3, [pc, #72]	; (80027a8 <HAL_FLASH_Unlock+0x94>)
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	2202      	movs	r2, #2
 8002762:	4013      	ands	r3, r2
 8002764:	2b02      	cmp	r3, #2
 8002766:	d11a      	bne.n	800279e <HAL_FLASH_Unlock+0x8a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002768:	f3ef 8310 	mrs	r3, PRIMASK
 800276c:	607b      	str	r3, [r7, #4]
  return(result);
 800276e:	687b      	ldr	r3, [r7, #4]
  {
    /* Disable interrupts to avoid any interruption during unlock sequence */
    primask_bit = __get_PRIMASK();
 8002770:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8002772:	b672      	cpsid	i
}
 8002774:	46c0      	nop			; (mov r8, r8)
    __disable_irq();

    /* Unlocking the program memory access */
    WRITE_REG(FLASH->PRGKEYR, FLASH_PRGKEY1);
 8002776:	4b0c      	ldr	r3, [pc, #48]	; (80027a8 <HAL_FLASH_Unlock+0x94>)
 8002778:	4a0e      	ldr	r2, [pc, #56]	; (80027b4 <HAL_FLASH_Unlock+0xa0>)
 800277a:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->PRGKEYR, FLASH_PRGKEY2);  
 800277c:	4b0a      	ldr	r3, [pc, #40]	; (80027a8 <HAL_FLASH_Unlock+0x94>)
 800277e:	4a0e      	ldr	r2, [pc, #56]	; (80027b8 <HAL_FLASH_Unlock+0xa4>)
 8002780:	611a      	str	r2, [r3, #16]
 8002782:	697b      	ldr	r3, [r7, #20]
 8002784:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002786:	68bb      	ldr	r3, [r7, #8]
 8002788:	f383 8810 	msr	PRIMASK, r3
}
 800278c:	46c0      	nop			; (mov r8, r8)

    /* Re-enable the interrupts: restore previous priority mask */
    __set_PRIMASK(primask_bit);

    if (HAL_IS_BIT_SET(FLASH->PECR, FLASH_PECR_PRGLOCK))
 800278e:	4b06      	ldr	r3, [pc, #24]	; (80027a8 <HAL_FLASH_Unlock+0x94>)
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	2202      	movs	r2, #2
 8002794:	4013      	ands	r3, r2
 8002796:	2b02      	cmp	r3, #2
 8002798:	d101      	bne.n	800279e <HAL_FLASH_Unlock+0x8a>
    {
      return HAL_ERROR;
 800279a:	2301      	movs	r3, #1
 800279c:	e000      	b.n	80027a0 <HAL_FLASH_Unlock+0x8c>
    }
  }

  return HAL_OK; 
 800279e:	2300      	movs	r3, #0
}
 80027a0:	0018      	movs	r0, r3
 80027a2:	46bd      	mov	sp, r7
 80027a4:	b006      	add	sp, #24
 80027a6:	bd80      	pop	{r7, pc}
 80027a8:	40022000 	.word	0x40022000
 80027ac:	89abcdef 	.word	0x89abcdef
 80027b0:	02030405 	.word	0x02030405
 80027b4:	8c9daebf 	.word	0x8c9daebf
 80027b8:	13141516 	.word	0x13141516

080027bc <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	af00      	add	r7, sp, #0
  /* Set the PRGLOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->PECR, FLASH_PECR_PRGLOCK);
 80027c0:	4b07      	ldr	r3, [pc, #28]	; (80027e0 <HAL_FLASH_Lock+0x24>)
 80027c2:	685a      	ldr	r2, [r3, #4]
 80027c4:	4b06      	ldr	r3, [pc, #24]	; (80027e0 <HAL_FLASH_Lock+0x24>)
 80027c6:	2102      	movs	r1, #2
 80027c8:	430a      	orrs	r2, r1
 80027ca:	605a      	str	r2, [r3, #4]
  
  /* Set the PELOCK Bit to lock the PECR Register access */
  SET_BIT(FLASH->PECR, FLASH_PECR_PELOCK);
 80027cc:	4b04      	ldr	r3, [pc, #16]	; (80027e0 <HAL_FLASH_Lock+0x24>)
 80027ce:	685a      	ldr	r2, [r3, #4]
 80027d0:	4b03      	ldr	r3, [pc, #12]	; (80027e0 <HAL_FLASH_Lock+0x24>)
 80027d2:	2101      	movs	r1, #1
 80027d4:	430a      	orrs	r2, r1
 80027d6:	605a      	str	r2, [r3, #4]

  return HAL_OK;  
 80027d8:	2300      	movs	r3, #0
}
 80027da:	0018      	movs	r0, r3
 80027dc:	46bd      	mov	sp, r7
 80027de:	bd80      	pop	{r7, pc}
 80027e0:	40022000 	.word	0x40022000

080027e4 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b084      	sub	sp, #16
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 80027ec:	f7ff fdc2 	bl	8002374 <HAL_GetTick>
 80027f0:	0003      	movs	r3, r0
 80027f2:	60fb      	str	r3, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80027f4:	e00f      	b.n	8002816 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	3301      	adds	r3, #1
 80027fa:	d00c      	beq.n	8002816 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d007      	beq.n	8002812 <FLASH_WaitForLastOperation+0x2e>
 8002802:	f7ff fdb7 	bl	8002374 <HAL_GetTick>
 8002806:	0002      	movs	r2, r0
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	1ad3      	subs	r3, r2, r3
 800280c:	687a      	ldr	r2, [r7, #4]
 800280e:	429a      	cmp	r2, r3
 8002810:	d201      	bcs.n	8002816 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8002812:	2303      	movs	r3, #3
 8002814:	e052      	b.n	80028bc <FLASH_WaitForLastOperation+0xd8>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8002816:	4b2b      	ldr	r3, [pc, #172]	; (80028c4 <FLASH_WaitForLastOperation+0xe0>)
 8002818:	699b      	ldr	r3, [r3, #24]
 800281a:	2201      	movs	r2, #1
 800281c:	4013      	ands	r3, r2
 800281e:	2b01      	cmp	r3, #1
 8002820:	d0e9      	beq.n	80027f6 <FLASH_WaitForLastOperation+0x12>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8002822:	4b28      	ldr	r3, [pc, #160]	; (80028c4 <FLASH_WaitForLastOperation+0xe0>)
 8002824:	699b      	ldr	r3, [r3, #24]
 8002826:	2202      	movs	r2, #2
 8002828:	4013      	ands	r3, r2
 800282a:	2b02      	cmp	r3, #2
 800282c:	d102      	bne.n	8002834 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800282e:	4b25      	ldr	r3, [pc, #148]	; (80028c4 <FLASH_WaitForLastOperation+0xe0>)
 8002830:	2202      	movs	r2, #2
 8002832:	619a      	str	r2, [r3, #24]
  }
  
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 8002834:	4b23      	ldr	r3, [pc, #140]	; (80028c4 <FLASH_WaitForLastOperation+0xe0>)
 8002836:	699a      	ldr	r2, [r3, #24]
 8002838:	2380      	movs	r3, #128	; 0x80
 800283a:	005b      	lsls	r3, r3, #1
 800283c:	401a      	ands	r2, r3
 800283e:	2380      	movs	r3, #128	; 0x80
 8002840:	005b      	lsls	r3, r3, #1
 8002842:	429a      	cmp	r2, r3
 8002844:	d035      	beq.n	80028b2 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 8002846:	4b1f      	ldr	r3, [pc, #124]	; (80028c4 <FLASH_WaitForLastOperation+0xe0>)
 8002848:	699a      	ldr	r2, [r3, #24]
 800284a:	2380      	movs	r3, #128	; 0x80
 800284c:	009b      	lsls	r3, r3, #2
 800284e:	401a      	ands	r2, r3
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 8002850:	2380      	movs	r3, #128	; 0x80
 8002852:	009b      	lsls	r3, r3, #2
 8002854:	429a      	cmp	r2, r3
 8002856:	d02c      	beq.n	80028b2 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 8002858:	4b1a      	ldr	r3, [pc, #104]	; (80028c4 <FLASH_WaitForLastOperation+0xe0>)
 800285a:	699a      	ldr	r2, [r3, #24]
 800285c:	2380      	movs	r3, #128	; 0x80
 800285e:	00db      	lsls	r3, r3, #3
 8002860:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 8002862:	2380      	movs	r3, #128	; 0x80
 8002864:	00db      	lsls	r3, r3, #3
 8002866:	429a      	cmp	r2, r3
 8002868:	d023      	beq.n	80028b2 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 800286a:	4b16      	ldr	r3, [pc, #88]	; (80028c4 <FLASH_WaitForLastOperation+0xe0>)
 800286c:	699a      	ldr	r2, [r3, #24]
 800286e:	2380      	movs	r3, #128	; 0x80
 8002870:	011b      	lsls	r3, r3, #4
 8002872:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 8002874:	2380      	movs	r3, #128	; 0x80
 8002876:	011b      	lsls	r3, r3, #4
 8002878:	429a      	cmp	r2, r3
 800287a:	d01a      	beq.n	80028b2 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 800287c:	4b11      	ldr	r3, [pc, #68]	; (80028c4 <FLASH_WaitForLastOperation+0xe0>)
 800287e:	699a      	ldr	r2, [r3, #24]
 8002880:	2380      	movs	r3, #128	; 0x80
 8002882:	019b      	lsls	r3, r3, #6
 8002884:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 8002886:	2380      	movs	r3, #128	; 0x80
 8002888:	019b      	lsls	r3, r3, #6
 800288a:	429a      	cmp	r2, r3
 800288c:	d011      	beq.n	80028b2 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 800288e:	4b0d      	ldr	r3, [pc, #52]	; (80028c4 <FLASH_WaitForLastOperation+0xe0>)
 8002890:	699a      	ldr	r2, [r3, #24]
 8002892:	2380      	movs	r3, #128	; 0x80
 8002894:	029b      	lsls	r3, r3, #10
 8002896:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 8002898:	2380      	movs	r3, #128	; 0x80
 800289a:	029b      	lsls	r3, r3, #10
 800289c:	429a      	cmp	r2, r3
 800289e:	d008      	beq.n	80028b2 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR) )
 80028a0:	4b08      	ldr	r3, [pc, #32]	; (80028c4 <FLASH_WaitForLastOperation+0xe0>)
 80028a2:	699a      	ldr	r2, [r3, #24]
 80028a4:	2380      	movs	r3, #128	; 0x80
 80028a6:	025b      	lsls	r3, r3, #9
 80028a8:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 80028aa:	2380      	movs	r3, #128	; 0x80
 80028ac:	025b      	lsls	r3, r3, #9
 80028ae:	429a      	cmp	r2, r3
 80028b0:	d103      	bne.n	80028ba <FLASH_WaitForLastOperation+0xd6>
     *           cut of the STM32L031xx device or the first cut of the STM32L041xx
     *           device, this error should be ignored. The revId of the device
     *           can be retrieved via the HAL_GetREVID() function.
     *
     */
    FLASH_SetErrorCode();
 80028b2:	f000 f809 	bl	80028c8 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80028b6:	2301      	movs	r3, #1
 80028b8:	e000      	b.n	80028bc <FLASH_WaitForLastOperation+0xd8>
  }

  /* There is no error flag set */
  return HAL_OK;
 80028ba:	2300      	movs	r3, #0
}
 80028bc:	0018      	movs	r0, r3
 80028be:	46bd      	mov	sp, r7
 80028c0:	b004      	add	sp, #16
 80028c2:	bd80      	pop	{r7, pc}
 80028c4:	40022000 	.word	0x40022000

080028c8 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b082      	sub	sp, #8
 80028cc:	af00      	add	r7, sp, #0
  uint32_t flags = 0;
 80028ce:	2300      	movs	r3, #0
 80028d0:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 80028d2:	4b49      	ldr	r3, [pc, #292]	; (80029f8 <FLASH_SetErrorCode+0x130>)
 80028d4:	699a      	ldr	r2, [r3, #24]
 80028d6:	2380      	movs	r3, #128	; 0x80
 80028d8:	005b      	lsls	r3, r3, #1
 80028da:	401a      	ands	r2, r3
 80028dc:	2380      	movs	r3, #128	; 0x80
 80028de:	005b      	lsls	r3, r3, #1
 80028e0:	429a      	cmp	r2, r3
 80028e2:	d10a      	bne.n	80028fa <FLASH_SetErrorCode+0x32>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80028e4:	4b45      	ldr	r3, [pc, #276]	; (80029fc <FLASH_SetErrorCode+0x134>)
 80028e6:	695b      	ldr	r3, [r3, #20]
 80028e8:	2202      	movs	r2, #2
 80028ea:	431a      	orrs	r2, r3
 80028ec:	4b43      	ldr	r3, [pc, #268]	; (80029fc <FLASH_SetErrorCode+0x134>)
 80028ee:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_WRPERR;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2280      	movs	r2, #128	; 0x80
 80028f4:	0052      	lsls	r2, r2, #1
 80028f6:	4313      	orrs	r3, r2
 80028f8:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))
 80028fa:	4b3f      	ldr	r3, [pc, #252]	; (80029f8 <FLASH_SetErrorCode+0x130>)
 80028fc:	699a      	ldr	r2, [r3, #24]
 80028fe:	2380      	movs	r3, #128	; 0x80
 8002900:	009b      	lsls	r3, r3, #2
 8002902:	401a      	ands	r2, r3
 8002904:	2380      	movs	r3, #128	; 0x80
 8002906:	009b      	lsls	r3, r3, #2
 8002908:	429a      	cmp	r2, r3
 800290a:	d10a      	bne.n	8002922 <FLASH_SetErrorCode+0x5a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800290c:	4b3b      	ldr	r3, [pc, #236]	; (80029fc <FLASH_SetErrorCode+0x134>)
 800290e:	695b      	ldr	r3, [r3, #20]
 8002910:	2201      	movs	r2, #1
 8002912:	431a      	orrs	r2, r3
 8002914:	4b39      	ldr	r3, [pc, #228]	; (80029fc <FLASH_SetErrorCode+0x134>)
 8002916:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_PGAERR;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2280      	movs	r2, #128	; 0x80
 800291c:	0092      	lsls	r2, r2, #2
 800291e:	4313      	orrs	r3, r2
 8002920:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR))
 8002922:	4b35      	ldr	r3, [pc, #212]	; (80029f8 <FLASH_SetErrorCode+0x130>)
 8002924:	699a      	ldr	r2, [r3, #24]
 8002926:	2380      	movs	r3, #128	; 0x80
 8002928:	00db      	lsls	r3, r3, #3
 800292a:	401a      	ands	r2, r3
 800292c:	2380      	movs	r3, #128	; 0x80
 800292e:	00db      	lsls	r3, r3, #3
 8002930:	429a      	cmp	r2, r3
 8002932:	d10a      	bne.n	800294a <FLASH_SetErrorCode+0x82>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_SIZE;
 8002934:	4b31      	ldr	r3, [pc, #196]	; (80029fc <FLASH_SetErrorCode+0x134>)
 8002936:	695b      	ldr	r3, [r3, #20]
 8002938:	2208      	movs	r2, #8
 800293a:	431a      	orrs	r2, r3
 800293c:	4b2f      	ldr	r3, [pc, #188]	; (80029fc <FLASH_SetErrorCode+0x134>)
 800293e:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_SIZERR;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2280      	movs	r2, #128	; 0x80
 8002944:	00d2      	lsls	r2, r2, #3
 8002946:	4313      	orrs	r3, r2
 8002948:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 800294a:	4b2b      	ldr	r3, [pc, #172]	; (80029f8 <FLASH_SetErrorCode+0x130>)
 800294c:	699a      	ldr	r2, [r3, #24]
 800294e:	2380      	movs	r3, #128	; 0x80
 8002950:	011b      	lsls	r3, r3, #4
 8002952:	401a      	ands	r2, r3
 8002954:	2380      	movs	r3, #128	; 0x80
 8002956:	011b      	lsls	r3, r3, #4
 8002958:	429a      	cmp	r2, r3
 800295a:	d10a      	bne.n	8002972 <FLASH_SetErrorCode+0xaa>
     *           cut of the STM32L031xx device or the first cut of the STM32L041xx
     *           device, this error should be ignored. The revId of the device
     *           can be retrieved via the HAL_GetREVID() function.
     *
     */
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 800295c:	4b27      	ldr	r3, [pc, #156]	; (80029fc <FLASH_SetErrorCode+0x134>)
 800295e:	695b      	ldr	r3, [r3, #20]
 8002960:	2204      	movs	r2, #4
 8002962:	431a      	orrs	r2, r3
 8002964:	4b25      	ldr	r3, [pc, #148]	; (80029fc <FLASH_SetErrorCode+0x134>)
 8002966:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_OPTVERR;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2280      	movs	r2, #128	; 0x80
 800296c:	0112      	lsls	r2, r2, #4
 800296e:	4313      	orrs	r3, r2
 8002970:	607b      	str	r3, [r7, #4]
  }

  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR))
 8002972:	4b21      	ldr	r3, [pc, #132]	; (80029f8 <FLASH_SetErrorCode+0x130>)
 8002974:	699a      	ldr	r2, [r3, #24]
 8002976:	2380      	movs	r3, #128	; 0x80
 8002978:	019b      	lsls	r3, r3, #6
 800297a:	401a      	ands	r2, r3
 800297c:	2380      	movs	r3, #128	; 0x80
 800297e:	019b      	lsls	r3, r3, #6
 8002980:	429a      	cmp	r2, r3
 8002982:	d10a      	bne.n	800299a <FLASH_SetErrorCode+0xd2>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8002984:	4b1d      	ldr	r3, [pc, #116]	; (80029fc <FLASH_SetErrorCode+0x134>)
 8002986:	695b      	ldr	r3, [r3, #20]
 8002988:	2210      	movs	r2, #16
 800298a:	431a      	orrs	r2, r3
 800298c:	4b1b      	ldr	r3, [pc, #108]	; (80029fc <FLASH_SetErrorCode+0x134>)
 800298e:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_RDERR;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2280      	movs	r2, #128	; 0x80
 8002994:	0192      	lsls	r2, r2, #6
 8002996:	4313      	orrs	r3, r2
 8002998:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR))
 800299a:	4b17      	ldr	r3, [pc, #92]	; (80029f8 <FLASH_SetErrorCode+0x130>)
 800299c:	699a      	ldr	r2, [r3, #24]
 800299e:	2380      	movs	r3, #128	; 0x80
 80029a0:	029b      	lsls	r3, r3, #10
 80029a2:	401a      	ands	r2, r3
 80029a4:	2380      	movs	r3, #128	; 0x80
 80029a6:	029b      	lsls	r3, r3, #10
 80029a8:	429a      	cmp	r2, r3
 80029aa:	d109      	bne.n	80029c0 <FLASH_SetErrorCode+0xf8>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_FWWERR;
 80029ac:	4b13      	ldr	r3, [pc, #76]	; (80029fc <FLASH_SetErrorCode+0x134>)
 80029ae:	695b      	ldr	r3, [r3, #20]
 80029b0:	2220      	movs	r2, #32
 80029b2:	431a      	orrs	r2, r3
 80029b4:	4b11      	ldr	r3, [pc, #68]	; (80029fc <FLASH_SetErrorCode+0x134>)
 80029b6:	615a      	str	r2, [r3, #20]
    flags |= HAL_FLASH_ERROR_FWWERR;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2220      	movs	r2, #32
 80029bc:	4313      	orrs	r3, r2
 80029be:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR))
 80029c0:	4b0d      	ldr	r3, [pc, #52]	; (80029f8 <FLASH_SetErrorCode+0x130>)
 80029c2:	699a      	ldr	r2, [r3, #24]
 80029c4:	2380      	movs	r3, #128	; 0x80
 80029c6:	025b      	lsls	r3, r3, #9
 80029c8:	401a      	ands	r2, r3
 80029ca:	2380      	movs	r3, #128	; 0x80
 80029cc:	025b      	lsls	r3, r3, #9
 80029ce:	429a      	cmp	r2, r3
 80029d0:	d10a      	bne.n	80029e8 <FLASH_SetErrorCode+0x120>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_NOTZERO;
 80029d2:	4b0a      	ldr	r3, [pc, #40]	; (80029fc <FLASH_SetErrorCode+0x134>)
 80029d4:	695b      	ldr	r3, [r3, #20]
 80029d6:	2240      	movs	r2, #64	; 0x40
 80029d8:	431a      	orrs	r2, r3
 80029da:	4b08      	ldr	r3, [pc, #32]	; (80029fc <FLASH_SetErrorCode+0x134>)
 80029dc:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_NOTZEROERR;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2280      	movs	r2, #128	; 0x80
 80029e2:	0252      	lsls	r2, r2, #9
 80029e4:	4313      	orrs	r3, r2
 80029e6:	607b      	str	r3, [r7, #4]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 80029e8:	4b03      	ldr	r3, [pc, #12]	; (80029f8 <FLASH_SetErrorCode+0x130>)
 80029ea:	687a      	ldr	r2, [r7, #4]
 80029ec:	619a      	str	r2, [r3, #24]
}  
 80029ee:	46c0      	nop			; (mov r8, r8)
 80029f0:	46bd      	mov	sp, r7
 80029f2:	b002      	add	sp, #8
 80029f4:	bd80      	pop	{r7, pc}
 80029f6:	46c0      	nop			; (mov r8, r8)
 80029f8:	40022000 	.word	0x40022000
 80029fc:	200002e0 	.word	0x200002e0

08002a00 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8002a00:	b5b0      	push	{r4, r5, r7, lr}
 8002a02:	b084      	sub	sp, #16
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
 8002a08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002a0a:	230f      	movs	r3, #15
 8002a0c:	18fb      	adds	r3, r7, r3
 8002a0e:	2201      	movs	r2, #1
 8002a10:	701a      	strb	r2, [r3, #0]
  uint32_t address = 0U;
 8002a12:	2300      	movs	r3, #0
 8002a14:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002a16:	4b29      	ldr	r3, [pc, #164]	; (8002abc <HAL_FLASHEx_Erase+0xbc>)
 8002a18:	7c1b      	ldrb	r3, [r3, #16]
 8002a1a:	2b01      	cmp	r3, #1
 8002a1c:	d101      	bne.n	8002a22 <HAL_FLASHEx_Erase+0x22>
 8002a1e:	2302      	movs	r3, #2
 8002a20:	e048      	b.n	8002ab4 <HAL_FLASHEx_Erase+0xb4>
 8002a22:	4b26      	ldr	r3, [pc, #152]	; (8002abc <HAL_FLASHEx_Erase+0xbc>)
 8002a24:	2201      	movs	r2, #1
 8002a26:	741a      	strb	r2, [r3, #16]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002a28:	250f      	movs	r5, #15
 8002a2a:	197c      	adds	r4, r7, r5
 8002a2c:	4b24      	ldr	r3, [pc, #144]	; (8002ac0 <HAL_FLASHEx_Erase+0xc0>)
 8002a2e:	0018      	movs	r0, r3
 8002a30:	f7ff fed8 	bl	80027e4 <FLASH_WaitForLastOperation>
 8002a34:	0003      	movs	r3, r0
 8002a36:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8002a38:	197b      	adds	r3, r7, r5
 8002a3a:	781b      	ldrb	r3, [r3, #0]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d133      	bne.n	8002aa8 <HAL_FLASHEx_Erase+0xa8>
  {
    /*Initialization of PageError variable*/
    *PageError = 0xFFFFFFFFU;
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	2201      	movs	r2, #1
 8002a44:	4252      	negs	r2, r2
 8002a46:	601a      	str	r2, [r3, #0]
    assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));
    assert_param(IS_FLASH_PROGRAM_ADDRESS(pEraseInit->PageAddress));
    assert_param(IS_FLASH_PROGRAM_ADDRESS((pEraseInit->PageAddress & ~(FLASH_PAGE_SIZE - 1U)) + pEraseInit->NbPages * FLASH_PAGE_SIZE - 1U));

    /* Erase page by page to be done*/
    for(address = pEraseInit->PageAddress; 
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	60bb      	str	r3, [r7, #8]
 8002a4e:	e022      	b.n	8002a96 <HAL_FLASHEx_Erase+0x96>
        address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
        address += FLASH_PAGE_SIZE)
    {
      FLASH_PageErase(address);
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	0018      	movs	r0, r3
 8002a54:	f000 f83a 	bl	8002acc <FLASH_PageErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002a58:	250f      	movs	r5, #15
 8002a5a:	197c      	adds	r4, r7, r5
 8002a5c:	4b18      	ldr	r3, [pc, #96]	; (8002ac0 <HAL_FLASHEx_Erase+0xc0>)
 8002a5e:	0018      	movs	r0, r3
 8002a60:	f7ff fec0 	bl	80027e4 <FLASH_WaitForLastOperation>
 8002a64:	0003      	movs	r3, r0
 8002a66:	7023      	strb	r3, [r4, #0]

      /* If the erase operation is completed, disable the ERASE Bit */
      CLEAR_BIT(FLASH->PECR, FLASH_PECR_PROG);
 8002a68:	4b16      	ldr	r3, [pc, #88]	; (8002ac4 <HAL_FLASHEx_Erase+0xc4>)
 8002a6a:	685a      	ldr	r2, [r3, #4]
 8002a6c:	4b15      	ldr	r3, [pc, #84]	; (8002ac4 <HAL_FLASHEx_Erase+0xc4>)
 8002a6e:	2108      	movs	r1, #8
 8002a70:	438a      	bics	r2, r1
 8002a72:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(FLASH->PECR, FLASH_PECR_ERASE);
 8002a74:	4b13      	ldr	r3, [pc, #76]	; (8002ac4 <HAL_FLASHEx_Erase+0xc4>)
 8002a76:	685a      	ldr	r2, [r3, #4]
 8002a78:	4b12      	ldr	r3, [pc, #72]	; (8002ac4 <HAL_FLASHEx_Erase+0xc4>)
 8002a7a:	4913      	ldr	r1, [pc, #76]	; (8002ac8 <HAL_FLASHEx_Erase+0xc8>)
 8002a7c:	400a      	ands	r2, r1
 8002a7e:	605a      	str	r2, [r3, #4]

      if (status != HAL_OK) 
 8002a80:	197b      	adds	r3, r7, r5
 8002a82:	781b      	ldrb	r3, [r3, #0]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d003      	beq.n	8002a90 <HAL_FLASHEx_Erase+0x90>
      {
        /* In case of error, stop erase procedure and return the faulty address */
        *PageError = address;
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	68ba      	ldr	r2, [r7, #8]
 8002a8c:	601a      	str	r2, [r3, #0]
        break;
 8002a8e:	e00b      	b.n	8002aa8 <HAL_FLASHEx_Erase+0xa8>
        address += FLASH_PAGE_SIZE)
 8002a90:	68bb      	ldr	r3, [r7, #8]
 8002a92:	3380      	adds	r3, #128	; 0x80
 8002a94:	60bb      	str	r3, [r7, #8]
        address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	689b      	ldr	r3, [r3, #8]
 8002a9a:	01da      	lsls	r2, r3, #7
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	18d3      	adds	r3, r2, r3
 8002aa2:	68ba      	ldr	r2, [r7, #8]
 8002aa4:	429a      	cmp	r2, r3
 8002aa6:	d3d3      	bcc.n	8002a50 <HAL_FLASHEx_Erase+0x50>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002aa8:	4b04      	ldr	r3, [pc, #16]	; (8002abc <HAL_FLASHEx_Erase+0xbc>)
 8002aaa:	2200      	movs	r2, #0
 8002aac:	741a      	strb	r2, [r3, #16]

  return status;
 8002aae:	230f      	movs	r3, #15
 8002ab0:	18fb      	adds	r3, r7, r3
 8002ab2:	781b      	ldrb	r3, [r3, #0]
}
 8002ab4:	0018      	movs	r0, r3
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	b004      	add	sp, #16
 8002aba:	bdb0      	pop	{r4, r5, r7, pc}
 8002abc:	200002e0 	.word	0x200002e0
 8002ac0:	0000c350 	.word	0x0000c350
 8002ac4:	40022000 	.word	0x40022000
 8002ac8:	fffffdff 	.word	0xfffffdff

08002acc <FLASH_PageErase>:
  * @note   A Page is erased in the Program memory only if the address to load 
  *         is the start address of a page (multiple of @ref FLASH_PAGE_SIZE bytes).
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b082      	sub	sp, #8
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002ad4:	4b0c      	ldr	r3, [pc, #48]	; (8002b08 <FLASH_PageErase+0x3c>)
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	615a      	str	r2, [r3, #20]

  /* Set the ERASE bit */
  SET_BIT(FLASH->PECR, FLASH_PECR_ERASE);
 8002ada:	4b0c      	ldr	r3, [pc, #48]	; (8002b0c <FLASH_PageErase+0x40>)
 8002adc:	685a      	ldr	r2, [r3, #4]
 8002ade:	4b0b      	ldr	r3, [pc, #44]	; (8002b0c <FLASH_PageErase+0x40>)
 8002ae0:	2180      	movs	r1, #128	; 0x80
 8002ae2:	0089      	lsls	r1, r1, #2
 8002ae4:	430a      	orrs	r2, r1
 8002ae6:	605a      	str	r2, [r3, #4]

  /* Set PROG bit */
  SET_BIT(FLASH->PECR, FLASH_PECR_PROG);
 8002ae8:	4b08      	ldr	r3, [pc, #32]	; (8002b0c <FLASH_PageErase+0x40>)
 8002aea:	685a      	ldr	r2, [r3, #4]
 8002aec:	4b07      	ldr	r3, [pc, #28]	; (8002b0c <FLASH_PageErase+0x40>)
 8002aee:	2108      	movs	r1, #8
 8002af0:	430a      	orrs	r2, r1
 8002af2:	605a      	str	r2, [r3, #4]

  /* Write 00000000h to the first word of the program page to erase */
  *(__IO uint32_t *)(uint32_t)(PageAddress & ~(FLASH_PAGE_SIZE - 1)) = 0x00000000;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	227f      	movs	r2, #127	; 0x7f
 8002af8:	4393      	bics	r3, r2
 8002afa:	2200      	movs	r2, #0
 8002afc:	601a      	str	r2, [r3, #0]
}
 8002afe:	46c0      	nop			; (mov r8, r8)
 8002b00:	46bd      	mov	sp, r7
 8002b02:	b002      	add	sp, #8
 8002b04:	bd80      	pop	{r7, pc}
 8002b06:	46c0      	nop			; (mov r8, r8)
 8002b08:	200002e0 	.word	0x200002e0
 8002b0c:	40022000 	.word	0x40022000

08002b10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b086      	sub	sp, #24
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
 8002b18:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8002b22:	2300      	movs	r3, #0
 8002b24:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8002b26:	e155      	b.n	8002dd4 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	2101      	movs	r1, #1
 8002b2e:	697a      	ldr	r2, [r7, #20]
 8002b30:	4091      	lsls	r1, r2
 8002b32:	000a      	movs	r2, r1
 8002b34:	4013      	ands	r3, r2
 8002b36:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d100      	bne.n	8002b40 <HAL_GPIO_Init+0x30>
 8002b3e:	e146      	b.n	8002dce <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	2203      	movs	r2, #3
 8002b46:	4013      	ands	r3, r2
 8002b48:	2b01      	cmp	r3, #1
 8002b4a:	d005      	beq.n	8002b58 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	2203      	movs	r2, #3
 8002b52:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002b54:	2b02      	cmp	r3, #2
 8002b56:	d130      	bne.n	8002bba <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	689b      	ldr	r3, [r3, #8]
 8002b5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8002b5e:	697b      	ldr	r3, [r7, #20]
 8002b60:	005b      	lsls	r3, r3, #1
 8002b62:	2203      	movs	r2, #3
 8002b64:	409a      	lsls	r2, r3
 8002b66:	0013      	movs	r3, r2
 8002b68:	43da      	mvns	r2, r3
 8002b6a:	693b      	ldr	r3, [r7, #16]
 8002b6c:	4013      	ands	r3, r2
 8002b6e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	68da      	ldr	r2, [r3, #12]
 8002b74:	697b      	ldr	r3, [r7, #20]
 8002b76:	005b      	lsls	r3, r3, #1
 8002b78:	409a      	lsls	r2, r3
 8002b7a:	0013      	movs	r3, r2
 8002b7c:	693a      	ldr	r2, [r7, #16]
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	693a      	ldr	r2, [r7, #16]
 8002b86:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b8e:	2201      	movs	r2, #1
 8002b90:	697b      	ldr	r3, [r7, #20]
 8002b92:	409a      	lsls	r2, r3
 8002b94:	0013      	movs	r3, r2
 8002b96:	43da      	mvns	r2, r3
 8002b98:	693b      	ldr	r3, [r7, #16]
 8002b9a:	4013      	ands	r3, r2
 8002b9c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	091b      	lsrs	r3, r3, #4
 8002ba4:	2201      	movs	r2, #1
 8002ba6:	401a      	ands	r2, r3
 8002ba8:	697b      	ldr	r3, [r7, #20]
 8002baa:	409a      	lsls	r2, r3
 8002bac:	0013      	movs	r3, r2
 8002bae:	693a      	ldr	r2, [r7, #16]
 8002bb0:	4313      	orrs	r3, r2
 8002bb2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	693a      	ldr	r2, [r7, #16]
 8002bb8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	2203      	movs	r2, #3
 8002bc0:	4013      	ands	r3, r2
 8002bc2:	2b03      	cmp	r3, #3
 8002bc4:	d017      	beq.n	8002bf6 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	68db      	ldr	r3, [r3, #12]
 8002bca:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002bcc:	697b      	ldr	r3, [r7, #20]
 8002bce:	005b      	lsls	r3, r3, #1
 8002bd0:	2203      	movs	r2, #3
 8002bd2:	409a      	lsls	r2, r3
 8002bd4:	0013      	movs	r3, r2
 8002bd6:	43da      	mvns	r2, r3
 8002bd8:	693b      	ldr	r3, [r7, #16]
 8002bda:	4013      	ands	r3, r2
 8002bdc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	689a      	ldr	r2, [r3, #8]
 8002be2:	697b      	ldr	r3, [r7, #20]
 8002be4:	005b      	lsls	r3, r3, #1
 8002be6:	409a      	lsls	r2, r3
 8002be8:	0013      	movs	r3, r2
 8002bea:	693a      	ldr	r2, [r7, #16]
 8002bec:	4313      	orrs	r3, r2
 8002bee:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	693a      	ldr	r2, [r7, #16]
 8002bf4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	2203      	movs	r2, #3
 8002bfc:	4013      	ands	r3, r2
 8002bfe:	2b02      	cmp	r3, #2
 8002c00:	d123      	bne.n	8002c4a <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002c02:	697b      	ldr	r3, [r7, #20]
 8002c04:	08da      	lsrs	r2, r3, #3
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	3208      	adds	r2, #8
 8002c0a:	0092      	lsls	r2, r2, #2
 8002c0c:	58d3      	ldr	r3, [r2, r3]
 8002c0e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8002c10:	697b      	ldr	r3, [r7, #20]
 8002c12:	2207      	movs	r2, #7
 8002c14:	4013      	ands	r3, r2
 8002c16:	009b      	lsls	r3, r3, #2
 8002c18:	220f      	movs	r2, #15
 8002c1a:	409a      	lsls	r2, r3
 8002c1c:	0013      	movs	r3, r2
 8002c1e:	43da      	mvns	r2, r3
 8002c20:	693b      	ldr	r3, [r7, #16]
 8002c22:	4013      	ands	r3, r2
 8002c24:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	691a      	ldr	r2, [r3, #16]
 8002c2a:	697b      	ldr	r3, [r7, #20]
 8002c2c:	2107      	movs	r1, #7
 8002c2e:	400b      	ands	r3, r1
 8002c30:	009b      	lsls	r3, r3, #2
 8002c32:	409a      	lsls	r2, r3
 8002c34:	0013      	movs	r3, r2
 8002c36:	693a      	ldr	r2, [r7, #16]
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002c3c:	697b      	ldr	r3, [r7, #20]
 8002c3e:	08da      	lsrs	r2, r3, #3
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	3208      	adds	r2, #8
 8002c44:	0092      	lsls	r2, r2, #2
 8002c46:	6939      	ldr	r1, [r7, #16]
 8002c48:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002c50:	697b      	ldr	r3, [r7, #20]
 8002c52:	005b      	lsls	r3, r3, #1
 8002c54:	2203      	movs	r2, #3
 8002c56:	409a      	lsls	r2, r3
 8002c58:	0013      	movs	r3, r2
 8002c5a:	43da      	mvns	r2, r3
 8002c5c:	693b      	ldr	r3, [r7, #16]
 8002c5e:	4013      	ands	r3, r2
 8002c60:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	2203      	movs	r2, #3
 8002c68:	401a      	ands	r2, r3
 8002c6a:	697b      	ldr	r3, [r7, #20]
 8002c6c:	005b      	lsls	r3, r3, #1
 8002c6e:	409a      	lsls	r2, r3
 8002c70:	0013      	movs	r3, r2
 8002c72:	693a      	ldr	r2, [r7, #16]
 8002c74:	4313      	orrs	r3, r2
 8002c76:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	693a      	ldr	r2, [r7, #16]
 8002c7c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	685a      	ldr	r2, [r3, #4]
 8002c82:	23c0      	movs	r3, #192	; 0xc0
 8002c84:	029b      	lsls	r3, r3, #10
 8002c86:	4013      	ands	r3, r2
 8002c88:	d100      	bne.n	8002c8c <HAL_GPIO_Init+0x17c>
 8002c8a:	e0a0      	b.n	8002dce <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c8c:	4b57      	ldr	r3, [pc, #348]	; (8002dec <HAL_GPIO_Init+0x2dc>)
 8002c8e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c90:	4b56      	ldr	r3, [pc, #344]	; (8002dec <HAL_GPIO_Init+0x2dc>)
 8002c92:	2101      	movs	r1, #1
 8002c94:	430a      	orrs	r2, r1
 8002c96:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8002c98:	4a55      	ldr	r2, [pc, #340]	; (8002df0 <HAL_GPIO_Init+0x2e0>)
 8002c9a:	697b      	ldr	r3, [r7, #20]
 8002c9c:	089b      	lsrs	r3, r3, #2
 8002c9e:	3302      	adds	r3, #2
 8002ca0:	009b      	lsls	r3, r3, #2
 8002ca2:	589b      	ldr	r3, [r3, r2]
 8002ca4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8002ca6:	697b      	ldr	r3, [r7, #20]
 8002ca8:	2203      	movs	r2, #3
 8002caa:	4013      	ands	r3, r2
 8002cac:	009b      	lsls	r3, r3, #2
 8002cae:	220f      	movs	r2, #15
 8002cb0:	409a      	lsls	r2, r3
 8002cb2:	0013      	movs	r3, r2
 8002cb4:	43da      	mvns	r2, r3
 8002cb6:	693b      	ldr	r3, [r7, #16]
 8002cb8:	4013      	ands	r3, r2
 8002cba:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8002cbc:	687a      	ldr	r2, [r7, #4]
 8002cbe:	23a0      	movs	r3, #160	; 0xa0
 8002cc0:	05db      	lsls	r3, r3, #23
 8002cc2:	429a      	cmp	r2, r3
 8002cc4:	d01f      	beq.n	8002d06 <HAL_GPIO_Init+0x1f6>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	4a4a      	ldr	r2, [pc, #296]	; (8002df4 <HAL_GPIO_Init+0x2e4>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d019      	beq.n	8002d02 <HAL_GPIO_Init+0x1f2>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	4a49      	ldr	r2, [pc, #292]	; (8002df8 <HAL_GPIO_Init+0x2e8>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d013      	beq.n	8002cfe <HAL_GPIO_Init+0x1ee>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	4a48      	ldr	r2, [pc, #288]	; (8002dfc <HAL_GPIO_Init+0x2ec>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d00d      	beq.n	8002cfa <HAL_GPIO_Init+0x1ea>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	4a47      	ldr	r2, [pc, #284]	; (8002e00 <HAL_GPIO_Init+0x2f0>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d007      	beq.n	8002cf6 <HAL_GPIO_Init+0x1e6>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	4a46      	ldr	r2, [pc, #280]	; (8002e04 <HAL_GPIO_Init+0x2f4>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d101      	bne.n	8002cf2 <HAL_GPIO_Init+0x1e2>
 8002cee:	2305      	movs	r3, #5
 8002cf0:	e00a      	b.n	8002d08 <HAL_GPIO_Init+0x1f8>
 8002cf2:	2306      	movs	r3, #6
 8002cf4:	e008      	b.n	8002d08 <HAL_GPIO_Init+0x1f8>
 8002cf6:	2304      	movs	r3, #4
 8002cf8:	e006      	b.n	8002d08 <HAL_GPIO_Init+0x1f8>
 8002cfa:	2303      	movs	r3, #3
 8002cfc:	e004      	b.n	8002d08 <HAL_GPIO_Init+0x1f8>
 8002cfe:	2302      	movs	r3, #2
 8002d00:	e002      	b.n	8002d08 <HAL_GPIO_Init+0x1f8>
 8002d02:	2301      	movs	r3, #1
 8002d04:	e000      	b.n	8002d08 <HAL_GPIO_Init+0x1f8>
 8002d06:	2300      	movs	r3, #0
 8002d08:	697a      	ldr	r2, [r7, #20]
 8002d0a:	2103      	movs	r1, #3
 8002d0c:	400a      	ands	r2, r1
 8002d0e:	0092      	lsls	r2, r2, #2
 8002d10:	4093      	lsls	r3, r2
 8002d12:	693a      	ldr	r2, [r7, #16]
 8002d14:	4313      	orrs	r3, r2
 8002d16:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002d18:	4935      	ldr	r1, [pc, #212]	; (8002df0 <HAL_GPIO_Init+0x2e0>)
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	089b      	lsrs	r3, r3, #2
 8002d1e:	3302      	adds	r3, #2
 8002d20:	009b      	lsls	r3, r3, #2
 8002d22:	693a      	ldr	r2, [r7, #16]
 8002d24:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d26:	4b38      	ldr	r3, [pc, #224]	; (8002e08 <HAL_GPIO_Init+0x2f8>)
 8002d28:	689b      	ldr	r3, [r3, #8]
 8002d2a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	43da      	mvns	r2, r3
 8002d30:	693b      	ldr	r3, [r7, #16]
 8002d32:	4013      	ands	r3, r2
 8002d34:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	685a      	ldr	r2, [r3, #4]
 8002d3a:	2380      	movs	r3, #128	; 0x80
 8002d3c:	035b      	lsls	r3, r3, #13
 8002d3e:	4013      	ands	r3, r2
 8002d40:	d003      	beq.n	8002d4a <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8002d42:	693a      	ldr	r2, [r7, #16]
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	4313      	orrs	r3, r2
 8002d48:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002d4a:	4b2f      	ldr	r3, [pc, #188]	; (8002e08 <HAL_GPIO_Init+0x2f8>)
 8002d4c:	693a      	ldr	r2, [r7, #16]
 8002d4e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002d50:	4b2d      	ldr	r3, [pc, #180]	; (8002e08 <HAL_GPIO_Init+0x2f8>)
 8002d52:	68db      	ldr	r3, [r3, #12]
 8002d54:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	43da      	mvns	r2, r3
 8002d5a:	693b      	ldr	r3, [r7, #16]
 8002d5c:	4013      	ands	r3, r2
 8002d5e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	685a      	ldr	r2, [r3, #4]
 8002d64:	2380      	movs	r3, #128	; 0x80
 8002d66:	039b      	lsls	r3, r3, #14
 8002d68:	4013      	ands	r3, r2
 8002d6a:	d003      	beq.n	8002d74 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8002d6c:	693a      	ldr	r2, [r7, #16]
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	4313      	orrs	r3, r2
 8002d72:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002d74:	4b24      	ldr	r3, [pc, #144]	; (8002e08 <HAL_GPIO_Init+0x2f8>)
 8002d76:	693a      	ldr	r2, [r7, #16]
 8002d78:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8002d7a:	4b23      	ldr	r3, [pc, #140]	; (8002e08 <HAL_GPIO_Init+0x2f8>)
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	43da      	mvns	r2, r3
 8002d84:	693b      	ldr	r3, [r7, #16]
 8002d86:	4013      	ands	r3, r2
 8002d88:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	685a      	ldr	r2, [r3, #4]
 8002d8e:	2380      	movs	r3, #128	; 0x80
 8002d90:	029b      	lsls	r3, r3, #10
 8002d92:	4013      	ands	r3, r2
 8002d94:	d003      	beq.n	8002d9e <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8002d96:	693a      	ldr	r2, [r7, #16]
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002d9e:	4b1a      	ldr	r3, [pc, #104]	; (8002e08 <HAL_GPIO_Init+0x2f8>)
 8002da0:	693a      	ldr	r2, [r7, #16]
 8002da2:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002da4:	4b18      	ldr	r3, [pc, #96]	; (8002e08 <HAL_GPIO_Init+0x2f8>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	43da      	mvns	r2, r3
 8002dae:	693b      	ldr	r3, [r7, #16]
 8002db0:	4013      	ands	r3, r2
 8002db2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	685a      	ldr	r2, [r3, #4]
 8002db8:	2380      	movs	r3, #128	; 0x80
 8002dba:	025b      	lsls	r3, r3, #9
 8002dbc:	4013      	ands	r3, r2
 8002dbe:	d003      	beq.n	8002dc8 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8002dc0:	693a      	ldr	r2, [r7, #16]
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	4313      	orrs	r3, r2
 8002dc6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002dc8:	4b0f      	ldr	r3, [pc, #60]	; (8002e08 <HAL_GPIO_Init+0x2f8>)
 8002dca:	693a      	ldr	r2, [r7, #16]
 8002dcc:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8002dce:	697b      	ldr	r3, [r7, #20]
 8002dd0:	3301      	adds	r3, #1
 8002dd2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	681a      	ldr	r2, [r3, #0]
 8002dd8:	697b      	ldr	r3, [r7, #20]
 8002dda:	40da      	lsrs	r2, r3
 8002ddc:	1e13      	subs	r3, r2, #0
 8002dde:	d000      	beq.n	8002de2 <HAL_GPIO_Init+0x2d2>
 8002de0:	e6a2      	b.n	8002b28 <HAL_GPIO_Init+0x18>
  }
}
 8002de2:	46c0      	nop			; (mov r8, r8)
 8002de4:	46c0      	nop			; (mov r8, r8)
 8002de6:	46bd      	mov	sp, r7
 8002de8:	b006      	add	sp, #24
 8002dea:	bd80      	pop	{r7, pc}
 8002dec:	40021000 	.word	0x40021000
 8002df0:	40010000 	.word	0x40010000
 8002df4:	50000400 	.word	0x50000400
 8002df8:	50000800 	.word	0x50000800
 8002dfc:	50000c00 	.word	0x50000c00
 8002e00:	50001000 	.word	0x50001000
 8002e04:	50001c00 	.word	0x50001c00
 8002e08:	40010400 	.word	0x40010400

08002e0c <HAL_PWR_ConfigPVD>:
  *         more details about the voltage threshold corresponding to each
  *         detection level.
  * @retval None
  */
void HAL_PWR_ConfigPVD(PWR_PVDTypeDef *sConfigPVD)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b082      	sub	sp, #8
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_PVD_LEVEL(sConfigPVD->PVDLevel));
  assert_param(IS_PWR_PVD_MODE(sConfigPVD->Mode));

  /* Set PLS[7:5] bits according to PVDLevel value */
  MODIFY_REG(PWR->CR, PWR_CR_PLS, sConfigPVD->PVDLevel);
 8002e14:	4b2b      	ldr	r3, [pc, #172]	; (8002ec4 <HAL_PWR_ConfigPVD+0xb8>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	22e0      	movs	r2, #224	; 0xe0
 8002e1a:	4393      	bics	r3, r2
 8002e1c:	0019      	movs	r1, r3
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681a      	ldr	r2, [r3, #0]
 8002e22:	4b28      	ldr	r3, [pc, #160]	; (8002ec4 <HAL_PWR_ConfigPVD+0xb8>)
 8002e24:	430a      	orrs	r2, r1
 8002e26:	601a      	str	r2, [r3, #0]
  
  /* Clear any previous config. Keep it clear if no event or IT mode is selected */
  __HAL_PWR_PVD_EXTI_DISABLE_EVENT();
 8002e28:	4b27      	ldr	r3, [pc, #156]	; (8002ec8 <HAL_PWR_ConfigPVD+0xbc>)
 8002e2a:	685a      	ldr	r2, [r3, #4]
 8002e2c:	4b26      	ldr	r3, [pc, #152]	; (8002ec8 <HAL_PWR_ConfigPVD+0xbc>)
 8002e2e:	4927      	ldr	r1, [pc, #156]	; (8002ecc <HAL_PWR_ConfigPVD+0xc0>)
 8002e30:	400a      	ands	r2, r1
 8002e32:	605a      	str	r2, [r3, #4]
  __HAL_PWR_PVD_EXTI_DISABLE_IT();
 8002e34:	4b24      	ldr	r3, [pc, #144]	; (8002ec8 <HAL_PWR_ConfigPVD+0xbc>)
 8002e36:	681a      	ldr	r2, [r3, #0]
 8002e38:	4b23      	ldr	r3, [pc, #140]	; (8002ec8 <HAL_PWR_ConfigPVD+0xbc>)
 8002e3a:	4924      	ldr	r1, [pc, #144]	; (8002ecc <HAL_PWR_ConfigPVD+0xc0>)
 8002e3c:	400a      	ands	r2, r1
 8002e3e:	601a      	str	r2, [r3, #0]
  __HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE(); 
 8002e40:	4b21      	ldr	r3, [pc, #132]	; (8002ec8 <HAL_PWR_ConfigPVD+0xbc>)
 8002e42:	68da      	ldr	r2, [r3, #12]
 8002e44:	4b20      	ldr	r3, [pc, #128]	; (8002ec8 <HAL_PWR_ConfigPVD+0xbc>)
 8002e46:	4921      	ldr	r1, [pc, #132]	; (8002ecc <HAL_PWR_ConfigPVD+0xc0>)
 8002e48:	400a      	ands	r2, r1
 8002e4a:	60da      	str	r2, [r3, #12]
  __HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE();
 8002e4c:	4b1e      	ldr	r3, [pc, #120]	; (8002ec8 <HAL_PWR_ConfigPVD+0xbc>)
 8002e4e:	689a      	ldr	r2, [r3, #8]
 8002e50:	4b1d      	ldr	r3, [pc, #116]	; (8002ec8 <HAL_PWR_ConfigPVD+0xbc>)
 8002e52:	491e      	ldr	r1, [pc, #120]	; (8002ecc <HAL_PWR_ConfigPVD+0xc0>)
 8002e54:	400a      	ands	r2, r1
 8002e56:	609a      	str	r2, [r3, #8]

  /* Configure interrupt mode */
  if((sConfigPVD->Mode & PVD_MODE_IT) == PVD_MODE_IT)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	685a      	ldr	r2, [r3, #4]
 8002e5c:	2380      	movs	r3, #128	; 0x80
 8002e5e:	025b      	lsls	r3, r3, #9
 8002e60:	4013      	ands	r3, r2
 8002e62:	d006      	beq.n	8002e72 <HAL_PWR_ConfigPVD+0x66>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_IT();
 8002e64:	4b18      	ldr	r3, [pc, #96]	; (8002ec8 <HAL_PWR_ConfigPVD+0xbc>)
 8002e66:	681a      	ldr	r2, [r3, #0]
 8002e68:	4b17      	ldr	r3, [pc, #92]	; (8002ec8 <HAL_PWR_ConfigPVD+0xbc>)
 8002e6a:	2180      	movs	r1, #128	; 0x80
 8002e6c:	0249      	lsls	r1, r1, #9
 8002e6e:	430a      	orrs	r2, r1
 8002e70:	601a      	str	r2, [r3, #0]
  }
  
  /* Configure event mode */
  if((sConfigPVD->Mode & PVD_MODE_EVT) == PVD_MODE_EVT)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	685a      	ldr	r2, [r3, #4]
 8002e76:	2380      	movs	r3, #128	; 0x80
 8002e78:	029b      	lsls	r3, r3, #10
 8002e7a:	4013      	ands	r3, r2
 8002e7c:	d006      	beq.n	8002e8c <HAL_PWR_ConfigPVD+0x80>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_EVENT();
 8002e7e:	4b12      	ldr	r3, [pc, #72]	; (8002ec8 <HAL_PWR_ConfigPVD+0xbc>)
 8002e80:	685a      	ldr	r2, [r3, #4]
 8002e82:	4b11      	ldr	r3, [pc, #68]	; (8002ec8 <HAL_PWR_ConfigPVD+0xbc>)
 8002e84:	2180      	movs	r1, #128	; 0x80
 8002e86:	0249      	lsls	r1, r1, #9
 8002e88:	430a      	orrs	r2, r1
 8002e8a:	605a      	str	r2, [r3, #4]
  }
  
  /* Configure the edge */
  if((sConfigPVD->Mode & PVD_RISING_EDGE) == PVD_RISING_EDGE)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	2201      	movs	r2, #1
 8002e92:	4013      	ands	r3, r2
 8002e94:	d006      	beq.n	8002ea4 <HAL_PWR_ConfigPVD+0x98>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE();
 8002e96:	4b0c      	ldr	r3, [pc, #48]	; (8002ec8 <HAL_PWR_ConfigPVD+0xbc>)
 8002e98:	689a      	ldr	r2, [r3, #8]
 8002e9a:	4b0b      	ldr	r3, [pc, #44]	; (8002ec8 <HAL_PWR_ConfigPVD+0xbc>)
 8002e9c:	2180      	movs	r1, #128	; 0x80
 8002e9e:	0249      	lsls	r1, r1, #9
 8002ea0:	430a      	orrs	r2, r1
 8002ea2:	609a      	str	r2, [r3, #8]
  }
  
  if((sConfigPVD->Mode & PVD_FALLING_EDGE) == PVD_FALLING_EDGE)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	2202      	movs	r2, #2
 8002eaa:	4013      	ands	r3, r2
 8002eac:	d006      	beq.n	8002ebc <HAL_PWR_ConfigPVD+0xb0>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE();
 8002eae:	4b06      	ldr	r3, [pc, #24]	; (8002ec8 <HAL_PWR_ConfigPVD+0xbc>)
 8002eb0:	68da      	ldr	r2, [r3, #12]
 8002eb2:	4b05      	ldr	r3, [pc, #20]	; (8002ec8 <HAL_PWR_ConfigPVD+0xbc>)
 8002eb4:	2180      	movs	r1, #128	; 0x80
 8002eb6:	0249      	lsls	r1, r1, #9
 8002eb8:	430a      	orrs	r2, r1
 8002eba:	60da      	str	r2, [r3, #12]
  }
}
 8002ebc:	46c0      	nop			; (mov r8, r8)
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	b002      	add	sp, #8
 8002ec2:	bd80      	pop	{r7, pc}
 8002ec4:	40007000 	.word	0x40007000
 8002ec8:	40010400 	.word	0x40010400
 8002ecc:	fffeffff 	.word	0xfffeffff

08002ed0 <HAL_PWR_EnablePVD>:
/**
  * @brief Enables the Power Voltage Detector(PVD).
  * @retval None
  */
void HAL_PWR_EnablePVD(void)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	af00      	add	r7, sp, #0
  /* Enable the power voltage detector */
  SET_BIT(PWR->CR, PWR_CR_PVDE);
 8002ed4:	4b04      	ldr	r3, [pc, #16]	; (8002ee8 <HAL_PWR_EnablePVD+0x18>)
 8002ed6:	681a      	ldr	r2, [r3, #0]
 8002ed8:	4b03      	ldr	r3, [pc, #12]	; (8002ee8 <HAL_PWR_EnablePVD+0x18>)
 8002eda:	2110      	movs	r1, #16
 8002edc:	430a      	orrs	r2, r1
 8002ede:	601a      	str	r2, [r3, #0]
}
 8002ee0:	46c0      	nop			; (mov r8, r8)
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}
 8002ee6:	46c0      	nop			; (mov r8, r8)
 8002ee8:	40007000 	.word	0x40007000

08002eec <HAL_PWR_PVD_IRQHandler>:
  * @brief This function handles the PWR PVD interrupt request.
  * @note This API should be called under the PVD_IRQHandler().
  * @retval None
  */
void HAL_PWR_PVD_IRQHandler(void)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	af00      	add	r7, sp, #0
  /* Check PWR exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
 8002ef0:	4b07      	ldr	r3, [pc, #28]	; (8002f10 <HAL_PWR_PVD_IRQHandler+0x24>)
 8002ef2:	695a      	ldr	r2, [r3, #20]
 8002ef4:	2380      	movs	r3, #128	; 0x80
 8002ef6:	025b      	lsls	r3, r3, #9
 8002ef8:	4013      	ands	r3, r2
 8002efa:	d005      	beq.n	8002f08 <HAL_PWR_PVD_IRQHandler+0x1c>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 8002efc:	f7fe f954 	bl	80011a8 <HAL_PWR_PVDCallback>

    /* Clear PWR Exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 8002f00:	4b03      	ldr	r3, [pc, #12]	; (8002f10 <HAL_PWR_PVD_IRQHandler+0x24>)
 8002f02:	2280      	movs	r2, #128	; 0x80
 8002f04:	0252      	lsls	r2, r2, #9
 8002f06:	615a      	str	r2, [r3, #20]
  }
}
 8002f08:	46c0      	nop			; (mov r8, r8)
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bd80      	pop	{r7, pc}
 8002f0e:	46c0      	nop			; (mov r8, r8)
 8002f10:	40010400 	.word	0x40010400

08002f14 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f14:	b5b0      	push	{r4, r5, r7, lr}
 8002f16:	b08a      	sub	sp, #40	; 0x28
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d102      	bne.n	8002f28 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
 8002f24:	f000 fbbf 	bl	80036a6 <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f28:	4bc9      	ldr	r3, [pc, #804]	; (8003250 <HAL_RCC_OscConfig+0x33c>)
 8002f2a:	68db      	ldr	r3, [r3, #12]
 8002f2c:	220c      	movs	r2, #12
 8002f2e:	4013      	ands	r3, r2
 8002f30:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002f32:	4bc7      	ldr	r3, [pc, #796]	; (8003250 <HAL_RCC_OscConfig+0x33c>)
 8002f34:	68da      	ldr	r2, [r3, #12]
 8002f36:	2380      	movs	r3, #128	; 0x80
 8002f38:	025b      	lsls	r3, r3, #9
 8002f3a:	4013      	ands	r3, r2
 8002f3c:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	2201      	movs	r2, #1
 8002f44:	4013      	ands	r3, r2
 8002f46:	d100      	bne.n	8002f4a <HAL_RCC_OscConfig+0x36>
 8002f48:	e07e      	b.n	8003048 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002f4a:	69fb      	ldr	r3, [r7, #28]
 8002f4c:	2b08      	cmp	r3, #8
 8002f4e:	d007      	beq.n	8002f60 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002f50:	69fb      	ldr	r3, [r7, #28]
 8002f52:	2b0c      	cmp	r3, #12
 8002f54:	d112      	bne.n	8002f7c <HAL_RCC_OscConfig+0x68>
 8002f56:	69ba      	ldr	r2, [r7, #24]
 8002f58:	2380      	movs	r3, #128	; 0x80
 8002f5a:	025b      	lsls	r3, r3, #9
 8002f5c:	429a      	cmp	r2, r3
 8002f5e:	d10d      	bne.n	8002f7c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f60:	4bbb      	ldr	r3, [pc, #748]	; (8003250 <HAL_RCC_OscConfig+0x33c>)
 8002f62:	681a      	ldr	r2, [r3, #0]
 8002f64:	2380      	movs	r3, #128	; 0x80
 8002f66:	029b      	lsls	r3, r3, #10
 8002f68:	4013      	ands	r3, r2
 8002f6a:	d100      	bne.n	8002f6e <HAL_RCC_OscConfig+0x5a>
 8002f6c:	e06b      	b.n	8003046 <HAL_RCC_OscConfig+0x132>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d167      	bne.n	8003046 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8002f76:	2301      	movs	r3, #1
 8002f78:	f000 fb95 	bl	80036a6 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	685a      	ldr	r2, [r3, #4]
 8002f80:	2380      	movs	r3, #128	; 0x80
 8002f82:	025b      	lsls	r3, r3, #9
 8002f84:	429a      	cmp	r2, r3
 8002f86:	d107      	bne.n	8002f98 <HAL_RCC_OscConfig+0x84>
 8002f88:	4bb1      	ldr	r3, [pc, #708]	; (8003250 <HAL_RCC_OscConfig+0x33c>)
 8002f8a:	681a      	ldr	r2, [r3, #0]
 8002f8c:	4bb0      	ldr	r3, [pc, #704]	; (8003250 <HAL_RCC_OscConfig+0x33c>)
 8002f8e:	2180      	movs	r1, #128	; 0x80
 8002f90:	0249      	lsls	r1, r1, #9
 8002f92:	430a      	orrs	r2, r1
 8002f94:	601a      	str	r2, [r3, #0]
 8002f96:	e027      	b.n	8002fe8 <HAL_RCC_OscConfig+0xd4>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	685a      	ldr	r2, [r3, #4]
 8002f9c:	23a0      	movs	r3, #160	; 0xa0
 8002f9e:	02db      	lsls	r3, r3, #11
 8002fa0:	429a      	cmp	r2, r3
 8002fa2:	d10e      	bne.n	8002fc2 <HAL_RCC_OscConfig+0xae>
 8002fa4:	4baa      	ldr	r3, [pc, #680]	; (8003250 <HAL_RCC_OscConfig+0x33c>)
 8002fa6:	681a      	ldr	r2, [r3, #0]
 8002fa8:	4ba9      	ldr	r3, [pc, #676]	; (8003250 <HAL_RCC_OscConfig+0x33c>)
 8002faa:	2180      	movs	r1, #128	; 0x80
 8002fac:	02c9      	lsls	r1, r1, #11
 8002fae:	430a      	orrs	r2, r1
 8002fb0:	601a      	str	r2, [r3, #0]
 8002fb2:	4ba7      	ldr	r3, [pc, #668]	; (8003250 <HAL_RCC_OscConfig+0x33c>)
 8002fb4:	681a      	ldr	r2, [r3, #0]
 8002fb6:	4ba6      	ldr	r3, [pc, #664]	; (8003250 <HAL_RCC_OscConfig+0x33c>)
 8002fb8:	2180      	movs	r1, #128	; 0x80
 8002fba:	0249      	lsls	r1, r1, #9
 8002fbc:	430a      	orrs	r2, r1
 8002fbe:	601a      	str	r2, [r3, #0]
 8002fc0:	e012      	b.n	8002fe8 <HAL_RCC_OscConfig+0xd4>
 8002fc2:	4ba3      	ldr	r3, [pc, #652]	; (8003250 <HAL_RCC_OscConfig+0x33c>)
 8002fc4:	681a      	ldr	r2, [r3, #0]
 8002fc6:	4ba2      	ldr	r3, [pc, #648]	; (8003250 <HAL_RCC_OscConfig+0x33c>)
 8002fc8:	49a2      	ldr	r1, [pc, #648]	; (8003254 <HAL_RCC_OscConfig+0x340>)
 8002fca:	400a      	ands	r2, r1
 8002fcc:	601a      	str	r2, [r3, #0]
 8002fce:	4ba0      	ldr	r3, [pc, #640]	; (8003250 <HAL_RCC_OscConfig+0x33c>)
 8002fd0:	681a      	ldr	r2, [r3, #0]
 8002fd2:	2380      	movs	r3, #128	; 0x80
 8002fd4:	025b      	lsls	r3, r3, #9
 8002fd6:	4013      	ands	r3, r2
 8002fd8:	60fb      	str	r3, [r7, #12]
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	4b9c      	ldr	r3, [pc, #624]	; (8003250 <HAL_RCC_OscConfig+0x33c>)
 8002fde:	681a      	ldr	r2, [r3, #0]
 8002fe0:	4b9b      	ldr	r3, [pc, #620]	; (8003250 <HAL_RCC_OscConfig+0x33c>)
 8002fe2:	499d      	ldr	r1, [pc, #628]	; (8003258 <HAL_RCC_OscConfig+0x344>)
 8002fe4:	400a      	ands	r2, r1
 8002fe6:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d015      	beq.n	800301c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ff0:	f7ff f9c0 	bl	8002374 <HAL_GetTick>
 8002ff4:	0003      	movs	r3, r0
 8002ff6:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002ff8:	e009      	b.n	800300e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ffa:	f7ff f9bb 	bl	8002374 <HAL_GetTick>
 8002ffe:	0002      	movs	r2, r0
 8003000:	697b      	ldr	r3, [r7, #20]
 8003002:	1ad3      	subs	r3, r2, r3
 8003004:	2b64      	cmp	r3, #100	; 0x64
 8003006:	d902      	bls.n	800300e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003008:	2303      	movs	r3, #3
 800300a:	f000 fb4c 	bl	80036a6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800300e:	4b90      	ldr	r3, [pc, #576]	; (8003250 <HAL_RCC_OscConfig+0x33c>)
 8003010:	681a      	ldr	r2, [r3, #0]
 8003012:	2380      	movs	r3, #128	; 0x80
 8003014:	029b      	lsls	r3, r3, #10
 8003016:	4013      	ands	r3, r2
 8003018:	d0ef      	beq.n	8002ffa <HAL_RCC_OscConfig+0xe6>
 800301a:	e015      	b.n	8003048 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800301c:	f7ff f9aa 	bl	8002374 <HAL_GetTick>
 8003020:	0003      	movs	r3, r0
 8003022:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003024:	e008      	b.n	8003038 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003026:	f7ff f9a5 	bl	8002374 <HAL_GetTick>
 800302a:	0002      	movs	r2, r0
 800302c:	697b      	ldr	r3, [r7, #20]
 800302e:	1ad3      	subs	r3, r2, r3
 8003030:	2b64      	cmp	r3, #100	; 0x64
 8003032:	d901      	bls.n	8003038 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8003034:	2303      	movs	r3, #3
 8003036:	e336      	b.n	80036a6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003038:	4b85      	ldr	r3, [pc, #532]	; (8003250 <HAL_RCC_OscConfig+0x33c>)
 800303a:	681a      	ldr	r2, [r3, #0]
 800303c:	2380      	movs	r3, #128	; 0x80
 800303e:	029b      	lsls	r3, r3, #10
 8003040:	4013      	ands	r3, r2
 8003042:	d1f0      	bne.n	8003026 <HAL_RCC_OscConfig+0x112>
 8003044:	e000      	b.n	8003048 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003046:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	2202      	movs	r2, #2
 800304e:	4013      	ands	r3, r2
 8003050:	d100      	bne.n	8003054 <HAL_RCC_OscConfig+0x140>
 8003052:	e099      	b.n	8003188 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	68db      	ldr	r3, [r3, #12]
 8003058:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 800305a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800305c:	2220      	movs	r2, #32
 800305e:	4013      	ands	r3, r2
 8003060:	d009      	beq.n	8003076 <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8003062:	4b7b      	ldr	r3, [pc, #492]	; (8003250 <HAL_RCC_OscConfig+0x33c>)
 8003064:	681a      	ldr	r2, [r3, #0]
 8003066:	4b7a      	ldr	r3, [pc, #488]	; (8003250 <HAL_RCC_OscConfig+0x33c>)
 8003068:	2120      	movs	r1, #32
 800306a:	430a      	orrs	r2, r1
 800306c:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 800306e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003070:	2220      	movs	r2, #32
 8003072:	4393      	bics	r3, r2
 8003074:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003076:	69fb      	ldr	r3, [r7, #28]
 8003078:	2b04      	cmp	r3, #4
 800307a:	d005      	beq.n	8003088 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800307c:	69fb      	ldr	r3, [r7, #28]
 800307e:	2b0c      	cmp	r3, #12
 8003080:	d13e      	bne.n	8003100 <HAL_RCC_OscConfig+0x1ec>
 8003082:	69bb      	ldr	r3, [r7, #24]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d13b      	bne.n	8003100 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8003088:	4b71      	ldr	r3, [pc, #452]	; (8003250 <HAL_RCC_OscConfig+0x33c>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	2204      	movs	r2, #4
 800308e:	4013      	ands	r3, r2
 8003090:	d004      	beq.n	800309c <HAL_RCC_OscConfig+0x188>
 8003092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003094:	2b00      	cmp	r3, #0
 8003096:	d101      	bne.n	800309c <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8003098:	2301      	movs	r3, #1
 800309a:	e304      	b.n	80036a6 <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800309c:	4b6c      	ldr	r3, [pc, #432]	; (8003250 <HAL_RCC_OscConfig+0x33c>)
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	4a6e      	ldr	r2, [pc, #440]	; (800325c <HAL_RCC_OscConfig+0x348>)
 80030a2:	4013      	ands	r3, r2
 80030a4:	0019      	movs	r1, r3
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	691b      	ldr	r3, [r3, #16]
 80030aa:	021a      	lsls	r2, r3, #8
 80030ac:	4b68      	ldr	r3, [pc, #416]	; (8003250 <HAL_RCC_OscConfig+0x33c>)
 80030ae:	430a      	orrs	r2, r1
 80030b0:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80030b2:	4b67      	ldr	r3, [pc, #412]	; (8003250 <HAL_RCC_OscConfig+0x33c>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	2209      	movs	r2, #9
 80030b8:	4393      	bics	r3, r2
 80030ba:	0019      	movs	r1, r3
 80030bc:	4b64      	ldr	r3, [pc, #400]	; (8003250 <HAL_RCC_OscConfig+0x33c>)
 80030be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030c0:	430a      	orrs	r2, r1
 80030c2:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80030c4:	f000 fc42 	bl	800394c <HAL_RCC_GetSysClockFreq>
 80030c8:	0001      	movs	r1, r0
 80030ca:	4b61      	ldr	r3, [pc, #388]	; (8003250 <HAL_RCC_OscConfig+0x33c>)
 80030cc:	68db      	ldr	r3, [r3, #12]
 80030ce:	091b      	lsrs	r3, r3, #4
 80030d0:	220f      	movs	r2, #15
 80030d2:	4013      	ands	r3, r2
 80030d4:	4a62      	ldr	r2, [pc, #392]	; (8003260 <HAL_RCC_OscConfig+0x34c>)
 80030d6:	5cd3      	ldrb	r3, [r2, r3]
 80030d8:	000a      	movs	r2, r1
 80030da:	40da      	lsrs	r2, r3
 80030dc:	4b61      	ldr	r3, [pc, #388]	; (8003264 <HAL_RCC_OscConfig+0x350>)
 80030de:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 80030e0:	4b61      	ldr	r3, [pc, #388]	; (8003268 <HAL_RCC_OscConfig+0x354>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	2513      	movs	r5, #19
 80030e6:	197c      	adds	r4, r7, r5
 80030e8:	0018      	movs	r0, r3
 80030ea:	f7ff f8fd 	bl	80022e8 <HAL_InitTick>
 80030ee:	0003      	movs	r3, r0
 80030f0:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 80030f2:	197b      	adds	r3, r7, r5
 80030f4:	781b      	ldrb	r3, [r3, #0]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d046      	beq.n	8003188 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 80030fa:	197b      	adds	r3, r7, r5
 80030fc:	781b      	ldrb	r3, [r3, #0]
 80030fe:	e2d2      	b.n	80036a6 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8003100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003102:	2b00      	cmp	r3, #0
 8003104:	d027      	beq.n	8003156 <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8003106:	4b52      	ldr	r3, [pc, #328]	; (8003250 <HAL_RCC_OscConfig+0x33c>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	2209      	movs	r2, #9
 800310c:	4393      	bics	r3, r2
 800310e:	0019      	movs	r1, r3
 8003110:	4b4f      	ldr	r3, [pc, #316]	; (8003250 <HAL_RCC_OscConfig+0x33c>)
 8003112:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003114:	430a      	orrs	r2, r1
 8003116:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003118:	f7ff f92c 	bl	8002374 <HAL_GetTick>
 800311c:	0003      	movs	r3, r0
 800311e:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003120:	e008      	b.n	8003134 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003122:	f7ff f927 	bl	8002374 <HAL_GetTick>
 8003126:	0002      	movs	r2, r0
 8003128:	697b      	ldr	r3, [r7, #20]
 800312a:	1ad3      	subs	r3, r2, r3
 800312c:	2b02      	cmp	r3, #2
 800312e:	d901      	bls.n	8003134 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 8003130:	2303      	movs	r3, #3
 8003132:	e2b8      	b.n	80036a6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003134:	4b46      	ldr	r3, [pc, #280]	; (8003250 <HAL_RCC_OscConfig+0x33c>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	2204      	movs	r2, #4
 800313a:	4013      	ands	r3, r2
 800313c:	d0f1      	beq.n	8003122 <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800313e:	4b44      	ldr	r3, [pc, #272]	; (8003250 <HAL_RCC_OscConfig+0x33c>)
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	4a46      	ldr	r2, [pc, #280]	; (800325c <HAL_RCC_OscConfig+0x348>)
 8003144:	4013      	ands	r3, r2
 8003146:	0019      	movs	r1, r3
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	691b      	ldr	r3, [r3, #16]
 800314c:	021a      	lsls	r2, r3, #8
 800314e:	4b40      	ldr	r3, [pc, #256]	; (8003250 <HAL_RCC_OscConfig+0x33c>)
 8003150:	430a      	orrs	r2, r1
 8003152:	605a      	str	r2, [r3, #4]
 8003154:	e018      	b.n	8003188 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003156:	4b3e      	ldr	r3, [pc, #248]	; (8003250 <HAL_RCC_OscConfig+0x33c>)
 8003158:	681a      	ldr	r2, [r3, #0]
 800315a:	4b3d      	ldr	r3, [pc, #244]	; (8003250 <HAL_RCC_OscConfig+0x33c>)
 800315c:	2101      	movs	r1, #1
 800315e:	438a      	bics	r2, r1
 8003160:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003162:	f7ff f907 	bl	8002374 <HAL_GetTick>
 8003166:	0003      	movs	r3, r0
 8003168:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800316a:	e008      	b.n	800317e <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800316c:	f7ff f902 	bl	8002374 <HAL_GetTick>
 8003170:	0002      	movs	r2, r0
 8003172:	697b      	ldr	r3, [r7, #20]
 8003174:	1ad3      	subs	r3, r2, r3
 8003176:	2b02      	cmp	r3, #2
 8003178:	d901      	bls.n	800317e <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 800317a:	2303      	movs	r3, #3
 800317c:	e293      	b.n	80036a6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800317e:	4b34      	ldr	r3, [pc, #208]	; (8003250 <HAL_RCC_OscConfig+0x33c>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	2204      	movs	r2, #4
 8003184:	4013      	ands	r3, r2
 8003186:	d1f1      	bne.n	800316c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	2210      	movs	r2, #16
 800318e:	4013      	ands	r3, r2
 8003190:	d100      	bne.n	8003194 <HAL_RCC_OscConfig+0x280>
 8003192:	e0a2      	b.n	80032da <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003194:	69fb      	ldr	r3, [r7, #28]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d140      	bne.n	800321c <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800319a:	4b2d      	ldr	r3, [pc, #180]	; (8003250 <HAL_RCC_OscConfig+0x33c>)
 800319c:	681a      	ldr	r2, [r3, #0]
 800319e:	2380      	movs	r3, #128	; 0x80
 80031a0:	009b      	lsls	r3, r3, #2
 80031a2:	4013      	ands	r3, r2
 80031a4:	d005      	beq.n	80031b2 <HAL_RCC_OscConfig+0x29e>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	69db      	ldr	r3, [r3, #28]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d101      	bne.n	80031b2 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 80031ae:	2301      	movs	r3, #1
 80031b0:	e279      	b.n	80036a6 <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80031b2:	4b27      	ldr	r3, [pc, #156]	; (8003250 <HAL_RCC_OscConfig+0x33c>)
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	4a2d      	ldr	r2, [pc, #180]	; (800326c <HAL_RCC_OscConfig+0x358>)
 80031b8:	4013      	ands	r3, r2
 80031ba:	0019      	movs	r1, r3
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80031c0:	4b23      	ldr	r3, [pc, #140]	; (8003250 <HAL_RCC_OscConfig+0x33c>)
 80031c2:	430a      	orrs	r2, r1
 80031c4:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80031c6:	4b22      	ldr	r3, [pc, #136]	; (8003250 <HAL_RCC_OscConfig+0x33c>)
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	021b      	lsls	r3, r3, #8
 80031cc:	0a19      	lsrs	r1, r3, #8
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6a1b      	ldr	r3, [r3, #32]
 80031d2:	061a      	lsls	r2, r3, #24
 80031d4:	4b1e      	ldr	r3, [pc, #120]	; (8003250 <HAL_RCC_OscConfig+0x33c>)
 80031d6:	430a      	orrs	r2, r1
 80031d8:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031de:	0b5b      	lsrs	r3, r3, #13
 80031e0:	3301      	adds	r3, #1
 80031e2:	2280      	movs	r2, #128	; 0x80
 80031e4:	0212      	lsls	r2, r2, #8
 80031e6:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80031e8:	4b19      	ldr	r3, [pc, #100]	; (8003250 <HAL_RCC_OscConfig+0x33c>)
 80031ea:	68db      	ldr	r3, [r3, #12]
 80031ec:	091b      	lsrs	r3, r3, #4
 80031ee:	210f      	movs	r1, #15
 80031f0:	400b      	ands	r3, r1
 80031f2:	491b      	ldr	r1, [pc, #108]	; (8003260 <HAL_RCC_OscConfig+0x34c>)
 80031f4:	5ccb      	ldrb	r3, [r1, r3]
 80031f6:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80031f8:	4b1a      	ldr	r3, [pc, #104]	; (8003264 <HAL_RCC_OscConfig+0x350>)
 80031fa:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 80031fc:	4b1a      	ldr	r3, [pc, #104]	; (8003268 <HAL_RCC_OscConfig+0x354>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	2513      	movs	r5, #19
 8003202:	197c      	adds	r4, r7, r5
 8003204:	0018      	movs	r0, r3
 8003206:	f7ff f86f 	bl	80022e8 <HAL_InitTick>
 800320a:	0003      	movs	r3, r0
 800320c:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 800320e:	197b      	adds	r3, r7, r5
 8003210:	781b      	ldrb	r3, [r3, #0]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d061      	beq.n	80032da <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 8003216:	197b      	adds	r3, r7, r5
 8003218:	781b      	ldrb	r3, [r3, #0]
 800321a:	e244      	b.n	80036a6 <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	69db      	ldr	r3, [r3, #28]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d040      	beq.n	80032a6 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003224:	4b0a      	ldr	r3, [pc, #40]	; (8003250 <HAL_RCC_OscConfig+0x33c>)
 8003226:	681a      	ldr	r2, [r3, #0]
 8003228:	4b09      	ldr	r3, [pc, #36]	; (8003250 <HAL_RCC_OscConfig+0x33c>)
 800322a:	2180      	movs	r1, #128	; 0x80
 800322c:	0049      	lsls	r1, r1, #1
 800322e:	430a      	orrs	r2, r1
 8003230:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003232:	f7ff f89f 	bl	8002374 <HAL_GetTick>
 8003236:	0003      	movs	r3, r0
 8003238:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800323a:	e019      	b.n	8003270 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800323c:	f7ff f89a 	bl	8002374 <HAL_GetTick>
 8003240:	0002      	movs	r2, r0
 8003242:	697b      	ldr	r3, [r7, #20]
 8003244:	1ad3      	subs	r3, r2, r3
 8003246:	2b02      	cmp	r3, #2
 8003248:	d912      	bls.n	8003270 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 800324a:	2303      	movs	r3, #3
 800324c:	e22b      	b.n	80036a6 <HAL_RCC_OscConfig+0x792>
 800324e:	46c0      	nop			; (mov r8, r8)
 8003250:	40021000 	.word	0x40021000
 8003254:	fffeffff 	.word	0xfffeffff
 8003258:	fffbffff 	.word	0xfffbffff
 800325c:	ffffe0ff 	.word	0xffffe0ff
 8003260:	08006c18 	.word	0x08006c18
 8003264:	20000128 	.word	0x20000128
 8003268:	2000012c 	.word	0x2000012c
 800326c:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003270:	4bca      	ldr	r3, [pc, #808]	; (800359c <HAL_RCC_OscConfig+0x688>)
 8003272:	681a      	ldr	r2, [r3, #0]
 8003274:	2380      	movs	r3, #128	; 0x80
 8003276:	009b      	lsls	r3, r3, #2
 8003278:	4013      	ands	r3, r2
 800327a:	d0df      	beq.n	800323c <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800327c:	4bc7      	ldr	r3, [pc, #796]	; (800359c <HAL_RCC_OscConfig+0x688>)
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	4ac7      	ldr	r2, [pc, #796]	; (80035a0 <HAL_RCC_OscConfig+0x68c>)
 8003282:	4013      	ands	r3, r2
 8003284:	0019      	movs	r1, r3
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800328a:	4bc4      	ldr	r3, [pc, #784]	; (800359c <HAL_RCC_OscConfig+0x688>)
 800328c:	430a      	orrs	r2, r1
 800328e:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003290:	4bc2      	ldr	r3, [pc, #776]	; (800359c <HAL_RCC_OscConfig+0x688>)
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	021b      	lsls	r3, r3, #8
 8003296:	0a19      	lsrs	r1, r3, #8
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6a1b      	ldr	r3, [r3, #32]
 800329c:	061a      	lsls	r2, r3, #24
 800329e:	4bbf      	ldr	r3, [pc, #764]	; (800359c <HAL_RCC_OscConfig+0x688>)
 80032a0:	430a      	orrs	r2, r1
 80032a2:	605a      	str	r2, [r3, #4]
 80032a4:	e019      	b.n	80032da <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80032a6:	4bbd      	ldr	r3, [pc, #756]	; (800359c <HAL_RCC_OscConfig+0x688>)
 80032a8:	681a      	ldr	r2, [r3, #0]
 80032aa:	4bbc      	ldr	r3, [pc, #752]	; (800359c <HAL_RCC_OscConfig+0x688>)
 80032ac:	49bd      	ldr	r1, [pc, #756]	; (80035a4 <HAL_RCC_OscConfig+0x690>)
 80032ae:	400a      	ands	r2, r1
 80032b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032b2:	f7ff f85f 	bl	8002374 <HAL_GetTick>
 80032b6:	0003      	movs	r3, r0
 80032b8:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80032ba:	e008      	b.n	80032ce <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80032bc:	f7ff f85a 	bl	8002374 <HAL_GetTick>
 80032c0:	0002      	movs	r2, r0
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	1ad3      	subs	r3, r2, r3
 80032c6:	2b02      	cmp	r3, #2
 80032c8:	d901      	bls.n	80032ce <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 80032ca:	2303      	movs	r3, #3
 80032cc:	e1eb      	b.n	80036a6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80032ce:	4bb3      	ldr	r3, [pc, #716]	; (800359c <HAL_RCC_OscConfig+0x688>)
 80032d0:	681a      	ldr	r2, [r3, #0]
 80032d2:	2380      	movs	r3, #128	; 0x80
 80032d4:	009b      	lsls	r3, r3, #2
 80032d6:	4013      	ands	r3, r2
 80032d8:	d1f0      	bne.n	80032bc <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	2208      	movs	r2, #8
 80032e0:	4013      	ands	r3, r2
 80032e2:	d036      	beq.n	8003352 <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	695b      	ldr	r3, [r3, #20]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d019      	beq.n	8003320 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80032ec:	4bab      	ldr	r3, [pc, #684]	; (800359c <HAL_RCC_OscConfig+0x688>)
 80032ee:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80032f0:	4baa      	ldr	r3, [pc, #680]	; (800359c <HAL_RCC_OscConfig+0x688>)
 80032f2:	2101      	movs	r1, #1
 80032f4:	430a      	orrs	r2, r1
 80032f6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032f8:	f7ff f83c 	bl	8002374 <HAL_GetTick>
 80032fc:	0003      	movs	r3, r0
 80032fe:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003300:	e008      	b.n	8003314 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003302:	f7ff f837 	bl	8002374 <HAL_GetTick>
 8003306:	0002      	movs	r2, r0
 8003308:	697b      	ldr	r3, [r7, #20]
 800330a:	1ad3      	subs	r3, r2, r3
 800330c:	2b02      	cmp	r3, #2
 800330e:	d901      	bls.n	8003314 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 8003310:	2303      	movs	r3, #3
 8003312:	e1c8      	b.n	80036a6 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003314:	4ba1      	ldr	r3, [pc, #644]	; (800359c <HAL_RCC_OscConfig+0x688>)
 8003316:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003318:	2202      	movs	r2, #2
 800331a:	4013      	ands	r3, r2
 800331c:	d0f1      	beq.n	8003302 <HAL_RCC_OscConfig+0x3ee>
 800331e:	e018      	b.n	8003352 <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003320:	4b9e      	ldr	r3, [pc, #632]	; (800359c <HAL_RCC_OscConfig+0x688>)
 8003322:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003324:	4b9d      	ldr	r3, [pc, #628]	; (800359c <HAL_RCC_OscConfig+0x688>)
 8003326:	2101      	movs	r1, #1
 8003328:	438a      	bics	r2, r1
 800332a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800332c:	f7ff f822 	bl	8002374 <HAL_GetTick>
 8003330:	0003      	movs	r3, r0
 8003332:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003334:	e008      	b.n	8003348 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003336:	f7ff f81d 	bl	8002374 <HAL_GetTick>
 800333a:	0002      	movs	r2, r0
 800333c:	697b      	ldr	r3, [r7, #20]
 800333e:	1ad3      	subs	r3, r2, r3
 8003340:	2b02      	cmp	r3, #2
 8003342:	d901      	bls.n	8003348 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8003344:	2303      	movs	r3, #3
 8003346:	e1ae      	b.n	80036a6 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003348:	4b94      	ldr	r3, [pc, #592]	; (800359c <HAL_RCC_OscConfig+0x688>)
 800334a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800334c:	2202      	movs	r2, #2
 800334e:	4013      	ands	r3, r2
 8003350:	d1f1      	bne.n	8003336 <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	2204      	movs	r2, #4
 8003358:	4013      	ands	r3, r2
 800335a:	d100      	bne.n	800335e <HAL_RCC_OscConfig+0x44a>
 800335c:	e0ae      	b.n	80034bc <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800335e:	2023      	movs	r0, #35	; 0x23
 8003360:	183b      	adds	r3, r7, r0
 8003362:	2200      	movs	r2, #0
 8003364:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003366:	4b8d      	ldr	r3, [pc, #564]	; (800359c <HAL_RCC_OscConfig+0x688>)
 8003368:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800336a:	2380      	movs	r3, #128	; 0x80
 800336c:	055b      	lsls	r3, r3, #21
 800336e:	4013      	ands	r3, r2
 8003370:	d109      	bne.n	8003386 <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003372:	4b8a      	ldr	r3, [pc, #552]	; (800359c <HAL_RCC_OscConfig+0x688>)
 8003374:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003376:	4b89      	ldr	r3, [pc, #548]	; (800359c <HAL_RCC_OscConfig+0x688>)
 8003378:	2180      	movs	r1, #128	; 0x80
 800337a:	0549      	lsls	r1, r1, #21
 800337c:	430a      	orrs	r2, r1
 800337e:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8003380:	183b      	adds	r3, r7, r0
 8003382:	2201      	movs	r2, #1
 8003384:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003386:	4b88      	ldr	r3, [pc, #544]	; (80035a8 <HAL_RCC_OscConfig+0x694>)
 8003388:	681a      	ldr	r2, [r3, #0]
 800338a:	2380      	movs	r3, #128	; 0x80
 800338c:	005b      	lsls	r3, r3, #1
 800338e:	4013      	ands	r3, r2
 8003390:	d11a      	bne.n	80033c8 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003392:	4b85      	ldr	r3, [pc, #532]	; (80035a8 <HAL_RCC_OscConfig+0x694>)
 8003394:	681a      	ldr	r2, [r3, #0]
 8003396:	4b84      	ldr	r3, [pc, #528]	; (80035a8 <HAL_RCC_OscConfig+0x694>)
 8003398:	2180      	movs	r1, #128	; 0x80
 800339a:	0049      	lsls	r1, r1, #1
 800339c:	430a      	orrs	r2, r1
 800339e:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033a0:	f7fe ffe8 	bl	8002374 <HAL_GetTick>
 80033a4:	0003      	movs	r3, r0
 80033a6:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033a8:	e008      	b.n	80033bc <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033aa:	f7fe ffe3 	bl	8002374 <HAL_GetTick>
 80033ae:	0002      	movs	r2, r0
 80033b0:	697b      	ldr	r3, [r7, #20]
 80033b2:	1ad3      	subs	r3, r2, r3
 80033b4:	2b64      	cmp	r3, #100	; 0x64
 80033b6:	d901      	bls.n	80033bc <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 80033b8:	2303      	movs	r3, #3
 80033ba:	e174      	b.n	80036a6 <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033bc:	4b7a      	ldr	r3, [pc, #488]	; (80035a8 <HAL_RCC_OscConfig+0x694>)
 80033be:	681a      	ldr	r2, [r3, #0]
 80033c0:	2380      	movs	r3, #128	; 0x80
 80033c2:	005b      	lsls	r3, r3, #1
 80033c4:	4013      	ands	r3, r2
 80033c6:	d0f0      	beq.n	80033aa <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	689a      	ldr	r2, [r3, #8]
 80033cc:	2380      	movs	r3, #128	; 0x80
 80033ce:	005b      	lsls	r3, r3, #1
 80033d0:	429a      	cmp	r2, r3
 80033d2:	d107      	bne.n	80033e4 <HAL_RCC_OscConfig+0x4d0>
 80033d4:	4b71      	ldr	r3, [pc, #452]	; (800359c <HAL_RCC_OscConfig+0x688>)
 80033d6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80033d8:	4b70      	ldr	r3, [pc, #448]	; (800359c <HAL_RCC_OscConfig+0x688>)
 80033da:	2180      	movs	r1, #128	; 0x80
 80033dc:	0049      	lsls	r1, r1, #1
 80033de:	430a      	orrs	r2, r1
 80033e0:	651a      	str	r2, [r3, #80]	; 0x50
 80033e2:	e031      	b.n	8003448 <HAL_RCC_OscConfig+0x534>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	689b      	ldr	r3, [r3, #8]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d10c      	bne.n	8003406 <HAL_RCC_OscConfig+0x4f2>
 80033ec:	4b6b      	ldr	r3, [pc, #428]	; (800359c <HAL_RCC_OscConfig+0x688>)
 80033ee:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80033f0:	4b6a      	ldr	r3, [pc, #424]	; (800359c <HAL_RCC_OscConfig+0x688>)
 80033f2:	496c      	ldr	r1, [pc, #432]	; (80035a4 <HAL_RCC_OscConfig+0x690>)
 80033f4:	400a      	ands	r2, r1
 80033f6:	651a      	str	r2, [r3, #80]	; 0x50
 80033f8:	4b68      	ldr	r3, [pc, #416]	; (800359c <HAL_RCC_OscConfig+0x688>)
 80033fa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80033fc:	4b67      	ldr	r3, [pc, #412]	; (800359c <HAL_RCC_OscConfig+0x688>)
 80033fe:	496b      	ldr	r1, [pc, #428]	; (80035ac <HAL_RCC_OscConfig+0x698>)
 8003400:	400a      	ands	r2, r1
 8003402:	651a      	str	r2, [r3, #80]	; 0x50
 8003404:	e020      	b.n	8003448 <HAL_RCC_OscConfig+0x534>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	689a      	ldr	r2, [r3, #8]
 800340a:	23a0      	movs	r3, #160	; 0xa0
 800340c:	00db      	lsls	r3, r3, #3
 800340e:	429a      	cmp	r2, r3
 8003410:	d10e      	bne.n	8003430 <HAL_RCC_OscConfig+0x51c>
 8003412:	4b62      	ldr	r3, [pc, #392]	; (800359c <HAL_RCC_OscConfig+0x688>)
 8003414:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003416:	4b61      	ldr	r3, [pc, #388]	; (800359c <HAL_RCC_OscConfig+0x688>)
 8003418:	2180      	movs	r1, #128	; 0x80
 800341a:	00c9      	lsls	r1, r1, #3
 800341c:	430a      	orrs	r2, r1
 800341e:	651a      	str	r2, [r3, #80]	; 0x50
 8003420:	4b5e      	ldr	r3, [pc, #376]	; (800359c <HAL_RCC_OscConfig+0x688>)
 8003422:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003424:	4b5d      	ldr	r3, [pc, #372]	; (800359c <HAL_RCC_OscConfig+0x688>)
 8003426:	2180      	movs	r1, #128	; 0x80
 8003428:	0049      	lsls	r1, r1, #1
 800342a:	430a      	orrs	r2, r1
 800342c:	651a      	str	r2, [r3, #80]	; 0x50
 800342e:	e00b      	b.n	8003448 <HAL_RCC_OscConfig+0x534>
 8003430:	4b5a      	ldr	r3, [pc, #360]	; (800359c <HAL_RCC_OscConfig+0x688>)
 8003432:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003434:	4b59      	ldr	r3, [pc, #356]	; (800359c <HAL_RCC_OscConfig+0x688>)
 8003436:	495b      	ldr	r1, [pc, #364]	; (80035a4 <HAL_RCC_OscConfig+0x690>)
 8003438:	400a      	ands	r2, r1
 800343a:	651a      	str	r2, [r3, #80]	; 0x50
 800343c:	4b57      	ldr	r3, [pc, #348]	; (800359c <HAL_RCC_OscConfig+0x688>)
 800343e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003440:	4b56      	ldr	r3, [pc, #344]	; (800359c <HAL_RCC_OscConfig+0x688>)
 8003442:	495a      	ldr	r1, [pc, #360]	; (80035ac <HAL_RCC_OscConfig+0x698>)
 8003444:	400a      	ands	r2, r1
 8003446:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	689b      	ldr	r3, [r3, #8]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d015      	beq.n	800347c <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003450:	f7fe ff90 	bl	8002374 <HAL_GetTick>
 8003454:	0003      	movs	r3, r0
 8003456:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003458:	e009      	b.n	800346e <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800345a:	f7fe ff8b 	bl	8002374 <HAL_GetTick>
 800345e:	0002      	movs	r2, r0
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	1ad3      	subs	r3, r2, r3
 8003464:	4a52      	ldr	r2, [pc, #328]	; (80035b0 <HAL_RCC_OscConfig+0x69c>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d901      	bls.n	800346e <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 800346a:	2303      	movs	r3, #3
 800346c:	e11b      	b.n	80036a6 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800346e:	4b4b      	ldr	r3, [pc, #300]	; (800359c <HAL_RCC_OscConfig+0x688>)
 8003470:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003472:	2380      	movs	r3, #128	; 0x80
 8003474:	009b      	lsls	r3, r3, #2
 8003476:	4013      	ands	r3, r2
 8003478:	d0ef      	beq.n	800345a <HAL_RCC_OscConfig+0x546>
 800347a:	e014      	b.n	80034a6 <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800347c:	f7fe ff7a 	bl	8002374 <HAL_GetTick>
 8003480:	0003      	movs	r3, r0
 8003482:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003484:	e009      	b.n	800349a <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003486:	f7fe ff75 	bl	8002374 <HAL_GetTick>
 800348a:	0002      	movs	r2, r0
 800348c:	697b      	ldr	r3, [r7, #20]
 800348e:	1ad3      	subs	r3, r2, r3
 8003490:	4a47      	ldr	r2, [pc, #284]	; (80035b0 <HAL_RCC_OscConfig+0x69c>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d901      	bls.n	800349a <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 8003496:	2303      	movs	r3, #3
 8003498:	e105      	b.n	80036a6 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800349a:	4b40      	ldr	r3, [pc, #256]	; (800359c <HAL_RCC_OscConfig+0x688>)
 800349c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800349e:	2380      	movs	r3, #128	; 0x80
 80034a0:	009b      	lsls	r3, r3, #2
 80034a2:	4013      	ands	r3, r2
 80034a4:	d1ef      	bne.n	8003486 <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80034a6:	2323      	movs	r3, #35	; 0x23
 80034a8:	18fb      	adds	r3, r7, r3
 80034aa:	781b      	ldrb	r3, [r3, #0]
 80034ac:	2b01      	cmp	r3, #1
 80034ae:	d105      	bne.n	80034bc <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034b0:	4b3a      	ldr	r3, [pc, #232]	; (800359c <HAL_RCC_OscConfig+0x688>)
 80034b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80034b4:	4b39      	ldr	r3, [pc, #228]	; (800359c <HAL_RCC_OscConfig+0x688>)
 80034b6:	493f      	ldr	r1, [pc, #252]	; (80035b4 <HAL_RCC_OscConfig+0x6a0>)
 80034b8:	400a      	ands	r2, r1
 80034ba:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	2220      	movs	r2, #32
 80034c2:	4013      	ands	r3, r2
 80034c4:	d049      	beq.n	800355a <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	699b      	ldr	r3, [r3, #24]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d026      	beq.n	800351c <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80034ce:	4b33      	ldr	r3, [pc, #204]	; (800359c <HAL_RCC_OscConfig+0x688>)
 80034d0:	689a      	ldr	r2, [r3, #8]
 80034d2:	4b32      	ldr	r3, [pc, #200]	; (800359c <HAL_RCC_OscConfig+0x688>)
 80034d4:	2101      	movs	r1, #1
 80034d6:	430a      	orrs	r2, r1
 80034d8:	609a      	str	r2, [r3, #8]
 80034da:	4b30      	ldr	r3, [pc, #192]	; (800359c <HAL_RCC_OscConfig+0x688>)
 80034dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80034de:	4b2f      	ldr	r3, [pc, #188]	; (800359c <HAL_RCC_OscConfig+0x688>)
 80034e0:	2101      	movs	r1, #1
 80034e2:	430a      	orrs	r2, r1
 80034e4:	635a      	str	r2, [r3, #52]	; 0x34
 80034e6:	4b34      	ldr	r3, [pc, #208]	; (80035b8 <HAL_RCC_OscConfig+0x6a4>)
 80034e8:	6a1a      	ldr	r2, [r3, #32]
 80034ea:	4b33      	ldr	r3, [pc, #204]	; (80035b8 <HAL_RCC_OscConfig+0x6a4>)
 80034ec:	2180      	movs	r1, #128	; 0x80
 80034ee:	0189      	lsls	r1, r1, #6
 80034f0:	430a      	orrs	r2, r1
 80034f2:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034f4:	f7fe ff3e 	bl	8002374 <HAL_GetTick>
 80034f8:	0003      	movs	r3, r0
 80034fa:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80034fc:	e008      	b.n	8003510 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80034fe:	f7fe ff39 	bl	8002374 <HAL_GetTick>
 8003502:	0002      	movs	r2, r0
 8003504:	697b      	ldr	r3, [r7, #20]
 8003506:	1ad3      	subs	r3, r2, r3
 8003508:	2b02      	cmp	r3, #2
 800350a:	d901      	bls.n	8003510 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 800350c:	2303      	movs	r3, #3
 800350e:	e0ca      	b.n	80036a6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003510:	4b22      	ldr	r3, [pc, #136]	; (800359c <HAL_RCC_OscConfig+0x688>)
 8003512:	689b      	ldr	r3, [r3, #8]
 8003514:	2202      	movs	r2, #2
 8003516:	4013      	ands	r3, r2
 8003518:	d0f1      	beq.n	80034fe <HAL_RCC_OscConfig+0x5ea>
 800351a:	e01e      	b.n	800355a <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800351c:	4b1f      	ldr	r3, [pc, #124]	; (800359c <HAL_RCC_OscConfig+0x688>)
 800351e:	689a      	ldr	r2, [r3, #8]
 8003520:	4b1e      	ldr	r3, [pc, #120]	; (800359c <HAL_RCC_OscConfig+0x688>)
 8003522:	2101      	movs	r1, #1
 8003524:	438a      	bics	r2, r1
 8003526:	609a      	str	r2, [r3, #8]
 8003528:	4b23      	ldr	r3, [pc, #140]	; (80035b8 <HAL_RCC_OscConfig+0x6a4>)
 800352a:	6a1a      	ldr	r2, [r3, #32]
 800352c:	4b22      	ldr	r3, [pc, #136]	; (80035b8 <HAL_RCC_OscConfig+0x6a4>)
 800352e:	4923      	ldr	r1, [pc, #140]	; (80035bc <HAL_RCC_OscConfig+0x6a8>)
 8003530:	400a      	ands	r2, r1
 8003532:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003534:	f7fe ff1e 	bl	8002374 <HAL_GetTick>
 8003538:	0003      	movs	r3, r0
 800353a:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800353c:	e008      	b.n	8003550 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800353e:	f7fe ff19 	bl	8002374 <HAL_GetTick>
 8003542:	0002      	movs	r2, r0
 8003544:	697b      	ldr	r3, [r7, #20]
 8003546:	1ad3      	subs	r3, r2, r3
 8003548:	2b02      	cmp	r3, #2
 800354a:	d901      	bls.n	8003550 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 800354c:	2303      	movs	r3, #3
 800354e:	e0aa      	b.n	80036a6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003550:	4b12      	ldr	r3, [pc, #72]	; (800359c <HAL_RCC_OscConfig+0x688>)
 8003552:	689b      	ldr	r3, [r3, #8]
 8003554:	2202      	movs	r2, #2
 8003556:	4013      	ands	r3, r2
 8003558:	d1f1      	bne.n	800353e <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800355e:	2b00      	cmp	r3, #0
 8003560:	d100      	bne.n	8003564 <HAL_RCC_OscConfig+0x650>
 8003562:	e09f      	b.n	80036a4 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003564:	69fb      	ldr	r3, [r7, #28]
 8003566:	2b0c      	cmp	r3, #12
 8003568:	d100      	bne.n	800356c <HAL_RCC_OscConfig+0x658>
 800356a:	e078      	b.n	800365e <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003570:	2b02      	cmp	r3, #2
 8003572:	d159      	bne.n	8003628 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003574:	4b09      	ldr	r3, [pc, #36]	; (800359c <HAL_RCC_OscConfig+0x688>)
 8003576:	681a      	ldr	r2, [r3, #0]
 8003578:	4b08      	ldr	r3, [pc, #32]	; (800359c <HAL_RCC_OscConfig+0x688>)
 800357a:	4911      	ldr	r1, [pc, #68]	; (80035c0 <HAL_RCC_OscConfig+0x6ac>)
 800357c:	400a      	ands	r2, r1
 800357e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003580:	f7fe fef8 	bl	8002374 <HAL_GetTick>
 8003584:	0003      	movs	r3, r0
 8003586:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003588:	e01c      	b.n	80035c4 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800358a:	f7fe fef3 	bl	8002374 <HAL_GetTick>
 800358e:	0002      	movs	r2, r0
 8003590:	697b      	ldr	r3, [r7, #20]
 8003592:	1ad3      	subs	r3, r2, r3
 8003594:	2b02      	cmp	r3, #2
 8003596:	d915      	bls.n	80035c4 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 8003598:	2303      	movs	r3, #3
 800359a:	e084      	b.n	80036a6 <HAL_RCC_OscConfig+0x792>
 800359c:	40021000 	.word	0x40021000
 80035a0:	ffff1fff 	.word	0xffff1fff
 80035a4:	fffffeff 	.word	0xfffffeff
 80035a8:	40007000 	.word	0x40007000
 80035ac:	fffffbff 	.word	0xfffffbff
 80035b0:	00001388 	.word	0x00001388
 80035b4:	efffffff 	.word	0xefffffff
 80035b8:	40010000 	.word	0x40010000
 80035bc:	ffffdfff 	.word	0xffffdfff
 80035c0:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80035c4:	4b3a      	ldr	r3, [pc, #232]	; (80036b0 <HAL_RCC_OscConfig+0x79c>)
 80035c6:	681a      	ldr	r2, [r3, #0]
 80035c8:	2380      	movs	r3, #128	; 0x80
 80035ca:	049b      	lsls	r3, r3, #18
 80035cc:	4013      	ands	r3, r2
 80035ce:	d1dc      	bne.n	800358a <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80035d0:	4b37      	ldr	r3, [pc, #220]	; (80036b0 <HAL_RCC_OscConfig+0x79c>)
 80035d2:	68db      	ldr	r3, [r3, #12]
 80035d4:	4a37      	ldr	r2, [pc, #220]	; (80036b4 <HAL_RCC_OscConfig+0x7a0>)
 80035d6:	4013      	ands	r3, r2
 80035d8:	0019      	movs	r1, r3
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035e2:	431a      	orrs	r2, r3
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035e8:	431a      	orrs	r2, r3
 80035ea:	4b31      	ldr	r3, [pc, #196]	; (80036b0 <HAL_RCC_OscConfig+0x79c>)
 80035ec:	430a      	orrs	r2, r1
 80035ee:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80035f0:	4b2f      	ldr	r3, [pc, #188]	; (80036b0 <HAL_RCC_OscConfig+0x79c>)
 80035f2:	681a      	ldr	r2, [r3, #0]
 80035f4:	4b2e      	ldr	r3, [pc, #184]	; (80036b0 <HAL_RCC_OscConfig+0x79c>)
 80035f6:	2180      	movs	r1, #128	; 0x80
 80035f8:	0449      	lsls	r1, r1, #17
 80035fa:	430a      	orrs	r2, r1
 80035fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035fe:	f7fe feb9 	bl	8002374 <HAL_GetTick>
 8003602:	0003      	movs	r3, r0
 8003604:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8003606:	e008      	b.n	800361a <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003608:	f7fe feb4 	bl	8002374 <HAL_GetTick>
 800360c:	0002      	movs	r2, r0
 800360e:	697b      	ldr	r3, [r7, #20]
 8003610:	1ad3      	subs	r3, r2, r3
 8003612:	2b02      	cmp	r3, #2
 8003614:	d901      	bls.n	800361a <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 8003616:	2303      	movs	r3, #3
 8003618:	e045      	b.n	80036a6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800361a:	4b25      	ldr	r3, [pc, #148]	; (80036b0 <HAL_RCC_OscConfig+0x79c>)
 800361c:	681a      	ldr	r2, [r3, #0]
 800361e:	2380      	movs	r3, #128	; 0x80
 8003620:	049b      	lsls	r3, r3, #18
 8003622:	4013      	ands	r3, r2
 8003624:	d0f0      	beq.n	8003608 <HAL_RCC_OscConfig+0x6f4>
 8003626:	e03d      	b.n	80036a4 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003628:	4b21      	ldr	r3, [pc, #132]	; (80036b0 <HAL_RCC_OscConfig+0x79c>)
 800362a:	681a      	ldr	r2, [r3, #0]
 800362c:	4b20      	ldr	r3, [pc, #128]	; (80036b0 <HAL_RCC_OscConfig+0x79c>)
 800362e:	4922      	ldr	r1, [pc, #136]	; (80036b8 <HAL_RCC_OscConfig+0x7a4>)
 8003630:	400a      	ands	r2, r1
 8003632:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003634:	f7fe fe9e 	bl	8002374 <HAL_GetTick>
 8003638:	0003      	movs	r3, r0
 800363a:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800363c:	e008      	b.n	8003650 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800363e:	f7fe fe99 	bl	8002374 <HAL_GetTick>
 8003642:	0002      	movs	r2, r0
 8003644:	697b      	ldr	r3, [r7, #20]
 8003646:	1ad3      	subs	r3, r2, r3
 8003648:	2b02      	cmp	r3, #2
 800364a:	d901      	bls.n	8003650 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 800364c:	2303      	movs	r3, #3
 800364e:	e02a      	b.n	80036a6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003650:	4b17      	ldr	r3, [pc, #92]	; (80036b0 <HAL_RCC_OscConfig+0x79c>)
 8003652:	681a      	ldr	r2, [r3, #0]
 8003654:	2380      	movs	r3, #128	; 0x80
 8003656:	049b      	lsls	r3, r3, #18
 8003658:	4013      	ands	r3, r2
 800365a:	d1f0      	bne.n	800363e <HAL_RCC_OscConfig+0x72a>
 800365c:	e022      	b.n	80036a4 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003662:	2b01      	cmp	r3, #1
 8003664:	d101      	bne.n	800366a <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 8003666:	2301      	movs	r3, #1
 8003668:	e01d      	b.n	80036a6 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800366a:	4b11      	ldr	r3, [pc, #68]	; (80036b0 <HAL_RCC_OscConfig+0x79c>)
 800366c:	68db      	ldr	r3, [r3, #12]
 800366e:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003670:	69ba      	ldr	r2, [r7, #24]
 8003672:	2380      	movs	r3, #128	; 0x80
 8003674:	025b      	lsls	r3, r3, #9
 8003676:	401a      	ands	r2, r3
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800367c:	429a      	cmp	r2, r3
 800367e:	d10f      	bne.n	80036a0 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003680:	69ba      	ldr	r2, [r7, #24]
 8003682:	23f0      	movs	r3, #240	; 0xf0
 8003684:	039b      	lsls	r3, r3, #14
 8003686:	401a      	ands	r2, r3
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800368c:	429a      	cmp	r2, r3
 800368e:	d107      	bne.n	80036a0 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8003690:	69ba      	ldr	r2, [r7, #24]
 8003692:	23c0      	movs	r3, #192	; 0xc0
 8003694:	041b      	lsls	r3, r3, #16
 8003696:	401a      	ands	r2, r3
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800369c:	429a      	cmp	r2, r3
 800369e:	d001      	beq.n	80036a4 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 80036a0:	2301      	movs	r3, #1
 80036a2:	e000      	b.n	80036a6 <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 80036a4:	2300      	movs	r3, #0
}
 80036a6:	0018      	movs	r0, r3
 80036a8:	46bd      	mov	sp, r7
 80036aa:	b00a      	add	sp, #40	; 0x28
 80036ac:	bdb0      	pop	{r4, r5, r7, pc}
 80036ae:	46c0      	nop			; (mov r8, r8)
 80036b0:	40021000 	.word	0x40021000
 80036b4:	ff02ffff 	.word	0xff02ffff
 80036b8:	feffffff 	.word	0xfeffffff

080036bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036bc:	b5b0      	push	{r4, r5, r7, lr}
 80036be:	b084      	sub	sp, #16
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
 80036c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d101      	bne.n	80036d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80036cc:	2301      	movs	r3, #1
 80036ce:	e128      	b.n	8003922 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80036d0:	4b96      	ldr	r3, [pc, #600]	; (800392c <HAL_RCC_ClockConfig+0x270>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	2201      	movs	r2, #1
 80036d6:	4013      	ands	r3, r2
 80036d8:	683a      	ldr	r2, [r7, #0]
 80036da:	429a      	cmp	r2, r3
 80036dc:	d91e      	bls.n	800371c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036de:	4b93      	ldr	r3, [pc, #588]	; (800392c <HAL_RCC_ClockConfig+0x270>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	2201      	movs	r2, #1
 80036e4:	4393      	bics	r3, r2
 80036e6:	0019      	movs	r1, r3
 80036e8:	4b90      	ldr	r3, [pc, #576]	; (800392c <HAL_RCC_ClockConfig+0x270>)
 80036ea:	683a      	ldr	r2, [r7, #0]
 80036ec:	430a      	orrs	r2, r1
 80036ee:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80036f0:	f7fe fe40 	bl	8002374 <HAL_GetTick>
 80036f4:	0003      	movs	r3, r0
 80036f6:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036f8:	e009      	b.n	800370e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036fa:	f7fe fe3b 	bl	8002374 <HAL_GetTick>
 80036fe:	0002      	movs	r2, r0
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	1ad3      	subs	r3, r2, r3
 8003704:	4a8a      	ldr	r2, [pc, #552]	; (8003930 <HAL_RCC_ClockConfig+0x274>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d901      	bls.n	800370e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800370a:	2303      	movs	r3, #3
 800370c:	e109      	b.n	8003922 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800370e:	4b87      	ldr	r3, [pc, #540]	; (800392c <HAL_RCC_ClockConfig+0x270>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	2201      	movs	r2, #1
 8003714:	4013      	ands	r3, r2
 8003716:	683a      	ldr	r2, [r7, #0]
 8003718:	429a      	cmp	r2, r3
 800371a:	d1ee      	bne.n	80036fa <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	2202      	movs	r2, #2
 8003722:	4013      	ands	r3, r2
 8003724:	d009      	beq.n	800373a <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003726:	4b83      	ldr	r3, [pc, #524]	; (8003934 <HAL_RCC_ClockConfig+0x278>)
 8003728:	68db      	ldr	r3, [r3, #12]
 800372a:	22f0      	movs	r2, #240	; 0xf0
 800372c:	4393      	bics	r3, r2
 800372e:	0019      	movs	r1, r3
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	689a      	ldr	r2, [r3, #8]
 8003734:	4b7f      	ldr	r3, [pc, #508]	; (8003934 <HAL_RCC_ClockConfig+0x278>)
 8003736:	430a      	orrs	r2, r1
 8003738:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	2201      	movs	r2, #1
 8003740:	4013      	ands	r3, r2
 8003742:	d100      	bne.n	8003746 <HAL_RCC_ClockConfig+0x8a>
 8003744:	e089      	b.n	800385a <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	2b02      	cmp	r3, #2
 800374c:	d107      	bne.n	800375e <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800374e:	4b79      	ldr	r3, [pc, #484]	; (8003934 <HAL_RCC_ClockConfig+0x278>)
 8003750:	681a      	ldr	r2, [r3, #0]
 8003752:	2380      	movs	r3, #128	; 0x80
 8003754:	029b      	lsls	r3, r3, #10
 8003756:	4013      	ands	r3, r2
 8003758:	d120      	bne.n	800379c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800375a:	2301      	movs	r3, #1
 800375c:	e0e1      	b.n	8003922 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	2b03      	cmp	r3, #3
 8003764:	d107      	bne.n	8003776 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003766:	4b73      	ldr	r3, [pc, #460]	; (8003934 <HAL_RCC_ClockConfig+0x278>)
 8003768:	681a      	ldr	r2, [r3, #0]
 800376a:	2380      	movs	r3, #128	; 0x80
 800376c:	049b      	lsls	r3, r3, #18
 800376e:	4013      	ands	r3, r2
 8003770:	d114      	bne.n	800379c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003772:	2301      	movs	r3, #1
 8003774:	e0d5      	b.n	8003922 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	2b01      	cmp	r3, #1
 800377c:	d106      	bne.n	800378c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800377e:	4b6d      	ldr	r3, [pc, #436]	; (8003934 <HAL_RCC_ClockConfig+0x278>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	2204      	movs	r2, #4
 8003784:	4013      	ands	r3, r2
 8003786:	d109      	bne.n	800379c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003788:	2301      	movs	r3, #1
 800378a:	e0ca      	b.n	8003922 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800378c:	4b69      	ldr	r3, [pc, #420]	; (8003934 <HAL_RCC_ClockConfig+0x278>)
 800378e:	681a      	ldr	r2, [r3, #0]
 8003790:	2380      	movs	r3, #128	; 0x80
 8003792:	009b      	lsls	r3, r3, #2
 8003794:	4013      	ands	r3, r2
 8003796:	d101      	bne.n	800379c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003798:	2301      	movs	r3, #1
 800379a:	e0c2      	b.n	8003922 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800379c:	4b65      	ldr	r3, [pc, #404]	; (8003934 <HAL_RCC_ClockConfig+0x278>)
 800379e:	68db      	ldr	r3, [r3, #12]
 80037a0:	2203      	movs	r2, #3
 80037a2:	4393      	bics	r3, r2
 80037a4:	0019      	movs	r1, r3
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	685a      	ldr	r2, [r3, #4]
 80037aa:	4b62      	ldr	r3, [pc, #392]	; (8003934 <HAL_RCC_ClockConfig+0x278>)
 80037ac:	430a      	orrs	r2, r1
 80037ae:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80037b0:	f7fe fde0 	bl	8002374 <HAL_GetTick>
 80037b4:	0003      	movs	r3, r0
 80037b6:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	2b02      	cmp	r3, #2
 80037be:	d111      	bne.n	80037e4 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80037c0:	e009      	b.n	80037d6 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037c2:	f7fe fdd7 	bl	8002374 <HAL_GetTick>
 80037c6:	0002      	movs	r2, r0
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	1ad3      	subs	r3, r2, r3
 80037cc:	4a58      	ldr	r2, [pc, #352]	; (8003930 <HAL_RCC_ClockConfig+0x274>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d901      	bls.n	80037d6 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 80037d2:	2303      	movs	r3, #3
 80037d4:	e0a5      	b.n	8003922 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80037d6:	4b57      	ldr	r3, [pc, #348]	; (8003934 <HAL_RCC_ClockConfig+0x278>)
 80037d8:	68db      	ldr	r3, [r3, #12]
 80037da:	220c      	movs	r2, #12
 80037dc:	4013      	ands	r3, r2
 80037de:	2b08      	cmp	r3, #8
 80037e0:	d1ef      	bne.n	80037c2 <HAL_RCC_ClockConfig+0x106>
 80037e2:	e03a      	b.n	800385a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	2b03      	cmp	r3, #3
 80037ea:	d111      	bne.n	8003810 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80037ec:	e009      	b.n	8003802 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037ee:	f7fe fdc1 	bl	8002374 <HAL_GetTick>
 80037f2:	0002      	movs	r2, r0
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	1ad3      	subs	r3, r2, r3
 80037f8:	4a4d      	ldr	r2, [pc, #308]	; (8003930 <HAL_RCC_ClockConfig+0x274>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d901      	bls.n	8003802 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 80037fe:	2303      	movs	r3, #3
 8003800:	e08f      	b.n	8003922 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003802:	4b4c      	ldr	r3, [pc, #304]	; (8003934 <HAL_RCC_ClockConfig+0x278>)
 8003804:	68db      	ldr	r3, [r3, #12]
 8003806:	220c      	movs	r2, #12
 8003808:	4013      	ands	r3, r2
 800380a:	2b0c      	cmp	r3, #12
 800380c:	d1ef      	bne.n	80037ee <HAL_RCC_ClockConfig+0x132>
 800380e:	e024      	b.n	800385a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	2b01      	cmp	r3, #1
 8003816:	d11b      	bne.n	8003850 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003818:	e009      	b.n	800382e <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800381a:	f7fe fdab 	bl	8002374 <HAL_GetTick>
 800381e:	0002      	movs	r2, r0
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	1ad3      	subs	r3, r2, r3
 8003824:	4a42      	ldr	r2, [pc, #264]	; (8003930 <HAL_RCC_ClockConfig+0x274>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d901      	bls.n	800382e <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 800382a:	2303      	movs	r3, #3
 800382c:	e079      	b.n	8003922 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800382e:	4b41      	ldr	r3, [pc, #260]	; (8003934 <HAL_RCC_ClockConfig+0x278>)
 8003830:	68db      	ldr	r3, [r3, #12]
 8003832:	220c      	movs	r2, #12
 8003834:	4013      	ands	r3, r2
 8003836:	2b04      	cmp	r3, #4
 8003838:	d1ef      	bne.n	800381a <HAL_RCC_ClockConfig+0x15e>
 800383a:	e00e      	b.n	800385a <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800383c:	f7fe fd9a 	bl	8002374 <HAL_GetTick>
 8003840:	0002      	movs	r2, r0
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	1ad3      	subs	r3, r2, r3
 8003846:	4a3a      	ldr	r2, [pc, #232]	; (8003930 <HAL_RCC_ClockConfig+0x274>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d901      	bls.n	8003850 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 800384c:	2303      	movs	r3, #3
 800384e:	e068      	b.n	8003922 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8003850:	4b38      	ldr	r3, [pc, #224]	; (8003934 <HAL_RCC_ClockConfig+0x278>)
 8003852:	68db      	ldr	r3, [r3, #12]
 8003854:	220c      	movs	r2, #12
 8003856:	4013      	ands	r3, r2
 8003858:	d1f0      	bne.n	800383c <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800385a:	4b34      	ldr	r3, [pc, #208]	; (800392c <HAL_RCC_ClockConfig+0x270>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	2201      	movs	r2, #1
 8003860:	4013      	ands	r3, r2
 8003862:	683a      	ldr	r2, [r7, #0]
 8003864:	429a      	cmp	r2, r3
 8003866:	d21e      	bcs.n	80038a6 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003868:	4b30      	ldr	r3, [pc, #192]	; (800392c <HAL_RCC_ClockConfig+0x270>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	2201      	movs	r2, #1
 800386e:	4393      	bics	r3, r2
 8003870:	0019      	movs	r1, r3
 8003872:	4b2e      	ldr	r3, [pc, #184]	; (800392c <HAL_RCC_ClockConfig+0x270>)
 8003874:	683a      	ldr	r2, [r7, #0]
 8003876:	430a      	orrs	r2, r1
 8003878:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800387a:	f7fe fd7b 	bl	8002374 <HAL_GetTick>
 800387e:	0003      	movs	r3, r0
 8003880:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003882:	e009      	b.n	8003898 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003884:	f7fe fd76 	bl	8002374 <HAL_GetTick>
 8003888:	0002      	movs	r2, r0
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	1ad3      	subs	r3, r2, r3
 800388e:	4a28      	ldr	r2, [pc, #160]	; (8003930 <HAL_RCC_ClockConfig+0x274>)
 8003890:	4293      	cmp	r3, r2
 8003892:	d901      	bls.n	8003898 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8003894:	2303      	movs	r3, #3
 8003896:	e044      	b.n	8003922 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003898:	4b24      	ldr	r3, [pc, #144]	; (800392c <HAL_RCC_ClockConfig+0x270>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	2201      	movs	r2, #1
 800389e:	4013      	ands	r3, r2
 80038a0:	683a      	ldr	r2, [r7, #0]
 80038a2:	429a      	cmp	r2, r3
 80038a4:	d1ee      	bne.n	8003884 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	2204      	movs	r2, #4
 80038ac:	4013      	ands	r3, r2
 80038ae:	d009      	beq.n	80038c4 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80038b0:	4b20      	ldr	r3, [pc, #128]	; (8003934 <HAL_RCC_ClockConfig+0x278>)
 80038b2:	68db      	ldr	r3, [r3, #12]
 80038b4:	4a20      	ldr	r2, [pc, #128]	; (8003938 <HAL_RCC_ClockConfig+0x27c>)
 80038b6:	4013      	ands	r3, r2
 80038b8:	0019      	movs	r1, r3
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	68da      	ldr	r2, [r3, #12]
 80038be:	4b1d      	ldr	r3, [pc, #116]	; (8003934 <HAL_RCC_ClockConfig+0x278>)
 80038c0:	430a      	orrs	r2, r1
 80038c2:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	2208      	movs	r2, #8
 80038ca:	4013      	ands	r3, r2
 80038cc:	d00a      	beq.n	80038e4 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80038ce:	4b19      	ldr	r3, [pc, #100]	; (8003934 <HAL_RCC_ClockConfig+0x278>)
 80038d0:	68db      	ldr	r3, [r3, #12]
 80038d2:	4a1a      	ldr	r2, [pc, #104]	; (800393c <HAL_RCC_ClockConfig+0x280>)
 80038d4:	4013      	ands	r3, r2
 80038d6:	0019      	movs	r1, r3
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	691b      	ldr	r3, [r3, #16]
 80038dc:	00da      	lsls	r2, r3, #3
 80038de:	4b15      	ldr	r3, [pc, #84]	; (8003934 <HAL_RCC_ClockConfig+0x278>)
 80038e0:	430a      	orrs	r2, r1
 80038e2:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80038e4:	f000 f832 	bl	800394c <HAL_RCC_GetSysClockFreq>
 80038e8:	0001      	movs	r1, r0
 80038ea:	4b12      	ldr	r3, [pc, #72]	; (8003934 <HAL_RCC_ClockConfig+0x278>)
 80038ec:	68db      	ldr	r3, [r3, #12]
 80038ee:	091b      	lsrs	r3, r3, #4
 80038f0:	220f      	movs	r2, #15
 80038f2:	4013      	ands	r3, r2
 80038f4:	4a12      	ldr	r2, [pc, #72]	; (8003940 <HAL_RCC_ClockConfig+0x284>)
 80038f6:	5cd3      	ldrb	r3, [r2, r3]
 80038f8:	000a      	movs	r2, r1
 80038fa:	40da      	lsrs	r2, r3
 80038fc:	4b11      	ldr	r3, [pc, #68]	; (8003944 <HAL_RCC_ClockConfig+0x288>)
 80038fe:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003900:	4b11      	ldr	r3, [pc, #68]	; (8003948 <HAL_RCC_ClockConfig+0x28c>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	250b      	movs	r5, #11
 8003906:	197c      	adds	r4, r7, r5
 8003908:	0018      	movs	r0, r3
 800390a:	f7fe fced 	bl	80022e8 <HAL_InitTick>
 800390e:	0003      	movs	r3, r0
 8003910:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8003912:	197b      	adds	r3, r7, r5
 8003914:	781b      	ldrb	r3, [r3, #0]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d002      	beq.n	8003920 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 800391a:	197b      	adds	r3, r7, r5
 800391c:	781b      	ldrb	r3, [r3, #0]
 800391e:	e000      	b.n	8003922 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8003920:	2300      	movs	r3, #0
}
 8003922:	0018      	movs	r0, r3
 8003924:	46bd      	mov	sp, r7
 8003926:	b004      	add	sp, #16
 8003928:	bdb0      	pop	{r4, r5, r7, pc}
 800392a:	46c0      	nop			; (mov r8, r8)
 800392c:	40022000 	.word	0x40022000
 8003930:	00001388 	.word	0x00001388
 8003934:	40021000 	.word	0x40021000
 8003938:	fffff8ff 	.word	0xfffff8ff
 800393c:	ffffc7ff 	.word	0xffffc7ff
 8003940:	08006c18 	.word	0x08006c18
 8003944:	20000128 	.word	0x20000128
 8003948:	2000012c 	.word	0x2000012c

0800394c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800394c:	b5b0      	push	{r4, r5, r7, lr}
 800394e:	b08e      	sub	sp, #56	; 0x38
 8003950:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8003952:	4b4c      	ldr	r3, [pc, #304]	; (8003a84 <HAL_RCC_GetSysClockFreq+0x138>)
 8003954:	68db      	ldr	r3, [r3, #12]
 8003956:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003958:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800395a:	230c      	movs	r3, #12
 800395c:	4013      	ands	r3, r2
 800395e:	2b0c      	cmp	r3, #12
 8003960:	d014      	beq.n	800398c <HAL_RCC_GetSysClockFreq+0x40>
 8003962:	d900      	bls.n	8003966 <HAL_RCC_GetSysClockFreq+0x1a>
 8003964:	e07b      	b.n	8003a5e <HAL_RCC_GetSysClockFreq+0x112>
 8003966:	2b04      	cmp	r3, #4
 8003968:	d002      	beq.n	8003970 <HAL_RCC_GetSysClockFreq+0x24>
 800396a:	2b08      	cmp	r3, #8
 800396c:	d00b      	beq.n	8003986 <HAL_RCC_GetSysClockFreq+0x3a>
 800396e:	e076      	b.n	8003a5e <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003970:	4b44      	ldr	r3, [pc, #272]	; (8003a84 <HAL_RCC_GetSysClockFreq+0x138>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	2210      	movs	r2, #16
 8003976:	4013      	ands	r3, r2
 8003978:	d002      	beq.n	8003980 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 800397a:	4b43      	ldr	r3, [pc, #268]	; (8003a88 <HAL_RCC_GetSysClockFreq+0x13c>)
 800397c:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 800397e:	e07c      	b.n	8003a7a <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8003980:	4b42      	ldr	r3, [pc, #264]	; (8003a8c <HAL_RCC_GetSysClockFreq+0x140>)
 8003982:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003984:	e079      	b.n	8003a7a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003986:	4b42      	ldr	r3, [pc, #264]	; (8003a90 <HAL_RCC_GetSysClockFreq+0x144>)
 8003988:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800398a:	e076      	b.n	8003a7a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800398c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800398e:	0c9a      	lsrs	r2, r3, #18
 8003990:	230f      	movs	r3, #15
 8003992:	401a      	ands	r2, r3
 8003994:	4b3f      	ldr	r3, [pc, #252]	; (8003a94 <HAL_RCC_GetSysClockFreq+0x148>)
 8003996:	5c9b      	ldrb	r3, [r3, r2]
 8003998:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800399a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800399c:	0d9a      	lsrs	r2, r3, #22
 800399e:	2303      	movs	r3, #3
 80039a0:	4013      	ands	r3, r2
 80039a2:	3301      	adds	r3, #1
 80039a4:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80039a6:	4b37      	ldr	r3, [pc, #220]	; (8003a84 <HAL_RCC_GetSysClockFreq+0x138>)
 80039a8:	68da      	ldr	r2, [r3, #12]
 80039aa:	2380      	movs	r3, #128	; 0x80
 80039ac:	025b      	lsls	r3, r3, #9
 80039ae:	4013      	ands	r3, r2
 80039b0:	d01a      	beq.n	80039e8 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80039b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039b4:	61bb      	str	r3, [r7, #24]
 80039b6:	2300      	movs	r3, #0
 80039b8:	61fb      	str	r3, [r7, #28]
 80039ba:	4a35      	ldr	r2, [pc, #212]	; (8003a90 <HAL_RCC_GetSysClockFreq+0x144>)
 80039bc:	2300      	movs	r3, #0
 80039be:	69b8      	ldr	r0, [r7, #24]
 80039c0:	69f9      	ldr	r1, [r7, #28]
 80039c2:	f7fc fc69 	bl	8000298 <__aeabi_lmul>
 80039c6:	0002      	movs	r2, r0
 80039c8:	000b      	movs	r3, r1
 80039ca:	0010      	movs	r0, r2
 80039cc:	0019      	movs	r1, r3
 80039ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039d0:	613b      	str	r3, [r7, #16]
 80039d2:	2300      	movs	r3, #0
 80039d4:	617b      	str	r3, [r7, #20]
 80039d6:	693a      	ldr	r2, [r7, #16]
 80039d8:	697b      	ldr	r3, [r7, #20]
 80039da:	f7fc fc3d 	bl	8000258 <__aeabi_uldivmod>
 80039de:	0002      	movs	r2, r0
 80039e0:	000b      	movs	r3, r1
 80039e2:	0013      	movs	r3, r2
 80039e4:	637b      	str	r3, [r7, #52]	; 0x34
 80039e6:	e037      	b.n	8003a58 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80039e8:	4b26      	ldr	r3, [pc, #152]	; (8003a84 <HAL_RCC_GetSysClockFreq+0x138>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	2210      	movs	r2, #16
 80039ee:	4013      	ands	r3, r2
 80039f0:	d01a      	beq.n	8003a28 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 80039f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039f4:	60bb      	str	r3, [r7, #8]
 80039f6:	2300      	movs	r3, #0
 80039f8:	60fb      	str	r3, [r7, #12]
 80039fa:	4a23      	ldr	r2, [pc, #140]	; (8003a88 <HAL_RCC_GetSysClockFreq+0x13c>)
 80039fc:	2300      	movs	r3, #0
 80039fe:	68b8      	ldr	r0, [r7, #8]
 8003a00:	68f9      	ldr	r1, [r7, #12]
 8003a02:	f7fc fc49 	bl	8000298 <__aeabi_lmul>
 8003a06:	0002      	movs	r2, r0
 8003a08:	000b      	movs	r3, r1
 8003a0a:	0010      	movs	r0, r2
 8003a0c:	0019      	movs	r1, r3
 8003a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a10:	603b      	str	r3, [r7, #0]
 8003a12:	2300      	movs	r3, #0
 8003a14:	607b      	str	r3, [r7, #4]
 8003a16:	683a      	ldr	r2, [r7, #0]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	f7fc fc1d 	bl	8000258 <__aeabi_uldivmod>
 8003a1e:	0002      	movs	r2, r0
 8003a20:	000b      	movs	r3, r1
 8003a22:	0013      	movs	r3, r2
 8003a24:	637b      	str	r3, [r7, #52]	; 0x34
 8003a26:	e017      	b.n	8003a58 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003a28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a2a:	0018      	movs	r0, r3
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	0019      	movs	r1, r3
 8003a30:	4a16      	ldr	r2, [pc, #88]	; (8003a8c <HAL_RCC_GetSysClockFreq+0x140>)
 8003a32:	2300      	movs	r3, #0
 8003a34:	f7fc fc30 	bl	8000298 <__aeabi_lmul>
 8003a38:	0002      	movs	r2, r0
 8003a3a:	000b      	movs	r3, r1
 8003a3c:	0010      	movs	r0, r2
 8003a3e:	0019      	movs	r1, r3
 8003a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a42:	001c      	movs	r4, r3
 8003a44:	2300      	movs	r3, #0
 8003a46:	001d      	movs	r5, r3
 8003a48:	0022      	movs	r2, r4
 8003a4a:	002b      	movs	r3, r5
 8003a4c:	f7fc fc04 	bl	8000258 <__aeabi_uldivmod>
 8003a50:	0002      	movs	r2, r0
 8003a52:	000b      	movs	r3, r1
 8003a54:	0013      	movs	r3, r2
 8003a56:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8003a58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a5a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003a5c:	e00d      	b.n	8003a7a <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8003a5e:	4b09      	ldr	r3, [pc, #36]	; (8003a84 <HAL_RCC_GetSysClockFreq+0x138>)
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	0b5b      	lsrs	r3, r3, #13
 8003a64:	2207      	movs	r2, #7
 8003a66:	4013      	ands	r3, r2
 8003a68:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8003a6a:	6a3b      	ldr	r3, [r7, #32]
 8003a6c:	3301      	adds	r3, #1
 8003a6e:	2280      	movs	r2, #128	; 0x80
 8003a70:	0212      	lsls	r2, r2, #8
 8003a72:	409a      	lsls	r2, r3
 8003a74:	0013      	movs	r3, r2
 8003a76:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003a78:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8003a7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8003a7c:	0018      	movs	r0, r3
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	b00e      	add	sp, #56	; 0x38
 8003a82:	bdb0      	pop	{r4, r5, r7, pc}
 8003a84:	40021000 	.word	0x40021000
 8003a88:	003d0900 	.word	0x003d0900
 8003a8c:	00f42400 	.word	0x00f42400
 8003a90:	007a1200 	.word	0x007a1200
 8003a94:	08006c30 	.word	0x08006c30

08003a98 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a9c:	4b02      	ldr	r3, [pc, #8]	; (8003aa8 <HAL_RCC_GetHCLKFreq+0x10>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
}
 8003aa0:	0018      	movs	r0, r3
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bd80      	pop	{r7, pc}
 8003aa6:	46c0      	nop			; (mov r8, r8)
 8003aa8:	20000128 	.word	0x20000128

08003aac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003ab0:	f7ff fff2 	bl	8003a98 <HAL_RCC_GetHCLKFreq>
 8003ab4:	0001      	movs	r1, r0
 8003ab6:	4b06      	ldr	r3, [pc, #24]	; (8003ad0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ab8:	68db      	ldr	r3, [r3, #12]
 8003aba:	0a1b      	lsrs	r3, r3, #8
 8003abc:	2207      	movs	r2, #7
 8003abe:	4013      	ands	r3, r2
 8003ac0:	4a04      	ldr	r2, [pc, #16]	; (8003ad4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003ac2:	5cd3      	ldrb	r3, [r2, r3]
 8003ac4:	40d9      	lsrs	r1, r3
 8003ac6:	000b      	movs	r3, r1
}
 8003ac8:	0018      	movs	r0, r3
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bd80      	pop	{r7, pc}
 8003ace:	46c0      	nop			; (mov r8, r8)
 8003ad0:	40021000 	.word	0x40021000
 8003ad4:	08006c28 	.word	0x08006c28

08003ad8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003adc:	f7ff ffdc 	bl	8003a98 <HAL_RCC_GetHCLKFreq>
 8003ae0:	0001      	movs	r1, r0
 8003ae2:	4b06      	ldr	r3, [pc, #24]	; (8003afc <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ae4:	68db      	ldr	r3, [r3, #12]
 8003ae6:	0adb      	lsrs	r3, r3, #11
 8003ae8:	2207      	movs	r2, #7
 8003aea:	4013      	ands	r3, r2
 8003aec:	4a04      	ldr	r2, [pc, #16]	; (8003b00 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003aee:	5cd3      	ldrb	r3, [r2, r3]
 8003af0:	40d9      	lsrs	r1, r3
 8003af2:	000b      	movs	r3, r1
}
 8003af4:	0018      	movs	r0, r3
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bd80      	pop	{r7, pc}
 8003afa:	46c0      	nop			; (mov r8, r8)
 8003afc:	40021000 	.word	0x40021000
 8003b00:	08006c28 	.word	0x08006c28

08003b04 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b086      	sub	sp, #24
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8003b0c:	2317      	movs	r3, #23
 8003b0e:	18fb      	adds	r3, r7, r3
 8003b10:	2200      	movs	r2, #0
 8003b12:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	2220      	movs	r2, #32
 8003b1a:	4013      	ands	r3, r2
 8003b1c:	d106      	bne.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681a      	ldr	r2, [r3, #0]
 8003b22:	2380      	movs	r3, #128	; 0x80
 8003b24:	011b      	lsls	r3, r3, #4
 8003b26:	4013      	ands	r3, r2
 8003b28:	d100      	bne.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0x28>
 8003b2a:	e104      	b.n	8003d36 <HAL_RCCEx_PeriphCLKConfig+0x232>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b2c:	4bb9      	ldr	r3, [pc, #740]	; (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003b2e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b30:	2380      	movs	r3, #128	; 0x80
 8003b32:	055b      	lsls	r3, r3, #21
 8003b34:	4013      	ands	r3, r2
 8003b36:	d10a      	bne.n	8003b4e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b38:	4bb6      	ldr	r3, [pc, #728]	; (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003b3a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b3c:	4bb5      	ldr	r3, [pc, #724]	; (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003b3e:	2180      	movs	r1, #128	; 0x80
 8003b40:	0549      	lsls	r1, r1, #21
 8003b42:	430a      	orrs	r2, r1
 8003b44:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8003b46:	2317      	movs	r3, #23
 8003b48:	18fb      	adds	r3, r7, r3
 8003b4a:	2201      	movs	r2, #1
 8003b4c:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b4e:	4bb2      	ldr	r3, [pc, #712]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8003b50:	681a      	ldr	r2, [r3, #0]
 8003b52:	2380      	movs	r3, #128	; 0x80
 8003b54:	005b      	lsls	r3, r3, #1
 8003b56:	4013      	ands	r3, r2
 8003b58:	d11a      	bne.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b5a:	4baf      	ldr	r3, [pc, #700]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8003b5c:	681a      	ldr	r2, [r3, #0]
 8003b5e:	4bae      	ldr	r3, [pc, #696]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8003b60:	2180      	movs	r1, #128	; 0x80
 8003b62:	0049      	lsls	r1, r1, #1
 8003b64:	430a      	orrs	r2, r1
 8003b66:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b68:	f7fe fc04 	bl	8002374 <HAL_GetTick>
 8003b6c:	0003      	movs	r3, r0
 8003b6e:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b70:	e008      	b.n	8003b84 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b72:	f7fe fbff 	bl	8002374 <HAL_GetTick>
 8003b76:	0002      	movs	r2, r0
 8003b78:	693b      	ldr	r3, [r7, #16]
 8003b7a:	1ad3      	subs	r3, r2, r3
 8003b7c:	2b64      	cmp	r3, #100	; 0x64
 8003b7e:	d901      	bls.n	8003b84 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003b80:	2303      	movs	r3, #3
 8003b82:	e143      	b.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0x308>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b84:	4ba4      	ldr	r3, [pc, #656]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8003b86:	681a      	ldr	r2, [r3, #0]
 8003b88:	2380      	movs	r3, #128	; 0x80
 8003b8a:	005b      	lsls	r3, r3, #1
 8003b8c:	4013      	ands	r3, r2
 8003b8e:	d0f0      	beq.n	8003b72 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8003b90:	4ba0      	ldr	r3, [pc, #640]	; (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003b92:	681a      	ldr	r2, [r3, #0]
 8003b94:	23c0      	movs	r3, #192	; 0xc0
 8003b96:	039b      	lsls	r3, r3, #14
 8003b98:	4013      	ands	r3, r2
 8003b9a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	685a      	ldr	r2, [r3, #4]
 8003ba0:	23c0      	movs	r3, #192	; 0xc0
 8003ba2:	039b      	lsls	r3, r3, #14
 8003ba4:	4013      	ands	r3, r2
 8003ba6:	68fa      	ldr	r2, [r7, #12]
 8003ba8:	429a      	cmp	r2, r3
 8003baa:	d107      	bne.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	689a      	ldr	r2, [r3, #8]
 8003bb0:	23c0      	movs	r3, #192	; 0xc0
 8003bb2:	039b      	lsls	r3, r3, #14
 8003bb4:	4013      	ands	r3, r2
 8003bb6:	68fa      	ldr	r2, [r7, #12]
 8003bb8:	429a      	cmp	r2, r3
 8003bba:	d013      	beq.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	685a      	ldr	r2, [r3, #4]
 8003bc0:	23c0      	movs	r3, #192	; 0xc0
 8003bc2:	029b      	lsls	r3, r3, #10
 8003bc4:	401a      	ands	r2, r3
 8003bc6:	23c0      	movs	r3, #192	; 0xc0
 8003bc8:	029b      	lsls	r3, r3, #10
 8003bca:	429a      	cmp	r2, r3
 8003bcc:	d10a      	bne.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8003bce:	4b91      	ldr	r3, [pc, #580]	; (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003bd0:	681a      	ldr	r2, [r3, #0]
 8003bd2:	2380      	movs	r3, #128	; 0x80
 8003bd4:	029b      	lsls	r3, r3, #10
 8003bd6:	401a      	ands	r2, r3
 8003bd8:	2380      	movs	r3, #128	; 0x80
 8003bda:	029b      	lsls	r3, r3, #10
 8003bdc:	429a      	cmp	r2, r3
 8003bde:	d101      	bne.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8003be0:	2301      	movs	r3, #1
 8003be2:	e113      	b.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0x308>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8003be4:	4b8b      	ldr	r3, [pc, #556]	; (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003be6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003be8:	23c0      	movs	r3, #192	; 0xc0
 8003bea:	029b      	lsls	r3, r3, #10
 8003bec:	4013      	ands	r3, r2
 8003bee:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d049      	beq.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0x186>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	685a      	ldr	r2, [r3, #4]
 8003bfa:	23c0      	movs	r3, #192	; 0xc0
 8003bfc:	029b      	lsls	r3, r3, #10
 8003bfe:	4013      	ands	r3, r2
 8003c00:	68fa      	ldr	r2, [r7, #12]
 8003c02:	429a      	cmp	r2, r3
 8003c04:	d004      	beq.n	8003c10 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	2220      	movs	r2, #32
 8003c0c:	4013      	ands	r3, r2
 8003c0e:	d10d      	bne.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	689a      	ldr	r2, [r3, #8]
 8003c14:	23c0      	movs	r3, #192	; 0xc0
 8003c16:	029b      	lsls	r3, r3, #10
 8003c18:	4013      	ands	r3, r2
 8003c1a:	68fa      	ldr	r2, [r7, #12]
 8003c1c:	429a      	cmp	r2, r3
 8003c1e:	d034      	beq.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681a      	ldr	r2, [r3, #0]
 8003c24:	2380      	movs	r3, #128	; 0x80
 8003c26:	011b      	lsls	r3, r3, #4
 8003c28:	4013      	ands	r3, r2
 8003c2a:	d02e      	beq.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8003c2c:	4b79      	ldr	r3, [pc, #484]	; (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003c2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c30:	4a7a      	ldr	r2, [pc, #488]	; (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8003c32:	4013      	ands	r3, r2
 8003c34:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003c36:	4b77      	ldr	r3, [pc, #476]	; (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003c38:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003c3a:	4b76      	ldr	r3, [pc, #472]	; (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003c3c:	2180      	movs	r1, #128	; 0x80
 8003c3e:	0309      	lsls	r1, r1, #12
 8003c40:	430a      	orrs	r2, r1
 8003c42:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003c44:	4b73      	ldr	r3, [pc, #460]	; (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003c46:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003c48:	4b72      	ldr	r3, [pc, #456]	; (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003c4a:	4975      	ldr	r1, [pc, #468]	; (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8003c4c:	400a      	ands	r2, r1
 8003c4e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8003c50:	4b70      	ldr	r3, [pc, #448]	; (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003c52:	68fa      	ldr	r2, [r7, #12]
 8003c54:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8003c56:	68fa      	ldr	r2, [r7, #12]
 8003c58:	2380      	movs	r3, #128	; 0x80
 8003c5a:	005b      	lsls	r3, r3, #1
 8003c5c:	4013      	ands	r3, r2
 8003c5e:	d014      	beq.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c60:	f7fe fb88 	bl	8002374 <HAL_GetTick>
 8003c64:	0003      	movs	r3, r0
 8003c66:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003c68:	e009      	b.n	8003c7e <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c6a:	f7fe fb83 	bl	8002374 <HAL_GetTick>
 8003c6e:	0002      	movs	r2, r0
 8003c70:	693b      	ldr	r3, [r7, #16]
 8003c72:	1ad3      	subs	r3, r2, r3
 8003c74:	4a6b      	ldr	r2, [pc, #428]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d901      	bls.n	8003c7e <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8003c7a:	2303      	movs	r3, #3
 8003c7c:	e0c6      	b.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0x308>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003c7e:	4b65      	ldr	r3, [pc, #404]	; (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003c80:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003c82:	2380      	movs	r3, #128	; 0x80
 8003c84:	009b      	lsls	r3, r3, #2
 8003c86:	4013      	ands	r3, r2
 8003c88:	d0ef      	beq.n	8003c6a <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681a      	ldr	r2, [r3, #0]
 8003c8e:	2380      	movs	r3, #128	; 0x80
 8003c90:	011b      	lsls	r3, r3, #4
 8003c92:	4013      	ands	r3, r2
 8003c94:	d01f      	beq.n	8003cd6 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	689a      	ldr	r2, [r3, #8]
 8003c9a:	23c0      	movs	r3, #192	; 0xc0
 8003c9c:	029b      	lsls	r3, r3, #10
 8003c9e:	401a      	ands	r2, r3
 8003ca0:	23c0      	movs	r3, #192	; 0xc0
 8003ca2:	029b      	lsls	r3, r3, #10
 8003ca4:	429a      	cmp	r2, r3
 8003ca6:	d10c      	bne.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8003ca8:	4b5a      	ldr	r3, [pc, #360]	; (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a5e      	ldr	r2, [pc, #376]	; (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8003cae:	4013      	ands	r3, r2
 8003cb0:	0019      	movs	r1, r3
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	689a      	ldr	r2, [r3, #8]
 8003cb6:	23c0      	movs	r3, #192	; 0xc0
 8003cb8:	039b      	lsls	r3, r3, #14
 8003cba:	401a      	ands	r2, r3
 8003cbc:	4b55      	ldr	r3, [pc, #340]	; (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003cbe:	430a      	orrs	r2, r1
 8003cc0:	601a      	str	r2, [r3, #0]
 8003cc2:	4b54      	ldr	r3, [pc, #336]	; (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003cc4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	689a      	ldr	r2, [r3, #8]
 8003cca:	23c0      	movs	r3, #192	; 0xc0
 8003ccc:	029b      	lsls	r3, r3, #10
 8003cce:	401a      	ands	r2, r3
 8003cd0:	4b50      	ldr	r3, [pc, #320]	; (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003cd2:	430a      	orrs	r2, r1
 8003cd4:	651a      	str	r2, [r3, #80]	; 0x50
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	2220      	movs	r2, #32
 8003cdc:	4013      	ands	r3, r2
 8003cde:	d01f      	beq.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	685a      	ldr	r2, [r3, #4]
 8003ce4:	23c0      	movs	r3, #192	; 0xc0
 8003ce6:	029b      	lsls	r3, r3, #10
 8003ce8:	401a      	ands	r2, r3
 8003cea:	23c0      	movs	r3, #192	; 0xc0
 8003cec:	029b      	lsls	r3, r3, #10
 8003cee:	429a      	cmp	r2, r3
 8003cf0:	d10c      	bne.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0x208>
 8003cf2:	4b48      	ldr	r3, [pc, #288]	; (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4a4c      	ldr	r2, [pc, #304]	; (8003e28 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8003cf8:	4013      	ands	r3, r2
 8003cfa:	0019      	movs	r1, r3
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	685a      	ldr	r2, [r3, #4]
 8003d00:	23c0      	movs	r3, #192	; 0xc0
 8003d02:	039b      	lsls	r3, r3, #14
 8003d04:	401a      	ands	r2, r3
 8003d06:	4b43      	ldr	r3, [pc, #268]	; (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003d08:	430a      	orrs	r2, r1
 8003d0a:	601a      	str	r2, [r3, #0]
 8003d0c:	4b41      	ldr	r3, [pc, #260]	; (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003d0e:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	685a      	ldr	r2, [r3, #4]
 8003d14:	23c0      	movs	r3, #192	; 0xc0
 8003d16:	029b      	lsls	r3, r3, #10
 8003d18:	401a      	ands	r2, r3
 8003d1a:	4b3e      	ldr	r3, [pc, #248]	; (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003d1c:	430a      	orrs	r2, r1
 8003d1e:	651a      	str	r2, [r3, #80]	; 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003d20:	2317      	movs	r3, #23
 8003d22:	18fb      	adds	r3, r7, r3
 8003d24:	781b      	ldrb	r3, [r3, #0]
 8003d26:	2b01      	cmp	r3, #1
 8003d28:	d105      	bne.n	8003d36 <HAL_RCCEx_PeriphCLKConfig+0x232>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d2a:	4b3a      	ldr	r3, [pc, #232]	; (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003d2c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d2e:	4b39      	ldr	r3, [pc, #228]	; (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003d30:	493e      	ldr	r1, [pc, #248]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8003d32:	400a      	ands	r2, r1
 8003d34:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	2201      	movs	r2, #1
 8003d3c:	4013      	ands	r3, r2
 8003d3e:	d009      	beq.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003d40:	4b34      	ldr	r3, [pc, #208]	; (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003d42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d44:	2203      	movs	r2, #3
 8003d46:	4393      	bics	r3, r2
 8003d48:	0019      	movs	r1, r3
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	68da      	ldr	r2, [r3, #12]
 8003d4e:	4b31      	ldr	r3, [pc, #196]	; (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003d50:	430a      	orrs	r2, r1
 8003d52:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	2202      	movs	r2, #2
 8003d5a:	4013      	ands	r3, r2
 8003d5c:	d009      	beq.n	8003d72 <HAL_RCCEx_PeriphCLKConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003d5e:	4b2d      	ldr	r3, [pc, #180]	; (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003d60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d62:	220c      	movs	r2, #12
 8003d64:	4393      	bics	r3, r2
 8003d66:	0019      	movs	r1, r3
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	691a      	ldr	r2, [r3, #16]
 8003d6c:	4b29      	ldr	r3, [pc, #164]	; (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003d6e:	430a      	orrs	r2, r1
 8003d70:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	2204      	movs	r2, #4
 8003d78:	4013      	ands	r3, r2
 8003d7a:	d009      	beq.n	8003d90 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003d7c:	4b25      	ldr	r3, [pc, #148]	; (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003d7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d80:	4a2b      	ldr	r2, [pc, #172]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 8003d82:	4013      	ands	r3, r2
 8003d84:	0019      	movs	r1, r3
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	695a      	ldr	r2, [r3, #20]
 8003d8a:	4b22      	ldr	r3, [pc, #136]	; (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003d8c:	430a      	orrs	r2, r1
 8003d8e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	2208      	movs	r2, #8
 8003d96:	4013      	ands	r3, r2
 8003d98:	d009      	beq.n	8003dae <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003d9a:	4b1e      	ldr	r3, [pc, #120]	; (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003d9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d9e:	4a25      	ldr	r2, [pc, #148]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003da0:	4013      	ands	r3, r2
 8003da2:	0019      	movs	r1, r3
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	699a      	ldr	r2, [r3, #24]
 8003da8:	4b1a      	ldr	r3, [pc, #104]	; (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003daa:	430a      	orrs	r2, r1
 8003dac:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681a      	ldr	r2, [r3, #0]
 8003db2:	2380      	movs	r3, #128	; 0x80
 8003db4:	005b      	lsls	r3, r3, #1
 8003db6:	4013      	ands	r3, r2
 8003db8:	d009      	beq.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003dba:	4b16      	ldr	r3, [pc, #88]	; (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003dbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dbe:	4a17      	ldr	r2, [pc, #92]	; (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8003dc0:	4013      	ands	r3, r2
 8003dc2:	0019      	movs	r1, r3
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	69da      	ldr	r2, [r3, #28]
 8003dc8:	4b12      	ldr	r3, [pc, #72]	; (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003dca:	430a      	orrs	r2, r1
 8003dcc:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	2240      	movs	r2, #64	; 0x40
 8003dd4:	4013      	ands	r3, r2
 8003dd6:	d009      	beq.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0x2e8>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003dd8:	4b0e      	ldr	r3, [pc, #56]	; (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003dda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ddc:	4a16      	ldr	r2, [pc, #88]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8003dde:	4013      	ands	r3, r2
 8003de0:	0019      	movs	r1, r3
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003de6:	4b0b      	ldr	r3, [pc, #44]	; (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003de8:	430a      	orrs	r2, r1
 8003dea:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	2280      	movs	r2, #128	; 0x80
 8003df2:	4013      	ands	r3, r2
 8003df4:	d009      	beq.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8003df6:	4b07      	ldr	r3, [pc, #28]	; (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003df8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dfa:	4a10      	ldr	r2, [pc, #64]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003dfc:	4013      	ands	r3, r2
 8003dfe:	0019      	movs	r1, r3
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6a1a      	ldr	r2, [r3, #32]
 8003e04:	4b03      	ldr	r3, [pc, #12]	; (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003e06:	430a      	orrs	r2, r1
 8003e08:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8003e0a:	2300      	movs	r3, #0
}
 8003e0c:	0018      	movs	r0, r3
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	b006      	add	sp, #24
 8003e12:	bd80      	pop	{r7, pc}
 8003e14:	40021000 	.word	0x40021000
 8003e18:	40007000 	.word	0x40007000
 8003e1c:	fffcffff 	.word	0xfffcffff
 8003e20:	fff7ffff 	.word	0xfff7ffff
 8003e24:	00001388 	.word	0x00001388
 8003e28:	ffcfffff 	.word	0xffcfffff
 8003e2c:	efffffff 	.word	0xefffffff
 8003e30:	fffff3ff 	.word	0xfffff3ff
 8003e34:	ffffcfff 	.word	0xffffcfff
 8003e38:	fbffffff 	.word	0xfbffffff
 8003e3c:	fff3ffff 	.word	0xfff3ffff

08003e40 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b082      	sub	sp, #8
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d101      	bne.n	8003e52 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003e4e:	2301      	movs	r3, #1
 8003e50:	e044      	b.n	8003edc <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d107      	bne.n	8003e6a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2278      	movs	r2, #120	; 0x78
 8003e5e:	2100      	movs	r1, #0
 8003e60:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	0018      	movs	r0, r3
 8003e66:	f7fe f9a9 	bl	80021bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2224      	movs	r2, #36	; 0x24
 8003e6e:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	681a      	ldr	r2, [r3, #0]
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	2101      	movs	r1, #1
 8003e7c:	438a      	bics	r2, r1
 8003e7e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	0018      	movs	r0, r3
 8003e84:	f000 fc2c 	bl	80046e0 <UART_SetConfig>
 8003e88:	0003      	movs	r3, r0
 8003e8a:	2b01      	cmp	r3, #1
 8003e8c:	d101      	bne.n	8003e92 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003e8e:	2301      	movs	r3, #1
 8003e90:	e024      	b.n	8003edc <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d003      	beq.n	8003ea2 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	0018      	movs	r0, r3
 8003e9e:	f000 febd 	bl	8004c1c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	685a      	ldr	r2, [r3, #4]
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	490d      	ldr	r1, [pc, #52]	; (8003ee4 <HAL_UART_Init+0xa4>)
 8003eae:	400a      	ands	r2, r1
 8003eb0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	689a      	ldr	r2, [r3, #8]
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	212a      	movs	r1, #42	; 0x2a
 8003ebe:	438a      	bics	r2, r1
 8003ec0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	681a      	ldr	r2, [r3, #0]
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	2101      	movs	r1, #1
 8003ece:	430a      	orrs	r2, r1
 8003ed0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	0018      	movs	r0, r3
 8003ed6:	f000 ff55 	bl	8004d84 <UART_CheckIdleState>
 8003eda:	0003      	movs	r3, r0
}
 8003edc:	0018      	movs	r0, r3
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	b002      	add	sp, #8
 8003ee2:	bd80      	pop	{r7, pc}
 8003ee4:	ffffb7ff 	.word	0xffffb7ff

08003ee8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b08a      	sub	sp, #40	; 0x28
 8003eec:	af02      	add	r7, sp, #8
 8003eee:	60f8      	str	r0, [r7, #12]
 8003ef0:	60b9      	str	r1, [r7, #8]
 8003ef2:	603b      	str	r3, [r7, #0]
 8003ef4:	1dbb      	adds	r3, r7, #6
 8003ef6:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003efc:	2b20      	cmp	r3, #32
 8003efe:	d000      	beq.n	8003f02 <HAL_UART_Transmit+0x1a>
 8003f00:	e08c      	b.n	800401c <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f02:	68bb      	ldr	r3, [r7, #8]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d003      	beq.n	8003f10 <HAL_UART_Transmit+0x28>
 8003f08:	1dbb      	adds	r3, r7, #6
 8003f0a:	881b      	ldrh	r3, [r3, #0]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d101      	bne.n	8003f14 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8003f10:	2301      	movs	r3, #1
 8003f12:	e084      	b.n	800401e <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	689a      	ldr	r2, [r3, #8]
 8003f18:	2380      	movs	r3, #128	; 0x80
 8003f1a:	015b      	lsls	r3, r3, #5
 8003f1c:	429a      	cmp	r2, r3
 8003f1e:	d109      	bne.n	8003f34 <HAL_UART_Transmit+0x4c>
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	691b      	ldr	r3, [r3, #16]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d105      	bne.n	8003f34 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003f28:	68bb      	ldr	r3, [r7, #8]
 8003f2a:	2201      	movs	r2, #1
 8003f2c:	4013      	ands	r3, r2
 8003f2e:	d001      	beq.n	8003f34 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8003f30:	2301      	movs	r3, #1
 8003f32:	e074      	b.n	800401e <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	2284      	movs	r2, #132	; 0x84
 8003f38:	2100      	movs	r1, #0
 8003f3a:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	2221      	movs	r2, #33	; 0x21
 8003f40:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003f42:	f7fe fa17 	bl	8002374 <HAL_GetTick>
 8003f46:	0003      	movs	r3, r0
 8003f48:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	1dba      	adds	r2, r7, #6
 8003f4e:	2150      	movs	r1, #80	; 0x50
 8003f50:	8812      	ldrh	r2, [r2, #0]
 8003f52:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	1dba      	adds	r2, r7, #6
 8003f58:	2152      	movs	r1, #82	; 0x52
 8003f5a:	8812      	ldrh	r2, [r2, #0]
 8003f5c:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	689a      	ldr	r2, [r3, #8]
 8003f62:	2380      	movs	r3, #128	; 0x80
 8003f64:	015b      	lsls	r3, r3, #5
 8003f66:	429a      	cmp	r2, r3
 8003f68:	d108      	bne.n	8003f7c <HAL_UART_Transmit+0x94>
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	691b      	ldr	r3, [r3, #16]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d104      	bne.n	8003f7c <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8003f72:	2300      	movs	r3, #0
 8003f74:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003f76:	68bb      	ldr	r3, [r7, #8]
 8003f78:	61bb      	str	r3, [r7, #24]
 8003f7a:	e003      	b.n	8003f84 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8003f7c:	68bb      	ldr	r3, [r7, #8]
 8003f7e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003f80:	2300      	movs	r3, #0
 8003f82:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003f84:	e02f      	b.n	8003fe6 <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003f86:	697a      	ldr	r2, [r7, #20]
 8003f88:	68f8      	ldr	r0, [r7, #12]
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	9300      	str	r3, [sp, #0]
 8003f8e:	0013      	movs	r3, r2
 8003f90:	2200      	movs	r2, #0
 8003f92:	2180      	movs	r1, #128	; 0x80
 8003f94:	f000 ff9e 	bl	8004ed4 <UART_WaitOnFlagUntilTimeout>
 8003f98:	1e03      	subs	r3, r0, #0
 8003f9a:	d004      	beq.n	8003fa6 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	2220      	movs	r2, #32
 8003fa0:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8003fa2:	2303      	movs	r3, #3
 8003fa4:	e03b      	b.n	800401e <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 8003fa6:	69fb      	ldr	r3, [r7, #28]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d10b      	bne.n	8003fc4 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003fac:	69bb      	ldr	r3, [r7, #24]
 8003fae:	881b      	ldrh	r3, [r3, #0]
 8003fb0:	001a      	movs	r2, r3
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	05d2      	lsls	r2, r2, #23
 8003fb8:	0dd2      	lsrs	r2, r2, #23
 8003fba:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003fbc:	69bb      	ldr	r3, [r7, #24]
 8003fbe:	3302      	adds	r3, #2
 8003fc0:	61bb      	str	r3, [r7, #24]
 8003fc2:	e007      	b.n	8003fd4 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003fc4:	69fb      	ldr	r3, [r7, #28]
 8003fc6:	781a      	ldrb	r2, [r3, #0]
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003fce:	69fb      	ldr	r3, [r7, #28]
 8003fd0:	3301      	adds	r3, #1
 8003fd2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	2252      	movs	r2, #82	; 0x52
 8003fd8:	5a9b      	ldrh	r3, [r3, r2]
 8003fda:	b29b      	uxth	r3, r3
 8003fdc:	3b01      	subs	r3, #1
 8003fde:	b299      	uxth	r1, r3
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	2252      	movs	r2, #82	; 0x52
 8003fe4:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	2252      	movs	r2, #82	; 0x52
 8003fea:	5a9b      	ldrh	r3, [r3, r2]
 8003fec:	b29b      	uxth	r3, r3
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d1c9      	bne.n	8003f86 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003ff2:	697a      	ldr	r2, [r7, #20]
 8003ff4:	68f8      	ldr	r0, [r7, #12]
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	9300      	str	r3, [sp, #0]
 8003ffa:	0013      	movs	r3, r2
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	2140      	movs	r1, #64	; 0x40
 8004000:	f000 ff68 	bl	8004ed4 <UART_WaitOnFlagUntilTimeout>
 8004004:	1e03      	subs	r3, r0, #0
 8004006:	d004      	beq.n	8004012 <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	2220      	movs	r2, #32
 800400c:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 800400e:	2303      	movs	r3, #3
 8004010:	e005      	b.n	800401e <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	2220      	movs	r2, #32
 8004016:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004018:	2300      	movs	r3, #0
 800401a:	e000      	b.n	800401e <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 800401c:	2302      	movs	r3, #2
  }
}
 800401e:	0018      	movs	r0, r3
 8004020:	46bd      	mov	sp, r7
 8004022:	b008      	add	sp, #32
 8004024:	bd80      	pop	{r7, pc}
	...

08004028 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b088      	sub	sp, #32
 800402c:	af00      	add	r7, sp, #0
 800402e:	60f8      	str	r0, [r7, #12]
 8004030:	60b9      	str	r1, [r7, #8]
 8004032:	1dbb      	adds	r3, r7, #6
 8004034:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	2280      	movs	r2, #128	; 0x80
 800403a:	589b      	ldr	r3, [r3, r2]
 800403c:	2b20      	cmp	r3, #32
 800403e:	d14a      	bne.n	80040d6 <HAL_UART_Receive_IT+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 8004040:	68bb      	ldr	r3, [r7, #8]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d003      	beq.n	800404e <HAL_UART_Receive_IT+0x26>
 8004046:	1dbb      	adds	r3, r7, #6
 8004048:	881b      	ldrh	r3, [r3, #0]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d101      	bne.n	8004052 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800404e:	2301      	movs	r3, #1
 8004050:	e042      	b.n	80040d8 <HAL_UART_Receive_IT+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	689a      	ldr	r2, [r3, #8]
 8004056:	2380      	movs	r3, #128	; 0x80
 8004058:	015b      	lsls	r3, r3, #5
 800405a:	429a      	cmp	r2, r3
 800405c:	d109      	bne.n	8004072 <HAL_UART_Receive_IT+0x4a>
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	691b      	ldr	r3, [r3, #16]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d105      	bne.n	8004072 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004066:	68bb      	ldr	r3, [r7, #8]
 8004068:	2201      	movs	r2, #1
 800406a:	4013      	ands	r3, r2
 800406c:	d001      	beq.n	8004072 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 800406e:	2301      	movs	r3, #1
 8004070:	e032      	b.n	80040d8 <HAL_UART_Receive_IT+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	2200      	movs	r2, #0
 8004076:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4a18      	ldr	r2, [pc, #96]	; (80040e0 <HAL_UART_Receive_IT+0xb8>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d020      	beq.n	80040c4 <HAL_UART_Receive_IT+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	685a      	ldr	r2, [r3, #4]
 8004088:	2380      	movs	r3, #128	; 0x80
 800408a:	041b      	lsls	r3, r3, #16
 800408c:	4013      	ands	r3, r2
 800408e:	d019      	beq.n	80040c4 <HAL_UART_Receive_IT+0x9c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004090:	f3ef 8310 	mrs	r3, PRIMASK
 8004094:	613b      	str	r3, [r7, #16]
  return(result);
 8004096:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004098:	61fb      	str	r3, [r7, #28]
 800409a:	2301      	movs	r3, #1
 800409c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800409e:	697b      	ldr	r3, [r7, #20]
 80040a0:	f383 8810 	msr	PRIMASK, r3
}
 80040a4:	46c0      	nop			; (mov r8, r8)
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	681a      	ldr	r2, [r3, #0]
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	2180      	movs	r1, #128	; 0x80
 80040b2:	04c9      	lsls	r1, r1, #19
 80040b4:	430a      	orrs	r2, r1
 80040b6:	601a      	str	r2, [r3, #0]
 80040b8:	69fb      	ldr	r3, [r7, #28]
 80040ba:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040bc:	69bb      	ldr	r3, [r7, #24]
 80040be:	f383 8810 	msr	PRIMASK, r3
}
 80040c2:	46c0      	nop			; (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80040c4:	1dbb      	adds	r3, r7, #6
 80040c6:	881a      	ldrh	r2, [r3, #0]
 80040c8:	68b9      	ldr	r1, [r7, #8]
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	0018      	movs	r0, r3
 80040ce:	f000 ff6b 	bl	8004fa8 <UART_Start_Receive_IT>
 80040d2:	0003      	movs	r3, r0
 80040d4:	e000      	b.n	80040d8 <HAL_UART_Receive_IT+0xb0>
  }
  else
  {
    return HAL_BUSY;
 80040d6:	2302      	movs	r3, #2
  }
}
 80040d8:	0018      	movs	r0, r3
 80040da:	46bd      	mov	sp, r7
 80040dc:	b008      	add	sp, #32
 80040de:	bd80      	pop	{r7, pc}
 80040e0:	40004800 	.word	0x40004800

080040e4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80040e4:	b590      	push	{r4, r7, lr}
 80040e6:	b0ab      	sub	sp, #172	; 0xac
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	69db      	ldr	r3, [r3, #28]
 80040f2:	22a4      	movs	r2, #164	; 0xa4
 80040f4:	18b9      	adds	r1, r7, r2
 80040f6:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	20a0      	movs	r0, #160	; 0xa0
 8004100:	1839      	adds	r1, r7, r0
 8004102:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	689b      	ldr	r3, [r3, #8]
 800410a:	219c      	movs	r1, #156	; 0x9c
 800410c:	1879      	adds	r1, r7, r1
 800410e:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004110:	0011      	movs	r1, r2
 8004112:	18bb      	adds	r3, r7, r2
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4a99      	ldr	r2, [pc, #612]	; (800437c <HAL_UART_IRQHandler+0x298>)
 8004118:	4013      	ands	r3, r2
 800411a:	2298      	movs	r2, #152	; 0x98
 800411c:	18bc      	adds	r4, r7, r2
 800411e:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8004120:	18bb      	adds	r3, r7, r2
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d114      	bne.n	8004152 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004128:	187b      	adds	r3, r7, r1
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	2220      	movs	r2, #32
 800412e:	4013      	ands	r3, r2
 8004130:	d00f      	beq.n	8004152 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004132:	183b      	adds	r3, r7, r0
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	2220      	movs	r2, #32
 8004138:	4013      	ands	r3, r2
 800413a:	d00a      	beq.n	8004152 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004140:	2b00      	cmp	r3, #0
 8004142:	d100      	bne.n	8004146 <HAL_UART_IRQHandler+0x62>
 8004144:	e2a0      	b.n	8004688 <HAL_UART_IRQHandler+0x5a4>
      {
        huart->RxISR(huart);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800414a:	687a      	ldr	r2, [r7, #4]
 800414c:	0010      	movs	r0, r2
 800414e:	4798      	blx	r3
      }
      return;
 8004150:	e29a      	b.n	8004688 <HAL_UART_IRQHandler+0x5a4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004152:	2398      	movs	r3, #152	; 0x98
 8004154:	18fb      	adds	r3, r7, r3
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d100      	bne.n	800415e <HAL_UART_IRQHandler+0x7a>
 800415c:	e114      	b.n	8004388 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800415e:	239c      	movs	r3, #156	; 0x9c
 8004160:	18fb      	adds	r3, r7, r3
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	2201      	movs	r2, #1
 8004166:	4013      	ands	r3, r2
 8004168:	d106      	bne.n	8004178 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800416a:	23a0      	movs	r3, #160	; 0xa0
 800416c:	18fb      	adds	r3, r7, r3
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	4a83      	ldr	r2, [pc, #524]	; (8004380 <HAL_UART_IRQHandler+0x29c>)
 8004172:	4013      	ands	r3, r2
 8004174:	d100      	bne.n	8004178 <HAL_UART_IRQHandler+0x94>
 8004176:	e107      	b.n	8004388 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004178:	23a4      	movs	r3, #164	; 0xa4
 800417a:	18fb      	adds	r3, r7, r3
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	2201      	movs	r2, #1
 8004180:	4013      	ands	r3, r2
 8004182:	d012      	beq.n	80041aa <HAL_UART_IRQHandler+0xc6>
 8004184:	23a0      	movs	r3, #160	; 0xa0
 8004186:	18fb      	adds	r3, r7, r3
 8004188:	681a      	ldr	r2, [r3, #0]
 800418a:	2380      	movs	r3, #128	; 0x80
 800418c:	005b      	lsls	r3, r3, #1
 800418e:	4013      	ands	r3, r2
 8004190:	d00b      	beq.n	80041aa <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	2201      	movs	r2, #1
 8004198:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2284      	movs	r2, #132	; 0x84
 800419e:	589b      	ldr	r3, [r3, r2]
 80041a0:	2201      	movs	r2, #1
 80041a2:	431a      	orrs	r2, r3
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2184      	movs	r1, #132	; 0x84
 80041a8:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80041aa:	23a4      	movs	r3, #164	; 0xa4
 80041ac:	18fb      	adds	r3, r7, r3
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	2202      	movs	r2, #2
 80041b2:	4013      	ands	r3, r2
 80041b4:	d011      	beq.n	80041da <HAL_UART_IRQHandler+0xf6>
 80041b6:	239c      	movs	r3, #156	; 0x9c
 80041b8:	18fb      	adds	r3, r7, r3
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	2201      	movs	r2, #1
 80041be:	4013      	ands	r3, r2
 80041c0:	d00b      	beq.n	80041da <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	2202      	movs	r2, #2
 80041c8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2284      	movs	r2, #132	; 0x84
 80041ce:	589b      	ldr	r3, [r3, r2]
 80041d0:	2204      	movs	r2, #4
 80041d2:	431a      	orrs	r2, r3
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2184      	movs	r1, #132	; 0x84
 80041d8:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80041da:	23a4      	movs	r3, #164	; 0xa4
 80041dc:	18fb      	adds	r3, r7, r3
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	2204      	movs	r2, #4
 80041e2:	4013      	ands	r3, r2
 80041e4:	d011      	beq.n	800420a <HAL_UART_IRQHandler+0x126>
 80041e6:	239c      	movs	r3, #156	; 0x9c
 80041e8:	18fb      	adds	r3, r7, r3
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	2201      	movs	r2, #1
 80041ee:	4013      	ands	r3, r2
 80041f0:	d00b      	beq.n	800420a <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	2204      	movs	r2, #4
 80041f8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2284      	movs	r2, #132	; 0x84
 80041fe:	589b      	ldr	r3, [r3, r2]
 8004200:	2202      	movs	r2, #2
 8004202:	431a      	orrs	r2, r3
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2184      	movs	r1, #132	; 0x84
 8004208:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800420a:	23a4      	movs	r3, #164	; 0xa4
 800420c:	18fb      	adds	r3, r7, r3
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	2208      	movs	r2, #8
 8004212:	4013      	ands	r3, r2
 8004214:	d017      	beq.n	8004246 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004216:	23a0      	movs	r3, #160	; 0xa0
 8004218:	18fb      	adds	r3, r7, r3
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	2220      	movs	r2, #32
 800421e:	4013      	ands	r3, r2
 8004220:	d105      	bne.n	800422e <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004222:	239c      	movs	r3, #156	; 0x9c
 8004224:	18fb      	adds	r3, r7, r3
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	2201      	movs	r2, #1
 800422a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800422c:	d00b      	beq.n	8004246 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	2208      	movs	r2, #8
 8004234:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2284      	movs	r2, #132	; 0x84
 800423a:	589b      	ldr	r3, [r3, r2]
 800423c:	2208      	movs	r2, #8
 800423e:	431a      	orrs	r2, r3
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2184      	movs	r1, #132	; 0x84
 8004244:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004246:	23a4      	movs	r3, #164	; 0xa4
 8004248:	18fb      	adds	r3, r7, r3
 800424a:	681a      	ldr	r2, [r3, #0]
 800424c:	2380      	movs	r3, #128	; 0x80
 800424e:	011b      	lsls	r3, r3, #4
 8004250:	4013      	ands	r3, r2
 8004252:	d013      	beq.n	800427c <HAL_UART_IRQHandler+0x198>
 8004254:	23a0      	movs	r3, #160	; 0xa0
 8004256:	18fb      	adds	r3, r7, r3
 8004258:	681a      	ldr	r2, [r3, #0]
 800425a:	2380      	movs	r3, #128	; 0x80
 800425c:	04db      	lsls	r3, r3, #19
 800425e:	4013      	ands	r3, r2
 8004260:	d00c      	beq.n	800427c <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	2280      	movs	r2, #128	; 0x80
 8004268:	0112      	lsls	r2, r2, #4
 800426a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2284      	movs	r2, #132	; 0x84
 8004270:	589b      	ldr	r3, [r3, r2]
 8004272:	2220      	movs	r2, #32
 8004274:	431a      	orrs	r2, r3
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2184      	movs	r1, #132	; 0x84
 800427a:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2284      	movs	r2, #132	; 0x84
 8004280:	589b      	ldr	r3, [r3, r2]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d100      	bne.n	8004288 <HAL_UART_IRQHandler+0x1a4>
 8004286:	e201      	b.n	800468c <HAL_UART_IRQHandler+0x5a8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004288:	23a4      	movs	r3, #164	; 0xa4
 800428a:	18fb      	adds	r3, r7, r3
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	2220      	movs	r2, #32
 8004290:	4013      	ands	r3, r2
 8004292:	d00e      	beq.n	80042b2 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004294:	23a0      	movs	r3, #160	; 0xa0
 8004296:	18fb      	adds	r3, r7, r3
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	2220      	movs	r2, #32
 800429c:	4013      	ands	r3, r2
 800429e:	d008      	beq.n	80042b2 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d004      	beq.n	80042b2 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80042ac:	687a      	ldr	r2, [r7, #4]
 80042ae:	0010      	movs	r0, r2
 80042b0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2284      	movs	r2, #132	; 0x84
 80042b6:	589b      	ldr	r3, [r3, r2]
 80042b8:	2194      	movs	r1, #148	; 0x94
 80042ba:	187a      	adds	r2, r7, r1
 80042bc:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	689b      	ldr	r3, [r3, #8]
 80042c4:	2240      	movs	r2, #64	; 0x40
 80042c6:	4013      	ands	r3, r2
 80042c8:	2b40      	cmp	r3, #64	; 0x40
 80042ca:	d004      	beq.n	80042d6 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80042cc:	187b      	adds	r3, r7, r1
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	2228      	movs	r2, #40	; 0x28
 80042d2:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80042d4:	d047      	beq.n	8004366 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	0018      	movs	r0, r3
 80042da:	f000 ff2f 	bl	800513c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	689b      	ldr	r3, [r3, #8]
 80042e4:	2240      	movs	r2, #64	; 0x40
 80042e6:	4013      	ands	r3, r2
 80042e8:	2b40      	cmp	r3, #64	; 0x40
 80042ea:	d137      	bne.n	800435c <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80042ec:	f3ef 8310 	mrs	r3, PRIMASK
 80042f0:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 80042f2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80042f4:	2090      	movs	r0, #144	; 0x90
 80042f6:	183a      	adds	r2, r7, r0
 80042f8:	6013      	str	r3, [r2, #0]
 80042fa:	2301      	movs	r3, #1
 80042fc:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042fe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004300:	f383 8810 	msr	PRIMASK, r3
}
 8004304:	46c0      	nop			; (mov r8, r8)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	689a      	ldr	r2, [r3, #8]
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	2140      	movs	r1, #64	; 0x40
 8004312:	438a      	bics	r2, r1
 8004314:	609a      	str	r2, [r3, #8]
 8004316:	183b      	adds	r3, r7, r0
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800431c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800431e:	f383 8810 	msr	PRIMASK, r3
}
 8004322:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004328:	2b00      	cmp	r3, #0
 800432a:	d012      	beq.n	8004352 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004330:	4a14      	ldr	r2, [pc, #80]	; (8004384 <HAL_UART_IRQHandler+0x2a0>)
 8004332:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004338:	0018      	movs	r0, r3
 800433a:	f7fe f967 	bl	800260c <HAL_DMA_Abort_IT>
 800433e:	1e03      	subs	r3, r0, #0
 8004340:	d01a      	beq.n	8004378 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004346:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800434c:	0018      	movs	r0, r3
 800434e:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004350:	e012      	b.n	8004378 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	0018      	movs	r0, r3
 8004356:	f000 f9af 	bl	80046b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800435a:	e00d      	b.n	8004378 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	0018      	movs	r0, r3
 8004360:	f000 f9aa 	bl	80046b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004364:	e008      	b.n	8004378 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	0018      	movs	r0, r3
 800436a:	f000 f9a5 	bl	80046b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2284      	movs	r2, #132	; 0x84
 8004372:	2100      	movs	r1, #0
 8004374:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8004376:	e189      	b.n	800468c <HAL_UART_IRQHandler+0x5a8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004378:	46c0      	nop			; (mov r8, r8)
    return;
 800437a:	e187      	b.n	800468c <HAL_UART_IRQHandler+0x5a8>
 800437c:	0000080f 	.word	0x0000080f
 8004380:	04000120 	.word	0x04000120
 8004384:	08005205 	.word	0x08005205

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800438c:	2b01      	cmp	r3, #1
 800438e:	d000      	beq.n	8004392 <HAL_UART_IRQHandler+0x2ae>
 8004390:	e13b      	b.n	800460a <HAL_UART_IRQHandler+0x526>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004392:	23a4      	movs	r3, #164	; 0xa4
 8004394:	18fb      	adds	r3, r7, r3
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	2210      	movs	r2, #16
 800439a:	4013      	ands	r3, r2
 800439c:	d100      	bne.n	80043a0 <HAL_UART_IRQHandler+0x2bc>
 800439e:	e134      	b.n	800460a <HAL_UART_IRQHandler+0x526>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80043a0:	23a0      	movs	r3, #160	; 0xa0
 80043a2:	18fb      	adds	r3, r7, r3
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	2210      	movs	r2, #16
 80043a8:	4013      	ands	r3, r2
 80043aa:	d100      	bne.n	80043ae <HAL_UART_IRQHandler+0x2ca>
 80043ac:	e12d      	b.n	800460a <HAL_UART_IRQHandler+0x526>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	2210      	movs	r2, #16
 80043b4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	689b      	ldr	r3, [r3, #8]
 80043bc:	2240      	movs	r2, #64	; 0x40
 80043be:	4013      	ands	r3, r2
 80043c0:	2b40      	cmp	r3, #64	; 0x40
 80043c2:	d000      	beq.n	80043c6 <HAL_UART_IRQHandler+0x2e2>
 80043c4:	e0a1      	b.n	800450a <HAL_UART_IRQHandler+0x426>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	685a      	ldr	r2, [r3, #4]
 80043ce:	217e      	movs	r1, #126	; 0x7e
 80043d0:	187b      	adds	r3, r7, r1
 80043d2:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 80043d4:	187b      	adds	r3, r7, r1
 80043d6:	881b      	ldrh	r3, [r3, #0]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d100      	bne.n	80043de <HAL_UART_IRQHandler+0x2fa>
 80043dc:	e158      	b.n	8004690 <HAL_UART_IRQHandler+0x5ac>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2258      	movs	r2, #88	; 0x58
 80043e2:	5a9b      	ldrh	r3, [r3, r2]
 80043e4:	187a      	adds	r2, r7, r1
 80043e6:	8812      	ldrh	r2, [r2, #0]
 80043e8:	429a      	cmp	r2, r3
 80043ea:	d300      	bcc.n	80043ee <HAL_UART_IRQHandler+0x30a>
 80043ec:	e150      	b.n	8004690 <HAL_UART_IRQHandler+0x5ac>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	187a      	adds	r2, r7, r1
 80043f2:	215a      	movs	r1, #90	; 0x5a
 80043f4:	8812      	ldrh	r2, [r2, #0]
 80043f6:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	2220      	movs	r2, #32
 8004402:	4013      	ands	r3, r2
 8004404:	d16f      	bne.n	80044e6 <HAL_UART_IRQHandler+0x402>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004406:	f3ef 8310 	mrs	r3, PRIMASK
 800440a:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 800440c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800440e:	67bb      	str	r3, [r7, #120]	; 0x78
 8004410:	2301      	movs	r3, #1
 8004412:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004414:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004416:	f383 8810 	msr	PRIMASK, r3
}
 800441a:	46c0      	nop			; (mov r8, r8)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	681a      	ldr	r2, [r3, #0]
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	499e      	ldr	r1, [pc, #632]	; (80046a0 <HAL_UART_IRQHandler+0x5bc>)
 8004428:	400a      	ands	r2, r1
 800442a:	601a      	str	r2, [r3, #0]
 800442c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800442e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004430:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004432:	f383 8810 	msr	PRIMASK, r3
}
 8004436:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004438:	f3ef 8310 	mrs	r3, PRIMASK
 800443c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 800443e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004440:	677b      	str	r3, [r7, #116]	; 0x74
 8004442:	2301      	movs	r3, #1
 8004444:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004446:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004448:	f383 8810 	msr	PRIMASK, r3
}
 800444c:	46c0      	nop			; (mov r8, r8)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	689a      	ldr	r2, [r3, #8]
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	2101      	movs	r1, #1
 800445a:	438a      	bics	r2, r1
 800445c:	609a      	str	r2, [r3, #8]
 800445e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004460:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004462:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004464:	f383 8810 	msr	PRIMASK, r3
}
 8004468:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800446a:	f3ef 8310 	mrs	r3, PRIMASK
 800446e:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8004470:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004472:	673b      	str	r3, [r7, #112]	; 0x70
 8004474:	2301      	movs	r3, #1
 8004476:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004478:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800447a:	f383 8810 	msr	PRIMASK, r3
}
 800447e:	46c0      	nop			; (mov r8, r8)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	689a      	ldr	r2, [r3, #8]
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	2140      	movs	r1, #64	; 0x40
 800448c:	438a      	bics	r2, r1
 800448e:	609a      	str	r2, [r3, #8]
 8004490:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004492:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004494:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004496:	f383 8810 	msr	PRIMASK, r3
}
 800449a:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2280      	movs	r2, #128	; 0x80
 80044a0:	2120      	movs	r1, #32
 80044a2:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2200      	movs	r2, #0
 80044a8:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80044aa:	f3ef 8310 	mrs	r3, PRIMASK
 80044ae:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 80044b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044b2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80044b4:	2301      	movs	r3, #1
 80044b6:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044b8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80044ba:	f383 8810 	msr	PRIMASK, r3
}
 80044be:	46c0      	nop			; (mov r8, r8)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	681a      	ldr	r2, [r3, #0]
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	2110      	movs	r1, #16
 80044cc:	438a      	bics	r2, r1
 80044ce:	601a      	str	r2, [r3, #0]
 80044d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044d2:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80044d6:	f383 8810 	msr	PRIMASK, r3
}
 80044da:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044e0:	0018      	movs	r0, r3
 80044e2:	f7fe f853 	bl	800258c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2202      	movs	r2, #2
 80044ea:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2258      	movs	r2, #88	; 0x58
 80044f0:	5a9a      	ldrh	r2, [r3, r2]
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	215a      	movs	r1, #90	; 0x5a
 80044f6:	5a5b      	ldrh	r3, [r3, r1]
 80044f8:	b29b      	uxth	r3, r3
 80044fa:	1ad3      	subs	r3, r2, r3
 80044fc:	b29a      	uxth	r2, r3
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	0011      	movs	r1, r2
 8004502:	0018      	movs	r0, r3
 8004504:	f000 f8e0 	bl	80046c8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004508:	e0c2      	b.n	8004690 <HAL_UART_IRQHandler+0x5ac>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2258      	movs	r2, #88	; 0x58
 800450e:	5a99      	ldrh	r1, [r3, r2]
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	225a      	movs	r2, #90	; 0x5a
 8004514:	5a9b      	ldrh	r3, [r3, r2]
 8004516:	b29a      	uxth	r2, r3
 8004518:	208e      	movs	r0, #142	; 0x8e
 800451a:	183b      	adds	r3, r7, r0
 800451c:	1a8a      	subs	r2, r1, r2
 800451e:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	225a      	movs	r2, #90	; 0x5a
 8004524:	5a9b      	ldrh	r3, [r3, r2]
 8004526:	b29b      	uxth	r3, r3
 8004528:	2b00      	cmp	r3, #0
 800452a:	d100      	bne.n	800452e <HAL_UART_IRQHandler+0x44a>
 800452c:	e0b2      	b.n	8004694 <HAL_UART_IRQHandler+0x5b0>
          && (nb_rx_data > 0U))
 800452e:	183b      	adds	r3, r7, r0
 8004530:	881b      	ldrh	r3, [r3, #0]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d100      	bne.n	8004538 <HAL_UART_IRQHandler+0x454>
 8004536:	e0ad      	b.n	8004694 <HAL_UART_IRQHandler+0x5b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004538:	f3ef 8310 	mrs	r3, PRIMASK
 800453c:	60fb      	str	r3, [r7, #12]
  return(result);
 800453e:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004540:	2488      	movs	r4, #136	; 0x88
 8004542:	193a      	adds	r2, r7, r4
 8004544:	6013      	str	r3, [r2, #0]
 8004546:	2301      	movs	r3, #1
 8004548:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800454a:	693b      	ldr	r3, [r7, #16]
 800454c:	f383 8810 	msr	PRIMASK, r3
}
 8004550:	46c0      	nop			; (mov r8, r8)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	681a      	ldr	r2, [r3, #0]
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4951      	ldr	r1, [pc, #324]	; (80046a4 <HAL_UART_IRQHandler+0x5c0>)
 800455e:	400a      	ands	r2, r1
 8004560:	601a      	str	r2, [r3, #0]
 8004562:	193b      	adds	r3, r7, r4
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004568:	697b      	ldr	r3, [r7, #20]
 800456a:	f383 8810 	msr	PRIMASK, r3
}
 800456e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004570:	f3ef 8310 	mrs	r3, PRIMASK
 8004574:	61bb      	str	r3, [r7, #24]
  return(result);
 8004576:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004578:	2484      	movs	r4, #132	; 0x84
 800457a:	193a      	adds	r2, r7, r4
 800457c:	6013      	str	r3, [r2, #0]
 800457e:	2301      	movs	r3, #1
 8004580:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004582:	69fb      	ldr	r3, [r7, #28]
 8004584:	f383 8810 	msr	PRIMASK, r3
}
 8004588:	46c0      	nop			; (mov r8, r8)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	689a      	ldr	r2, [r3, #8]
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	2101      	movs	r1, #1
 8004596:	438a      	bics	r2, r1
 8004598:	609a      	str	r2, [r3, #8]
 800459a:	193b      	adds	r3, r7, r4
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045a0:	6a3b      	ldr	r3, [r7, #32]
 80045a2:	f383 8810 	msr	PRIMASK, r3
}
 80045a6:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2280      	movs	r2, #128	; 0x80
 80045ac:	2120      	movs	r1, #32
 80045ae:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2200      	movs	r2, #0
 80045b4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2200      	movs	r2, #0
 80045ba:	669a      	str	r2, [r3, #104]	; 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80045bc:	f3ef 8310 	mrs	r3, PRIMASK
 80045c0:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80045c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045c4:	2480      	movs	r4, #128	; 0x80
 80045c6:	193a      	adds	r2, r7, r4
 80045c8:	6013      	str	r3, [r2, #0]
 80045ca:	2301      	movs	r3, #1
 80045cc:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045d0:	f383 8810 	msr	PRIMASK, r3
}
 80045d4:	46c0      	nop			; (mov r8, r8)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	681a      	ldr	r2, [r3, #0]
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	2110      	movs	r1, #16
 80045e2:	438a      	bics	r2, r1
 80045e4:	601a      	str	r2, [r3, #0]
 80045e6:	193b      	adds	r3, r7, r4
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045ee:	f383 8810 	msr	PRIMASK, r3
}
 80045f2:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2202      	movs	r2, #2
 80045f8:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80045fa:	183b      	adds	r3, r7, r0
 80045fc:	881a      	ldrh	r2, [r3, #0]
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	0011      	movs	r1, r2
 8004602:	0018      	movs	r0, r3
 8004604:	f000 f860 	bl	80046c8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004608:	e044      	b.n	8004694 <HAL_UART_IRQHandler+0x5b0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800460a:	23a4      	movs	r3, #164	; 0xa4
 800460c:	18fb      	adds	r3, r7, r3
 800460e:	681a      	ldr	r2, [r3, #0]
 8004610:	2380      	movs	r3, #128	; 0x80
 8004612:	035b      	lsls	r3, r3, #13
 8004614:	4013      	ands	r3, r2
 8004616:	d010      	beq.n	800463a <HAL_UART_IRQHandler+0x556>
 8004618:	239c      	movs	r3, #156	; 0x9c
 800461a:	18fb      	adds	r3, r7, r3
 800461c:	681a      	ldr	r2, [r3, #0]
 800461e:	2380      	movs	r3, #128	; 0x80
 8004620:	03db      	lsls	r3, r3, #15
 8004622:	4013      	ands	r3, r2
 8004624:	d009      	beq.n	800463a <HAL_UART_IRQHandler+0x556>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	2280      	movs	r2, #128	; 0x80
 800462c:	0352      	lsls	r2, r2, #13
 800462e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	0018      	movs	r0, r3
 8004634:	f000 ffec 	bl	8005610 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004638:	e02f      	b.n	800469a <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800463a:	23a4      	movs	r3, #164	; 0xa4
 800463c:	18fb      	adds	r3, r7, r3
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	2280      	movs	r2, #128	; 0x80
 8004642:	4013      	ands	r3, r2
 8004644:	d00f      	beq.n	8004666 <HAL_UART_IRQHandler+0x582>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004646:	23a0      	movs	r3, #160	; 0xa0
 8004648:	18fb      	adds	r3, r7, r3
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	2280      	movs	r2, #128	; 0x80
 800464e:	4013      	ands	r3, r2
 8004650:	d009      	beq.n	8004666 <HAL_UART_IRQHandler+0x582>
  {
    if (huart->TxISR != NULL)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004656:	2b00      	cmp	r3, #0
 8004658:	d01e      	beq.n	8004698 <HAL_UART_IRQHandler+0x5b4>
    {
      huart->TxISR(huart);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800465e:	687a      	ldr	r2, [r7, #4]
 8004660:	0010      	movs	r0, r2
 8004662:	4798      	blx	r3
    }
    return;
 8004664:	e018      	b.n	8004698 <HAL_UART_IRQHandler+0x5b4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004666:	23a4      	movs	r3, #164	; 0xa4
 8004668:	18fb      	adds	r3, r7, r3
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	2240      	movs	r2, #64	; 0x40
 800466e:	4013      	ands	r3, r2
 8004670:	d013      	beq.n	800469a <HAL_UART_IRQHandler+0x5b6>
 8004672:	23a0      	movs	r3, #160	; 0xa0
 8004674:	18fb      	adds	r3, r7, r3
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	2240      	movs	r2, #64	; 0x40
 800467a:	4013      	ands	r3, r2
 800467c:	d00d      	beq.n	800469a <HAL_UART_IRQHandler+0x5b6>
  {
    UART_EndTransmit_IT(huart);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	0018      	movs	r0, r3
 8004682:	f000 fdd6 	bl	8005232 <UART_EndTransmit_IT>
    return;
 8004686:	e008      	b.n	800469a <HAL_UART_IRQHandler+0x5b6>
      return;
 8004688:	46c0      	nop			; (mov r8, r8)
 800468a:	e006      	b.n	800469a <HAL_UART_IRQHandler+0x5b6>
    return;
 800468c:	46c0      	nop			; (mov r8, r8)
 800468e:	e004      	b.n	800469a <HAL_UART_IRQHandler+0x5b6>
      return;
 8004690:	46c0      	nop			; (mov r8, r8)
 8004692:	e002      	b.n	800469a <HAL_UART_IRQHandler+0x5b6>
      return;
 8004694:	46c0      	nop			; (mov r8, r8)
 8004696:	e000      	b.n	800469a <HAL_UART_IRQHandler+0x5b6>
    return;
 8004698:	46c0      	nop			; (mov r8, r8)
  }

}
 800469a:	46bd      	mov	sp, r7
 800469c:	b02b      	add	sp, #172	; 0xac
 800469e:	bd90      	pop	{r4, r7, pc}
 80046a0:	fffffeff 	.word	0xfffffeff
 80046a4:	fffffedf 	.word	0xfffffedf

080046a8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b082      	sub	sp, #8
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80046b0:	46c0      	nop			; (mov r8, r8)
 80046b2:	46bd      	mov	sp, r7
 80046b4:	b002      	add	sp, #8
 80046b6:	bd80      	pop	{r7, pc}

080046b8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b082      	sub	sp, #8
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80046c0:	46c0      	nop			; (mov r8, r8)
 80046c2:	46bd      	mov	sp, r7
 80046c4:	b002      	add	sp, #8
 80046c6:	bd80      	pop	{r7, pc}

080046c8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b082      	sub	sp, #8
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
 80046d0:	000a      	movs	r2, r1
 80046d2:	1cbb      	adds	r3, r7, #2
 80046d4:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80046d6:	46c0      	nop			; (mov r8, r8)
 80046d8:	46bd      	mov	sp, r7
 80046da:	b002      	add	sp, #8
 80046dc:	bd80      	pop	{r7, pc}
	...

080046e0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80046e0:	b5b0      	push	{r4, r5, r7, lr}
 80046e2:	b08e      	sub	sp, #56	; 0x38
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80046e8:	231a      	movs	r3, #26
 80046ea:	2218      	movs	r2, #24
 80046ec:	189b      	adds	r3, r3, r2
 80046ee:	19db      	adds	r3, r3, r7
 80046f0:	2200      	movs	r2, #0
 80046f2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80046f4:	69fb      	ldr	r3, [r7, #28]
 80046f6:	689a      	ldr	r2, [r3, #8]
 80046f8:	69fb      	ldr	r3, [r7, #28]
 80046fa:	691b      	ldr	r3, [r3, #16]
 80046fc:	431a      	orrs	r2, r3
 80046fe:	69fb      	ldr	r3, [r7, #28]
 8004700:	695b      	ldr	r3, [r3, #20]
 8004702:	431a      	orrs	r2, r3
 8004704:	69fb      	ldr	r3, [r7, #28]
 8004706:	69db      	ldr	r3, [r3, #28]
 8004708:	4313      	orrs	r3, r2
 800470a:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800470c:	69fb      	ldr	r3, [r7, #28]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4ac3      	ldr	r2, [pc, #780]	; (8004a20 <UART_SetConfig+0x340>)
 8004714:	4013      	ands	r3, r2
 8004716:	0019      	movs	r1, r3
 8004718:	69fb      	ldr	r3, [r7, #28]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800471e:	430a      	orrs	r2, r1
 8004720:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004722:	69fb      	ldr	r3, [r7, #28]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	685b      	ldr	r3, [r3, #4]
 8004728:	4abe      	ldr	r2, [pc, #760]	; (8004a24 <UART_SetConfig+0x344>)
 800472a:	4013      	ands	r3, r2
 800472c:	0019      	movs	r1, r3
 800472e:	69fb      	ldr	r3, [r7, #28]
 8004730:	68da      	ldr	r2, [r3, #12]
 8004732:	69fb      	ldr	r3, [r7, #28]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	430a      	orrs	r2, r1
 8004738:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800473a:	69fb      	ldr	r3, [r7, #28]
 800473c:	699b      	ldr	r3, [r3, #24]
 800473e:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004740:	69fb      	ldr	r3, [r7, #28]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	4ab8      	ldr	r2, [pc, #736]	; (8004a28 <UART_SetConfig+0x348>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d004      	beq.n	8004754 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800474a:	69fb      	ldr	r3, [r7, #28]
 800474c:	6a1b      	ldr	r3, [r3, #32]
 800474e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004750:	4313      	orrs	r3, r2
 8004752:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004754:	69fb      	ldr	r3, [r7, #28]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	689b      	ldr	r3, [r3, #8]
 800475a:	4ab4      	ldr	r2, [pc, #720]	; (8004a2c <UART_SetConfig+0x34c>)
 800475c:	4013      	ands	r3, r2
 800475e:	0019      	movs	r1, r3
 8004760:	69fb      	ldr	r3, [r7, #28]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004766:	430a      	orrs	r2, r1
 8004768:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800476a:	69fb      	ldr	r3, [r7, #28]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4ab0      	ldr	r2, [pc, #704]	; (8004a30 <UART_SetConfig+0x350>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d131      	bne.n	80047d8 <UART_SetConfig+0xf8>
 8004774:	4baf      	ldr	r3, [pc, #700]	; (8004a34 <UART_SetConfig+0x354>)
 8004776:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004778:	2203      	movs	r2, #3
 800477a:	4013      	ands	r3, r2
 800477c:	2b03      	cmp	r3, #3
 800477e:	d01d      	beq.n	80047bc <UART_SetConfig+0xdc>
 8004780:	d823      	bhi.n	80047ca <UART_SetConfig+0xea>
 8004782:	2b02      	cmp	r3, #2
 8004784:	d00c      	beq.n	80047a0 <UART_SetConfig+0xc0>
 8004786:	d820      	bhi.n	80047ca <UART_SetConfig+0xea>
 8004788:	2b00      	cmp	r3, #0
 800478a:	d002      	beq.n	8004792 <UART_SetConfig+0xb2>
 800478c:	2b01      	cmp	r3, #1
 800478e:	d00e      	beq.n	80047ae <UART_SetConfig+0xce>
 8004790:	e01b      	b.n	80047ca <UART_SetConfig+0xea>
 8004792:	231b      	movs	r3, #27
 8004794:	2218      	movs	r2, #24
 8004796:	189b      	adds	r3, r3, r2
 8004798:	19db      	adds	r3, r3, r7
 800479a:	2201      	movs	r2, #1
 800479c:	701a      	strb	r2, [r3, #0]
 800479e:	e0b4      	b.n	800490a <UART_SetConfig+0x22a>
 80047a0:	231b      	movs	r3, #27
 80047a2:	2218      	movs	r2, #24
 80047a4:	189b      	adds	r3, r3, r2
 80047a6:	19db      	adds	r3, r3, r7
 80047a8:	2202      	movs	r2, #2
 80047aa:	701a      	strb	r2, [r3, #0]
 80047ac:	e0ad      	b.n	800490a <UART_SetConfig+0x22a>
 80047ae:	231b      	movs	r3, #27
 80047b0:	2218      	movs	r2, #24
 80047b2:	189b      	adds	r3, r3, r2
 80047b4:	19db      	adds	r3, r3, r7
 80047b6:	2204      	movs	r2, #4
 80047b8:	701a      	strb	r2, [r3, #0]
 80047ba:	e0a6      	b.n	800490a <UART_SetConfig+0x22a>
 80047bc:	231b      	movs	r3, #27
 80047be:	2218      	movs	r2, #24
 80047c0:	189b      	adds	r3, r3, r2
 80047c2:	19db      	adds	r3, r3, r7
 80047c4:	2208      	movs	r2, #8
 80047c6:	701a      	strb	r2, [r3, #0]
 80047c8:	e09f      	b.n	800490a <UART_SetConfig+0x22a>
 80047ca:	231b      	movs	r3, #27
 80047cc:	2218      	movs	r2, #24
 80047ce:	189b      	adds	r3, r3, r2
 80047d0:	19db      	adds	r3, r3, r7
 80047d2:	2210      	movs	r2, #16
 80047d4:	701a      	strb	r2, [r3, #0]
 80047d6:	e098      	b.n	800490a <UART_SetConfig+0x22a>
 80047d8:	69fb      	ldr	r3, [r7, #28]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	4a96      	ldr	r2, [pc, #600]	; (8004a38 <UART_SetConfig+0x358>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d131      	bne.n	8004846 <UART_SetConfig+0x166>
 80047e2:	4b94      	ldr	r3, [pc, #592]	; (8004a34 <UART_SetConfig+0x354>)
 80047e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047e6:	220c      	movs	r2, #12
 80047e8:	4013      	ands	r3, r2
 80047ea:	2b0c      	cmp	r3, #12
 80047ec:	d01d      	beq.n	800482a <UART_SetConfig+0x14a>
 80047ee:	d823      	bhi.n	8004838 <UART_SetConfig+0x158>
 80047f0:	2b08      	cmp	r3, #8
 80047f2:	d00c      	beq.n	800480e <UART_SetConfig+0x12e>
 80047f4:	d820      	bhi.n	8004838 <UART_SetConfig+0x158>
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d002      	beq.n	8004800 <UART_SetConfig+0x120>
 80047fa:	2b04      	cmp	r3, #4
 80047fc:	d00e      	beq.n	800481c <UART_SetConfig+0x13c>
 80047fe:	e01b      	b.n	8004838 <UART_SetConfig+0x158>
 8004800:	231b      	movs	r3, #27
 8004802:	2218      	movs	r2, #24
 8004804:	189b      	adds	r3, r3, r2
 8004806:	19db      	adds	r3, r3, r7
 8004808:	2200      	movs	r2, #0
 800480a:	701a      	strb	r2, [r3, #0]
 800480c:	e07d      	b.n	800490a <UART_SetConfig+0x22a>
 800480e:	231b      	movs	r3, #27
 8004810:	2218      	movs	r2, #24
 8004812:	189b      	adds	r3, r3, r2
 8004814:	19db      	adds	r3, r3, r7
 8004816:	2202      	movs	r2, #2
 8004818:	701a      	strb	r2, [r3, #0]
 800481a:	e076      	b.n	800490a <UART_SetConfig+0x22a>
 800481c:	231b      	movs	r3, #27
 800481e:	2218      	movs	r2, #24
 8004820:	189b      	adds	r3, r3, r2
 8004822:	19db      	adds	r3, r3, r7
 8004824:	2204      	movs	r2, #4
 8004826:	701a      	strb	r2, [r3, #0]
 8004828:	e06f      	b.n	800490a <UART_SetConfig+0x22a>
 800482a:	231b      	movs	r3, #27
 800482c:	2218      	movs	r2, #24
 800482e:	189b      	adds	r3, r3, r2
 8004830:	19db      	adds	r3, r3, r7
 8004832:	2208      	movs	r2, #8
 8004834:	701a      	strb	r2, [r3, #0]
 8004836:	e068      	b.n	800490a <UART_SetConfig+0x22a>
 8004838:	231b      	movs	r3, #27
 800483a:	2218      	movs	r2, #24
 800483c:	189b      	adds	r3, r3, r2
 800483e:	19db      	adds	r3, r3, r7
 8004840:	2210      	movs	r2, #16
 8004842:	701a      	strb	r2, [r3, #0]
 8004844:	e061      	b.n	800490a <UART_SetConfig+0x22a>
 8004846:	69fb      	ldr	r3, [r7, #28]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	4a7c      	ldr	r2, [pc, #496]	; (8004a3c <UART_SetConfig+0x35c>)
 800484c:	4293      	cmp	r3, r2
 800484e:	d106      	bne.n	800485e <UART_SetConfig+0x17e>
 8004850:	231b      	movs	r3, #27
 8004852:	2218      	movs	r2, #24
 8004854:	189b      	adds	r3, r3, r2
 8004856:	19db      	adds	r3, r3, r7
 8004858:	2200      	movs	r2, #0
 800485a:	701a      	strb	r2, [r3, #0]
 800485c:	e055      	b.n	800490a <UART_SetConfig+0x22a>
 800485e:	69fb      	ldr	r3, [r7, #28]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	4a77      	ldr	r2, [pc, #476]	; (8004a40 <UART_SetConfig+0x360>)
 8004864:	4293      	cmp	r3, r2
 8004866:	d106      	bne.n	8004876 <UART_SetConfig+0x196>
 8004868:	231b      	movs	r3, #27
 800486a:	2218      	movs	r2, #24
 800486c:	189b      	adds	r3, r3, r2
 800486e:	19db      	adds	r3, r3, r7
 8004870:	2200      	movs	r2, #0
 8004872:	701a      	strb	r2, [r3, #0]
 8004874:	e049      	b.n	800490a <UART_SetConfig+0x22a>
 8004876:	69fb      	ldr	r3, [r7, #28]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	4a6b      	ldr	r2, [pc, #428]	; (8004a28 <UART_SetConfig+0x348>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d13e      	bne.n	80048fe <UART_SetConfig+0x21e>
 8004880:	4b6c      	ldr	r3, [pc, #432]	; (8004a34 <UART_SetConfig+0x354>)
 8004882:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004884:	23c0      	movs	r3, #192	; 0xc0
 8004886:	011b      	lsls	r3, r3, #4
 8004888:	4013      	ands	r3, r2
 800488a:	22c0      	movs	r2, #192	; 0xc0
 800488c:	0112      	lsls	r2, r2, #4
 800488e:	4293      	cmp	r3, r2
 8004890:	d027      	beq.n	80048e2 <UART_SetConfig+0x202>
 8004892:	22c0      	movs	r2, #192	; 0xc0
 8004894:	0112      	lsls	r2, r2, #4
 8004896:	4293      	cmp	r3, r2
 8004898:	d82a      	bhi.n	80048f0 <UART_SetConfig+0x210>
 800489a:	2280      	movs	r2, #128	; 0x80
 800489c:	0112      	lsls	r2, r2, #4
 800489e:	4293      	cmp	r3, r2
 80048a0:	d011      	beq.n	80048c6 <UART_SetConfig+0x1e6>
 80048a2:	2280      	movs	r2, #128	; 0x80
 80048a4:	0112      	lsls	r2, r2, #4
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d822      	bhi.n	80048f0 <UART_SetConfig+0x210>
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d004      	beq.n	80048b8 <UART_SetConfig+0x1d8>
 80048ae:	2280      	movs	r2, #128	; 0x80
 80048b0:	00d2      	lsls	r2, r2, #3
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d00e      	beq.n	80048d4 <UART_SetConfig+0x1f4>
 80048b6:	e01b      	b.n	80048f0 <UART_SetConfig+0x210>
 80048b8:	231b      	movs	r3, #27
 80048ba:	2218      	movs	r2, #24
 80048bc:	189b      	adds	r3, r3, r2
 80048be:	19db      	adds	r3, r3, r7
 80048c0:	2200      	movs	r2, #0
 80048c2:	701a      	strb	r2, [r3, #0]
 80048c4:	e021      	b.n	800490a <UART_SetConfig+0x22a>
 80048c6:	231b      	movs	r3, #27
 80048c8:	2218      	movs	r2, #24
 80048ca:	189b      	adds	r3, r3, r2
 80048cc:	19db      	adds	r3, r3, r7
 80048ce:	2202      	movs	r2, #2
 80048d0:	701a      	strb	r2, [r3, #0]
 80048d2:	e01a      	b.n	800490a <UART_SetConfig+0x22a>
 80048d4:	231b      	movs	r3, #27
 80048d6:	2218      	movs	r2, #24
 80048d8:	189b      	adds	r3, r3, r2
 80048da:	19db      	adds	r3, r3, r7
 80048dc:	2204      	movs	r2, #4
 80048de:	701a      	strb	r2, [r3, #0]
 80048e0:	e013      	b.n	800490a <UART_SetConfig+0x22a>
 80048e2:	231b      	movs	r3, #27
 80048e4:	2218      	movs	r2, #24
 80048e6:	189b      	adds	r3, r3, r2
 80048e8:	19db      	adds	r3, r3, r7
 80048ea:	2208      	movs	r2, #8
 80048ec:	701a      	strb	r2, [r3, #0]
 80048ee:	e00c      	b.n	800490a <UART_SetConfig+0x22a>
 80048f0:	231b      	movs	r3, #27
 80048f2:	2218      	movs	r2, #24
 80048f4:	189b      	adds	r3, r3, r2
 80048f6:	19db      	adds	r3, r3, r7
 80048f8:	2210      	movs	r2, #16
 80048fa:	701a      	strb	r2, [r3, #0]
 80048fc:	e005      	b.n	800490a <UART_SetConfig+0x22a>
 80048fe:	231b      	movs	r3, #27
 8004900:	2218      	movs	r2, #24
 8004902:	189b      	adds	r3, r3, r2
 8004904:	19db      	adds	r3, r3, r7
 8004906:	2210      	movs	r2, #16
 8004908:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800490a:	69fb      	ldr	r3, [r7, #28]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	4a46      	ldr	r2, [pc, #280]	; (8004a28 <UART_SetConfig+0x348>)
 8004910:	4293      	cmp	r3, r2
 8004912:	d000      	beq.n	8004916 <UART_SetConfig+0x236>
 8004914:	e09a      	b.n	8004a4c <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004916:	231b      	movs	r3, #27
 8004918:	2218      	movs	r2, #24
 800491a:	189b      	adds	r3, r3, r2
 800491c:	19db      	adds	r3, r3, r7
 800491e:	781b      	ldrb	r3, [r3, #0]
 8004920:	2b08      	cmp	r3, #8
 8004922:	d01d      	beq.n	8004960 <UART_SetConfig+0x280>
 8004924:	dc20      	bgt.n	8004968 <UART_SetConfig+0x288>
 8004926:	2b04      	cmp	r3, #4
 8004928:	d015      	beq.n	8004956 <UART_SetConfig+0x276>
 800492a:	dc1d      	bgt.n	8004968 <UART_SetConfig+0x288>
 800492c:	2b00      	cmp	r3, #0
 800492e:	d002      	beq.n	8004936 <UART_SetConfig+0x256>
 8004930:	2b02      	cmp	r3, #2
 8004932:	d005      	beq.n	8004940 <UART_SetConfig+0x260>
 8004934:	e018      	b.n	8004968 <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004936:	f7ff f8b9 	bl	8003aac <HAL_RCC_GetPCLK1Freq>
 800493a:	0003      	movs	r3, r0
 800493c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800493e:	e01c      	b.n	800497a <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004940:	4b3c      	ldr	r3, [pc, #240]	; (8004a34 <UART_SetConfig+0x354>)
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	2210      	movs	r2, #16
 8004946:	4013      	ands	r3, r2
 8004948:	d002      	beq.n	8004950 <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800494a:	4b3e      	ldr	r3, [pc, #248]	; (8004a44 <UART_SetConfig+0x364>)
 800494c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800494e:	e014      	b.n	800497a <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 8004950:	4b3d      	ldr	r3, [pc, #244]	; (8004a48 <UART_SetConfig+0x368>)
 8004952:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004954:	e011      	b.n	800497a <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004956:	f7fe fff9 	bl	800394c <HAL_RCC_GetSysClockFreq>
 800495a:	0003      	movs	r3, r0
 800495c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800495e:	e00c      	b.n	800497a <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004960:	2380      	movs	r3, #128	; 0x80
 8004962:	021b      	lsls	r3, r3, #8
 8004964:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004966:	e008      	b.n	800497a <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 8004968:	2300      	movs	r3, #0
 800496a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800496c:	231a      	movs	r3, #26
 800496e:	2218      	movs	r2, #24
 8004970:	189b      	adds	r3, r3, r2
 8004972:	19db      	adds	r3, r3, r7
 8004974:	2201      	movs	r2, #1
 8004976:	701a      	strb	r2, [r3, #0]
        break;
 8004978:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800497a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800497c:	2b00      	cmp	r3, #0
 800497e:	d100      	bne.n	8004982 <UART_SetConfig+0x2a2>
 8004980:	e133      	b.n	8004bea <UART_SetConfig+0x50a>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004982:	69fb      	ldr	r3, [r7, #28]
 8004984:	685a      	ldr	r2, [r3, #4]
 8004986:	0013      	movs	r3, r2
 8004988:	005b      	lsls	r3, r3, #1
 800498a:	189b      	adds	r3, r3, r2
 800498c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800498e:	429a      	cmp	r2, r3
 8004990:	d305      	bcc.n	800499e <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004992:	69fb      	ldr	r3, [r7, #28]
 8004994:	685b      	ldr	r3, [r3, #4]
 8004996:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004998:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800499a:	429a      	cmp	r2, r3
 800499c:	d906      	bls.n	80049ac <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 800499e:	231a      	movs	r3, #26
 80049a0:	2218      	movs	r2, #24
 80049a2:	189b      	adds	r3, r3, r2
 80049a4:	19db      	adds	r3, r3, r7
 80049a6:	2201      	movs	r2, #1
 80049a8:	701a      	strb	r2, [r3, #0]
 80049aa:	e11e      	b.n	8004bea <UART_SetConfig+0x50a>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80049ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049ae:	613b      	str	r3, [r7, #16]
 80049b0:	2300      	movs	r3, #0
 80049b2:	617b      	str	r3, [r7, #20]
 80049b4:	6939      	ldr	r1, [r7, #16]
 80049b6:	697a      	ldr	r2, [r7, #20]
 80049b8:	000b      	movs	r3, r1
 80049ba:	0e1b      	lsrs	r3, r3, #24
 80049bc:	0010      	movs	r0, r2
 80049be:	0205      	lsls	r5, r0, #8
 80049c0:	431d      	orrs	r5, r3
 80049c2:	000b      	movs	r3, r1
 80049c4:	021c      	lsls	r4, r3, #8
 80049c6:	69fb      	ldr	r3, [r7, #28]
 80049c8:	685b      	ldr	r3, [r3, #4]
 80049ca:	085b      	lsrs	r3, r3, #1
 80049cc:	60bb      	str	r3, [r7, #8]
 80049ce:	2300      	movs	r3, #0
 80049d0:	60fb      	str	r3, [r7, #12]
 80049d2:	68b8      	ldr	r0, [r7, #8]
 80049d4:	68f9      	ldr	r1, [r7, #12]
 80049d6:	1900      	adds	r0, r0, r4
 80049d8:	4169      	adcs	r1, r5
 80049da:	69fb      	ldr	r3, [r7, #28]
 80049dc:	685b      	ldr	r3, [r3, #4]
 80049de:	603b      	str	r3, [r7, #0]
 80049e0:	2300      	movs	r3, #0
 80049e2:	607b      	str	r3, [r7, #4]
 80049e4:	683a      	ldr	r2, [r7, #0]
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	f7fb fc36 	bl	8000258 <__aeabi_uldivmod>
 80049ec:	0002      	movs	r2, r0
 80049ee:	000b      	movs	r3, r1
 80049f0:	0013      	movs	r3, r2
 80049f2:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80049f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80049f6:	23c0      	movs	r3, #192	; 0xc0
 80049f8:	009b      	lsls	r3, r3, #2
 80049fa:	429a      	cmp	r2, r3
 80049fc:	d309      	bcc.n	8004a12 <UART_SetConfig+0x332>
 80049fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004a00:	2380      	movs	r3, #128	; 0x80
 8004a02:	035b      	lsls	r3, r3, #13
 8004a04:	429a      	cmp	r2, r3
 8004a06:	d204      	bcs.n	8004a12 <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 8004a08:	69fb      	ldr	r3, [r7, #28]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004a0e:	60da      	str	r2, [r3, #12]
 8004a10:	e0eb      	b.n	8004bea <UART_SetConfig+0x50a>
        }
        else
        {
          ret = HAL_ERROR;
 8004a12:	231a      	movs	r3, #26
 8004a14:	2218      	movs	r2, #24
 8004a16:	189b      	adds	r3, r3, r2
 8004a18:	19db      	adds	r3, r3, r7
 8004a1a:	2201      	movs	r2, #1
 8004a1c:	701a      	strb	r2, [r3, #0]
 8004a1e:	e0e4      	b.n	8004bea <UART_SetConfig+0x50a>
 8004a20:	efff69f3 	.word	0xefff69f3
 8004a24:	ffffcfff 	.word	0xffffcfff
 8004a28:	40004800 	.word	0x40004800
 8004a2c:	fffff4ff 	.word	0xfffff4ff
 8004a30:	40013800 	.word	0x40013800
 8004a34:	40021000 	.word	0x40021000
 8004a38:	40004400 	.word	0x40004400
 8004a3c:	40004c00 	.word	0x40004c00
 8004a40:	40005000 	.word	0x40005000
 8004a44:	003d0900 	.word	0x003d0900
 8004a48:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004a4c:	69fb      	ldr	r3, [r7, #28]
 8004a4e:	69da      	ldr	r2, [r3, #28]
 8004a50:	2380      	movs	r3, #128	; 0x80
 8004a52:	021b      	lsls	r3, r3, #8
 8004a54:	429a      	cmp	r2, r3
 8004a56:	d000      	beq.n	8004a5a <UART_SetConfig+0x37a>
 8004a58:	e070      	b.n	8004b3c <UART_SetConfig+0x45c>
  {
    switch (clocksource)
 8004a5a:	231b      	movs	r3, #27
 8004a5c:	2218      	movs	r2, #24
 8004a5e:	189b      	adds	r3, r3, r2
 8004a60:	19db      	adds	r3, r3, r7
 8004a62:	781b      	ldrb	r3, [r3, #0]
 8004a64:	2b08      	cmp	r3, #8
 8004a66:	d822      	bhi.n	8004aae <UART_SetConfig+0x3ce>
 8004a68:	009a      	lsls	r2, r3, #2
 8004a6a:	4b67      	ldr	r3, [pc, #412]	; (8004c08 <UART_SetConfig+0x528>)
 8004a6c:	18d3      	adds	r3, r2, r3
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a72:	f7ff f81b 	bl	8003aac <HAL_RCC_GetPCLK1Freq>
 8004a76:	0003      	movs	r3, r0
 8004a78:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004a7a:	e021      	b.n	8004ac0 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004a7c:	f7ff f82c 	bl	8003ad8 <HAL_RCC_GetPCLK2Freq>
 8004a80:	0003      	movs	r3, r0
 8004a82:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004a84:	e01c      	b.n	8004ac0 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004a86:	4b61      	ldr	r3, [pc, #388]	; (8004c0c <UART_SetConfig+0x52c>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	2210      	movs	r2, #16
 8004a8c:	4013      	ands	r3, r2
 8004a8e:	d002      	beq.n	8004a96 <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8004a90:	4b5f      	ldr	r3, [pc, #380]	; (8004c10 <UART_SetConfig+0x530>)
 8004a92:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004a94:	e014      	b.n	8004ac0 <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 8004a96:	4b5f      	ldr	r3, [pc, #380]	; (8004c14 <UART_SetConfig+0x534>)
 8004a98:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004a9a:	e011      	b.n	8004ac0 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a9c:	f7fe ff56 	bl	800394c <HAL_RCC_GetSysClockFreq>
 8004aa0:	0003      	movs	r3, r0
 8004aa2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004aa4:	e00c      	b.n	8004ac0 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004aa6:	2380      	movs	r3, #128	; 0x80
 8004aa8:	021b      	lsls	r3, r3, #8
 8004aaa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004aac:	e008      	b.n	8004ac0 <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 8004aae:	2300      	movs	r3, #0
 8004ab0:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8004ab2:	231a      	movs	r3, #26
 8004ab4:	2218      	movs	r2, #24
 8004ab6:	189b      	adds	r3, r3, r2
 8004ab8:	19db      	adds	r3, r3, r7
 8004aba:	2201      	movs	r2, #1
 8004abc:	701a      	strb	r2, [r3, #0]
        break;
 8004abe:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004ac0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d100      	bne.n	8004ac8 <UART_SetConfig+0x3e8>
 8004ac6:	e090      	b.n	8004bea <UART_SetConfig+0x50a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004ac8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004aca:	005a      	lsls	r2, r3, #1
 8004acc:	69fb      	ldr	r3, [r7, #28]
 8004ace:	685b      	ldr	r3, [r3, #4]
 8004ad0:	085b      	lsrs	r3, r3, #1
 8004ad2:	18d2      	adds	r2, r2, r3
 8004ad4:	69fb      	ldr	r3, [r7, #28]
 8004ad6:	685b      	ldr	r3, [r3, #4]
 8004ad8:	0019      	movs	r1, r3
 8004ada:	0010      	movs	r0, r2
 8004adc:	f7fb fb30 	bl	8000140 <__udivsi3>
 8004ae0:	0003      	movs	r3, r0
 8004ae2:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ae4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ae6:	2b0f      	cmp	r3, #15
 8004ae8:	d921      	bls.n	8004b2e <UART_SetConfig+0x44e>
 8004aea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004aec:	2380      	movs	r3, #128	; 0x80
 8004aee:	025b      	lsls	r3, r3, #9
 8004af0:	429a      	cmp	r2, r3
 8004af2:	d21c      	bcs.n	8004b2e <UART_SetConfig+0x44e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004af4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004af6:	b29a      	uxth	r2, r3
 8004af8:	200e      	movs	r0, #14
 8004afa:	2418      	movs	r4, #24
 8004afc:	1903      	adds	r3, r0, r4
 8004afe:	19db      	adds	r3, r3, r7
 8004b00:	210f      	movs	r1, #15
 8004b02:	438a      	bics	r2, r1
 8004b04:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004b06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b08:	085b      	lsrs	r3, r3, #1
 8004b0a:	b29b      	uxth	r3, r3
 8004b0c:	2207      	movs	r2, #7
 8004b0e:	4013      	ands	r3, r2
 8004b10:	b299      	uxth	r1, r3
 8004b12:	1903      	adds	r3, r0, r4
 8004b14:	19db      	adds	r3, r3, r7
 8004b16:	1902      	adds	r2, r0, r4
 8004b18:	19d2      	adds	r2, r2, r7
 8004b1a:	8812      	ldrh	r2, [r2, #0]
 8004b1c:	430a      	orrs	r2, r1
 8004b1e:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004b20:	69fb      	ldr	r3, [r7, #28]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	1902      	adds	r2, r0, r4
 8004b26:	19d2      	adds	r2, r2, r7
 8004b28:	8812      	ldrh	r2, [r2, #0]
 8004b2a:	60da      	str	r2, [r3, #12]
 8004b2c:	e05d      	b.n	8004bea <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 8004b2e:	231a      	movs	r3, #26
 8004b30:	2218      	movs	r2, #24
 8004b32:	189b      	adds	r3, r3, r2
 8004b34:	19db      	adds	r3, r3, r7
 8004b36:	2201      	movs	r2, #1
 8004b38:	701a      	strb	r2, [r3, #0]
 8004b3a:	e056      	b.n	8004bea <UART_SetConfig+0x50a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004b3c:	231b      	movs	r3, #27
 8004b3e:	2218      	movs	r2, #24
 8004b40:	189b      	adds	r3, r3, r2
 8004b42:	19db      	adds	r3, r3, r7
 8004b44:	781b      	ldrb	r3, [r3, #0]
 8004b46:	2b08      	cmp	r3, #8
 8004b48:	d822      	bhi.n	8004b90 <UART_SetConfig+0x4b0>
 8004b4a:	009a      	lsls	r2, r3, #2
 8004b4c:	4b32      	ldr	r3, [pc, #200]	; (8004c18 <UART_SetConfig+0x538>)
 8004b4e:	18d3      	adds	r3, r2, r3
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b54:	f7fe ffaa 	bl	8003aac <HAL_RCC_GetPCLK1Freq>
 8004b58:	0003      	movs	r3, r0
 8004b5a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004b5c:	e021      	b.n	8004ba2 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004b5e:	f7fe ffbb 	bl	8003ad8 <HAL_RCC_GetPCLK2Freq>
 8004b62:	0003      	movs	r3, r0
 8004b64:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004b66:	e01c      	b.n	8004ba2 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004b68:	4b28      	ldr	r3, [pc, #160]	; (8004c0c <UART_SetConfig+0x52c>)
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	2210      	movs	r2, #16
 8004b6e:	4013      	ands	r3, r2
 8004b70:	d002      	beq.n	8004b78 <UART_SetConfig+0x498>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8004b72:	4b27      	ldr	r3, [pc, #156]	; (8004c10 <UART_SetConfig+0x530>)
 8004b74:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004b76:	e014      	b.n	8004ba2 <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 8004b78:	4b26      	ldr	r3, [pc, #152]	; (8004c14 <UART_SetConfig+0x534>)
 8004b7a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004b7c:	e011      	b.n	8004ba2 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b7e:	f7fe fee5 	bl	800394c <HAL_RCC_GetSysClockFreq>
 8004b82:	0003      	movs	r3, r0
 8004b84:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004b86:	e00c      	b.n	8004ba2 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b88:	2380      	movs	r3, #128	; 0x80
 8004b8a:	021b      	lsls	r3, r3, #8
 8004b8c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004b8e:	e008      	b.n	8004ba2 <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 8004b90:	2300      	movs	r3, #0
 8004b92:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8004b94:	231a      	movs	r3, #26
 8004b96:	2218      	movs	r2, #24
 8004b98:	189b      	adds	r3, r3, r2
 8004b9a:	19db      	adds	r3, r3, r7
 8004b9c:	2201      	movs	r2, #1
 8004b9e:	701a      	strb	r2, [r3, #0]
        break;
 8004ba0:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8004ba2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d020      	beq.n	8004bea <UART_SetConfig+0x50a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004ba8:	69fb      	ldr	r3, [r7, #28]
 8004baa:	685b      	ldr	r3, [r3, #4]
 8004bac:	085a      	lsrs	r2, r3, #1
 8004bae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bb0:	18d2      	adds	r2, r2, r3
 8004bb2:	69fb      	ldr	r3, [r7, #28]
 8004bb4:	685b      	ldr	r3, [r3, #4]
 8004bb6:	0019      	movs	r1, r3
 8004bb8:	0010      	movs	r0, r2
 8004bba:	f7fb fac1 	bl	8000140 <__udivsi3>
 8004bbe:	0003      	movs	r3, r0
 8004bc0:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004bc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bc4:	2b0f      	cmp	r3, #15
 8004bc6:	d90a      	bls.n	8004bde <UART_SetConfig+0x4fe>
 8004bc8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004bca:	2380      	movs	r3, #128	; 0x80
 8004bcc:	025b      	lsls	r3, r3, #9
 8004bce:	429a      	cmp	r2, r3
 8004bd0:	d205      	bcs.n	8004bde <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004bd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bd4:	b29a      	uxth	r2, r3
 8004bd6:	69fb      	ldr	r3, [r7, #28]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	60da      	str	r2, [r3, #12]
 8004bdc:	e005      	b.n	8004bea <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 8004bde:	231a      	movs	r3, #26
 8004be0:	2218      	movs	r2, #24
 8004be2:	189b      	adds	r3, r3, r2
 8004be4:	19db      	adds	r3, r3, r7
 8004be6:	2201      	movs	r2, #1
 8004be8:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004bea:	69fb      	ldr	r3, [r7, #28]
 8004bec:	2200      	movs	r2, #0
 8004bee:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004bf0:	69fb      	ldr	r3, [r7, #28]
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004bf6:	231a      	movs	r3, #26
 8004bf8:	2218      	movs	r2, #24
 8004bfa:	189b      	adds	r3, r3, r2
 8004bfc:	19db      	adds	r3, r3, r7
 8004bfe:	781b      	ldrb	r3, [r3, #0]
}
 8004c00:	0018      	movs	r0, r3
 8004c02:	46bd      	mov	sp, r7
 8004c04:	b00e      	add	sp, #56	; 0x38
 8004c06:	bdb0      	pop	{r4, r5, r7, pc}
 8004c08:	08006c3c 	.word	0x08006c3c
 8004c0c:	40021000 	.word	0x40021000
 8004c10:	003d0900 	.word	0x003d0900
 8004c14:	00f42400 	.word	0x00f42400
 8004c18:	08006c60 	.word	0x08006c60

08004c1c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b082      	sub	sp, #8
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c28:	2201      	movs	r2, #1
 8004c2a:	4013      	ands	r3, r2
 8004c2c:	d00b      	beq.n	8004c46 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	685b      	ldr	r3, [r3, #4]
 8004c34:	4a4a      	ldr	r2, [pc, #296]	; (8004d60 <UART_AdvFeatureConfig+0x144>)
 8004c36:	4013      	ands	r3, r2
 8004c38:	0019      	movs	r1, r3
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	430a      	orrs	r2, r1
 8004c44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c4a:	2202      	movs	r2, #2
 8004c4c:	4013      	ands	r3, r2
 8004c4e:	d00b      	beq.n	8004c68 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	685b      	ldr	r3, [r3, #4]
 8004c56:	4a43      	ldr	r2, [pc, #268]	; (8004d64 <UART_AdvFeatureConfig+0x148>)
 8004c58:	4013      	ands	r3, r2
 8004c5a:	0019      	movs	r1, r3
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	430a      	orrs	r2, r1
 8004c66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c6c:	2204      	movs	r2, #4
 8004c6e:	4013      	ands	r3, r2
 8004c70:	d00b      	beq.n	8004c8a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	685b      	ldr	r3, [r3, #4]
 8004c78:	4a3b      	ldr	r2, [pc, #236]	; (8004d68 <UART_AdvFeatureConfig+0x14c>)
 8004c7a:	4013      	ands	r3, r2
 8004c7c:	0019      	movs	r1, r3
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	430a      	orrs	r2, r1
 8004c88:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c8e:	2208      	movs	r2, #8
 8004c90:	4013      	ands	r3, r2
 8004c92:	d00b      	beq.n	8004cac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	685b      	ldr	r3, [r3, #4]
 8004c9a:	4a34      	ldr	r2, [pc, #208]	; (8004d6c <UART_AdvFeatureConfig+0x150>)
 8004c9c:	4013      	ands	r3, r2
 8004c9e:	0019      	movs	r1, r3
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	430a      	orrs	r2, r1
 8004caa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cb0:	2210      	movs	r2, #16
 8004cb2:	4013      	ands	r3, r2
 8004cb4:	d00b      	beq.n	8004cce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	689b      	ldr	r3, [r3, #8]
 8004cbc:	4a2c      	ldr	r2, [pc, #176]	; (8004d70 <UART_AdvFeatureConfig+0x154>)
 8004cbe:	4013      	ands	r3, r2
 8004cc0:	0019      	movs	r1, r3
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	430a      	orrs	r2, r1
 8004ccc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cd2:	2220      	movs	r2, #32
 8004cd4:	4013      	ands	r3, r2
 8004cd6:	d00b      	beq.n	8004cf0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	689b      	ldr	r3, [r3, #8]
 8004cde:	4a25      	ldr	r2, [pc, #148]	; (8004d74 <UART_AdvFeatureConfig+0x158>)
 8004ce0:	4013      	ands	r3, r2
 8004ce2:	0019      	movs	r1, r3
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	430a      	orrs	r2, r1
 8004cee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cf4:	2240      	movs	r2, #64	; 0x40
 8004cf6:	4013      	ands	r3, r2
 8004cf8:	d01d      	beq.n	8004d36 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	685b      	ldr	r3, [r3, #4]
 8004d00:	4a1d      	ldr	r2, [pc, #116]	; (8004d78 <UART_AdvFeatureConfig+0x15c>)
 8004d02:	4013      	ands	r3, r2
 8004d04:	0019      	movs	r1, r3
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	430a      	orrs	r2, r1
 8004d10:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004d16:	2380      	movs	r3, #128	; 0x80
 8004d18:	035b      	lsls	r3, r3, #13
 8004d1a:	429a      	cmp	r2, r3
 8004d1c:	d10b      	bne.n	8004d36 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	685b      	ldr	r3, [r3, #4]
 8004d24:	4a15      	ldr	r2, [pc, #84]	; (8004d7c <UART_AdvFeatureConfig+0x160>)
 8004d26:	4013      	ands	r3, r2
 8004d28:	0019      	movs	r1, r3
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	430a      	orrs	r2, r1
 8004d34:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d3a:	2280      	movs	r2, #128	; 0x80
 8004d3c:	4013      	ands	r3, r2
 8004d3e:	d00b      	beq.n	8004d58 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	685b      	ldr	r3, [r3, #4]
 8004d46:	4a0e      	ldr	r2, [pc, #56]	; (8004d80 <UART_AdvFeatureConfig+0x164>)
 8004d48:	4013      	ands	r3, r2
 8004d4a:	0019      	movs	r1, r3
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	430a      	orrs	r2, r1
 8004d56:	605a      	str	r2, [r3, #4]
  }
}
 8004d58:	46c0      	nop			; (mov r8, r8)
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	b002      	add	sp, #8
 8004d5e:	bd80      	pop	{r7, pc}
 8004d60:	fffdffff 	.word	0xfffdffff
 8004d64:	fffeffff 	.word	0xfffeffff
 8004d68:	fffbffff 	.word	0xfffbffff
 8004d6c:	ffff7fff 	.word	0xffff7fff
 8004d70:	ffffefff 	.word	0xffffefff
 8004d74:	ffffdfff 	.word	0xffffdfff
 8004d78:	ffefffff 	.word	0xffefffff
 8004d7c:	ff9fffff 	.word	0xff9fffff
 8004d80:	fff7ffff 	.word	0xfff7ffff

08004d84 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b092      	sub	sp, #72	; 0x48
 8004d88:	af02      	add	r7, sp, #8
 8004d8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2284      	movs	r2, #132	; 0x84
 8004d90:	2100      	movs	r1, #0
 8004d92:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004d94:	f7fd faee 	bl	8002374 <HAL_GetTick>
 8004d98:	0003      	movs	r3, r0
 8004d9a:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	2208      	movs	r2, #8
 8004da4:	4013      	ands	r3, r2
 8004da6:	2b08      	cmp	r3, #8
 8004da8:	d12c      	bne.n	8004e04 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004daa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004dac:	2280      	movs	r2, #128	; 0x80
 8004dae:	0391      	lsls	r1, r2, #14
 8004db0:	6878      	ldr	r0, [r7, #4]
 8004db2:	4a46      	ldr	r2, [pc, #280]	; (8004ecc <UART_CheckIdleState+0x148>)
 8004db4:	9200      	str	r2, [sp, #0]
 8004db6:	2200      	movs	r2, #0
 8004db8:	f000 f88c 	bl	8004ed4 <UART_WaitOnFlagUntilTimeout>
 8004dbc:	1e03      	subs	r3, r0, #0
 8004dbe:	d021      	beq.n	8004e04 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004dc0:	f3ef 8310 	mrs	r3, PRIMASK
 8004dc4:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004dc8:	63bb      	str	r3, [r7, #56]	; 0x38
 8004dca:	2301      	movs	r3, #1
 8004dcc:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004dce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dd0:	f383 8810 	msr	PRIMASK, r3
}
 8004dd4:	46c0      	nop			; (mov r8, r8)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	681a      	ldr	r2, [r3, #0]
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	2180      	movs	r1, #128	; 0x80
 8004de2:	438a      	bics	r2, r1
 8004de4:	601a      	str	r2, [r3, #0]
 8004de6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004de8:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004dea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dec:	f383 8810 	msr	PRIMASK, r3
}
 8004df0:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	2220      	movs	r2, #32
 8004df6:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2278      	movs	r2, #120	; 0x78
 8004dfc:	2100      	movs	r1, #0
 8004dfe:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004e00:	2303      	movs	r3, #3
 8004e02:	e05f      	b.n	8004ec4 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	2204      	movs	r2, #4
 8004e0c:	4013      	ands	r3, r2
 8004e0e:	2b04      	cmp	r3, #4
 8004e10:	d146      	bne.n	8004ea0 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e14:	2280      	movs	r2, #128	; 0x80
 8004e16:	03d1      	lsls	r1, r2, #15
 8004e18:	6878      	ldr	r0, [r7, #4]
 8004e1a:	4a2c      	ldr	r2, [pc, #176]	; (8004ecc <UART_CheckIdleState+0x148>)
 8004e1c:	9200      	str	r2, [sp, #0]
 8004e1e:	2200      	movs	r2, #0
 8004e20:	f000 f858 	bl	8004ed4 <UART_WaitOnFlagUntilTimeout>
 8004e24:	1e03      	subs	r3, r0, #0
 8004e26:	d03b      	beq.n	8004ea0 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e28:	f3ef 8310 	mrs	r3, PRIMASK
 8004e2c:	60fb      	str	r3, [r7, #12]
  return(result);
 8004e2e:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e30:	637b      	str	r3, [r7, #52]	; 0x34
 8004e32:	2301      	movs	r3, #1
 8004e34:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e36:	693b      	ldr	r3, [r7, #16]
 8004e38:	f383 8810 	msr	PRIMASK, r3
}
 8004e3c:	46c0      	nop			; (mov r8, r8)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	681a      	ldr	r2, [r3, #0]
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	4921      	ldr	r1, [pc, #132]	; (8004ed0 <UART_CheckIdleState+0x14c>)
 8004e4a:	400a      	ands	r2, r1
 8004e4c:	601a      	str	r2, [r3, #0]
 8004e4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e50:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e52:	697b      	ldr	r3, [r7, #20]
 8004e54:	f383 8810 	msr	PRIMASK, r3
}
 8004e58:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e5a:	f3ef 8310 	mrs	r3, PRIMASK
 8004e5e:	61bb      	str	r3, [r7, #24]
  return(result);
 8004e60:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e62:	633b      	str	r3, [r7, #48]	; 0x30
 8004e64:	2301      	movs	r3, #1
 8004e66:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e68:	69fb      	ldr	r3, [r7, #28]
 8004e6a:	f383 8810 	msr	PRIMASK, r3
}
 8004e6e:	46c0      	nop			; (mov r8, r8)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	689a      	ldr	r2, [r3, #8]
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	2101      	movs	r1, #1
 8004e7c:	438a      	bics	r2, r1
 8004e7e:	609a      	str	r2, [r3, #8]
 8004e80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e82:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e84:	6a3b      	ldr	r3, [r7, #32]
 8004e86:	f383 8810 	msr	PRIMASK, r3
}
 8004e8a:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2280      	movs	r2, #128	; 0x80
 8004e90:	2120      	movs	r1, #32
 8004e92:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2278      	movs	r2, #120	; 0x78
 8004e98:	2100      	movs	r1, #0
 8004e9a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004e9c:	2303      	movs	r3, #3
 8004e9e:	e011      	b.n	8004ec4 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2220      	movs	r2, #32
 8004ea4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2280      	movs	r2, #128	; 0x80
 8004eaa:	2120      	movs	r1, #32
 8004eac:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2278      	movs	r2, #120	; 0x78
 8004ebe:	2100      	movs	r1, #0
 8004ec0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004ec2:	2300      	movs	r3, #0
}
 8004ec4:	0018      	movs	r0, r3
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	b010      	add	sp, #64	; 0x40
 8004eca:	bd80      	pop	{r7, pc}
 8004ecc:	01ffffff 	.word	0x01ffffff
 8004ed0:	fffffedf 	.word	0xfffffedf

08004ed4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b084      	sub	sp, #16
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	60f8      	str	r0, [r7, #12]
 8004edc:	60b9      	str	r1, [r7, #8]
 8004ede:	603b      	str	r3, [r7, #0]
 8004ee0:	1dfb      	adds	r3, r7, #7
 8004ee2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ee4:	e04b      	b.n	8004f7e <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ee6:	69bb      	ldr	r3, [r7, #24]
 8004ee8:	3301      	adds	r3, #1
 8004eea:	d048      	beq.n	8004f7e <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004eec:	f7fd fa42 	bl	8002374 <HAL_GetTick>
 8004ef0:	0002      	movs	r2, r0
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	1ad3      	subs	r3, r2, r3
 8004ef6:	69ba      	ldr	r2, [r7, #24]
 8004ef8:	429a      	cmp	r2, r3
 8004efa:	d302      	bcc.n	8004f02 <UART_WaitOnFlagUntilTimeout+0x2e>
 8004efc:	69bb      	ldr	r3, [r7, #24]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d101      	bne.n	8004f06 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8004f02:	2303      	movs	r3, #3
 8004f04:	e04b      	b.n	8004f9e <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	2204      	movs	r2, #4
 8004f0e:	4013      	ands	r3, r2
 8004f10:	d035      	beq.n	8004f7e <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	69db      	ldr	r3, [r3, #28]
 8004f18:	2208      	movs	r2, #8
 8004f1a:	4013      	ands	r3, r2
 8004f1c:	2b08      	cmp	r3, #8
 8004f1e:	d111      	bne.n	8004f44 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	2208      	movs	r2, #8
 8004f26:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	0018      	movs	r0, r3
 8004f2c:	f000 f906 	bl	800513c <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	2284      	movs	r2, #132	; 0x84
 8004f34:	2108      	movs	r1, #8
 8004f36:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	2278      	movs	r2, #120	; 0x78
 8004f3c:	2100      	movs	r1, #0
 8004f3e:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8004f40:	2301      	movs	r3, #1
 8004f42:	e02c      	b.n	8004f9e <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	69da      	ldr	r2, [r3, #28]
 8004f4a:	2380      	movs	r3, #128	; 0x80
 8004f4c:	011b      	lsls	r3, r3, #4
 8004f4e:	401a      	ands	r2, r3
 8004f50:	2380      	movs	r3, #128	; 0x80
 8004f52:	011b      	lsls	r3, r3, #4
 8004f54:	429a      	cmp	r2, r3
 8004f56:	d112      	bne.n	8004f7e <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	2280      	movs	r2, #128	; 0x80
 8004f5e:	0112      	lsls	r2, r2, #4
 8004f60:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	0018      	movs	r0, r3
 8004f66:	f000 f8e9 	bl	800513c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	2284      	movs	r2, #132	; 0x84
 8004f6e:	2120      	movs	r1, #32
 8004f70:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	2278      	movs	r2, #120	; 0x78
 8004f76:	2100      	movs	r1, #0
 8004f78:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004f7a:	2303      	movs	r3, #3
 8004f7c:	e00f      	b.n	8004f9e <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	69db      	ldr	r3, [r3, #28]
 8004f84:	68ba      	ldr	r2, [r7, #8]
 8004f86:	4013      	ands	r3, r2
 8004f88:	68ba      	ldr	r2, [r7, #8]
 8004f8a:	1ad3      	subs	r3, r2, r3
 8004f8c:	425a      	negs	r2, r3
 8004f8e:	4153      	adcs	r3, r2
 8004f90:	b2db      	uxtb	r3, r3
 8004f92:	001a      	movs	r2, r3
 8004f94:	1dfb      	adds	r3, r7, #7
 8004f96:	781b      	ldrb	r3, [r3, #0]
 8004f98:	429a      	cmp	r2, r3
 8004f9a:	d0a4      	beq.n	8004ee6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004f9c:	2300      	movs	r3, #0
}
 8004f9e:	0018      	movs	r0, r3
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	b004      	add	sp, #16
 8004fa4:	bd80      	pop	{r7, pc}
	...

08004fa8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b090      	sub	sp, #64	; 0x40
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	60f8      	str	r0, [r7, #12]
 8004fb0:	60b9      	str	r1, [r7, #8]
 8004fb2:	1dbb      	adds	r3, r7, #6
 8004fb4:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	68ba      	ldr	r2, [r7, #8]
 8004fba:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	1dba      	adds	r2, r7, #6
 8004fc0:	2158      	movs	r1, #88	; 0x58
 8004fc2:	8812      	ldrh	r2, [r2, #0]
 8004fc4:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	1dba      	adds	r2, r7, #6
 8004fca:	215a      	movs	r1, #90	; 0x5a
 8004fcc:	8812      	ldrh	r2, [r2, #0]
 8004fce:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	689a      	ldr	r2, [r3, #8]
 8004fda:	2380      	movs	r3, #128	; 0x80
 8004fdc:	015b      	lsls	r3, r3, #5
 8004fde:	429a      	cmp	r2, r3
 8004fe0:	d10d      	bne.n	8004ffe <UART_Start_Receive_IT+0x56>
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	691b      	ldr	r3, [r3, #16]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d104      	bne.n	8004ff4 <UART_Start_Receive_IT+0x4c>
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	225c      	movs	r2, #92	; 0x5c
 8004fee:	4950      	ldr	r1, [pc, #320]	; (8005130 <UART_Start_Receive_IT+0x188>)
 8004ff0:	5299      	strh	r1, [r3, r2]
 8004ff2:	e02e      	b.n	8005052 <UART_Start_Receive_IT+0xaa>
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	225c      	movs	r2, #92	; 0x5c
 8004ff8:	21ff      	movs	r1, #255	; 0xff
 8004ffa:	5299      	strh	r1, [r3, r2]
 8004ffc:	e029      	b.n	8005052 <UART_Start_Receive_IT+0xaa>
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	689b      	ldr	r3, [r3, #8]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d10d      	bne.n	8005022 <UART_Start_Receive_IT+0x7a>
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	691b      	ldr	r3, [r3, #16]
 800500a:	2b00      	cmp	r3, #0
 800500c:	d104      	bne.n	8005018 <UART_Start_Receive_IT+0x70>
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	225c      	movs	r2, #92	; 0x5c
 8005012:	21ff      	movs	r1, #255	; 0xff
 8005014:	5299      	strh	r1, [r3, r2]
 8005016:	e01c      	b.n	8005052 <UART_Start_Receive_IT+0xaa>
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	225c      	movs	r2, #92	; 0x5c
 800501c:	217f      	movs	r1, #127	; 0x7f
 800501e:	5299      	strh	r1, [r3, r2]
 8005020:	e017      	b.n	8005052 <UART_Start_Receive_IT+0xaa>
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	689a      	ldr	r2, [r3, #8]
 8005026:	2380      	movs	r3, #128	; 0x80
 8005028:	055b      	lsls	r3, r3, #21
 800502a:	429a      	cmp	r2, r3
 800502c:	d10d      	bne.n	800504a <UART_Start_Receive_IT+0xa2>
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	691b      	ldr	r3, [r3, #16]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d104      	bne.n	8005040 <UART_Start_Receive_IT+0x98>
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	225c      	movs	r2, #92	; 0x5c
 800503a:	217f      	movs	r1, #127	; 0x7f
 800503c:	5299      	strh	r1, [r3, r2]
 800503e:	e008      	b.n	8005052 <UART_Start_Receive_IT+0xaa>
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	225c      	movs	r2, #92	; 0x5c
 8005044:	213f      	movs	r1, #63	; 0x3f
 8005046:	5299      	strh	r1, [r3, r2]
 8005048:	e003      	b.n	8005052 <UART_Start_Receive_IT+0xaa>
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	225c      	movs	r2, #92	; 0x5c
 800504e:	2100      	movs	r1, #0
 8005050:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	2284      	movs	r2, #132	; 0x84
 8005056:	2100      	movs	r1, #0
 8005058:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	2280      	movs	r2, #128	; 0x80
 800505e:	2122      	movs	r1, #34	; 0x22
 8005060:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005062:	f3ef 8310 	mrs	r3, PRIMASK
 8005066:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8005068:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800506a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800506c:	2301      	movs	r3, #1
 800506e:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005070:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005072:	f383 8810 	msr	PRIMASK, r3
}
 8005076:	46c0      	nop			; (mov r8, r8)
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	689a      	ldr	r2, [r3, #8]
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	2101      	movs	r1, #1
 8005084:	430a      	orrs	r2, r1
 8005086:	609a      	str	r2, [r3, #8]
 8005088:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800508a:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800508c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800508e:	f383 8810 	msr	PRIMASK, r3
}
 8005092:	46c0      	nop			; (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	689a      	ldr	r2, [r3, #8]
 8005098:	2380      	movs	r3, #128	; 0x80
 800509a:	015b      	lsls	r3, r3, #5
 800509c:	429a      	cmp	r2, r3
 800509e:	d107      	bne.n	80050b0 <UART_Start_Receive_IT+0x108>
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	691b      	ldr	r3, [r3, #16]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d103      	bne.n	80050b0 <UART_Start_Receive_IT+0x108>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	4a22      	ldr	r2, [pc, #136]	; (8005134 <UART_Start_Receive_IT+0x18c>)
 80050ac:	669a      	str	r2, [r3, #104]	; 0x68
 80050ae:	e002      	b.n	80050b6 <UART_Start_Receive_IT+0x10e>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	4a21      	ldr	r2, [pc, #132]	; (8005138 <UART_Start_Receive_IT+0x190>)
 80050b4:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	691b      	ldr	r3, [r3, #16]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d019      	beq.n	80050f2 <UART_Start_Receive_IT+0x14a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80050be:	f3ef 8310 	mrs	r3, PRIMASK
 80050c2:	61fb      	str	r3, [r7, #28]
  return(result);
 80050c4:	69fb      	ldr	r3, [r7, #28]
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80050c6:	637b      	str	r3, [r7, #52]	; 0x34
 80050c8:	2301      	movs	r3, #1
 80050ca:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050cc:	6a3b      	ldr	r3, [r7, #32]
 80050ce:	f383 8810 	msr	PRIMASK, r3
}
 80050d2:	46c0      	nop			; (mov r8, r8)
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	681a      	ldr	r2, [r3, #0]
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	2190      	movs	r1, #144	; 0x90
 80050e0:	0049      	lsls	r1, r1, #1
 80050e2:	430a      	orrs	r2, r1
 80050e4:	601a      	str	r2, [r3, #0]
 80050e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050e8:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ec:	f383 8810 	msr	PRIMASK, r3
}
 80050f0:	e018      	b.n	8005124 <UART_Start_Receive_IT+0x17c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80050f2:	f3ef 8310 	mrs	r3, PRIMASK
 80050f6:	613b      	str	r3, [r7, #16]
  return(result);
 80050f8:	693b      	ldr	r3, [r7, #16]
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80050fa:	63bb      	str	r3, [r7, #56]	; 0x38
 80050fc:	2301      	movs	r3, #1
 80050fe:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005100:	697b      	ldr	r3, [r7, #20]
 8005102:	f383 8810 	msr	PRIMASK, r3
}
 8005106:	46c0      	nop			; (mov r8, r8)
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	681a      	ldr	r2, [r3, #0]
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	2120      	movs	r1, #32
 8005114:	430a      	orrs	r2, r1
 8005116:	601a      	str	r2, [r3, #0]
 8005118:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800511a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800511c:	69bb      	ldr	r3, [r7, #24]
 800511e:	f383 8810 	msr	PRIMASK, r3
}
 8005122:	46c0      	nop			; (mov r8, r8)
  }
  return HAL_OK;
 8005124:	2300      	movs	r3, #0
}
 8005126:	0018      	movs	r0, r3
 8005128:	46bd      	mov	sp, r7
 800512a:	b010      	add	sp, #64	; 0x40
 800512c:	bd80      	pop	{r7, pc}
 800512e:	46c0      	nop			; (mov r8, r8)
 8005130:	000001ff 	.word	0x000001ff
 8005134:	0800544d 	.word	0x0800544d
 8005138:	08005289 	.word	0x08005289

0800513c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800513c:	b580      	push	{r7, lr}
 800513e:	b08e      	sub	sp, #56	; 0x38
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005144:	f3ef 8310 	mrs	r3, PRIMASK
 8005148:	617b      	str	r3, [r7, #20]
  return(result);
 800514a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800514c:	637b      	str	r3, [r7, #52]	; 0x34
 800514e:	2301      	movs	r3, #1
 8005150:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005152:	69bb      	ldr	r3, [r7, #24]
 8005154:	f383 8810 	msr	PRIMASK, r3
}
 8005158:	46c0      	nop			; (mov r8, r8)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	681a      	ldr	r2, [r3, #0]
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	4926      	ldr	r1, [pc, #152]	; (8005200 <UART_EndRxTransfer+0xc4>)
 8005166:	400a      	ands	r2, r1
 8005168:	601a      	str	r2, [r3, #0]
 800516a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800516c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800516e:	69fb      	ldr	r3, [r7, #28]
 8005170:	f383 8810 	msr	PRIMASK, r3
}
 8005174:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005176:	f3ef 8310 	mrs	r3, PRIMASK
 800517a:	623b      	str	r3, [r7, #32]
  return(result);
 800517c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800517e:	633b      	str	r3, [r7, #48]	; 0x30
 8005180:	2301      	movs	r3, #1
 8005182:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005186:	f383 8810 	msr	PRIMASK, r3
}
 800518a:	46c0      	nop			; (mov r8, r8)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	689a      	ldr	r2, [r3, #8]
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	2101      	movs	r1, #1
 8005198:	438a      	bics	r2, r1
 800519a:	609a      	str	r2, [r3, #8]
 800519c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800519e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051a2:	f383 8810 	msr	PRIMASK, r3
}
 80051a6:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051ac:	2b01      	cmp	r3, #1
 80051ae:	d118      	bne.n	80051e2 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80051b0:	f3ef 8310 	mrs	r3, PRIMASK
 80051b4:	60bb      	str	r3, [r7, #8]
  return(result);
 80051b6:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80051ba:	2301      	movs	r3, #1
 80051bc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	f383 8810 	msr	PRIMASK, r3
}
 80051c4:	46c0      	nop			; (mov r8, r8)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	681a      	ldr	r2, [r3, #0]
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	2110      	movs	r1, #16
 80051d2:	438a      	bics	r2, r1
 80051d4:	601a      	str	r2, [r3, #0]
 80051d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051d8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051da:	693b      	ldr	r3, [r7, #16]
 80051dc:	f383 8810 	msr	PRIMASK, r3
}
 80051e0:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2280      	movs	r2, #128	; 0x80
 80051e6:	2120      	movs	r1, #32
 80051e8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2200      	movs	r2, #0
 80051ee:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2200      	movs	r2, #0
 80051f4:	669a      	str	r2, [r3, #104]	; 0x68
}
 80051f6:	46c0      	nop			; (mov r8, r8)
 80051f8:	46bd      	mov	sp, r7
 80051fa:	b00e      	add	sp, #56	; 0x38
 80051fc:	bd80      	pop	{r7, pc}
 80051fe:	46c0      	nop			; (mov r8, r8)
 8005200:	fffffedf 	.word	0xfffffedf

08005204 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005204:	b580      	push	{r7, lr}
 8005206:	b084      	sub	sp, #16
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005210:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	225a      	movs	r2, #90	; 0x5a
 8005216:	2100      	movs	r1, #0
 8005218:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	2252      	movs	r2, #82	; 0x52
 800521e:	2100      	movs	r1, #0
 8005220:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	0018      	movs	r0, r3
 8005226:	f7ff fa47 	bl	80046b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800522a:	46c0      	nop			; (mov r8, r8)
 800522c:	46bd      	mov	sp, r7
 800522e:	b004      	add	sp, #16
 8005230:	bd80      	pop	{r7, pc}

08005232 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005232:	b580      	push	{r7, lr}
 8005234:	b086      	sub	sp, #24
 8005236:	af00      	add	r7, sp, #0
 8005238:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800523a:	f3ef 8310 	mrs	r3, PRIMASK
 800523e:	60bb      	str	r3, [r7, #8]
  return(result);
 8005240:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005242:	617b      	str	r3, [r7, #20]
 8005244:	2301      	movs	r3, #1
 8005246:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	f383 8810 	msr	PRIMASK, r3
}
 800524e:	46c0      	nop			; (mov r8, r8)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	681a      	ldr	r2, [r3, #0]
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	2140      	movs	r1, #64	; 0x40
 800525c:	438a      	bics	r2, r1
 800525e:	601a      	str	r2, [r3, #0]
 8005260:	697b      	ldr	r3, [r7, #20]
 8005262:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005264:	693b      	ldr	r3, [r7, #16]
 8005266:	f383 8810 	msr	PRIMASK, r3
}
 800526a:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2220      	movs	r2, #32
 8005270:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	2200      	movs	r2, #0
 8005276:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	0018      	movs	r0, r3
 800527c:	f7ff fa14 	bl	80046a8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005280:	46c0      	nop			; (mov r8, r8)
 8005282:	46bd      	mov	sp, r7
 8005284:	b006      	add	sp, #24
 8005286:	bd80      	pop	{r7, pc}

08005288 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005288:	b580      	push	{r7, lr}
 800528a:	b094      	sub	sp, #80	; 0x50
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005290:	204e      	movs	r0, #78	; 0x4e
 8005292:	183b      	adds	r3, r7, r0
 8005294:	687a      	ldr	r2, [r7, #4]
 8005296:	215c      	movs	r1, #92	; 0x5c
 8005298:	5a52      	ldrh	r2, [r2, r1]
 800529a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2280      	movs	r2, #128	; 0x80
 80052a0:	589b      	ldr	r3, [r3, r2]
 80052a2:	2b22      	cmp	r3, #34	; 0x22
 80052a4:	d000      	beq.n	80052a8 <UART_RxISR_8BIT+0x20>
 80052a6:	e0bf      	b.n	8005428 <UART_RxISR_8BIT+0x1a0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80052ae:	214c      	movs	r1, #76	; 0x4c
 80052b0:	187b      	adds	r3, r7, r1
 80052b2:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80052b4:	187b      	adds	r3, r7, r1
 80052b6:	881b      	ldrh	r3, [r3, #0]
 80052b8:	b2da      	uxtb	r2, r3
 80052ba:	183b      	adds	r3, r7, r0
 80052bc:	881b      	ldrh	r3, [r3, #0]
 80052be:	b2d9      	uxtb	r1, r3
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052c4:	400a      	ands	r2, r1
 80052c6:	b2d2      	uxtb	r2, r2
 80052c8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052ce:	1c5a      	adds	r2, r3, #1
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	225a      	movs	r2, #90	; 0x5a
 80052d8:	5a9b      	ldrh	r3, [r3, r2]
 80052da:	b29b      	uxth	r3, r3
 80052dc:	3b01      	subs	r3, #1
 80052de:	b299      	uxth	r1, r3
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	225a      	movs	r2, #90	; 0x5a
 80052e4:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	225a      	movs	r2, #90	; 0x5a
 80052ea:	5a9b      	ldrh	r3, [r3, r2]
 80052ec:	b29b      	uxth	r3, r3
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d000      	beq.n	80052f4 <UART_RxISR_8BIT+0x6c>
 80052f2:	e0a1      	b.n	8005438 <UART_RxISR_8BIT+0x1b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80052f4:	f3ef 8310 	mrs	r3, PRIMASK
 80052f8:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80052fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80052fc:	64bb      	str	r3, [r7, #72]	; 0x48
 80052fe:	2301      	movs	r3, #1
 8005300:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005302:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005304:	f383 8810 	msr	PRIMASK, r3
}
 8005308:	46c0      	nop			; (mov r8, r8)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	681a      	ldr	r2, [r3, #0]
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	494a      	ldr	r1, [pc, #296]	; (8005440 <UART_RxISR_8BIT+0x1b8>)
 8005316:	400a      	ands	r2, r1
 8005318:	601a      	str	r2, [r3, #0]
 800531a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800531c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800531e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005320:	f383 8810 	msr	PRIMASK, r3
}
 8005324:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005326:	f3ef 8310 	mrs	r3, PRIMASK
 800532a:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 800532c:	6b3b      	ldr	r3, [r7, #48]	; 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800532e:	647b      	str	r3, [r7, #68]	; 0x44
 8005330:	2301      	movs	r3, #1
 8005332:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005334:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005336:	f383 8810 	msr	PRIMASK, r3
}
 800533a:	46c0      	nop			; (mov r8, r8)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	689a      	ldr	r2, [r3, #8]
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	2101      	movs	r1, #1
 8005348:	438a      	bics	r2, r1
 800534a:	609a      	str	r2, [r3, #8]
 800534c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800534e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005350:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005352:	f383 8810 	msr	PRIMASK, r3
}
 8005356:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2280      	movs	r2, #128	; 0x80
 800535c:	2120      	movs	r1, #32
 800535e:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2200      	movs	r2, #0
 8005364:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2200      	movs	r2, #0
 800536a:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	4a34      	ldr	r2, [pc, #208]	; (8005444 <UART_RxISR_8BIT+0x1bc>)
 8005372:	4293      	cmp	r3, r2
 8005374:	d01f      	beq.n	80053b6 <UART_RxISR_8BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	685a      	ldr	r2, [r3, #4]
 800537c:	2380      	movs	r3, #128	; 0x80
 800537e:	041b      	lsls	r3, r3, #16
 8005380:	4013      	ands	r3, r2
 8005382:	d018      	beq.n	80053b6 <UART_RxISR_8BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005384:	f3ef 8310 	mrs	r3, PRIMASK
 8005388:	61bb      	str	r3, [r7, #24]
  return(result);
 800538a:	69bb      	ldr	r3, [r7, #24]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800538c:	643b      	str	r3, [r7, #64]	; 0x40
 800538e:	2301      	movs	r3, #1
 8005390:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005392:	69fb      	ldr	r3, [r7, #28]
 8005394:	f383 8810 	msr	PRIMASK, r3
}
 8005398:	46c0      	nop			; (mov r8, r8)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	681a      	ldr	r2, [r3, #0]
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	4928      	ldr	r1, [pc, #160]	; (8005448 <UART_RxISR_8BIT+0x1c0>)
 80053a6:	400a      	ands	r2, r1
 80053a8:	601a      	str	r2, [r3, #0]
 80053aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80053ac:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053ae:	6a3b      	ldr	r3, [r7, #32]
 80053b0:	f383 8810 	msr	PRIMASK, r3
}
 80053b4:	46c0      	nop			; (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053ba:	2b01      	cmp	r3, #1
 80053bc:	d12f      	bne.n	800541e <UART_RxISR_8BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2200      	movs	r2, #0
 80053c2:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80053c4:	f3ef 8310 	mrs	r3, PRIMASK
 80053c8:	60fb      	str	r3, [r7, #12]
  return(result);
 80053ca:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80053cc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80053ce:	2301      	movs	r3, #1
 80053d0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053d2:	693b      	ldr	r3, [r7, #16]
 80053d4:	f383 8810 	msr	PRIMASK, r3
}
 80053d8:	46c0      	nop			; (mov r8, r8)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	681a      	ldr	r2, [r3, #0]
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	2110      	movs	r1, #16
 80053e6:	438a      	bics	r2, r1
 80053e8:	601a      	str	r2, [r3, #0]
 80053ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053ec:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053ee:	697b      	ldr	r3, [r7, #20]
 80053f0:	f383 8810 	msr	PRIMASK, r3
}
 80053f4:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	69db      	ldr	r3, [r3, #28]
 80053fc:	2210      	movs	r2, #16
 80053fe:	4013      	ands	r3, r2
 8005400:	2b10      	cmp	r3, #16
 8005402:	d103      	bne.n	800540c <UART_RxISR_8BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	2210      	movs	r2, #16
 800540a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2258      	movs	r2, #88	; 0x58
 8005410:	5a9a      	ldrh	r2, [r3, r2]
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	0011      	movs	r1, r2
 8005416:	0018      	movs	r0, r3
 8005418:	f7ff f956 	bl	80046c8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800541c:	e00c      	b.n	8005438 <UART_RxISR_8BIT+0x1b0>
        HAL_UART_RxCpltCallback(huart);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	0018      	movs	r0, r3
 8005422:	f7fb fe81 	bl	8001128 <HAL_UART_RxCpltCallback>
}
 8005426:	e007      	b.n	8005438 <UART_RxISR_8BIT+0x1b0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	699a      	ldr	r2, [r3, #24]
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	2108      	movs	r1, #8
 8005434:	430a      	orrs	r2, r1
 8005436:	619a      	str	r2, [r3, #24]
}
 8005438:	46c0      	nop			; (mov r8, r8)
 800543a:	46bd      	mov	sp, r7
 800543c:	b014      	add	sp, #80	; 0x50
 800543e:	bd80      	pop	{r7, pc}
 8005440:	fffffedf 	.word	0xfffffedf
 8005444:	40004800 	.word	0x40004800
 8005448:	fbffffff 	.word	0xfbffffff

0800544c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800544c:	b580      	push	{r7, lr}
 800544e:	b094      	sub	sp, #80	; 0x50
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005454:	204e      	movs	r0, #78	; 0x4e
 8005456:	183b      	adds	r3, r7, r0
 8005458:	687a      	ldr	r2, [r7, #4]
 800545a:	215c      	movs	r1, #92	; 0x5c
 800545c:	5a52      	ldrh	r2, [r2, r1]
 800545e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2280      	movs	r2, #128	; 0x80
 8005464:	589b      	ldr	r3, [r3, r2]
 8005466:	2b22      	cmp	r3, #34	; 0x22
 8005468:	d000      	beq.n	800546c <UART_RxISR_16BIT+0x20>
 800546a:	e0bf      	b.n	80055ec <UART_RxISR_16BIT+0x1a0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005472:	214c      	movs	r1, #76	; 0x4c
 8005474:	187b      	adds	r3, r7, r1
 8005476:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800547c:	64bb      	str	r3, [r7, #72]	; 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 800547e:	187b      	adds	r3, r7, r1
 8005480:	183a      	adds	r2, r7, r0
 8005482:	881b      	ldrh	r3, [r3, #0]
 8005484:	8812      	ldrh	r2, [r2, #0]
 8005486:	4013      	ands	r3, r2
 8005488:	b29a      	uxth	r2, r3
 800548a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800548c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005492:	1c9a      	adds	r2, r3, #2
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	225a      	movs	r2, #90	; 0x5a
 800549c:	5a9b      	ldrh	r3, [r3, r2]
 800549e:	b29b      	uxth	r3, r3
 80054a0:	3b01      	subs	r3, #1
 80054a2:	b299      	uxth	r1, r3
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	225a      	movs	r2, #90	; 0x5a
 80054a8:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	225a      	movs	r2, #90	; 0x5a
 80054ae:	5a9b      	ldrh	r3, [r3, r2]
 80054b0:	b29b      	uxth	r3, r3
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d000      	beq.n	80054b8 <UART_RxISR_16BIT+0x6c>
 80054b6:	e0a1      	b.n	80055fc <UART_RxISR_16BIT+0x1b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80054b8:	f3ef 8310 	mrs	r3, PRIMASK
 80054bc:	623b      	str	r3, [r7, #32]
  return(result);
 80054be:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80054c0:	647b      	str	r3, [r7, #68]	; 0x44
 80054c2:	2301      	movs	r3, #1
 80054c4:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054c8:	f383 8810 	msr	PRIMASK, r3
}
 80054cc:	46c0      	nop			; (mov r8, r8)
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	681a      	ldr	r2, [r3, #0]
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	494a      	ldr	r1, [pc, #296]	; (8005604 <UART_RxISR_16BIT+0x1b8>)
 80054da:	400a      	ands	r2, r1
 80054dc:	601a      	str	r2, [r3, #0]
 80054de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80054e0:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054e4:	f383 8810 	msr	PRIMASK, r3
}
 80054e8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80054ea:	f3ef 8310 	mrs	r3, PRIMASK
 80054ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 80054f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054f2:	643b      	str	r3, [r7, #64]	; 0x40
 80054f4:	2301      	movs	r3, #1
 80054f6:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054fa:	f383 8810 	msr	PRIMASK, r3
}
 80054fe:	46c0      	nop			; (mov r8, r8)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	689a      	ldr	r2, [r3, #8]
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	2101      	movs	r1, #1
 800550c:	438a      	bics	r2, r1
 800550e:	609a      	str	r2, [r3, #8]
 8005510:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005512:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005514:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005516:	f383 8810 	msr	PRIMASK, r3
}
 800551a:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2280      	movs	r2, #128	; 0x80
 8005520:	2120      	movs	r1, #32
 8005522:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2200      	movs	r2, #0
 8005528:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	2200      	movs	r2, #0
 800552e:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	4a34      	ldr	r2, [pc, #208]	; (8005608 <UART_RxISR_16BIT+0x1bc>)
 8005536:	4293      	cmp	r3, r2
 8005538:	d01f      	beq.n	800557a <UART_RxISR_16BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	685a      	ldr	r2, [r3, #4]
 8005540:	2380      	movs	r3, #128	; 0x80
 8005542:	041b      	lsls	r3, r3, #16
 8005544:	4013      	ands	r3, r2
 8005546:	d018      	beq.n	800557a <UART_RxISR_16BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005548:	f3ef 8310 	mrs	r3, PRIMASK
 800554c:	617b      	str	r3, [r7, #20]
  return(result);
 800554e:	697b      	ldr	r3, [r7, #20]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005550:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005552:	2301      	movs	r3, #1
 8005554:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005556:	69bb      	ldr	r3, [r7, #24]
 8005558:	f383 8810 	msr	PRIMASK, r3
}
 800555c:	46c0      	nop			; (mov r8, r8)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	681a      	ldr	r2, [r3, #0]
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	4928      	ldr	r1, [pc, #160]	; (800560c <UART_RxISR_16BIT+0x1c0>)
 800556a:	400a      	ands	r2, r1
 800556c:	601a      	str	r2, [r3, #0]
 800556e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005570:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005572:	69fb      	ldr	r3, [r7, #28]
 8005574:	f383 8810 	msr	PRIMASK, r3
}
 8005578:	46c0      	nop			; (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800557e:	2b01      	cmp	r3, #1
 8005580:	d12f      	bne.n	80055e2 <UART_RxISR_16BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	2200      	movs	r2, #0
 8005586:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005588:	f3ef 8310 	mrs	r3, PRIMASK
 800558c:	60bb      	str	r3, [r7, #8]
  return(result);
 800558e:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005590:	63bb      	str	r3, [r7, #56]	; 0x38
 8005592:	2301      	movs	r3, #1
 8005594:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	f383 8810 	msr	PRIMASK, r3
}
 800559c:	46c0      	nop			; (mov r8, r8)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	681a      	ldr	r2, [r3, #0]
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	2110      	movs	r1, #16
 80055aa:	438a      	bics	r2, r1
 80055ac:	601a      	str	r2, [r3, #0]
 80055ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055b0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055b2:	693b      	ldr	r3, [r7, #16]
 80055b4:	f383 8810 	msr	PRIMASK, r3
}
 80055b8:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	69db      	ldr	r3, [r3, #28]
 80055c0:	2210      	movs	r2, #16
 80055c2:	4013      	ands	r3, r2
 80055c4:	2b10      	cmp	r3, #16
 80055c6:	d103      	bne.n	80055d0 <UART_RxISR_16BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	2210      	movs	r2, #16
 80055ce:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2258      	movs	r2, #88	; 0x58
 80055d4:	5a9a      	ldrh	r2, [r3, r2]
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	0011      	movs	r1, r2
 80055da:	0018      	movs	r0, r3
 80055dc:	f7ff f874 	bl	80046c8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80055e0:	e00c      	b.n	80055fc <UART_RxISR_16BIT+0x1b0>
        HAL_UART_RxCpltCallback(huart);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	0018      	movs	r0, r3
 80055e6:	f7fb fd9f 	bl	8001128 <HAL_UART_RxCpltCallback>
}
 80055ea:	e007      	b.n	80055fc <UART_RxISR_16BIT+0x1b0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	699a      	ldr	r2, [r3, #24]
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	2108      	movs	r1, #8
 80055f8:	430a      	orrs	r2, r1
 80055fa:	619a      	str	r2, [r3, #24]
}
 80055fc:	46c0      	nop			; (mov r8, r8)
 80055fe:	46bd      	mov	sp, r7
 8005600:	b014      	add	sp, #80	; 0x50
 8005602:	bd80      	pop	{r7, pc}
 8005604:	fffffedf 	.word	0xfffffedf
 8005608:	40004800 	.word	0x40004800
 800560c:	fbffffff 	.word	0xfbffffff

08005610 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005610:	b580      	push	{r7, lr}
 8005612:	b082      	sub	sp, #8
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005618:	46c0      	nop			; (mov r8, r8)
 800561a:	46bd      	mov	sp, r7
 800561c:	b002      	add	sp, #8
 800561e:	bd80      	pop	{r7, pc}

08005620 <malloc>:
 8005620:	b510      	push	{r4, lr}
 8005622:	4b03      	ldr	r3, [pc, #12]	; (8005630 <malloc+0x10>)
 8005624:	0001      	movs	r1, r0
 8005626:	6818      	ldr	r0, [r3, #0]
 8005628:	f000 f830 	bl	800568c <_malloc_r>
 800562c:	bd10      	pop	{r4, pc}
 800562e:	46c0      	nop			; (mov r8, r8)
 8005630:	2000018c 	.word	0x2000018c

08005634 <free>:
 8005634:	b510      	push	{r4, lr}
 8005636:	4b03      	ldr	r3, [pc, #12]	; (8005644 <free+0x10>)
 8005638:	0001      	movs	r1, r0
 800563a:	6818      	ldr	r0, [r3, #0]
 800563c:	f000 fb4e 	bl	8005cdc <_free_r>
 8005640:	bd10      	pop	{r4, pc}
 8005642:	46c0      	nop			; (mov r8, r8)
 8005644:	2000018c 	.word	0x2000018c

08005648 <sbrk_aligned>:
 8005648:	b570      	push	{r4, r5, r6, lr}
 800564a:	4e0f      	ldr	r6, [pc, #60]	; (8005688 <sbrk_aligned+0x40>)
 800564c:	000d      	movs	r5, r1
 800564e:	6831      	ldr	r1, [r6, #0]
 8005650:	0004      	movs	r4, r0
 8005652:	2900      	cmp	r1, #0
 8005654:	d102      	bne.n	800565c <sbrk_aligned+0x14>
 8005656:	f000 fac7 	bl	8005be8 <_sbrk_r>
 800565a:	6030      	str	r0, [r6, #0]
 800565c:	0029      	movs	r1, r5
 800565e:	0020      	movs	r0, r4
 8005660:	f000 fac2 	bl	8005be8 <_sbrk_r>
 8005664:	1c43      	adds	r3, r0, #1
 8005666:	d00a      	beq.n	800567e <sbrk_aligned+0x36>
 8005668:	2303      	movs	r3, #3
 800566a:	1cc5      	adds	r5, r0, #3
 800566c:	439d      	bics	r5, r3
 800566e:	42a8      	cmp	r0, r5
 8005670:	d007      	beq.n	8005682 <sbrk_aligned+0x3a>
 8005672:	1a29      	subs	r1, r5, r0
 8005674:	0020      	movs	r0, r4
 8005676:	f000 fab7 	bl	8005be8 <_sbrk_r>
 800567a:	3001      	adds	r0, #1
 800567c:	d101      	bne.n	8005682 <sbrk_aligned+0x3a>
 800567e:	2501      	movs	r5, #1
 8005680:	426d      	negs	r5, r5
 8005682:	0028      	movs	r0, r5
 8005684:	bd70      	pop	{r4, r5, r6, pc}
 8005686:	46c0      	nop			; (mov r8, r8)
 8005688:	200002fc 	.word	0x200002fc

0800568c <_malloc_r>:
 800568c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800568e:	2203      	movs	r2, #3
 8005690:	1ccb      	adds	r3, r1, #3
 8005692:	4393      	bics	r3, r2
 8005694:	3308      	adds	r3, #8
 8005696:	0006      	movs	r6, r0
 8005698:	001f      	movs	r7, r3
 800569a:	2b0c      	cmp	r3, #12
 800569c:	d238      	bcs.n	8005710 <_malloc_r+0x84>
 800569e:	270c      	movs	r7, #12
 80056a0:	42b9      	cmp	r1, r7
 80056a2:	d837      	bhi.n	8005714 <_malloc_r+0x88>
 80056a4:	0030      	movs	r0, r6
 80056a6:	f000 f873 	bl	8005790 <__malloc_lock>
 80056aa:	4b38      	ldr	r3, [pc, #224]	; (800578c <_malloc_r+0x100>)
 80056ac:	9300      	str	r3, [sp, #0]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	001c      	movs	r4, r3
 80056b2:	2c00      	cmp	r4, #0
 80056b4:	d133      	bne.n	800571e <_malloc_r+0x92>
 80056b6:	0039      	movs	r1, r7
 80056b8:	0030      	movs	r0, r6
 80056ba:	f7ff ffc5 	bl	8005648 <sbrk_aligned>
 80056be:	0004      	movs	r4, r0
 80056c0:	1c43      	adds	r3, r0, #1
 80056c2:	d15e      	bne.n	8005782 <_malloc_r+0xf6>
 80056c4:	9b00      	ldr	r3, [sp, #0]
 80056c6:	681c      	ldr	r4, [r3, #0]
 80056c8:	0025      	movs	r5, r4
 80056ca:	2d00      	cmp	r5, #0
 80056cc:	d14e      	bne.n	800576c <_malloc_r+0xe0>
 80056ce:	2c00      	cmp	r4, #0
 80056d0:	d051      	beq.n	8005776 <_malloc_r+0xea>
 80056d2:	6823      	ldr	r3, [r4, #0]
 80056d4:	0029      	movs	r1, r5
 80056d6:	18e3      	adds	r3, r4, r3
 80056d8:	0030      	movs	r0, r6
 80056da:	9301      	str	r3, [sp, #4]
 80056dc:	f000 fa84 	bl	8005be8 <_sbrk_r>
 80056e0:	9b01      	ldr	r3, [sp, #4]
 80056e2:	4283      	cmp	r3, r0
 80056e4:	d147      	bne.n	8005776 <_malloc_r+0xea>
 80056e6:	6823      	ldr	r3, [r4, #0]
 80056e8:	0030      	movs	r0, r6
 80056ea:	1aff      	subs	r7, r7, r3
 80056ec:	0039      	movs	r1, r7
 80056ee:	f7ff ffab 	bl	8005648 <sbrk_aligned>
 80056f2:	3001      	adds	r0, #1
 80056f4:	d03f      	beq.n	8005776 <_malloc_r+0xea>
 80056f6:	6823      	ldr	r3, [r4, #0]
 80056f8:	19db      	adds	r3, r3, r7
 80056fa:	6023      	str	r3, [r4, #0]
 80056fc:	9b00      	ldr	r3, [sp, #0]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d040      	beq.n	8005786 <_malloc_r+0xfa>
 8005704:	685a      	ldr	r2, [r3, #4]
 8005706:	42a2      	cmp	r2, r4
 8005708:	d133      	bne.n	8005772 <_malloc_r+0xe6>
 800570a:	2200      	movs	r2, #0
 800570c:	605a      	str	r2, [r3, #4]
 800570e:	e014      	b.n	800573a <_malloc_r+0xae>
 8005710:	2b00      	cmp	r3, #0
 8005712:	dac5      	bge.n	80056a0 <_malloc_r+0x14>
 8005714:	230c      	movs	r3, #12
 8005716:	2500      	movs	r5, #0
 8005718:	6033      	str	r3, [r6, #0]
 800571a:	0028      	movs	r0, r5
 800571c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800571e:	6821      	ldr	r1, [r4, #0]
 8005720:	1bc9      	subs	r1, r1, r7
 8005722:	d420      	bmi.n	8005766 <_malloc_r+0xda>
 8005724:	290b      	cmp	r1, #11
 8005726:	d918      	bls.n	800575a <_malloc_r+0xce>
 8005728:	19e2      	adds	r2, r4, r7
 800572a:	6027      	str	r7, [r4, #0]
 800572c:	42a3      	cmp	r3, r4
 800572e:	d112      	bne.n	8005756 <_malloc_r+0xca>
 8005730:	9b00      	ldr	r3, [sp, #0]
 8005732:	601a      	str	r2, [r3, #0]
 8005734:	6863      	ldr	r3, [r4, #4]
 8005736:	6011      	str	r1, [r2, #0]
 8005738:	6053      	str	r3, [r2, #4]
 800573a:	0030      	movs	r0, r6
 800573c:	0025      	movs	r5, r4
 800573e:	f000 f82f 	bl	80057a0 <__malloc_unlock>
 8005742:	2207      	movs	r2, #7
 8005744:	350b      	adds	r5, #11
 8005746:	1d23      	adds	r3, r4, #4
 8005748:	4395      	bics	r5, r2
 800574a:	1aea      	subs	r2, r5, r3
 800574c:	429d      	cmp	r5, r3
 800574e:	d0e4      	beq.n	800571a <_malloc_r+0x8e>
 8005750:	1b5b      	subs	r3, r3, r5
 8005752:	50a3      	str	r3, [r4, r2]
 8005754:	e7e1      	b.n	800571a <_malloc_r+0x8e>
 8005756:	605a      	str	r2, [r3, #4]
 8005758:	e7ec      	b.n	8005734 <_malloc_r+0xa8>
 800575a:	6862      	ldr	r2, [r4, #4]
 800575c:	42a3      	cmp	r3, r4
 800575e:	d1d5      	bne.n	800570c <_malloc_r+0x80>
 8005760:	9b00      	ldr	r3, [sp, #0]
 8005762:	601a      	str	r2, [r3, #0]
 8005764:	e7e9      	b.n	800573a <_malloc_r+0xae>
 8005766:	0023      	movs	r3, r4
 8005768:	6864      	ldr	r4, [r4, #4]
 800576a:	e7a2      	b.n	80056b2 <_malloc_r+0x26>
 800576c:	002c      	movs	r4, r5
 800576e:	686d      	ldr	r5, [r5, #4]
 8005770:	e7ab      	b.n	80056ca <_malloc_r+0x3e>
 8005772:	0013      	movs	r3, r2
 8005774:	e7c4      	b.n	8005700 <_malloc_r+0x74>
 8005776:	230c      	movs	r3, #12
 8005778:	0030      	movs	r0, r6
 800577a:	6033      	str	r3, [r6, #0]
 800577c:	f000 f810 	bl	80057a0 <__malloc_unlock>
 8005780:	e7cb      	b.n	800571a <_malloc_r+0x8e>
 8005782:	6027      	str	r7, [r4, #0]
 8005784:	e7d9      	b.n	800573a <_malloc_r+0xae>
 8005786:	605b      	str	r3, [r3, #4]
 8005788:	deff      	udf	#255	; 0xff
 800578a:	46c0      	nop			; (mov r8, r8)
 800578c:	200002f8 	.word	0x200002f8

08005790 <__malloc_lock>:
 8005790:	b510      	push	{r4, lr}
 8005792:	4802      	ldr	r0, [pc, #8]	; (800579c <__malloc_lock+0xc>)
 8005794:	f000 fa78 	bl	8005c88 <__retarget_lock_acquire_recursive>
 8005798:	bd10      	pop	{r4, pc}
 800579a:	46c0      	nop			; (mov r8, r8)
 800579c:	20000440 	.word	0x20000440

080057a0 <__malloc_unlock>:
 80057a0:	b510      	push	{r4, lr}
 80057a2:	4802      	ldr	r0, [pc, #8]	; (80057ac <__malloc_unlock+0xc>)
 80057a4:	f000 fa71 	bl	8005c8a <__retarget_lock_release_recursive>
 80057a8:	bd10      	pop	{r4, pc}
 80057aa:	46c0      	nop			; (mov r8, r8)
 80057ac:	20000440 	.word	0x20000440

080057b0 <std>:
 80057b0:	2300      	movs	r3, #0
 80057b2:	b510      	push	{r4, lr}
 80057b4:	0004      	movs	r4, r0
 80057b6:	6003      	str	r3, [r0, #0]
 80057b8:	6043      	str	r3, [r0, #4]
 80057ba:	6083      	str	r3, [r0, #8]
 80057bc:	8181      	strh	r1, [r0, #12]
 80057be:	6643      	str	r3, [r0, #100]	; 0x64
 80057c0:	0019      	movs	r1, r3
 80057c2:	81c2      	strh	r2, [r0, #14]
 80057c4:	6103      	str	r3, [r0, #16]
 80057c6:	6143      	str	r3, [r0, #20]
 80057c8:	6183      	str	r3, [r0, #24]
 80057ca:	2208      	movs	r2, #8
 80057cc:	305c      	adds	r0, #92	; 0x5c
 80057ce:	f000 f91d 	bl	8005a0c <memset>
 80057d2:	4b05      	ldr	r3, [pc, #20]	; (80057e8 <std+0x38>)
 80057d4:	6224      	str	r4, [r4, #32]
 80057d6:	6263      	str	r3, [r4, #36]	; 0x24
 80057d8:	4b04      	ldr	r3, [pc, #16]	; (80057ec <std+0x3c>)
 80057da:	62a3      	str	r3, [r4, #40]	; 0x28
 80057dc:	4b04      	ldr	r3, [pc, #16]	; (80057f0 <std+0x40>)
 80057de:	62e3      	str	r3, [r4, #44]	; 0x2c
 80057e0:	4b04      	ldr	r3, [pc, #16]	; (80057f4 <std+0x44>)
 80057e2:	6323      	str	r3, [r4, #48]	; 0x30
 80057e4:	bd10      	pop	{r4, pc}
 80057e6:	46c0      	nop			; (mov r8, r8)
 80057e8:	08005975 	.word	0x08005975
 80057ec:	0800599d 	.word	0x0800599d
 80057f0:	080059d5 	.word	0x080059d5
 80057f4:	08005a01 	.word	0x08005a01

080057f8 <stdio_exit_handler>:
 80057f8:	b510      	push	{r4, lr}
 80057fa:	4a03      	ldr	r2, [pc, #12]	; (8005808 <stdio_exit_handler+0x10>)
 80057fc:	4903      	ldr	r1, [pc, #12]	; (800580c <stdio_exit_handler+0x14>)
 80057fe:	4804      	ldr	r0, [pc, #16]	; (8005810 <stdio_exit_handler+0x18>)
 8005800:	f000 f86c 	bl	80058dc <_fwalk_sglue>
 8005804:	bd10      	pop	{r4, pc}
 8005806:	46c0      	nop			; (mov r8, r8)
 8005808:	20000134 	.word	0x20000134
 800580c:	080066d1 	.word	0x080066d1
 8005810:	20000140 	.word	0x20000140

08005814 <cleanup_stdio>:
 8005814:	6841      	ldr	r1, [r0, #4]
 8005816:	4b0b      	ldr	r3, [pc, #44]	; (8005844 <cleanup_stdio+0x30>)
 8005818:	b510      	push	{r4, lr}
 800581a:	0004      	movs	r4, r0
 800581c:	4299      	cmp	r1, r3
 800581e:	d001      	beq.n	8005824 <cleanup_stdio+0x10>
 8005820:	f000 ff56 	bl	80066d0 <_fflush_r>
 8005824:	68a1      	ldr	r1, [r4, #8]
 8005826:	4b08      	ldr	r3, [pc, #32]	; (8005848 <cleanup_stdio+0x34>)
 8005828:	4299      	cmp	r1, r3
 800582a:	d002      	beq.n	8005832 <cleanup_stdio+0x1e>
 800582c:	0020      	movs	r0, r4
 800582e:	f000 ff4f 	bl	80066d0 <_fflush_r>
 8005832:	68e1      	ldr	r1, [r4, #12]
 8005834:	4b05      	ldr	r3, [pc, #20]	; (800584c <cleanup_stdio+0x38>)
 8005836:	4299      	cmp	r1, r3
 8005838:	d002      	beq.n	8005840 <cleanup_stdio+0x2c>
 800583a:	0020      	movs	r0, r4
 800583c:	f000 ff48 	bl	80066d0 <_fflush_r>
 8005840:	bd10      	pop	{r4, pc}
 8005842:	46c0      	nop			; (mov r8, r8)
 8005844:	20000300 	.word	0x20000300
 8005848:	20000368 	.word	0x20000368
 800584c:	200003d0 	.word	0x200003d0

08005850 <global_stdio_init.part.0>:
 8005850:	b510      	push	{r4, lr}
 8005852:	4b09      	ldr	r3, [pc, #36]	; (8005878 <global_stdio_init.part.0+0x28>)
 8005854:	4a09      	ldr	r2, [pc, #36]	; (800587c <global_stdio_init.part.0+0x2c>)
 8005856:	2104      	movs	r1, #4
 8005858:	601a      	str	r2, [r3, #0]
 800585a:	4809      	ldr	r0, [pc, #36]	; (8005880 <global_stdio_init.part.0+0x30>)
 800585c:	2200      	movs	r2, #0
 800585e:	f7ff ffa7 	bl	80057b0 <std>
 8005862:	2201      	movs	r2, #1
 8005864:	2109      	movs	r1, #9
 8005866:	4807      	ldr	r0, [pc, #28]	; (8005884 <global_stdio_init.part.0+0x34>)
 8005868:	f7ff ffa2 	bl	80057b0 <std>
 800586c:	2202      	movs	r2, #2
 800586e:	2112      	movs	r1, #18
 8005870:	4805      	ldr	r0, [pc, #20]	; (8005888 <global_stdio_init.part.0+0x38>)
 8005872:	f7ff ff9d 	bl	80057b0 <std>
 8005876:	bd10      	pop	{r4, pc}
 8005878:	20000438 	.word	0x20000438
 800587c:	080057f9 	.word	0x080057f9
 8005880:	20000300 	.word	0x20000300
 8005884:	20000368 	.word	0x20000368
 8005888:	200003d0 	.word	0x200003d0

0800588c <__sfp_lock_acquire>:
 800588c:	b510      	push	{r4, lr}
 800588e:	4802      	ldr	r0, [pc, #8]	; (8005898 <__sfp_lock_acquire+0xc>)
 8005890:	f000 f9fa 	bl	8005c88 <__retarget_lock_acquire_recursive>
 8005894:	bd10      	pop	{r4, pc}
 8005896:	46c0      	nop			; (mov r8, r8)
 8005898:	20000441 	.word	0x20000441

0800589c <__sfp_lock_release>:
 800589c:	b510      	push	{r4, lr}
 800589e:	4802      	ldr	r0, [pc, #8]	; (80058a8 <__sfp_lock_release+0xc>)
 80058a0:	f000 f9f3 	bl	8005c8a <__retarget_lock_release_recursive>
 80058a4:	bd10      	pop	{r4, pc}
 80058a6:	46c0      	nop			; (mov r8, r8)
 80058a8:	20000441 	.word	0x20000441

080058ac <__sinit>:
 80058ac:	b510      	push	{r4, lr}
 80058ae:	0004      	movs	r4, r0
 80058b0:	f7ff ffec 	bl	800588c <__sfp_lock_acquire>
 80058b4:	6a23      	ldr	r3, [r4, #32]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d002      	beq.n	80058c0 <__sinit+0x14>
 80058ba:	f7ff ffef 	bl	800589c <__sfp_lock_release>
 80058be:	bd10      	pop	{r4, pc}
 80058c0:	4b04      	ldr	r3, [pc, #16]	; (80058d4 <__sinit+0x28>)
 80058c2:	6223      	str	r3, [r4, #32]
 80058c4:	4b04      	ldr	r3, [pc, #16]	; (80058d8 <__sinit+0x2c>)
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d1f6      	bne.n	80058ba <__sinit+0xe>
 80058cc:	f7ff ffc0 	bl	8005850 <global_stdio_init.part.0>
 80058d0:	e7f3      	b.n	80058ba <__sinit+0xe>
 80058d2:	46c0      	nop			; (mov r8, r8)
 80058d4:	08005815 	.word	0x08005815
 80058d8:	20000438 	.word	0x20000438

080058dc <_fwalk_sglue>:
 80058dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80058de:	0014      	movs	r4, r2
 80058e0:	2600      	movs	r6, #0
 80058e2:	9000      	str	r0, [sp, #0]
 80058e4:	9101      	str	r1, [sp, #4]
 80058e6:	68a5      	ldr	r5, [r4, #8]
 80058e8:	6867      	ldr	r7, [r4, #4]
 80058ea:	3f01      	subs	r7, #1
 80058ec:	d504      	bpl.n	80058f8 <_fwalk_sglue+0x1c>
 80058ee:	6824      	ldr	r4, [r4, #0]
 80058f0:	2c00      	cmp	r4, #0
 80058f2:	d1f8      	bne.n	80058e6 <_fwalk_sglue+0xa>
 80058f4:	0030      	movs	r0, r6
 80058f6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80058f8:	89ab      	ldrh	r3, [r5, #12]
 80058fa:	2b01      	cmp	r3, #1
 80058fc:	d908      	bls.n	8005910 <_fwalk_sglue+0x34>
 80058fe:	220e      	movs	r2, #14
 8005900:	5eab      	ldrsh	r3, [r5, r2]
 8005902:	3301      	adds	r3, #1
 8005904:	d004      	beq.n	8005910 <_fwalk_sglue+0x34>
 8005906:	0029      	movs	r1, r5
 8005908:	9800      	ldr	r0, [sp, #0]
 800590a:	9b01      	ldr	r3, [sp, #4]
 800590c:	4798      	blx	r3
 800590e:	4306      	orrs	r6, r0
 8005910:	3568      	adds	r5, #104	; 0x68
 8005912:	e7ea      	b.n	80058ea <_fwalk_sglue+0xe>

08005914 <iprintf>:
 8005914:	b40f      	push	{r0, r1, r2, r3}
 8005916:	b507      	push	{r0, r1, r2, lr}
 8005918:	4905      	ldr	r1, [pc, #20]	; (8005930 <iprintf+0x1c>)
 800591a:	ab04      	add	r3, sp, #16
 800591c:	6808      	ldr	r0, [r1, #0]
 800591e:	cb04      	ldmia	r3!, {r2}
 8005920:	6881      	ldr	r1, [r0, #8]
 8005922:	9301      	str	r3, [sp, #4]
 8005924:	f000 fbae 	bl	8006084 <_vfiprintf_r>
 8005928:	b003      	add	sp, #12
 800592a:	bc08      	pop	{r3}
 800592c:	b004      	add	sp, #16
 800592e:	4718      	bx	r3
 8005930:	2000018c 	.word	0x2000018c

08005934 <siprintf>:
 8005934:	b40e      	push	{r1, r2, r3}
 8005936:	b500      	push	{lr}
 8005938:	490b      	ldr	r1, [pc, #44]	; (8005968 <siprintf+0x34>)
 800593a:	b09c      	sub	sp, #112	; 0x70
 800593c:	ab1d      	add	r3, sp, #116	; 0x74
 800593e:	9002      	str	r0, [sp, #8]
 8005940:	9006      	str	r0, [sp, #24]
 8005942:	9107      	str	r1, [sp, #28]
 8005944:	9104      	str	r1, [sp, #16]
 8005946:	4809      	ldr	r0, [pc, #36]	; (800596c <siprintf+0x38>)
 8005948:	4909      	ldr	r1, [pc, #36]	; (8005970 <siprintf+0x3c>)
 800594a:	cb04      	ldmia	r3!, {r2}
 800594c:	9105      	str	r1, [sp, #20]
 800594e:	6800      	ldr	r0, [r0, #0]
 8005950:	a902      	add	r1, sp, #8
 8005952:	9301      	str	r3, [sp, #4]
 8005954:	f000 fa6e 	bl	8005e34 <_svfiprintf_r>
 8005958:	2200      	movs	r2, #0
 800595a:	9b02      	ldr	r3, [sp, #8]
 800595c:	701a      	strb	r2, [r3, #0]
 800595e:	b01c      	add	sp, #112	; 0x70
 8005960:	bc08      	pop	{r3}
 8005962:	b003      	add	sp, #12
 8005964:	4718      	bx	r3
 8005966:	46c0      	nop			; (mov r8, r8)
 8005968:	7fffffff 	.word	0x7fffffff
 800596c:	2000018c 	.word	0x2000018c
 8005970:	ffff0208 	.word	0xffff0208

08005974 <__sread>:
 8005974:	b570      	push	{r4, r5, r6, lr}
 8005976:	000c      	movs	r4, r1
 8005978:	250e      	movs	r5, #14
 800597a:	5f49      	ldrsh	r1, [r1, r5]
 800597c:	f000 f920 	bl	8005bc0 <_read_r>
 8005980:	2800      	cmp	r0, #0
 8005982:	db03      	blt.n	800598c <__sread+0x18>
 8005984:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005986:	181b      	adds	r3, r3, r0
 8005988:	6563      	str	r3, [r4, #84]	; 0x54
 800598a:	bd70      	pop	{r4, r5, r6, pc}
 800598c:	89a3      	ldrh	r3, [r4, #12]
 800598e:	4a02      	ldr	r2, [pc, #8]	; (8005998 <__sread+0x24>)
 8005990:	4013      	ands	r3, r2
 8005992:	81a3      	strh	r3, [r4, #12]
 8005994:	e7f9      	b.n	800598a <__sread+0x16>
 8005996:	46c0      	nop			; (mov r8, r8)
 8005998:	ffffefff 	.word	0xffffefff

0800599c <__swrite>:
 800599c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800599e:	001f      	movs	r7, r3
 80059a0:	898b      	ldrh	r3, [r1, #12]
 80059a2:	0005      	movs	r5, r0
 80059a4:	000c      	movs	r4, r1
 80059a6:	0016      	movs	r6, r2
 80059a8:	05db      	lsls	r3, r3, #23
 80059aa:	d505      	bpl.n	80059b8 <__swrite+0x1c>
 80059ac:	230e      	movs	r3, #14
 80059ae:	5ec9      	ldrsh	r1, [r1, r3]
 80059b0:	2200      	movs	r2, #0
 80059b2:	2302      	movs	r3, #2
 80059b4:	f000 f8f0 	bl	8005b98 <_lseek_r>
 80059b8:	89a3      	ldrh	r3, [r4, #12]
 80059ba:	4a05      	ldr	r2, [pc, #20]	; (80059d0 <__swrite+0x34>)
 80059bc:	0028      	movs	r0, r5
 80059be:	4013      	ands	r3, r2
 80059c0:	81a3      	strh	r3, [r4, #12]
 80059c2:	0032      	movs	r2, r6
 80059c4:	230e      	movs	r3, #14
 80059c6:	5ee1      	ldrsh	r1, [r4, r3]
 80059c8:	003b      	movs	r3, r7
 80059ca:	f000 f91f 	bl	8005c0c <_write_r>
 80059ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80059d0:	ffffefff 	.word	0xffffefff

080059d4 <__sseek>:
 80059d4:	b570      	push	{r4, r5, r6, lr}
 80059d6:	000c      	movs	r4, r1
 80059d8:	250e      	movs	r5, #14
 80059da:	5f49      	ldrsh	r1, [r1, r5]
 80059dc:	f000 f8dc 	bl	8005b98 <_lseek_r>
 80059e0:	89a3      	ldrh	r3, [r4, #12]
 80059e2:	1c42      	adds	r2, r0, #1
 80059e4:	d103      	bne.n	80059ee <__sseek+0x1a>
 80059e6:	4a05      	ldr	r2, [pc, #20]	; (80059fc <__sseek+0x28>)
 80059e8:	4013      	ands	r3, r2
 80059ea:	81a3      	strh	r3, [r4, #12]
 80059ec:	bd70      	pop	{r4, r5, r6, pc}
 80059ee:	2280      	movs	r2, #128	; 0x80
 80059f0:	0152      	lsls	r2, r2, #5
 80059f2:	4313      	orrs	r3, r2
 80059f4:	81a3      	strh	r3, [r4, #12]
 80059f6:	6560      	str	r0, [r4, #84]	; 0x54
 80059f8:	e7f8      	b.n	80059ec <__sseek+0x18>
 80059fa:	46c0      	nop			; (mov r8, r8)
 80059fc:	ffffefff 	.word	0xffffefff

08005a00 <__sclose>:
 8005a00:	b510      	push	{r4, lr}
 8005a02:	230e      	movs	r3, #14
 8005a04:	5ec9      	ldrsh	r1, [r1, r3]
 8005a06:	f000 f8b5 	bl	8005b74 <_close_r>
 8005a0a:	bd10      	pop	{r4, pc}

08005a0c <memset>:
 8005a0c:	0003      	movs	r3, r0
 8005a0e:	1882      	adds	r2, r0, r2
 8005a10:	4293      	cmp	r3, r2
 8005a12:	d100      	bne.n	8005a16 <memset+0xa>
 8005a14:	4770      	bx	lr
 8005a16:	7019      	strb	r1, [r3, #0]
 8005a18:	3301      	adds	r3, #1
 8005a1a:	e7f9      	b.n	8005a10 <memset+0x4>

08005a1c <strdup>:
 8005a1c:	b510      	push	{r4, lr}
 8005a1e:	4b03      	ldr	r3, [pc, #12]	; (8005a2c <strdup+0x10>)
 8005a20:	0001      	movs	r1, r0
 8005a22:	6818      	ldr	r0, [r3, #0]
 8005a24:	f000 f804 	bl	8005a30 <_strdup_r>
 8005a28:	bd10      	pop	{r4, pc}
 8005a2a:	46c0      	nop			; (mov r8, r8)
 8005a2c:	2000018c 	.word	0x2000018c

08005a30 <_strdup_r>:
 8005a30:	b570      	push	{r4, r5, r6, lr}
 8005a32:	0004      	movs	r4, r0
 8005a34:	0008      	movs	r0, r1
 8005a36:	000d      	movs	r5, r1
 8005a38:	f7fa fb70 	bl	800011c <strlen>
 8005a3c:	1c46      	adds	r6, r0, #1
 8005a3e:	0031      	movs	r1, r6
 8005a40:	0020      	movs	r0, r4
 8005a42:	f7ff fe23 	bl	800568c <_malloc_r>
 8005a46:	1e04      	subs	r4, r0, #0
 8005a48:	d003      	beq.n	8005a52 <_strdup_r+0x22>
 8005a4a:	0032      	movs	r2, r6
 8005a4c:	0029      	movs	r1, r5
 8005a4e:	f000 f91d 	bl	8005c8c <memcpy>
 8005a52:	0020      	movs	r0, r4
 8005a54:	bd70      	pop	{r4, r5, r6, pc}

08005a56 <strncmp>:
 8005a56:	b530      	push	{r4, r5, lr}
 8005a58:	0005      	movs	r5, r0
 8005a5a:	1e10      	subs	r0, r2, #0
 8005a5c:	d00b      	beq.n	8005a76 <strncmp+0x20>
 8005a5e:	2400      	movs	r4, #0
 8005a60:	3a01      	subs	r2, #1
 8005a62:	5d2b      	ldrb	r3, [r5, r4]
 8005a64:	5d08      	ldrb	r0, [r1, r4]
 8005a66:	4283      	cmp	r3, r0
 8005a68:	d104      	bne.n	8005a74 <strncmp+0x1e>
 8005a6a:	42a2      	cmp	r2, r4
 8005a6c:	d002      	beq.n	8005a74 <strncmp+0x1e>
 8005a6e:	3401      	adds	r4, #1
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d1f6      	bne.n	8005a62 <strncmp+0xc>
 8005a74:	1a18      	subs	r0, r3, r0
 8005a76:	bd30      	pop	{r4, r5, pc}

08005a78 <strpbrk>:
 8005a78:	b510      	push	{r4, lr}
 8005a7a:	7803      	ldrb	r3, [r0, #0]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d013      	beq.n	8005aa8 <strpbrk+0x30>
 8005a80:	000b      	movs	r3, r1
 8005a82:	7802      	ldrb	r2, [r0, #0]
 8005a84:	2a00      	cmp	r2, #0
 8005a86:	d10d      	bne.n	8005aa4 <strpbrk+0x2c>
 8005a88:	781b      	ldrb	r3, [r3, #0]
 8005a8a:	1e5a      	subs	r2, r3, #1
 8005a8c:	4193      	sbcs	r3, r2
 8005a8e:	425b      	negs	r3, r3
 8005a90:	4018      	ands	r0, r3
 8005a92:	bd10      	pop	{r4, pc}
 8005a94:	4294      	cmp	r4, r2
 8005a96:	d0fc      	beq.n	8005a92 <strpbrk+0x1a>
 8005a98:	3301      	adds	r3, #1
 8005a9a:	781c      	ldrb	r4, [r3, #0]
 8005a9c:	2c00      	cmp	r4, #0
 8005a9e:	d1f9      	bne.n	8005a94 <strpbrk+0x1c>
 8005aa0:	3001      	adds	r0, #1
 8005aa2:	e7ee      	b.n	8005a82 <strpbrk+0xa>
 8005aa4:	000b      	movs	r3, r1
 8005aa6:	e7f8      	b.n	8005a9a <strpbrk+0x22>
 8005aa8:	0018      	movs	r0, r3
 8005aaa:	e7f2      	b.n	8005a92 <strpbrk+0x1a>

08005aac <strtok>:
 8005aac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005aae:	4b16      	ldr	r3, [pc, #88]	; (8005b08 <strtok+0x5c>)
 8005ab0:	0005      	movs	r5, r0
 8005ab2:	681f      	ldr	r7, [r3, #0]
 8005ab4:	000e      	movs	r6, r1
 8005ab6:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 8005ab8:	2c00      	cmp	r4, #0
 8005aba:	d11d      	bne.n	8005af8 <strtok+0x4c>
 8005abc:	2050      	movs	r0, #80	; 0x50
 8005abe:	f7ff fdaf 	bl	8005620 <malloc>
 8005ac2:	1e02      	subs	r2, r0, #0
 8005ac4:	6478      	str	r0, [r7, #68]	; 0x44
 8005ac6:	d104      	bne.n	8005ad2 <strtok+0x26>
 8005ac8:	215b      	movs	r1, #91	; 0x5b
 8005aca:	4b10      	ldr	r3, [pc, #64]	; (8005b0c <strtok+0x60>)
 8005acc:	4810      	ldr	r0, [pc, #64]	; (8005b10 <strtok+0x64>)
 8005ace:	f000 f8e7 	bl	8005ca0 <__assert_func>
 8005ad2:	6004      	str	r4, [r0, #0]
 8005ad4:	6044      	str	r4, [r0, #4]
 8005ad6:	6084      	str	r4, [r0, #8]
 8005ad8:	60c4      	str	r4, [r0, #12]
 8005ada:	6104      	str	r4, [r0, #16]
 8005adc:	6144      	str	r4, [r0, #20]
 8005ade:	6184      	str	r4, [r0, #24]
 8005ae0:	6284      	str	r4, [r0, #40]	; 0x28
 8005ae2:	62c4      	str	r4, [r0, #44]	; 0x2c
 8005ae4:	6304      	str	r4, [r0, #48]	; 0x30
 8005ae6:	6344      	str	r4, [r0, #52]	; 0x34
 8005ae8:	6384      	str	r4, [r0, #56]	; 0x38
 8005aea:	63c4      	str	r4, [r0, #60]	; 0x3c
 8005aec:	6404      	str	r4, [r0, #64]	; 0x40
 8005aee:	6444      	str	r4, [r0, #68]	; 0x44
 8005af0:	6484      	str	r4, [r0, #72]	; 0x48
 8005af2:	64c4      	str	r4, [r0, #76]	; 0x4c
 8005af4:	7704      	strb	r4, [r0, #28]
 8005af6:	6244      	str	r4, [r0, #36]	; 0x24
 8005af8:	0031      	movs	r1, r6
 8005afa:	0028      	movs	r0, r5
 8005afc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005afe:	2301      	movs	r3, #1
 8005b00:	f000 f808 	bl	8005b14 <__strtok_r>
 8005b04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005b06:	46c0      	nop			; (mov r8, r8)
 8005b08:	2000018c 	.word	0x2000018c
 8005b0c:	08006d85 	.word	0x08006d85
 8005b10:	08006d9c 	.word	0x08006d9c

08005b14 <__strtok_r>:
 8005b14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b16:	2800      	cmp	r0, #0
 8005b18:	d102      	bne.n	8005b20 <__strtok_r+0xc>
 8005b1a:	6810      	ldr	r0, [r2, #0]
 8005b1c:	2800      	cmp	r0, #0
 8005b1e:	d013      	beq.n	8005b48 <__strtok_r+0x34>
 8005b20:	0004      	movs	r4, r0
 8005b22:	0020      	movs	r0, r4
 8005b24:	000e      	movs	r6, r1
 8005b26:	7805      	ldrb	r5, [r0, #0]
 8005b28:	3401      	adds	r4, #1
 8005b2a:	7837      	ldrb	r7, [r6, #0]
 8005b2c:	2f00      	cmp	r7, #0
 8005b2e:	d104      	bne.n	8005b3a <__strtok_r+0x26>
 8005b30:	2d00      	cmp	r5, #0
 8005b32:	d10f      	bne.n	8005b54 <__strtok_r+0x40>
 8005b34:	0028      	movs	r0, r5
 8005b36:	6015      	str	r5, [r2, #0]
 8005b38:	e006      	b.n	8005b48 <__strtok_r+0x34>
 8005b3a:	3601      	adds	r6, #1
 8005b3c:	42bd      	cmp	r5, r7
 8005b3e:	d1f4      	bne.n	8005b2a <__strtok_r+0x16>
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d1ee      	bne.n	8005b22 <__strtok_r+0xe>
 8005b44:	6014      	str	r4, [r2, #0]
 8005b46:	7003      	strb	r3, [r0, #0]
 8005b48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005b4a:	002f      	movs	r7, r5
 8005b4c:	e00f      	b.n	8005b6e <__strtok_r+0x5a>
 8005b4e:	3301      	adds	r3, #1
 8005b50:	2e00      	cmp	r6, #0
 8005b52:	d104      	bne.n	8005b5e <__strtok_r+0x4a>
 8005b54:	0023      	movs	r3, r4
 8005b56:	3401      	adds	r4, #1
 8005b58:	781d      	ldrb	r5, [r3, #0]
 8005b5a:	0027      	movs	r7, r4
 8005b5c:	000b      	movs	r3, r1
 8005b5e:	781e      	ldrb	r6, [r3, #0]
 8005b60:	42b5      	cmp	r5, r6
 8005b62:	d1f4      	bne.n	8005b4e <__strtok_r+0x3a>
 8005b64:	2d00      	cmp	r5, #0
 8005b66:	d0f0      	beq.n	8005b4a <__strtok_r+0x36>
 8005b68:	2300      	movs	r3, #0
 8005b6a:	3c01      	subs	r4, #1
 8005b6c:	7023      	strb	r3, [r4, #0]
 8005b6e:	6017      	str	r7, [r2, #0]
 8005b70:	e7ea      	b.n	8005b48 <__strtok_r+0x34>
	...

08005b74 <_close_r>:
 8005b74:	2300      	movs	r3, #0
 8005b76:	b570      	push	{r4, r5, r6, lr}
 8005b78:	4d06      	ldr	r5, [pc, #24]	; (8005b94 <_close_r+0x20>)
 8005b7a:	0004      	movs	r4, r0
 8005b7c:	0008      	movs	r0, r1
 8005b7e:	602b      	str	r3, [r5, #0]
 8005b80:	f7fc fa45 	bl	800200e <_close>
 8005b84:	1c43      	adds	r3, r0, #1
 8005b86:	d103      	bne.n	8005b90 <_close_r+0x1c>
 8005b88:	682b      	ldr	r3, [r5, #0]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d000      	beq.n	8005b90 <_close_r+0x1c>
 8005b8e:	6023      	str	r3, [r4, #0]
 8005b90:	bd70      	pop	{r4, r5, r6, pc}
 8005b92:	46c0      	nop			; (mov r8, r8)
 8005b94:	2000043c 	.word	0x2000043c

08005b98 <_lseek_r>:
 8005b98:	b570      	push	{r4, r5, r6, lr}
 8005b9a:	0004      	movs	r4, r0
 8005b9c:	0008      	movs	r0, r1
 8005b9e:	0011      	movs	r1, r2
 8005ba0:	001a      	movs	r2, r3
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	4d05      	ldr	r5, [pc, #20]	; (8005bbc <_lseek_r+0x24>)
 8005ba6:	602b      	str	r3, [r5, #0]
 8005ba8:	f7fc fa52 	bl	8002050 <_lseek>
 8005bac:	1c43      	adds	r3, r0, #1
 8005bae:	d103      	bne.n	8005bb8 <_lseek_r+0x20>
 8005bb0:	682b      	ldr	r3, [r5, #0]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d000      	beq.n	8005bb8 <_lseek_r+0x20>
 8005bb6:	6023      	str	r3, [r4, #0]
 8005bb8:	bd70      	pop	{r4, r5, r6, pc}
 8005bba:	46c0      	nop			; (mov r8, r8)
 8005bbc:	2000043c 	.word	0x2000043c

08005bc0 <_read_r>:
 8005bc0:	b570      	push	{r4, r5, r6, lr}
 8005bc2:	0004      	movs	r4, r0
 8005bc4:	0008      	movs	r0, r1
 8005bc6:	0011      	movs	r1, r2
 8005bc8:	001a      	movs	r2, r3
 8005bca:	2300      	movs	r3, #0
 8005bcc:	4d05      	ldr	r5, [pc, #20]	; (8005be4 <_read_r+0x24>)
 8005bce:	602b      	str	r3, [r5, #0]
 8005bd0:	f7fc f9e4 	bl	8001f9c <_read>
 8005bd4:	1c43      	adds	r3, r0, #1
 8005bd6:	d103      	bne.n	8005be0 <_read_r+0x20>
 8005bd8:	682b      	ldr	r3, [r5, #0]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d000      	beq.n	8005be0 <_read_r+0x20>
 8005bde:	6023      	str	r3, [r4, #0]
 8005be0:	bd70      	pop	{r4, r5, r6, pc}
 8005be2:	46c0      	nop			; (mov r8, r8)
 8005be4:	2000043c 	.word	0x2000043c

08005be8 <_sbrk_r>:
 8005be8:	2300      	movs	r3, #0
 8005bea:	b570      	push	{r4, r5, r6, lr}
 8005bec:	4d06      	ldr	r5, [pc, #24]	; (8005c08 <_sbrk_r+0x20>)
 8005bee:	0004      	movs	r4, r0
 8005bf0:	0008      	movs	r0, r1
 8005bf2:	602b      	str	r3, [r5, #0]
 8005bf4:	f7fc fa38 	bl	8002068 <_sbrk>
 8005bf8:	1c43      	adds	r3, r0, #1
 8005bfa:	d103      	bne.n	8005c04 <_sbrk_r+0x1c>
 8005bfc:	682b      	ldr	r3, [r5, #0]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d000      	beq.n	8005c04 <_sbrk_r+0x1c>
 8005c02:	6023      	str	r3, [r4, #0]
 8005c04:	bd70      	pop	{r4, r5, r6, pc}
 8005c06:	46c0      	nop			; (mov r8, r8)
 8005c08:	2000043c 	.word	0x2000043c

08005c0c <_write_r>:
 8005c0c:	b570      	push	{r4, r5, r6, lr}
 8005c0e:	0004      	movs	r4, r0
 8005c10:	0008      	movs	r0, r1
 8005c12:	0011      	movs	r1, r2
 8005c14:	001a      	movs	r2, r3
 8005c16:	2300      	movs	r3, #0
 8005c18:	4d05      	ldr	r5, [pc, #20]	; (8005c30 <_write_r+0x24>)
 8005c1a:	602b      	str	r3, [r5, #0]
 8005c1c:	f7fc f9db 	bl	8001fd6 <_write>
 8005c20:	1c43      	adds	r3, r0, #1
 8005c22:	d103      	bne.n	8005c2c <_write_r+0x20>
 8005c24:	682b      	ldr	r3, [r5, #0]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d000      	beq.n	8005c2c <_write_r+0x20>
 8005c2a:	6023      	str	r3, [r4, #0]
 8005c2c:	bd70      	pop	{r4, r5, r6, pc}
 8005c2e:	46c0      	nop			; (mov r8, r8)
 8005c30:	2000043c 	.word	0x2000043c

08005c34 <__errno>:
 8005c34:	4b01      	ldr	r3, [pc, #4]	; (8005c3c <__errno+0x8>)
 8005c36:	6818      	ldr	r0, [r3, #0]
 8005c38:	4770      	bx	lr
 8005c3a:	46c0      	nop			; (mov r8, r8)
 8005c3c:	2000018c 	.word	0x2000018c

08005c40 <__libc_init_array>:
 8005c40:	b570      	push	{r4, r5, r6, lr}
 8005c42:	2600      	movs	r6, #0
 8005c44:	4c0c      	ldr	r4, [pc, #48]	; (8005c78 <__libc_init_array+0x38>)
 8005c46:	4d0d      	ldr	r5, [pc, #52]	; (8005c7c <__libc_init_array+0x3c>)
 8005c48:	1b64      	subs	r4, r4, r5
 8005c4a:	10a4      	asrs	r4, r4, #2
 8005c4c:	42a6      	cmp	r6, r4
 8005c4e:	d109      	bne.n	8005c64 <__libc_init_array+0x24>
 8005c50:	2600      	movs	r6, #0
 8005c52:	f000 ff4f 	bl	8006af4 <_init>
 8005c56:	4c0a      	ldr	r4, [pc, #40]	; (8005c80 <__libc_init_array+0x40>)
 8005c58:	4d0a      	ldr	r5, [pc, #40]	; (8005c84 <__libc_init_array+0x44>)
 8005c5a:	1b64      	subs	r4, r4, r5
 8005c5c:	10a4      	asrs	r4, r4, #2
 8005c5e:	42a6      	cmp	r6, r4
 8005c60:	d105      	bne.n	8005c6e <__libc_init_array+0x2e>
 8005c62:	bd70      	pop	{r4, r5, r6, pc}
 8005c64:	00b3      	lsls	r3, r6, #2
 8005c66:	58eb      	ldr	r3, [r5, r3]
 8005c68:	4798      	blx	r3
 8005c6a:	3601      	adds	r6, #1
 8005c6c:	e7ee      	b.n	8005c4c <__libc_init_array+0xc>
 8005c6e:	00b3      	lsls	r3, r6, #2
 8005c70:	58eb      	ldr	r3, [r5, r3]
 8005c72:	4798      	blx	r3
 8005c74:	3601      	adds	r6, #1
 8005c76:	e7f2      	b.n	8005c5e <__libc_init_array+0x1e>
 8005c78:	08006e70 	.word	0x08006e70
 8005c7c:	08006e70 	.word	0x08006e70
 8005c80:	08006e74 	.word	0x08006e74
 8005c84:	08006e70 	.word	0x08006e70

08005c88 <__retarget_lock_acquire_recursive>:
 8005c88:	4770      	bx	lr

08005c8a <__retarget_lock_release_recursive>:
 8005c8a:	4770      	bx	lr

08005c8c <memcpy>:
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	b510      	push	{r4, lr}
 8005c90:	429a      	cmp	r2, r3
 8005c92:	d100      	bne.n	8005c96 <memcpy+0xa>
 8005c94:	bd10      	pop	{r4, pc}
 8005c96:	5ccc      	ldrb	r4, [r1, r3]
 8005c98:	54c4      	strb	r4, [r0, r3]
 8005c9a:	3301      	adds	r3, #1
 8005c9c:	e7f8      	b.n	8005c90 <memcpy+0x4>
	...

08005ca0 <__assert_func>:
 8005ca0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8005ca2:	0014      	movs	r4, r2
 8005ca4:	001a      	movs	r2, r3
 8005ca6:	4b09      	ldr	r3, [pc, #36]	; (8005ccc <__assert_func+0x2c>)
 8005ca8:	0005      	movs	r5, r0
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	000e      	movs	r6, r1
 8005cae:	68d8      	ldr	r0, [r3, #12]
 8005cb0:	4b07      	ldr	r3, [pc, #28]	; (8005cd0 <__assert_func+0x30>)
 8005cb2:	2c00      	cmp	r4, #0
 8005cb4:	d101      	bne.n	8005cba <__assert_func+0x1a>
 8005cb6:	4b07      	ldr	r3, [pc, #28]	; (8005cd4 <__assert_func+0x34>)
 8005cb8:	001c      	movs	r4, r3
 8005cba:	4907      	ldr	r1, [pc, #28]	; (8005cd8 <__assert_func+0x38>)
 8005cbc:	9301      	str	r3, [sp, #4]
 8005cbe:	9402      	str	r4, [sp, #8]
 8005cc0:	002b      	movs	r3, r5
 8005cc2:	9600      	str	r6, [sp, #0]
 8005cc4:	f000 fd30 	bl	8006728 <fiprintf>
 8005cc8:	f000 fe02 	bl	80068d0 <abort>
 8005ccc:	2000018c 	.word	0x2000018c
 8005cd0:	08006df6 	.word	0x08006df6
 8005cd4:	08006e31 	.word	0x08006e31
 8005cd8:	08006e03 	.word	0x08006e03

08005cdc <_free_r>:
 8005cdc:	b570      	push	{r4, r5, r6, lr}
 8005cde:	0005      	movs	r5, r0
 8005ce0:	2900      	cmp	r1, #0
 8005ce2:	d010      	beq.n	8005d06 <_free_r+0x2a>
 8005ce4:	1f0c      	subs	r4, r1, #4
 8005ce6:	6823      	ldr	r3, [r4, #0]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	da00      	bge.n	8005cee <_free_r+0x12>
 8005cec:	18e4      	adds	r4, r4, r3
 8005cee:	0028      	movs	r0, r5
 8005cf0:	f7ff fd4e 	bl	8005790 <__malloc_lock>
 8005cf4:	4a1d      	ldr	r2, [pc, #116]	; (8005d6c <_free_r+0x90>)
 8005cf6:	6813      	ldr	r3, [r2, #0]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d105      	bne.n	8005d08 <_free_r+0x2c>
 8005cfc:	6063      	str	r3, [r4, #4]
 8005cfe:	6014      	str	r4, [r2, #0]
 8005d00:	0028      	movs	r0, r5
 8005d02:	f7ff fd4d 	bl	80057a0 <__malloc_unlock>
 8005d06:	bd70      	pop	{r4, r5, r6, pc}
 8005d08:	42a3      	cmp	r3, r4
 8005d0a:	d908      	bls.n	8005d1e <_free_r+0x42>
 8005d0c:	6820      	ldr	r0, [r4, #0]
 8005d0e:	1821      	adds	r1, r4, r0
 8005d10:	428b      	cmp	r3, r1
 8005d12:	d1f3      	bne.n	8005cfc <_free_r+0x20>
 8005d14:	6819      	ldr	r1, [r3, #0]
 8005d16:	685b      	ldr	r3, [r3, #4]
 8005d18:	1809      	adds	r1, r1, r0
 8005d1a:	6021      	str	r1, [r4, #0]
 8005d1c:	e7ee      	b.n	8005cfc <_free_r+0x20>
 8005d1e:	001a      	movs	r2, r3
 8005d20:	685b      	ldr	r3, [r3, #4]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d001      	beq.n	8005d2a <_free_r+0x4e>
 8005d26:	42a3      	cmp	r3, r4
 8005d28:	d9f9      	bls.n	8005d1e <_free_r+0x42>
 8005d2a:	6811      	ldr	r1, [r2, #0]
 8005d2c:	1850      	adds	r0, r2, r1
 8005d2e:	42a0      	cmp	r0, r4
 8005d30:	d10b      	bne.n	8005d4a <_free_r+0x6e>
 8005d32:	6820      	ldr	r0, [r4, #0]
 8005d34:	1809      	adds	r1, r1, r0
 8005d36:	1850      	adds	r0, r2, r1
 8005d38:	6011      	str	r1, [r2, #0]
 8005d3a:	4283      	cmp	r3, r0
 8005d3c:	d1e0      	bne.n	8005d00 <_free_r+0x24>
 8005d3e:	6818      	ldr	r0, [r3, #0]
 8005d40:	685b      	ldr	r3, [r3, #4]
 8005d42:	1841      	adds	r1, r0, r1
 8005d44:	6011      	str	r1, [r2, #0]
 8005d46:	6053      	str	r3, [r2, #4]
 8005d48:	e7da      	b.n	8005d00 <_free_r+0x24>
 8005d4a:	42a0      	cmp	r0, r4
 8005d4c:	d902      	bls.n	8005d54 <_free_r+0x78>
 8005d4e:	230c      	movs	r3, #12
 8005d50:	602b      	str	r3, [r5, #0]
 8005d52:	e7d5      	b.n	8005d00 <_free_r+0x24>
 8005d54:	6820      	ldr	r0, [r4, #0]
 8005d56:	1821      	adds	r1, r4, r0
 8005d58:	428b      	cmp	r3, r1
 8005d5a:	d103      	bne.n	8005d64 <_free_r+0x88>
 8005d5c:	6819      	ldr	r1, [r3, #0]
 8005d5e:	685b      	ldr	r3, [r3, #4]
 8005d60:	1809      	adds	r1, r1, r0
 8005d62:	6021      	str	r1, [r4, #0]
 8005d64:	6063      	str	r3, [r4, #4]
 8005d66:	6054      	str	r4, [r2, #4]
 8005d68:	e7ca      	b.n	8005d00 <_free_r+0x24>
 8005d6a:	46c0      	nop			; (mov r8, r8)
 8005d6c:	200002f8 	.word	0x200002f8

08005d70 <__ssputs_r>:
 8005d70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005d72:	b085      	sub	sp, #20
 8005d74:	9301      	str	r3, [sp, #4]
 8005d76:	9203      	str	r2, [sp, #12]
 8005d78:	688e      	ldr	r6, [r1, #8]
 8005d7a:	9a01      	ldr	r2, [sp, #4]
 8005d7c:	0007      	movs	r7, r0
 8005d7e:	000c      	movs	r4, r1
 8005d80:	680b      	ldr	r3, [r1, #0]
 8005d82:	4296      	cmp	r6, r2
 8005d84:	d831      	bhi.n	8005dea <__ssputs_r+0x7a>
 8005d86:	898a      	ldrh	r2, [r1, #12]
 8005d88:	2190      	movs	r1, #144	; 0x90
 8005d8a:	00c9      	lsls	r1, r1, #3
 8005d8c:	420a      	tst	r2, r1
 8005d8e:	d029      	beq.n	8005de4 <__ssputs_r+0x74>
 8005d90:	2003      	movs	r0, #3
 8005d92:	6921      	ldr	r1, [r4, #16]
 8005d94:	1a5b      	subs	r3, r3, r1
 8005d96:	9302      	str	r3, [sp, #8]
 8005d98:	6963      	ldr	r3, [r4, #20]
 8005d9a:	4343      	muls	r3, r0
 8005d9c:	0fdd      	lsrs	r5, r3, #31
 8005d9e:	18ed      	adds	r5, r5, r3
 8005da0:	9b01      	ldr	r3, [sp, #4]
 8005da2:	9802      	ldr	r0, [sp, #8]
 8005da4:	3301      	adds	r3, #1
 8005da6:	181b      	adds	r3, r3, r0
 8005da8:	106d      	asrs	r5, r5, #1
 8005daa:	42ab      	cmp	r3, r5
 8005dac:	d900      	bls.n	8005db0 <__ssputs_r+0x40>
 8005dae:	001d      	movs	r5, r3
 8005db0:	0552      	lsls	r2, r2, #21
 8005db2:	d529      	bpl.n	8005e08 <__ssputs_r+0x98>
 8005db4:	0029      	movs	r1, r5
 8005db6:	0038      	movs	r0, r7
 8005db8:	f7ff fc68 	bl	800568c <_malloc_r>
 8005dbc:	1e06      	subs	r6, r0, #0
 8005dbe:	d02d      	beq.n	8005e1c <__ssputs_r+0xac>
 8005dc0:	9a02      	ldr	r2, [sp, #8]
 8005dc2:	6921      	ldr	r1, [r4, #16]
 8005dc4:	f7ff ff62 	bl	8005c8c <memcpy>
 8005dc8:	89a2      	ldrh	r2, [r4, #12]
 8005dca:	4b19      	ldr	r3, [pc, #100]	; (8005e30 <__ssputs_r+0xc0>)
 8005dcc:	401a      	ands	r2, r3
 8005dce:	2380      	movs	r3, #128	; 0x80
 8005dd0:	4313      	orrs	r3, r2
 8005dd2:	81a3      	strh	r3, [r4, #12]
 8005dd4:	9b02      	ldr	r3, [sp, #8]
 8005dd6:	6126      	str	r6, [r4, #16]
 8005dd8:	18f6      	adds	r6, r6, r3
 8005dda:	6026      	str	r6, [r4, #0]
 8005ddc:	6165      	str	r5, [r4, #20]
 8005dde:	9e01      	ldr	r6, [sp, #4]
 8005de0:	1aed      	subs	r5, r5, r3
 8005de2:	60a5      	str	r5, [r4, #8]
 8005de4:	9b01      	ldr	r3, [sp, #4]
 8005de6:	429e      	cmp	r6, r3
 8005de8:	d900      	bls.n	8005dec <__ssputs_r+0x7c>
 8005dea:	9e01      	ldr	r6, [sp, #4]
 8005dec:	0032      	movs	r2, r6
 8005dee:	9903      	ldr	r1, [sp, #12]
 8005df0:	6820      	ldr	r0, [r4, #0]
 8005df2:	f000 fd4f 	bl	8006894 <memmove>
 8005df6:	2000      	movs	r0, #0
 8005df8:	68a3      	ldr	r3, [r4, #8]
 8005dfa:	1b9b      	subs	r3, r3, r6
 8005dfc:	60a3      	str	r3, [r4, #8]
 8005dfe:	6823      	ldr	r3, [r4, #0]
 8005e00:	199b      	adds	r3, r3, r6
 8005e02:	6023      	str	r3, [r4, #0]
 8005e04:	b005      	add	sp, #20
 8005e06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005e08:	002a      	movs	r2, r5
 8005e0a:	0038      	movs	r0, r7
 8005e0c:	f000 fd67 	bl	80068de <_realloc_r>
 8005e10:	1e06      	subs	r6, r0, #0
 8005e12:	d1df      	bne.n	8005dd4 <__ssputs_r+0x64>
 8005e14:	0038      	movs	r0, r7
 8005e16:	6921      	ldr	r1, [r4, #16]
 8005e18:	f7ff ff60 	bl	8005cdc <_free_r>
 8005e1c:	230c      	movs	r3, #12
 8005e1e:	2001      	movs	r0, #1
 8005e20:	603b      	str	r3, [r7, #0]
 8005e22:	89a2      	ldrh	r2, [r4, #12]
 8005e24:	3334      	adds	r3, #52	; 0x34
 8005e26:	4313      	orrs	r3, r2
 8005e28:	81a3      	strh	r3, [r4, #12]
 8005e2a:	4240      	negs	r0, r0
 8005e2c:	e7ea      	b.n	8005e04 <__ssputs_r+0x94>
 8005e2e:	46c0      	nop			; (mov r8, r8)
 8005e30:	fffffb7f 	.word	0xfffffb7f

08005e34 <_svfiprintf_r>:
 8005e34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005e36:	b0a1      	sub	sp, #132	; 0x84
 8005e38:	9003      	str	r0, [sp, #12]
 8005e3a:	001d      	movs	r5, r3
 8005e3c:	898b      	ldrh	r3, [r1, #12]
 8005e3e:	000f      	movs	r7, r1
 8005e40:	0016      	movs	r6, r2
 8005e42:	061b      	lsls	r3, r3, #24
 8005e44:	d511      	bpl.n	8005e6a <_svfiprintf_r+0x36>
 8005e46:	690b      	ldr	r3, [r1, #16]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d10e      	bne.n	8005e6a <_svfiprintf_r+0x36>
 8005e4c:	2140      	movs	r1, #64	; 0x40
 8005e4e:	f7ff fc1d 	bl	800568c <_malloc_r>
 8005e52:	6038      	str	r0, [r7, #0]
 8005e54:	6138      	str	r0, [r7, #16]
 8005e56:	2800      	cmp	r0, #0
 8005e58:	d105      	bne.n	8005e66 <_svfiprintf_r+0x32>
 8005e5a:	230c      	movs	r3, #12
 8005e5c:	9a03      	ldr	r2, [sp, #12]
 8005e5e:	3801      	subs	r0, #1
 8005e60:	6013      	str	r3, [r2, #0]
 8005e62:	b021      	add	sp, #132	; 0x84
 8005e64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005e66:	2340      	movs	r3, #64	; 0x40
 8005e68:	617b      	str	r3, [r7, #20]
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	ac08      	add	r4, sp, #32
 8005e6e:	6163      	str	r3, [r4, #20]
 8005e70:	3320      	adds	r3, #32
 8005e72:	7663      	strb	r3, [r4, #25]
 8005e74:	3310      	adds	r3, #16
 8005e76:	76a3      	strb	r3, [r4, #26]
 8005e78:	9507      	str	r5, [sp, #28]
 8005e7a:	0035      	movs	r5, r6
 8005e7c:	782b      	ldrb	r3, [r5, #0]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d001      	beq.n	8005e86 <_svfiprintf_r+0x52>
 8005e82:	2b25      	cmp	r3, #37	; 0x25
 8005e84:	d148      	bne.n	8005f18 <_svfiprintf_r+0xe4>
 8005e86:	1bab      	subs	r3, r5, r6
 8005e88:	9305      	str	r3, [sp, #20]
 8005e8a:	42b5      	cmp	r5, r6
 8005e8c:	d00b      	beq.n	8005ea6 <_svfiprintf_r+0x72>
 8005e8e:	0032      	movs	r2, r6
 8005e90:	0039      	movs	r1, r7
 8005e92:	9803      	ldr	r0, [sp, #12]
 8005e94:	f7ff ff6c 	bl	8005d70 <__ssputs_r>
 8005e98:	3001      	adds	r0, #1
 8005e9a:	d100      	bne.n	8005e9e <_svfiprintf_r+0x6a>
 8005e9c:	e0af      	b.n	8005ffe <_svfiprintf_r+0x1ca>
 8005e9e:	6963      	ldr	r3, [r4, #20]
 8005ea0:	9a05      	ldr	r2, [sp, #20]
 8005ea2:	189b      	adds	r3, r3, r2
 8005ea4:	6163      	str	r3, [r4, #20]
 8005ea6:	782b      	ldrb	r3, [r5, #0]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d100      	bne.n	8005eae <_svfiprintf_r+0x7a>
 8005eac:	e0a7      	b.n	8005ffe <_svfiprintf_r+0x1ca>
 8005eae:	2201      	movs	r2, #1
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	4252      	negs	r2, r2
 8005eb4:	6062      	str	r2, [r4, #4]
 8005eb6:	a904      	add	r1, sp, #16
 8005eb8:	3254      	adds	r2, #84	; 0x54
 8005eba:	1852      	adds	r2, r2, r1
 8005ebc:	1c6e      	adds	r6, r5, #1
 8005ebe:	6023      	str	r3, [r4, #0]
 8005ec0:	60e3      	str	r3, [r4, #12]
 8005ec2:	60a3      	str	r3, [r4, #8]
 8005ec4:	7013      	strb	r3, [r2, #0]
 8005ec6:	65a3      	str	r3, [r4, #88]	; 0x58
 8005ec8:	4b55      	ldr	r3, [pc, #340]	; (8006020 <_svfiprintf_r+0x1ec>)
 8005eca:	2205      	movs	r2, #5
 8005ecc:	0018      	movs	r0, r3
 8005ece:	7831      	ldrb	r1, [r6, #0]
 8005ed0:	9305      	str	r3, [sp, #20]
 8005ed2:	f000 fcf2 	bl	80068ba <memchr>
 8005ed6:	1c75      	adds	r5, r6, #1
 8005ed8:	2800      	cmp	r0, #0
 8005eda:	d11f      	bne.n	8005f1c <_svfiprintf_r+0xe8>
 8005edc:	6822      	ldr	r2, [r4, #0]
 8005ede:	06d3      	lsls	r3, r2, #27
 8005ee0:	d504      	bpl.n	8005eec <_svfiprintf_r+0xb8>
 8005ee2:	2353      	movs	r3, #83	; 0x53
 8005ee4:	a904      	add	r1, sp, #16
 8005ee6:	185b      	adds	r3, r3, r1
 8005ee8:	2120      	movs	r1, #32
 8005eea:	7019      	strb	r1, [r3, #0]
 8005eec:	0713      	lsls	r3, r2, #28
 8005eee:	d504      	bpl.n	8005efa <_svfiprintf_r+0xc6>
 8005ef0:	2353      	movs	r3, #83	; 0x53
 8005ef2:	a904      	add	r1, sp, #16
 8005ef4:	185b      	adds	r3, r3, r1
 8005ef6:	212b      	movs	r1, #43	; 0x2b
 8005ef8:	7019      	strb	r1, [r3, #0]
 8005efa:	7833      	ldrb	r3, [r6, #0]
 8005efc:	2b2a      	cmp	r3, #42	; 0x2a
 8005efe:	d016      	beq.n	8005f2e <_svfiprintf_r+0xfa>
 8005f00:	0035      	movs	r5, r6
 8005f02:	2100      	movs	r1, #0
 8005f04:	200a      	movs	r0, #10
 8005f06:	68e3      	ldr	r3, [r4, #12]
 8005f08:	782a      	ldrb	r2, [r5, #0]
 8005f0a:	1c6e      	adds	r6, r5, #1
 8005f0c:	3a30      	subs	r2, #48	; 0x30
 8005f0e:	2a09      	cmp	r2, #9
 8005f10:	d94e      	bls.n	8005fb0 <_svfiprintf_r+0x17c>
 8005f12:	2900      	cmp	r1, #0
 8005f14:	d111      	bne.n	8005f3a <_svfiprintf_r+0x106>
 8005f16:	e017      	b.n	8005f48 <_svfiprintf_r+0x114>
 8005f18:	3501      	adds	r5, #1
 8005f1a:	e7af      	b.n	8005e7c <_svfiprintf_r+0x48>
 8005f1c:	9b05      	ldr	r3, [sp, #20]
 8005f1e:	6822      	ldr	r2, [r4, #0]
 8005f20:	1ac0      	subs	r0, r0, r3
 8005f22:	2301      	movs	r3, #1
 8005f24:	4083      	lsls	r3, r0
 8005f26:	4313      	orrs	r3, r2
 8005f28:	002e      	movs	r6, r5
 8005f2a:	6023      	str	r3, [r4, #0]
 8005f2c:	e7cc      	b.n	8005ec8 <_svfiprintf_r+0x94>
 8005f2e:	9b07      	ldr	r3, [sp, #28]
 8005f30:	1d19      	adds	r1, r3, #4
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	9107      	str	r1, [sp, #28]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	db01      	blt.n	8005f3e <_svfiprintf_r+0x10a>
 8005f3a:	930b      	str	r3, [sp, #44]	; 0x2c
 8005f3c:	e004      	b.n	8005f48 <_svfiprintf_r+0x114>
 8005f3e:	425b      	negs	r3, r3
 8005f40:	60e3      	str	r3, [r4, #12]
 8005f42:	2302      	movs	r3, #2
 8005f44:	4313      	orrs	r3, r2
 8005f46:	6023      	str	r3, [r4, #0]
 8005f48:	782b      	ldrb	r3, [r5, #0]
 8005f4a:	2b2e      	cmp	r3, #46	; 0x2e
 8005f4c:	d10a      	bne.n	8005f64 <_svfiprintf_r+0x130>
 8005f4e:	786b      	ldrb	r3, [r5, #1]
 8005f50:	2b2a      	cmp	r3, #42	; 0x2a
 8005f52:	d135      	bne.n	8005fc0 <_svfiprintf_r+0x18c>
 8005f54:	9b07      	ldr	r3, [sp, #28]
 8005f56:	3502      	adds	r5, #2
 8005f58:	1d1a      	adds	r2, r3, #4
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	9207      	str	r2, [sp, #28]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	db2b      	blt.n	8005fba <_svfiprintf_r+0x186>
 8005f62:	9309      	str	r3, [sp, #36]	; 0x24
 8005f64:	4e2f      	ldr	r6, [pc, #188]	; (8006024 <_svfiprintf_r+0x1f0>)
 8005f66:	2203      	movs	r2, #3
 8005f68:	0030      	movs	r0, r6
 8005f6a:	7829      	ldrb	r1, [r5, #0]
 8005f6c:	f000 fca5 	bl	80068ba <memchr>
 8005f70:	2800      	cmp	r0, #0
 8005f72:	d006      	beq.n	8005f82 <_svfiprintf_r+0x14e>
 8005f74:	2340      	movs	r3, #64	; 0x40
 8005f76:	1b80      	subs	r0, r0, r6
 8005f78:	4083      	lsls	r3, r0
 8005f7a:	6822      	ldr	r2, [r4, #0]
 8005f7c:	3501      	adds	r5, #1
 8005f7e:	4313      	orrs	r3, r2
 8005f80:	6023      	str	r3, [r4, #0]
 8005f82:	7829      	ldrb	r1, [r5, #0]
 8005f84:	2206      	movs	r2, #6
 8005f86:	4828      	ldr	r0, [pc, #160]	; (8006028 <_svfiprintf_r+0x1f4>)
 8005f88:	1c6e      	adds	r6, r5, #1
 8005f8a:	7621      	strb	r1, [r4, #24]
 8005f8c:	f000 fc95 	bl	80068ba <memchr>
 8005f90:	2800      	cmp	r0, #0
 8005f92:	d03c      	beq.n	800600e <_svfiprintf_r+0x1da>
 8005f94:	4b25      	ldr	r3, [pc, #148]	; (800602c <_svfiprintf_r+0x1f8>)
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d125      	bne.n	8005fe6 <_svfiprintf_r+0x1b2>
 8005f9a:	2207      	movs	r2, #7
 8005f9c:	9b07      	ldr	r3, [sp, #28]
 8005f9e:	3307      	adds	r3, #7
 8005fa0:	4393      	bics	r3, r2
 8005fa2:	3308      	adds	r3, #8
 8005fa4:	9307      	str	r3, [sp, #28]
 8005fa6:	6963      	ldr	r3, [r4, #20]
 8005fa8:	9a04      	ldr	r2, [sp, #16]
 8005faa:	189b      	adds	r3, r3, r2
 8005fac:	6163      	str	r3, [r4, #20]
 8005fae:	e764      	b.n	8005e7a <_svfiprintf_r+0x46>
 8005fb0:	4343      	muls	r3, r0
 8005fb2:	0035      	movs	r5, r6
 8005fb4:	2101      	movs	r1, #1
 8005fb6:	189b      	adds	r3, r3, r2
 8005fb8:	e7a6      	b.n	8005f08 <_svfiprintf_r+0xd4>
 8005fba:	2301      	movs	r3, #1
 8005fbc:	425b      	negs	r3, r3
 8005fbe:	e7d0      	b.n	8005f62 <_svfiprintf_r+0x12e>
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	200a      	movs	r0, #10
 8005fc4:	001a      	movs	r2, r3
 8005fc6:	3501      	adds	r5, #1
 8005fc8:	6063      	str	r3, [r4, #4]
 8005fca:	7829      	ldrb	r1, [r5, #0]
 8005fcc:	1c6e      	adds	r6, r5, #1
 8005fce:	3930      	subs	r1, #48	; 0x30
 8005fd0:	2909      	cmp	r1, #9
 8005fd2:	d903      	bls.n	8005fdc <_svfiprintf_r+0x1a8>
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d0c5      	beq.n	8005f64 <_svfiprintf_r+0x130>
 8005fd8:	9209      	str	r2, [sp, #36]	; 0x24
 8005fda:	e7c3      	b.n	8005f64 <_svfiprintf_r+0x130>
 8005fdc:	4342      	muls	r2, r0
 8005fde:	0035      	movs	r5, r6
 8005fe0:	2301      	movs	r3, #1
 8005fe2:	1852      	adds	r2, r2, r1
 8005fe4:	e7f1      	b.n	8005fca <_svfiprintf_r+0x196>
 8005fe6:	aa07      	add	r2, sp, #28
 8005fe8:	9200      	str	r2, [sp, #0]
 8005fea:	0021      	movs	r1, r4
 8005fec:	003a      	movs	r2, r7
 8005fee:	4b10      	ldr	r3, [pc, #64]	; (8006030 <_svfiprintf_r+0x1fc>)
 8005ff0:	9803      	ldr	r0, [sp, #12]
 8005ff2:	e000      	b.n	8005ff6 <_svfiprintf_r+0x1c2>
 8005ff4:	bf00      	nop
 8005ff6:	9004      	str	r0, [sp, #16]
 8005ff8:	9b04      	ldr	r3, [sp, #16]
 8005ffa:	3301      	adds	r3, #1
 8005ffc:	d1d3      	bne.n	8005fa6 <_svfiprintf_r+0x172>
 8005ffe:	89bb      	ldrh	r3, [r7, #12]
 8006000:	980d      	ldr	r0, [sp, #52]	; 0x34
 8006002:	065b      	lsls	r3, r3, #25
 8006004:	d400      	bmi.n	8006008 <_svfiprintf_r+0x1d4>
 8006006:	e72c      	b.n	8005e62 <_svfiprintf_r+0x2e>
 8006008:	2001      	movs	r0, #1
 800600a:	4240      	negs	r0, r0
 800600c:	e729      	b.n	8005e62 <_svfiprintf_r+0x2e>
 800600e:	aa07      	add	r2, sp, #28
 8006010:	9200      	str	r2, [sp, #0]
 8006012:	0021      	movs	r1, r4
 8006014:	003a      	movs	r2, r7
 8006016:	4b06      	ldr	r3, [pc, #24]	; (8006030 <_svfiprintf_r+0x1fc>)
 8006018:	9803      	ldr	r0, [sp, #12]
 800601a:	f000 f9bf 	bl	800639c <_printf_i>
 800601e:	e7ea      	b.n	8005ff6 <_svfiprintf_r+0x1c2>
 8006020:	08006e32 	.word	0x08006e32
 8006024:	08006e38 	.word	0x08006e38
 8006028:	08006e3c 	.word	0x08006e3c
 800602c:	00000000 	.word	0x00000000
 8006030:	08005d71 	.word	0x08005d71

08006034 <__sfputc_r>:
 8006034:	6893      	ldr	r3, [r2, #8]
 8006036:	b510      	push	{r4, lr}
 8006038:	3b01      	subs	r3, #1
 800603a:	6093      	str	r3, [r2, #8]
 800603c:	2b00      	cmp	r3, #0
 800603e:	da04      	bge.n	800604a <__sfputc_r+0x16>
 8006040:	6994      	ldr	r4, [r2, #24]
 8006042:	42a3      	cmp	r3, r4
 8006044:	db07      	blt.n	8006056 <__sfputc_r+0x22>
 8006046:	290a      	cmp	r1, #10
 8006048:	d005      	beq.n	8006056 <__sfputc_r+0x22>
 800604a:	6813      	ldr	r3, [r2, #0]
 800604c:	1c58      	adds	r0, r3, #1
 800604e:	6010      	str	r0, [r2, #0]
 8006050:	7019      	strb	r1, [r3, #0]
 8006052:	0008      	movs	r0, r1
 8006054:	bd10      	pop	{r4, pc}
 8006056:	f000 fb77 	bl	8006748 <__swbuf_r>
 800605a:	0001      	movs	r1, r0
 800605c:	e7f9      	b.n	8006052 <__sfputc_r+0x1e>

0800605e <__sfputs_r>:
 800605e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006060:	0006      	movs	r6, r0
 8006062:	000f      	movs	r7, r1
 8006064:	0014      	movs	r4, r2
 8006066:	18d5      	adds	r5, r2, r3
 8006068:	42ac      	cmp	r4, r5
 800606a:	d101      	bne.n	8006070 <__sfputs_r+0x12>
 800606c:	2000      	movs	r0, #0
 800606e:	e007      	b.n	8006080 <__sfputs_r+0x22>
 8006070:	7821      	ldrb	r1, [r4, #0]
 8006072:	003a      	movs	r2, r7
 8006074:	0030      	movs	r0, r6
 8006076:	f7ff ffdd 	bl	8006034 <__sfputc_r>
 800607a:	3401      	adds	r4, #1
 800607c:	1c43      	adds	r3, r0, #1
 800607e:	d1f3      	bne.n	8006068 <__sfputs_r+0xa>
 8006080:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006084 <_vfiprintf_r>:
 8006084:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006086:	b0a1      	sub	sp, #132	; 0x84
 8006088:	000f      	movs	r7, r1
 800608a:	0015      	movs	r5, r2
 800608c:	001e      	movs	r6, r3
 800608e:	9003      	str	r0, [sp, #12]
 8006090:	2800      	cmp	r0, #0
 8006092:	d004      	beq.n	800609e <_vfiprintf_r+0x1a>
 8006094:	6a03      	ldr	r3, [r0, #32]
 8006096:	2b00      	cmp	r3, #0
 8006098:	d101      	bne.n	800609e <_vfiprintf_r+0x1a>
 800609a:	f7ff fc07 	bl	80058ac <__sinit>
 800609e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80060a0:	07db      	lsls	r3, r3, #31
 80060a2:	d405      	bmi.n	80060b0 <_vfiprintf_r+0x2c>
 80060a4:	89bb      	ldrh	r3, [r7, #12]
 80060a6:	059b      	lsls	r3, r3, #22
 80060a8:	d402      	bmi.n	80060b0 <_vfiprintf_r+0x2c>
 80060aa:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80060ac:	f7ff fdec 	bl	8005c88 <__retarget_lock_acquire_recursive>
 80060b0:	89bb      	ldrh	r3, [r7, #12]
 80060b2:	071b      	lsls	r3, r3, #28
 80060b4:	d502      	bpl.n	80060bc <_vfiprintf_r+0x38>
 80060b6:	693b      	ldr	r3, [r7, #16]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d113      	bne.n	80060e4 <_vfiprintf_r+0x60>
 80060bc:	0039      	movs	r1, r7
 80060be:	9803      	ldr	r0, [sp, #12]
 80060c0:	f000 fb84 	bl	80067cc <__swsetup_r>
 80060c4:	2800      	cmp	r0, #0
 80060c6:	d00d      	beq.n	80060e4 <_vfiprintf_r+0x60>
 80060c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80060ca:	07db      	lsls	r3, r3, #31
 80060cc:	d503      	bpl.n	80060d6 <_vfiprintf_r+0x52>
 80060ce:	2001      	movs	r0, #1
 80060d0:	4240      	negs	r0, r0
 80060d2:	b021      	add	sp, #132	; 0x84
 80060d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80060d6:	89bb      	ldrh	r3, [r7, #12]
 80060d8:	059b      	lsls	r3, r3, #22
 80060da:	d4f8      	bmi.n	80060ce <_vfiprintf_r+0x4a>
 80060dc:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80060de:	f7ff fdd4 	bl	8005c8a <__retarget_lock_release_recursive>
 80060e2:	e7f4      	b.n	80060ce <_vfiprintf_r+0x4a>
 80060e4:	2300      	movs	r3, #0
 80060e6:	ac08      	add	r4, sp, #32
 80060e8:	6163      	str	r3, [r4, #20]
 80060ea:	3320      	adds	r3, #32
 80060ec:	7663      	strb	r3, [r4, #25]
 80060ee:	3310      	adds	r3, #16
 80060f0:	76a3      	strb	r3, [r4, #26]
 80060f2:	9607      	str	r6, [sp, #28]
 80060f4:	002e      	movs	r6, r5
 80060f6:	7833      	ldrb	r3, [r6, #0]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d001      	beq.n	8006100 <_vfiprintf_r+0x7c>
 80060fc:	2b25      	cmp	r3, #37	; 0x25
 80060fe:	d148      	bne.n	8006192 <_vfiprintf_r+0x10e>
 8006100:	1b73      	subs	r3, r6, r5
 8006102:	9305      	str	r3, [sp, #20]
 8006104:	42ae      	cmp	r6, r5
 8006106:	d00b      	beq.n	8006120 <_vfiprintf_r+0x9c>
 8006108:	002a      	movs	r2, r5
 800610a:	0039      	movs	r1, r7
 800610c:	9803      	ldr	r0, [sp, #12]
 800610e:	f7ff ffa6 	bl	800605e <__sfputs_r>
 8006112:	3001      	adds	r0, #1
 8006114:	d100      	bne.n	8006118 <_vfiprintf_r+0x94>
 8006116:	e0af      	b.n	8006278 <_vfiprintf_r+0x1f4>
 8006118:	6963      	ldr	r3, [r4, #20]
 800611a:	9a05      	ldr	r2, [sp, #20]
 800611c:	189b      	adds	r3, r3, r2
 800611e:	6163      	str	r3, [r4, #20]
 8006120:	7833      	ldrb	r3, [r6, #0]
 8006122:	2b00      	cmp	r3, #0
 8006124:	d100      	bne.n	8006128 <_vfiprintf_r+0xa4>
 8006126:	e0a7      	b.n	8006278 <_vfiprintf_r+0x1f4>
 8006128:	2201      	movs	r2, #1
 800612a:	2300      	movs	r3, #0
 800612c:	4252      	negs	r2, r2
 800612e:	6062      	str	r2, [r4, #4]
 8006130:	a904      	add	r1, sp, #16
 8006132:	3254      	adds	r2, #84	; 0x54
 8006134:	1852      	adds	r2, r2, r1
 8006136:	1c75      	adds	r5, r6, #1
 8006138:	6023      	str	r3, [r4, #0]
 800613a:	60e3      	str	r3, [r4, #12]
 800613c:	60a3      	str	r3, [r4, #8]
 800613e:	7013      	strb	r3, [r2, #0]
 8006140:	65a3      	str	r3, [r4, #88]	; 0x58
 8006142:	4b59      	ldr	r3, [pc, #356]	; (80062a8 <_vfiprintf_r+0x224>)
 8006144:	2205      	movs	r2, #5
 8006146:	0018      	movs	r0, r3
 8006148:	7829      	ldrb	r1, [r5, #0]
 800614a:	9305      	str	r3, [sp, #20]
 800614c:	f000 fbb5 	bl	80068ba <memchr>
 8006150:	1c6e      	adds	r6, r5, #1
 8006152:	2800      	cmp	r0, #0
 8006154:	d11f      	bne.n	8006196 <_vfiprintf_r+0x112>
 8006156:	6822      	ldr	r2, [r4, #0]
 8006158:	06d3      	lsls	r3, r2, #27
 800615a:	d504      	bpl.n	8006166 <_vfiprintf_r+0xe2>
 800615c:	2353      	movs	r3, #83	; 0x53
 800615e:	a904      	add	r1, sp, #16
 8006160:	185b      	adds	r3, r3, r1
 8006162:	2120      	movs	r1, #32
 8006164:	7019      	strb	r1, [r3, #0]
 8006166:	0713      	lsls	r3, r2, #28
 8006168:	d504      	bpl.n	8006174 <_vfiprintf_r+0xf0>
 800616a:	2353      	movs	r3, #83	; 0x53
 800616c:	a904      	add	r1, sp, #16
 800616e:	185b      	adds	r3, r3, r1
 8006170:	212b      	movs	r1, #43	; 0x2b
 8006172:	7019      	strb	r1, [r3, #0]
 8006174:	782b      	ldrb	r3, [r5, #0]
 8006176:	2b2a      	cmp	r3, #42	; 0x2a
 8006178:	d016      	beq.n	80061a8 <_vfiprintf_r+0x124>
 800617a:	002e      	movs	r6, r5
 800617c:	2100      	movs	r1, #0
 800617e:	200a      	movs	r0, #10
 8006180:	68e3      	ldr	r3, [r4, #12]
 8006182:	7832      	ldrb	r2, [r6, #0]
 8006184:	1c75      	adds	r5, r6, #1
 8006186:	3a30      	subs	r2, #48	; 0x30
 8006188:	2a09      	cmp	r2, #9
 800618a:	d94e      	bls.n	800622a <_vfiprintf_r+0x1a6>
 800618c:	2900      	cmp	r1, #0
 800618e:	d111      	bne.n	80061b4 <_vfiprintf_r+0x130>
 8006190:	e017      	b.n	80061c2 <_vfiprintf_r+0x13e>
 8006192:	3601      	adds	r6, #1
 8006194:	e7af      	b.n	80060f6 <_vfiprintf_r+0x72>
 8006196:	9b05      	ldr	r3, [sp, #20]
 8006198:	6822      	ldr	r2, [r4, #0]
 800619a:	1ac0      	subs	r0, r0, r3
 800619c:	2301      	movs	r3, #1
 800619e:	4083      	lsls	r3, r0
 80061a0:	4313      	orrs	r3, r2
 80061a2:	0035      	movs	r5, r6
 80061a4:	6023      	str	r3, [r4, #0]
 80061a6:	e7cc      	b.n	8006142 <_vfiprintf_r+0xbe>
 80061a8:	9b07      	ldr	r3, [sp, #28]
 80061aa:	1d19      	adds	r1, r3, #4
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	9107      	str	r1, [sp, #28]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	db01      	blt.n	80061b8 <_vfiprintf_r+0x134>
 80061b4:	930b      	str	r3, [sp, #44]	; 0x2c
 80061b6:	e004      	b.n	80061c2 <_vfiprintf_r+0x13e>
 80061b8:	425b      	negs	r3, r3
 80061ba:	60e3      	str	r3, [r4, #12]
 80061bc:	2302      	movs	r3, #2
 80061be:	4313      	orrs	r3, r2
 80061c0:	6023      	str	r3, [r4, #0]
 80061c2:	7833      	ldrb	r3, [r6, #0]
 80061c4:	2b2e      	cmp	r3, #46	; 0x2e
 80061c6:	d10a      	bne.n	80061de <_vfiprintf_r+0x15a>
 80061c8:	7873      	ldrb	r3, [r6, #1]
 80061ca:	2b2a      	cmp	r3, #42	; 0x2a
 80061cc:	d135      	bne.n	800623a <_vfiprintf_r+0x1b6>
 80061ce:	9b07      	ldr	r3, [sp, #28]
 80061d0:	3602      	adds	r6, #2
 80061d2:	1d1a      	adds	r2, r3, #4
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	9207      	str	r2, [sp, #28]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	db2b      	blt.n	8006234 <_vfiprintf_r+0x1b0>
 80061dc:	9309      	str	r3, [sp, #36]	; 0x24
 80061de:	4d33      	ldr	r5, [pc, #204]	; (80062ac <_vfiprintf_r+0x228>)
 80061e0:	2203      	movs	r2, #3
 80061e2:	0028      	movs	r0, r5
 80061e4:	7831      	ldrb	r1, [r6, #0]
 80061e6:	f000 fb68 	bl	80068ba <memchr>
 80061ea:	2800      	cmp	r0, #0
 80061ec:	d006      	beq.n	80061fc <_vfiprintf_r+0x178>
 80061ee:	2340      	movs	r3, #64	; 0x40
 80061f0:	1b40      	subs	r0, r0, r5
 80061f2:	4083      	lsls	r3, r0
 80061f4:	6822      	ldr	r2, [r4, #0]
 80061f6:	3601      	adds	r6, #1
 80061f8:	4313      	orrs	r3, r2
 80061fa:	6023      	str	r3, [r4, #0]
 80061fc:	7831      	ldrb	r1, [r6, #0]
 80061fe:	2206      	movs	r2, #6
 8006200:	482b      	ldr	r0, [pc, #172]	; (80062b0 <_vfiprintf_r+0x22c>)
 8006202:	1c75      	adds	r5, r6, #1
 8006204:	7621      	strb	r1, [r4, #24]
 8006206:	f000 fb58 	bl	80068ba <memchr>
 800620a:	2800      	cmp	r0, #0
 800620c:	d043      	beq.n	8006296 <_vfiprintf_r+0x212>
 800620e:	4b29      	ldr	r3, [pc, #164]	; (80062b4 <_vfiprintf_r+0x230>)
 8006210:	2b00      	cmp	r3, #0
 8006212:	d125      	bne.n	8006260 <_vfiprintf_r+0x1dc>
 8006214:	2207      	movs	r2, #7
 8006216:	9b07      	ldr	r3, [sp, #28]
 8006218:	3307      	adds	r3, #7
 800621a:	4393      	bics	r3, r2
 800621c:	3308      	adds	r3, #8
 800621e:	9307      	str	r3, [sp, #28]
 8006220:	6963      	ldr	r3, [r4, #20]
 8006222:	9a04      	ldr	r2, [sp, #16]
 8006224:	189b      	adds	r3, r3, r2
 8006226:	6163      	str	r3, [r4, #20]
 8006228:	e764      	b.n	80060f4 <_vfiprintf_r+0x70>
 800622a:	4343      	muls	r3, r0
 800622c:	002e      	movs	r6, r5
 800622e:	2101      	movs	r1, #1
 8006230:	189b      	adds	r3, r3, r2
 8006232:	e7a6      	b.n	8006182 <_vfiprintf_r+0xfe>
 8006234:	2301      	movs	r3, #1
 8006236:	425b      	negs	r3, r3
 8006238:	e7d0      	b.n	80061dc <_vfiprintf_r+0x158>
 800623a:	2300      	movs	r3, #0
 800623c:	200a      	movs	r0, #10
 800623e:	001a      	movs	r2, r3
 8006240:	3601      	adds	r6, #1
 8006242:	6063      	str	r3, [r4, #4]
 8006244:	7831      	ldrb	r1, [r6, #0]
 8006246:	1c75      	adds	r5, r6, #1
 8006248:	3930      	subs	r1, #48	; 0x30
 800624a:	2909      	cmp	r1, #9
 800624c:	d903      	bls.n	8006256 <_vfiprintf_r+0x1d2>
 800624e:	2b00      	cmp	r3, #0
 8006250:	d0c5      	beq.n	80061de <_vfiprintf_r+0x15a>
 8006252:	9209      	str	r2, [sp, #36]	; 0x24
 8006254:	e7c3      	b.n	80061de <_vfiprintf_r+0x15a>
 8006256:	4342      	muls	r2, r0
 8006258:	002e      	movs	r6, r5
 800625a:	2301      	movs	r3, #1
 800625c:	1852      	adds	r2, r2, r1
 800625e:	e7f1      	b.n	8006244 <_vfiprintf_r+0x1c0>
 8006260:	aa07      	add	r2, sp, #28
 8006262:	9200      	str	r2, [sp, #0]
 8006264:	0021      	movs	r1, r4
 8006266:	003a      	movs	r2, r7
 8006268:	4b13      	ldr	r3, [pc, #76]	; (80062b8 <_vfiprintf_r+0x234>)
 800626a:	9803      	ldr	r0, [sp, #12]
 800626c:	e000      	b.n	8006270 <_vfiprintf_r+0x1ec>
 800626e:	bf00      	nop
 8006270:	9004      	str	r0, [sp, #16]
 8006272:	9b04      	ldr	r3, [sp, #16]
 8006274:	3301      	adds	r3, #1
 8006276:	d1d3      	bne.n	8006220 <_vfiprintf_r+0x19c>
 8006278:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800627a:	07db      	lsls	r3, r3, #31
 800627c:	d405      	bmi.n	800628a <_vfiprintf_r+0x206>
 800627e:	89bb      	ldrh	r3, [r7, #12]
 8006280:	059b      	lsls	r3, r3, #22
 8006282:	d402      	bmi.n	800628a <_vfiprintf_r+0x206>
 8006284:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8006286:	f7ff fd00 	bl	8005c8a <__retarget_lock_release_recursive>
 800628a:	89bb      	ldrh	r3, [r7, #12]
 800628c:	065b      	lsls	r3, r3, #25
 800628e:	d500      	bpl.n	8006292 <_vfiprintf_r+0x20e>
 8006290:	e71d      	b.n	80060ce <_vfiprintf_r+0x4a>
 8006292:	980d      	ldr	r0, [sp, #52]	; 0x34
 8006294:	e71d      	b.n	80060d2 <_vfiprintf_r+0x4e>
 8006296:	aa07      	add	r2, sp, #28
 8006298:	9200      	str	r2, [sp, #0]
 800629a:	0021      	movs	r1, r4
 800629c:	003a      	movs	r2, r7
 800629e:	4b06      	ldr	r3, [pc, #24]	; (80062b8 <_vfiprintf_r+0x234>)
 80062a0:	9803      	ldr	r0, [sp, #12]
 80062a2:	f000 f87b 	bl	800639c <_printf_i>
 80062a6:	e7e3      	b.n	8006270 <_vfiprintf_r+0x1ec>
 80062a8:	08006e32 	.word	0x08006e32
 80062ac:	08006e38 	.word	0x08006e38
 80062b0:	08006e3c 	.word	0x08006e3c
 80062b4:	00000000 	.word	0x00000000
 80062b8:	0800605f 	.word	0x0800605f

080062bc <_printf_common>:
 80062bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80062be:	0016      	movs	r6, r2
 80062c0:	9301      	str	r3, [sp, #4]
 80062c2:	688a      	ldr	r2, [r1, #8]
 80062c4:	690b      	ldr	r3, [r1, #16]
 80062c6:	000c      	movs	r4, r1
 80062c8:	9000      	str	r0, [sp, #0]
 80062ca:	4293      	cmp	r3, r2
 80062cc:	da00      	bge.n	80062d0 <_printf_common+0x14>
 80062ce:	0013      	movs	r3, r2
 80062d0:	0022      	movs	r2, r4
 80062d2:	6033      	str	r3, [r6, #0]
 80062d4:	3243      	adds	r2, #67	; 0x43
 80062d6:	7812      	ldrb	r2, [r2, #0]
 80062d8:	2a00      	cmp	r2, #0
 80062da:	d001      	beq.n	80062e0 <_printf_common+0x24>
 80062dc:	3301      	adds	r3, #1
 80062de:	6033      	str	r3, [r6, #0]
 80062e0:	6823      	ldr	r3, [r4, #0]
 80062e2:	069b      	lsls	r3, r3, #26
 80062e4:	d502      	bpl.n	80062ec <_printf_common+0x30>
 80062e6:	6833      	ldr	r3, [r6, #0]
 80062e8:	3302      	adds	r3, #2
 80062ea:	6033      	str	r3, [r6, #0]
 80062ec:	6822      	ldr	r2, [r4, #0]
 80062ee:	2306      	movs	r3, #6
 80062f0:	0015      	movs	r5, r2
 80062f2:	401d      	ands	r5, r3
 80062f4:	421a      	tst	r2, r3
 80062f6:	d027      	beq.n	8006348 <_printf_common+0x8c>
 80062f8:	0023      	movs	r3, r4
 80062fa:	3343      	adds	r3, #67	; 0x43
 80062fc:	781b      	ldrb	r3, [r3, #0]
 80062fe:	1e5a      	subs	r2, r3, #1
 8006300:	4193      	sbcs	r3, r2
 8006302:	6822      	ldr	r2, [r4, #0]
 8006304:	0692      	lsls	r2, r2, #26
 8006306:	d430      	bmi.n	800636a <_printf_common+0xae>
 8006308:	0022      	movs	r2, r4
 800630a:	9901      	ldr	r1, [sp, #4]
 800630c:	9800      	ldr	r0, [sp, #0]
 800630e:	9d08      	ldr	r5, [sp, #32]
 8006310:	3243      	adds	r2, #67	; 0x43
 8006312:	47a8      	blx	r5
 8006314:	3001      	adds	r0, #1
 8006316:	d025      	beq.n	8006364 <_printf_common+0xa8>
 8006318:	2206      	movs	r2, #6
 800631a:	6823      	ldr	r3, [r4, #0]
 800631c:	2500      	movs	r5, #0
 800631e:	4013      	ands	r3, r2
 8006320:	2b04      	cmp	r3, #4
 8006322:	d105      	bne.n	8006330 <_printf_common+0x74>
 8006324:	6833      	ldr	r3, [r6, #0]
 8006326:	68e5      	ldr	r5, [r4, #12]
 8006328:	1aed      	subs	r5, r5, r3
 800632a:	43eb      	mvns	r3, r5
 800632c:	17db      	asrs	r3, r3, #31
 800632e:	401d      	ands	r5, r3
 8006330:	68a3      	ldr	r3, [r4, #8]
 8006332:	6922      	ldr	r2, [r4, #16]
 8006334:	4293      	cmp	r3, r2
 8006336:	dd01      	ble.n	800633c <_printf_common+0x80>
 8006338:	1a9b      	subs	r3, r3, r2
 800633a:	18ed      	adds	r5, r5, r3
 800633c:	2600      	movs	r6, #0
 800633e:	42b5      	cmp	r5, r6
 8006340:	d120      	bne.n	8006384 <_printf_common+0xc8>
 8006342:	2000      	movs	r0, #0
 8006344:	e010      	b.n	8006368 <_printf_common+0xac>
 8006346:	3501      	adds	r5, #1
 8006348:	68e3      	ldr	r3, [r4, #12]
 800634a:	6832      	ldr	r2, [r6, #0]
 800634c:	1a9b      	subs	r3, r3, r2
 800634e:	42ab      	cmp	r3, r5
 8006350:	ddd2      	ble.n	80062f8 <_printf_common+0x3c>
 8006352:	0022      	movs	r2, r4
 8006354:	2301      	movs	r3, #1
 8006356:	9901      	ldr	r1, [sp, #4]
 8006358:	9800      	ldr	r0, [sp, #0]
 800635a:	9f08      	ldr	r7, [sp, #32]
 800635c:	3219      	adds	r2, #25
 800635e:	47b8      	blx	r7
 8006360:	3001      	adds	r0, #1
 8006362:	d1f0      	bne.n	8006346 <_printf_common+0x8a>
 8006364:	2001      	movs	r0, #1
 8006366:	4240      	negs	r0, r0
 8006368:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800636a:	2030      	movs	r0, #48	; 0x30
 800636c:	18e1      	adds	r1, r4, r3
 800636e:	3143      	adds	r1, #67	; 0x43
 8006370:	7008      	strb	r0, [r1, #0]
 8006372:	0021      	movs	r1, r4
 8006374:	1c5a      	adds	r2, r3, #1
 8006376:	3145      	adds	r1, #69	; 0x45
 8006378:	7809      	ldrb	r1, [r1, #0]
 800637a:	18a2      	adds	r2, r4, r2
 800637c:	3243      	adds	r2, #67	; 0x43
 800637e:	3302      	adds	r3, #2
 8006380:	7011      	strb	r1, [r2, #0]
 8006382:	e7c1      	b.n	8006308 <_printf_common+0x4c>
 8006384:	0022      	movs	r2, r4
 8006386:	2301      	movs	r3, #1
 8006388:	9901      	ldr	r1, [sp, #4]
 800638a:	9800      	ldr	r0, [sp, #0]
 800638c:	9f08      	ldr	r7, [sp, #32]
 800638e:	321a      	adds	r2, #26
 8006390:	47b8      	blx	r7
 8006392:	3001      	adds	r0, #1
 8006394:	d0e6      	beq.n	8006364 <_printf_common+0xa8>
 8006396:	3601      	adds	r6, #1
 8006398:	e7d1      	b.n	800633e <_printf_common+0x82>
	...

0800639c <_printf_i>:
 800639c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800639e:	b08b      	sub	sp, #44	; 0x2c
 80063a0:	9206      	str	r2, [sp, #24]
 80063a2:	000a      	movs	r2, r1
 80063a4:	3243      	adds	r2, #67	; 0x43
 80063a6:	9307      	str	r3, [sp, #28]
 80063a8:	9005      	str	r0, [sp, #20]
 80063aa:	9204      	str	r2, [sp, #16]
 80063ac:	7e0a      	ldrb	r2, [r1, #24]
 80063ae:	000c      	movs	r4, r1
 80063b0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80063b2:	2a78      	cmp	r2, #120	; 0x78
 80063b4:	d809      	bhi.n	80063ca <_printf_i+0x2e>
 80063b6:	2a62      	cmp	r2, #98	; 0x62
 80063b8:	d80b      	bhi.n	80063d2 <_printf_i+0x36>
 80063ba:	2a00      	cmp	r2, #0
 80063bc:	d100      	bne.n	80063c0 <_printf_i+0x24>
 80063be:	e0be      	b.n	800653e <_printf_i+0x1a2>
 80063c0:	497c      	ldr	r1, [pc, #496]	; (80065b4 <_printf_i+0x218>)
 80063c2:	9103      	str	r1, [sp, #12]
 80063c4:	2a58      	cmp	r2, #88	; 0x58
 80063c6:	d100      	bne.n	80063ca <_printf_i+0x2e>
 80063c8:	e093      	b.n	80064f2 <_printf_i+0x156>
 80063ca:	0026      	movs	r6, r4
 80063cc:	3642      	adds	r6, #66	; 0x42
 80063ce:	7032      	strb	r2, [r6, #0]
 80063d0:	e022      	b.n	8006418 <_printf_i+0x7c>
 80063d2:	0010      	movs	r0, r2
 80063d4:	3863      	subs	r0, #99	; 0x63
 80063d6:	2815      	cmp	r0, #21
 80063d8:	d8f7      	bhi.n	80063ca <_printf_i+0x2e>
 80063da:	f7f9 fea7 	bl	800012c <__gnu_thumb1_case_shi>
 80063de:	0016      	.short	0x0016
 80063e0:	fff6001f 	.word	0xfff6001f
 80063e4:	fff6fff6 	.word	0xfff6fff6
 80063e8:	001ffff6 	.word	0x001ffff6
 80063ec:	fff6fff6 	.word	0xfff6fff6
 80063f0:	fff6fff6 	.word	0xfff6fff6
 80063f4:	003600a3 	.word	0x003600a3
 80063f8:	fff60083 	.word	0xfff60083
 80063fc:	00b4fff6 	.word	0x00b4fff6
 8006400:	0036fff6 	.word	0x0036fff6
 8006404:	fff6fff6 	.word	0xfff6fff6
 8006408:	0087      	.short	0x0087
 800640a:	0026      	movs	r6, r4
 800640c:	681a      	ldr	r2, [r3, #0]
 800640e:	3642      	adds	r6, #66	; 0x42
 8006410:	1d11      	adds	r1, r2, #4
 8006412:	6019      	str	r1, [r3, #0]
 8006414:	6813      	ldr	r3, [r2, #0]
 8006416:	7033      	strb	r3, [r6, #0]
 8006418:	2301      	movs	r3, #1
 800641a:	e0a2      	b.n	8006562 <_printf_i+0x1c6>
 800641c:	6818      	ldr	r0, [r3, #0]
 800641e:	6809      	ldr	r1, [r1, #0]
 8006420:	1d02      	adds	r2, r0, #4
 8006422:	060d      	lsls	r5, r1, #24
 8006424:	d50b      	bpl.n	800643e <_printf_i+0xa2>
 8006426:	6805      	ldr	r5, [r0, #0]
 8006428:	601a      	str	r2, [r3, #0]
 800642a:	2d00      	cmp	r5, #0
 800642c:	da03      	bge.n	8006436 <_printf_i+0x9a>
 800642e:	232d      	movs	r3, #45	; 0x2d
 8006430:	9a04      	ldr	r2, [sp, #16]
 8006432:	426d      	negs	r5, r5
 8006434:	7013      	strb	r3, [r2, #0]
 8006436:	4b5f      	ldr	r3, [pc, #380]	; (80065b4 <_printf_i+0x218>)
 8006438:	270a      	movs	r7, #10
 800643a:	9303      	str	r3, [sp, #12]
 800643c:	e01b      	b.n	8006476 <_printf_i+0xda>
 800643e:	6805      	ldr	r5, [r0, #0]
 8006440:	601a      	str	r2, [r3, #0]
 8006442:	0649      	lsls	r1, r1, #25
 8006444:	d5f1      	bpl.n	800642a <_printf_i+0x8e>
 8006446:	b22d      	sxth	r5, r5
 8006448:	e7ef      	b.n	800642a <_printf_i+0x8e>
 800644a:	680d      	ldr	r5, [r1, #0]
 800644c:	6819      	ldr	r1, [r3, #0]
 800644e:	1d08      	adds	r0, r1, #4
 8006450:	6018      	str	r0, [r3, #0]
 8006452:	062e      	lsls	r6, r5, #24
 8006454:	d501      	bpl.n	800645a <_printf_i+0xbe>
 8006456:	680d      	ldr	r5, [r1, #0]
 8006458:	e003      	b.n	8006462 <_printf_i+0xc6>
 800645a:	066d      	lsls	r5, r5, #25
 800645c:	d5fb      	bpl.n	8006456 <_printf_i+0xba>
 800645e:	680d      	ldr	r5, [r1, #0]
 8006460:	b2ad      	uxth	r5, r5
 8006462:	4b54      	ldr	r3, [pc, #336]	; (80065b4 <_printf_i+0x218>)
 8006464:	2708      	movs	r7, #8
 8006466:	9303      	str	r3, [sp, #12]
 8006468:	2a6f      	cmp	r2, #111	; 0x6f
 800646a:	d000      	beq.n	800646e <_printf_i+0xd2>
 800646c:	3702      	adds	r7, #2
 800646e:	0023      	movs	r3, r4
 8006470:	2200      	movs	r2, #0
 8006472:	3343      	adds	r3, #67	; 0x43
 8006474:	701a      	strb	r2, [r3, #0]
 8006476:	6863      	ldr	r3, [r4, #4]
 8006478:	60a3      	str	r3, [r4, #8]
 800647a:	2b00      	cmp	r3, #0
 800647c:	db03      	blt.n	8006486 <_printf_i+0xea>
 800647e:	2104      	movs	r1, #4
 8006480:	6822      	ldr	r2, [r4, #0]
 8006482:	438a      	bics	r2, r1
 8006484:	6022      	str	r2, [r4, #0]
 8006486:	2d00      	cmp	r5, #0
 8006488:	d102      	bne.n	8006490 <_printf_i+0xf4>
 800648a:	9e04      	ldr	r6, [sp, #16]
 800648c:	2b00      	cmp	r3, #0
 800648e:	d00c      	beq.n	80064aa <_printf_i+0x10e>
 8006490:	9e04      	ldr	r6, [sp, #16]
 8006492:	0028      	movs	r0, r5
 8006494:	0039      	movs	r1, r7
 8006496:	f7f9 fed9 	bl	800024c <__aeabi_uidivmod>
 800649a:	9b03      	ldr	r3, [sp, #12]
 800649c:	3e01      	subs	r6, #1
 800649e:	5c5b      	ldrb	r3, [r3, r1]
 80064a0:	7033      	strb	r3, [r6, #0]
 80064a2:	002b      	movs	r3, r5
 80064a4:	0005      	movs	r5, r0
 80064a6:	429f      	cmp	r7, r3
 80064a8:	d9f3      	bls.n	8006492 <_printf_i+0xf6>
 80064aa:	2f08      	cmp	r7, #8
 80064ac:	d109      	bne.n	80064c2 <_printf_i+0x126>
 80064ae:	6823      	ldr	r3, [r4, #0]
 80064b0:	07db      	lsls	r3, r3, #31
 80064b2:	d506      	bpl.n	80064c2 <_printf_i+0x126>
 80064b4:	6862      	ldr	r2, [r4, #4]
 80064b6:	6923      	ldr	r3, [r4, #16]
 80064b8:	429a      	cmp	r2, r3
 80064ba:	dc02      	bgt.n	80064c2 <_printf_i+0x126>
 80064bc:	2330      	movs	r3, #48	; 0x30
 80064be:	3e01      	subs	r6, #1
 80064c0:	7033      	strb	r3, [r6, #0]
 80064c2:	9b04      	ldr	r3, [sp, #16]
 80064c4:	1b9b      	subs	r3, r3, r6
 80064c6:	6123      	str	r3, [r4, #16]
 80064c8:	9b07      	ldr	r3, [sp, #28]
 80064ca:	0021      	movs	r1, r4
 80064cc:	9300      	str	r3, [sp, #0]
 80064ce:	9805      	ldr	r0, [sp, #20]
 80064d0:	9b06      	ldr	r3, [sp, #24]
 80064d2:	aa09      	add	r2, sp, #36	; 0x24
 80064d4:	f7ff fef2 	bl	80062bc <_printf_common>
 80064d8:	3001      	adds	r0, #1
 80064da:	d147      	bne.n	800656c <_printf_i+0x1d0>
 80064dc:	2001      	movs	r0, #1
 80064de:	4240      	negs	r0, r0
 80064e0:	b00b      	add	sp, #44	; 0x2c
 80064e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80064e4:	2220      	movs	r2, #32
 80064e6:	6809      	ldr	r1, [r1, #0]
 80064e8:	430a      	orrs	r2, r1
 80064ea:	6022      	str	r2, [r4, #0]
 80064ec:	2278      	movs	r2, #120	; 0x78
 80064ee:	4932      	ldr	r1, [pc, #200]	; (80065b8 <_printf_i+0x21c>)
 80064f0:	9103      	str	r1, [sp, #12]
 80064f2:	0021      	movs	r1, r4
 80064f4:	3145      	adds	r1, #69	; 0x45
 80064f6:	700a      	strb	r2, [r1, #0]
 80064f8:	6819      	ldr	r1, [r3, #0]
 80064fa:	6822      	ldr	r2, [r4, #0]
 80064fc:	c920      	ldmia	r1!, {r5}
 80064fe:	0610      	lsls	r0, r2, #24
 8006500:	d402      	bmi.n	8006508 <_printf_i+0x16c>
 8006502:	0650      	lsls	r0, r2, #25
 8006504:	d500      	bpl.n	8006508 <_printf_i+0x16c>
 8006506:	b2ad      	uxth	r5, r5
 8006508:	6019      	str	r1, [r3, #0]
 800650a:	07d3      	lsls	r3, r2, #31
 800650c:	d502      	bpl.n	8006514 <_printf_i+0x178>
 800650e:	2320      	movs	r3, #32
 8006510:	4313      	orrs	r3, r2
 8006512:	6023      	str	r3, [r4, #0]
 8006514:	2710      	movs	r7, #16
 8006516:	2d00      	cmp	r5, #0
 8006518:	d1a9      	bne.n	800646e <_printf_i+0xd2>
 800651a:	2220      	movs	r2, #32
 800651c:	6823      	ldr	r3, [r4, #0]
 800651e:	4393      	bics	r3, r2
 8006520:	6023      	str	r3, [r4, #0]
 8006522:	e7a4      	b.n	800646e <_printf_i+0xd2>
 8006524:	681a      	ldr	r2, [r3, #0]
 8006526:	680d      	ldr	r5, [r1, #0]
 8006528:	1d10      	adds	r0, r2, #4
 800652a:	6949      	ldr	r1, [r1, #20]
 800652c:	6018      	str	r0, [r3, #0]
 800652e:	6813      	ldr	r3, [r2, #0]
 8006530:	062e      	lsls	r6, r5, #24
 8006532:	d501      	bpl.n	8006538 <_printf_i+0x19c>
 8006534:	6019      	str	r1, [r3, #0]
 8006536:	e002      	b.n	800653e <_printf_i+0x1a2>
 8006538:	066d      	lsls	r5, r5, #25
 800653a:	d5fb      	bpl.n	8006534 <_printf_i+0x198>
 800653c:	8019      	strh	r1, [r3, #0]
 800653e:	2300      	movs	r3, #0
 8006540:	9e04      	ldr	r6, [sp, #16]
 8006542:	6123      	str	r3, [r4, #16]
 8006544:	e7c0      	b.n	80064c8 <_printf_i+0x12c>
 8006546:	681a      	ldr	r2, [r3, #0]
 8006548:	1d11      	adds	r1, r2, #4
 800654a:	6019      	str	r1, [r3, #0]
 800654c:	6816      	ldr	r6, [r2, #0]
 800654e:	2100      	movs	r1, #0
 8006550:	0030      	movs	r0, r6
 8006552:	6862      	ldr	r2, [r4, #4]
 8006554:	f000 f9b1 	bl	80068ba <memchr>
 8006558:	2800      	cmp	r0, #0
 800655a:	d001      	beq.n	8006560 <_printf_i+0x1c4>
 800655c:	1b80      	subs	r0, r0, r6
 800655e:	6060      	str	r0, [r4, #4]
 8006560:	6863      	ldr	r3, [r4, #4]
 8006562:	6123      	str	r3, [r4, #16]
 8006564:	2300      	movs	r3, #0
 8006566:	9a04      	ldr	r2, [sp, #16]
 8006568:	7013      	strb	r3, [r2, #0]
 800656a:	e7ad      	b.n	80064c8 <_printf_i+0x12c>
 800656c:	0032      	movs	r2, r6
 800656e:	6923      	ldr	r3, [r4, #16]
 8006570:	9906      	ldr	r1, [sp, #24]
 8006572:	9805      	ldr	r0, [sp, #20]
 8006574:	9d07      	ldr	r5, [sp, #28]
 8006576:	47a8      	blx	r5
 8006578:	3001      	adds	r0, #1
 800657a:	d0af      	beq.n	80064dc <_printf_i+0x140>
 800657c:	6823      	ldr	r3, [r4, #0]
 800657e:	079b      	lsls	r3, r3, #30
 8006580:	d415      	bmi.n	80065ae <_printf_i+0x212>
 8006582:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006584:	68e0      	ldr	r0, [r4, #12]
 8006586:	4298      	cmp	r0, r3
 8006588:	daaa      	bge.n	80064e0 <_printf_i+0x144>
 800658a:	0018      	movs	r0, r3
 800658c:	e7a8      	b.n	80064e0 <_printf_i+0x144>
 800658e:	0022      	movs	r2, r4
 8006590:	2301      	movs	r3, #1
 8006592:	9906      	ldr	r1, [sp, #24]
 8006594:	9805      	ldr	r0, [sp, #20]
 8006596:	9e07      	ldr	r6, [sp, #28]
 8006598:	3219      	adds	r2, #25
 800659a:	47b0      	blx	r6
 800659c:	3001      	adds	r0, #1
 800659e:	d09d      	beq.n	80064dc <_printf_i+0x140>
 80065a0:	3501      	adds	r5, #1
 80065a2:	68e3      	ldr	r3, [r4, #12]
 80065a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80065a6:	1a9b      	subs	r3, r3, r2
 80065a8:	42ab      	cmp	r3, r5
 80065aa:	dcf0      	bgt.n	800658e <_printf_i+0x1f2>
 80065ac:	e7e9      	b.n	8006582 <_printf_i+0x1e6>
 80065ae:	2500      	movs	r5, #0
 80065b0:	e7f7      	b.n	80065a2 <_printf_i+0x206>
 80065b2:	46c0      	nop			; (mov r8, r8)
 80065b4:	08006e43 	.word	0x08006e43
 80065b8:	08006e54 	.word	0x08006e54

080065bc <__sflush_r>:
 80065bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80065be:	898b      	ldrh	r3, [r1, #12]
 80065c0:	0005      	movs	r5, r0
 80065c2:	000c      	movs	r4, r1
 80065c4:	071a      	lsls	r2, r3, #28
 80065c6:	d45c      	bmi.n	8006682 <__sflush_r+0xc6>
 80065c8:	684a      	ldr	r2, [r1, #4]
 80065ca:	2a00      	cmp	r2, #0
 80065cc:	dc04      	bgt.n	80065d8 <__sflush_r+0x1c>
 80065ce:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 80065d0:	2a00      	cmp	r2, #0
 80065d2:	dc01      	bgt.n	80065d8 <__sflush_r+0x1c>
 80065d4:	2000      	movs	r0, #0
 80065d6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80065d8:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80065da:	2f00      	cmp	r7, #0
 80065dc:	d0fa      	beq.n	80065d4 <__sflush_r+0x18>
 80065de:	2200      	movs	r2, #0
 80065e0:	2080      	movs	r0, #128	; 0x80
 80065e2:	682e      	ldr	r6, [r5, #0]
 80065e4:	602a      	str	r2, [r5, #0]
 80065e6:	001a      	movs	r2, r3
 80065e8:	0140      	lsls	r0, r0, #5
 80065ea:	6a21      	ldr	r1, [r4, #32]
 80065ec:	4002      	ands	r2, r0
 80065ee:	4203      	tst	r3, r0
 80065f0:	d034      	beq.n	800665c <__sflush_r+0xa0>
 80065f2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80065f4:	89a3      	ldrh	r3, [r4, #12]
 80065f6:	075b      	lsls	r3, r3, #29
 80065f8:	d506      	bpl.n	8006608 <__sflush_r+0x4c>
 80065fa:	6863      	ldr	r3, [r4, #4]
 80065fc:	1ac0      	subs	r0, r0, r3
 80065fe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006600:	2b00      	cmp	r3, #0
 8006602:	d001      	beq.n	8006608 <__sflush_r+0x4c>
 8006604:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006606:	1ac0      	subs	r0, r0, r3
 8006608:	0002      	movs	r2, r0
 800660a:	2300      	movs	r3, #0
 800660c:	0028      	movs	r0, r5
 800660e:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8006610:	6a21      	ldr	r1, [r4, #32]
 8006612:	47b8      	blx	r7
 8006614:	89a2      	ldrh	r2, [r4, #12]
 8006616:	1c43      	adds	r3, r0, #1
 8006618:	d106      	bne.n	8006628 <__sflush_r+0x6c>
 800661a:	6829      	ldr	r1, [r5, #0]
 800661c:	291d      	cmp	r1, #29
 800661e:	d82c      	bhi.n	800667a <__sflush_r+0xbe>
 8006620:	4b2a      	ldr	r3, [pc, #168]	; (80066cc <__sflush_r+0x110>)
 8006622:	410b      	asrs	r3, r1
 8006624:	07db      	lsls	r3, r3, #31
 8006626:	d428      	bmi.n	800667a <__sflush_r+0xbe>
 8006628:	2300      	movs	r3, #0
 800662a:	6063      	str	r3, [r4, #4]
 800662c:	6923      	ldr	r3, [r4, #16]
 800662e:	6023      	str	r3, [r4, #0]
 8006630:	04d2      	lsls	r2, r2, #19
 8006632:	d505      	bpl.n	8006640 <__sflush_r+0x84>
 8006634:	1c43      	adds	r3, r0, #1
 8006636:	d102      	bne.n	800663e <__sflush_r+0x82>
 8006638:	682b      	ldr	r3, [r5, #0]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d100      	bne.n	8006640 <__sflush_r+0x84>
 800663e:	6560      	str	r0, [r4, #84]	; 0x54
 8006640:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006642:	602e      	str	r6, [r5, #0]
 8006644:	2900      	cmp	r1, #0
 8006646:	d0c5      	beq.n	80065d4 <__sflush_r+0x18>
 8006648:	0023      	movs	r3, r4
 800664a:	3344      	adds	r3, #68	; 0x44
 800664c:	4299      	cmp	r1, r3
 800664e:	d002      	beq.n	8006656 <__sflush_r+0x9a>
 8006650:	0028      	movs	r0, r5
 8006652:	f7ff fb43 	bl	8005cdc <_free_r>
 8006656:	2000      	movs	r0, #0
 8006658:	6360      	str	r0, [r4, #52]	; 0x34
 800665a:	e7bc      	b.n	80065d6 <__sflush_r+0x1a>
 800665c:	2301      	movs	r3, #1
 800665e:	0028      	movs	r0, r5
 8006660:	47b8      	blx	r7
 8006662:	1c43      	adds	r3, r0, #1
 8006664:	d1c6      	bne.n	80065f4 <__sflush_r+0x38>
 8006666:	682b      	ldr	r3, [r5, #0]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d0c3      	beq.n	80065f4 <__sflush_r+0x38>
 800666c:	2b1d      	cmp	r3, #29
 800666e:	d001      	beq.n	8006674 <__sflush_r+0xb8>
 8006670:	2b16      	cmp	r3, #22
 8006672:	d101      	bne.n	8006678 <__sflush_r+0xbc>
 8006674:	602e      	str	r6, [r5, #0]
 8006676:	e7ad      	b.n	80065d4 <__sflush_r+0x18>
 8006678:	89a2      	ldrh	r2, [r4, #12]
 800667a:	2340      	movs	r3, #64	; 0x40
 800667c:	4313      	orrs	r3, r2
 800667e:	81a3      	strh	r3, [r4, #12]
 8006680:	e7a9      	b.n	80065d6 <__sflush_r+0x1a>
 8006682:	690e      	ldr	r6, [r1, #16]
 8006684:	2e00      	cmp	r6, #0
 8006686:	d0a5      	beq.n	80065d4 <__sflush_r+0x18>
 8006688:	680f      	ldr	r7, [r1, #0]
 800668a:	600e      	str	r6, [r1, #0]
 800668c:	1bba      	subs	r2, r7, r6
 800668e:	9201      	str	r2, [sp, #4]
 8006690:	2200      	movs	r2, #0
 8006692:	079b      	lsls	r3, r3, #30
 8006694:	d100      	bne.n	8006698 <__sflush_r+0xdc>
 8006696:	694a      	ldr	r2, [r1, #20]
 8006698:	60a2      	str	r2, [r4, #8]
 800669a:	9b01      	ldr	r3, [sp, #4]
 800669c:	2b00      	cmp	r3, #0
 800669e:	dd99      	ble.n	80065d4 <__sflush_r+0x18>
 80066a0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80066a2:	0032      	movs	r2, r6
 80066a4:	001f      	movs	r7, r3
 80066a6:	0028      	movs	r0, r5
 80066a8:	9b01      	ldr	r3, [sp, #4]
 80066aa:	6a21      	ldr	r1, [r4, #32]
 80066ac:	47b8      	blx	r7
 80066ae:	2800      	cmp	r0, #0
 80066b0:	dc06      	bgt.n	80066c0 <__sflush_r+0x104>
 80066b2:	2340      	movs	r3, #64	; 0x40
 80066b4:	2001      	movs	r0, #1
 80066b6:	89a2      	ldrh	r2, [r4, #12]
 80066b8:	4240      	negs	r0, r0
 80066ba:	4313      	orrs	r3, r2
 80066bc:	81a3      	strh	r3, [r4, #12]
 80066be:	e78a      	b.n	80065d6 <__sflush_r+0x1a>
 80066c0:	9b01      	ldr	r3, [sp, #4]
 80066c2:	1836      	adds	r6, r6, r0
 80066c4:	1a1b      	subs	r3, r3, r0
 80066c6:	9301      	str	r3, [sp, #4]
 80066c8:	e7e7      	b.n	800669a <__sflush_r+0xde>
 80066ca:	46c0      	nop			; (mov r8, r8)
 80066cc:	dfbffffe 	.word	0xdfbffffe

080066d0 <_fflush_r>:
 80066d0:	690b      	ldr	r3, [r1, #16]
 80066d2:	b570      	push	{r4, r5, r6, lr}
 80066d4:	0005      	movs	r5, r0
 80066d6:	000c      	movs	r4, r1
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d102      	bne.n	80066e2 <_fflush_r+0x12>
 80066dc:	2500      	movs	r5, #0
 80066de:	0028      	movs	r0, r5
 80066e0:	bd70      	pop	{r4, r5, r6, pc}
 80066e2:	2800      	cmp	r0, #0
 80066e4:	d004      	beq.n	80066f0 <_fflush_r+0x20>
 80066e6:	6a03      	ldr	r3, [r0, #32]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d101      	bne.n	80066f0 <_fflush_r+0x20>
 80066ec:	f7ff f8de 	bl	80058ac <__sinit>
 80066f0:	220c      	movs	r2, #12
 80066f2:	5ea3      	ldrsh	r3, [r4, r2]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d0f1      	beq.n	80066dc <_fflush_r+0xc>
 80066f8:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80066fa:	07d2      	lsls	r2, r2, #31
 80066fc:	d404      	bmi.n	8006708 <_fflush_r+0x38>
 80066fe:	059b      	lsls	r3, r3, #22
 8006700:	d402      	bmi.n	8006708 <_fflush_r+0x38>
 8006702:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006704:	f7ff fac0 	bl	8005c88 <__retarget_lock_acquire_recursive>
 8006708:	0028      	movs	r0, r5
 800670a:	0021      	movs	r1, r4
 800670c:	f7ff ff56 	bl	80065bc <__sflush_r>
 8006710:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006712:	0005      	movs	r5, r0
 8006714:	07db      	lsls	r3, r3, #31
 8006716:	d4e2      	bmi.n	80066de <_fflush_r+0xe>
 8006718:	89a3      	ldrh	r3, [r4, #12]
 800671a:	059b      	lsls	r3, r3, #22
 800671c:	d4df      	bmi.n	80066de <_fflush_r+0xe>
 800671e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006720:	f7ff fab3 	bl	8005c8a <__retarget_lock_release_recursive>
 8006724:	e7db      	b.n	80066de <_fflush_r+0xe>
	...

08006728 <fiprintf>:
 8006728:	b40e      	push	{r1, r2, r3}
 800672a:	b517      	push	{r0, r1, r2, r4, lr}
 800672c:	4c05      	ldr	r4, [pc, #20]	; (8006744 <fiprintf+0x1c>)
 800672e:	ab05      	add	r3, sp, #20
 8006730:	cb04      	ldmia	r3!, {r2}
 8006732:	0001      	movs	r1, r0
 8006734:	6820      	ldr	r0, [r4, #0]
 8006736:	9301      	str	r3, [sp, #4]
 8006738:	f7ff fca4 	bl	8006084 <_vfiprintf_r>
 800673c:	bc1e      	pop	{r1, r2, r3, r4}
 800673e:	bc08      	pop	{r3}
 8006740:	b003      	add	sp, #12
 8006742:	4718      	bx	r3
 8006744:	2000018c 	.word	0x2000018c

08006748 <__swbuf_r>:
 8006748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800674a:	0006      	movs	r6, r0
 800674c:	000d      	movs	r5, r1
 800674e:	0014      	movs	r4, r2
 8006750:	2800      	cmp	r0, #0
 8006752:	d004      	beq.n	800675e <__swbuf_r+0x16>
 8006754:	6a03      	ldr	r3, [r0, #32]
 8006756:	2b00      	cmp	r3, #0
 8006758:	d101      	bne.n	800675e <__swbuf_r+0x16>
 800675a:	f7ff f8a7 	bl	80058ac <__sinit>
 800675e:	69a3      	ldr	r3, [r4, #24]
 8006760:	60a3      	str	r3, [r4, #8]
 8006762:	89a3      	ldrh	r3, [r4, #12]
 8006764:	071b      	lsls	r3, r3, #28
 8006766:	d528      	bpl.n	80067ba <__swbuf_r+0x72>
 8006768:	6923      	ldr	r3, [r4, #16]
 800676a:	2b00      	cmp	r3, #0
 800676c:	d025      	beq.n	80067ba <__swbuf_r+0x72>
 800676e:	6923      	ldr	r3, [r4, #16]
 8006770:	6820      	ldr	r0, [r4, #0]
 8006772:	b2ef      	uxtb	r7, r5
 8006774:	1ac0      	subs	r0, r0, r3
 8006776:	6963      	ldr	r3, [r4, #20]
 8006778:	b2ed      	uxtb	r5, r5
 800677a:	4283      	cmp	r3, r0
 800677c:	dc05      	bgt.n	800678a <__swbuf_r+0x42>
 800677e:	0021      	movs	r1, r4
 8006780:	0030      	movs	r0, r6
 8006782:	f7ff ffa5 	bl	80066d0 <_fflush_r>
 8006786:	2800      	cmp	r0, #0
 8006788:	d11d      	bne.n	80067c6 <__swbuf_r+0x7e>
 800678a:	68a3      	ldr	r3, [r4, #8]
 800678c:	3001      	adds	r0, #1
 800678e:	3b01      	subs	r3, #1
 8006790:	60a3      	str	r3, [r4, #8]
 8006792:	6823      	ldr	r3, [r4, #0]
 8006794:	1c5a      	adds	r2, r3, #1
 8006796:	6022      	str	r2, [r4, #0]
 8006798:	701f      	strb	r7, [r3, #0]
 800679a:	6963      	ldr	r3, [r4, #20]
 800679c:	4283      	cmp	r3, r0
 800679e:	d004      	beq.n	80067aa <__swbuf_r+0x62>
 80067a0:	89a3      	ldrh	r3, [r4, #12]
 80067a2:	07db      	lsls	r3, r3, #31
 80067a4:	d507      	bpl.n	80067b6 <__swbuf_r+0x6e>
 80067a6:	2d0a      	cmp	r5, #10
 80067a8:	d105      	bne.n	80067b6 <__swbuf_r+0x6e>
 80067aa:	0021      	movs	r1, r4
 80067ac:	0030      	movs	r0, r6
 80067ae:	f7ff ff8f 	bl	80066d0 <_fflush_r>
 80067b2:	2800      	cmp	r0, #0
 80067b4:	d107      	bne.n	80067c6 <__swbuf_r+0x7e>
 80067b6:	0028      	movs	r0, r5
 80067b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80067ba:	0021      	movs	r1, r4
 80067bc:	0030      	movs	r0, r6
 80067be:	f000 f805 	bl	80067cc <__swsetup_r>
 80067c2:	2800      	cmp	r0, #0
 80067c4:	d0d3      	beq.n	800676e <__swbuf_r+0x26>
 80067c6:	2501      	movs	r5, #1
 80067c8:	426d      	negs	r5, r5
 80067ca:	e7f4      	b.n	80067b6 <__swbuf_r+0x6e>

080067cc <__swsetup_r>:
 80067cc:	4b30      	ldr	r3, [pc, #192]	; (8006890 <__swsetup_r+0xc4>)
 80067ce:	b570      	push	{r4, r5, r6, lr}
 80067d0:	0005      	movs	r5, r0
 80067d2:	6818      	ldr	r0, [r3, #0]
 80067d4:	000c      	movs	r4, r1
 80067d6:	2800      	cmp	r0, #0
 80067d8:	d004      	beq.n	80067e4 <__swsetup_r+0x18>
 80067da:	6a03      	ldr	r3, [r0, #32]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d101      	bne.n	80067e4 <__swsetup_r+0x18>
 80067e0:	f7ff f864 	bl	80058ac <__sinit>
 80067e4:	230c      	movs	r3, #12
 80067e6:	5ee2      	ldrsh	r2, [r4, r3]
 80067e8:	b293      	uxth	r3, r2
 80067ea:	0711      	lsls	r1, r2, #28
 80067ec:	d423      	bmi.n	8006836 <__swsetup_r+0x6a>
 80067ee:	06d9      	lsls	r1, r3, #27
 80067f0:	d407      	bmi.n	8006802 <__swsetup_r+0x36>
 80067f2:	2309      	movs	r3, #9
 80067f4:	2001      	movs	r0, #1
 80067f6:	602b      	str	r3, [r5, #0]
 80067f8:	3337      	adds	r3, #55	; 0x37
 80067fa:	4313      	orrs	r3, r2
 80067fc:	81a3      	strh	r3, [r4, #12]
 80067fe:	4240      	negs	r0, r0
 8006800:	bd70      	pop	{r4, r5, r6, pc}
 8006802:	075b      	lsls	r3, r3, #29
 8006804:	d513      	bpl.n	800682e <__swsetup_r+0x62>
 8006806:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006808:	2900      	cmp	r1, #0
 800680a:	d008      	beq.n	800681e <__swsetup_r+0x52>
 800680c:	0023      	movs	r3, r4
 800680e:	3344      	adds	r3, #68	; 0x44
 8006810:	4299      	cmp	r1, r3
 8006812:	d002      	beq.n	800681a <__swsetup_r+0x4e>
 8006814:	0028      	movs	r0, r5
 8006816:	f7ff fa61 	bl	8005cdc <_free_r>
 800681a:	2300      	movs	r3, #0
 800681c:	6363      	str	r3, [r4, #52]	; 0x34
 800681e:	2224      	movs	r2, #36	; 0x24
 8006820:	89a3      	ldrh	r3, [r4, #12]
 8006822:	4393      	bics	r3, r2
 8006824:	81a3      	strh	r3, [r4, #12]
 8006826:	2300      	movs	r3, #0
 8006828:	6063      	str	r3, [r4, #4]
 800682a:	6923      	ldr	r3, [r4, #16]
 800682c:	6023      	str	r3, [r4, #0]
 800682e:	2308      	movs	r3, #8
 8006830:	89a2      	ldrh	r2, [r4, #12]
 8006832:	4313      	orrs	r3, r2
 8006834:	81a3      	strh	r3, [r4, #12]
 8006836:	6923      	ldr	r3, [r4, #16]
 8006838:	2b00      	cmp	r3, #0
 800683a:	d10b      	bne.n	8006854 <__swsetup_r+0x88>
 800683c:	21a0      	movs	r1, #160	; 0xa0
 800683e:	2280      	movs	r2, #128	; 0x80
 8006840:	89a3      	ldrh	r3, [r4, #12]
 8006842:	0089      	lsls	r1, r1, #2
 8006844:	0092      	lsls	r2, r2, #2
 8006846:	400b      	ands	r3, r1
 8006848:	4293      	cmp	r3, r2
 800684a:	d003      	beq.n	8006854 <__swsetup_r+0x88>
 800684c:	0021      	movs	r1, r4
 800684e:	0028      	movs	r0, r5
 8006850:	f000 f89c 	bl	800698c <__smakebuf_r>
 8006854:	220c      	movs	r2, #12
 8006856:	5ea3      	ldrsh	r3, [r4, r2]
 8006858:	2001      	movs	r0, #1
 800685a:	001a      	movs	r2, r3
 800685c:	b299      	uxth	r1, r3
 800685e:	4002      	ands	r2, r0
 8006860:	4203      	tst	r3, r0
 8006862:	d00f      	beq.n	8006884 <__swsetup_r+0xb8>
 8006864:	2200      	movs	r2, #0
 8006866:	60a2      	str	r2, [r4, #8]
 8006868:	6962      	ldr	r2, [r4, #20]
 800686a:	4252      	negs	r2, r2
 800686c:	61a2      	str	r2, [r4, #24]
 800686e:	2000      	movs	r0, #0
 8006870:	6922      	ldr	r2, [r4, #16]
 8006872:	4282      	cmp	r2, r0
 8006874:	d1c4      	bne.n	8006800 <__swsetup_r+0x34>
 8006876:	0609      	lsls	r1, r1, #24
 8006878:	d5c2      	bpl.n	8006800 <__swsetup_r+0x34>
 800687a:	2240      	movs	r2, #64	; 0x40
 800687c:	4313      	orrs	r3, r2
 800687e:	81a3      	strh	r3, [r4, #12]
 8006880:	3801      	subs	r0, #1
 8006882:	e7bd      	b.n	8006800 <__swsetup_r+0x34>
 8006884:	0788      	lsls	r0, r1, #30
 8006886:	d400      	bmi.n	800688a <__swsetup_r+0xbe>
 8006888:	6962      	ldr	r2, [r4, #20]
 800688a:	60a2      	str	r2, [r4, #8]
 800688c:	e7ef      	b.n	800686e <__swsetup_r+0xa2>
 800688e:	46c0      	nop			; (mov r8, r8)
 8006890:	2000018c 	.word	0x2000018c

08006894 <memmove>:
 8006894:	b510      	push	{r4, lr}
 8006896:	4288      	cmp	r0, r1
 8006898:	d902      	bls.n	80068a0 <memmove+0xc>
 800689a:	188b      	adds	r3, r1, r2
 800689c:	4298      	cmp	r0, r3
 800689e:	d303      	bcc.n	80068a8 <memmove+0x14>
 80068a0:	2300      	movs	r3, #0
 80068a2:	e007      	b.n	80068b4 <memmove+0x20>
 80068a4:	5c8b      	ldrb	r3, [r1, r2]
 80068a6:	5483      	strb	r3, [r0, r2]
 80068a8:	3a01      	subs	r2, #1
 80068aa:	d2fb      	bcs.n	80068a4 <memmove+0x10>
 80068ac:	bd10      	pop	{r4, pc}
 80068ae:	5ccc      	ldrb	r4, [r1, r3]
 80068b0:	54c4      	strb	r4, [r0, r3]
 80068b2:	3301      	adds	r3, #1
 80068b4:	429a      	cmp	r2, r3
 80068b6:	d1fa      	bne.n	80068ae <memmove+0x1a>
 80068b8:	e7f8      	b.n	80068ac <memmove+0x18>

080068ba <memchr>:
 80068ba:	b2c9      	uxtb	r1, r1
 80068bc:	1882      	adds	r2, r0, r2
 80068be:	4290      	cmp	r0, r2
 80068c0:	d101      	bne.n	80068c6 <memchr+0xc>
 80068c2:	2000      	movs	r0, #0
 80068c4:	4770      	bx	lr
 80068c6:	7803      	ldrb	r3, [r0, #0]
 80068c8:	428b      	cmp	r3, r1
 80068ca:	d0fb      	beq.n	80068c4 <memchr+0xa>
 80068cc:	3001      	adds	r0, #1
 80068ce:	e7f6      	b.n	80068be <memchr+0x4>

080068d0 <abort>:
 80068d0:	2006      	movs	r0, #6
 80068d2:	b510      	push	{r4, lr}
 80068d4:	f000 f8c2 	bl	8006a5c <raise>
 80068d8:	2001      	movs	r0, #1
 80068da:	f7fb fb53 	bl	8001f84 <_exit>

080068de <_realloc_r>:
 80068de:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80068e0:	0007      	movs	r7, r0
 80068e2:	000e      	movs	r6, r1
 80068e4:	0014      	movs	r4, r2
 80068e6:	2900      	cmp	r1, #0
 80068e8:	d105      	bne.n	80068f6 <_realloc_r+0x18>
 80068ea:	0011      	movs	r1, r2
 80068ec:	f7fe fece 	bl	800568c <_malloc_r>
 80068f0:	0005      	movs	r5, r0
 80068f2:	0028      	movs	r0, r5
 80068f4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80068f6:	2a00      	cmp	r2, #0
 80068f8:	d103      	bne.n	8006902 <_realloc_r+0x24>
 80068fa:	f7ff f9ef 	bl	8005cdc <_free_r>
 80068fe:	0025      	movs	r5, r4
 8006900:	e7f7      	b.n	80068f2 <_realloc_r+0x14>
 8006902:	f000 f8ef 	bl	8006ae4 <_malloc_usable_size_r>
 8006906:	9001      	str	r0, [sp, #4]
 8006908:	4284      	cmp	r4, r0
 800690a:	d803      	bhi.n	8006914 <_realloc_r+0x36>
 800690c:	0035      	movs	r5, r6
 800690e:	0843      	lsrs	r3, r0, #1
 8006910:	42a3      	cmp	r3, r4
 8006912:	d3ee      	bcc.n	80068f2 <_realloc_r+0x14>
 8006914:	0021      	movs	r1, r4
 8006916:	0038      	movs	r0, r7
 8006918:	f7fe feb8 	bl	800568c <_malloc_r>
 800691c:	1e05      	subs	r5, r0, #0
 800691e:	d0e8      	beq.n	80068f2 <_realloc_r+0x14>
 8006920:	9b01      	ldr	r3, [sp, #4]
 8006922:	0022      	movs	r2, r4
 8006924:	429c      	cmp	r4, r3
 8006926:	d900      	bls.n	800692a <_realloc_r+0x4c>
 8006928:	001a      	movs	r2, r3
 800692a:	0031      	movs	r1, r6
 800692c:	0028      	movs	r0, r5
 800692e:	f7ff f9ad 	bl	8005c8c <memcpy>
 8006932:	0031      	movs	r1, r6
 8006934:	0038      	movs	r0, r7
 8006936:	f7ff f9d1 	bl	8005cdc <_free_r>
 800693a:	e7da      	b.n	80068f2 <_realloc_r+0x14>

0800693c <__swhatbuf_r>:
 800693c:	b570      	push	{r4, r5, r6, lr}
 800693e:	000e      	movs	r6, r1
 8006940:	001d      	movs	r5, r3
 8006942:	230e      	movs	r3, #14
 8006944:	5ec9      	ldrsh	r1, [r1, r3]
 8006946:	0014      	movs	r4, r2
 8006948:	b096      	sub	sp, #88	; 0x58
 800694a:	2900      	cmp	r1, #0
 800694c:	da0c      	bge.n	8006968 <__swhatbuf_r+0x2c>
 800694e:	89b2      	ldrh	r2, [r6, #12]
 8006950:	2380      	movs	r3, #128	; 0x80
 8006952:	0011      	movs	r1, r2
 8006954:	4019      	ands	r1, r3
 8006956:	421a      	tst	r2, r3
 8006958:	d013      	beq.n	8006982 <__swhatbuf_r+0x46>
 800695a:	2100      	movs	r1, #0
 800695c:	3b40      	subs	r3, #64	; 0x40
 800695e:	2000      	movs	r0, #0
 8006960:	6029      	str	r1, [r5, #0]
 8006962:	6023      	str	r3, [r4, #0]
 8006964:	b016      	add	sp, #88	; 0x58
 8006966:	bd70      	pop	{r4, r5, r6, pc}
 8006968:	466a      	mov	r2, sp
 800696a:	f000 f881 	bl	8006a70 <_fstat_r>
 800696e:	2800      	cmp	r0, #0
 8006970:	dbed      	blt.n	800694e <__swhatbuf_r+0x12>
 8006972:	23f0      	movs	r3, #240	; 0xf0
 8006974:	9901      	ldr	r1, [sp, #4]
 8006976:	021b      	lsls	r3, r3, #8
 8006978:	4019      	ands	r1, r3
 800697a:	4b03      	ldr	r3, [pc, #12]	; (8006988 <__swhatbuf_r+0x4c>)
 800697c:	18c9      	adds	r1, r1, r3
 800697e:	424b      	negs	r3, r1
 8006980:	4159      	adcs	r1, r3
 8006982:	2380      	movs	r3, #128	; 0x80
 8006984:	00db      	lsls	r3, r3, #3
 8006986:	e7ea      	b.n	800695e <__swhatbuf_r+0x22>
 8006988:	ffffe000 	.word	0xffffe000

0800698c <__smakebuf_r>:
 800698c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800698e:	2602      	movs	r6, #2
 8006990:	898b      	ldrh	r3, [r1, #12]
 8006992:	0005      	movs	r5, r0
 8006994:	000c      	movs	r4, r1
 8006996:	4233      	tst	r3, r6
 8006998:	d006      	beq.n	80069a8 <__smakebuf_r+0x1c>
 800699a:	0023      	movs	r3, r4
 800699c:	3347      	adds	r3, #71	; 0x47
 800699e:	6023      	str	r3, [r4, #0]
 80069a0:	6123      	str	r3, [r4, #16]
 80069a2:	2301      	movs	r3, #1
 80069a4:	6163      	str	r3, [r4, #20]
 80069a6:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 80069a8:	466a      	mov	r2, sp
 80069aa:	ab01      	add	r3, sp, #4
 80069ac:	f7ff ffc6 	bl	800693c <__swhatbuf_r>
 80069b0:	9900      	ldr	r1, [sp, #0]
 80069b2:	0007      	movs	r7, r0
 80069b4:	0028      	movs	r0, r5
 80069b6:	f7fe fe69 	bl	800568c <_malloc_r>
 80069ba:	2800      	cmp	r0, #0
 80069bc:	d108      	bne.n	80069d0 <__smakebuf_r+0x44>
 80069be:	220c      	movs	r2, #12
 80069c0:	5ea3      	ldrsh	r3, [r4, r2]
 80069c2:	059a      	lsls	r2, r3, #22
 80069c4:	d4ef      	bmi.n	80069a6 <__smakebuf_r+0x1a>
 80069c6:	2203      	movs	r2, #3
 80069c8:	4393      	bics	r3, r2
 80069ca:	431e      	orrs	r6, r3
 80069cc:	81a6      	strh	r6, [r4, #12]
 80069ce:	e7e4      	b.n	800699a <__smakebuf_r+0xe>
 80069d0:	2380      	movs	r3, #128	; 0x80
 80069d2:	89a2      	ldrh	r2, [r4, #12]
 80069d4:	6020      	str	r0, [r4, #0]
 80069d6:	4313      	orrs	r3, r2
 80069d8:	81a3      	strh	r3, [r4, #12]
 80069da:	9b00      	ldr	r3, [sp, #0]
 80069dc:	6120      	str	r0, [r4, #16]
 80069de:	6163      	str	r3, [r4, #20]
 80069e0:	9b01      	ldr	r3, [sp, #4]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d00c      	beq.n	8006a00 <__smakebuf_r+0x74>
 80069e6:	0028      	movs	r0, r5
 80069e8:	230e      	movs	r3, #14
 80069ea:	5ee1      	ldrsh	r1, [r4, r3]
 80069ec:	f000 f852 	bl	8006a94 <_isatty_r>
 80069f0:	2800      	cmp	r0, #0
 80069f2:	d005      	beq.n	8006a00 <__smakebuf_r+0x74>
 80069f4:	2303      	movs	r3, #3
 80069f6:	89a2      	ldrh	r2, [r4, #12]
 80069f8:	439a      	bics	r2, r3
 80069fa:	3b02      	subs	r3, #2
 80069fc:	4313      	orrs	r3, r2
 80069fe:	81a3      	strh	r3, [r4, #12]
 8006a00:	89a3      	ldrh	r3, [r4, #12]
 8006a02:	433b      	orrs	r3, r7
 8006a04:	81a3      	strh	r3, [r4, #12]
 8006a06:	e7ce      	b.n	80069a6 <__smakebuf_r+0x1a>

08006a08 <_raise_r>:
 8006a08:	b570      	push	{r4, r5, r6, lr}
 8006a0a:	0004      	movs	r4, r0
 8006a0c:	000d      	movs	r5, r1
 8006a0e:	291f      	cmp	r1, #31
 8006a10:	d904      	bls.n	8006a1c <_raise_r+0x14>
 8006a12:	2316      	movs	r3, #22
 8006a14:	6003      	str	r3, [r0, #0]
 8006a16:	2001      	movs	r0, #1
 8006a18:	4240      	negs	r0, r0
 8006a1a:	bd70      	pop	{r4, r5, r6, pc}
 8006a1c:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d004      	beq.n	8006a2c <_raise_r+0x24>
 8006a22:	008a      	lsls	r2, r1, #2
 8006a24:	189b      	adds	r3, r3, r2
 8006a26:	681a      	ldr	r2, [r3, #0]
 8006a28:	2a00      	cmp	r2, #0
 8006a2a:	d108      	bne.n	8006a3e <_raise_r+0x36>
 8006a2c:	0020      	movs	r0, r4
 8006a2e:	f000 f855 	bl	8006adc <_getpid_r>
 8006a32:	002a      	movs	r2, r5
 8006a34:	0001      	movs	r1, r0
 8006a36:	0020      	movs	r0, r4
 8006a38:	f000 f83e 	bl	8006ab8 <_kill_r>
 8006a3c:	e7ed      	b.n	8006a1a <_raise_r+0x12>
 8006a3e:	2000      	movs	r0, #0
 8006a40:	2a01      	cmp	r2, #1
 8006a42:	d0ea      	beq.n	8006a1a <_raise_r+0x12>
 8006a44:	1c51      	adds	r1, r2, #1
 8006a46:	d103      	bne.n	8006a50 <_raise_r+0x48>
 8006a48:	2316      	movs	r3, #22
 8006a4a:	3001      	adds	r0, #1
 8006a4c:	6023      	str	r3, [r4, #0]
 8006a4e:	e7e4      	b.n	8006a1a <_raise_r+0x12>
 8006a50:	2400      	movs	r4, #0
 8006a52:	0028      	movs	r0, r5
 8006a54:	601c      	str	r4, [r3, #0]
 8006a56:	4790      	blx	r2
 8006a58:	0020      	movs	r0, r4
 8006a5a:	e7de      	b.n	8006a1a <_raise_r+0x12>

08006a5c <raise>:
 8006a5c:	b510      	push	{r4, lr}
 8006a5e:	4b03      	ldr	r3, [pc, #12]	; (8006a6c <raise+0x10>)
 8006a60:	0001      	movs	r1, r0
 8006a62:	6818      	ldr	r0, [r3, #0]
 8006a64:	f7ff ffd0 	bl	8006a08 <_raise_r>
 8006a68:	bd10      	pop	{r4, pc}
 8006a6a:	46c0      	nop			; (mov r8, r8)
 8006a6c:	2000018c 	.word	0x2000018c

08006a70 <_fstat_r>:
 8006a70:	2300      	movs	r3, #0
 8006a72:	b570      	push	{r4, r5, r6, lr}
 8006a74:	4d06      	ldr	r5, [pc, #24]	; (8006a90 <_fstat_r+0x20>)
 8006a76:	0004      	movs	r4, r0
 8006a78:	0008      	movs	r0, r1
 8006a7a:	0011      	movs	r1, r2
 8006a7c:	602b      	str	r3, [r5, #0]
 8006a7e:	f7fb fad0 	bl	8002022 <_fstat>
 8006a82:	1c43      	adds	r3, r0, #1
 8006a84:	d103      	bne.n	8006a8e <_fstat_r+0x1e>
 8006a86:	682b      	ldr	r3, [r5, #0]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d000      	beq.n	8006a8e <_fstat_r+0x1e>
 8006a8c:	6023      	str	r3, [r4, #0]
 8006a8e:	bd70      	pop	{r4, r5, r6, pc}
 8006a90:	2000043c 	.word	0x2000043c

08006a94 <_isatty_r>:
 8006a94:	2300      	movs	r3, #0
 8006a96:	b570      	push	{r4, r5, r6, lr}
 8006a98:	4d06      	ldr	r5, [pc, #24]	; (8006ab4 <_isatty_r+0x20>)
 8006a9a:	0004      	movs	r4, r0
 8006a9c:	0008      	movs	r0, r1
 8006a9e:	602b      	str	r3, [r5, #0]
 8006aa0:	f7fb facd 	bl	800203e <_isatty>
 8006aa4:	1c43      	adds	r3, r0, #1
 8006aa6:	d103      	bne.n	8006ab0 <_isatty_r+0x1c>
 8006aa8:	682b      	ldr	r3, [r5, #0]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d000      	beq.n	8006ab0 <_isatty_r+0x1c>
 8006aae:	6023      	str	r3, [r4, #0]
 8006ab0:	bd70      	pop	{r4, r5, r6, pc}
 8006ab2:	46c0      	nop			; (mov r8, r8)
 8006ab4:	2000043c 	.word	0x2000043c

08006ab8 <_kill_r>:
 8006ab8:	2300      	movs	r3, #0
 8006aba:	b570      	push	{r4, r5, r6, lr}
 8006abc:	4d06      	ldr	r5, [pc, #24]	; (8006ad8 <_kill_r+0x20>)
 8006abe:	0004      	movs	r4, r0
 8006ac0:	0008      	movs	r0, r1
 8006ac2:	0011      	movs	r1, r2
 8006ac4:	602b      	str	r3, [r5, #0]
 8006ac6:	f7fb fa4d 	bl	8001f64 <_kill>
 8006aca:	1c43      	adds	r3, r0, #1
 8006acc:	d103      	bne.n	8006ad6 <_kill_r+0x1e>
 8006ace:	682b      	ldr	r3, [r5, #0]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d000      	beq.n	8006ad6 <_kill_r+0x1e>
 8006ad4:	6023      	str	r3, [r4, #0]
 8006ad6:	bd70      	pop	{r4, r5, r6, pc}
 8006ad8:	2000043c 	.word	0x2000043c

08006adc <_getpid_r>:
 8006adc:	b510      	push	{r4, lr}
 8006ade:	f7fb fa3b 	bl	8001f58 <_getpid>
 8006ae2:	bd10      	pop	{r4, pc}

08006ae4 <_malloc_usable_size_r>:
 8006ae4:	1f0b      	subs	r3, r1, #4
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	1f18      	subs	r0, r3, #4
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	da01      	bge.n	8006af2 <_malloc_usable_size_r+0xe>
 8006aee:	580b      	ldr	r3, [r1, r0]
 8006af0:	18c0      	adds	r0, r0, r3
 8006af2:	4770      	bx	lr

08006af4 <_init>:
 8006af4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006af6:	46c0      	nop			; (mov r8, r8)
 8006af8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006afa:	bc08      	pop	{r3}
 8006afc:	469e      	mov	lr, r3
 8006afe:	4770      	bx	lr

08006b00 <_fini>:
 8006b00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b02:	46c0      	nop			; (mov r8, r8)
 8006b04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b06:	bc08      	pop	{r3}
 8006b08:	469e      	mov	lr, r3
 8006b0a:	4770      	bx	lr
