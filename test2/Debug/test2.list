
test2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006ef8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000034c  08006fb8  08006fb8  00016fb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007304  08007304  00020188  2**0
                  CONTENTS
  4 .ARM          00000008  08007304  08007304  00017304  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800730c  0800730c  00020188  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800730c  0800730c  0001730c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007310  08007310  00017310  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000188  20000000  08007314  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002fc  20000188  0800749c  00020188  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000484  0800749c  00020484  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020188  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000201b0  2**0
                  CONTENTS, READONLY
 13 .debug_info   000102fa  00000000  00000000  000201f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003035  00000000  00000000  000304ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f80  00000000  00000000  00033528  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000bd8  00000000  00000000  000344a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00004516  00000000  00000000  00035080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014084  00000000  00000000  00039596  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00087cdf  00000000  00000000  0004d61a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004394  00000000  00000000  000d52fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000057  00000000  00000000  000d9690  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000188 	.word	0x20000188
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08006fa0 	.word	0x08006fa0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000018c 	.word	0x2000018c
 8000104:	08006fa0 	.word	0x08006fa0

08000108 <strcmp>:
 8000108:	7802      	ldrb	r2, [r0, #0]
 800010a:	780b      	ldrb	r3, [r1, #0]
 800010c:	2a00      	cmp	r2, #0
 800010e:	d003      	beq.n	8000118 <strcmp+0x10>
 8000110:	3001      	adds	r0, #1
 8000112:	3101      	adds	r1, #1
 8000114:	429a      	cmp	r2, r3
 8000116:	d0f7      	beq.n	8000108 <strcmp>
 8000118:	1ad0      	subs	r0, r2, r3
 800011a:	4770      	bx	lr

0800011c <strlen>:
 800011c:	2300      	movs	r3, #0
 800011e:	5cc2      	ldrb	r2, [r0, r3]
 8000120:	3301      	adds	r3, #1
 8000122:	2a00      	cmp	r2, #0
 8000124:	d1fb      	bne.n	800011e <strlen+0x2>
 8000126:	1e58      	subs	r0, r3, #1
 8000128:	4770      	bx	lr
	...

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	; 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f806 	bl	8000254 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			; (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__aeabi_idiv0>:
 8000254:	4770      	bx	lr
 8000256:	46c0      	nop			; (mov r8, r8)

08000258 <__aeabi_uldivmod>:
 8000258:	2b00      	cmp	r3, #0
 800025a:	d111      	bne.n	8000280 <__aeabi_uldivmod+0x28>
 800025c:	2a00      	cmp	r2, #0
 800025e:	d10f      	bne.n	8000280 <__aeabi_uldivmod+0x28>
 8000260:	2900      	cmp	r1, #0
 8000262:	d100      	bne.n	8000266 <__aeabi_uldivmod+0xe>
 8000264:	2800      	cmp	r0, #0
 8000266:	d002      	beq.n	800026e <__aeabi_uldivmod+0x16>
 8000268:	2100      	movs	r1, #0
 800026a:	43c9      	mvns	r1, r1
 800026c:	0008      	movs	r0, r1
 800026e:	b407      	push	{r0, r1, r2}
 8000270:	4802      	ldr	r0, [pc, #8]	; (800027c <__aeabi_uldivmod+0x24>)
 8000272:	a102      	add	r1, pc, #8	; (adr r1, 800027c <__aeabi_uldivmod+0x24>)
 8000274:	1840      	adds	r0, r0, r1
 8000276:	9002      	str	r0, [sp, #8]
 8000278:	bd03      	pop	{r0, r1, pc}
 800027a:	46c0      	nop			; (mov r8, r8)
 800027c:	ffffffd9 	.word	0xffffffd9
 8000280:	b403      	push	{r0, r1}
 8000282:	4668      	mov	r0, sp
 8000284:	b501      	push	{r0, lr}
 8000286:	9802      	ldr	r0, [sp, #8]
 8000288:	f000 f84c 	bl	8000324 <__udivmoddi4>
 800028c:	9b01      	ldr	r3, [sp, #4]
 800028e:	469e      	mov	lr, r3
 8000290:	b002      	add	sp, #8
 8000292:	bc0c      	pop	{r2, r3}
 8000294:	4770      	bx	lr
 8000296:	46c0      	nop			; (mov r8, r8)

08000298 <__aeabi_lmul>:
 8000298:	b5f0      	push	{r4, r5, r6, r7, lr}
 800029a:	46ce      	mov	lr, r9
 800029c:	4699      	mov	r9, r3
 800029e:	0c03      	lsrs	r3, r0, #16
 80002a0:	469c      	mov	ip, r3
 80002a2:	0413      	lsls	r3, r2, #16
 80002a4:	4647      	mov	r7, r8
 80002a6:	0c1b      	lsrs	r3, r3, #16
 80002a8:	001d      	movs	r5, r3
 80002aa:	000e      	movs	r6, r1
 80002ac:	4661      	mov	r1, ip
 80002ae:	0404      	lsls	r4, r0, #16
 80002b0:	0c24      	lsrs	r4, r4, #16
 80002b2:	b580      	push	{r7, lr}
 80002b4:	0007      	movs	r7, r0
 80002b6:	0c10      	lsrs	r0, r2, #16
 80002b8:	434b      	muls	r3, r1
 80002ba:	4365      	muls	r5, r4
 80002bc:	4341      	muls	r1, r0
 80002be:	4360      	muls	r0, r4
 80002c0:	0c2c      	lsrs	r4, r5, #16
 80002c2:	18c0      	adds	r0, r0, r3
 80002c4:	1820      	adds	r0, r4, r0
 80002c6:	468c      	mov	ip, r1
 80002c8:	4283      	cmp	r3, r0
 80002ca:	d903      	bls.n	80002d4 <__aeabi_lmul+0x3c>
 80002cc:	2380      	movs	r3, #128	; 0x80
 80002ce:	025b      	lsls	r3, r3, #9
 80002d0:	4698      	mov	r8, r3
 80002d2:	44c4      	add	ip, r8
 80002d4:	4649      	mov	r1, r9
 80002d6:	4379      	muls	r1, r7
 80002d8:	4356      	muls	r6, r2
 80002da:	0c03      	lsrs	r3, r0, #16
 80002dc:	042d      	lsls	r5, r5, #16
 80002de:	0c2d      	lsrs	r5, r5, #16
 80002e0:	1989      	adds	r1, r1, r6
 80002e2:	4463      	add	r3, ip
 80002e4:	0400      	lsls	r0, r0, #16
 80002e6:	1940      	adds	r0, r0, r5
 80002e8:	18c9      	adds	r1, r1, r3
 80002ea:	bcc0      	pop	{r6, r7}
 80002ec:	46b9      	mov	r9, r7
 80002ee:	46b0      	mov	r8, r6
 80002f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002f2:	46c0      	nop			; (mov r8, r8)

080002f4 <__aeabi_f2uiz>:
 80002f4:	219e      	movs	r1, #158	; 0x9e
 80002f6:	b510      	push	{r4, lr}
 80002f8:	05c9      	lsls	r1, r1, #23
 80002fa:	1c04      	adds	r4, r0, #0
 80002fc:	f000 fd7e 	bl	8000dfc <__aeabi_fcmpge>
 8000300:	2800      	cmp	r0, #0
 8000302:	d103      	bne.n	800030c <__aeabi_f2uiz+0x18>
 8000304:	1c20      	adds	r0, r4, #0
 8000306:	f000 fce1 	bl	8000ccc <__aeabi_f2iz>
 800030a:	bd10      	pop	{r4, pc}
 800030c:	219e      	movs	r1, #158	; 0x9e
 800030e:	1c20      	adds	r0, r4, #0
 8000310:	05c9      	lsls	r1, r1, #23
 8000312:	f000 fb3b 	bl	800098c <__aeabi_fsub>
 8000316:	f000 fcd9 	bl	8000ccc <__aeabi_f2iz>
 800031a:	2380      	movs	r3, #128	; 0x80
 800031c:	061b      	lsls	r3, r3, #24
 800031e:	469c      	mov	ip, r3
 8000320:	4460      	add	r0, ip
 8000322:	e7f2      	b.n	800030a <__aeabi_f2uiz+0x16>

08000324 <__udivmoddi4>:
 8000324:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000326:	4657      	mov	r7, sl
 8000328:	464e      	mov	r6, r9
 800032a:	4645      	mov	r5, r8
 800032c:	46de      	mov	lr, fp
 800032e:	b5e0      	push	{r5, r6, r7, lr}
 8000330:	0004      	movs	r4, r0
 8000332:	000d      	movs	r5, r1
 8000334:	4692      	mov	sl, r2
 8000336:	4699      	mov	r9, r3
 8000338:	b083      	sub	sp, #12
 800033a:	428b      	cmp	r3, r1
 800033c:	d830      	bhi.n	80003a0 <__udivmoddi4+0x7c>
 800033e:	d02d      	beq.n	800039c <__udivmoddi4+0x78>
 8000340:	4649      	mov	r1, r9
 8000342:	4650      	mov	r0, sl
 8000344:	f000 fd82 	bl	8000e4c <__clzdi2>
 8000348:	0029      	movs	r1, r5
 800034a:	0006      	movs	r6, r0
 800034c:	0020      	movs	r0, r4
 800034e:	f000 fd7d 	bl	8000e4c <__clzdi2>
 8000352:	1a33      	subs	r3, r6, r0
 8000354:	4698      	mov	r8, r3
 8000356:	3b20      	subs	r3, #32
 8000358:	d434      	bmi.n	80003c4 <__udivmoddi4+0xa0>
 800035a:	469b      	mov	fp, r3
 800035c:	4653      	mov	r3, sl
 800035e:	465a      	mov	r2, fp
 8000360:	4093      	lsls	r3, r2
 8000362:	4642      	mov	r2, r8
 8000364:	001f      	movs	r7, r3
 8000366:	4653      	mov	r3, sl
 8000368:	4093      	lsls	r3, r2
 800036a:	001e      	movs	r6, r3
 800036c:	42af      	cmp	r7, r5
 800036e:	d83b      	bhi.n	80003e8 <__udivmoddi4+0xc4>
 8000370:	42af      	cmp	r7, r5
 8000372:	d100      	bne.n	8000376 <__udivmoddi4+0x52>
 8000374:	e079      	b.n	800046a <__udivmoddi4+0x146>
 8000376:	465b      	mov	r3, fp
 8000378:	1ba4      	subs	r4, r4, r6
 800037a:	41bd      	sbcs	r5, r7
 800037c:	2b00      	cmp	r3, #0
 800037e:	da00      	bge.n	8000382 <__udivmoddi4+0x5e>
 8000380:	e076      	b.n	8000470 <__udivmoddi4+0x14c>
 8000382:	2200      	movs	r2, #0
 8000384:	2300      	movs	r3, #0
 8000386:	9200      	str	r2, [sp, #0]
 8000388:	9301      	str	r3, [sp, #4]
 800038a:	2301      	movs	r3, #1
 800038c:	465a      	mov	r2, fp
 800038e:	4093      	lsls	r3, r2
 8000390:	9301      	str	r3, [sp, #4]
 8000392:	2301      	movs	r3, #1
 8000394:	4642      	mov	r2, r8
 8000396:	4093      	lsls	r3, r2
 8000398:	9300      	str	r3, [sp, #0]
 800039a:	e029      	b.n	80003f0 <__udivmoddi4+0xcc>
 800039c:	4282      	cmp	r2, r0
 800039e:	d9cf      	bls.n	8000340 <__udivmoddi4+0x1c>
 80003a0:	2200      	movs	r2, #0
 80003a2:	2300      	movs	r3, #0
 80003a4:	9200      	str	r2, [sp, #0]
 80003a6:	9301      	str	r3, [sp, #4]
 80003a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	d001      	beq.n	80003b2 <__udivmoddi4+0x8e>
 80003ae:	601c      	str	r4, [r3, #0]
 80003b0:	605d      	str	r5, [r3, #4]
 80003b2:	9800      	ldr	r0, [sp, #0]
 80003b4:	9901      	ldr	r1, [sp, #4]
 80003b6:	b003      	add	sp, #12
 80003b8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ba:	46bb      	mov	fp, r7
 80003bc:	46b2      	mov	sl, r6
 80003be:	46a9      	mov	r9, r5
 80003c0:	46a0      	mov	r8, r4
 80003c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80003c4:	4642      	mov	r2, r8
 80003c6:	469b      	mov	fp, r3
 80003c8:	2320      	movs	r3, #32
 80003ca:	1a9b      	subs	r3, r3, r2
 80003cc:	4652      	mov	r2, sl
 80003ce:	40da      	lsrs	r2, r3
 80003d0:	4641      	mov	r1, r8
 80003d2:	0013      	movs	r3, r2
 80003d4:	464a      	mov	r2, r9
 80003d6:	408a      	lsls	r2, r1
 80003d8:	0017      	movs	r7, r2
 80003da:	4642      	mov	r2, r8
 80003dc:	431f      	orrs	r7, r3
 80003de:	4653      	mov	r3, sl
 80003e0:	4093      	lsls	r3, r2
 80003e2:	001e      	movs	r6, r3
 80003e4:	42af      	cmp	r7, r5
 80003e6:	d9c3      	bls.n	8000370 <__udivmoddi4+0x4c>
 80003e8:	2200      	movs	r2, #0
 80003ea:	2300      	movs	r3, #0
 80003ec:	9200      	str	r2, [sp, #0]
 80003ee:	9301      	str	r3, [sp, #4]
 80003f0:	4643      	mov	r3, r8
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d0d8      	beq.n	80003a8 <__udivmoddi4+0x84>
 80003f6:	07fb      	lsls	r3, r7, #31
 80003f8:	0872      	lsrs	r2, r6, #1
 80003fa:	431a      	orrs	r2, r3
 80003fc:	4646      	mov	r6, r8
 80003fe:	087b      	lsrs	r3, r7, #1
 8000400:	e00e      	b.n	8000420 <__udivmoddi4+0xfc>
 8000402:	42ab      	cmp	r3, r5
 8000404:	d101      	bne.n	800040a <__udivmoddi4+0xe6>
 8000406:	42a2      	cmp	r2, r4
 8000408:	d80c      	bhi.n	8000424 <__udivmoddi4+0x100>
 800040a:	1aa4      	subs	r4, r4, r2
 800040c:	419d      	sbcs	r5, r3
 800040e:	2001      	movs	r0, #1
 8000410:	1924      	adds	r4, r4, r4
 8000412:	416d      	adcs	r5, r5
 8000414:	2100      	movs	r1, #0
 8000416:	3e01      	subs	r6, #1
 8000418:	1824      	adds	r4, r4, r0
 800041a:	414d      	adcs	r5, r1
 800041c:	2e00      	cmp	r6, #0
 800041e:	d006      	beq.n	800042e <__udivmoddi4+0x10a>
 8000420:	42ab      	cmp	r3, r5
 8000422:	d9ee      	bls.n	8000402 <__udivmoddi4+0xde>
 8000424:	3e01      	subs	r6, #1
 8000426:	1924      	adds	r4, r4, r4
 8000428:	416d      	adcs	r5, r5
 800042a:	2e00      	cmp	r6, #0
 800042c:	d1f8      	bne.n	8000420 <__udivmoddi4+0xfc>
 800042e:	9800      	ldr	r0, [sp, #0]
 8000430:	9901      	ldr	r1, [sp, #4]
 8000432:	465b      	mov	r3, fp
 8000434:	1900      	adds	r0, r0, r4
 8000436:	4169      	adcs	r1, r5
 8000438:	2b00      	cmp	r3, #0
 800043a:	db24      	blt.n	8000486 <__udivmoddi4+0x162>
 800043c:	002b      	movs	r3, r5
 800043e:	465a      	mov	r2, fp
 8000440:	4644      	mov	r4, r8
 8000442:	40d3      	lsrs	r3, r2
 8000444:	002a      	movs	r2, r5
 8000446:	40e2      	lsrs	r2, r4
 8000448:	001c      	movs	r4, r3
 800044a:	465b      	mov	r3, fp
 800044c:	0015      	movs	r5, r2
 800044e:	2b00      	cmp	r3, #0
 8000450:	db2a      	blt.n	80004a8 <__udivmoddi4+0x184>
 8000452:	0026      	movs	r6, r4
 8000454:	409e      	lsls	r6, r3
 8000456:	0033      	movs	r3, r6
 8000458:	0026      	movs	r6, r4
 800045a:	4647      	mov	r7, r8
 800045c:	40be      	lsls	r6, r7
 800045e:	0032      	movs	r2, r6
 8000460:	1a80      	subs	r0, r0, r2
 8000462:	4199      	sbcs	r1, r3
 8000464:	9000      	str	r0, [sp, #0]
 8000466:	9101      	str	r1, [sp, #4]
 8000468:	e79e      	b.n	80003a8 <__udivmoddi4+0x84>
 800046a:	42a3      	cmp	r3, r4
 800046c:	d8bc      	bhi.n	80003e8 <__udivmoddi4+0xc4>
 800046e:	e782      	b.n	8000376 <__udivmoddi4+0x52>
 8000470:	4642      	mov	r2, r8
 8000472:	2320      	movs	r3, #32
 8000474:	2100      	movs	r1, #0
 8000476:	1a9b      	subs	r3, r3, r2
 8000478:	2200      	movs	r2, #0
 800047a:	9100      	str	r1, [sp, #0]
 800047c:	9201      	str	r2, [sp, #4]
 800047e:	2201      	movs	r2, #1
 8000480:	40da      	lsrs	r2, r3
 8000482:	9201      	str	r2, [sp, #4]
 8000484:	e785      	b.n	8000392 <__udivmoddi4+0x6e>
 8000486:	4642      	mov	r2, r8
 8000488:	2320      	movs	r3, #32
 800048a:	1a9b      	subs	r3, r3, r2
 800048c:	002a      	movs	r2, r5
 800048e:	4646      	mov	r6, r8
 8000490:	409a      	lsls	r2, r3
 8000492:	0023      	movs	r3, r4
 8000494:	40f3      	lsrs	r3, r6
 8000496:	4644      	mov	r4, r8
 8000498:	4313      	orrs	r3, r2
 800049a:	002a      	movs	r2, r5
 800049c:	40e2      	lsrs	r2, r4
 800049e:	001c      	movs	r4, r3
 80004a0:	465b      	mov	r3, fp
 80004a2:	0015      	movs	r5, r2
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	dad4      	bge.n	8000452 <__udivmoddi4+0x12e>
 80004a8:	4642      	mov	r2, r8
 80004aa:	002f      	movs	r7, r5
 80004ac:	2320      	movs	r3, #32
 80004ae:	0026      	movs	r6, r4
 80004b0:	4097      	lsls	r7, r2
 80004b2:	1a9b      	subs	r3, r3, r2
 80004b4:	40de      	lsrs	r6, r3
 80004b6:	003b      	movs	r3, r7
 80004b8:	4333      	orrs	r3, r6
 80004ba:	e7cd      	b.n	8000458 <__udivmoddi4+0x134>

080004bc <__aeabi_fdiv>:
 80004bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004be:	464f      	mov	r7, r9
 80004c0:	4646      	mov	r6, r8
 80004c2:	46d6      	mov	lr, sl
 80004c4:	0245      	lsls	r5, r0, #9
 80004c6:	b5c0      	push	{r6, r7, lr}
 80004c8:	0047      	lsls	r7, r0, #1
 80004ca:	1c0c      	adds	r4, r1, #0
 80004cc:	0a6d      	lsrs	r5, r5, #9
 80004ce:	0e3f      	lsrs	r7, r7, #24
 80004d0:	0fc6      	lsrs	r6, r0, #31
 80004d2:	2f00      	cmp	r7, #0
 80004d4:	d100      	bne.n	80004d8 <__aeabi_fdiv+0x1c>
 80004d6:	e06f      	b.n	80005b8 <__aeabi_fdiv+0xfc>
 80004d8:	2fff      	cmp	r7, #255	; 0xff
 80004da:	d100      	bne.n	80004de <__aeabi_fdiv+0x22>
 80004dc:	e074      	b.n	80005c8 <__aeabi_fdiv+0x10c>
 80004de:	2300      	movs	r3, #0
 80004e0:	2280      	movs	r2, #128	; 0x80
 80004e2:	4699      	mov	r9, r3
 80004e4:	469a      	mov	sl, r3
 80004e6:	00ed      	lsls	r5, r5, #3
 80004e8:	04d2      	lsls	r2, r2, #19
 80004ea:	4315      	orrs	r5, r2
 80004ec:	3f7f      	subs	r7, #127	; 0x7f
 80004ee:	0263      	lsls	r3, r4, #9
 80004f0:	0a5b      	lsrs	r3, r3, #9
 80004f2:	4698      	mov	r8, r3
 80004f4:	0063      	lsls	r3, r4, #1
 80004f6:	0e1b      	lsrs	r3, r3, #24
 80004f8:	0fe4      	lsrs	r4, r4, #31
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	d04d      	beq.n	800059a <__aeabi_fdiv+0xde>
 80004fe:	2bff      	cmp	r3, #255	; 0xff
 8000500:	d045      	beq.n	800058e <__aeabi_fdiv+0xd2>
 8000502:	4642      	mov	r2, r8
 8000504:	2180      	movs	r1, #128	; 0x80
 8000506:	00d2      	lsls	r2, r2, #3
 8000508:	04c9      	lsls	r1, r1, #19
 800050a:	4311      	orrs	r1, r2
 800050c:	4688      	mov	r8, r1
 800050e:	2200      	movs	r2, #0
 8000510:	3b7f      	subs	r3, #127	; 0x7f
 8000512:	0031      	movs	r1, r6
 8000514:	1aff      	subs	r7, r7, r3
 8000516:	464b      	mov	r3, r9
 8000518:	4061      	eors	r1, r4
 800051a:	b2c9      	uxtb	r1, r1
 800051c:	2b0f      	cmp	r3, #15
 800051e:	d900      	bls.n	8000522 <__aeabi_fdiv+0x66>
 8000520:	e0b8      	b.n	8000694 <__aeabi_fdiv+0x1d8>
 8000522:	4870      	ldr	r0, [pc, #448]	; (80006e4 <__aeabi_fdiv+0x228>)
 8000524:	009b      	lsls	r3, r3, #2
 8000526:	58c3      	ldr	r3, [r0, r3]
 8000528:	469f      	mov	pc, r3
 800052a:	2300      	movs	r3, #0
 800052c:	4698      	mov	r8, r3
 800052e:	0026      	movs	r6, r4
 8000530:	4645      	mov	r5, r8
 8000532:	4692      	mov	sl, r2
 8000534:	4653      	mov	r3, sl
 8000536:	2b02      	cmp	r3, #2
 8000538:	d100      	bne.n	800053c <__aeabi_fdiv+0x80>
 800053a:	e08d      	b.n	8000658 <__aeabi_fdiv+0x19c>
 800053c:	2b03      	cmp	r3, #3
 800053e:	d100      	bne.n	8000542 <__aeabi_fdiv+0x86>
 8000540:	e0a1      	b.n	8000686 <__aeabi_fdiv+0x1ca>
 8000542:	2b01      	cmp	r3, #1
 8000544:	d018      	beq.n	8000578 <__aeabi_fdiv+0xbc>
 8000546:	003b      	movs	r3, r7
 8000548:	337f      	adds	r3, #127	; 0x7f
 800054a:	2b00      	cmp	r3, #0
 800054c:	dd6d      	ble.n	800062a <__aeabi_fdiv+0x16e>
 800054e:	076a      	lsls	r2, r5, #29
 8000550:	d004      	beq.n	800055c <__aeabi_fdiv+0xa0>
 8000552:	220f      	movs	r2, #15
 8000554:	402a      	ands	r2, r5
 8000556:	2a04      	cmp	r2, #4
 8000558:	d000      	beq.n	800055c <__aeabi_fdiv+0xa0>
 800055a:	3504      	adds	r5, #4
 800055c:	012a      	lsls	r2, r5, #4
 800055e:	d503      	bpl.n	8000568 <__aeabi_fdiv+0xac>
 8000560:	4b61      	ldr	r3, [pc, #388]	; (80006e8 <__aeabi_fdiv+0x22c>)
 8000562:	401d      	ands	r5, r3
 8000564:	003b      	movs	r3, r7
 8000566:	3380      	adds	r3, #128	; 0x80
 8000568:	2bfe      	cmp	r3, #254	; 0xfe
 800056a:	dd00      	ble.n	800056e <__aeabi_fdiv+0xb2>
 800056c:	e074      	b.n	8000658 <__aeabi_fdiv+0x19c>
 800056e:	01aa      	lsls	r2, r5, #6
 8000570:	0a52      	lsrs	r2, r2, #9
 8000572:	b2d8      	uxtb	r0, r3
 8000574:	e002      	b.n	800057c <__aeabi_fdiv+0xc0>
 8000576:	000e      	movs	r6, r1
 8000578:	2000      	movs	r0, #0
 800057a:	2200      	movs	r2, #0
 800057c:	05c0      	lsls	r0, r0, #23
 800057e:	07f6      	lsls	r6, r6, #31
 8000580:	4310      	orrs	r0, r2
 8000582:	4330      	orrs	r0, r6
 8000584:	bce0      	pop	{r5, r6, r7}
 8000586:	46ba      	mov	sl, r7
 8000588:	46b1      	mov	r9, r6
 800058a:	46a8      	mov	r8, r5
 800058c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800058e:	4643      	mov	r3, r8
 8000590:	2b00      	cmp	r3, #0
 8000592:	d13f      	bne.n	8000614 <__aeabi_fdiv+0x158>
 8000594:	2202      	movs	r2, #2
 8000596:	3fff      	subs	r7, #255	; 0xff
 8000598:	e003      	b.n	80005a2 <__aeabi_fdiv+0xe6>
 800059a:	4643      	mov	r3, r8
 800059c:	2b00      	cmp	r3, #0
 800059e:	d12d      	bne.n	80005fc <__aeabi_fdiv+0x140>
 80005a0:	2201      	movs	r2, #1
 80005a2:	0031      	movs	r1, r6
 80005a4:	464b      	mov	r3, r9
 80005a6:	4061      	eors	r1, r4
 80005a8:	b2c9      	uxtb	r1, r1
 80005aa:	4313      	orrs	r3, r2
 80005ac:	2b0f      	cmp	r3, #15
 80005ae:	d838      	bhi.n	8000622 <__aeabi_fdiv+0x166>
 80005b0:	484e      	ldr	r0, [pc, #312]	; (80006ec <__aeabi_fdiv+0x230>)
 80005b2:	009b      	lsls	r3, r3, #2
 80005b4:	58c3      	ldr	r3, [r0, r3]
 80005b6:	469f      	mov	pc, r3
 80005b8:	2d00      	cmp	r5, #0
 80005ba:	d113      	bne.n	80005e4 <__aeabi_fdiv+0x128>
 80005bc:	2304      	movs	r3, #4
 80005be:	4699      	mov	r9, r3
 80005c0:	3b03      	subs	r3, #3
 80005c2:	2700      	movs	r7, #0
 80005c4:	469a      	mov	sl, r3
 80005c6:	e792      	b.n	80004ee <__aeabi_fdiv+0x32>
 80005c8:	2d00      	cmp	r5, #0
 80005ca:	d105      	bne.n	80005d8 <__aeabi_fdiv+0x11c>
 80005cc:	2308      	movs	r3, #8
 80005ce:	4699      	mov	r9, r3
 80005d0:	3b06      	subs	r3, #6
 80005d2:	27ff      	movs	r7, #255	; 0xff
 80005d4:	469a      	mov	sl, r3
 80005d6:	e78a      	b.n	80004ee <__aeabi_fdiv+0x32>
 80005d8:	230c      	movs	r3, #12
 80005da:	4699      	mov	r9, r3
 80005dc:	3b09      	subs	r3, #9
 80005de:	27ff      	movs	r7, #255	; 0xff
 80005e0:	469a      	mov	sl, r3
 80005e2:	e784      	b.n	80004ee <__aeabi_fdiv+0x32>
 80005e4:	0028      	movs	r0, r5
 80005e6:	f000 fc13 	bl	8000e10 <__clzsi2>
 80005ea:	2776      	movs	r7, #118	; 0x76
 80005ec:	1f43      	subs	r3, r0, #5
 80005ee:	409d      	lsls	r5, r3
 80005f0:	2300      	movs	r3, #0
 80005f2:	427f      	negs	r7, r7
 80005f4:	4699      	mov	r9, r3
 80005f6:	469a      	mov	sl, r3
 80005f8:	1a3f      	subs	r7, r7, r0
 80005fa:	e778      	b.n	80004ee <__aeabi_fdiv+0x32>
 80005fc:	4640      	mov	r0, r8
 80005fe:	f000 fc07 	bl	8000e10 <__clzsi2>
 8000602:	4642      	mov	r2, r8
 8000604:	1f43      	subs	r3, r0, #5
 8000606:	409a      	lsls	r2, r3
 8000608:	2376      	movs	r3, #118	; 0x76
 800060a:	425b      	negs	r3, r3
 800060c:	4690      	mov	r8, r2
 800060e:	1a1b      	subs	r3, r3, r0
 8000610:	2200      	movs	r2, #0
 8000612:	e77e      	b.n	8000512 <__aeabi_fdiv+0x56>
 8000614:	2303      	movs	r3, #3
 8000616:	464a      	mov	r2, r9
 8000618:	431a      	orrs	r2, r3
 800061a:	4691      	mov	r9, r2
 800061c:	33fc      	adds	r3, #252	; 0xfc
 800061e:	2203      	movs	r2, #3
 8000620:	e777      	b.n	8000512 <__aeabi_fdiv+0x56>
 8000622:	000e      	movs	r6, r1
 8000624:	20ff      	movs	r0, #255	; 0xff
 8000626:	2200      	movs	r2, #0
 8000628:	e7a8      	b.n	800057c <__aeabi_fdiv+0xc0>
 800062a:	2201      	movs	r2, #1
 800062c:	1ad3      	subs	r3, r2, r3
 800062e:	2b1b      	cmp	r3, #27
 8000630:	dca2      	bgt.n	8000578 <__aeabi_fdiv+0xbc>
 8000632:	379e      	adds	r7, #158	; 0x9e
 8000634:	002a      	movs	r2, r5
 8000636:	40bd      	lsls	r5, r7
 8000638:	40da      	lsrs	r2, r3
 800063a:	1e6b      	subs	r3, r5, #1
 800063c:	419d      	sbcs	r5, r3
 800063e:	4315      	orrs	r5, r2
 8000640:	076a      	lsls	r2, r5, #29
 8000642:	d004      	beq.n	800064e <__aeabi_fdiv+0x192>
 8000644:	220f      	movs	r2, #15
 8000646:	402a      	ands	r2, r5
 8000648:	2a04      	cmp	r2, #4
 800064a:	d000      	beq.n	800064e <__aeabi_fdiv+0x192>
 800064c:	3504      	adds	r5, #4
 800064e:	016a      	lsls	r2, r5, #5
 8000650:	d544      	bpl.n	80006dc <__aeabi_fdiv+0x220>
 8000652:	2001      	movs	r0, #1
 8000654:	2200      	movs	r2, #0
 8000656:	e791      	b.n	800057c <__aeabi_fdiv+0xc0>
 8000658:	20ff      	movs	r0, #255	; 0xff
 800065a:	2200      	movs	r2, #0
 800065c:	e78e      	b.n	800057c <__aeabi_fdiv+0xc0>
 800065e:	2280      	movs	r2, #128	; 0x80
 8000660:	2600      	movs	r6, #0
 8000662:	20ff      	movs	r0, #255	; 0xff
 8000664:	03d2      	lsls	r2, r2, #15
 8000666:	e789      	b.n	800057c <__aeabi_fdiv+0xc0>
 8000668:	2300      	movs	r3, #0
 800066a:	4698      	mov	r8, r3
 800066c:	2280      	movs	r2, #128	; 0x80
 800066e:	03d2      	lsls	r2, r2, #15
 8000670:	4215      	tst	r5, r2
 8000672:	d008      	beq.n	8000686 <__aeabi_fdiv+0x1ca>
 8000674:	4643      	mov	r3, r8
 8000676:	4213      	tst	r3, r2
 8000678:	d105      	bne.n	8000686 <__aeabi_fdiv+0x1ca>
 800067a:	431a      	orrs	r2, r3
 800067c:	0252      	lsls	r2, r2, #9
 800067e:	0026      	movs	r6, r4
 8000680:	20ff      	movs	r0, #255	; 0xff
 8000682:	0a52      	lsrs	r2, r2, #9
 8000684:	e77a      	b.n	800057c <__aeabi_fdiv+0xc0>
 8000686:	2280      	movs	r2, #128	; 0x80
 8000688:	03d2      	lsls	r2, r2, #15
 800068a:	432a      	orrs	r2, r5
 800068c:	0252      	lsls	r2, r2, #9
 800068e:	20ff      	movs	r0, #255	; 0xff
 8000690:	0a52      	lsrs	r2, r2, #9
 8000692:	e773      	b.n	800057c <__aeabi_fdiv+0xc0>
 8000694:	4642      	mov	r2, r8
 8000696:	016b      	lsls	r3, r5, #5
 8000698:	0155      	lsls	r5, r2, #5
 800069a:	42ab      	cmp	r3, r5
 800069c:	d21a      	bcs.n	80006d4 <__aeabi_fdiv+0x218>
 800069e:	201b      	movs	r0, #27
 80006a0:	2200      	movs	r2, #0
 80006a2:	3f01      	subs	r7, #1
 80006a4:	2601      	movs	r6, #1
 80006a6:	001c      	movs	r4, r3
 80006a8:	0052      	lsls	r2, r2, #1
 80006aa:	005b      	lsls	r3, r3, #1
 80006ac:	2c00      	cmp	r4, #0
 80006ae:	db01      	blt.n	80006b4 <__aeabi_fdiv+0x1f8>
 80006b0:	429d      	cmp	r5, r3
 80006b2:	d801      	bhi.n	80006b8 <__aeabi_fdiv+0x1fc>
 80006b4:	1b5b      	subs	r3, r3, r5
 80006b6:	4332      	orrs	r2, r6
 80006b8:	3801      	subs	r0, #1
 80006ba:	2800      	cmp	r0, #0
 80006bc:	d1f3      	bne.n	80006a6 <__aeabi_fdiv+0x1ea>
 80006be:	1e58      	subs	r0, r3, #1
 80006c0:	4183      	sbcs	r3, r0
 80006c2:	4313      	orrs	r3, r2
 80006c4:	001d      	movs	r5, r3
 80006c6:	003b      	movs	r3, r7
 80006c8:	337f      	adds	r3, #127	; 0x7f
 80006ca:	000e      	movs	r6, r1
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	dd00      	ble.n	80006d2 <__aeabi_fdiv+0x216>
 80006d0:	e73d      	b.n	800054e <__aeabi_fdiv+0x92>
 80006d2:	e7aa      	b.n	800062a <__aeabi_fdiv+0x16e>
 80006d4:	201a      	movs	r0, #26
 80006d6:	2201      	movs	r2, #1
 80006d8:	1b5b      	subs	r3, r3, r5
 80006da:	e7e3      	b.n	80006a4 <__aeabi_fdiv+0x1e8>
 80006dc:	01aa      	lsls	r2, r5, #6
 80006de:	2000      	movs	r0, #0
 80006e0:	0a52      	lsrs	r2, r2, #9
 80006e2:	e74b      	b.n	800057c <__aeabi_fdiv+0xc0>
 80006e4:	0800701c 	.word	0x0800701c
 80006e8:	f7ffffff 	.word	0xf7ffffff
 80006ec:	0800705c 	.word	0x0800705c

080006f0 <__aeabi_fmul>:
 80006f0:	0243      	lsls	r3, r0, #9
 80006f2:	0a5b      	lsrs	r3, r3, #9
 80006f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006f6:	464f      	mov	r7, r9
 80006f8:	4646      	mov	r6, r8
 80006fa:	4699      	mov	r9, r3
 80006fc:	46d6      	mov	lr, sl
 80006fe:	0fc3      	lsrs	r3, r0, #31
 8000700:	0045      	lsls	r5, r0, #1
 8000702:	4698      	mov	r8, r3
 8000704:	b5c0      	push	{r6, r7, lr}
 8000706:	464b      	mov	r3, r9
 8000708:	1c0f      	adds	r7, r1, #0
 800070a:	0e2d      	lsrs	r5, r5, #24
 800070c:	d100      	bne.n	8000710 <__aeabi_fmul+0x20>
 800070e:	e0cb      	b.n	80008a8 <__aeabi_fmul+0x1b8>
 8000710:	2dff      	cmp	r5, #255	; 0xff
 8000712:	d100      	bne.n	8000716 <__aeabi_fmul+0x26>
 8000714:	e0cf      	b.n	80008b6 <__aeabi_fmul+0x1c6>
 8000716:	2280      	movs	r2, #128	; 0x80
 8000718:	00db      	lsls	r3, r3, #3
 800071a:	04d2      	lsls	r2, r2, #19
 800071c:	431a      	orrs	r2, r3
 800071e:	2300      	movs	r3, #0
 8000720:	4691      	mov	r9, r2
 8000722:	2600      	movs	r6, #0
 8000724:	469a      	mov	sl, r3
 8000726:	3d7f      	subs	r5, #127	; 0x7f
 8000728:	027c      	lsls	r4, r7, #9
 800072a:	007b      	lsls	r3, r7, #1
 800072c:	0a64      	lsrs	r4, r4, #9
 800072e:	0e1b      	lsrs	r3, r3, #24
 8000730:	0fff      	lsrs	r7, r7, #31
 8000732:	2b00      	cmp	r3, #0
 8000734:	d100      	bne.n	8000738 <__aeabi_fmul+0x48>
 8000736:	e0a9      	b.n	800088c <__aeabi_fmul+0x19c>
 8000738:	2bff      	cmp	r3, #255	; 0xff
 800073a:	d011      	beq.n	8000760 <__aeabi_fmul+0x70>
 800073c:	2280      	movs	r2, #128	; 0x80
 800073e:	00e4      	lsls	r4, r4, #3
 8000740:	04d2      	lsls	r2, r2, #19
 8000742:	4314      	orrs	r4, r2
 8000744:	4642      	mov	r2, r8
 8000746:	3b7f      	subs	r3, #127	; 0x7f
 8000748:	195b      	adds	r3, r3, r5
 800074a:	407a      	eors	r2, r7
 800074c:	2000      	movs	r0, #0
 800074e:	b2d2      	uxtb	r2, r2
 8000750:	1c5d      	adds	r5, r3, #1
 8000752:	2e0a      	cmp	r6, #10
 8000754:	dd13      	ble.n	800077e <__aeabi_fmul+0x8e>
 8000756:	003a      	movs	r2, r7
 8000758:	2e0b      	cmp	r6, #11
 800075a:	d047      	beq.n	80007ec <__aeabi_fmul+0xfc>
 800075c:	4647      	mov	r7, r8
 800075e:	e03f      	b.n	80007e0 <__aeabi_fmul+0xf0>
 8000760:	002b      	movs	r3, r5
 8000762:	33ff      	adds	r3, #255	; 0xff
 8000764:	2c00      	cmp	r4, #0
 8000766:	d11e      	bne.n	80007a6 <__aeabi_fmul+0xb6>
 8000768:	2202      	movs	r2, #2
 800076a:	4316      	orrs	r6, r2
 800076c:	4642      	mov	r2, r8
 800076e:	3501      	adds	r5, #1
 8000770:	407a      	eors	r2, r7
 8000772:	b2d2      	uxtb	r2, r2
 8000774:	35ff      	adds	r5, #255	; 0xff
 8000776:	2e0a      	cmp	r6, #10
 8000778:	dd00      	ble.n	800077c <__aeabi_fmul+0x8c>
 800077a:	e0e4      	b.n	8000946 <__aeabi_fmul+0x256>
 800077c:	2002      	movs	r0, #2
 800077e:	2e02      	cmp	r6, #2
 8000780:	dc1c      	bgt.n	80007bc <__aeabi_fmul+0xcc>
 8000782:	3e01      	subs	r6, #1
 8000784:	2e01      	cmp	r6, #1
 8000786:	d842      	bhi.n	800080e <__aeabi_fmul+0x11e>
 8000788:	2802      	cmp	r0, #2
 800078a:	d03d      	beq.n	8000808 <__aeabi_fmul+0x118>
 800078c:	2801      	cmp	r0, #1
 800078e:	d166      	bne.n	800085e <__aeabi_fmul+0x16e>
 8000790:	2000      	movs	r0, #0
 8000792:	2100      	movs	r1, #0
 8000794:	05c0      	lsls	r0, r0, #23
 8000796:	4308      	orrs	r0, r1
 8000798:	07d2      	lsls	r2, r2, #31
 800079a:	4310      	orrs	r0, r2
 800079c:	bce0      	pop	{r5, r6, r7}
 800079e:	46ba      	mov	sl, r7
 80007a0:	46b1      	mov	r9, r6
 80007a2:	46a8      	mov	r8, r5
 80007a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007a6:	2203      	movs	r2, #3
 80007a8:	4316      	orrs	r6, r2
 80007aa:	4642      	mov	r2, r8
 80007ac:	3501      	adds	r5, #1
 80007ae:	407a      	eors	r2, r7
 80007b0:	b2d2      	uxtb	r2, r2
 80007b2:	35ff      	adds	r5, #255	; 0xff
 80007b4:	2e0a      	cmp	r6, #10
 80007b6:	dd00      	ble.n	80007ba <__aeabi_fmul+0xca>
 80007b8:	e0e4      	b.n	8000984 <__aeabi_fmul+0x294>
 80007ba:	2003      	movs	r0, #3
 80007bc:	2101      	movs	r1, #1
 80007be:	40b1      	lsls	r1, r6
 80007c0:	26a6      	movs	r6, #166	; 0xa6
 80007c2:	00f6      	lsls	r6, r6, #3
 80007c4:	4231      	tst	r1, r6
 80007c6:	d10a      	bne.n	80007de <__aeabi_fmul+0xee>
 80007c8:	2690      	movs	r6, #144	; 0x90
 80007ca:	00b6      	lsls	r6, r6, #2
 80007cc:	4231      	tst	r1, r6
 80007ce:	d116      	bne.n	80007fe <__aeabi_fmul+0x10e>
 80007d0:	3eb9      	subs	r6, #185	; 0xb9
 80007d2:	3eff      	subs	r6, #255	; 0xff
 80007d4:	420e      	tst	r6, r1
 80007d6:	d01a      	beq.n	800080e <__aeabi_fmul+0x11e>
 80007d8:	46a1      	mov	r9, r4
 80007da:	4682      	mov	sl, r0
 80007dc:	e000      	b.n	80007e0 <__aeabi_fmul+0xf0>
 80007de:	0017      	movs	r7, r2
 80007e0:	4653      	mov	r3, sl
 80007e2:	003a      	movs	r2, r7
 80007e4:	2b02      	cmp	r3, #2
 80007e6:	d00f      	beq.n	8000808 <__aeabi_fmul+0x118>
 80007e8:	464c      	mov	r4, r9
 80007ea:	4650      	mov	r0, sl
 80007ec:	2803      	cmp	r0, #3
 80007ee:	d1cd      	bne.n	800078c <__aeabi_fmul+0x9c>
 80007f0:	2180      	movs	r1, #128	; 0x80
 80007f2:	03c9      	lsls	r1, r1, #15
 80007f4:	4321      	orrs	r1, r4
 80007f6:	0249      	lsls	r1, r1, #9
 80007f8:	20ff      	movs	r0, #255	; 0xff
 80007fa:	0a49      	lsrs	r1, r1, #9
 80007fc:	e7ca      	b.n	8000794 <__aeabi_fmul+0xa4>
 80007fe:	2180      	movs	r1, #128	; 0x80
 8000800:	2200      	movs	r2, #0
 8000802:	20ff      	movs	r0, #255	; 0xff
 8000804:	03c9      	lsls	r1, r1, #15
 8000806:	e7c5      	b.n	8000794 <__aeabi_fmul+0xa4>
 8000808:	20ff      	movs	r0, #255	; 0xff
 800080a:	2100      	movs	r1, #0
 800080c:	e7c2      	b.n	8000794 <__aeabi_fmul+0xa4>
 800080e:	0c20      	lsrs	r0, r4, #16
 8000810:	4649      	mov	r1, r9
 8000812:	0424      	lsls	r4, r4, #16
 8000814:	0c24      	lsrs	r4, r4, #16
 8000816:	0027      	movs	r7, r4
 8000818:	0c0e      	lsrs	r6, r1, #16
 800081a:	0409      	lsls	r1, r1, #16
 800081c:	0c09      	lsrs	r1, r1, #16
 800081e:	4374      	muls	r4, r6
 8000820:	434f      	muls	r7, r1
 8000822:	4346      	muls	r6, r0
 8000824:	4348      	muls	r0, r1
 8000826:	0c39      	lsrs	r1, r7, #16
 8000828:	1900      	adds	r0, r0, r4
 800082a:	1809      	adds	r1, r1, r0
 800082c:	428c      	cmp	r4, r1
 800082e:	d903      	bls.n	8000838 <__aeabi_fmul+0x148>
 8000830:	2080      	movs	r0, #128	; 0x80
 8000832:	0240      	lsls	r0, r0, #9
 8000834:	4684      	mov	ip, r0
 8000836:	4466      	add	r6, ip
 8000838:	043f      	lsls	r7, r7, #16
 800083a:	0408      	lsls	r0, r1, #16
 800083c:	0c3f      	lsrs	r7, r7, #16
 800083e:	19c0      	adds	r0, r0, r7
 8000840:	0184      	lsls	r4, r0, #6
 8000842:	1e67      	subs	r7, r4, #1
 8000844:	41bc      	sbcs	r4, r7
 8000846:	0c09      	lsrs	r1, r1, #16
 8000848:	0e80      	lsrs	r0, r0, #26
 800084a:	1989      	adds	r1, r1, r6
 800084c:	4304      	orrs	r4, r0
 800084e:	0189      	lsls	r1, r1, #6
 8000850:	430c      	orrs	r4, r1
 8000852:	0109      	lsls	r1, r1, #4
 8000854:	d571      	bpl.n	800093a <__aeabi_fmul+0x24a>
 8000856:	2301      	movs	r3, #1
 8000858:	0861      	lsrs	r1, r4, #1
 800085a:	401c      	ands	r4, r3
 800085c:	430c      	orrs	r4, r1
 800085e:	002b      	movs	r3, r5
 8000860:	337f      	adds	r3, #127	; 0x7f
 8000862:	2b00      	cmp	r3, #0
 8000864:	dd51      	ble.n	800090a <__aeabi_fmul+0x21a>
 8000866:	0761      	lsls	r1, r4, #29
 8000868:	d004      	beq.n	8000874 <__aeabi_fmul+0x184>
 800086a:	210f      	movs	r1, #15
 800086c:	4021      	ands	r1, r4
 800086e:	2904      	cmp	r1, #4
 8000870:	d000      	beq.n	8000874 <__aeabi_fmul+0x184>
 8000872:	3404      	adds	r4, #4
 8000874:	0121      	lsls	r1, r4, #4
 8000876:	d503      	bpl.n	8000880 <__aeabi_fmul+0x190>
 8000878:	4b43      	ldr	r3, [pc, #268]	; (8000988 <__aeabi_fmul+0x298>)
 800087a:	401c      	ands	r4, r3
 800087c:	002b      	movs	r3, r5
 800087e:	3380      	adds	r3, #128	; 0x80
 8000880:	2bfe      	cmp	r3, #254	; 0xfe
 8000882:	dcc1      	bgt.n	8000808 <__aeabi_fmul+0x118>
 8000884:	01a1      	lsls	r1, r4, #6
 8000886:	0a49      	lsrs	r1, r1, #9
 8000888:	b2d8      	uxtb	r0, r3
 800088a:	e783      	b.n	8000794 <__aeabi_fmul+0xa4>
 800088c:	2c00      	cmp	r4, #0
 800088e:	d12c      	bne.n	80008ea <__aeabi_fmul+0x1fa>
 8000890:	2301      	movs	r3, #1
 8000892:	4642      	mov	r2, r8
 8000894:	431e      	orrs	r6, r3
 8000896:	002b      	movs	r3, r5
 8000898:	407a      	eors	r2, r7
 800089a:	2001      	movs	r0, #1
 800089c:	b2d2      	uxtb	r2, r2
 800089e:	1c5d      	adds	r5, r3, #1
 80008a0:	2e0a      	cmp	r6, #10
 80008a2:	dd00      	ble.n	80008a6 <__aeabi_fmul+0x1b6>
 80008a4:	e757      	b.n	8000756 <__aeabi_fmul+0x66>
 80008a6:	e76a      	b.n	800077e <__aeabi_fmul+0x8e>
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d110      	bne.n	80008ce <__aeabi_fmul+0x1de>
 80008ac:	2301      	movs	r3, #1
 80008ae:	2604      	movs	r6, #4
 80008b0:	2500      	movs	r5, #0
 80008b2:	469a      	mov	sl, r3
 80008b4:	e738      	b.n	8000728 <__aeabi_fmul+0x38>
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d104      	bne.n	80008c4 <__aeabi_fmul+0x1d4>
 80008ba:	2302      	movs	r3, #2
 80008bc:	2608      	movs	r6, #8
 80008be:	25ff      	movs	r5, #255	; 0xff
 80008c0:	469a      	mov	sl, r3
 80008c2:	e731      	b.n	8000728 <__aeabi_fmul+0x38>
 80008c4:	2303      	movs	r3, #3
 80008c6:	260c      	movs	r6, #12
 80008c8:	25ff      	movs	r5, #255	; 0xff
 80008ca:	469a      	mov	sl, r3
 80008cc:	e72c      	b.n	8000728 <__aeabi_fmul+0x38>
 80008ce:	4648      	mov	r0, r9
 80008d0:	f000 fa9e 	bl	8000e10 <__clzsi2>
 80008d4:	464a      	mov	r2, r9
 80008d6:	1f43      	subs	r3, r0, #5
 80008d8:	2576      	movs	r5, #118	; 0x76
 80008da:	409a      	lsls	r2, r3
 80008dc:	2300      	movs	r3, #0
 80008de:	426d      	negs	r5, r5
 80008e0:	4691      	mov	r9, r2
 80008e2:	2600      	movs	r6, #0
 80008e4:	469a      	mov	sl, r3
 80008e6:	1a2d      	subs	r5, r5, r0
 80008e8:	e71e      	b.n	8000728 <__aeabi_fmul+0x38>
 80008ea:	0020      	movs	r0, r4
 80008ec:	f000 fa90 	bl	8000e10 <__clzsi2>
 80008f0:	4642      	mov	r2, r8
 80008f2:	1f43      	subs	r3, r0, #5
 80008f4:	409c      	lsls	r4, r3
 80008f6:	1a2b      	subs	r3, r5, r0
 80008f8:	3b76      	subs	r3, #118	; 0x76
 80008fa:	407a      	eors	r2, r7
 80008fc:	2000      	movs	r0, #0
 80008fe:	b2d2      	uxtb	r2, r2
 8000900:	1c5d      	adds	r5, r3, #1
 8000902:	2e0a      	cmp	r6, #10
 8000904:	dd00      	ble.n	8000908 <__aeabi_fmul+0x218>
 8000906:	e726      	b.n	8000756 <__aeabi_fmul+0x66>
 8000908:	e739      	b.n	800077e <__aeabi_fmul+0x8e>
 800090a:	2101      	movs	r1, #1
 800090c:	1acb      	subs	r3, r1, r3
 800090e:	2b1b      	cmp	r3, #27
 8000910:	dd00      	ble.n	8000914 <__aeabi_fmul+0x224>
 8000912:	e73d      	b.n	8000790 <__aeabi_fmul+0xa0>
 8000914:	359e      	adds	r5, #158	; 0x9e
 8000916:	0021      	movs	r1, r4
 8000918:	40ac      	lsls	r4, r5
 800091a:	40d9      	lsrs	r1, r3
 800091c:	1e63      	subs	r3, r4, #1
 800091e:	419c      	sbcs	r4, r3
 8000920:	4321      	orrs	r1, r4
 8000922:	074b      	lsls	r3, r1, #29
 8000924:	d004      	beq.n	8000930 <__aeabi_fmul+0x240>
 8000926:	230f      	movs	r3, #15
 8000928:	400b      	ands	r3, r1
 800092a:	2b04      	cmp	r3, #4
 800092c:	d000      	beq.n	8000930 <__aeabi_fmul+0x240>
 800092e:	3104      	adds	r1, #4
 8000930:	014b      	lsls	r3, r1, #5
 8000932:	d504      	bpl.n	800093e <__aeabi_fmul+0x24e>
 8000934:	2001      	movs	r0, #1
 8000936:	2100      	movs	r1, #0
 8000938:	e72c      	b.n	8000794 <__aeabi_fmul+0xa4>
 800093a:	001d      	movs	r5, r3
 800093c:	e78f      	b.n	800085e <__aeabi_fmul+0x16e>
 800093e:	0189      	lsls	r1, r1, #6
 8000940:	2000      	movs	r0, #0
 8000942:	0a49      	lsrs	r1, r1, #9
 8000944:	e726      	b.n	8000794 <__aeabi_fmul+0xa4>
 8000946:	2302      	movs	r3, #2
 8000948:	2e0f      	cmp	r6, #15
 800094a:	d10c      	bne.n	8000966 <__aeabi_fmul+0x276>
 800094c:	2180      	movs	r1, #128	; 0x80
 800094e:	464b      	mov	r3, r9
 8000950:	03c9      	lsls	r1, r1, #15
 8000952:	420b      	tst	r3, r1
 8000954:	d00d      	beq.n	8000972 <__aeabi_fmul+0x282>
 8000956:	420c      	tst	r4, r1
 8000958:	d10b      	bne.n	8000972 <__aeabi_fmul+0x282>
 800095a:	4321      	orrs	r1, r4
 800095c:	0249      	lsls	r1, r1, #9
 800095e:	003a      	movs	r2, r7
 8000960:	20ff      	movs	r0, #255	; 0xff
 8000962:	0a49      	lsrs	r1, r1, #9
 8000964:	e716      	b.n	8000794 <__aeabi_fmul+0xa4>
 8000966:	2e0b      	cmp	r6, #11
 8000968:	d000      	beq.n	800096c <__aeabi_fmul+0x27c>
 800096a:	e6f7      	b.n	800075c <__aeabi_fmul+0x6c>
 800096c:	46a1      	mov	r9, r4
 800096e:	469a      	mov	sl, r3
 8000970:	e736      	b.n	80007e0 <__aeabi_fmul+0xf0>
 8000972:	2180      	movs	r1, #128	; 0x80
 8000974:	464b      	mov	r3, r9
 8000976:	03c9      	lsls	r1, r1, #15
 8000978:	4319      	orrs	r1, r3
 800097a:	0249      	lsls	r1, r1, #9
 800097c:	4642      	mov	r2, r8
 800097e:	20ff      	movs	r0, #255	; 0xff
 8000980:	0a49      	lsrs	r1, r1, #9
 8000982:	e707      	b.n	8000794 <__aeabi_fmul+0xa4>
 8000984:	2303      	movs	r3, #3
 8000986:	e7df      	b.n	8000948 <__aeabi_fmul+0x258>
 8000988:	f7ffffff 	.word	0xf7ffffff

0800098c <__aeabi_fsub>:
 800098c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800098e:	46c6      	mov	lr, r8
 8000990:	0243      	lsls	r3, r0, #9
 8000992:	0a5b      	lsrs	r3, r3, #9
 8000994:	0045      	lsls	r5, r0, #1
 8000996:	00da      	lsls	r2, r3, #3
 8000998:	0fc4      	lsrs	r4, r0, #31
 800099a:	0248      	lsls	r0, r1, #9
 800099c:	004f      	lsls	r7, r1, #1
 800099e:	4694      	mov	ip, r2
 80009a0:	0a42      	lsrs	r2, r0, #9
 80009a2:	001e      	movs	r6, r3
 80009a4:	4690      	mov	r8, r2
 80009a6:	b500      	push	{lr}
 80009a8:	0e2d      	lsrs	r5, r5, #24
 80009aa:	0e3f      	lsrs	r7, r7, #24
 80009ac:	0fc9      	lsrs	r1, r1, #31
 80009ae:	0980      	lsrs	r0, r0, #6
 80009b0:	2fff      	cmp	r7, #255	; 0xff
 80009b2:	d059      	beq.n	8000a68 <__aeabi_fsub+0xdc>
 80009b4:	2201      	movs	r2, #1
 80009b6:	4051      	eors	r1, r2
 80009b8:	428c      	cmp	r4, r1
 80009ba:	d039      	beq.n	8000a30 <__aeabi_fsub+0xa4>
 80009bc:	1bea      	subs	r2, r5, r7
 80009be:	2a00      	cmp	r2, #0
 80009c0:	dd58      	ble.n	8000a74 <__aeabi_fsub+0xe8>
 80009c2:	2f00      	cmp	r7, #0
 80009c4:	d068      	beq.n	8000a98 <__aeabi_fsub+0x10c>
 80009c6:	2dff      	cmp	r5, #255	; 0xff
 80009c8:	d100      	bne.n	80009cc <__aeabi_fsub+0x40>
 80009ca:	e0d1      	b.n	8000b70 <__aeabi_fsub+0x1e4>
 80009cc:	2380      	movs	r3, #128	; 0x80
 80009ce:	04db      	lsls	r3, r3, #19
 80009d0:	4318      	orrs	r0, r3
 80009d2:	2a1b      	cmp	r2, #27
 80009d4:	dc00      	bgt.n	80009d8 <__aeabi_fsub+0x4c>
 80009d6:	e0e3      	b.n	8000ba0 <__aeabi_fsub+0x214>
 80009d8:	2301      	movs	r3, #1
 80009da:	4662      	mov	r2, ip
 80009dc:	1ad3      	subs	r3, r2, r3
 80009de:	015a      	lsls	r2, r3, #5
 80009e0:	d400      	bmi.n	80009e4 <__aeabi_fsub+0x58>
 80009e2:	e0ac      	b.n	8000b3e <__aeabi_fsub+0x1b2>
 80009e4:	019b      	lsls	r3, r3, #6
 80009e6:	099e      	lsrs	r6, r3, #6
 80009e8:	0030      	movs	r0, r6
 80009ea:	f000 fa11 	bl	8000e10 <__clzsi2>
 80009ee:	0033      	movs	r3, r6
 80009f0:	3805      	subs	r0, #5
 80009f2:	4083      	lsls	r3, r0
 80009f4:	4285      	cmp	r5, r0
 80009f6:	dc00      	bgt.n	80009fa <__aeabi_fsub+0x6e>
 80009f8:	e0c6      	b.n	8000b88 <__aeabi_fsub+0x1fc>
 80009fa:	4ab2      	ldr	r2, [pc, #712]	; (8000cc4 <__aeabi_fsub+0x338>)
 80009fc:	1a2d      	subs	r5, r5, r0
 80009fe:	4013      	ands	r3, r2
 8000a00:	075a      	lsls	r2, r3, #29
 8000a02:	d004      	beq.n	8000a0e <__aeabi_fsub+0x82>
 8000a04:	220f      	movs	r2, #15
 8000a06:	401a      	ands	r2, r3
 8000a08:	2a04      	cmp	r2, #4
 8000a0a:	d000      	beq.n	8000a0e <__aeabi_fsub+0x82>
 8000a0c:	3304      	adds	r3, #4
 8000a0e:	015a      	lsls	r2, r3, #5
 8000a10:	d400      	bmi.n	8000a14 <__aeabi_fsub+0x88>
 8000a12:	e097      	b.n	8000b44 <__aeabi_fsub+0x1b8>
 8000a14:	1c6a      	adds	r2, r5, #1
 8000a16:	2dfe      	cmp	r5, #254	; 0xfe
 8000a18:	d100      	bne.n	8000a1c <__aeabi_fsub+0x90>
 8000a1a:	e084      	b.n	8000b26 <__aeabi_fsub+0x19a>
 8000a1c:	019b      	lsls	r3, r3, #6
 8000a1e:	0a5e      	lsrs	r6, r3, #9
 8000a20:	b2d2      	uxtb	r2, r2
 8000a22:	05d0      	lsls	r0, r2, #23
 8000a24:	4330      	orrs	r0, r6
 8000a26:	07e4      	lsls	r4, r4, #31
 8000a28:	4320      	orrs	r0, r4
 8000a2a:	bc80      	pop	{r7}
 8000a2c:	46b8      	mov	r8, r7
 8000a2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a30:	1bea      	subs	r2, r5, r7
 8000a32:	2a00      	cmp	r2, #0
 8000a34:	dd41      	ble.n	8000aba <__aeabi_fsub+0x12e>
 8000a36:	2f00      	cmp	r7, #0
 8000a38:	d06b      	beq.n	8000b12 <__aeabi_fsub+0x186>
 8000a3a:	2dff      	cmp	r5, #255	; 0xff
 8000a3c:	d100      	bne.n	8000a40 <__aeabi_fsub+0xb4>
 8000a3e:	e097      	b.n	8000b70 <__aeabi_fsub+0x1e4>
 8000a40:	2380      	movs	r3, #128	; 0x80
 8000a42:	04db      	lsls	r3, r3, #19
 8000a44:	4318      	orrs	r0, r3
 8000a46:	2a1b      	cmp	r2, #27
 8000a48:	dc00      	bgt.n	8000a4c <__aeabi_fsub+0xc0>
 8000a4a:	e0cc      	b.n	8000be6 <__aeabi_fsub+0x25a>
 8000a4c:	2301      	movs	r3, #1
 8000a4e:	4463      	add	r3, ip
 8000a50:	015a      	lsls	r2, r3, #5
 8000a52:	d574      	bpl.n	8000b3e <__aeabi_fsub+0x1b2>
 8000a54:	3501      	adds	r5, #1
 8000a56:	2dff      	cmp	r5, #255	; 0xff
 8000a58:	d065      	beq.n	8000b26 <__aeabi_fsub+0x19a>
 8000a5a:	2201      	movs	r2, #1
 8000a5c:	499a      	ldr	r1, [pc, #616]	; (8000cc8 <__aeabi_fsub+0x33c>)
 8000a5e:	401a      	ands	r2, r3
 8000a60:	085b      	lsrs	r3, r3, #1
 8000a62:	400b      	ands	r3, r1
 8000a64:	4313      	orrs	r3, r2
 8000a66:	e7cb      	b.n	8000a00 <__aeabi_fsub+0x74>
 8000a68:	2800      	cmp	r0, #0
 8000a6a:	d01f      	beq.n	8000aac <__aeabi_fsub+0x120>
 8000a6c:	428c      	cmp	r4, r1
 8000a6e:	d022      	beq.n	8000ab6 <__aeabi_fsub+0x12a>
 8000a70:	002a      	movs	r2, r5
 8000a72:	3aff      	subs	r2, #255	; 0xff
 8000a74:	2a00      	cmp	r2, #0
 8000a76:	d035      	beq.n	8000ae4 <__aeabi_fsub+0x158>
 8000a78:	1b7a      	subs	r2, r7, r5
 8000a7a:	2d00      	cmp	r5, #0
 8000a7c:	d000      	beq.n	8000a80 <__aeabi_fsub+0xf4>
 8000a7e:	e099      	b.n	8000bb4 <__aeabi_fsub+0x228>
 8000a80:	4663      	mov	r3, ip
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d100      	bne.n	8000a88 <__aeabi_fsub+0xfc>
 8000a86:	e0dd      	b.n	8000c44 <__aeabi_fsub+0x2b8>
 8000a88:	1e53      	subs	r3, r2, #1
 8000a8a:	2a01      	cmp	r2, #1
 8000a8c:	d100      	bne.n	8000a90 <__aeabi_fsub+0x104>
 8000a8e:	e105      	b.n	8000c9c <__aeabi_fsub+0x310>
 8000a90:	2aff      	cmp	r2, #255	; 0xff
 8000a92:	d06b      	beq.n	8000b6c <__aeabi_fsub+0x1e0>
 8000a94:	001a      	movs	r2, r3
 8000a96:	e094      	b.n	8000bc2 <__aeabi_fsub+0x236>
 8000a98:	2800      	cmp	r0, #0
 8000a9a:	d073      	beq.n	8000b84 <__aeabi_fsub+0x1f8>
 8000a9c:	1e51      	subs	r1, r2, #1
 8000a9e:	2a01      	cmp	r2, #1
 8000aa0:	d100      	bne.n	8000aa4 <__aeabi_fsub+0x118>
 8000aa2:	e0df      	b.n	8000c64 <__aeabi_fsub+0x2d8>
 8000aa4:	2aff      	cmp	r2, #255	; 0xff
 8000aa6:	d063      	beq.n	8000b70 <__aeabi_fsub+0x1e4>
 8000aa8:	000a      	movs	r2, r1
 8000aaa:	e792      	b.n	80009d2 <__aeabi_fsub+0x46>
 8000aac:	2201      	movs	r2, #1
 8000aae:	4051      	eors	r1, r2
 8000ab0:	42a1      	cmp	r1, r4
 8000ab2:	d000      	beq.n	8000ab6 <__aeabi_fsub+0x12a>
 8000ab4:	e782      	b.n	80009bc <__aeabi_fsub+0x30>
 8000ab6:	002a      	movs	r2, r5
 8000ab8:	3aff      	subs	r2, #255	; 0xff
 8000aba:	2a00      	cmp	r2, #0
 8000abc:	d036      	beq.n	8000b2c <__aeabi_fsub+0x1a0>
 8000abe:	1b7a      	subs	r2, r7, r5
 8000ac0:	2d00      	cmp	r5, #0
 8000ac2:	d100      	bne.n	8000ac6 <__aeabi_fsub+0x13a>
 8000ac4:	e0aa      	b.n	8000c1c <__aeabi_fsub+0x290>
 8000ac6:	2fff      	cmp	r7, #255	; 0xff
 8000ac8:	d100      	bne.n	8000acc <__aeabi_fsub+0x140>
 8000aca:	e0da      	b.n	8000c82 <__aeabi_fsub+0x2f6>
 8000acc:	2380      	movs	r3, #128	; 0x80
 8000ace:	4661      	mov	r1, ip
 8000ad0:	04db      	lsls	r3, r3, #19
 8000ad2:	4319      	orrs	r1, r3
 8000ad4:	468c      	mov	ip, r1
 8000ad6:	2a1b      	cmp	r2, #27
 8000ad8:	dc00      	bgt.n	8000adc <__aeabi_fsub+0x150>
 8000ada:	e0d4      	b.n	8000c86 <__aeabi_fsub+0x2fa>
 8000adc:	2301      	movs	r3, #1
 8000ade:	003d      	movs	r5, r7
 8000ae0:	181b      	adds	r3, r3, r0
 8000ae2:	e7b5      	b.n	8000a50 <__aeabi_fsub+0xc4>
 8000ae4:	27fe      	movs	r7, #254	; 0xfe
 8000ae6:	1c6a      	adds	r2, r5, #1
 8000ae8:	4217      	tst	r7, r2
 8000aea:	d171      	bne.n	8000bd0 <__aeabi_fsub+0x244>
 8000aec:	2d00      	cmp	r5, #0
 8000aee:	d000      	beq.n	8000af2 <__aeabi_fsub+0x166>
 8000af0:	e09e      	b.n	8000c30 <__aeabi_fsub+0x2a4>
 8000af2:	4663      	mov	r3, ip
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d100      	bne.n	8000afa <__aeabi_fsub+0x16e>
 8000af8:	e0d5      	b.n	8000ca6 <__aeabi_fsub+0x31a>
 8000afa:	2200      	movs	r2, #0
 8000afc:	2800      	cmp	r0, #0
 8000afe:	d100      	bne.n	8000b02 <__aeabi_fsub+0x176>
 8000b00:	e78f      	b.n	8000a22 <__aeabi_fsub+0x96>
 8000b02:	1a1b      	subs	r3, r3, r0
 8000b04:	015e      	lsls	r6, r3, #5
 8000b06:	d400      	bmi.n	8000b0a <__aeabi_fsub+0x17e>
 8000b08:	e0d6      	b.n	8000cb8 <__aeabi_fsub+0x32c>
 8000b0a:	4663      	mov	r3, ip
 8000b0c:	000c      	movs	r4, r1
 8000b0e:	1ac3      	subs	r3, r0, r3
 8000b10:	e776      	b.n	8000a00 <__aeabi_fsub+0x74>
 8000b12:	2800      	cmp	r0, #0
 8000b14:	d036      	beq.n	8000b84 <__aeabi_fsub+0x1f8>
 8000b16:	1e51      	subs	r1, r2, #1
 8000b18:	2a01      	cmp	r2, #1
 8000b1a:	d100      	bne.n	8000b1e <__aeabi_fsub+0x192>
 8000b1c:	e09a      	b.n	8000c54 <__aeabi_fsub+0x2c8>
 8000b1e:	2aff      	cmp	r2, #255	; 0xff
 8000b20:	d026      	beq.n	8000b70 <__aeabi_fsub+0x1e4>
 8000b22:	000a      	movs	r2, r1
 8000b24:	e78f      	b.n	8000a46 <__aeabi_fsub+0xba>
 8000b26:	22ff      	movs	r2, #255	; 0xff
 8000b28:	2600      	movs	r6, #0
 8000b2a:	e77a      	b.n	8000a22 <__aeabi_fsub+0x96>
 8000b2c:	27fe      	movs	r7, #254	; 0xfe
 8000b2e:	1c6a      	adds	r2, r5, #1
 8000b30:	4217      	tst	r7, r2
 8000b32:	d062      	beq.n	8000bfa <__aeabi_fsub+0x26e>
 8000b34:	2aff      	cmp	r2, #255	; 0xff
 8000b36:	d0f6      	beq.n	8000b26 <__aeabi_fsub+0x19a>
 8000b38:	0015      	movs	r5, r2
 8000b3a:	4460      	add	r0, ip
 8000b3c:	0843      	lsrs	r3, r0, #1
 8000b3e:	075a      	lsls	r2, r3, #29
 8000b40:	d000      	beq.n	8000b44 <__aeabi_fsub+0x1b8>
 8000b42:	e75f      	b.n	8000a04 <__aeabi_fsub+0x78>
 8000b44:	08db      	lsrs	r3, r3, #3
 8000b46:	2dff      	cmp	r5, #255	; 0xff
 8000b48:	d012      	beq.n	8000b70 <__aeabi_fsub+0x1e4>
 8000b4a:	025b      	lsls	r3, r3, #9
 8000b4c:	0a5e      	lsrs	r6, r3, #9
 8000b4e:	b2ea      	uxtb	r2, r5
 8000b50:	e767      	b.n	8000a22 <__aeabi_fsub+0x96>
 8000b52:	4662      	mov	r2, ip
 8000b54:	2a00      	cmp	r2, #0
 8000b56:	d100      	bne.n	8000b5a <__aeabi_fsub+0x1ce>
 8000b58:	e093      	b.n	8000c82 <__aeabi_fsub+0x2f6>
 8000b5a:	2800      	cmp	r0, #0
 8000b5c:	d008      	beq.n	8000b70 <__aeabi_fsub+0x1e4>
 8000b5e:	2280      	movs	r2, #128	; 0x80
 8000b60:	03d2      	lsls	r2, r2, #15
 8000b62:	4213      	tst	r3, r2
 8000b64:	d004      	beq.n	8000b70 <__aeabi_fsub+0x1e4>
 8000b66:	4640      	mov	r0, r8
 8000b68:	4210      	tst	r0, r2
 8000b6a:	d101      	bne.n	8000b70 <__aeabi_fsub+0x1e4>
 8000b6c:	000c      	movs	r4, r1
 8000b6e:	4643      	mov	r3, r8
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d0d8      	beq.n	8000b26 <__aeabi_fsub+0x19a>
 8000b74:	2680      	movs	r6, #128	; 0x80
 8000b76:	03f6      	lsls	r6, r6, #15
 8000b78:	431e      	orrs	r6, r3
 8000b7a:	0276      	lsls	r6, r6, #9
 8000b7c:	22ff      	movs	r2, #255	; 0xff
 8000b7e:	0a76      	lsrs	r6, r6, #9
 8000b80:	e74f      	b.n	8000a22 <__aeabi_fsub+0x96>
 8000b82:	4643      	mov	r3, r8
 8000b84:	0015      	movs	r5, r2
 8000b86:	e7de      	b.n	8000b46 <__aeabi_fsub+0x1ba>
 8000b88:	2220      	movs	r2, #32
 8000b8a:	1b40      	subs	r0, r0, r5
 8000b8c:	3001      	adds	r0, #1
 8000b8e:	1a12      	subs	r2, r2, r0
 8000b90:	0019      	movs	r1, r3
 8000b92:	4093      	lsls	r3, r2
 8000b94:	40c1      	lsrs	r1, r0
 8000b96:	1e5a      	subs	r2, r3, #1
 8000b98:	4193      	sbcs	r3, r2
 8000b9a:	2500      	movs	r5, #0
 8000b9c:	430b      	orrs	r3, r1
 8000b9e:	e72f      	b.n	8000a00 <__aeabi_fsub+0x74>
 8000ba0:	2320      	movs	r3, #32
 8000ba2:	1a9b      	subs	r3, r3, r2
 8000ba4:	0001      	movs	r1, r0
 8000ba6:	4098      	lsls	r0, r3
 8000ba8:	0003      	movs	r3, r0
 8000baa:	40d1      	lsrs	r1, r2
 8000bac:	1e5a      	subs	r2, r3, #1
 8000bae:	4193      	sbcs	r3, r2
 8000bb0:	430b      	orrs	r3, r1
 8000bb2:	e712      	b.n	80009da <__aeabi_fsub+0x4e>
 8000bb4:	2fff      	cmp	r7, #255	; 0xff
 8000bb6:	d0d9      	beq.n	8000b6c <__aeabi_fsub+0x1e0>
 8000bb8:	2380      	movs	r3, #128	; 0x80
 8000bba:	4664      	mov	r4, ip
 8000bbc:	04db      	lsls	r3, r3, #19
 8000bbe:	431c      	orrs	r4, r3
 8000bc0:	46a4      	mov	ip, r4
 8000bc2:	2a1b      	cmp	r2, #27
 8000bc4:	dd52      	ble.n	8000c6c <__aeabi_fsub+0x2e0>
 8000bc6:	2301      	movs	r3, #1
 8000bc8:	000c      	movs	r4, r1
 8000bca:	003d      	movs	r5, r7
 8000bcc:	1ac3      	subs	r3, r0, r3
 8000bce:	e706      	b.n	80009de <__aeabi_fsub+0x52>
 8000bd0:	4663      	mov	r3, ip
 8000bd2:	1a1e      	subs	r6, r3, r0
 8000bd4:	0173      	lsls	r3, r6, #5
 8000bd6:	d439      	bmi.n	8000c4c <__aeabi_fsub+0x2c0>
 8000bd8:	2e00      	cmp	r6, #0
 8000bda:	d000      	beq.n	8000bde <__aeabi_fsub+0x252>
 8000bdc:	e704      	b.n	80009e8 <__aeabi_fsub+0x5c>
 8000bde:	2400      	movs	r4, #0
 8000be0:	2200      	movs	r2, #0
 8000be2:	2600      	movs	r6, #0
 8000be4:	e71d      	b.n	8000a22 <__aeabi_fsub+0x96>
 8000be6:	2320      	movs	r3, #32
 8000be8:	1a9b      	subs	r3, r3, r2
 8000bea:	0001      	movs	r1, r0
 8000bec:	4098      	lsls	r0, r3
 8000bee:	0003      	movs	r3, r0
 8000bf0:	40d1      	lsrs	r1, r2
 8000bf2:	1e5a      	subs	r2, r3, #1
 8000bf4:	4193      	sbcs	r3, r2
 8000bf6:	430b      	orrs	r3, r1
 8000bf8:	e729      	b.n	8000a4e <__aeabi_fsub+0xc2>
 8000bfa:	2d00      	cmp	r5, #0
 8000bfc:	d1a9      	bne.n	8000b52 <__aeabi_fsub+0x1c6>
 8000bfe:	4663      	mov	r3, ip
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d056      	beq.n	8000cb2 <__aeabi_fsub+0x326>
 8000c04:	2200      	movs	r2, #0
 8000c06:	2800      	cmp	r0, #0
 8000c08:	d100      	bne.n	8000c0c <__aeabi_fsub+0x280>
 8000c0a:	e70a      	b.n	8000a22 <__aeabi_fsub+0x96>
 8000c0c:	0003      	movs	r3, r0
 8000c0e:	4463      	add	r3, ip
 8000c10:	015a      	lsls	r2, r3, #5
 8000c12:	d594      	bpl.n	8000b3e <__aeabi_fsub+0x1b2>
 8000c14:	4a2b      	ldr	r2, [pc, #172]	; (8000cc4 <__aeabi_fsub+0x338>)
 8000c16:	3501      	adds	r5, #1
 8000c18:	4013      	ands	r3, r2
 8000c1a:	e790      	b.n	8000b3e <__aeabi_fsub+0x1b2>
 8000c1c:	4663      	mov	r3, ip
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d0af      	beq.n	8000b82 <__aeabi_fsub+0x1f6>
 8000c22:	1e53      	subs	r3, r2, #1
 8000c24:	2a01      	cmp	r2, #1
 8000c26:	d015      	beq.n	8000c54 <__aeabi_fsub+0x2c8>
 8000c28:	2aff      	cmp	r2, #255	; 0xff
 8000c2a:	d02a      	beq.n	8000c82 <__aeabi_fsub+0x2f6>
 8000c2c:	001a      	movs	r2, r3
 8000c2e:	e752      	b.n	8000ad6 <__aeabi_fsub+0x14a>
 8000c30:	4662      	mov	r2, ip
 8000c32:	2a00      	cmp	r2, #0
 8000c34:	d191      	bne.n	8000b5a <__aeabi_fsub+0x1ce>
 8000c36:	2800      	cmp	r0, #0
 8000c38:	d198      	bne.n	8000b6c <__aeabi_fsub+0x1e0>
 8000c3a:	2680      	movs	r6, #128	; 0x80
 8000c3c:	2400      	movs	r4, #0
 8000c3e:	22ff      	movs	r2, #255	; 0xff
 8000c40:	03f6      	lsls	r6, r6, #15
 8000c42:	e6ee      	b.n	8000a22 <__aeabi_fsub+0x96>
 8000c44:	000c      	movs	r4, r1
 8000c46:	4643      	mov	r3, r8
 8000c48:	0015      	movs	r5, r2
 8000c4a:	e77c      	b.n	8000b46 <__aeabi_fsub+0x1ba>
 8000c4c:	4663      	mov	r3, ip
 8000c4e:	000c      	movs	r4, r1
 8000c50:	1ac6      	subs	r6, r0, r3
 8000c52:	e6c9      	b.n	80009e8 <__aeabi_fsub+0x5c>
 8000c54:	0003      	movs	r3, r0
 8000c56:	4463      	add	r3, ip
 8000c58:	2501      	movs	r5, #1
 8000c5a:	015a      	lsls	r2, r3, #5
 8000c5c:	d400      	bmi.n	8000c60 <__aeabi_fsub+0x2d4>
 8000c5e:	e76e      	b.n	8000b3e <__aeabi_fsub+0x1b2>
 8000c60:	2502      	movs	r5, #2
 8000c62:	e6fa      	b.n	8000a5a <__aeabi_fsub+0xce>
 8000c64:	4663      	mov	r3, ip
 8000c66:	2501      	movs	r5, #1
 8000c68:	1a1b      	subs	r3, r3, r0
 8000c6a:	e6b8      	b.n	80009de <__aeabi_fsub+0x52>
 8000c6c:	4664      	mov	r4, ip
 8000c6e:	2320      	movs	r3, #32
 8000c70:	40d4      	lsrs	r4, r2
 8000c72:	1a9b      	subs	r3, r3, r2
 8000c74:	4662      	mov	r2, ip
 8000c76:	409a      	lsls	r2, r3
 8000c78:	0013      	movs	r3, r2
 8000c7a:	1e5a      	subs	r2, r3, #1
 8000c7c:	4193      	sbcs	r3, r2
 8000c7e:	4323      	orrs	r3, r4
 8000c80:	e7a2      	b.n	8000bc8 <__aeabi_fsub+0x23c>
 8000c82:	4643      	mov	r3, r8
 8000c84:	e774      	b.n	8000b70 <__aeabi_fsub+0x1e4>
 8000c86:	4661      	mov	r1, ip
 8000c88:	2320      	movs	r3, #32
 8000c8a:	40d1      	lsrs	r1, r2
 8000c8c:	1a9b      	subs	r3, r3, r2
 8000c8e:	4662      	mov	r2, ip
 8000c90:	409a      	lsls	r2, r3
 8000c92:	0013      	movs	r3, r2
 8000c94:	1e5a      	subs	r2, r3, #1
 8000c96:	4193      	sbcs	r3, r2
 8000c98:	430b      	orrs	r3, r1
 8000c9a:	e720      	b.n	8000ade <__aeabi_fsub+0x152>
 8000c9c:	4663      	mov	r3, ip
 8000c9e:	000c      	movs	r4, r1
 8000ca0:	2501      	movs	r5, #1
 8000ca2:	1ac3      	subs	r3, r0, r3
 8000ca4:	e69b      	b.n	80009de <__aeabi_fsub+0x52>
 8000ca6:	2800      	cmp	r0, #0
 8000ca8:	d099      	beq.n	8000bde <__aeabi_fsub+0x252>
 8000caa:	000c      	movs	r4, r1
 8000cac:	4646      	mov	r6, r8
 8000cae:	2200      	movs	r2, #0
 8000cb0:	e6b7      	b.n	8000a22 <__aeabi_fsub+0x96>
 8000cb2:	4646      	mov	r6, r8
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	e6b4      	b.n	8000a22 <__aeabi_fsub+0x96>
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d000      	beq.n	8000cbe <__aeabi_fsub+0x332>
 8000cbc:	e73f      	b.n	8000b3e <__aeabi_fsub+0x1b2>
 8000cbe:	2400      	movs	r4, #0
 8000cc0:	2600      	movs	r6, #0
 8000cc2:	e6ae      	b.n	8000a22 <__aeabi_fsub+0x96>
 8000cc4:	fbffffff 	.word	0xfbffffff
 8000cc8:	7dffffff 	.word	0x7dffffff

08000ccc <__aeabi_f2iz>:
 8000ccc:	0241      	lsls	r1, r0, #9
 8000cce:	0042      	lsls	r2, r0, #1
 8000cd0:	0fc3      	lsrs	r3, r0, #31
 8000cd2:	0a49      	lsrs	r1, r1, #9
 8000cd4:	2000      	movs	r0, #0
 8000cd6:	0e12      	lsrs	r2, r2, #24
 8000cd8:	2a7e      	cmp	r2, #126	; 0x7e
 8000cda:	dd03      	ble.n	8000ce4 <__aeabi_f2iz+0x18>
 8000cdc:	2a9d      	cmp	r2, #157	; 0x9d
 8000cde:	dd02      	ble.n	8000ce6 <__aeabi_f2iz+0x1a>
 8000ce0:	4a09      	ldr	r2, [pc, #36]	; (8000d08 <__aeabi_f2iz+0x3c>)
 8000ce2:	1898      	adds	r0, r3, r2
 8000ce4:	4770      	bx	lr
 8000ce6:	2080      	movs	r0, #128	; 0x80
 8000ce8:	0400      	lsls	r0, r0, #16
 8000cea:	4301      	orrs	r1, r0
 8000cec:	2a95      	cmp	r2, #149	; 0x95
 8000cee:	dc07      	bgt.n	8000d00 <__aeabi_f2iz+0x34>
 8000cf0:	2096      	movs	r0, #150	; 0x96
 8000cf2:	1a82      	subs	r2, r0, r2
 8000cf4:	40d1      	lsrs	r1, r2
 8000cf6:	4248      	negs	r0, r1
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d1f3      	bne.n	8000ce4 <__aeabi_f2iz+0x18>
 8000cfc:	0008      	movs	r0, r1
 8000cfe:	e7f1      	b.n	8000ce4 <__aeabi_f2iz+0x18>
 8000d00:	3a96      	subs	r2, #150	; 0x96
 8000d02:	4091      	lsls	r1, r2
 8000d04:	e7f7      	b.n	8000cf6 <__aeabi_f2iz+0x2a>
 8000d06:	46c0      	nop			; (mov r8, r8)
 8000d08:	7fffffff 	.word	0x7fffffff

08000d0c <__aeabi_ui2f>:
 8000d0c:	b570      	push	{r4, r5, r6, lr}
 8000d0e:	1e04      	subs	r4, r0, #0
 8000d10:	d00e      	beq.n	8000d30 <__aeabi_ui2f+0x24>
 8000d12:	f000 f87d 	bl	8000e10 <__clzsi2>
 8000d16:	239e      	movs	r3, #158	; 0x9e
 8000d18:	0001      	movs	r1, r0
 8000d1a:	1a1b      	subs	r3, r3, r0
 8000d1c:	2b96      	cmp	r3, #150	; 0x96
 8000d1e:	dc0c      	bgt.n	8000d3a <__aeabi_ui2f+0x2e>
 8000d20:	2808      	cmp	r0, #8
 8000d22:	d02c      	beq.n	8000d7e <__aeabi_ui2f+0x72>
 8000d24:	3908      	subs	r1, #8
 8000d26:	408c      	lsls	r4, r1
 8000d28:	0264      	lsls	r4, r4, #9
 8000d2a:	0a64      	lsrs	r4, r4, #9
 8000d2c:	b2d8      	uxtb	r0, r3
 8000d2e:	e001      	b.n	8000d34 <__aeabi_ui2f+0x28>
 8000d30:	2000      	movs	r0, #0
 8000d32:	2400      	movs	r4, #0
 8000d34:	05c0      	lsls	r0, r0, #23
 8000d36:	4320      	orrs	r0, r4
 8000d38:	bd70      	pop	{r4, r5, r6, pc}
 8000d3a:	2b99      	cmp	r3, #153	; 0x99
 8000d3c:	dd0a      	ble.n	8000d54 <__aeabi_ui2f+0x48>
 8000d3e:	0002      	movs	r2, r0
 8000d40:	0020      	movs	r0, r4
 8000d42:	321b      	adds	r2, #27
 8000d44:	4090      	lsls	r0, r2
 8000d46:	0002      	movs	r2, r0
 8000d48:	1e50      	subs	r0, r2, #1
 8000d4a:	4182      	sbcs	r2, r0
 8000d4c:	2005      	movs	r0, #5
 8000d4e:	1a40      	subs	r0, r0, r1
 8000d50:	40c4      	lsrs	r4, r0
 8000d52:	4314      	orrs	r4, r2
 8000d54:	2905      	cmp	r1, #5
 8000d56:	dc16      	bgt.n	8000d86 <__aeabi_ui2f+0x7a>
 8000d58:	0022      	movs	r2, r4
 8000d5a:	480f      	ldr	r0, [pc, #60]	; (8000d98 <__aeabi_ui2f+0x8c>)
 8000d5c:	4002      	ands	r2, r0
 8000d5e:	0765      	lsls	r5, r4, #29
 8000d60:	d009      	beq.n	8000d76 <__aeabi_ui2f+0x6a>
 8000d62:	250f      	movs	r5, #15
 8000d64:	402c      	ands	r4, r5
 8000d66:	2c04      	cmp	r4, #4
 8000d68:	d005      	beq.n	8000d76 <__aeabi_ui2f+0x6a>
 8000d6a:	3204      	adds	r2, #4
 8000d6c:	0154      	lsls	r4, r2, #5
 8000d6e:	d502      	bpl.n	8000d76 <__aeabi_ui2f+0x6a>
 8000d70:	239f      	movs	r3, #159	; 0x9f
 8000d72:	4002      	ands	r2, r0
 8000d74:	1a5b      	subs	r3, r3, r1
 8000d76:	0192      	lsls	r2, r2, #6
 8000d78:	0a54      	lsrs	r4, r2, #9
 8000d7a:	b2d8      	uxtb	r0, r3
 8000d7c:	e7da      	b.n	8000d34 <__aeabi_ui2f+0x28>
 8000d7e:	0264      	lsls	r4, r4, #9
 8000d80:	2096      	movs	r0, #150	; 0x96
 8000d82:	0a64      	lsrs	r4, r4, #9
 8000d84:	e7d6      	b.n	8000d34 <__aeabi_ui2f+0x28>
 8000d86:	1f4a      	subs	r2, r1, #5
 8000d88:	4094      	lsls	r4, r2
 8000d8a:	0022      	movs	r2, r4
 8000d8c:	4802      	ldr	r0, [pc, #8]	; (8000d98 <__aeabi_ui2f+0x8c>)
 8000d8e:	4002      	ands	r2, r0
 8000d90:	0765      	lsls	r5, r4, #29
 8000d92:	d0f0      	beq.n	8000d76 <__aeabi_ui2f+0x6a>
 8000d94:	e7e5      	b.n	8000d62 <__aeabi_ui2f+0x56>
 8000d96:	46c0      	nop			; (mov r8, r8)
 8000d98:	fbffffff 	.word	0xfbffffff

08000d9c <__aeabi_cfrcmple>:
 8000d9c:	4684      	mov	ip, r0
 8000d9e:	0008      	movs	r0, r1
 8000da0:	4661      	mov	r1, ip
 8000da2:	e7ff      	b.n	8000da4 <__aeabi_cfcmpeq>

08000da4 <__aeabi_cfcmpeq>:
 8000da4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000da6:	f000 f8c9 	bl	8000f3c <__lesf2>
 8000daa:	2800      	cmp	r0, #0
 8000dac:	d401      	bmi.n	8000db2 <__aeabi_cfcmpeq+0xe>
 8000dae:	2100      	movs	r1, #0
 8000db0:	42c8      	cmn	r0, r1
 8000db2:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000db4 <__aeabi_fcmpeq>:
 8000db4:	b510      	push	{r4, lr}
 8000db6:	f000 f855 	bl	8000e64 <__eqsf2>
 8000dba:	4240      	negs	r0, r0
 8000dbc:	3001      	adds	r0, #1
 8000dbe:	bd10      	pop	{r4, pc}

08000dc0 <__aeabi_fcmplt>:
 8000dc0:	b510      	push	{r4, lr}
 8000dc2:	f000 f8bb 	bl	8000f3c <__lesf2>
 8000dc6:	2800      	cmp	r0, #0
 8000dc8:	db01      	blt.n	8000dce <__aeabi_fcmplt+0xe>
 8000dca:	2000      	movs	r0, #0
 8000dcc:	bd10      	pop	{r4, pc}
 8000dce:	2001      	movs	r0, #1
 8000dd0:	bd10      	pop	{r4, pc}
 8000dd2:	46c0      	nop			; (mov r8, r8)

08000dd4 <__aeabi_fcmple>:
 8000dd4:	b510      	push	{r4, lr}
 8000dd6:	f000 f8b1 	bl	8000f3c <__lesf2>
 8000dda:	2800      	cmp	r0, #0
 8000ddc:	dd01      	ble.n	8000de2 <__aeabi_fcmple+0xe>
 8000dde:	2000      	movs	r0, #0
 8000de0:	bd10      	pop	{r4, pc}
 8000de2:	2001      	movs	r0, #1
 8000de4:	bd10      	pop	{r4, pc}
 8000de6:	46c0      	nop			; (mov r8, r8)

08000de8 <__aeabi_fcmpgt>:
 8000de8:	b510      	push	{r4, lr}
 8000dea:	f000 f861 	bl	8000eb0 <__gesf2>
 8000dee:	2800      	cmp	r0, #0
 8000df0:	dc01      	bgt.n	8000df6 <__aeabi_fcmpgt+0xe>
 8000df2:	2000      	movs	r0, #0
 8000df4:	bd10      	pop	{r4, pc}
 8000df6:	2001      	movs	r0, #1
 8000df8:	bd10      	pop	{r4, pc}
 8000dfa:	46c0      	nop			; (mov r8, r8)

08000dfc <__aeabi_fcmpge>:
 8000dfc:	b510      	push	{r4, lr}
 8000dfe:	f000 f857 	bl	8000eb0 <__gesf2>
 8000e02:	2800      	cmp	r0, #0
 8000e04:	da01      	bge.n	8000e0a <__aeabi_fcmpge+0xe>
 8000e06:	2000      	movs	r0, #0
 8000e08:	bd10      	pop	{r4, pc}
 8000e0a:	2001      	movs	r0, #1
 8000e0c:	bd10      	pop	{r4, pc}
 8000e0e:	46c0      	nop			; (mov r8, r8)

08000e10 <__clzsi2>:
 8000e10:	211c      	movs	r1, #28
 8000e12:	2301      	movs	r3, #1
 8000e14:	041b      	lsls	r3, r3, #16
 8000e16:	4298      	cmp	r0, r3
 8000e18:	d301      	bcc.n	8000e1e <__clzsi2+0xe>
 8000e1a:	0c00      	lsrs	r0, r0, #16
 8000e1c:	3910      	subs	r1, #16
 8000e1e:	0a1b      	lsrs	r3, r3, #8
 8000e20:	4298      	cmp	r0, r3
 8000e22:	d301      	bcc.n	8000e28 <__clzsi2+0x18>
 8000e24:	0a00      	lsrs	r0, r0, #8
 8000e26:	3908      	subs	r1, #8
 8000e28:	091b      	lsrs	r3, r3, #4
 8000e2a:	4298      	cmp	r0, r3
 8000e2c:	d301      	bcc.n	8000e32 <__clzsi2+0x22>
 8000e2e:	0900      	lsrs	r0, r0, #4
 8000e30:	3904      	subs	r1, #4
 8000e32:	a202      	add	r2, pc, #8	; (adr r2, 8000e3c <__clzsi2+0x2c>)
 8000e34:	5c10      	ldrb	r0, [r2, r0]
 8000e36:	1840      	adds	r0, r0, r1
 8000e38:	4770      	bx	lr
 8000e3a:	46c0      	nop			; (mov r8, r8)
 8000e3c:	02020304 	.word	0x02020304
 8000e40:	01010101 	.word	0x01010101
	...

08000e4c <__clzdi2>:
 8000e4c:	b510      	push	{r4, lr}
 8000e4e:	2900      	cmp	r1, #0
 8000e50:	d103      	bne.n	8000e5a <__clzdi2+0xe>
 8000e52:	f7ff ffdd 	bl	8000e10 <__clzsi2>
 8000e56:	3020      	adds	r0, #32
 8000e58:	e002      	b.n	8000e60 <__clzdi2+0x14>
 8000e5a:	0008      	movs	r0, r1
 8000e5c:	f7ff ffd8 	bl	8000e10 <__clzsi2>
 8000e60:	bd10      	pop	{r4, pc}
 8000e62:	46c0      	nop			; (mov r8, r8)

08000e64 <__eqsf2>:
 8000e64:	b570      	push	{r4, r5, r6, lr}
 8000e66:	0042      	lsls	r2, r0, #1
 8000e68:	0245      	lsls	r5, r0, #9
 8000e6a:	024e      	lsls	r6, r1, #9
 8000e6c:	004c      	lsls	r4, r1, #1
 8000e6e:	0fc3      	lsrs	r3, r0, #31
 8000e70:	0a6d      	lsrs	r5, r5, #9
 8000e72:	2001      	movs	r0, #1
 8000e74:	0e12      	lsrs	r2, r2, #24
 8000e76:	0a76      	lsrs	r6, r6, #9
 8000e78:	0e24      	lsrs	r4, r4, #24
 8000e7a:	0fc9      	lsrs	r1, r1, #31
 8000e7c:	2aff      	cmp	r2, #255	; 0xff
 8000e7e:	d006      	beq.n	8000e8e <__eqsf2+0x2a>
 8000e80:	2cff      	cmp	r4, #255	; 0xff
 8000e82:	d003      	beq.n	8000e8c <__eqsf2+0x28>
 8000e84:	42a2      	cmp	r2, r4
 8000e86:	d101      	bne.n	8000e8c <__eqsf2+0x28>
 8000e88:	42b5      	cmp	r5, r6
 8000e8a:	d006      	beq.n	8000e9a <__eqsf2+0x36>
 8000e8c:	bd70      	pop	{r4, r5, r6, pc}
 8000e8e:	2d00      	cmp	r5, #0
 8000e90:	d1fc      	bne.n	8000e8c <__eqsf2+0x28>
 8000e92:	2cff      	cmp	r4, #255	; 0xff
 8000e94:	d1fa      	bne.n	8000e8c <__eqsf2+0x28>
 8000e96:	2e00      	cmp	r6, #0
 8000e98:	d1f8      	bne.n	8000e8c <__eqsf2+0x28>
 8000e9a:	428b      	cmp	r3, r1
 8000e9c:	d006      	beq.n	8000eac <__eqsf2+0x48>
 8000e9e:	2001      	movs	r0, #1
 8000ea0:	2a00      	cmp	r2, #0
 8000ea2:	d1f3      	bne.n	8000e8c <__eqsf2+0x28>
 8000ea4:	0028      	movs	r0, r5
 8000ea6:	1e43      	subs	r3, r0, #1
 8000ea8:	4198      	sbcs	r0, r3
 8000eaa:	e7ef      	b.n	8000e8c <__eqsf2+0x28>
 8000eac:	2000      	movs	r0, #0
 8000eae:	e7ed      	b.n	8000e8c <__eqsf2+0x28>

08000eb0 <__gesf2>:
 8000eb0:	b570      	push	{r4, r5, r6, lr}
 8000eb2:	0042      	lsls	r2, r0, #1
 8000eb4:	0245      	lsls	r5, r0, #9
 8000eb6:	024e      	lsls	r6, r1, #9
 8000eb8:	004c      	lsls	r4, r1, #1
 8000eba:	0fc3      	lsrs	r3, r0, #31
 8000ebc:	0a6d      	lsrs	r5, r5, #9
 8000ebe:	0e12      	lsrs	r2, r2, #24
 8000ec0:	0a76      	lsrs	r6, r6, #9
 8000ec2:	0e24      	lsrs	r4, r4, #24
 8000ec4:	0fc8      	lsrs	r0, r1, #31
 8000ec6:	2aff      	cmp	r2, #255	; 0xff
 8000ec8:	d01b      	beq.n	8000f02 <__gesf2+0x52>
 8000eca:	2cff      	cmp	r4, #255	; 0xff
 8000ecc:	d00e      	beq.n	8000eec <__gesf2+0x3c>
 8000ece:	2a00      	cmp	r2, #0
 8000ed0:	d11b      	bne.n	8000f0a <__gesf2+0x5a>
 8000ed2:	2c00      	cmp	r4, #0
 8000ed4:	d101      	bne.n	8000eda <__gesf2+0x2a>
 8000ed6:	2e00      	cmp	r6, #0
 8000ed8:	d01c      	beq.n	8000f14 <__gesf2+0x64>
 8000eda:	2d00      	cmp	r5, #0
 8000edc:	d00c      	beq.n	8000ef8 <__gesf2+0x48>
 8000ede:	4283      	cmp	r3, r0
 8000ee0:	d01c      	beq.n	8000f1c <__gesf2+0x6c>
 8000ee2:	2102      	movs	r1, #2
 8000ee4:	1e58      	subs	r0, r3, #1
 8000ee6:	4008      	ands	r0, r1
 8000ee8:	3801      	subs	r0, #1
 8000eea:	bd70      	pop	{r4, r5, r6, pc}
 8000eec:	2e00      	cmp	r6, #0
 8000eee:	d122      	bne.n	8000f36 <__gesf2+0x86>
 8000ef0:	2a00      	cmp	r2, #0
 8000ef2:	d1f4      	bne.n	8000ede <__gesf2+0x2e>
 8000ef4:	2d00      	cmp	r5, #0
 8000ef6:	d1f2      	bne.n	8000ede <__gesf2+0x2e>
 8000ef8:	2800      	cmp	r0, #0
 8000efa:	d1f6      	bne.n	8000eea <__gesf2+0x3a>
 8000efc:	2001      	movs	r0, #1
 8000efe:	4240      	negs	r0, r0
 8000f00:	e7f3      	b.n	8000eea <__gesf2+0x3a>
 8000f02:	2d00      	cmp	r5, #0
 8000f04:	d117      	bne.n	8000f36 <__gesf2+0x86>
 8000f06:	2cff      	cmp	r4, #255	; 0xff
 8000f08:	d0f0      	beq.n	8000eec <__gesf2+0x3c>
 8000f0a:	2c00      	cmp	r4, #0
 8000f0c:	d1e7      	bne.n	8000ede <__gesf2+0x2e>
 8000f0e:	2e00      	cmp	r6, #0
 8000f10:	d1e5      	bne.n	8000ede <__gesf2+0x2e>
 8000f12:	e7e6      	b.n	8000ee2 <__gesf2+0x32>
 8000f14:	2000      	movs	r0, #0
 8000f16:	2d00      	cmp	r5, #0
 8000f18:	d0e7      	beq.n	8000eea <__gesf2+0x3a>
 8000f1a:	e7e2      	b.n	8000ee2 <__gesf2+0x32>
 8000f1c:	42a2      	cmp	r2, r4
 8000f1e:	dc05      	bgt.n	8000f2c <__gesf2+0x7c>
 8000f20:	dbea      	blt.n	8000ef8 <__gesf2+0x48>
 8000f22:	42b5      	cmp	r5, r6
 8000f24:	d802      	bhi.n	8000f2c <__gesf2+0x7c>
 8000f26:	d3e7      	bcc.n	8000ef8 <__gesf2+0x48>
 8000f28:	2000      	movs	r0, #0
 8000f2a:	e7de      	b.n	8000eea <__gesf2+0x3a>
 8000f2c:	4243      	negs	r3, r0
 8000f2e:	4158      	adcs	r0, r3
 8000f30:	0040      	lsls	r0, r0, #1
 8000f32:	3801      	subs	r0, #1
 8000f34:	e7d9      	b.n	8000eea <__gesf2+0x3a>
 8000f36:	2002      	movs	r0, #2
 8000f38:	4240      	negs	r0, r0
 8000f3a:	e7d6      	b.n	8000eea <__gesf2+0x3a>

08000f3c <__lesf2>:
 8000f3c:	b570      	push	{r4, r5, r6, lr}
 8000f3e:	0042      	lsls	r2, r0, #1
 8000f40:	0245      	lsls	r5, r0, #9
 8000f42:	024e      	lsls	r6, r1, #9
 8000f44:	004c      	lsls	r4, r1, #1
 8000f46:	0fc3      	lsrs	r3, r0, #31
 8000f48:	0a6d      	lsrs	r5, r5, #9
 8000f4a:	0e12      	lsrs	r2, r2, #24
 8000f4c:	0a76      	lsrs	r6, r6, #9
 8000f4e:	0e24      	lsrs	r4, r4, #24
 8000f50:	0fc8      	lsrs	r0, r1, #31
 8000f52:	2aff      	cmp	r2, #255	; 0xff
 8000f54:	d00b      	beq.n	8000f6e <__lesf2+0x32>
 8000f56:	2cff      	cmp	r4, #255	; 0xff
 8000f58:	d00d      	beq.n	8000f76 <__lesf2+0x3a>
 8000f5a:	2a00      	cmp	r2, #0
 8000f5c:	d11f      	bne.n	8000f9e <__lesf2+0x62>
 8000f5e:	2c00      	cmp	r4, #0
 8000f60:	d116      	bne.n	8000f90 <__lesf2+0x54>
 8000f62:	2e00      	cmp	r6, #0
 8000f64:	d114      	bne.n	8000f90 <__lesf2+0x54>
 8000f66:	2000      	movs	r0, #0
 8000f68:	2d00      	cmp	r5, #0
 8000f6a:	d010      	beq.n	8000f8e <__lesf2+0x52>
 8000f6c:	e009      	b.n	8000f82 <__lesf2+0x46>
 8000f6e:	2d00      	cmp	r5, #0
 8000f70:	d10c      	bne.n	8000f8c <__lesf2+0x50>
 8000f72:	2cff      	cmp	r4, #255	; 0xff
 8000f74:	d113      	bne.n	8000f9e <__lesf2+0x62>
 8000f76:	2e00      	cmp	r6, #0
 8000f78:	d108      	bne.n	8000f8c <__lesf2+0x50>
 8000f7a:	2a00      	cmp	r2, #0
 8000f7c:	d008      	beq.n	8000f90 <__lesf2+0x54>
 8000f7e:	4283      	cmp	r3, r0
 8000f80:	d012      	beq.n	8000fa8 <__lesf2+0x6c>
 8000f82:	2102      	movs	r1, #2
 8000f84:	1e58      	subs	r0, r3, #1
 8000f86:	4008      	ands	r0, r1
 8000f88:	3801      	subs	r0, #1
 8000f8a:	e000      	b.n	8000f8e <__lesf2+0x52>
 8000f8c:	2002      	movs	r0, #2
 8000f8e:	bd70      	pop	{r4, r5, r6, pc}
 8000f90:	2d00      	cmp	r5, #0
 8000f92:	d1f4      	bne.n	8000f7e <__lesf2+0x42>
 8000f94:	2800      	cmp	r0, #0
 8000f96:	d1fa      	bne.n	8000f8e <__lesf2+0x52>
 8000f98:	2001      	movs	r0, #1
 8000f9a:	4240      	negs	r0, r0
 8000f9c:	e7f7      	b.n	8000f8e <__lesf2+0x52>
 8000f9e:	2c00      	cmp	r4, #0
 8000fa0:	d1ed      	bne.n	8000f7e <__lesf2+0x42>
 8000fa2:	2e00      	cmp	r6, #0
 8000fa4:	d1eb      	bne.n	8000f7e <__lesf2+0x42>
 8000fa6:	e7ec      	b.n	8000f82 <__lesf2+0x46>
 8000fa8:	42a2      	cmp	r2, r4
 8000faa:	dc05      	bgt.n	8000fb8 <__lesf2+0x7c>
 8000fac:	dbf2      	blt.n	8000f94 <__lesf2+0x58>
 8000fae:	42b5      	cmp	r5, r6
 8000fb0:	d802      	bhi.n	8000fb8 <__lesf2+0x7c>
 8000fb2:	d3ef      	bcc.n	8000f94 <__lesf2+0x58>
 8000fb4:	2000      	movs	r0, #0
 8000fb6:	e7ea      	b.n	8000f8e <__lesf2+0x52>
 8000fb8:	4243      	negs	r3, r0
 8000fba:	4158      	adcs	r0, r3
 8000fbc:	0040      	lsls	r0, r0, #1
 8000fbe:	3801      	subs	r0, #1
 8000fc0:	e7e5      	b.n	8000f8e <__lesf2+0x52>
 8000fc2:	46c0      	nop			; (mov r8, r8)

08000fc4 <save_data>:
 *      Author: Karol
 */

#include "flash.h"

void save_data(uint32_t Address,uint32_t data){
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b084      	sub	sp, #16
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
 8000fcc:	6039      	str	r1, [r7, #0]

    HAL_FLASH_Unlock();
 8000fce:	f001 fb8d 	bl	80026ec <HAL_FLASH_Unlock>
	for(int i=0;i<50;i++){}
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	60fb      	str	r3, [r7, #12]
 8000fd6:	e002      	b.n	8000fde <save_data+0x1a>
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	3301      	adds	r3, #1
 8000fdc:	60fb      	str	r3, [r7, #12]
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	2b31      	cmp	r3, #49	; 0x31
 8000fe2:	ddf9      	ble.n	8000fd8 <save_data+0x14>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,Address,(uint32_t)data);
 8000fe4:	683a      	ldr	r2, [r7, #0]
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	0019      	movs	r1, r3
 8000fea:	2002      	movs	r0, #2
 8000fec:	f001 fb42 	bl	8002674 <HAL_FLASH_Program>
	for(int i=0;i<50;i++){}
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	60bb      	str	r3, [r7, #8]
 8000ff4:	e002      	b.n	8000ffc <save_data+0x38>
 8000ff6:	68bb      	ldr	r3, [r7, #8]
 8000ff8:	3301      	adds	r3, #1
 8000ffa:	60bb      	str	r3, [r7, #8]
 8000ffc:	68bb      	ldr	r3, [r7, #8]
 8000ffe:	2b31      	cmp	r3, #49	; 0x31
 8001000:	ddf9      	ble.n	8000ff6 <save_data+0x32>
	HAL_FLASH_Lock();
 8001002:	f001 fbc7 	bl	8002794 <HAL_FLASH_Lock>
}
 8001006:	46c0      	nop			; (mov r8, r8)
 8001008:	46bd      	mov	sp, r7
 800100a:	b004      	add	sp, #16
 800100c:	bd80      	pop	{r7, pc}

0800100e <read_data>:

uint32_t read_data(uint32_t Address){
 800100e:	b580      	push	{r7, lr}
 8001010:	b084      	sub	sp, #16
 8001012:	af00      	add	r7, sp, #0
 8001014:	6078      	str	r0, [r7, #4]

	__IO uint32_t read_data = *(__IO uint32_t *)Address;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	60fb      	str	r3, [r7, #12]
	return (uint32_t)read_data;
 800101c:	68fb      	ldr	r3, [r7, #12]
}
 800101e:	0018      	movs	r0, r3
 8001020:	46bd      	mov	sp, r7
 8001022:	b004      	add	sp, #16
 8001024:	bd80      	pop	{r7, pc}

08001026 <erase_data>:

void erase_data(uint32_t Address){
 8001026:	b580      	push	{r7, lr}
 8001028:	b086      	sub	sp, #24
 800102a:	af00      	add	r7, sp, #0
 800102c:	6078      	str	r0, [r7, #4]
HAL_FLASH_Unlock();
 800102e:	f001 fb5d 	bl	80026ec <HAL_FLASH_Unlock>
FLASH_EraseInitTypeDef EraseInitStruct;
EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 8001032:	210c      	movs	r1, #12
 8001034:	187b      	adds	r3, r7, r1
 8001036:	2200      	movs	r2, #0
 8001038:	601a      	str	r2, [r3, #0]
EraseInitStruct.PageAddress = Address;
 800103a:	187b      	adds	r3, r7, r1
 800103c:	687a      	ldr	r2, [r7, #4]
 800103e:	605a      	str	r2, [r3, #4]
EraseInitStruct.NbPages = 1;
 8001040:	187b      	adds	r3, r7, r1
 8001042:	2201      	movs	r2, #1
 8001044:	609a      	str	r2, [r3, #8]

uint32_t PageError;
if (HAL_FLASHEx_Erase(&EraseInitStruct, &PageError) != HAL_OK)
 8001046:	2308      	movs	r3, #8
 8001048:	18fa      	adds	r2, r7, r3
 800104a:	187b      	adds	r3, r7, r1
 800104c:	0011      	movs	r1, r2
 800104e:	0018      	movs	r0, r3
 8001050:	f001 fcc2 	bl	80029d8 <HAL_FLASHEx_Erase>
 8001054:	1e03      	subs	r3, r0, #0
 8001056:	d102      	bne.n	800105e <erase_data+0x38>
		return HAL_ERROR;
HAL_FLASH_Lock();
 8001058:	f001 fb9c 	bl	8002794 <HAL_FLASH_Lock>
 800105c:	e000      	b.n	8001060 <erase_data+0x3a>
		return HAL_ERROR;
 800105e:	46c0      	nop			; (mov r8, r8)
}
 8001060:	46bd      	mov	sp, r7
 8001062:	b006      	add	sp, #24
 8001064:	bd80      	pop	{r7, pc}
	...

08001068 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b084      	sub	sp, #16
 800106c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800106e:	4b14      	ldr	r3, [pc, #80]	; (80010c0 <MX_GPIO_Init+0x58>)
 8001070:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001072:	4b13      	ldr	r3, [pc, #76]	; (80010c0 <MX_GPIO_Init+0x58>)
 8001074:	2104      	movs	r1, #4
 8001076:	430a      	orrs	r2, r1
 8001078:	62da      	str	r2, [r3, #44]	; 0x2c
 800107a:	4b11      	ldr	r3, [pc, #68]	; (80010c0 <MX_GPIO_Init+0x58>)
 800107c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800107e:	2204      	movs	r2, #4
 8001080:	4013      	ands	r3, r2
 8001082:	60fb      	str	r3, [r7, #12]
 8001084:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001086:	4b0e      	ldr	r3, [pc, #56]	; (80010c0 <MX_GPIO_Init+0x58>)
 8001088:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800108a:	4b0d      	ldr	r3, [pc, #52]	; (80010c0 <MX_GPIO_Init+0x58>)
 800108c:	2180      	movs	r1, #128	; 0x80
 800108e:	430a      	orrs	r2, r1
 8001090:	62da      	str	r2, [r3, #44]	; 0x2c
 8001092:	4b0b      	ldr	r3, [pc, #44]	; (80010c0 <MX_GPIO_Init+0x58>)
 8001094:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001096:	2280      	movs	r2, #128	; 0x80
 8001098:	4013      	ands	r3, r2
 800109a:	60bb      	str	r3, [r7, #8]
 800109c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800109e:	4b08      	ldr	r3, [pc, #32]	; (80010c0 <MX_GPIO_Init+0x58>)
 80010a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80010a2:	4b07      	ldr	r3, [pc, #28]	; (80010c0 <MX_GPIO_Init+0x58>)
 80010a4:	2101      	movs	r1, #1
 80010a6:	430a      	orrs	r2, r1
 80010a8:	62da      	str	r2, [r3, #44]	; 0x2c
 80010aa:	4b05      	ldr	r3, [pc, #20]	; (80010c0 <MX_GPIO_Init+0x58>)
 80010ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010ae:	2201      	movs	r2, #1
 80010b0:	4013      	ands	r3, r2
 80010b2:	607b      	str	r3, [r7, #4]
 80010b4:	687b      	ldr	r3, [r7, #4]

}
 80010b6:	46c0      	nop			; (mov r8, r8)
 80010b8:	46bd      	mov	sp, r7
 80010ba:	b004      	add	sp, #16
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	46c0      	nop			; (mov r8, r8)
 80010c0:	40021000 	.word	0x40021000

080010c4 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b082      	sub	sp, #8
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, 0);
 80010cc:	1d39      	adds	r1, r7, #4
 80010ce:	4805      	ldr	r0, [pc, #20]	; (80010e4 <__io_putchar+0x20>)
 80010d0:	2300      	movs	r3, #0
 80010d2:	2201      	movs	r2, #1
 80010d4:	f003 f95e 	bl	8004394 <HAL_UART_Transmit>
    return 1;
 80010d8:	2301      	movs	r3, #1
}
 80010da:	0018      	movs	r0, r3
 80010dc:	46bd      	mov	sp, r7
 80010de:	b002      	add	sp, #8
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	46c0      	nop			; (mov r8, r8)
 80010e4:	20000294 	.word	0x20000294

080010e8 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b082      	sub	sp, #8
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  if (huart == &huart2) {
 80010f0:	687a      	ldr	r2, [r7, #4]
 80010f2:	4b0c      	ldr	r3, [pc, #48]	; (8001124 <HAL_UART_RxCpltCallback+0x3c>)
 80010f4:	429a      	cmp	r2, r3
 80010f6:	d110      	bne.n	800111a <HAL_UART_RxCpltCallback+0x32>
	  MENU_USB(value);
 80010f8:	4b0b      	ldr	r3, [pc, #44]	; (8001128 <HAL_UART_RxCpltCallback+0x40>)
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	0018      	movs	r0, r3
 80010fe:	f000 fafd 	bl	80016fc <MENU_USB>
	  HAL_UART_Receive_IT(&huart2, &value, 1);
 8001102:	4909      	ldr	r1, [pc, #36]	; (8001128 <HAL_UART_RxCpltCallback+0x40>)
 8001104:	4b07      	ldr	r3, [pc, #28]	; (8001124 <HAL_UART_RxCpltCallback+0x3c>)
 8001106:	2201      	movs	r2, #1
 8001108:	0018      	movs	r0, r3
 800110a:	f003 f9e3 	bl	80044d4 <HAL_UART_Receive_IT>
	  HAL_UART_Transmit(&huart2, &value, 1, 0);
 800110e:	4906      	ldr	r1, [pc, #24]	; (8001128 <HAL_UART_RxCpltCallback+0x40>)
 8001110:	4804      	ldr	r0, [pc, #16]	; (8001124 <HAL_UART_RxCpltCallback+0x3c>)
 8001112:	2300      	movs	r3, #0
 8001114:	2201      	movs	r2, #1
 8001116:	f003 f93d 	bl	8004394 <HAL_UART_Transmit>
 }
}
 800111a:	46c0      	nop			; (mov r8, r8)
 800111c:	46bd      	mov	sp, r7
 800111e:	b002      	add	sp, #8
 8001120:	bd80      	pop	{r7, pc}
 8001122:	46c0      	nop			; (mov r8, r8)
 8001124:	20000294 	.word	0x20000294
 8001128:	200001a4 	.word	0x200001a4

0800112c <HAL_PWR_PVDCallback>:

void HAL_PWR_PVDCallback(void){
 800112c:	b580      	push	{r7, lr}
 800112e:	af00      	add	r7, sp, #0
    if (PWR->CSR & PWR_CSR_PVDO) {
 8001130:	4b0d      	ldr	r3, [pc, #52]	; (8001168 <HAL_PWR_PVDCallback+0x3c>)
 8001132:	685b      	ldr	r3, [r3, #4]
 8001134:	2204      	movs	r2, #4
 8001136:	4013      	ands	r3, r2
 8001138:	d013      	beq.n	8001162 <HAL_PWR_PVDCallback+0x36>
    	GPIOB->ODR&=~(1U<<1);
 800113a:	4b0c      	ldr	r3, [pc, #48]	; (800116c <HAL_PWR_PVDCallback+0x40>)
 800113c:	695a      	ldr	r2, [r3, #20]
 800113e:	4b0b      	ldr	r3, [pc, #44]	; (800116c <HAL_PWR_PVDCallback+0x40>)
 8001140:	2102      	movs	r1, #2
 8001142:	438a      	bics	r2, r1
 8001144:	615a      	str	r2, [r3, #20]
		pvd=1;
 8001146:	4b0a      	ldr	r3, [pc, #40]	; (8001170 <HAL_PWR_PVDCallback+0x44>)
 8001148:	2201      	movs	r2, #1
 800114a:	601a      	str	r2, [r3, #0]
		state=3;
 800114c:	4b09      	ldr	r3, [pc, #36]	; (8001174 <HAL_PWR_PVDCallback+0x48>)
 800114e:	2203      	movs	r2, #3
 8001150:	601a      	str	r2, [r3, #0]
		save_data(0x0800FFF4, state);
 8001152:	4b08      	ldr	r3, [pc, #32]	; (8001174 <HAL_PWR_PVDCallback+0x48>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	001a      	movs	r2, r3
 8001158:	4b07      	ldr	r3, [pc, #28]	; (8001178 <HAL_PWR_PVDCallback+0x4c>)
 800115a:	0011      	movs	r1, r2
 800115c:	0018      	movs	r0, r3
 800115e:	f7ff ff31 	bl	8000fc4 <save_data>
		//Stop_mode();
    }
}
 8001162:	46c0      	nop			; (mov r8, r8)
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}
 8001168:	40007000 	.word	0x40007000
 800116c:	50000400 	.word	0x50000400
 8001170:	2000024c 	.word	0x2000024c
 8001174:	20000248 	.word	0x20000248
 8001178:	0800fff4 	.word	0x0800fff4

0800117c <TIM6_Callback>:
void TIM6_Callback(void){
 800117c:	b580      	push	{r7, lr}
 800117e:	af00      	add	r7, sp, #0
	if(state==1 || state==2){
 8001180:	4b0c      	ldr	r3, [pc, #48]	; (80011b4 <TIM6_Callback+0x38>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	2b01      	cmp	r3, #1
 8001186:	d003      	beq.n	8001190 <TIM6_Callback+0x14>
 8001188:	4b0a      	ldr	r3, [pc, #40]	; (80011b4 <TIM6_Callback+0x38>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	2b02      	cmp	r3, #2
 800118e:	d108      	bne.n	80011a2 <TIM6_Callback+0x26>
		GPIOA->ODR^=(1U<<5);
 8001190:	23a0      	movs	r3, #160	; 0xa0
 8001192:	05db      	lsls	r3, r3, #23
 8001194:	695a      	ldr	r2, [r3, #20]
 8001196:	23a0      	movs	r3, #160	; 0xa0
 8001198:	05db      	lsls	r3, r3, #23
 800119a:	2120      	movs	r1, #32
 800119c:	404a      	eors	r2, r1
 800119e:	615a      	str	r2, [r3, #20]
 80011a0:	e004      	b.n	80011ac <TIM6_Callback+0x30>
	}
	else{
		GPIOA->ODR=(1U<<5);
 80011a2:	23a0      	movs	r3, #160	; 0xa0
 80011a4:	05db      	lsls	r3, r3, #23
 80011a6:	2220      	movs	r2, #32
 80011a8:	615a      	str	r2, [r3, #20]
	}
}
 80011aa:	46c0      	nop			; (mov r8, r8)
 80011ac:	46c0      	nop			; (mov r8, r8)
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	46c0      	nop			; (mov r8, r8)
 80011b4:	20000248 	.word	0x20000248

080011b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011ba:	b087      	sub	sp, #28
 80011bc:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011be:	f001 f85f 	bl	8002280 <HAL_Init>

  /* USER CODE BEGIN Init */
 // PVD_init();
  PG_init();
 80011c2:	f000 fa7d 	bl	80016c0 <PG_init>
  GPIO_LEDS();
 80011c6:	f000 fa3f 	bl	8001648 <GPIO_LEDS>
  TIM6_init();
 80011ca:	f000 ff8f 	bl	80020ec <TIM6_init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011ce:	f000 f9cf 	bl	8001570 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011d2:	f7ff ff49 	bl	8001068 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80011d6:	f000 ffad 	bl	8002134 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80011da:	f000 ff03 	bl	8001fe4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  printf(menu);
 80011de:	4bc7      	ldr	r3, [pc, #796]	; (80014fc <main+0x344>)
 80011e0:	0018      	movs	r0, r3
 80011e2:	f004 fded 	bl	8005dc0 <iprintf>
  HAL_UART_Receive_IT(&huart2, &value, 1);
 80011e6:	49c6      	ldr	r1, [pc, #792]	; (8001500 <main+0x348>)
 80011e8:	4bc6      	ldr	r3, [pc, #792]	; (8001504 <main+0x34c>)
 80011ea:	2201      	movs	r2, #1
 80011ec:	0018      	movs	r0, r3
 80011ee:	f003 f971 	bl	80044d4 <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while(1){
	  if(pvd!=1){
 80011f2:	4bc5      	ldr	r3, [pc, #788]	; (8001508 <main+0x350>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	2b01      	cmp	r3, #1
 80011f8:	d003      	beq.n	8001202 <main+0x4a>
		  GPIOA->ODR=(1U<<5);
 80011fa:	23a0      	movs	r3, #160	; 0xa0
 80011fc:	05db      	lsls	r3, r3, #23
 80011fe:	2220      	movs	r2, #32
 8001200:	615a      	str	r2, [r3, #20]
	  }
	  switch(state) {
 8001202:	4bc2      	ldr	r3, [pc, #776]	; (800150c <main+0x354>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	2b05      	cmp	r3, #5
 8001208:	d900      	bls.n	800120c <main+0x54>
 800120a:	e175      	b.n	80014f8 <main+0x340>
 800120c:	009a      	lsls	r2, r3, #2
 800120e:	4bc0      	ldr	r3, [pc, #768]	; (8001510 <main+0x358>)
 8001210:	18d3      	adds	r3, r2, r3
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	469f      	mov	pc, r3
	  	  case 1:
	  		  GPIOC->BSRR = ~(1U<<4);
 8001216:	4bbf      	ldr	r3, [pc, #764]	; (8001514 <main+0x35c>)
 8001218:	2211      	movs	r2, #17
 800121a:	4252      	negs	r2, r2
 800121c:	619a      	str	r2, [r3, #24]
	  		  while((GPIOC->ODR & GPIO_ODR_OD4)){}
 800121e:	46c0      	nop			; (mov r8, r8)
 8001220:	4bbc      	ldr	r3, [pc, #752]	; (8001514 <main+0x35c>)
 8001222:	695b      	ldr	r3, [r3, #20]
 8001224:	2210      	movs	r2, #16
 8001226:	4013      	ands	r3, r2
 8001228:	d1fa      	bne.n	8001220 <main+0x68>
	  		  HAL_Delay((uint32_t)Ton);
 800122a:	4bbb      	ldr	r3, [pc, #748]	; (8001518 <main+0x360>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	1c18      	adds	r0, r3, #0
 8001230:	f7ff f860 	bl	80002f4 <__aeabi_f2uiz>
 8001234:	0003      	movs	r3, r0
 8001236:	0018      	movs	r0, r3
 8001238:	f001 f892 	bl	8002360 <HAL_Delay>
	  		  GPIOC->BSRR = (1U<<4);
 800123c:	4bb5      	ldr	r3, [pc, #724]	; (8001514 <main+0x35c>)
 800123e:	2210      	movs	r2, #16
 8001240:	619a      	str	r2, [r3, #24]
	  		  while(!(GPIOC->ODR & GPIO_ODR_OD4)){}
 8001242:	46c0      	nop			; (mov r8, r8)
 8001244:	4bb3      	ldr	r3, [pc, #716]	; (8001514 <main+0x35c>)
 8001246:	695b      	ldr	r3, [r3, #20]
 8001248:	2210      	movs	r2, #16
 800124a:	4013      	ands	r3, r2
 800124c:	d0fa      	beq.n	8001244 <main+0x8c>
	  		  HAL_Delay((uint32_t)Toff);
 800124e:	4bb3      	ldr	r3, [pc, #716]	; (800151c <main+0x364>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	1c18      	adds	r0, r3, #0
 8001254:	f7ff f84e 	bl	80002f4 <__aeabi_f2uiz>
 8001258:	0003      	movs	r3, r0
 800125a:	0018      	movs	r0, r3
 800125c:	f001 f880 	bl	8002360 <HAL_Delay>
	  		  total_pulses++;
 8001260:	4baf      	ldr	r3, [pc, #700]	; (8001520 <main+0x368>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	1c5a      	adds	r2, r3, #1
 8001266:	4bae      	ldr	r3, [pc, #696]	; (8001520 <main+0x368>)
 8001268:	601a      	str	r2, [r3, #0]
	  		  flag=2;
 800126a:	4bae      	ldr	r3, [pc, #696]	; (8001524 <main+0x36c>)
 800126c:	2202      	movs	r2, #2
 800126e:	601a      	str	r2, [r3, #0]
	  		  break;
 8001270:	e143      	b.n	80014fa <main+0x342>
	  	  case 2:
	  		  GPIOC->BSRR = ~(1U<<4);
 8001272:	4ba8      	ldr	r3, [pc, #672]	; (8001514 <main+0x35c>)
 8001274:	2211      	movs	r2, #17
 8001276:	4252      	negs	r2, r2
 8001278:	619a      	str	r2, [r3, #24]
	  		  while((GPIOC->ODR & GPIO_ODR_OD4)){}
 800127a:	46c0      	nop			; (mov r8, r8)
 800127c:	4ba5      	ldr	r3, [pc, #660]	; (8001514 <main+0x35c>)
 800127e:	695b      	ldr	r3, [r3, #20]
 8001280:	2210      	movs	r2, #16
 8001282:	4013      	ands	r3, r2
 8001284:	d1fa      	bne.n	800127c <main+0xc4>
	  		  HAL_Delay((uint32_t)Ton);
 8001286:	4ba4      	ldr	r3, [pc, #656]	; (8001518 <main+0x360>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	1c18      	adds	r0, r3, #0
 800128c:	f7ff f832 	bl	80002f4 <__aeabi_f2uiz>
 8001290:	0003      	movs	r3, r0
 8001292:	0018      	movs	r0, r3
 8001294:	f001 f864 	bl	8002360 <HAL_Delay>
	  		  GPIOC->BSRR = (1U<<4);
 8001298:	4b9e      	ldr	r3, [pc, #632]	; (8001514 <main+0x35c>)
 800129a:	2210      	movs	r2, #16
 800129c:	619a      	str	r2, [r3, #24]
	  		  while(!(GPIOC->ODR & GPIO_ODR_OD4)){}
 800129e:	46c0      	nop			; (mov r8, r8)
 80012a0:	4b9c      	ldr	r3, [pc, #624]	; (8001514 <main+0x35c>)
 80012a2:	695b      	ldr	r3, [r3, #20]
 80012a4:	2210      	movs	r2, #16
 80012a6:	4013      	ands	r3, r2
 80012a8:	d0fa      	beq.n	80012a0 <main+0xe8>
	  		  HAL_Delay((uint32_t)Toff);
 80012aa:	4b9c      	ldr	r3, [pc, #624]	; (800151c <main+0x364>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	1c18      	adds	r0, r3, #0
 80012b0:	f7ff f820 	bl	80002f4 <__aeabi_f2uiz>
 80012b4:	0003      	movs	r3, r0
 80012b6:	0018      	movs	r0, r3
 80012b8:	f001 f852 	bl	8002360 <HAL_Delay>
	  		  total_pulses++;
 80012bc:	4b98      	ldr	r3, [pc, #608]	; (8001520 <main+0x368>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	1c5a      	adds	r2, r3, #1
 80012c2:	4b97      	ldr	r3, [pc, #604]	; (8001520 <main+0x368>)
 80012c4:	601a      	str	r2, [r3, #0]
	  		  num--;
 80012c6:	4b98      	ldr	r3, [pc, #608]	; (8001528 <main+0x370>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	1e5a      	subs	r2, r3, #1
 80012cc:	4b96      	ldr	r3, [pc, #600]	; (8001528 <main+0x370>)
 80012ce:	601a      	str	r2, [r3, #0]
	  		  if(num>0 && state==2){
 80012d0:	4b95      	ldr	r3, [pc, #596]	; (8001528 <main+0x370>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d00a      	beq.n	80012ee <main+0x136>
 80012d8:	4b8c      	ldr	r3, [pc, #560]	; (800150c <main+0x354>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	2b02      	cmp	r3, #2
 80012de:	d106      	bne.n	80012ee <main+0x136>
	  			  state=2;
 80012e0:	4b8a      	ldr	r3, [pc, #552]	; (800150c <main+0x354>)
 80012e2:	2202      	movs	r2, #2
 80012e4:	601a      	str	r2, [r3, #0]
	  			  flag=1;
 80012e6:	4b8f      	ldr	r3, [pc, #572]	; (8001524 <main+0x36c>)
 80012e8:	2201      	movs	r2, #1
 80012ea:	601a      	str	r2, [r3, #0]
	  		  }
	  		  else{
	  			  state=3;
	  		  }
	  		  break;
 80012ec:	e105      	b.n	80014fa <main+0x342>
	  			  state=3;
 80012ee:	4b87      	ldr	r3, [pc, #540]	; (800150c <main+0x354>)
 80012f0:	2203      	movs	r2, #3
 80012f2:	601a      	str	r2, [r3, #0]
	  		  break;
 80012f4:	e101      	b.n	80014fa <main+0x342>
	  	  case 3:
	  		  erase_data(Addr_total_pulse);
 80012f6:	4b8d      	ldr	r3, [pc, #564]	; (800152c <main+0x374>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	0018      	movs	r0, r3
 80012fc:	f7ff fe93 	bl	8001026 <erase_data>
	  		  save_data(Addr_total_pulse, total_pulses);
 8001300:	4b8a      	ldr	r3, [pc, #552]	; (800152c <main+0x374>)
 8001302:	681a      	ldr	r2, [r3, #0]
 8001304:	4b86      	ldr	r3, [pc, #536]	; (8001520 <main+0x368>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	0019      	movs	r1, r3
 800130a:	0010      	movs	r0, r2
 800130c:	f7ff fe5a 	bl	8000fc4 <save_data>
	  		  save_data(Addr_num, num);
 8001310:	4b87      	ldr	r3, [pc, #540]	; (8001530 <main+0x378>)
 8001312:	681a      	ldr	r2, [r3, #0]
 8001314:	4b84      	ldr	r3, [pc, #528]	; (8001528 <main+0x370>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	0019      	movs	r1, r3
 800131a:	0010      	movs	r0, r2
 800131c:	f7ff fe52 	bl	8000fc4 <save_data>
	  		  save_data(Addr_Ton, (uint32_t)Ton);
 8001320:	4b84      	ldr	r3, [pc, #528]	; (8001534 <main+0x37c>)
 8001322:	681c      	ldr	r4, [r3, #0]
 8001324:	4b7c      	ldr	r3, [pc, #496]	; (8001518 <main+0x360>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	1c18      	adds	r0, r3, #0
 800132a:	f7fe ffe3 	bl	80002f4 <__aeabi_f2uiz>
 800132e:	0003      	movs	r3, r0
 8001330:	0019      	movs	r1, r3
 8001332:	0020      	movs	r0, r4
 8001334:	f7ff fe46 	bl	8000fc4 <save_data>
	  		  save_data(Addr_Toff, (uint32_t)Toff);
 8001338:	4b7f      	ldr	r3, [pc, #508]	; (8001538 <main+0x380>)
 800133a:	681c      	ldr	r4, [r3, #0]
 800133c:	4b77      	ldr	r3, [pc, #476]	; (800151c <main+0x364>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	1c18      	adds	r0, r3, #0
 8001342:	f7fe ffd7 	bl	80002f4 <__aeabi_f2uiz>
 8001346:	0003      	movs	r3, r0
 8001348:	0019      	movs	r1, r3
 800134a:	0020      	movs	r0, r4
 800134c:	f7ff fe3a 	bl	8000fc4 <save_data>
	  		  save_data(Addr_freq, freq);
 8001350:	4b7a      	ldr	r3, [pc, #488]	; (800153c <main+0x384>)
 8001352:	681a      	ldr	r2, [r3, #0]
 8001354:	4b7a      	ldr	r3, [pc, #488]	; (8001540 <main+0x388>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	0019      	movs	r1, r3
 800135a:	0010      	movs	r0, r2
 800135c:	f7ff fe32 	bl	8000fc4 <save_data>
	  		  save_data(Addr_duty_cycle, duty_cycle);
 8001360:	4b78      	ldr	r3, [pc, #480]	; (8001544 <main+0x38c>)
 8001362:	681a      	ldr	r2, [r3, #0]
 8001364:	4b78      	ldr	r3, [pc, #480]	; (8001548 <main+0x390>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	0019      	movs	r1, r3
 800136a:	0010      	movs	r0, r2
 800136c:	f7ff fe2a 	bl	8000fc4 <save_data>
	  		  state=4;
 8001370:	4b66      	ldr	r3, [pc, #408]	; (800150c <main+0x354>)
 8001372:	2204      	movs	r2, #4
 8001374:	601a      	str	r2, [r3, #0]
	  		  break;
 8001376:	e0c0      	b.n	80014fa <main+0x342>
	  	  case 4:
	  		  if(flag==1){
 8001378:	4b6a      	ldr	r3, [pc, #424]	; (8001524 <main+0x36c>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	2b01      	cmp	r3, #1
 800137e:	d130      	bne.n	80013e2 <main+0x22a>
	  			  fdata1=read_data(Addr_num);
 8001380:	4b6b      	ldr	r3, [pc, #428]	; (8001530 <main+0x378>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	0018      	movs	r0, r3
 8001386:	f7ff fe42 	bl	800100e <read_data>
 800138a:	0002      	movs	r2, r0
 800138c:	4b6f      	ldr	r3, [pc, #444]	; (800154c <main+0x394>)
 800138e:	601a      	str	r2, [r3, #0]
	  			  fdata2=read_data(Addr_total_pulse);
 8001390:	4b66      	ldr	r3, [pc, #408]	; (800152c <main+0x374>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	0018      	movs	r0, r3
 8001396:	f7ff fe3a 	bl	800100e <read_data>
 800139a:	0002      	movs	r2, r0
 800139c:	4b6c      	ldr	r3, [pc, #432]	; (8001550 <main+0x398>)
 800139e:	601a      	str	r2, [r3, #0]
	  			  fdata3=read_data(Addr_Ton);
 80013a0:	4b64      	ldr	r3, [pc, #400]	; (8001534 <main+0x37c>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	0018      	movs	r0, r3
 80013a6:	f7ff fe32 	bl	800100e <read_data>
 80013aa:	0002      	movs	r2, r0
 80013ac:	4b69      	ldr	r3, [pc, #420]	; (8001554 <main+0x39c>)
 80013ae:	601a      	str	r2, [r3, #0]
	  			  fdata4=read_data(Addr_Toff);
 80013b0:	4b61      	ldr	r3, [pc, #388]	; (8001538 <main+0x380>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	0018      	movs	r0, r3
 80013b6:	f7ff fe2a 	bl	800100e <read_data>
 80013ba:	0002      	movs	r2, r0
 80013bc:	4b66      	ldr	r3, [pc, #408]	; (8001558 <main+0x3a0>)
 80013be:	601a      	str	r2, [r3, #0]
	  			  fdata5=read_data(Addr_freq);
 80013c0:	4b5e      	ldr	r3, [pc, #376]	; (800153c <main+0x384>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	0018      	movs	r0, r3
 80013c6:	f7ff fe22 	bl	800100e <read_data>
 80013ca:	0002      	movs	r2, r0
 80013cc:	4b63      	ldr	r3, [pc, #396]	; (800155c <main+0x3a4>)
 80013ce:	601a      	str	r2, [r3, #0]
	  			  fdata6=read_data(Addr_duty_cycle);
 80013d0:	4b5c      	ldr	r3, [pc, #368]	; (8001544 <main+0x38c>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	0018      	movs	r0, r3
 80013d6:	f7ff fe1a 	bl	800100e <read_data>
 80013da:	0002      	movs	r2, r0
 80013dc:	4b60      	ldr	r3, [pc, #384]	; (8001560 <main+0x3a8>)
 80013de:	601a      	str	r2, [r3, #0]
 80013e0:	e02f      	b.n	8001442 <main+0x28a>
	  		  }
	  		  else{
	  			  fdata1=read_data(Addr_num);
 80013e2:	4b53      	ldr	r3, [pc, #332]	; (8001530 <main+0x378>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	0018      	movs	r0, r3
 80013e8:	f7ff fe11 	bl	800100e <read_data>
 80013ec:	0002      	movs	r2, r0
 80013ee:	4b57      	ldr	r3, [pc, #348]	; (800154c <main+0x394>)
 80013f0:	601a      	str	r2, [r3, #0]
	  			  fdata2=read_data(Addr_total_pulse);
 80013f2:	4b4e      	ldr	r3, [pc, #312]	; (800152c <main+0x374>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	0018      	movs	r0, r3
 80013f8:	f7ff fe09 	bl	800100e <read_data>
 80013fc:	0002      	movs	r2, r0
 80013fe:	4b54      	ldr	r3, [pc, #336]	; (8001550 <main+0x398>)
 8001400:	601a      	str	r2, [r3, #0]
	  			  fdata3=read_data(Addr_Ton);
 8001402:	4b4c      	ldr	r3, [pc, #304]	; (8001534 <main+0x37c>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	0018      	movs	r0, r3
 8001408:	f7ff fe01 	bl	800100e <read_data>
 800140c:	0002      	movs	r2, r0
 800140e:	4b51      	ldr	r3, [pc, #324]	; (8001554 <main+0x39c>)
 8001410:	601a      	str	r2, [r3, #0]
	  			  fdata4=read_data(Addr_Toff);
 8001412:	4b49      	ldr	r3, [pc, #292]	; (8001538 <main+0x380>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	0018      	movs	r0, r3
 8001418:	f7ff fdf9 	bl	800100e <read_data>
 800141c:	0002      	movs	r2, r0
 800141e:	4b4e      	ldr	r3, [pc, #312]	; (8001558 <main+0x3a0>)
 8001420:	601a      	str	r2, [r3, #0]
	  			  fdata5=read_data(Addr_freq);
 8001422:	4b46      	ldr	r3, [pc, #280]	; (800153c <main+0x384>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	0018      	movs	r0, r3
 8001428:	f7ff fdf1 	bl	800100e <read_data>
 800142c:	0002      	movs	r2, r0
 800142e:	4b4b      	ldr	r3, [pc, #300]	; (800155c <main+0x3a4>)
 8001430:	601a      	str	r2, [r3, #0]
	  			  fdata6=read_data(Addr_duty_cycle);
 8001432:	4b44      	ldr	r3, [pc, #272]	; (8001544 <main+0x38c>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	0018      	movs	r0, r3
 8001438:	f7ff fde9 	bl	800100e <read_data>
 800143c:	0002      	movs	r2, r0
 800143e:	4b48      	ldr	r3, [pc, #288]	; (8001560 <main+0x3a8>)
 8001440:	601a      	str	r2, [r3, #0]
	  		  }
	  		  num=0;
 8001442:	4b39      	ldr	r3, [pc, #228]	; (8001528 <main+0x370>)
 8001444:	2200      	movs	r2, #0
 8001446:	601a      	str	r2, [r3, #0]
	  		  freq=0;
 8001448:	4b3d      	ldr	r3, [pc, #244]	; (8001540 <main+0x388>)
 800144a:	2200      	movs	r2, #0
 800144c:	601a      	str	r2, [r3, #0]
	  		  duty_cycle=0;
 800144e:	4b3e      	ldr	r3, [pc, #248]	; (8001548 <main+0x390>)
 8001450:	2200      	movs	r2, #0
 8001452:	601a      	str	r2, [r3, #0]
	  		  Ton=0;
 8001454:	4b30      	ldr	r3, [pc, #192]	; (8001518 <main+0x360>)
 8001456:	2200      	movs	r2, #0
 8001458:	601a      	str	r2, [r3, #0]
	  		  Toff=0;
 800145a:	4b30      	ldr	r3, [pc, #192]	; (800151c <main+0x364>)
 800145c:	2200      	movs	r2, #0
 800145e:	601a      	str	r2, [r3, #0]
	  		  total_pulses=0;
 8001460:	4b2f      	ldr	r3, [pc, #188]	; (8001520 <main+0x368>)
 8001462:	2200      	movs	r2, #0
 8001464:	601a      	str	r2, [r3, #0]
	  		  if(pvd!=1){
 8001466:	4b28      	ldr	r3, [pc, #160]	; (8001508 <main+0x350>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	2b01      	cmp	r3, #1
 800146c:	d003      	beq.n	8001476 <main+0x2be>
	  			  state=5;
 800146e:	4b27      	ldr	r3, [pc, #156]	; (800150c <main+0x354>)
 8001470:	2205      	movs	r2, #5
 8001472:	601a      	str	r2, [r3, #0]
	  		  }
	  		  else{
	  			  state=0;
	  		  }
	  		  break;
 8001474:	e041      	b.n	80014fa <main+0x342>
	  			  state=0;
 8001476:	4b25      	ldr	r3, [pc, #148]	; (800150c <main+0x354>)
 8001478:	2200      	movs	r2, #0
 800147a:	601a      	str	r2, [r3, #0]
	  		  break;
 800147c:	e03d      	b.n	80014fa <main+0x342>
	  	  case 5:
	  		  printf("\n\r");
 800147e:	4b39      	ldr	r3, [pc, #228]	; (8001564 <main+0x3ac>)
 8001480:	0018      	movs	r0, r3
 8001482:	f004 fc9d 	bl	8005dc0 <iprintf>
	  		  sprintf(line_buffer,"Num:%lu,Total pulse:%lu,Ton:%lu,Toff:%lu,Freq:%lu,Duty_cycle:%lu\r\n",fdata1,fdata2,fdata3,fdata4,fdata5,fdata6);
 8001486:	4b31      	ldr	r3, [pc, #196]	; (800154c <main+0x394>)
 8001488:	681e      	ldr	r6, [r3, #0]
 800148a:	4b31      	ldr	r3, [pc, #196]	; (8001550 <main+0x398>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	469c      	mov	ip, r3
 8001490:	4b30      	ldr	r3, [pc, #192]	; (8001554 <main+0x39c>)
 8001492:	681a      	ldr	r2, [r3, #0]
 8001494:	4b30      	ldr	r3, [pc, #192]	; (8001558 <main+0x3a0>)
 8001496:	6819      	ldr	r1, [r3, #0]
 8001498:	4b30      	ldr	r3, [pc, #192]	; (800155c <main+0x3a4>)
 800149a:	6818      	ldr	r0, [r3, #0]
 800149c:	4b30      	ldr	r3, [pc, #192]	; (8001560 <main+0x3a8>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4d31      	ldr	r5, [pc, #196]	; (8001568 <main+0x3b0>)
 80014a2:	4c32      	ldr	r4, [pc, #200]	; (800156c <main+0x3b4>)
 80014a4:	9303      	str	r3, [sp, #12]
 80014a6:	9002      	str	r0, [sp, #8]
 80014a8:	9101      	str	r1, [sp, #4]
 80014aa:	9200      	str	r2, [sp, #0]
 80014ac:	4663      	mov	r3, ip
 80014ae:	0032      	movs	r2, r6
 80014b0:	0029      	movs	r1, r5
 80014b2:	0020      	movs	r0, r4
 80014b4:	f004 fc94 	bl	8005de0 <siprintf>
	  		  HAL_UART_Transmit(&huart2, (uint8_t*)line_buffer, strlen(line_buffer), 50);
 80014b8:	4b2c      	ldr	r3, [pc, #176]	; (800156c <main+0x3b4>)
 80014ba:	0018      	movs	r0, r3
 80014bc:	f7fe fe2e 	bl	800011c <strlen>
 80014c0:	0003      	movs	r3, r0
 80014c2:	b29a      	uxth	r2, r3
 80014c4:	4929      	ldr	r1, [pc, #164]	; (800156c <main+0x3b4>)
 80014c6:	480f      	ldr	r0, [pc, #60]	; (8001504 <main+0x34c>)
 80014c8:	2332      	movs	r3, #50	; 0x32
 80014ca:	f002 ff63 	bl	8004394 <HAL_UART_Transmit>
	  		  for(int i;i<strlen(line_buffer);i++){
 80014ce:	e007      	b.n	80014e0 <main+0x328>
	  			  line_buffer[i]='\0';
 80014d0:	4a26      	ldr	r2, [pc, #152]	; (800156c <main+0x3b4>)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	18d3      	adds	r3, r2, r3
 80014d6:	2200      	movs	r2, #0
 80014d8:	701a      	strb	r2, [r3, #0]
	  		  for(int i;i<strlen(line_buffer);i++){
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	3301      	adds	r3, #1
 80014de:	607b      	str	r3, [r7, #4]
 80014e0:	4b22      	ldr	r3, [pc, #136]	; (800156c <main+0x3b4>)
 80014e2:	0018      	movs	r0, r3
 80014e4:	f7fe fe1a 	bl	800011c <strlen>
 80014e8:	0002      	movs	r2, r0
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	429a      	cmp	r2, r3
 80014ee:	d8ef      	bhi.n	80014d0 <main+0x318>
	  		  }
	  		  state=0;
 80014f0:	4b06      	ldr	r3, [pc, #24]	; (800150c <main+0x354>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	601a      	str	r2, [r3, #0]
	  		  break;
 80014f6:	e000      	b.n	80014fa <main+0x342>
	  	  default:
	  		  break;
 80014f8:	46c0      	nop			; (mov r8, r8)
	  if(pvd!=1){
 80014fa:	e67a      	b.n	80011f2 <main+0x3a>
 80014fc:	20000018 	.word	0x20000018
 8001500:	200001a4 	.word	0x200001a4
 8001504:	20000294 	.word	0x20000294
 8001508:	2000024c 	.word	0x2000024c
 800150c:	20000248 	.word	0x20000248
 8001510:	0800709c 	.word	0x0800709c
 8001514:	50000800 	.word	0x50000800
 8001518:	200001d4 	.word	0x200001d4
 800151c:	200001d8 	.word	0x200001d8
 8001520:	200001d0 	.word	0x200001d0
 8001524:	200001a8 	.word	0x200001a8
 8001528:	200001ac 	.word	0x200001ac
 800152c:	20000004 	.word	0x20000004
 8001530:	20000000 	.word	0x20000000
 8001534:	20000008 	.word	0x20000008
 8001538:	2000000c 	.word	0x2000000c
 800153c:	20000010 	.word	0x20000010
 8001540:	200001b0 	.word	0x200001b0
 8001544:	20000014 	.word	0x20000014
 8001548:	200001b4 	.word	0x200001b4
 800154c:	200001b8 	.word	0x200001b8
 8001550:	200001bc 	.word	0x200001bc
 8001554:	200001c0 	.word	0x200001c0
 8001558:	200001c4 	.word	0x200001c4
 800155c:	200001c8 	.word	0x200001c8
 8001560:	200001cc 	.word	0x200001cc
 8001564:	08006fb8 	.word	0x08006fb8
 8001568:	08006fbc 	.word	0x08006fbc
 800156c:	200001e0 	.word	0x200001e0

08001570 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001570:	b590      	push	{r4, r7, lr}
 8001572:	b09f      	sub	sp, #124	; 0x7c
 8001574:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001576:	2440      	movs	r4, #64	; 0x40
 8001578:	193b      	adds	r3, r7, r4
 800157a:	0018      	movs	r0, r3
 800157c:	2338      	movs	r3, #56	; 0x38
 800157e:	001a      	movs	r2, r3
 8001580:	2100      	movs	r1, #0
 8001582:	f004 fc99 	bl	8005eb8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001586:	232c      	movs	r3, #44	; 0x2c
 8001588:	18fb      	adds	r3, r7, r3
 800158a:	0018      	movs	r0, r3
 800158c:	2314      	movs	r3, #20
 800158e:	001a      	movs	r2, r3
 8001590:	2100      	movs	r1, #0
 8001592:	f004 fc91 	bl	8005eb8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001596:	1d3b      	adds	r3, r7, #4
 8001598:	0018      	movs	r0, r3
 800159a:	2328      	movs	r3, #40	; 0x28
 800159c:	001a      	movs	r2, r3
 800159e:	2100      	movs	r1, #0
 80015a0:	f004 fc8a 	bl	8005eb8 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80015a4:	4b26      	ldr	r3, [pc, #152]	; (8001640 <SystemClock_Config+0xd0>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4a26      	ldr	r2, [pc, #152]	; (8001644 <SystemClock_Config+0xd4>)
 80015aa:	401a      	ands	r2, r3
 80015ac:	4b24      	ldr	r3, [pc, #144]	; (8001640 <SystemClock_Config+0xd0>)
 80015ae:	2180      	movs	r1, #128	; 0x80
 80015b0:	0109      	lsls	r1, r1, #4
 80015b2:	430a      	orrs	r2, r1
 80015b4:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80015b6:	0021      	movs	r1, r4
 80015b8:	187b      	adds	r3, r7, r1
 80015ba:	2210      	movs	r2, #16
 80015bc:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80015be:	187b      	adds	r3, r7, r1
 80015c0:	2201      	movs	r2, #1
 80015c2:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80015c4:	187b      	adds	r3, r7, r1
 80015c6:	2200      	movs	r2, #0
 80015c8:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 80015ca:	187b      	adds	r3, r7, r1
 80015cc:	22a0      	movs	r2, #160	; 0xa0
 80015ce:	0212      	lsls	r2, r2, #8
 80015d0:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80015d2:	187b      	adds	r3, r7, r1
 80015d4:	2200      	movs	r2, #0
 80015d6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015d8:	187b      	adds	r3, r7, r1
 80015da:	0018      	movs	r0, r3
 80015dc:	f001 fc86 	bl	8002eec <HAL_RCC_OscConfig>
 80015e0:	1e03      	subs	r3, r0, #0
 80015e2:	d001      	beq.n	80015e8 <SystemClock_Config+0x78>
  {
    Error_Handler();
 80015e4:	f000 fbd6 	bl	8001d94 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015e8:	212c      	movs	r1, #44	; 0x2c
 80015ea:	187b      	adds	r3, r7, r1
 80015ec:	220f      	movs	r2, #15
 80015ee:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80015f0:	187b      	adds	r3, r7, r1
 80015f2:	2200      	movs	r2, #0
 80015f4:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015f6:	187b      	adds	r3, r7, r1
 80015f8:	2200      	movs	r2, #0
 80015fa:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80015fc:	187b      	adds	r3, r7, r1
 80015fe:	2200      	movs	r2, #0
 8001600:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001602:	187b      	adds	r3, r7, r1
 8001604:	2200      	movs	r2, #0
 8001606:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001608:	187b      	adds	r3, r7, r1
 800160a:	2100      	movs	r1, #0
 800160c:	0018      	movs	r0, r3
 800160e:	f002 f841 	bl	8003694 <HAL_RCC_ClockConfig>
 8001612:	1e03      	subs	r3, r0, #0
 8001614:	d001      	beq.n	800161a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8001616:	f000 fbbd 	bl	8001d94 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800161a:	1d3b      	adds	r3, r7, #4
 800161c:	2202      	movs	r2, #2
 800161e:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001620:	1d3b      	adds	r3, r7, #4
 8001622:	2200      	movs	r2, #0
 8001624:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001626:	1d3b      	adds	r3, r7, #4
 8001628:	0018      	movs	r0, r3
 800162a:	f002 fa57 	bl	8003adc <HAL_RCCEx_PeriphCLKConfig>
 800162e:	1e03      	subs	r3, r0, #0
 8001630:	d001      	beq.n	8001636 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001632:	f000 fbaf 	bl	8001d94 <Error_Handler>
  }
}
 8001636:	46c0      	nop			; (mov r8, r8)
 8001638:	46bd      	mov	sp, r7
 800163a:	b01f      	add	sp, #124	; 0x7c
 800163c:	bd90      	pop	{r4, r7, pc}
 800163e:	46c0      	nop			; (mov r8, r8)
 8001640:	40007000 	.word	0x40007000
 8001644:	ffffe7ff 	.word	0xffffe7ff

08001648 <GPIO_LEDS>:

/* USER CODE BEGIN 4 */

void GPIO_LEDS(void){
 8001648:	b580      	push	{r7, lr}
 800164a:	af00      	add	r7, sp, #0
	RCC->IOPENR |= RCC_IOPENR_GPIOBEN;
 800164c:	4b19      	ldr	r3, [pc, #100]	; (80016b4 <GPIO_LEDS+0x6c>)
 800164e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001650:	4b18      	ldr	r3, [pc, #96]	; (80016b4 <GPIO_LEDS+0x6c>)
 8001652:	2102      	movs	r1, #2
 8001654:	430a      	orrs	r2, r1
 8001656:	62da      	str	r2, [r3, #44]	; 0x2c
	RCC->IOPENR |= RCC_IOPENR_GPIOAEN;
 8001658:	4b16      	ldr	r3, [pc, #88]	; (80016b4 <GPIO_LEDS+0x6c>)
 800165a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800165c:	4b15      	ldr	r3, [pc, #84]	; (80016b4 <GPIO_LEDS+0x6c>)
 800165e:	2101      	movs	r1, #1
 8001660:	430a      	orrs	r2, r1
 8001662:	62da      	str	r2, [r3, #44]	; 0x2c

	GPIOA->MODER &= ((GPIOB->MODER & ~(GPIO_MODER_MODE5)) | (GPIO_MODER_MODE5_0));
 8001664:	4b14      	ldr	r3, [pc, #80]	; (80016b8 <GPIO_LEDS+0x70>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4a14      	ldr	r2, [pc, #80]	; (80016bc <GPIO_LEDS+0x74>)
 800166a:	4013      	ands	r3, r2
 800166c:	2280      	movs	r2, #128	; 0x80
 800166e:	00d2      	lsls	r2, r2, #3
 8001670:	431a      	orrs	r2, r3
 8001672:	23a0      	movs	r3, #160	; 0xa0
 8001674:	05db      	lsls	r3, r3, #23
 8001676:	6819      	ldr	r1, [r3, #0]
 8001678:	23a0      	movs	r3, #160	; 0xa0
 800167a:	05db      	lsls	r3, r3, #23
 800167c:	400a      	ands	r2, r1
 800167e:	601a      	str	r2, [r3, #0]
	GPIOB->MODER &= ((GPIOB->MODER & ~(GPIO_MODER_MODE1)) | (GPIO_MODER_MODE1_0));
 8001680:	4b0d      	ldr	r3, [pc, #52]	; (80016b8 <GPIO_LEDS+0x70>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	220c      	movs	r2, #12
 8001686:	4393      	bics	r3, r2
 8001688:	2204      	movs	r2, #4
 800168a:	431a      	orrs	r2, r3
 800168c:	4b0a      	ldr	r3, [pc, #40]	; (80016b8 <GPIO_LEDS+0x70>)
 800168e:	6819      	ldr	r1, [r3, #0]
 8001690:	4b09      	ldr	r3, [pc, #36]	; (80016b8 <GPIO_LEDS+0x70>)
 8001692:	400a      	ands	r2, r1
 8001694:	601a      	str	r2, [r3, #0]
	GPIOB->MODER &= ((GPIOB->MODER & ~(GPIO_MODER_MODE15)) | (GPIO_MODER_MODE15_0));
 8001696:	4b08      	ldr	r3, [pc, #32]	; (80016b8 <GPIO_LEDS+0x70>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	009b      	lsls	r3, r3, #2
 800169c:	089b      	lsrs	r3, r3, #2
 800169e:	2280      	movs	r2, #128	; 0x80
 80016a0:	05d2      	lsls	r2, r2, #23
 80016a2:	431a      	orrs	r2, r3
 80016a4:	4b04      	ldr	r3, [pc, #16]	; (80016b8 <GPIO_LEDS+0x70>)
 80016a6:	6819      	ldr	r1, [r3, #0]
 80016a8:	4b03      	ldr	r3, [pc, #12]	; (80016b8 <GPIO_LEDS+0x70>)
 80016aa:	400a      	ands	r2, r1
 80016ac:	601a      	str	r2, [r3, #0]
}
 80016ae:	46c0      	nop			; (mov r8, r8)
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}
 80016b4:	40021000 	.word	0x40021000
 80016b8:	50000400 	.word	0x50000400
 80016bc:	fffff3ff 	.word	0xfffff3ff

080016c0 <PG_init>:

void PG_init(void){
 80016c0:	b580      	push	{r7, lr}
 80016c2:	af00      	add	r7, sp, #0
	RCC->IOPENR  |= RCC_IOPENR_GPIOCEN;
 80016c4:	4b0a      	ldr	r3, [pc, #40]	; (80016f0 <PG_init+0x30>)
 80016c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016c8:	4b09      	ldr	r3, [pc, #36]	; (80016f0 <PG_init+0x30>)
 80016ca:	2104      	movs	r1, #4
 80016cc:	430a      	orrs	r2, r1
 80016ce:	62da      	str	r2, [r3, #44]	; 0x2c
	GPIOC -> MODER = (GPIO_MODER_MODE4_0)|(GPIOC->MODER & ~GPIO_MODER_MODE4);
 80016d0:	4b08      	ldr	r3, [pc, #32]	; (80016f4 <PG_init+0x34>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4a08      	ldr	r2, [pc, #32]	; (80016f8 <PG_init+0x38>)
 80016d6:	401a      	ands	r2, r3
 80016d8:	4b06      	ldr	r3, [pc, #24]	; (80016f4 <PG_init+0x34>)
 80016da:	2180      	movs	r1, #128	; 0x80
 80016dc:	0049      	lsls	r1, r1, #1
 80016de:	430a      	orrs	r2, r1
 80016e0:	601a      	str	r2, [r3, #0]
	GPIOC->BSRR = (1U<<4);
 80016e2:	4b04      	ldr	r3, [pc, #16]	; (80016f4 <PG_init+0x34>)
 80016e4:	2210      	movs	r2, #16
 80016e6:	619a      	str	r2, [r3, #24]
}
 80016e8:	46c0      	nop			; (mov r8, r8)
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	46c0      	nop			; (mov r8, r8)
 80016f0:	40021000 	.word	0x40021000
 80016f4:	50000800 	.word	0x50000800
 80016f8:	fffffcff 	.word	0xfffffcff

080016fc <MENU_USB>:

void MENU_USB(uint8_t value){
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b08a      	sub	sp, #40	; 0x28
 8001700:	af00      	add	r7, sp, #0
 8001702:	0002      	movs	r2, r0
 8001704:	1dfb      	adds	r3, r7, #7
 8001706:	701a      	strb	r2, [r3, #0]
int result;
char * ptr;
 		if (value == '\r' || value == '\n') {
 8001708:	1dfb      	adds	r3, r7, #7
 800170a:	781b      	ldrb	r3, [r3, #0]
 800170c:	2b0d      	cmp	r3, #13
 800170e:	d004      	beq.n	800171a <MENU_USB+0x1e>
 8001710:	1dfb      	adds	r3, r7, #7
 8001712:	781b      	ldrb	r3, [r3, #0]
 8001714:	2b0a      	cmp	r3, #10
 8001716:	d000      	beq.n	800171a <MENU_USB+0x1e>
 8001718:	e256      	b.n	8001bc8 <MENU_USB+0x4cc>
			if (line_length > 0) {
 800171a:	4bba      	ldr	r3, [pc, #744]	; (8001a04 <MENU_USB+0x308>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d100      	bne.n	8001724 <MENU_USB+0x28>
 8001722:	e248      	b.n	8001bb6 <MENU_USB+0x4ba>
				line_buffer[line_length] = '\0';
 8001724:	4bb7      	ldr	r3, [pc, #732]	; (8001a04 <MENU_USB+0x308>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4ab7      	ldr	r2, [pc, #732]	; (8001a08 <MENU_USB+0x30c>)
 800172a:	2100      	movs	r1, #0
 800172c:	54d1      	strb	r1, [r2, r3]
					if (strncmp(line_buffer, "run",3) == 0) {
 800172e:	49b7      	ldr	r1, [pc, #732]	; (8001a0c <MENU_USB+0x310>)
 8001730:	4bb5      	ldr	r3, [pc, #724]	; (8001a08 <MENU_USB+0x30c>)
 8001732:	2203      	movs	r2, #3
 8001734:	0018      	movs	r0, r3
 8001736:	f004 fbe4 	bl	8005f02 <strncmp>
 800173a:	1e03      	subs	r3, r0, #0
 800173c:	d000      	beq.n	8001740 <MENU_USB+0x44>
 800173e:	e154      	b.n	80019ea <MENU_USB+0x2ee>
						splitString(line_buffer, tokens);
 8001740:	4ab3      	ldr	r2, [pc, #716]	; (8001a10 <MENU_USB+0x314>)
 8001742:	4bb1      	ldr	r3, [pc, #708]	; (8001a08 <MENU_USB+0x30c>)
 8001744:	0011      	movs	r1, r2
 8001746:	0018      	movs	r0, r3
 8001748:	f000 face 	bl	8001ce8 <splitString>
						ptr=strpbrk(tokens[1], "oo");
 800174c:	4bb0      	ldr	r3, [pc, #704]	; (8001a10 <MENU_USB+0x314>)
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	4ab0      	ldr	r2, [pc, #704]	; (8001a14 <MENU_USB+0x318>)
 8001752:	0011      	movs	r1, r2
 8001754:	0018      	movs	r0, r3
 8001756:	f004 fbe5 	bl	8005f24 <strpbrk>
 800175a:	0003      	movs	r3, r0
 800175c:	60bb      	str	r3, [r7, #8]
						if(!(ptr==NULL)){
 800175e:	68bb      	ldr	r3, [r7, #8]
 8001760:	2b00      	cmp	r3, #0
 8001762:	d100      	bne.n	8001766 <MENU_USB+0x6a>
 8001764:	e092      	b.n	800188c <MENU_USB+0x190>
							for(int i=2;i<MAX_TOKENS;i++){
 8001766:	2302      	movs	r3, #2
 8001768:	623b      	str	r3, [r7, #32]
 800176a:	e029      	b.n	80017c0 <MENU_USB+0xc4>
								result=1;
 800176c:	2301      	movs	r3, #1
 800176e:	627b      	str	r3, [r7, #36]	; 0x24
								for(int j=0;j<strlen(tokens[i]);j++){
 8001770:	2300      	movs	r3, #0
 8001772:	61fb      	str	r3, [r7, #28]
 8001774:	e013      	b.n	800179e <MENU_USB+0xa2>
									if(!isdigit(tokens[i][j])){
 8001776:	4ba6      	ldr	r3, [pc, #664]	; (8001a10 <MENU_USB+0x314>)
 8001778:	6a3a      	ldr	r2, [r7, #32]
 800177a:	0092      	lsls	r2, r2, #2
 800177c:	58d2      	ldr	r2, [r2, r3]
 800177e:	69fb      	ldr	r3, [r7, #28]
 8001780:	18d3      	adds	r3, r2, r3
 8001782:	781b      	ldrb	r3, [r3, #0]
 8001784:	1c5a      	adds	r2, r3, #1
 8001786:	4ba4      	ldr	r3, [pc, #656]	; (8001a18 <MENU_USB+0x31c>)
 8001788:	18d3      	adds	r3, r2, r3
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	001a      	movs	r2, r3
 800178e:	2304      	movs	r3, #4
 8001790:	4013      	ands	r3, r2
 8001792:	d101      	bne.n	8001798 <MENU_USB+0x9c>
										result=0;
 8001794:	2300      	movs	r3, #0
 8001796:	627b      	str	r3, [r7, #36]	; 0x24
								for(int j=0;j<strlen(tokens[i]);j++){
 8001798:	69fb      	ldr	r3, [r7, #28]
 800179a:	3301      	adds	r3, #1
 800179c:	61fb      	str	r3, [r7, #28]
 800179e:	4b9c      	ldr	r3, [pc, #624]	; (8001a10 <MENU_USB+0x314>)
 80017a0:	6a3a      	ldr	r2, [r7, #32]
 80017a2:	0092      	lsls	r2, r2, #2
 80017a4:	58d3      	ldr	r3, [r2, r3]
 80017a6:	0018      	movs	r0, r3
 80017a8:	f7fe fcb8 	bl	800011c <strlen>
 80017ac:	0002      	movs	r2, r0
 80017ae:	69fb      	ldr	r3, [r7, #28]
 80017b0:	429a      	cmp	r2, r3
 80017b2:	d8e0      	bhi.n	8001776 <MENU_USB+0x7a>
									}
								}
								if(result==0){
 80017b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d006      	beq.n	80017c8 <MENU_USB+0xcc>
							for(int i=2;i<MAX_TOKENS;i++){
 80017ba:	6a3b      	ldr	r3, [r7, #32]
 80017bc:	3301      	adds	r3, #1
 80017be:	623b      	str	r3, [r7, #32]
 80017c0:	6a3b      	ldr	r3, [r7, #32]
 80017c2:	2b03      	cmp	r3, #3
 80017c4:	ddd2      	ble.n	800176c <MENU_USB+0x70>
 80017c6:	e000      	b.n	80017ca <MENU_USB+0xce>
									break;
 80017c8:	46c0      	nop			; (mov r8, r8)
								}
							}
							if(result!=0){
 80017ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d058      	beq.n	8001882 <MENU_USB+0x186>
									freq=ASCII_TO_uint8_t(tokens[MAX_TOKENS-2]);
 80017d0:	4b8f      	ldr	r3, [pc, #572]	; (8001a10 <MENU_USB+0x314>)
 80017d2:	689b      	ldr	r3, [r3, #8]
 80017d4:	0018      	movs	r0, r3
 80017d6:	f000 fa53 	bl	8001c80 <ASCII_TO_uint8_t>
 80017da:	0002      	movs	r2, r0
 80017dc:	4b8f      	ldr	r3, [pc, #572]	; (8001a1c <MENU_USB+0x320>)
 80017de:	601a      	str	r2, [r3, #0]
									duty_cycle=ASCII_TO_uint8_t(tokens[MAX_TOKENS-1]);
 80017e0:	4b8b      	ldr	r3, [pc, #556]	; (8001a10 <MENU_USB+0x314>)
 80017e2:	68db      	ldr	r3, [r3, #12]
 80017e4:	0018      	movs	r0, r3
 80017e6:	f000 fa4b 	bl	8001c80 <ASCII_TO_uint8_t>
 80017ea:	0002      	movs	r2, r0
 80017ec:	4b8c      	ldr	r3, [pc, #560]	; (8001a20 <MENU_USB+0x324>)
 80017ee:	601a      	str	r2, [r3, #0]
									if(freq==0 || duty_cycle==0){
 80017f0:	4b8a      	ldr	r3, [pc, #552]	; (8001a1c <MENU_USB+0x320>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d003      	beq.n	8001800 <MENU_USB+0x104>
 80017f8:	4b89      	ldr	r3, [pc, #548]	; (8001a20 <MENU_USB+0x324>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d104      	bne.n	800180a <MENU_USB+0x10e>
										printf(error_with_run);
 8001800:	4b88      	ldr	r3, [pc, #544]	; (8001a24 <MENU_USB+0x328>)
 8001802:	0018      	movs	r0, r3
 8001804:	f004 fadc 	bl	8005dc0 <iprintf>
 8001808:	e0de      	b.n	80019c8 <MENU_USB+0x2cc>
									}
									else if(duty_cycle>=100){
 800180a:	4b85      	ldr	r3, [pc, #532]	; (8001a20 <MENU_USB+0x324>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	2b63      	cmp	r3, #99	; 0x63
 8001810:	d904      	bls.n	800181c <MENU_USB+0x120>
										printf(error_with_duty_cycle);
 8001812:	4b85      	ldr	r3, [pc, #532]	; (8001a28 <MENU_USB+0x32c>)
 8001814:	0018      	movs	r0, r3
 8001816:	f004 fad3 	bl	8005dc0 <iprintf>
 800181a:	e0d5      	b.n	80019c8 <MENU_USB+0x2cc>
									}
									else{
										Period=(float)(1000/freq);
 800181c:	4b7f      	ldr	r3, [pc, #508]	; (8001a1c <MENU_USB+0x320>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	0019      	movs	r1, r3
 8001822:	23fa      	movs	r3, #250	; 0xfa
 8001824:	0098      	lsls	r0, r3, #2
 8001826:	f7fe fc8b 	bl	8000140 <__udivsi3>
 800182a:	0003      	movs	r3, r0
 800182c:	0018      	movs	r0, r3
 800182e:	f7ff fa6d 	bl	8000d0c <__aeabi_ui2f>
 8001832:	1c02      	adds	r2, r0, #0
 8001834:	4b7d      	ldr	r3, [pc, #500]	; (8001a2c <MENU_USB+0x330>)
 8001836:	601a      	str	r2, [r3, #0]
										Ton=(float)((Period*duty_cycle)/100);
 8001838:	4b79      	ldr	r3, [pc, #484]	; (8001a20 <MENU_USB+0x324>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	0018      	movs	r0, r3
 800183e:	f7ff fa65 	bl	8000d0c <__aeabi_ui2f>
 8001842:	1c02      	adds	r2, r0, #0
 8001844:	4b79      	ldr	r3, [pc, #484]	; (8001a2c <MENU_USB+0x330>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	1c19      	adds	r1, r3, #0
 800184a:	1c10      	adds	r0, r2, #0
 800184c:	f7fe ff50 	bl	80006f0 <__aeabi_fmul>
 8001850:	1c03      	adds	r3, r0, #0
 8001852:	4977      	ldr	r1, [pc, #476]	; (8001a30 <MENU_USB+0x334>)
 8001854:	1c18      	adds	r0, r3, #0
 8001856:	f7fe fe31 	bl	80004bc <__aeabi_fdiv>
 800185a:	1c03      	adds	r3, r0, #0
 800185c:	1c1a      	adds	r2, r3, #0
 800185e:	4b75      	ldr	r3, [pc, #468]	; (8001a34 <MENU_USB+0x338>)
 8001860:	601a      	str	r2, [r3, #0]
										Toff=Period-Ton;
 8001862:	4b72      	ldr	r3, [pc, #456]	; (8001a2c <MENU_USB+0x330>)
 8001864:	681a      	ldr	r2, [r3, #0]
 8001866:	4b73      	ldr	r3, [pc, #460]	; (8001a34 <MENU_USB+0x338>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	1c19      	adds	r1, r3, #0
 800186c:	1c10      	adds	r0, r2, #0
 800186e:	f7ff f88d 	bl	800098c <__aeabi_fsub>
 8001872:	1c03      	adds	r3, r0, #0
 8001874:	1c1a      	adds	r2, r3, #0
 8001876:	4b70      	ldr	r3, [pc, #448]	; (8001a38 <MENU_USB+0x33c>)
 8001878:	601a      	str	r2, [r3, #0]
										state=1;
 800187a:	4b70      	ldr	r3, [pc, #448]	; (8001a3c <MENU_USB+0x340>)
 800187c:	2201      	movs	r2, #1
 800187e:	601a      	str	r2, [r3, #0]
 8001880:	e0a2      	b.n	80019c8 <MENU_USB+0x2cc>
									}
							}
							else{
								printf(error_with_run);
 8001882:	4b68      	ldr	r3, [pc, #416]	; (8001a24 <MENU_USB+0x328>)
 8001884:	0018      	movs	r0, r3
 8001886:	f004 fa9b 	bl	8005dc0 <iprintf>
 800188a:	e09d      	b.n	80019c8 <MENU_USB+0x2cc>
							}
						}
						else{
							for(int i=1;i<MAX_TOKENS;i++){
 800188c:	2301      	movs	r3, #1
 800188e:	61bb      	str	r3, [r7, #24]
 8001890:	e029      	b.n	80018e6 <MENU_USB+0x1ea>
								result=1;
 8001892:	2301      	movs	r3, #1
 8001894:	627b      	str	r3, [r7, #36]	; 0x24
								for(int j=0;j<strlen(tokens[i]);j++){
 8001896:	2300      	movs	r3, #0
 8001898:	617b      	str	r3, [r7, #20]
 800189a:	e013      	b.n	80018c4 <MENU_USB+0x1c8>
									if(!isdigit(tokens[i][j])){
 800189c:	4b5c      	ldr	r3, [pc, #368]	; (8001a10 <MENU_USB+0x314>)
 800189e:	69ba      	ldr	r2, [r7, #24]
 80018a0:	0092      	lsls	r2, r2, #2
 80018a2:	58d2      	ldr	r2, [r2, r3]
 80018a4:	697b      	ldr	r3, [r7, #20]
 80018a6:	18d3      	adds	r3, r2, r3
 80018a8:	781b      	ldrb	r3, [r3, #0]
 80018aa:	1c5a      	adds	r2, r3, #1
 80018ac:	4b5a      	ldr	r3, [pc, #360]	; (8001a18 <MENU_USB+0x31c>)
 80018ae:	18d3      	adds	r3, r2, r3
 80018b0:	781b      	ldrb	r3, [r3, #0]
 80018b2:	001a      	movs	r2, r3
 80018b4:	2304      	movs	r3, #4
 80018b6:	4013      	ands	r3, r2
 80018b8:	d101      	bne.n	80018be <MENU_USB+0x1c2>
										result=0;
 80018ba:	2300      	movs	r3, #0
 80018bc:	627b      	str	r3, [r7, #36]	; 0x24
								for(int j=0;j<strlen(tokens[i]);j++){
 80018be:	697b      	ldr	r3, [r7, #20]
 80018c0:	3301      	adds	r3, #1
 80018c2:	617b      	str	r3, [r7, #20]
 80018c4:	4b52      	ldr	r3, [pc, #328]	; (8001a10 <MENU_USB+0x314>)
 80018c6:	69ba      	ldr	r2, [r7, #24]
 80018c8:	0092      	lsls	r2, r2, #2
 80018ca:	58d3      	ldr	r3, [r2, r3]
 80018cc:	0018      	movs	r0, r3
 80018ce:	f7fe fc25 	bl	800011c <strlen>
 80018d2:	0002      	movs	r2, r0
 80018d4:	697b      	ldr	r3, [r7, #20]
 80018d6:	429a      	cmp	r2, r3
 80018d8:	d8e0      	bhi.n	800189c <MENU_USB+0x1a0>
									}
								}
								if(result==0){
 80018da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d006      	beq.n	80018ee <MENU_USB+0x1f2>
							for(int i=1;i<MAX_TOKENS;i++){
 80018e0:	69bb      	ldr	r3, [r7, #24]
 80018e2:	3301      	adds	r3, #1
 80018e4:	61bb      	str	r3, [r7, #24]
 80018e6:	69bb      	ldr	r3, [r7, #24]
 80018e8:	2b03      	cmp	r3, #3
 80018ea:	ddd2      	ble.n	8001892 <MENU_USB+0x196>
 80018ec:	e000      	b.n	80018f0 <MENU_USB+0x1f4>
									break;
 80018ee:	46c0      	nop			; (mov r8, r8)
								}
							}
								if(result!=0){
 80018f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d064      	beq.n	80019c0 <MENU_USB+0x2c4>
									num=ASCII_TO_uint8_t(tokens[MAX_TOKENS-3]);
 80018f6:	4b46      	ldr	r3, [pc, #280]	; (8001a10 <MENU_USB+0x314>)
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	0018      	movs	r0, r3
 80018fc:	f000 f9c0 	bl	8001c80 <ASCII_TO_uint8_t>
 8001900:	0002      	movs	r2, r0
 8001902:	4b4f      	ldr	r3, [pc, #316]	; (8001a40 <MENU_USB+0x344>)
 8001904:	601a      	str	r2, [r3, #0]
									freq=ASCII_TO_uint8_t(tokens[MAX_TOKENS-2]);
 8001906:	4b42      	ldr	r3, [pc, #264]	; (8001a10 <MENU_USB+0x314>)
 8001908:	689b      	ldr	r3, [r3, #8]
 800190a:	0018      	movs	r0, r3
 800190c:	f000 f9b8 	bl	8001c80 <ASCII_TO_uint8_t>
 8001910:	0002      	movs	r2, r0
 8001912:	4b42      	ldr	r3, [pc, #264]	; (8001a1c <MENU_USB+0x320>)
 8001914:	601a      	str	r2, [r3, #0]
									duty_cycle=ASCII_TO_uint8_t(tokens[MAX_TOKENS-1]);
 8001916:	4b3e      	ldr	r3, [pc, #248]	; (8001a10 <MENU_USB+0x314>)
 8001918:	68db      	ldr	r3, [r3, #12]
 800191a:	0018      	movs	r0, r3
 800191c:	f000 f9b0 	bl	8001c80 <ASCII_TO_uint8_t>
 8001920:	0002      	movs	r2, r0
 8001922:	4b3f      	ldr	r3, [pc, #252]	; (8001a20 <MENU_USB+0x324>)
 8001924:	601a      	str	r2, [r3, #0]
									if(num==0 || freq==0 || duty_cycle==0 ){
 8001926:	4b46      	ldr	r3, [pc, #280]	; (8001a40 <MENU_USB+0x344>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d007      	beq.n	800193e <MENU_USB+0x242>
 800192e:	4b3b      	ldr	r3, [pc, #236]	; (8001a1c <MENU_USB+0x320>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d003      	beq.n	800193e <MENU_USB+0x242>
 8001936:	4b3a      	ldr	r3, [pc, #232]	; (8001a20 <MENU_USB+0x324>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d104      	bne.n	8001948 <MENU_USB+0x24c>
										printf(error_with_run);
 800193e:	4b39      	ldr	r3, [pc, #228]	; (8001a24 <MENU_USB+0x328>)
 8001940:	0018      	movs	r0, r3
 8001942:	f004 fa3d 	bl	8005dc0 <iprintf>
 8001946:	e03f      	b.n	80019c8 <MENU_USB+0x2cc>
									}
									else if(duty_cycle>=100){
 8001948:	4b35      	ldr	r3, [pc, #212]	; (8001a20 <MENU_USB+0x324>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	2b63      	cmp	r3, #99	; 0x63
 800194e:	d904      	bls.n	800195a <MENU_USB+0x25e>
										printf(error_with_duty_cycle);
 8001950:	4b35      	ldr	r3, [pc, #212]	; (8001a28 <MENU_USB+0x32c>)
 8001952:	0018      	movs	r0, r3
 8001954:	f004 fa34 	bl	8005dc0 <iprintf>
 8001958:	e036      	b.n	80019c8 <MENU_USB+0x2cc>
									}
									else{
										Period=(float)(1000/freq);
 800195a:	4b30      	ldr	r3, [pc, #192]	; (8001a1c <MENU_USB+0x320>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	0019      	movs	r1, r3
 8001960:	23fa      	movs	r3, #250	; 0xfa
 8001962:	0098      	lsls	r0, r3, #2
 8001964:	f7fe fbec 	bl	8000140 <__udivsi3>
 8001968:	0003      	movs	r3, r0
 800196a:	0018      	movs	r0, r3
 800196c:	f7ff f9ce 	bl	8000d0c <__aeabi_ui2f>
 8001970:	1c02      	adds	r2, r0, #0
 8001972:	4b2e      	ldr	r3, [pc, #184]	; (8001a2c <MENU_USB+0x330>)
 8001974:	601a      	str	r2, [r3, #0]
										Ton=(float)((Period*duty_cycle)/100);
 8001976:	4b2a      	ldr	r3, [pc, #168]	; (8001a20 <MENU_USB+0x324>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	0018      	movs	r0, r3
 800197c:	f7ff f9c6 	bl	8000d0c <__aeabi_ui2f>
 8001980:	1c02      	adds	r2, r0, #0
 8001982:	4b2a      	ldr	r3, [pc, #168]	; (8001a2c <MENU_USB+0x330>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	1c19      	adds	r1, r3, #0
 8001988:	1c10      	adds	r0, r2, #0
 800198a:	f7fe feb1 	bl	80006f0 <__aeabi_fmul>
 800198e:	1c03      	adds	r3, r0, #0
 8001990:	4927      	ldr	r1, [pc, #156]	; (8001a30 <MENU_USB+0x334>)
 8001992:	1c18      	adds	r0, r3, #0
 8001994:	f7fe fd92 	bl	80004bc <__aeabi_fdiv>
 8001998:	1c03      	adds	r3, r0, #0
 800199a:	1c1a      	adds	r2, r3, #0
 800199c:	4b25      	ldr	r3, [pc, #148]	; (8001a34 <MENU_USB+0x338>)
 800199e:	601a      	str	r2, [r3, #0]
										Toff=Period-Ton;
 80019a0:	4b22      	ldr	r3, [pc, #136]	; (8001a2c <MENU_USB+0x330>)
 80019a2:	681a      	ldr	r2, [r3, #0]
 80019a4:	4b23      	ldr	r3, [pc, #140]	; (8001a34 <MENU_USB+0x338>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	1c19      	adds	r1, r3, #0
 80019aa:	1c10      	adds	r0, r2, #0
 80019ac:	f7fe ffee 	bl	800098c <__aeabi_fsub>
 80019b0:	1c03      	adds	r3, r0, #0
 80019b2:	1c1a      	adds	r2, r3, #0
 80019b4:	4b20      	ldr	r3, [pc, #128]	; (8001a38 <MENU_USB+0x33c>)
 80019b6:	601a      	str	r2, [r3, #0]
										state=2;
 80019b8:	4b20      	ldr	r3, [pc, #128]	; (8001a3c <MENU_USB+0x340>)
 80019ba:	2202      	movs	r2, #2
 80019bc:	601a      	str	r2, [r3, #0]
 80019be:	e003      	b.n	80019c8 <MENU_USB+0x2cc>
									}
								}
								else{
									printf(error_with_run);
 80019c0:	4b18      	ldr	r3, [pc, #96]	; (8001a24 <MENU_USB+0x328>)
 80019c2:	0018      	movs	r0, r3
 80019c4:	f004 f9fc 	bl	8005dc0 <iprintf>
								}
						}
						for (int i = 0; i < sizeof(tokens) / sizeof(tokens[0]); i++) {
 80019c8:	2300      	movs	r3, #0
 80019ca:	613b      	str	r3, [r7, #16]
 80019cc:	e009      	b.n	80019e2 <MENU_USB+0x2e6>
							 free(tokens[i]);
 80019ce:	4b10      	ldr	r3, [pc, #64]	; (8001a10 <MENU_USB+0x314>)
 80019d0:	693a      	ldr	r2, [r7, #16]
 80019d2:	0092      	lsls	r2, r2, #2
 80019d4:	58d3      	ldr	r3, [r2, r3]
 80019d6:	0018      	movs	r0, r3
 80019d8:	f004 f882 	bl	8005ae0 <free>
						for (int i = 0; i < sizeof(tokens) / sizeof(tokens[0]); i++) {
 80019dc:	693b      	ldr	r3, [r7, #16]
 80019de:	3301      	adds	r3, #1
 80019e0:	613b      	str	r3, [r7, #16]
 80019e2:	693b      	ldr	r3, [r7, #16]
 80019e4:	2b03      	cmp	r3, #3
 80019e6:	d9f2      	bls.n	80019ce <MENU_USB+0x2d2>
 80019e8:	e0cf      	b.n	8001b8a <MENU_USB+0x48e>
						}
				}
				else if (strcmp(line_buffer, "stop") == 0){
 80019ea:	4a16      	ldr	r2, [pc, #88]	; (8001a44 <MENU_USB+0x348>)
 80019ec:	4b06      	ldr	r3, [pc, #24]	; (8001a08 <MENU_USB+0x30c>)
 80019ee:	0011      	movs	r1, r2
 80019f0:	0018      	movs	r0, r3
 80019f2:	f7fe fb89 	bl	8000108 <strcmp>
 80019f6:	1e03      	subs	r3, r0, #0
 80019f8:	d126      	bne.n	8001a48 <MENU_USB+0x34c>
					state=3;
 80019fa:	4b10      	ldr	r3, [pc, #64]	; (8001a3c <MENU_USB+0x340>)
 80019fc:	2203      	movs	r2, #3
 80019fe:	601a      	str	r2, [r3, #0]
 8001a00:	e0c3      	b.n	8001b8a <MENU_USB+0x48e>
 8001a02:	46c0      	nop			; (mov r8, r8)
 8001a04:	20000244 	.word	0x20000244
 8001a08:	200001e0 	.word	0x200001e0
 8001a0c:	08007000 	.word	0x08007000
 8001a10:	20000234 	.word	0x20000234
 8001a14:	08007004 	.word	0x08007004
 8001a18:	08007120 	.word	0x08007120
 8001a1c:	200001b0 	.word	0x200001b0
 8001a20:	200001b4 	.word	0x200001b4
 8001a24:	20000094 	.word	0x20000094
 8001a28:	200000e8 	.word	0x200000e8
 8001a2c:	200001dc 	.word	0x200001dc
 8001a30:	42c80000 	.word	0x42c80000
 8001a34:	200001d4 	.word	0x200001d4
 8001a38:	200001d8 	.word	0x200001d8
 8001a3c:	20000248 	.word	0x20000248
 8001a40:	200001ac 	.word	0x200001ac
 8001a44:	08007008 	.word	0x08007008
				}
				else if (strcmp(line_buffer, "cont") == 0){
 8001a48:	4a77      	ldr	r2, [pc, #476]	; (8001c28 <MENU_USB+0x52c>)
 8001a4a:	4b78      	ldr	r3, [pc, #480]	; (8001c2c <MENU_USB+0x530>)
 8001a4c:	0011      	movs	r1, r2
 8001a4e:	0018      	movs	r0, r3
 8001a50:	f7fe fb5a 	bl	8000108 <strcmp>
 8001a54:	1e03      	subs	r3, r0, #0
 8001a56:	d000      	beq.n	8001a5a <MENU_USB+0x35e>
 8001a58:	e08f      	b.n	8001b7a <MENU_USB+0x47e>
					if(flag==1){
 8001a5a:	4b75      	ldr	r3, [pc, #468]	; (8001c30 <MENU_USB+0x534>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	2b01      	cmp	r3, #1
 8001a60:	d14b      	bne.n	8001afa <MENU_USB+0x3fe>
                    	num=read_data(Addr_num);
 8001a62:	4b74      	ldr	r3, [pc, #464]	; (8001c34 <MENU_USB+0x538>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	0018      	movs	r0, r3
 8001a68:	f7ff fad1 	bl	800100e <read_data>
 8001a6c:	0002      	movs	r2, r0
 8001a6e:	4b72      	ldr	r3, [pc, #456]	; (8001c38 <MENU_USB+0x53c>)
 8001a70:	601a      	str	r2, [r3, #0]
                    	if(num!=0){
 8001a72:	4b71      	ldr	r3, [pc, #452]	; (8001c38 <MENU_USB+0x53c>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d038      	beq.n	8001aec <MENU_USB+0x3f0>
							total_pulses=read_data(Addr_total_pulse);
 8001a7a:	4b70      	ldr	r3, [pc, #448]	; (8001c3c <MENU_USB+0x540>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	0018      	movs	r0, r3
 8001a80:	f7ff fac5 	bl	800100e <read_data>
 8001a84:	0002      	movs	r2, r0
 8001a86:	4b6e      	ldr	r3, [pc, #440]	; (8001c40 <MENU_USB+0x544>)
 8001a88:	601a      	str	r2, [r3, #0]
							Ton=read_data(Addr_Ton);
 8001a8a:	4b6e      	ldr	r3, [pc, #440]	; (8001c44 <MENU_USB+0x548>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	0018      	movs	r0, r3
 8001a90:	f7ff fabd 	bl	800100e <read_data>
 8001a94:	0003      	movs	r3, r0
 8001a96:	0018      	movs	r0, r3
 8001a98:	f7ff f938 	bl	8000d0c <__aeabi_ui2f>
 8001a9c:	1c02      	adds	r2, r0, #0
 8001a9e:	4b6a      	ldr	r3, [pc, #424]	; (8001c48 <MENU_USB+0x54c>)
 8001aa0:	601a      	str	r2, [r3, #0]
							Toff=read_data(Addr_Toff);
 8001aa2:	4b6a      	ldr	r3, [pc, #424]	; (8001c4c <MENU_USB+0x550>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	0018      	movs	r0, r3
 8001aa8:	f7ff fab1 	bl	800100e <read_data>
 8001aac:	0003      	movs	r3, r0
 8001aae:	0018      	movs	r0, r3
 8001ab0:	f7ff f92c 	bl	8000d0c <__aeabi_ui2f>
 8001ab4:	1c02      	adds	r2, r0, #0
 8001ab6:	4b66      	ldr	r3, [pc, #408]	; (8001c50 <MENU_USB+0x554>)
 8001ab8:	601a      	str	r2, [r3, #0]
							duty_cycle=read_data(Addr_duty_cycle);
 8001aba:	4b66      	ldr	r3, [pc, #408]	; (8001c54 <MENU_USB+0x558>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	0018      	movs	r0, r3
 8001ac0:	f7ff faa5 	bl	800100e <read_data>
 8001ac4:	0002      	movs	r2, r0
 8001ac6:	4b64      	ldr	r3, [pc, #400]	; (8001c58 <MENU_USB+0x55c>)
 8001ac8:	601a      	str	r2, [r3, #0]
							freq=read_data(Addr_freq);
 8001aca:	4b64      	ldr	r3, [pc, #400]	; (8001c5c <MENU_USB+0x560>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	0018      	movs	r0, r3
 8001ad0:	f7ff fa9d 	bl	800100e <read_data>
 8001ad4:	0002      	movs	r2, r0
 8001ad6:	4b62      	ldr	r3, [pc, #392]	; (8001c60 <MENU_USB+0x564>)
 8001ad8:	601a      	str	r2, [r3, #0]
							erase_data(Addr_total_pulse);
 8001ada:	4b58      	ldr	r3, [pc, #352]	; (8001c3c <MENU_USB+0x540>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	0018      	movs	r0, r3
 8001ae0:	f7ff faa1 	bl	8001026 <erase_data>
							state=2;
 8001ae4:	4b5f      	ldr	r3, [pc, #380]	; (8001c64 <MENU_USB+0x568>)
 8001ae6:	2202      	movs	r2, #2
 8001ae8:	601a      	str	r2, [r3, #0]
 8001aea:	e002      	b.n	8001af2 <MENU_USB+0x3f6>
                    	}
                    	else{
                    		state=0;
 8001aec:	4b5d      	ldr	r3, [pc, #372]	; (8001c64 <MENU_USB+0x568>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	601a      	str	r2, [r3, #0]
                    	}
                        flag=0;
 8001af2:	4b4f      	ldr	r3, [pc, #316]	; (8001c30 <MENU_USB+0x534>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	601a      	str	r2, [r3, #0]
 8001af8:	e047      	b.n	8001b8a <MENU_USB+0x48e>
					}
					else if(flag==2){
 8001afa:	4b4d      	ldr	r3, [pc, #308]	; (8001c30 <MENU_USB+0x534>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	2b02      	cmp	r3, #2
 8001b00:	d143      	bne.n	8001b8a <MENU_USB+0x48e>
                    	total_pulses=read_data(Addr_total_pulse);
 8001b02:	4b4e      	ldr	r3, [pc, #312]	; (8001c3c <MENU_USB+0x540>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	0018      	movs	r0, r3
 8001b08:	f7ff fa81 	bl	800100e <read_data>
 8001b0c:	0002      	movs	r2, r0
 8001b0e:	4b4c      	ldr	r3, [pc, #304]	; (8001c40 <MENU_USB+0x544>)
 8001b10:	601a      	str	r2, [r3, #0]
                        Ton=read_data(Addr_Ton);
 8001b12:	4b4c      	ldr	r3, [pc, #304]	; (8001c44 <MENU_USB+0x548>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	0018      	movs	r0, r3
 8001b18:	f7ff fa79 	bl	800100e <read_data>
 8001b1c:	0003      	movs	r3, r0
 8001b1e:	0018      	movs	r0, r3
 8001b20:	f7ff f8f4 	bl	8000d0c <__aeabi_ui2f>
 8001b24:	1c02      	adds	r2, r0, #0
 8001b26:	4b48      	ldr	r3, [pc, #288]	; (8001c48 <MENU_USB+0x54c>)
 8001b28:	601a      	str	r2, [r3, #0]
                        Toff=read_data(Addr_Toff);
 8001b2a:	4b48      	ldr	r3, [pc, #288]	; (8001c4c <MENU_USB+0x550>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	0018      	movs	r0, r3
 8001b30:	f7ff fa6d 	bl	800100e <read_data>
 8001b34:	0003      	movs	r3, r0
 8001b36:	0018      	movs	r0, r3
 8001b38:	f7ff f8e8 	bl	8000d0c <__aeabi_ui2f>
 8001b3c:	1c02      	adds	r2, r0, #0
 8001b3e:	4b44      	ldr	r3, [pc, #272]	; (8001c50 <MENU_USB+0x554>)
 8001b40:	601a      	str	r2, [r3, #0]
                        duty_cycle=read_data(Addr_duty_cycle);
 8001b42:	4b44      	ldr	r3, [pc, #272]	; (8001c54 <MENU_USB+0x558>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	0018      	movs	r0, r3
 8001b48:	f7ff fa61 	bl	800100e <read_data>
 8001b4c:	0002      	movs	r2, r0
 8001b4e:	4b42      	ldr	r3, [pc, #264]	; (8001c58 <MENU_USB+0x55c>)
 8001b50:	601a      	str	r2, [r3, #0]
                        freq=read_data(Addr_freq);
 8001b52:	4b42      	ldr	r3, [pc, #264]	; (8001c5c <MENU_USB+0x560>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	0018      	movs	r0, r3
 8001b58:	f7ff fa59 	bl	800100e <read_data>
 8001b5c:	0002      	movs	r2, r0
 8001b5e:	4b40      	ldr	r3, [pc, #256]	; (8001c60 <MENU_USB+0x564>)
 8001b60:	601a      	str	r2, [r3, #0]
                        erase_data(Addr_total_pulse);
 8001b62:	4b36      	ldr	r3, [pc, #216]	; (8001c3c <MENU_USB+0x540>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	0018      	movs	r0, r3
 8001b68:	f7ff fa5d 	bl	8001026 <erase_data>
                        state=1;
 8001b6c:	4b3d      	ldr	r3, [pc, #244]	; (8001c64 <MENU_USB+0x568>)
 8001b6e:	2201      	movs	r2, #1
 8001b70:	601a      	str	r2, [r3, #0]
                        flag=0;
 8001b72:	4b2f      	ldr	r3, [pc, #188]	; (8001c30 <MENU_USB+0x534>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	601a      	str	r2, [r3, #0]
 8001b78:	e007      	b.n	8001b8a <MENU_USB+0x48e>
					}
				}
				else {
					printf(error);
 8001b7a:	4b3b      	ldr	r3, [pc, #236]	; (8001c68 <MENU_USB+0x56c>)
 8001b7c:	0018      	movs	r0, r3
 8001b7e:	f004 f91f 	bl	8005dc0 <iprintf>
					printf( menu);
 8001b82:	4b3a      	ldr	r3, [pc, #232]	; (8001c6c <MENU_USB+0x570>)
 8001b84:	0018      	movs	r0, r3
 8001b86:	f004 f91b 	bl	8005dc0 <iprintf>
				}
				printf("\n\r");
 8001b8a:	4b39      	ldr	r3, [pc, #228]	; (8001c70 <MENU_USB+0x574>)
 8001b8c:	0018      	movs	r0, r3
 8001b8e:	f004 f917 	bl	8005dc0 <iprintf>
				for(int i;i<line_length;i++){
 8001b92:	e007      	b.n	8001ba4 <MENU_USB+0x4a8>
					line_buffer[i]='\0';
 8001b94:	4a25      	ldr	r2, [pc, #148]	; (8001c2c <MENU_USB+0x530>)
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	18d3      	adds	r3, r2, r3
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	701a      	strb	r2, [r3, #0]
				for(int i;i<line_length;i++){
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	3301      	adds	r3, #1
 8001ba2:	60fb      	str	r3, [r7, #12]
 8001ba4:	68fa      	ldr	r2, [r7, #12]
 8001ba6:	4b33      	ldr	r3, [pc, #204]	; (8001c74 <MENU_USB+0x578>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	429a      	cmp	r2, r3
 8001bac:	d3f2      	bcc.n	8001b94 <MENU_USB+0x498>
					}
				line_length = 0;
 8001bae:	4b31      	ldr	r3, [pc, #196]	; (8001c74 <MENU_USB+0x578>)
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	601a      	str	r2, [r3, #0]
			if (line_length > 0) {
 8001bb4:	e033      	b.n	8001c1e <MENU_USB+0x522>
			}
			else{
				printf(error);
 8001bb6:	4b2c      	ldr	r3, [pc, #176]	; (8001c68 <MENU_USB+0x56c>)
 8001bb8:	0018      	movs	r0, r3
 8001bba:	f004 f901 	bl	8005dc0 <iprintf>
				printf(menu);
 8001bbe:	4b2b      	ldr	r3, [pc, #172]	; (8001c6c <MENU_USB+0x570>)
 8001bc0:	0018      	movs	r0, r3
 8001bc2:	f004 f8fd 	bl	8005dc0 <iprintf>
			if (line_length > 0) {
 8001bc6:	e02a      	b.n	8001c1e <MENU_USB+0x522>
			}
		}
 		else if (value == '\177') {
 8001bc8:	1dfb      	adds	r3, r7, #7
 8001bca:	781b      	ldrb	r3, [r3, #0]
 8001bcc:	2b7f      	cmp	r3, #127	; 0x7f
 8001bce:	d10d      	bne.n	8001bec <MENU_USB+0x4f0>
 		            if (line_length > 0) {
 8001bd0:	4b28      	ldr	r3, [pc, #160]	; (8001c74 <MENU_USB+0x578>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d022      	beq.n	8001c1e <MENU_USB+0x522>
 		            	line_length--;
 8001bd8:	4b26      	ldr	r3, [pc, #152]	; (8001c74 <MENU_USB+0x578>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	1e5a      	subs	r2, r3, #1
 8001bde:	4b25      	ldr	r3, [pc, #148]	; (8001c74 <MENU_USB+0x578>)
 8001be0:	601a      	str	r2, [r3, #0]
 		            	printf("\177 \177");
 8001be2:	4b25      	ldr	r3, [pc, #148]	; (8001c78 <MENU_USB+0x57c>)
 8001be4:	0018      	movs	r0, r3
 8001be6:	f004 f8eb 	bl	8005dc0 <iprintf>
				printf(error);
				printf(error_with_lenght);
			}
			line_buffer[line_length++] = value;
		}
}
 8001bea:	e018      	b.n	8001c1e <MENU_USB+0x522>
			if (line_length >= LINE_MAX_LENGTH) {
 8001bec:	4b21      	ldr	r3, [pc, #132]	; (8001c74 <MENU_USB+0x578>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	2b4f      	cmp	r3, #79	; 0x4f
 8001bf2:	d90a      	bls.n	8001c0a <MENU_USB+0x50e>
				line_length = 0;
 8001bf4:	4b1f      	ldr	r3, [pc, #124]	; (8001c74 <MENU_USB+0x578>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	601a      	str	r2, [r3, #0]
				printf(error);
 8001bfa:	4b1b      	ldr	r3, [pc, #108]	; (8001c68 <MENU_USB+0x56c>)
 8001bfc:	0018      	movs	r0, r3
 8001bfe:	f004 f8df 	bl	8005dc0 <iprintf>
				printf(error_with_lenght);
 8001c02:	4b1e      	ldr	r3, [pc, #120]	; (8001c7c <MENU_USB+0x580>)
 8001c04:	0018      	movs	r0, r3
 8001c06:	f004 f8db 	bl	8005dc0 <iprintf>
			line_buffer[line_length++] = value;
 8001c0a:	4b1a      	ldr	r3, [pc, #104]	; (8001c74 <MENU_USB+0x578>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	1c59      	adds	r1, r3, #1
 8001c10:	4a18      	ldr	r2, [pc, #96]	; (8001c74 <MENU_USB+0x578>)
 8001c12:	6011      	str	r1, [r2, #0]
 8001c14:	4a05      	ldr	r2, [pc, #20]	; (8001c2c <MENU_USB+0x530>)
 8001c16:	1df9      	adds	r1, r7, #7
 8001c18:	7809      	ldrb	r1, [r1, #0]
 8001c1a:	54d1      	strb	r1, [r2, r3]
}
 8001c1c:	e7ff      	b.n	8001c1e <MENU_USB+0x522>
 8001c1e:	46c0      	nop			; (mov r8, r8)
 8001c20:	46bd      	mov	sp, r7
 8001c22:	b00a      	add	sp, #40	; 0x28
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	46c0      	nop			; (mov r8, r8)
 8001c28:	08007010 	.word	0x08007010
 8001c2c:	200001e0 	.word	0x200001e0
 8001c30:	200001a8 	.word	0x200001a8
 8001c34:	20000000 	.word	0x20000000
 8001c38:	200001ac 	.word	0x200001ac
 8001c3c:	20000004 	.word	0x20000004
 8001c40:	200001d0 	.word	0x200001d0
 8001c44:	20000008 	.word	0x20000008
 8001c48:	200001d4 	.word	0x200001d4
 8001c4c:	2000000c 	.word	0x2000000c
 8001c50:	200001d8 	.word	0x200001d8
 8001c54:	20000014 	.word	0x20000014
 8001c58:	200001b4 	.word	0x200001b4
 8001c5c:	20000010 	.word	0x20000010
 8001c60:	200001b0 	.word	0x200001b0
 8001c64:	20000248 	.word	0x20000248
 8001c68:	20000084 	.word	0x20000084
 8001c6c:	20000018 	.word	0x20000018
 8001c70:	08006fb8 	.word	0x08006fb8
 8001c74:	20000244 	.word	0x20000244
 8001c78:	08007018 	.word	0x08007018
 8001c7c:	2000010c 	.word	0x2000010c

08001c80 <ASCII_TO_uint8_t>:

uint32_t ASCII_TO_uint8_t(const char *table){
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b086      	sub	sp, #24
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
	uint32_t result = 0;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	617b      	str	r3, [r7, #20]
	uint32_t numeric_value=0;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	60fb      	str	r3, [r7, #12]
    int size = sizeof(table) / sizeof(char);
 8001c90:	2304      	movs	r3, #4
 8001c92:	60bb      	str	r3, [r7, #8]
    for (int i = 0; i < size; i++) {
 8001c94:	2300      	movs	r3, #0
 8001c96:	613b      	str	r3, [r7, #16]
 8001c98:	e01d      	b.n	8001cd6 <ASCII_TO_uint8_t+0x56>
    	if(table[i]==' ' || table[i]=='\0'){
 8001c9a:	693b      	ldr	r3, [r7, #16]
 8001c9c:	687a      	ldr	r2, [r7, #4]
 8001c9e:	18d3      	adds	r3, r2, r3
 8001ca0:	781b      	ldrb	r3, [r3, #0]
 8001ca2:	2b20      	cmp	r3, #32
 8001ca4:	d01b      	beq.n	8001cde <ASCII_TO_uint8_t+0x5e>
 8001ca6:	693b      	ldr	r3, [r7, #16]
 8001ca8:	687a      	ldr	r2, [r7, #4]
 8001caa:	18d3      	adds	r3, r2, r3
 8001cac:	781b      	ldrb	r3, [r3, #0]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d015      	beq.n	8001cde <ASCII_TO_uint8_t+0x5e>
    		break;
    	}
    	else{
        	numeric_value = table[i] - '0';
 8001cb2:	693b      	ldr	r3, [r7, #16]
 8001cb4:	687a      	ldr	r2, [r7, #4]
 8001cb6:	18d3      	adds	r3, r2, r3
 8001cb8:	781b      	ldrb	r3, [r3, #0]
 8001cba:	3b30      	subs	r3, #48	; 0x30
 8001cbc:	60fb      	str	r3, [r7, #12]
            result = result * 10 + numeric_value;
 8001cbe:	697a      	ldr	r2, [r7, #20]
 8001cc0:	0013      	movs	r3, r2
 8001cc2:	009b      	lsls	r3, r3, #2
 8001cc4:	189b      	adds	r3, r3, r2
 8001cc6:	005b      	lsls	r3, r3, #1
 8001cc8:	001a      	movs	r2, r3
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	189b      	adds	r3, r3, r2
 8001cce:	617b      	str	r3, [r7, #20]
    for (int i = 0; i < size; i++) {
 8001cd0:	693b      	ldr	r3, [r7, #16]
 8001cd2:	3301      	adds	r3, #1
 8001cd4:	613b      	str	r3, [r7, #16]
 8001cd6:	693a      	ldr	r2, [r7, #16]
 8001cd8:	68bb      	ldr	r3, [r7, #8]
 8001cda:	429a      	cmp	r2, r3
 8001cdc:	dbdd      	blt.n	8001c9a <ASCII_TO_uint8_t+0x1a>
    	}
    }
    return result;
 8001cde:	697b      	ldr	r3, [r7, #20]
}
 8001ce0:	0018      	movs	r0, r3
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	b006      	add	sp, #24
 8001ce6:	bd80      	pop	{r7, pc}

08001ce8 <splitString>:

void splitString(const char* input_string, char** tokens) {
 8001ce8:	b590      	push	{r4, r7, lr}
 8001cea:	b087      	sub	sp, #28
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
 8001cf0:	6039      	str	r1, [r7, #0]
	const char delimiters[] = " \r\n";
 8001cf2:	2408      	movs	r4, #8
 8001cf4:	193b      	adds	r3, r7, r4
 8001cf6:	4a1b      	ldr	r2, [pc, #108]	; (8001d64 <splitString+0x7c>)
 8001cf8:	601a      	str	r2, [r3, #0]
    char* copy_of_input = strdup(input_string);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	0018      	movs	r0, r3
 8001cfe:	f004 f8e3 	bl	8005ec8 <strdup>
 8001d02:	0003      	movs	r3, r0
 8001d04:	60fb      	str	r3, [r7, #12]
    char* token = strtok(copy_of_input, delimiters);
 8001d06:	193a      	adds	r2, r7, r4
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	0011      	movs	r1, r2
 8001d0c:	0018      	movs	r0, r3
 8001d0e:	f004 f923 	bl	8005f58 <strtok>
 8001d12:	0003      	movs	r3, r0
 8001d14:	617b      	str	r3, [r7, #20]

    int token_count = 0;
 8001d16:	2300      	movs	r3, #0
 8001d18:	613b      	str	r3, [r7, #16]
    while (token != NULL && token_count < MAX_TOKENS) {
 8001d1a:	e014      	b.n	8001d46 <splitString+0x5e>
        tokens[token_count] = strdup(token);
 8001d1c:	693b      	ldr	r3, [r7, #16]
 8001d1e:	009b      	lsls	r3, r3, #2
 8001d20:	683a      	ldr	r2, [r7, #0]
 8001d22:	18d4      	adds	r4, r2, r3
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	0018      	movs	r0, r3
 8001d28:	f004 f8ce 	bl	8005ec8 <strdup>
 8001d2c:	0003      	movs	r3, r0
 8001d2e:	6023      	str	r3, [r4, #0]
        token = strtok(NULL, delimiters);
 8001d30:	2308      	movs	r3, #8
 8001d32:	18fb      	adds	r3, r7, r3
 8001d34:	0019      	movs	r1, r3
 8001d36:	2000      	movs	r0, #0
 8001d38:	f004 f90e 	bl	8005f58 <strtok>
 8001d3c:	0003      	movs	r3, r0
 8001d3e:	617b      	str	r3, [r7, #20]
        token_count++;
 8001d40:	693b      	ldr	r3, [r7, #16]
 8001d42:	3301      	adds	r3, #1
 8001d44:	613b      	str	r3, [r7, #16]
    while (token != NULL && token_count < MAX_TOKENS) {
 8001d46:	697b      	ldr	r3, [r7, #20]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d002      	beq.n	8001d52 <splitString+0x6a>
 8001d4c:	693b      	ldr	r3, [r7, #16]
 8001d4e:	2b03      	cmp	r3, #3
 8001d50:	dde4      	ble.n	8001d1c <splitString+0x34>
    }
    free(copy_of_input);
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	0018      	movs	r0, r3
 8001d56:	f003 fec3 	bl	8005ae0 <free>
}
 8001d5a:	46c0      	nop			; (mov r8, r8)
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	b007      	add	sp, #28
 8001d60:	bd90      	pop	{r4, r7, pc}
 8001d62:	46c0      	nop			; (mov r8, r8)
 8001d64:	000a0d20 	.word	0x000a0d20

08001d68 <TIM6_DAC_IRQHandler>:
void TIM6_IRQHandler(void){
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	af00      	add	r7, sp, #0
	TIM6->SR &=~TIM_SR_UIF;
 8001d6c:	4b07      	ldr	r3, [pc, #28]	; (8001d8c <TIM6_DAC_IRQHandler+0x24>)
 8001d6e:	691a      	ldr	r2, [r3, #16]
 8001d70:	4b06      	ldr	r3, [pc, #24]	; (8001d8c <TIM6_DAC_IRQHandler+0x24>)
 8001d72:	2101      	movs	r1, #1
 8001d74:	438a      	bics	r2, r1
 8001d76:	611a      	str	r2, [r3, #16]
	if(pvd!=1){
 8001d78:	4b05      	ldr	r3, [pc, #20]	; (8001d90 <TIM6_DAC_IRQHandler+0x28>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	2b01      	cmp	r3, #1
 8001d7e:	d001      	beq.n	8001d84 <TIM6_DAC_IRQHandler+0x1c>
		TIM6_Callback();
 8001d80:	f7ff f9fc 	bl	800117c <TIM6_Callback>
	}
}
 8001d84:	46c0      	nop			; (mov r8, r8)
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	46c0      	nop			; (mov r8, r8)
 8001d8c:	40001000 	.word	0x40001000
 8001d90:	2000024c 	.word	0x2000024c

08001d94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d98:	b672      	cpsid	i
}
 8001d9a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d9c:	e7fe      	b.n	8001d9c <Error_Handler+0x8>
	...

08001da0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b082      	sub	sp, #8
 8001da4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */
  PWR_PVDTypeDef sConfigPVD = {0};
 8001da6:	003b      	movs	r3, r7
 8001da8:	0018      	movs	r0, r3
 8001daa:	2308      	movs	r3, #8
 8001dac:	001a      	movs	r2, r3
 8001dae:	2100      	movs	r1, #0
 8001db0:	f004 f882 	bl	8005eb8 <memset>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001db4:	4b12      	ldr	r3, [pc, #72]	; (8001e00 <HAL_MspInit+0x60>)
 8001db6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001db8:	4b11      	ldr	r3, [pc, #68]	; (8001e00 <HAL_MspInit+0x60>)
 8001dba:	2101      	movs	r1, #1
 8001dbc:	430a      	orrs	r2, r1
 8001dbe:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8001dc0:	4b0f      	ldr	r3, [pc, #60]	; (8001e00 <HAL_MspInit+0x60>)
 8001dc2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001dc4:	4b0e      	ldr	r3, [pc, #56]	; (8001e00 <HAL_MspInit+0x60>)
 8001dc6:	2180      	movs	r1, #128	; 0x80
 8001dc8:	0549      	lsls	r1, r1, #21
 8001dca:	430a      	orrs	r2, r1
 8001dcc:	639a      	str	r2, [r3, #56]	; 0x38

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* PVD_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_IRQn, 1, 0);
 8001dce:	2200      	movs	r2, #0
 8001dd0:	2101      	movs	r1, #1
 8001dd2:	2001      	movs	r0, #1
 8001dd4:	f000 fb94 	bl	8002500 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_IRQn);
 8001dd8:	2001      	movs	r0, #1
 8001dda:	f000 fba6 	bl	800252a <HAL_NVIC_EnableIRQ>

  /** PVD Configuration
  */
  sConfigPVD.PVDLevel = PWR_PVDLEVEL_6;
 8001dde:	003b      	movs	r3, r7
 8001de0:	22c0      	movs	r2, #192	; 0xc0
 8001de2:	601a      	str	r2, [r3, #0]
  sConfigPVD.Mode = PWR_PVD_MODE_IT_RISING;
 8001de4:	003b      	movs	r3, r7
 8001de6:	4a07      	ldr	r2, [pc, #28]	; (8001e04 <HAL_MspInit+0x64>)
 8001de8:	605a      	str	r2, [r3, #4]
  HAL_PWR_ConfigPVD(&sConfigPVD);
 8001dea:	003b      	movs	r3, r7
 8001dec:	0018      	movs	r0, r3
 8001dee:	f000 fff9 	bl	8002de4 <HAL_PWR_ConfigPVD>

  /** Enable the PVD Output
  */
  HAL_PWR_EnablePVD();
 8001df2:	f001 f859 	bl	8002ea8 <HAL_PWR_EnablePVD>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001df6:	46c0      	nop			; (mov r8, r8)
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	b002      	add	sp, #8
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	46c0      	nop			; (mov r8, r8)
 8001e00:	40021000 	.word	0x40021000
 8001e04:	00010001 	.word	0x00010001

08001e08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e0c:	e7fe      	b.n	8001e0c <NMI_Handler+0x4>

08001e0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e0e:	b580      	push	{r7, lr}
 8001e10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e12:	e7fe      	b.n	8001e12 <HardFault_Handler+0x4>

08001e14 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001e18:	46c0      	nop			; (mov r8, r8)
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}

08001e1e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e1e:	b580      	push	{r7, lr}
 8001e20:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e22:	46c0      	nop			; (mov r8, r8)
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd80      	pop	{r7, pc}

08001e28 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e2c:	f000 fa7c 	bl	8002328 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e30:	46c0      	nop			; (mov r8, r8)
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}

08001e36 <PVD_IRQHandler>:

/**
  * @brief This function handles PVD interrupt through EXTI line 16.
  */
void PVD_IRQHandler(void)
{
 8001e36:	b580      	push	{r7, lr}
 8001e38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_IRQn 0 */

  /* USER CODE END PVD_IRQn 0 */
  HAL_PWR_PVD_IRQHandler();
 8001e3a:	f001 f843 	bl	8002ec4 <HAL_PWR_PVD_IRQHandler>
  /* USER CODE BEGIN PVD_IRQn 1 */

  /* USER CODE END PVD_IRQn 1 */
}
 8001e3e:	46c0      	nop			; (mov r8, r8)
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bd80      	pop	{r7, pc}

08001e44 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001e48:	4b03      	ldr	r3, [pc, #12]	; (8001e58 <USART2_IRQHandler+0x14>)
 8001e4a:	0018      	movs	r0, r3
 8001e4c:	f002 fba0 	bl	8004590 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001e50:	46c0      	nop			; (mov r8, r8)
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}
 8001e56:	46c0      	nop			; (mov r8, r8)
 8001e58:	20000294 	.word	0x20000294

08001e5c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	af00      	add	r7, sp, #0
  return 1;
 8001e60:	2301      	movs	r3, #1
}
 8001e62:	0018      	movs	r0, r3
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bd80      	pop	{r7, pc}

08001e68 <_kill>:

int _kill(int pid, int sig)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b082      	sub	sp, #8
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
 8001e70:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001e72:	f004 f935 	bl	80060e0 <__errno>
 8001e76:	0003      	movs	r3, r0
 8001e78:	2216      	movs	r2, #22
 8001e7a:	601a      	str	r2, [r3, #0]
  return -1;
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	425b      	negs	r3, r3
}
 8001e80:	0018      	movs	r0, r3
 8001e82:	46bd      	mov	sp, r7
 8001e84:	b002      	add	sp, #8
 8001e86:	bd80      	pop	{r7, pc}

08001e88 <_exit>:

void _exit (int status)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b082      	sub	sp, #8
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001e90:	2301      	movs	r3, #1
 8001e92:	425a      	negs	r2, r3
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	0011      	movs	r1, r2
 8001e98:	0018      	movs	r0, r3
 8001e9a:	f7ff ffe5 	bl	8001e68 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001e9e:	e7fe      	b.n	8001e9e <_exit+0x16>

08001ea0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b086      	sub	sp, #24
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	60f8      	str	r0, [r7, #12]
 8001ea8:	60b9      	str	r1, [r7, #8]
 8001eaa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001eac:	2300      	movs	r3, #0
 8001eae:	617b      	str	r3, [r7, #20]
 8001eb0:	e00a      	b.n	8001ec8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001eb2:	e000      	b.n	8001eb6 <_read+0x16>
 8001eb4:	bf00      	nop
 8001eb6:	0001      	movs	r1, r0
 8001eb8:	68bb      	ldr	r3, [r7, #8]
 8001eba:	1c5a      	adds	r2, r3, #1
 8001ebc:	60ba      	str	r2, [r7, #8]
 8001ebe:	b2ca      	uxtb	r2, r1
 8001ec0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ec2:	697b      	ldr	r3, [r7, #20]
 8001ec4:	3301      	adds	r3, #1
 8001ec6:	617b      	str	r3, [r7, #20]
 8001ec8:	697a      	ldr	r2, [r7, #20]
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	429a      	cmp	r2, r3
 8001ece:	dbf0      	blt.n	8001eb2 <_read+0x12>
  }

  return len;
 8001ed0:	687b      	ldr	r3, [r7, #4]
}
 8001ed2:	0018      	movs	r0, r3
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	b006      	add	sp, #24
 8001ed8:	bd80      	pop	{r7, pc}

08001eda <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001eda:	b580      	push	{r7, lr}
 8001edc:	b086      	sub	sp, #24
 8001ede:	af00      	add	r7, sp, #0
 8001ee0:	60f8      	str	r0, [r7, #12]
 8001ee2:	60b9      	str	r1, [r7, #8]
 8001ee4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	617b      	str	r3, [r7, #20]
 8001eea:	e009      	b.n	8001f00 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001eec:	68bb      	ldr	r3, [r7, #8]
 8001eee:	1c5a      	adds	r2, r3, #1
 8001ef0:	60ba      	str	r2, [r7, #8]
 8001ef2:	781b      	ldrb	r3, [r3, #0]
 8001ef4:	0018      	movs	r0, r3
 8001ef6:	f7ff f8e5 	bl	80010c4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001efa:	697b      	ldr	r3, [r7, #20]
 8001efc:	3301      	adds	r3, #1
 8001efe:	617b      	str	r3, [r7, #20]
 8001f00:	697a      	ldr	r2, [r7, #20]
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	429a      	cmp	r2, r3
 8001f06:	dbf1      	blt.n	8001eec <_write+0x12>
  }
  return len;
 8001f08:	687b      	ldr	r3, [r7, #4]
}
 8001f0a:	0018      	movs	r0, r3
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	b006      	add	sp, #24
 8001f10:	bd80      	pop	{r7, pc}

08001f12 <_close>:

int _close(int file)
{
 8001f12:	b580      	push	{r7, lr}
 8001f14:	b082      	sub	sp, #8
 8001f16:	af00      	add	r7, sp, #0
 8001f18:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	425b      	negs	r3, r3
}
 8001f1e:	0018      	movs	r0, r3
 8001f20:	46bd      	mov	sp, r7
 8001f22:	b002      	add	sp, #8
 8001f24:	bd80      	pop	{r7, pc}

08001f26 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f26:	b580      	push	{r7, lr}
 8001f28:	b082      	sub	sp, #8
 8001f2a:	af00      	add	r7, sp, #0
 8001f2c:	6078      	str	r0, [r7, #4]
 8001f2e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	2280      	movs	r2, #128	; 0x80
 8001f34:	0192      	lsls	r2, r2, #6
 8001f36:	605a      	str	r2, [r3, #4]
  return 0;
 8001f38:	2300      	movs	r3, #0
}
 8001f3a:	0018      	movs	r0, r3
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	b002      	add	sp, #8
 8001f40:	bd80      	pop	{r7, pc}

08001f42 <_isatty>:

int _isatty(int file)
{
 8001f42:	b580      	push	{r7, lr}
 8001f44:	b082      	sub	sp, #8
 8001f46:	af00      	add	r7, sp, #0
 8001f48:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001f4a:	2301      	movs	r3, #1
}
 8001f4c:	0018      	movs	r0, r3
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	b002      	add	sp, #8
 8001f52:	bd80      	pop	{r7, pc}

08001f54 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b084      	sub	sp, #16
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	60f8      	str	r0, [r7, #12]
 8001f5c:	60b9      	str	r1, [r7, #8]
 8001f5e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001f60:	2300      	movs	r3, #0
}
 8001f62:	0018      	movs	r0, r3
 8001f64:	46bd      	mov	sp, r7
 8001f66:	b004      	add	sp, #16
 8001f68:	bd80      	pop	{r7, pc}
	...

08001f6c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b086      	sub	sp, #24
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f74:	4a14      	ldr	r2, [pc, #80]	; (8001fc8 <_sbrk+0x5c>)
 8001f76:	4b15      	ldr	r3, [pc, #84]	; (8001fcc <_sbrk+0x60>)
 8001f78:	1ad3      	subs	r3, r2, r3
 8001f7a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f7c:	697b      	ldr	r3, [r7, #20]
 8001f7e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f80:	4b13      	ldr	r3, [pc, #76]	; (8001fd0 <_sbrk+0x64>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d102      	bne.n	8001f8e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f88:	4b11      	ldr	r3, [pc, #68]	; (8001fd0 <_sbrk+0x64>)
 8001f8a:	4a12      	ldr	r2, [pc, #72]	; (8001fd4 <_sbrk+0x68>)
 8001f8c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f8e:	4b10      	ldr	r3, [pc, #64]	; (8001fd0 <_sbrk+0x64>)
 8001f90:	681a      	ldr	r2, [r3, #0]
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	18d3      	adds	r3, r2, r3
 8001f96:	693a      	ldr	r2, [r7, #16]
 8001f98:	429a      	cmp	r2, r3
 8001f9a:	d207      	bcs.n	8001fac <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f9c:	f004 f8a0 	bl	80060e0 <__errno>
 8001fa0:	0003      	movs	r3, r0
 8001fa2:	220c      	movs	r2, #12
 8001fa4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	425b      	negs	r3, r3
 8001faa:	e009      	b.n	8001fc0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001fac:	4b08      	ldr	r3, [pc, #32]	; (8001fd0 <_sbrk+0x64>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001fb2:	4b07      	ldr	r3, [pc, #28]	; (8001fd0 <_sbrk+0x64>)
 8001fb4:	681a      	ldr	r2, [r3, #0]
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	18d2      	adds	r2, r2, r3
 8001fba:	4b05      	ldr	r3, [pc, #20]	; (8001fd0 <_sbrk+0x64>)
 8001fbc:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
}
 8001fc0:	0018      	movs	r0, r3
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	b006      	add	sp, #24
 8001fc6:	bd80      	pop	{r7, pc}
 8001fc8:	20005000 	.word	0x20005000
 8001fcc:	00000400 	.word	0x00000400
 8001fd0:	20000250 	.word	0x20000250
 8001fd4:	20000488 	.word	0x20000488

08001fd8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001fdc:	46c0      	nop			; (mov r8, r8)
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}
	...

08001fe4 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b086      	sub	sp, #24
 8001fe8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001fea:	2308      	movs	r3, #8
 8001fec:	18fb      	adds	r3, r7, r3
 8001fee:	0018      	movs	r0, r3
 8001ff0:	2310      	movs	r3, #16
 8001ff2:	001a      	movs	r2, r3
 8001ff4:	2100      	movs	r1, #0
 8001ff6:	f003 ff5f 	bl	8005eb8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ffa:	003b      	movs	r3, r7
 8001ffc:	0018      	movs	r0, r3
 8001ffe:	2308      	movs	r3, #8
 8002000:	001a      	movs	r2, r3
 8002002:	2100      	movs	r1, #0
 8002004:	f003 ff58 	bl	8005eb8 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002008:	4b1e      	ldr	r3, [pc, #120]	; (8002084 <MX_TIM2_Init+0xa0>)
 800200a:	2280      	movs	r2, #128	; 0x80
 800200c:	05d2      	lsls	r2, r2, #23
 800200e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002010:	4b1c      	ldr	r3, [pc, #112]	; (8002084 <MX_TIM2_Init+0xa0>)
 8002012:	2200      	movs	r2, #0
 8002014:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002016:	4b1b      	ldr	r3, [pc, #108]	; (8002084 <MX_TIM2_Init+0xa0>)
 8002018:	2200      	movs	r2, #0
 800201a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800201c:	4b19      	ldr	r3, [pc, #100]	; (8002084 <MX_TIM2_Init+0xa0>)
 800201e:	4a1a      	ldr	r2, [pc, #104]	; (8002088 <MX_TIM2_Init+0xa4>)
 8002020:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002022:	4b18      	ldr	r3, [pc, #96]	; (8002084 <MX_TIM2_Init+0xa0>)
 8002024:	2200      	movs	r2, #0
 8002026:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002028:	4b16      	ldr	r3, [pc, #88]	; (8002084 <MX_TIM2_Init+0xa0>)
 800202a:	2200      	movs	r2, #0
 800202c:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800202e:	4b15      	ldr	r3, [pc, #84]	; (8002084 <MX_TIM2_Init+0xa0>)
 8002030:	0018      	movs	r0, r3
 8002032:	f001 fef1 	bl	8003e18 <HAL_TIM_Base_Init>
 8002036:	1e03      	subs	r3, r0, #0
 8002038:	d001      	beq.n	800203e <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800203a:	f7ff feab 	bl	8001d94 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800203e:	2108      	movs	r1, #8
 8002040:	187b      	adds	r3, r7, r1
 8002042:	2280      	movs	r2, #128	; 0x80
 8002044:	0152      	lsls	r2, r2, #5
 8002046:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002048:	187a      	adds	r2, r7, r1
 800204a:	4b0e      	ldr	r3, [pc, #56]	; (8002084 <MX_TIM2_Init+0xa0>)
 800204c:	0011      	movs	r1, r2
 800204e:	0018      	movs	r0, r3
 8002050:	f001 ff22 	bl	8003e98 <HAL_TIM_ConfigClockSource>
 8002054:	1e03      	subs	r3, r0, #0
 8002056:	d001      	beq.n	800205c <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8002058:	f7ff fe9c 	bl	8001d94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800205c:	003b      	movs	r3, r7
 800205e:	2200      	movs	r2, #0
 8002060:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002062:	003b      	movs	r3, r7
 8002064:	2200      	movs	r2, #0
 8002066:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002068:	003a      	movs	r2, r7
 800206a:	4b06      	ldr	r3, [pc, #24]	; (8002084 <MX_TIM2_Init+0xa0>)
 800206c:	0011      	movs	r1, r2
 800206e:	0018      	movs	r0, r3
 8002070:	f002 f8de 	bl	8004230 <HAL_TIMEx_MasterConfigSynchronization>
 8002074:	1e03      	subs	r3, r0, #0
 8002076:	d001      	beq.n	800207c <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8002078:	f7ff fe8c 	bl	8001d94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800207c:	46c0      	nop			; (mov r8, r8)
 800207e:	46bd      	mov	sp, r7
 8002080:	b006      	add	sp, #24
 8002082:	bd80      	pop	{r7, pc}
 8002084:	20000254 	.word	0x20000254
 8002088:	0000ffff 	.word	0x0000ffff

0800208c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b082      	sub	sp, #8
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681a      	ldr	r2, [r3, #0]
 8002098:	2380      	movs	r3, #128	; 0x80
 800209a:	05db      	lsls	r3, r3, #23
 800209c:	429a      	cmp	r2, r3
 800209e:	d105      	bne.n	80020ac <HAL_TIM_Base_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80020a0:	4b04      	ldr	r3, [pc, #16]	; (80020b4 <HAL_TIM_Base_MspInit+0x28>)
 80020a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80020a4:	4b03      	ldr	r3, [pc, #12]	; (80020b4 <HAL_TIM_Base_MspInit+0x28>)
 80020a6:	2101      	movs	r1, #1
 80020a8:	430a      	orrs	r2, r1
 80020aa:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80020ac:	46c0      	nop			; (mov r8, r8)
 80020ae:	46bd      	mov	sp, r7
 80020b0:	b002      	add	sp, #8
 80020b2:	bd80      	pop	{r7, pc}
 80020b4:	40021000 	.word	0x40021000

080020b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b082      	sub	sp, #8
 80020bc:	af00      	add	r7, sp, #0
 80020be:	0002      	movs	r2, r0
 80020c0:	1dfb      	adds	r3, r7, #7
 80020c2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80020c4:	1dfb      	adds	r3, r7, #7
 80020c6:	781b      	ldrb	r3, [r3, #0]
 80020c8:	2b7f      	cmp	r3, #127	; 0x7f
 80020ca:	d809      	bhi.n	80020e0 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020cc:	1dfb      	adds	r3, r7, #7
 80020ce:	781b      	ldrb	r3, [r3, #0]
 80020d0:	001a      	movs	r2, r3
 80020d2:	231f      	movs	r3, #31
 80020d4:	401a      	ands	r2, r3
 80020d6:	4b04      	ldr	r3, [pc, #16]	; (80020e8 <__NVIC_EnableIRQ+0x30>)
 80020d8:	2101      	movs	r1, #1
 80020da:	4091      	lsls	r1, r2
 80020dc:	000a      	movs	r2, r1
 80020de:	601a      	str	r2, [r3, #0]
  }
}
 80020e0:	46c0      	nop			; (mov r8, r8)
 80020e2:	46bd      	mov	sp, r7
 80020e4:	b002      	add	sp, #8
 80020e6:	bd80      	pop	{r7, pc}
 80020e8:	e000e100 	.word	0xe000e100

080020ec <TIM6_init>:
 *  Created on: Aug 9, 2023
 *      Author: Dell
 */
#include "tim6.h"

void TIM6_init(void){
 80020ec:	b580      	push	{r7, lr}
 80020ee:	af00      	add	r7, sp, #0
	RCC->APB1ENR=RCC_APB1ENR_TIM6EN;
 80020f0:	4b0d      	ldr	r3, [pc, #52]	; (8002128 <TIM6_init+0x3c>)
 80020f2:	2210      	movs	r2, #16
 80020f4:	639a      	str	r2, [r3, #56]	; 0x38

	TIM6->PSC=200-1;
 80020f6:	4b0d      	ldr	r3, [pc, #52]	; (800212c <TIM6_init+0x40>)
 80020f8:	22c7      	movs	r2, #199	; 0xc7
 80020fa:	629a      	str	r2, [r3, #40]	; 0x28
	TIM6->ARR=5000-1;
 80020fc:	4b0b      	ldr	r3, [pc, #44]	; (800212c <TIM6_init+0x40>)
 80020fe:	4a0c      	ldr	r2, [pc, #48]	; (8002130 <TIM6_init+0x44>)
 8002100:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM6->CNT=0;
 8002102:	4b0a      	ldr	r3, [pc, #40]	; (800212c <TIM6_init+0x40>)
 8002104:	2200      	movs	r2, #0
 8002106:	625a      	str	r2, [r3, #36]	; 0x24
	TIM6->CR1= TIM_CR1_CEN;
 8002108:	4b08      	ldr	r3, [pc, #32]	; (800212c <TIM6_init+0x40>)
 800210a:	2201      	movs	r2, #1
 800210c:	601a      	str	r2, [r3, #0]
	TIM6->DIER|=TIM_DIER_UIE;
 800210e:	4b07      	ldr	r3, [pc, #28]	; (800212c <TIM6_init+0x40>)
 8002110:	68da      	ldr	r2, [r3, #12]
 8002112:	4b06      	ldr	r3, [pc, #24]	; (800212c <TIM6_init+0x40>)
 8002114:	2101      	movs	r1, #1
 8002116:	430a      	orrs	r2, r1
 8002118:	60da      	str	r2, [r3, #12]
	NVIC_EnableIRQ(TIM6_IRQn);
 800211a:	2011      	movs	r0, #17
 800211c:	f7ff ffcc 	bl	80020b8 <__NVIC_EnableIRQ>
}
 8002120:	46c0      	nop			; (mov r8, r8)
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}
 8002126:	46c0      	nop			; (mov r8, r8)
 8002128:	40021000 	.word	0x40021000
 800212c:	40001000 	.word	0x40001000
 8002130:	00001387 	.word	0x00001387

08002134 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002138:	4b14      	ldr	r3, [pc, #80]	; (800218c <MX_USART2_UART_Init+0x58>)
 800213a:	4a15      	ldr	r2, [pc, #84]	; (8002190 <MX_USART2_UART_Init+0x5c>)
 800213c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800213e:	4b13      	ldr	r3, [pc, #76]	; (800218c <MX_USART2_UART_Init+0x58>)
 8002140:	22e1      	movs	r2, #225	; 0xe1
 8002142:	0252      	lsls	r2, r2, #9
 8002144:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002146:	4b11      	ldr	r3, [pc, #68]	; (800218c <MX_USART2_UART_Init+0x58>)
 8002148:	2200      	movs	r2, #0
 800214a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800214c:	4b0f      	ldr	r3, [pc, #60]	; (800218c <MX_USART2_UART_Init+0x58>)
 800214e:	2200      	movs	r2, #0
 8002150:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002152:	4b0e      	ldr	r3, [pc, #56]	; (800218c <MX_USART2_UART_Init+0x58>)
 8002154:	2200      	movs	r2, #0
 8002156:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002158:	4b0c      	ldr	r3, [pc, #48]	; (800218c <MX_USART2_UART_Init+0x58>)
 800215a:	220c      	movs	r2, #12
 800215c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800215e:	4b0b      	ldr	r3, [pc, #44]	; (800218c <MX_USART2_UART_Init+0x58>)
 8002160:	2200      	movs	r2, #0
 8002162:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002164:	4b09      	ldr	r3, [pc, #36]	; (800218c <MX_USART2_UART_Init+0x58>)
 8002166:	2200      	movs	r2, #0
 8002168:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800216a:	4b08      	ldr	r3, [pc, #32]	; (800218c <MX_USART2_UART_Init+0x58>)
 800216c:	2200      	movs	r2, #0
 800216e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002170:	4b06      	ldr	r3, [pc, #24]	; (800218c <MX_USART2_UART_Init+0x58>)
 8002172:	2200      	movs	r2, #0
 8002174:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002176:	4b05      	ldr	r3, [pc, #20]	; (800218c <MX_USART2_UART_Init+0x58>)
 8002178:	0018      	movs	r0, r3
 800217a:	f002 f8b7 	bl	80042ec <HAL_UART_Init>
 800217e:	1e03      	subs	r3, r0, #0
 8002180:	d001      	beq.n	8002186 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002182:	f7ff fe07 	bl	8001d94 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002186:	46c0      	nop			; (mov r8, r8)
 8002188:	46bd      	mov	sp, r7
 800218a:	bd80      	pop	{r7, pc}
 800218c:	20000294 	.word	0x20000294
 8002190:	40004400 	.word	0x40004400

08002194 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002194:	b590      	push	{r4, r7, lr}
 8002196:	b089      	sub	sp, #36	; 0x24
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800219c:	240c      	movs	r4, #12
 800219e:	193b      	adds	r3, r7, r4
 80021a0:	0018      	movs	r0, r3
 80021a2:	2314      	movs	r3, #20
 80021a4:	001a      	movs	r2, r3
 80021a6:	2100      	movs	r1, #0
 80021a8:	f003 fe86 	bl	8005eb8 <memset>
  if(uartHandle->Instance==USART2)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a1c      	ldr	r2, [pc, #112]	; (8002224 <HAL_UART_MspInit+0x90>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d131      	bne.n	800221a <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80021b6:	4b1c      	ldr	r3, [pc, #112]	; (8002228 <HAL_UART_MspInit+0x94>)
 80021b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80021ba:	4b1b      	ldr	r3, [pc, #108]	; (8002228 <HAL_UART_MspInit+0x94>)
 80021bc:	2180      	movs	r1, #128	; 0x80
 80021be:	0289      	lsls	r1, r1, #10
 80021c0:	430a      	orrs	r2, r1
 80021c2:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021c4:	4b18      	ldr	r3, [pc, #96]	; (8002228 <HAL_UART_MspInit+0x94>)
 80021c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021c8:	4b17      	ldr	r3, [pc, #92]	; (8002228 <HAL_UART_MspInit+0x94>)
 80021ca:	2101      	movs	r1, #1
 80021cc:	430a      	orrs	r2, r1
 80021ce:	62da      	str	r2, [r3, #44]	; 0x2c
 80021d0:	4b15      	ldr	r3, [pc, #84]	; (8002228 <HAL_UART_MspInit+0x94>)
 80021d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021d4:	2201      	movs	r2, #1
 80021d6:	4013      	ands	r3, r2
 80021d8:	60bb      	str	r3, [r7, #8]
 80021da:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80021dc:	0021      	movs	r1, r4
 80021de:	187b      	adds	r3, r7, r1
 80021e0:	220c      	movs	r2, #12
 80021e2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021e4:	187b      	adds	r3, r7, r1
 80021e6:	2202      	movs	r2, #2
 80021e8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ea:	187b      	adds	r3, r7, r1
 80021ec:	2200      	movs	r2, #0
 80021ee:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021f0:	187b      	adds	r3, r7, r1
 80021f2:	2203      	movs	r2, #3
 80021f4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 80021f6:	187b      	adds	r3, r7, r1
 80021f8:	2204      	movs	r2, #4
 80021fa:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021fc:	187a      	adds	r2, r7, r1
 80021fe:	23a0      	movs	r3, #160	; 0xa0
 8002200:	05db      	lsls	r3, r3, #23
 8002202:	0011      	movs	r1, r2
 8002204:	0018      	movs	r0, r3
 8002206:	f000 fc6f 	bl	8002ae8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 2, 0);
 800220a:	2200      	movs	r2, #0
 800220c:	2102      	movs	r1, #2
 800220e:	201c      	movs	r0, #28
 8002210:	f000 f976 	bl	8002500 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002214:	201c      	movs	r0, #28
 8002216:	f000 f988 	bl	800252a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800221a:	46c0      	nop			; (mov r8, r8)
 800221c:	46bd      	mov	sp, r7
 800221e:	b009      	add	sp, #36	; 0x24
 8002220:	bd90      	pop	{r4, r7, pc}
 8002222:	46c0      	nop			; (mov r8, r8)
 8002224:	40004400 	.word	0x40004400
 8002228:	40021000 	.word	0x40021000

0800222c <Reset_Handler>:
    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

   ldr   r0, =_estack
 800222c:	480d      	ldr	r0, [pc, #52]	; (8002264 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 800222e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002230:	f7ff fed2 	bl	8001fd8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002234:	480c      	ldr	r0, [pc, #48]	; (8002268 <LoopForever+0x6>)
  ldr r1, =_edata
 8002236:	490d      	ldr	r1, [pc, #52]	; (800226c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002238:	4a0d      	ldr	r2, [pc, #52]	; (8002270 <LoopForever+0xe>)
  movs r3, #0
 800223a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800223c:	e002      	b.n	8002244 <LoopCopyDataInit>

0800223e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800223e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002240:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002242:	3304      	adds	r3, #4

08002244 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002244:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002246:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002248:	d3f9      	bcc.n	800223e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800224a:	4a0a      	ldr	r2, [pc, #40]	; (8002274 <LoopForever+0x12>)
  ldr r4, =_ebss
 800224c:	4c0a      	ldr	r4, [pc, #40]	; (8002278 <LoopForever+0x16>)
  movs r3, #0
 800224e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002250:	e001      	b.n	8002256 <LoopFillZerobss>

08002252 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002252:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002254:	3204      	adds	r2, #4

08002256 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002256:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002258:	d3fb      	bcc.n	8002252 <FillZerobss>


/* Call static constructors */
    bl __libc_init_array
 800225a:	f003 ff47 	bl	80060ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800225e:	f7fe ffab 	bl	80011b8 <main>

08002262 <LoopForever>:

LoopForever:
    b LoopForever
 8002262:	e7fe      	b.n	8002262 <LoopForever>
   ldr   r0, =_estack
 8002264:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8002268:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800226c:	20000188 	.word	0x20000188
  ldr r2, =_sidata
 8002270:	08007314 	.word	0x08007314
  ldr r2, =_sbss
 8002274:	20000188 	.word	0x20000188
  ldr r4, =_ebss
 8002278:	20000484 	.word	0x20000484

0800227c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800227c:	e7fe      	b.n	800227c <ADC1_COMP_IRQHandler>
	...

08002280 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b082      	sub	sp, #8
 8002284:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002286:	1dfb      	adds	r3, r7, #7
 8002288:	2200      	movs	r2, #0
 800228a:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 800228c:	4b0b      	ldr	r3, [pc, #44]	; (80022bc <HAL_Init+0x3c>)
 800228e:	681a      	ldr	r2, [r3, #0]
 8002290:	4b0a      	ldr	r3, [pc, #40]	; (80022bc <HAL_Init+0x3c>)
 8002292:	2140      	movs	r1, #64	; 0x40
 8002294:	430a      	orrs	r2, r1
 8002296:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002298:	2000      	movs	r0, #0
 800229a:	f000 f811 	bl	80022c0 <HAL_InitTick>
 800229e:	1e03      	subs	r3, r0, #0
 80022a0:	d003      	beq.n	80022aa <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 80022a2:	1dfb      	adds	r3, r7, #7
 80022a4:	2201      	movs	r2, #1
 80022a6:	701a      	strb	r2, [r3, #0]
 80022a8:	e001      	b.n	80022ae <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80022aa:	f7ff fd79 	bl	8001da0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80022ae:	1dfb      	adds	r3, r7, #7
 80022b0:	781b      	ldrb	r3, [r3, #0]
}
 80022b2:	0018      	movs	r0, r3
 80022b4:	46bd      	mov	sp, r7
 80022b6:	b002      	add	sp, #8
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	46c0      	nop			; (mov r8, r8)
 80022bc:	40022000 	.word	0x40022000

080022c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022c0:	b590      	push	{r4, r7, lr}
 80022c2:	b083      	sub	sp, #12
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80022c8:	4b14      	ldr	r3, [pc, #80]	; (800231c <HAL_InitTick+0x5c>)
 80022ca:	681c      	ldr	r4, [r3, #0]
 80022cc:	4b14      	ldr	r3, [pc, #80]	; (8002320 <HAL_InitTick+0x60>)
 80022ce:	781b      	ldrb	r3, [r3, #0]
 80022d0:	0019      	movs	r1, r3
 80022d2:	23fa      	movs	r3, #250	; 0xfa
 80022d4:	0098      	lsls	r0, r3, #2
 80022d6:	f7fd ff33 	bl	8000140 <__udivsi3>
 80022da:	0003      	movs	r3, r0
 80022dc:	0019      	movs	r1, r3
 80022de:	0020      	movs	r0, r4
 80022e0:	f7fd ff2e 	bl	8000140 <__udivsi3>
 80022e4:	0003      	movs	r3, r0
 80022e6:	0018      	movs	r0, r3
 80022e8:	f000 f92f 	bl	800254a <HAL_SYSTICK_Config>
 80022ec:	1e03      	subs	r3, r0, #0
 80022ee:	d001      	beq.n	80022f4 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80022f0:	2301      	movs	r3, #1
 80022f2:	e00f      	b.n	8002314 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2b03      	cmp	r3, #3
 80022f8:	d80b      	bhi.n	8002312 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022fa:	6879      	ldr	r1, [r7, #4]
 80022fc:	2301      	movs	r3, #1
 80022fe:	425b      	negs	r3, r3
 8002300:	2200      	movs	r2, #0
 8002302:	0018      	movs	r0, r3
 8002304:	f000 f8fc 	bl	8002500 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002308:	4b06      	ldr	r3, [pc, #24]	; (8002324 <HAL_InitTick+0x64>)
 800230a:	687a      	ldr	r2, [r7, #4]
 800230c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800230e:	2300      	movs	r3, #0
 8002310:	e000      	b.n	8002314 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8002312:	2301      	movs	r3, #1
}
 8002314:	0018      	movs	r0, r3
 8002316:	46bd      	mov	sp, r7
 8002318:	b003      	add	sp, #12
 800231a:	bd90      	pop	{r4, r7, pc}
 800231c:	20000120 	.word	0x20000120
 8002320:	20000128 	.word	0x20000128
 8002324:	20000124 	.word	0x20000124

08002328 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800232c:	4b05      	ldr	r3, [pc, #20]	; (8002344 <HAL_IncTick+0x1c>)
 800232e:	781b      	ldrb	r3, [r3, #0]
 8002330:	001a      	movs	r2, r3
 8002332:	4b05      	ldr	r3, [pc, #20]	; (8002348 <HAL_IncTick+0x20>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	18d2      	adds	r2, r2, r3
 8002338:	4b03      	ldr	r3, [pc, #12]	; (8002348 <HAL_IncTick+0x20>)
 800233a:	601a      	str	r2, [r3, #0]
}
 800233c:	46c0      	nop			; (mov r8, r8)
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}
 8002342:	46c0      	nop			; (mov r8, r8)
 8002344:	20000128 	.word	0x20000128
 8002348:	2000031c 	.word	0x2000031c

0800234c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	af00      	add	r7, sp, #0
  return uwTick;
 8002350:	4b02      	ldr	r3, [pc, #8]	; (800235c <HAL_GetTick+0x10>)
 8002352:	681b      	ldr	r3, [r3, #0]
}
 8002354:	0018      	movs	r0, r3
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}
 800235a:	46c0      	nop			; (mov r8, r8)
 800235c:	2000031c 	.word	0x2000031c

08002360 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b084      	sub	sp, #16
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002368:	f7ff fff0 	bl	800234c <HAL_GetTick>
 800236c:	0003      	movs	r3, r0
 800236e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	3301      	adds	r3, #1
 8002378:	d005      	beq.n	8002386 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800237a:	4b0a      	ldr	r3, [pc, #40]	; (80023a4 <HAL_Delay+0x44>)
 800237c:	781b      	ldrb	r3, [r3, #0]
 800237e:	001a      	movs	r2, r3
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	189b      	adds	r3, r3, r2
 8002384:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002386:	46c0      	nop			; (mov r8, r8)
 8002388:	f7ff ffe0 	bl	800234c <HAL_GetTick>
 800238c:	0002      	movs	r2, r0
 800238e:	68bb      	ldr	r3, [r7, #8]
 8002390:	1ad3      	subs	r3, r2, r3
 8002392:	68fa      	ldr	r2, [r7, #12]
 8002394:	429a      	cmp	r2, r3
 8002396:	d8f7      	bhi.n	8002388 <HAL_Delay+0x28>
  {
  }
}
 8002398:	46c0      	nop			; (mov r8, r8)
 800239a:	46c0      	nop			; (mov r8, r8)
 800239c:	46bd      	mov	sp, r7
 800239e:	b004      	add	sp, #16
 80023a0:	bd80      	pop	{r7, pc}
 80023a2:	46c0      	nop			; (mov r8, r8)
 80023a4:	20000128 	.word	0x20000128

080023a8 <__NVIC_EnableIRQ>:
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b082      	sub	sp, #8
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	0002      	movs	r2, r0
 80023b0:	1dfb      	adds	r3, r7, #7
 80023b2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80023b4:	1dfb      	adds	r3, r7, #7
 80023b6:	781b      	ldrb	r3, [r3, #0]
 80023b8:	2b7f      	cmp	r3, #127	; 0x7f
 80023ba:	d809      	bhi.n	80023d0 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023bc:	1dfb      	adds	r3, r7, #7
 80023be:	781b      	ldrb	r3, [r3, #0]
 80023c0:	001a      	movs	r2, r3
 80023c2:	231f      	movs	r3, #31
 80023c4:	401a      	ands	r2, r3
 80023c6:	4b04      	ldr	r3, [pc, #16]	; (80023d8 <__NVIC_EnableIRQ+0x30>)
 80023c8:	2101      	movs	r1, #1
 80023ca:	4091      	lsls	r1, r2
 80023cc:	000a      	movs	r2, r1
 80023ce:	601a      	str	r2, [r3, #0]
}
 80023d0:	46c0      	nop			; (mov r8, r8)
 80023d2:	46bd      	mov	sp, r7
 80023d4:	b002      	add	sp, #8
 80023d6:	bd80      	pop	{r7, pc}
 80023d8:	e000e100 	.word	0xe000e100

080023dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023dc:	b590      	push	{r4, r7, lr}
 80023de:	b083      	sub	sp, #12
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	0002      	movs	r2, r0
 80023e4:	6039      	str	r1, [r7, #0]
 80023e6:	1dfb      	adds	r3, r7, #7
 80023e8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80023ea:	1dfb      	adds	r3, r7, #7
 80023ec:	781b      	ldrb	r3, [r3, #0]
 80023ee:	2b7f      	cmp	r3, #127	; 0x7f
 80023f0:	d828      	bhi.n	8002444 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80023f2:	4a2f      	ldr	r2, [pc, #188]	; (80024b0 <__NVIC_SetPriority+0xd4>)
 80023f4:	1dfb      	adds	r3, r7, #7
 80023f6:	781b      	ldrb	r3, [r3, #0]
 80023f8:	b25b      	sxtb	r3, r3
 80023fa:	089b      	lsrs	r3, r3, #2
 80023fc:	33c0      	adds	r3, #192	; 0xc0
 80023fe:	009b      	lsls	r3, r3, #2
 8002400:	589b      	ldr	r3, [r3, r2]
 8002402:	1dfa      	adds	r2, r7, #7
 8002404:	7812      	ldrb	r2, [r2, #0]
 8002406:	0011      	movs	r1, r2
 8002408:	2203      	movs	r2, #3
 800240a:	400a      	ands	r2, r1
 800240c:	00d2      	lsls	r2, r2, #3
 800240e:	21ff      	movs	r1, #255	; 0xff
 8002410:	4091      	lsls	r1, r2
 8002412:	000a      	movs	r2, r1
 8002414:	43d2      	mvns	r2, r2
 8002416:	401a      	ands	r2, r3
 8002418:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	019b      	lsls	r3, r3, #6
 800241e:	22ff      	movs	r2, #255	; 0xff
 8002420:	401a      	ands	r2, r3
 8002422:	1dfb      	adds	r3, r7, #7
 8002424:	781b      	ldrb	r3, [r3, #0]
 8002426:	0018      	movs	r0, r3
 8002428:	2303      	movs	r3, #3
 800242a:	4003      	ands	r3, r0
 800242c:	00db      	lsls	r3, r3, #3
 800242e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002430:	481f      	ldr	r0, [pc, #124]	; (80024b0 <__NVIC_SetPriority+0xd4>)
 8002432:	1dfb      	adds	r3, r7, #7
 8002434:	781b      	ldrb	r3, [r3, #0]
 8002436:	b25b      	sxtb	r3, r3
 8002438:	089b      	lsrs	r3, r3, #2
 800243a:	430a      	orrs	r2, r1
 800243c:	33c0      	adds	r3, #192	; 0xc0
 800243e:	009b      	lsls	r3, r3, #2
 8002440:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002442:	e031      	b.n	80024a8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002444:	4a1b      	ldr	r2, [pc, #108]	; (80024b4 <__NVIC_SetPriority+0xd8>)
 8002446:	1dfb      	adds	r3, r7, #7
 8002448:	781b      	ldrb	r3, [r3, #0]
 800244a:	0019      	movs	r1, r3
 800244c:	230f      	movs	r3, #15
 800244e:	400b      	ands	r3, r1
 8002450:	3b08      	subs	r3, #8
 8002452:	089b      	lsrs	r3, r3, #2
 8002454:	3306      	adds	r3, #6
 8002456:	009b      	lsls	r3, r3, #2
 8002458:	18d3      	adds	r3, r2, r3
 800245a:	3304      	adds	r3, #4
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	1dfa      	adds	r2, r7, #7
 8002460:	7812      	ldrb	r2, [r2, #0]
 8002462:	0011      	movs	r1, r2
 8002464:	2203      	movs	r2, #3
 8002466:	400a      	ands	r2, r1
 8002468:	00d2      	lsls	r2, r2, #3
 800246a:	21ff      	movs	r1, #255	; 0xff
 800246c:	4091      	lsls	r1, r2
 800246e:	000a      	movs	r2, r1
 8002470:	43d2      	mvns	r2, r2
 8002472:	401a      	ands	r2, r3
 8002474:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	019b      	lsls	r3, r3, #6
 800247a:	22ff      	movs	r2, #255	; 0xff
 800247c:	401a      	ands	r2, r3
 800247e:	1dfb      	adds	r3, r7, #7
 8002480:	781b      	ldrb	r3, [r3, #0]
 8002482:	0018      	movs	r0, r3
 8002484:	2303      	movs	r3, #3
 8002486:	4003      	ands	r3, r0
 8002488:	00db      	lsls	r3, r3, #3
 800248a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800248c:	4809      	ldr	r0, [pc, #36]	; (80024b4 <__NVIC_SetPriority+0xd8>)
 800248e:	1dfb      	adds	r3, r7, #7
 8002490:	781b      	ldrb	r3, [r3, #0]
 8002492:	001c      	movs	r4, r3
 8002494:	230f      	movs	r3, #15
 8002496:	4023      	ands	r3, r4
 8002498:	3b08      	subs	r3, #8
 800249a:	089b      	lsrs	r3, r3, #2
 800249c:	430a      	orrs	r2, r1
 800249e:	3306      	adds	r3, #6
 80024a0:	009b      	lsls	r3, r3, #2
 80024a2:	18c3      	adds	r3, r0, r3
 80024a4:	3304      	adds	r3, #4
 80024a6:	601a      	str	r2, [r3, #0]
}
 80024a8:	46c0      	nop			; (mov r8, r8)
 80024aa:	46bd      	mov	sp, r7
 80024ac:	b003      	add	sp, #12
 80024ae:	bd90      	pop	{r4, r7, pc}
 80024b0:	e000e100 	.word	0xe000e100
 80024b4:	e000ed00 	.word	0xe000ed00

080024b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b082      	sub	sp, #8
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	1e5a      	subs	r2, r3, #1
 80024c4:	2380      	movs	r3, #128	; 0x80
 80024c6:	045b      	lsls	r3, r3, #17
 80024c8:	429a      	cmp	r2, r3
 80024ca:	d301      	bcc.n	80024d0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024cc:	2301      	movs	r3, #1
 80024ce:	e010      	b.n	80024f2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024d0:	4b0a      	ldr	r3, [pc, #40]	; (80024fc <SysTick_Config+0x44>)
 80024d2:	687a      	ldr	r2, [r7, #4]
 80024d4:	3a01      	subs	r2, #1
 80024d6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024d8:	2301      	movs	r3, #1
 80024da:	425b      	negs	r3, r3
 80024dc:	2103      	movs	r1, #3
 80024de:	0018      	movs	r0, r3
 80024e0:	f7ff ff7c 	bl	80023dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024e4:	4b05      	ldr	r3, [pc, #20]	; (80024fc <SysTick_Config+0x44>)
 80024e6:	2200      	movs	r2, #0
 80024e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024ea:	4b04      	ldr	r3, [pc, #16]	; (80024fc <SysTick_Config+0x44>)
 80024ec:	2207      	movs	r2, #7
 80024ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024f0:	2300      	movs	r3, #0
}
 80024f2:	0018      	movs	r0, r3
 80024f4:	46bd      	mov	sp, r7
 80024f6:	b002      	add	sp, #8
 80024f8:	bd80      	pop	{r7, pc}
 80024fa:	46c0      	nop			; (mov r8, r8)
 80024fc:	e000e010 	.word	0xe000e010

08002500 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002500:	b580      	push	{r7, lr}
 8002502:	b084      	sub	sp, #16
 8002504:	af00      	add	r7, sp, #0
 8002506:	60b9      	str	r1, [r7, #8]
 8002508:	607a      	str	r2, [r7, #4]
 800250a:	210f      	movs	r1, #15
 800250c:	187b      	adds	r3, r7, r1
 800250e:	1c02      	adds	r2, r0, #0
 8002510:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8002512:	68ba      	ldr	r2, [r7, #8]
 8002514:	187b      	adds	r3, r7, r1
 8002516:	781b      	ldrb	r3, [r3, #0]
 8002518:	b25b      	sxtb	r3, r3
 800251a:	0011      	movs	r1, r2
 800251c:	0018      	movs	r0, r3
 800251e:	f7ff ff5d 	bl	80023dc <__NVIC_SetPriority>
}
 8002522:	46c0      	nop			; (mov r8, r8)
 8002524:	46bd      	mov	sp, r7
 8002526:	b004      	add	sp, #16
 8002528:	bd80      	pop	{r7, pc}

0800252a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800252a:	b580      	push	{r7, lr}
 800252c:	b082      	sub	sp, #8
 800252e:	af00      	add	r7, sp, #0
 8002530:	0002      	movs	r2, r0
 8002532:	1dfb      	adds	r3, r7, #7
 8002534:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002536:	1dfb      	adds	r3, r7, #7
 8002538:	781b      	ldrb	r3, [r3, #0]
 800253a:	b25b      	sxtb	r3, r3
 800253c:	0018      	movs	r0, r3
 800253e:	f7ff ff33 	bl	80023a8 <__NVIC_EnableIRQ>
}
 8002542:	46c0      	nop			; (mov r8, r8)
 8002544:	46bd      	mov	sp, r7
 8002546:	b002      	add	sp, #8
 8002548:	bd80      	pop	{r7, pc}

0800254a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800254a:	b580      	push	{r7, lr}
 800254c:	b082      	sub	sp, #8
 800254e:	af00      	add	r7, sp, #0
 8002550:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	0018      	movs	r0, r3
 8002556:	f7ff ffaf 	bl	80024b8 <SysTick_Config>
 800255a:	0003      	movs	r3, r0
}
 800255c:	0018      	movs	r0, r3
 800255e:	46bd      	mov	sp, r7
 8002560:	b002      	add	sp, #8
 8002562:	bd80      	pop	{r7, pc}

08002564 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b084      	sub	sp, #16
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800256c:	230f      	movs	r3, #15
 800256e:	18fb      	adds	r3, r7, r3
 8002570:	2200      	movs	r2, #0
 8002572:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2225      	movs	r2, #37	; 0x25
 8002578:	5c9b      	ldrb	r3, [r3, r2]
 800257a:	b2db      	uxtb	r3, r3
 800257c:	2b02      	cmp	r3, #2
 800257e:	d008      	beq.n	8002592 <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2204      	movs	r2, #4
 8002584:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2224      	movs	r2, #36	; 0x24
 800258a:	2100      	movs	r1, #0
 800258c:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800258e:	2301      	movs	r3, #1
 8002590:	e024      	b.n	80025dc <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	681a      	ldr	r2, [r3, #0]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	210e      	movs	r1, #14
 800259e:	438a      	bics	r2, r1
 80025a0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	681a      	ldr	r2, [r3, #0]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	2101      	movs	r1, #1
 80025ae:	438a      	bics	r2, r1
 80025b0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025b6:	221c      	movs	r2, #28
 80025b8:	401a      	ands	r2, r3
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025be:	2101      	movs	r1, #1
 80025c0:	4091      	lsls	r1, r2
 80025c2:	000a      	movs	r2, r1
 80025c4:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2225      	movs	r2, #37	; 0x25
 80025ca:	2101      	movs	r1, #1
 80025cc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2224      	movs	r2, #36	; 0x24
 80025d2:	2100      	movs	r1, #0
 80025d4:	5499      	strb	r1, [r3, r2]

    return status;
 80025d6:	230f      	movs	r3, #15
 80025d8:	18fb      	adds	r3, r7, r3
 80025da:	781b      	ldrb	r3, [r3, #0]
  }
}
 80025dc:	0018      	movs	r0, r3
 80025de:	46bd      	mov	sp, r7
 80025e0:	b004      	add	sp, #16
 80025e2:	bd80      	pop	{r7, pc}

080025e4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b084      	sub	sp, #16
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80025ec:	210f      	movs	r1, #15
 80025ee:	187b      	adds	r3, r7, r1
 80025f0:	2200      	movs	r2, #0
 80025f2:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2225      	movs	r2, #37	; 0x25
 80025f8:	5c9b      	ldrb	r3, [r3, r2]
 80025fa:	b2db      	uxtb	r3, r3
 80025fc:	2b02      	cmp	r3, #2
 80025fe:	d006      	beq.n	800260e <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2204      	movs	r2, #4
 8002604:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002606:	187b      	adds	r3, r7, r1
 8002608:	2201      	movs	r2, #1
 800260a:	701a      	strb	r2, [r3, #0]
 800260c:	e02a      	b.n	8002664 <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	681a      	ldr	r2, [r3, #0]
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	210e      	movs	r1, #14
 800261a:	438a      	bics	r2, r1
 800261c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	681a      	ldr	r2, [r3, #0]
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	2101      	movs	r1, #1
 800262a:	438a      	bics	r2, r1
 800262c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002632:	221c      	movs	r2, #28
 8002634:	401a      	ands	r2, r3
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800263a:	2101      	movs	r1, #1
 800263c:	4091      	lsls	r1, r2
 800263e:	000a      	movs	r2, r1
 8002640:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2225      	movs	r2, #37	; 0x25
 8002646:	2101      	movs	r1, #1
 8002648:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2224      	movs	r2, #36	; 0x24
 800264e:	2100      	movs	r1, #0
 8002650:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002656:	2b00      	cmp	r3, #0
 8002658:	d004      	beq.n	8002664 <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800265e:	687a      	ldr	r2, [r7, #4]
 8002660:	0010      	movs	r0, r2
 8002662:	4798      	blx	r3
    }
  }
  return status;
 8002664:	230f      	movs	r3, #15
 8002666:	18fb      	adds	r3, r7, r3
 8002668:	781b      	ldrb	r3, [r3, #0]
}
 800266a:	0018      	movs	r0, r3
 800266c:	46bd      	mov	sp, r7
 800266e:	b004      	add	sp, #16
 8002670:	bd80      	pop	{r7, pc}
	...

08002674 <HAL_FLASH_Program>:
  * @param  Data          Specifie the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint32_t Data)
{
 8002674:	b5b0      	push	{r4, r5, r7, lr}
 8002676:	b086      	sub	sp, #24
 8002678:	af00      	add	r7, sp, #0
 800267a:	60f8      	str	r0, [r7, #12]
 800267c:	60b9      	str	r1, [r7, #8]
 800267e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002680:	2317      	movs	r3, #23
 8002682:	18fb      	adds	r3, r7, r3
 8002684:	2201      	movs	r2, #1
 8002686:	701a      	strb	r2, [r3, #0]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002688:	4b16      	ldr	r3, [pc, #88]	; (80026e4 <HAL_FLASH_Program+0x70>)
 800268a:	7c1b      	ldrb	r3, [r3, #16]
 800268c:	2b01      	cmp	r3, #1
 800268e:	d101      	bne.n	8002694 <HAL_FLASH_Program+0x20>
 8002690:	2302      	movs	r3, #2
 8002692:	e022      	b.n	80026da <HAL_FLASH_Program+0x66>
 8002694:	4b13      	ldr	r3, [pc, #76]	; (80026e4 <HAL_FLASH_Program+0x70>)
 8002696:	2201      	movs	r2, #1
 8002698:	741a      	strb	r2, [r3, #16]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800269a:	2517      	movs	r5, #23
 800269c:	197c      	adds	r4, r7, r5
 800269e:	4b12      	ldr	r3, [pc, #72]	; (80026e8 <HAL_FLASH_Program+0x74>)
 80026a0:	0018      	movs	r0, r3
 80026a2:	f000 f88b 	bl	80027bc <FLASH_WaitForLastOperation>
 80026a6:	0003      	movs	r3, r0
 80026a8:	7023      	strb	r3, [r4, #0]
  
  if(status == HAL_OK)
 80026aa:	0029      	movs	r1, r5
 80026ac:	187b      	adds	r3, r7, r1
 80026ae:	781b      	ldrb	r3, [r3, #0]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d10c      	bne.n	80026ce <HAL_FLASH_Program+0x5a>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80026b4:	4b0b      	ldr	r3, [pc, #44]	; (80026e4 <HAL_FLASH_Program+0x70>)
 80026b6:	2200      	movs	r2, #0
 80026b8:	615a      	str	r2, [r3, #20]

    /*Program word (32-bit) at a specified address.*/
    *(__IO uint32_t *)Address = Data;
 80026ba:	68bb      	ldr	r3, [r7, #8]
 80026bc:	687a      	ldr	r2, [r7, #4]
 80026be:	601a      	str	r2, [r3, #0]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80026c0:	187c      	adds	r4, r7, r1
 80026c2:	4b09      	ldr	r3, [pc, #36]	; (80026e8 <HAL_FLASH_Program+0x74>)
 80026c4:	0018      	movs	r0, r3
 80026c6:	f000 f879 	bl	80027bc <FLASH_WaitForLastOperation>
 80026ca:	0003      	movs	r3, r0
 80026cc:	7023      	strb	r3, [r4, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80026ce:	4b05      	ldr	r3, [pc, #20]	; (80026e4 <HAL_FLASH_Program+0x70>)
 80026d0:	2200      	movs	r2, #0
 80026d2:	741a      	strb	r2, [r3, #16]

  return status;
 80026d4:	2317      	movs	r3, #23
 80026d6:	18fb      	adds	r3, r7, r3
 80026d8:	781b      	ldrb	r3, [r3, #0]
}
 80026da:	0018      	movs	r0, r3
 80026dc:	46bd      	mov	sp, r7
 80026de:	b006      	add	sp, #24
 80026e0:	bdb0      	pop	{r4, r5, r7, pc}
 80026e2:	46c0      	nop			; (mov r8, r8)
 80026e4:	20000320 	.word	0x20000320
 80026e8:	0000c350 	.word	0x0000c350

080026ec <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b086      	sub	sp, #24
 80026f0:	af00      	add	r7, sp, #0
  uint32_t primask_bit;

  /* Unlocking FLASH_PECR register access*/
  if(HAL_IS_BIT_SET(FLASH->PECR, FLASH_PECR_PELOCK))
 80026f2:	4b23      	ldr	r3, [pc, #140]	; (8002780 <HAL_FLASH_Unlock+0x94>)
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	2201      	movs	r2, #1
 80026f8:	4013      	ands	r3, r2
 80026fa:	2b01      	cmp	r3, #1
 80026fc:	d11a      	bne.n	8002734 <HAL_FLASH_Unlock+0x48>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80026fe:	f3ef 8310 	mrs	r3, PRIMASK
 8002702:	60fb      	str	r3, [r7, #12]
  return(result);
 8002704:	68fb      	ldr	r3, [r7, #12]
  {
    /* Disable interrupts to avoid any interruption during unlock sequence */
    primask_bit = __get_PRIMASK();
 8002706:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8002708:	b672      	cpsid	i
}
 800270a:	46c0      	nop			; (mov r8, r8)
    __disable_irq();

    WRITE_REG(FLASH->PEKEYR, FLASH_PEKEY1);
 800270c:	4b1c      	ldr	r3, [pc, #112]	; (8002780 <HAL_FLASH_Unlock+0x94>)
 800270e:	4a1d      	ldr	r2, [pc, #116]	; (8002784 <HAL_FLASH_Unlock+0x98>)
 8002710:	60da      	str	r2, [r3, #12]
    WRITE_REG(FLASH->PEKEYR, FLASH_PEKEY2);
 8002712:	4b1b      	ldr	r3, [pc, #108]	; (8002780 <HAL_FLASH_Unlock+0x94>)
 8002714:	4a1c      	ldr	r2, [pc, #112]	; (8002788 <HAL_FLASH_Unlock+0x9c>)
 8002716:	60da      	str	r2, [r3, #12]
 8002718:	697b      	ldr	r3, [r7, #20]
 800271a:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800271c:	693b      	ldr	r3, [r7, #16]
 800271e:	f383 8810 	msr	PRIMASK, r3
}
 8002722:	46c0      	nop			; (mov r8, r8)

    /* Re-enable the interrupts: restore previous priority mask */
    __set_PRIMASK(primask_bit);

    if(HAL_IS_BIT_SET(FLASH->PECR, FLASH_PECR_PELOCK))
 8002724:	4b16      	ldr	r3, [pc, #88]	; (8002780 <HAL_FLASH_Unlock+0x94>)
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	2201      	movs	r2, #1
 800272a:	4013      	ands	r3, r2
 800272c:	2b01      	cmp	r3, #1
 800272e:	d101      	bne.n	8002734 <HAL_FLASH_Unlock+0x48>
    {
      return HAL_ERROR;
 8002730:	2301      	movs	r3, #1
 8002732:	e021      	b.n	8002778 <HAL_FLASH_Unlock+0x8c>
    }
  }

  if (HAL_IS_BIT_SET(FLASH->PECR, FLASH_PECR_PRGLOCK))
 8002734:	4b12      	ldr	r3, [pc, #72]	; (8002780 <HAL_FLASH_Unlock+0x94>)
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	2202      	movs	r2, #2
 800273a:	4013      	ands	r3, r2
 800273c:	2b02      	cmp	r3, #2
 800273e:	d11a      	bne.n	8002776 <HAL_FLASH_Unlock+0x8a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002740:	f3ef 8310 	mrs	r3, PRIMASK
 8002744:	607b      	str	r3, [r7, #4]
  return(result);
 8002746:	687b      	ldr	r3, [r7, #4]
  {
    /* Disable interrupts to avoid any interruption during unlock sequence */
    primask_bit = __get_PRIMASK();
 8002748:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800274a:	b672      	cpsid	i
}
 800274c:	46c0      	nop			; (mov r8, r8)
    __disable_irq();

    /* Unlocking the program memory access */
    WRITE_REG(FLASH->PRGKEYR, FLASH_PRGKEY1);
 800274e:	4b0c      	ldr	r3, [pc, #48]	; (8002780 <HAL_FLASH_Unlock+0x94>)
 8002750:	4a0e      	ldr	r2, [pc, #56]	; (800278c <HAL_FLASH_Unlock+0xa0>)
 8002752:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->PRGKEYR, FLASH_PRGKEY2);  
 8002754:	4b0a      	ldr	r3, [pc, #40]	; (8002780 <HAL_FLASH_Unlock+0x94>)
 8002756:	4a0e      	ldr	r2, [pc, #56]	; (8002790 <HAL_FLASH_Unlock+0xa4>)
 8002758:	611a      	str	r2, [r3, #16]
 800275a:	697b      	ldr	r3, [r7, #20]
 800275c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800275e:	68bb      	ldr	r3, [r7, #8]
 8002760:	f383 8810 	msr	PRIMASK, r3
}
 8002764:	46c0      	nop			; (mov r8, r8)

    /* Re-enable the interrupts: restore previous priority mask */
    __set_PRIMASK(primask_bit);

    if (HAL_IS_BIT_SET(FLASH->PECR, FLASH_PECR_PRGLOCK))
 8002766:	4b06      	ldr	r3, [pc, #24]	; (8002780 <HAL_FLASH_Unlock+0x94>)
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	2202      	movs	r2, #2
 800276c:	4013      	ands	r3, r2
 800276e:	2b02      	cmp	r3, #2
 8002770:	d101      	bne.n	8002776 <HAL_FLASH_Unlock+0x8a>
    {
      return HAL_ERROR;
 8002772:	2301      	movs	r3, #1
 8002774:	e000      	b.n	8002778 <HAL_FLASH_Unlock+0x8c>
    }
  }

  return HAL_OK; 
 8002776:	2300      	movs	r3, #0
}
 8002778:	0018      	movs	r0, r3
 800277a:	46bd      	mov	sp, r7
 800277c:	b006      	add	sp, #24
 800277e:	bd80      	pop	{r7, pc}
 8002780:	40022000 	.word	0x40022000
 8002784:	89abcdef 	.word	0x89abcdef
 8002788:	02030405 	.word	0x02030405
 800278c:	8c9daebf 	.word	0x8c9daebf
 8002790:	13141516 	.word	0x13141516

08002794 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	af00      	add	r7, sp, #0
  /* Set the PRGLOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->PECR, FLASH_PECR_PRGLOCK);
 8002798:	4b07      	ldr	r3, [pc, #28]	; (80027b8 <HAL_FLASH_Lock+0x24>)
 800279a:	685a      	ldr	r2, [r3, #4]
 800279c:	4b06      	ldr	r3, [pc, #24]	; (80027b8 <HAL_FLASH_Lock+0x24>)
 800279e:	2102      	movs	r1, #2
 80027a0:	430a      	orrs	r2, r1
 80027a2:	605a      	str	r2, [r3, #4]
  
  /* Set the PELOCK Bit to lock the PECR Register access */
  SET_BIT(FLASH->PECR, FLASH_PECR_PELOCK);
 80027a4:	4b04      	ldr	r3, [pc, #16]	; (80027b8 <HAL_FLASH_Lock+0x24>)
 80027a6:	685a      	ldr	r2, [r3, #4]
 80027a8:	4b03      	ldr	r3, [pc, #12]	; (80027b8 <HAL_FLASH_Lock+0x24>)
 80027aa:	2101      	movs	r1, #1
 80027ac:	430a      	orrs	r2, r1
 80027ae:	605a      	str	r2, [r3, #4]

  return HAL_OK;  
 80027b0:	2300      	movs	r3, #0
}
 80027b2:	0018      	movs	r0, r3
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bd80      	pop	{r7, pc}
 80027b8:	40022000 	.word	0x40022000

080027bc <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b084      	sub	sp, #16
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 80027c4:	f7ff fdc2 	bl	800234c <HAL_GetTick>
 80027c8:	0003      	movs	r3, r0
 80027ca:	60fb      	str	r3, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80027cc:	e00f      	b.n	80027ee <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	3301      	adds	r3, #1
 80027d2:	d00c      	beq.n	80027ee <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d007      	beq.n	80027ea <FLASH_WaitForLastOperation+0x2e>
 80027da:	f7ff fdb7 	bl	800234c <HAL_GetTick>
 80027de:	0002      	movs	r2, r0
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	1ad3      	subs	r3, r2, r3
 80027e4:	687a      	ldr	r2, [r7, #4]
 80027e6:	429a      	cmp	r2, r3
 80027e8:	d201      	bcs.n	80027ee <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 80027ea:	2303      	movs	r3, #3
 80027ec:	e052      	b.n	8002894 <FLASH_WaitForLastOperation+0xd8>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80027ee:	4b2b      	ldr	r3, [pc, #172]	; (800289c <FLASH_WaitForLastOperation+0xe0>)
 80027f0:	699b      	ldr	r3, [r3, #24]
 80027f2:	2201      	movs	r2, #1
 80027f4:	4013      	ands	r3, r2
 80027f6:	2b01      	cmp	r3, #1
 80027f8:	d0e9      	beq.n	80027ce <FLASH_WaitForLastOperation+0x12>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80027fa:	4b28      	ldr	r3, [pc, #160]	; (800289c <FLASH_WaitForLastOperation+0xe0>)
 80027fc:	699b      	ldr	r3, [r3, #24]
 80027fe:	2202      	movs	r2, #2
 8002800:	4013      	ands	r3, r2
 8002802:	2b02      	cmp	r3, #2
 8002804:	d102      	bne.n	800280c <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8002806:	4b25      	ldr	r3, [pc, #148]	; (800289c <FLASH_WaitForLastOperation+0xe0>)
 8002808:	2202      	movs	r2, #2
 800280a:	619a      	str	r2, [r3, #24]
  }
  
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 800280c:	4b23      	ldr	r3, [pc, #140]	; (800289c <FLASH_WaitForLastOperation+0xe0>)
 800280e:	699a      	ldr	r2, [r3, #24]
 8002810:	2380      	movs	r3, #128	; 0x80
 8002812:	005b      	lsls	r3, r3, #1
 8002814:	401a      	ands	r2, r3
 8002816:	2380      	movs	r3, #128	; 0x80
 8002818:	005b      	lsls	r3, r3, #1
 800281a:	429a      	cmp	r2, r3
 800281c:	d035      	beq.n	800288a <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 800281e:	4b1f      	ldr	r3, [pc, #124]	; (800289c <FLASH_WaitForLastOperation+0xe0>)
 8002820:	699a      	ldr	r2, [r3, #24]
 8002822:	2380      	movs	r3, #128	; 0x80
 8002824:	009b      	lsls	r3, r3, #2
 8002826:	401a      	ands	r2, r3
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 8002828:	2380      	movs	r3, #128	; 0x80
 800282a:	009b      	lsls	r3, r3, #2
 800282c:	429a      	cmp	r2, r3
 800282e:	d02c      	beq.n	800288a <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 8002830:	4b1a      	ldr	r3, [pc, #104]	; (800289c <FLASH_WaitForLastOperation+0xe0>)
 8002832:	699a      	ldr	r2, [r3, #24]
 8002834:	2380      	movs	r3, #128	; 0x80
 8002836:	00db      	lsls	r3, r3, #3
 8002838:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 800283a:	2380      	movs	r3, #128	; 0x80
 800283c:	00db      	lsls	r3, r3, #3
 800283e:	429a      	cmp	r2, r3
 8002840:	d023      	beq.n	800288a <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 8002842:	4b16      	ldr	r3, [pc, #88]	; (800289c <FLASH_WaitForLastOperation+0xe0>)
 8002844:	699a      	ldr	r2, [r3, #24]
 8002846:	2380      	movs	r3, #128	; 0x80
 8002848:	011b      	lsls	r3, r3, #4
 800284a:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 800284c:	2380      	movs	r3, #128	; 0x80
 800284e:	011b      	lsls	r3, r3, #4
 8002850:	429a      	cmp	r2, r3
 8002852:	d01a      	beq.n	800288a <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 8002854:	4b11      	ldr	r3, [pc, #68]	; (800289c <FLASH_WaitForLastOperation+0xe0>)
 8002856:	699a      	ldr	r2, [r3, #24]
 8002858:	2380      	movs	r3, #128	; 0x80
 800285a:	019b      	lsls	r3, r3, #6
 800285c:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 800285e:	2380      	movs	r3, #128	; 0x80
 8002860:	019b      	lsls	r3, r3, #6
 8002862:	429a      	cmp	r2, r3
 8002864:	d011      	beq.n	800288a <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 8002866:	4b0d      	ldr	r3, [pc, #52]	; (800289c <FLASH_WaitForLastOperation+0xe0>)
 8002868:	699a      	ldr	r2, [r3, #24]
 800286a:	2380      	movs	r3, #128	; 0x80
 800286c:	029b      	lsls	r3, r3, #10
 800286e:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 8002870:	2380      	movs	r3, #128	; 0x80
 8002872:	029b      	lsls	r3, r3, #10
 8002874:	429a      	cmp	r2, r3
 8002876:	d008      	beq.n	800288a <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR) )
 8002878:	4b08      	ldr	r3, [pc, #32]	; (800289c <FLASH_WaitForLastOperation+0xe0>)
 800287a:	699a      	ldr	r2, [r3, #24]
 800287c:	2380      	movs	r3, #128	; 0x80
 800287e:	025b      	lsls	r3, r3, #9
 8002880:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 8002882:	2380      	movs	r3, #128	; 0x80
 8002884:	025b      	lsls	r3, r3, #9
 8002886:	429a      	cmp	r2, r3
 8002888:	d103      	bne.n	8002892 <FLASH_WaitForLastOperation+0xd6>
     *           cut of the STM32L031xx device or the first cut of the STM32L041xx
     *           device, this error should be ignored. The revId of the device
     *           can be retrieved via the HAL_GetREVID() function.
     *
     */
    FLASH_SetErrorCode();
 800288a:	f000 f809 	bl	80028a0 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800288e:	2301      	movs	r3, #1
 8002890:	e000      	b.n	8002894 <FLASH_WaitForLastOperation+0xd8>
  }

  /* There is no error flag set */
  return HAL_OK;
 8002892:	2300      	movs	r3, #0
}
 8002894:	0018      	movs	r0, r3
 8002896:	46bd      	mov	sp, r7
 8002898:	b004      	add	sp, #16
 800289a:	bd80      	pop	{r7, pc}
 800289c:	40022000 	.word	0x40022000

080028a0 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b082      	sub	sp, #8
 80028a4:	af00      	add	r7, sp, #0
  uint32_t flags = 0;
 80028a6:	2300      	movs	r3, #0
 80028a8:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 80028aa:	4b49      	ldr	r3, [pc, #292]	; (80029d0 <FLASH_SetErrorCode+0x130>)
 80028ac:	699a      	ldr	r2, [r3, #24]
 80028ae:	2380      	movs	r3, #128	; 0x80
 80028b0:	005b      	lsls	r3, r3, #1
 80028b2:	401a      	ands	r2, r3
 80028b4:	2380      	movs	r3, #128	; 0x80
 80028b6:	005b      	lsls	r3, r3, #1
 80028b8:	429a      	cmp	r2, r3
 80028ba:	d10a      	bne.n	80028d2 <FLASH_SetErrorCode+0x32>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80028bc:	4b45      	ldr	r3, [pc, #276]	; (80029d4 <FLASH_SetErrorCode+0x134>)
 80028be:	695b      	ldr	r3, [r3, #20]
 80028c0:	2202      	movs	r2, #2
 80028c2:	431a      	orrs	r2, r3
 80028c4:	4b43      	ldr	r3, [pc, #268]	; (80029d4 <FLASH_SetErrorCode+0x134>)
 80028c6:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_WRPERR;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2280      	movs	r2, #128	; 0x80
 80028cc:	0052      	lsls	r2, r2, #1
 80028ce:	4313      	orrs	r3, r2
 80028d0:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))
 80028d2:	4b3f      	ldr	r3, [pc, #252]	; (80029d0 <FLASH_SetErrorCode+0x130>)
 80028d4:	699a      	ldr	r2, [r3, #24]
 80028d6:	2380      	movs	r3, #128	; 0x80
 80028d8:	009b      	lsls	r3, r3, #2
 80028da:	401a      	ands	r2, r3
 80028dc:	2380      	movs	r3, #128	; 0x80
 80028de:	009b      	lsls	r3, r3, #2
 80028e0:	429a      	cmp	r2, r3
 80028e2:	d10a      	bne.n	80028fa <FLASH_SetErrorCode+0x5a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80028e4:	4b3b      	ldr	r3, [pc, #236]	; (80029d4 <FLASH_SetErrorCode+0x134>)
 80028e6:	695b      	ldr	r3, [r3, #20]
 80028e8:	2201      	movs	r2, #1
 80028ea:	431a      	orrs	r2, r3
 80028ec:	4b39      	ldr	r3, [pc, #228]	; (80029d4 <FLASH_SetErrorCode+0x134>)
 80028ee:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_PGAERR;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2280      	movs	r2, #128	; 0x80
 80028f4:	0092      	lsls	r2, r2, #2
 80028f6:	4313      	orrs	r3, r2
 80028f8:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR))
 80028fa:	4b35      	ldr	r3, [pc, #212]	; (80029d0 <FLASH_SetErrorCode+0x130>)
 80028fc:	699a      	ldr	r2, [r3, #24]
 80028fe:	2380      	movs	r3, #128	; 0x80
 8002900:	00db      	lsls	r3, r3, #3
 8002902:	401a      	ands	r2, r3
 8002904:	2380      	movs	r3, #128	; 0x80
 8002906:	00db      	lsls	r3, r3, #3
 8002908:	429a      	cmp	r2, r3
 800290a:	d10a      	bne.n	8002922 <FLASH_SetErrorCode+0x82>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_SIZE;
 800290c:	4b31      	ldr	r3, [pc, #196]	; (80029d4 <FLASH_SetErrorCode+0x134>)
 800290e:	695b      	ldr	r3, [r3, #20]
 8002910:	2208      	movs	r2, #8
 8002912:	431a      	orrs	r2, r3
 8002914:	4b2f      	ldr	r3, [pc, #188]	; (80029d4 <FLASH_SetErrorCode+0x134>)
 8002916:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_SIZERR;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2280      	movs	r2, #128	; 0x80
 800291c:	00d2      	lsls	r2, r2, #3
 800291e:	4313      	orrs	r3, r2
 8002920:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8002922:	4b2b      	ldr	r3, [pc, #172]	; (80029d0 <FLASH_SetErrorCode+0x130>)
 8002924:	699a      	ldr	r2, [r3, #24]
 8002926:	2380      	movs	r3, #128	; 0x80
 8002928:	011b      	lsls	r3, r3, #4
 800292a:	401a      	ands	r2, r3
 800292c:	2380      	movs	r3, #128	; 0x80
 800292e:	011b      	lsls	r3, r3, #4
 8002930:	429a      	cmp	r2, r3
 8002932:	d10a      	bne.n	800294a <FLASH_SetErrorCode+0xaa>
     *           cut of the STM32L031xx device or the first cut of the STM32L041xx
     *           device, this error should be ignored. The revId of the device
     *           can be retrieved via the HAL_GetREVID() function.
     *
     */
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8002934:	4b27      	ldr	r3, [pc, #156]	; (80029d4 <FLASH_SetErrorCode+0x134>)
 8002936:	695b      	ldr	r3, [r3, #20]
 8002938:	2204      	movs	r2, #4
 800293a:	431a      	orrs	r2, r3
 800293c:	4b25      	ldr	r3, [pc, #148]	; (80029d4 <FLASH_SetErrorCode+0x134>)
 800293e:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_OPTVERR;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2280      	movs	r2, #128	; 0x80
 8002944:	0112      	lsls	r2, r2, #4
 8002946:	4313      	orrs	r3, r2
 8002948:	607b      	str	r3, [r7, #4]
  }

  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR))
 800294a:	4b21      	ldr	r3, [pc, #132]	; (80029d0 <FLASH_SetErrorCode+0x130>)
 800294c:	699a      	ldr	r2, [r3, #24]
 800294e:	2380      	movs	r3, #128	; 0x80
 8002950:	019b      	lsls	r3, r3, #6
 8002952:	401a      	ands	r2, r3
 8002954:	2380      	movs	r3, #128	; 0x80
 8002956:	019b      	lsls	r3, r3, #6
 8002958:	429a      	cmp	r2, r3
 800295a:	d10a      	bne.n	8002972 <FLASH_SetErrorCode+0xd2>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 800295c:	4b1d      	ldr	r3, [pc, #116]	; (80029d4 <FLASH_SetErrorCode+0x134>)
 800295e:	695b      	ldr	r3, [r3, #20]
 8002960:	2210      	movs	r2, #16
 8002962:	431a      	orrs	r2, r3
 8002964:	4b1b      	ldr	r3, [pc, #108]	; (80029d4 <FLASH_SetErrorCode+0x134>)
 8002966:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_RDERR;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2280      	movs	r2, #128	; 0x80
 800296c:	0192      	lsls	r2, r2, #6
 800296e:	4313      	orrs	r3, r2
 8002970:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR))
 8002972:	4b17      	ldr	r3, [pc, #92]	; (80029d0 <FLASH_SetErrorCode+0x130>)
 8002974:	699a      	ldr	r2, [r3, #24]
 8002976:	2380      	movs	r3, #128	; 0x80
 8002978:	029b      	lsls	r3, r3, #10
 800297a:	401a      	ands	r2, r3
 800297c:	2380      	movs	r3, #128	; 0x80
 800297e:	029b      	lsls	r3, r3, #10
 8002980:	429a      	cmp	r2, r3
 8002982:	d109      	bne.n	8002998 <FLASH_SetErrorCode+0xf8>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_FWWERR;
 8002984:	4b13      	ldr	r3, [pc, #76]	; (80029d4 <FLASH_SetErrorCode+0x134>)
 8002986:	695b      	ldr	r3, [r3, #20]
 8002988:	2220      	movs	r2, #32
 800298a:	431a      	orrs	r2, r3
 800298c:	4b11      	ldr	r3, [pc, #68]	; (80029d4 <FLASH_SetErrorCode+0x134>)
 800298e:	615a      	str	r2, [r3, #20]
    flags |= HAL_FLASH_ERROR_FWWERR;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2220      	movs	r2, #32
 8002994:	4313      	orrs	r3, r2
 8002996:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR))
 8002998:	4b0d      	ldr	r3, [pc, #52]	; (80029d0 <FLASH_SetErrorCode+0x130>)
 800299a:	699a      	ldr	r2, [r3, #24]
 800299c:	2380      	movs	r3, #128	; 0x80
 800299e:	025b      	lsls	r3, r3, #9
 80029a0:	401a      	ands	r2, r3
 80029a2:	2380      	movs	r3, #128	; 0x80
 80029a4:	025b      	lsls	r3, r3, #9
 80029a6:	429a      	cmp	r2, r3
 80029a8:	d10a      	bne.n	80029c0 <FLASH_SetErrorCode+0x120>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_NOTZERO;
 80029aa:	4b0a      	ldr	r3, [pc, #40]	; (80029d4 <FLASH_SetErrorCode+0x134>)
 80029ac:	695b      	ldr	r3, [r3, #20]
 80029ae:	2240      	movs	r2, #64	; 0x40
 80029b0:	431a      	orrs	r2, r3
 80029b2:	4b08      	ldr	r3, [pc, #32]	; (80029d4 <FLASH_SetErrorCode+0x134>)
 80029b4:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_NOTZEROERR;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2280      	movs	r2, #128	; 0x80
 80029ba:	0252      	lsls	r2, r2, #9
 80029bc:	4313      	orrs	r3, r2
 80029be:	607b      	str	r3, [r7, #4]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 80029c0:	4b03      	ldr	r3, [pc, #12]	; (80029d0 <FLASH_SetErrorCode+0x130>)
 80029c2:	687a      	ldr	r2, [r7, #4]
 80029c4:	619a      	str	r2, [r3, #24]
}  
 80029c6:	46c0      	nop			; (mov r8, r8)
 80029c8:	46bd      	mov	sp, r7
 80029ca:	b002      	add	sp, #8
 80029cc:	bd80      	pop	{r7, pc}
 80029ce:	46c0      	nop			; (mov r8, r8)
 80029d0:	40022000 	.word	0x40022000
 80029d4:	20000320 	.word	0x20000320

080029d8 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 80029d8:	b5b0      	push	{r4, r5, r7, lr}
 80029da:	b084      	sub	sp, #16
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
 80029e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80029e2:	230f      	movs	r3, #15
 80029e4:	18fb      	adds	r3, r7, r3
 80029e6:	2201      	movs	r2, #1
 80029e8:	701a      	strb	r2, [r3, #0]
  uint32_t address = 0U;
 80029ea:	2300      	movs	r3, #0
 80029ec:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80029ee:	4b29      	ldr	r3, [pc, #164]	; (8002a94 <HAL_FLASHEx_Erase+0xbc>)
 80029f0:	7c1b      	ldrb	r3, [r3, #16]
 80029f2:	2b01      	cmp	r3, #1
 80029f4:	d101      	bne.n	80029fa <HAL_FLASHEx_Erase+0x22>
 80029f6:	2302      	movs	r3, #2
 80029f8:	e048      	b.n	8002a8c <HAL_FLASHEx_Erase+0xb4>
 80029fa:	4b26      	ldr	r3, [pc, #152]	; (8002a94 <HAL_FLASHEx_Erase+0xbc>)
 80029fc:	2201      	movs	r2, #1
 80029fe:	741a      	strb	r2, [r3, #16]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002a00:	250f      	movs	r5, #15
 8002a02:	197c      	adds	r4, r7, r5
 8002a04:	4b24      	ldr	r3, [pc, #144]	; (8002a98 <HAL_FLASHEx_Erase+0xc0>)
 8002a06:	0018      	movs	r0, r3
 8002a08:	f7ff fed8 	bl	80027bc <FLASH_WaitForLastOperation>
 8002a0c:	0003      	movs	r3, r0
 8002a0e:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8002a10:	197b      	adds	r3, r7, r5
 8002a12:	781b      	ldrb	r3, [r3, #0]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d133      	bne.n	8002a80 <HAL_FLASHEx_Erase+0xa8>
  {
    /*Initialization of PageError variable*/
    *PageError = 0xFFFFFFFFU;
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	2201      	movs	r2, #1
 8002a1c:	4252      	negs	r2, r2
 8002a1e:	601a      	str	r2, [r3, #0]
    assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));
    assert_param(IS_FLASH_PROGRAM_ADDRESS(pEraseInit->PageAddress));
    assert_param(IS_FLASH_PROGRAM_ADDRESS((pEraseInit->PageAddress & ~(FLASH_PAGE_SIZE - 1U)) + pEraseInit->NbPages * FLASH_PAGE_SIZE - 1U));

    /* Erase page by page to be done*/
    for(address = pEraseInit->PageAddress; 
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	60bb      	str	r3, [r7, #8]
 8002a26:	e022      	b.n	8002a6e <HAL_FLASHEx_Erase+0x96>
        address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
        address += FLASH_PAGE_SIZE)
    {
      FLASH_PageErase(address);
 8002a28:	68bb      	ldr	r3, [r7, #8]
 8002a2a:	0018      	movs	r0, r3
 8002a2c:	f000 f83a 	bl	8002aa4 <FLASH_PageErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002a30:	250f      	movs	r5, #15
 8002a32:	197c      	adds	r4, r7, r5
 8002a34:	4b18      	ldr	r3, [pc, #96]	; (8002a98 <HAL_FLASHEx_Erase+0xc0>)
 8002a36:	0018      	movs	r0, r3
 8002a38:	f7ff fec0 	bl	80027bc <FLASH_WaitForLastOperation>
 8002a3c:	0003      	movs	r3, r0
 8002a3e:	7023      	strb	r3, [r4, #0]

      /* If the erase operation is completed, disable the ERASE Bit */
      CLEAR_BIT(FLASH->PECR, FLASH_PECR_PROG);
 8002a40:	4b16      	ldr	r3, [pc, #88]	; (8002a9c <HAL_FLASHEx_Erase+0xc4>)
 8002a42:	685a      	ldr	r2, [r3, #4]
 8002a44:	4b15      	ldr	r3, [pc, #84]	; (8002a9c <HAL_FLASHEx_Erase+0xc4>)
 8002a46:	2108      	movs	r1, #8
 8002a48:	438a      	bics	r2, r1
 8002a4a:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(FLASH->PECR, FLASH_PECR_ERASE);
 8002a4c:	4b13      	ldr	r3, [pc, #76]	; (8002a9c <HAL_FLASHEx_Erase+0xc4>)
 8002a4e:	685a      	ldr	r2, [r3, #4]
 8002a50:	4b12      	ldr	r3, [pc, #72]	; (8002a9c <HAL_FLASHEx_Erase+0xc4>)
 8002a52:	4913      	ldr	r1, [pc, #76]	; (8002aa0 <HAL_FLASHEx_Erase+0xc8>)
 8002a54:	400a      	ands	r2, r1
 8002a56:	605a      	str	r2, [r3, #4]

      if (status != HAL_OK) 
 8002a58:	197b      	adds	r3, r7, r5
 8002a5a:	781b      	ldrb	r3, [r3, #0]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d003      	beq.n	8002a68 <HAL_FLASHEx_Erase+0x90>
      {
        /* In case of error, stop erase procedure and return the faulty address */
        *PageError = address;
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	68ba      	ldr	r2, [r7, #8]
 8002a64:	601a      	str	r2, [r3, #0]
        break;
 8002a66:	e00b      	b.n	8002a80 <HAL_FLASHEx_Erase+0xa8>
        address += FLASH_PAGE_SIZE)
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	3380      	adds	r3, #128	; 0x80
 8002a6c:	60bb      	str	r3, [r7, #8]
        address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	689b      	ldr	r3, [r3, #8]
 8002a72:	01da      	lsls	r2, r3, #7
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	18d3      	adds	r3, r2, r3
 8002a7a:	68ba      	ldr	r2, [r7, #8]
 8002a7c:	429a      	cmp	r2, r3
 8002a7e:	d3d3      	bcc.n	8002a28 <HAL_FLASHEx_Erase+0x50>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002a80:	4b04      	ldr	r3, [pc, #16]	; (8002a94 <HAL_FLASHEx_Erase+0xbc>)
 8002a82:	2200      	movs	r2, #0
 8002a84:	741a      	strb	r2, [r3, #16]

  return status;
 8002a86:	230f      	movs	r3, #15
 8002a88:	18fb      	adds	r3, r7, r3
 8002a8a:	781b      	ldrb	r3, [r3, #0]
}
 8002a8c:	0018      	movs	r0, r3
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	b004      	add	sp, #16
 8002a92:	bdb0      	pop	{r4, r5, r7, pc}
 8002a94:	20000320 	.word	0x20000320
 8002a98:	0000c350 	.word	0x0000c350
 8002a9c:	40022000 	.word	0x40022000
 8002aa0:	fffffdff 	.word	0xfffffdff

08002aa4 <FLASH_PageErase>:
  * @note   A Page is erased in the Program memory only if the address to load 
  *         is the start address of a page (multiple of @ref FLASH_PAGE_SIZE bytes).
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b082      	sub	sp, #8
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002aac:	4b0c      	ldr	r3, [pc, #48]	; (8002ae0 <FLASH_PageErase+0x3c>)
 8002aae:	2200      	movs	r2, #0
 8002ab0:	615a      	str	r2, [r3, #20]

  /* Set the ERASE bit */
  SET_BIT(FLASH->PECR, FLASH_PECR_ERASE);
 8002ab2:	4b0c      	ldr	r3, [pc, #48]	; (8002ae4 <FLASH_PageErase+0x40>)
 8002ab4:	685a      	ldr	r2, [r3, #4]
 8002ab6:	4b0b      	ldr	r3, [pc, #44]	; (8002ae4 <FLASH_PageErase+0x40>)
 8002ab8:	2180      	movs	r1, #128	; 0x80
 8002aba:	0089      	lsls	r1, r1, #2
 8002abc:	430a      	orrs	r2, r1
 8002abe:	605a      	str	r2, [r3, #4]

  /* Set PROG bit */
  SET_BIT(FLASH->PECR, FLASH_PECR_PROG);
 8002ac0:	4b08      	ldr	r3, [pc, #32]	; (8002ae4 <FLASH_PageErase+0x40>)
 8002ac2:	685a      	ldr	r2, [r3, #4]
 8002ac4:	4b07      	ldr	r3, [pc, #28]	; (8002ae4 <FLASH_PageErase+0x40>)
 8002ac6:	2108      	movs	r1, #8
 8002ac8:	430a      	orrs	r2, r1
 8002aca:	605a      	str	r2, [r3, #4]

  /* Write 00000000h to the first word of the program page to erase */
  *(__IO uint32_t *)(uint32_t)(PageAddress & ~(FLASH_PAGE_SIZE - 1)) = 0x00000000;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	227f      	movs	r2, #127	; 0x7f
 8002ad0:	4393      	bics	r3, r2
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	601a      	str	r2, [r3, #0]
}
 8002ad6:	46c0      	nop			; (mov r8, r8)
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	b002      	add	sp, #8
 8002adc:	bd80      	pop	{r7, pc}
 8002ade:	46c0      	nop			; (mov r8, r8)
 8002ae0:	20000320 	.word	0x20000320
 8002ae4:	40022000 	.word	0x40022000

08002ae8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b086      	sub	sp, #24
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
 8002af0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002af2:	2300      	movs	r3, #0
 8002af4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002af6:	2300      	movs	r3, #0
 8002af8:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8002afa:	2300      	movs	r3, #0
 8002afc:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8002afe:	e155      	b.n	8002dac <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	2101      	movs	r1, #1
 8002b06:	697a      	ldr	r2, [r7, #20]
 8002b08:	4091      	lsls	r1, r2
 8002b0a:	000a      	movs	r2, r1
 8002b0c:	4013      	ands	r3, r2
 8002b0e:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d100      	bne.n	8002b18 <HAL_GPIO_Init+0x30>
 8002b16:	e146      	b.n	8002da6 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	2203      	movs	r2, #3
 8002b1e:	4013      	ands	r3, r2
 8002b20:	2b01      	cmp	r3, #1
 8002b22:	d005      	beq.n	8002b30 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	2203      	movs	r2, #3
 8002b2a:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002b2c:	2b02      	cmp	r3, #2
 8002b2e:	d130      	bne.n	8002b92 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	689b      	ldr	r3, [r3, #8]
 8002b34:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8002b36:	697b      	ldr	r3, [r7, #20]
 8002b38:	005b      	lsls	r3, r3, #1
 8002b3a:	2203      	movs	r2, #3
 8002b3c:	409a      	lsls	r2, r3
 8002b3e:	0013      	movs	r3, r2
 8002b40:	43da      	mvns	r2, r3
 8002b42:	693b      	ldr	r3, [r7, #16]
 8002b44:	4013      	ands	r3, r2
 8002b46:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	68da      	ldr	r2, [r3, #12]
 8002b4c:	697b      	ldr	r3, [r7, #20]
 8002b4e:	005b      	lsls	r3, r3, #1
 8002b50:	409a      	lsls	r2, r3
 8002b52:	0013      	movs	r3, r2
 8002b54:	693a      	ldr	r2, [r7, #16]
 8002b56:	4313      	orrs	r3, r2
 8002b58:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	693a      	ldr	r2, [r7, #16]
 8002b5e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b66:	2201      	movs	r2, #1
 8002b68:	697b      	ldr	r3, [r7, #20]
 8002b6a:	409a      	lsls	r2, r3
 8002b6c:	0013      	movs	r3, r2
 8002b6e:	43da      	mvns	r2, r3
 8002b70:	693b      	ldr	r3, [r7, #16]
 8002b72:	4013      	ands	r3, r2
 8002b74:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	091b      	lsrs	r3, r3, #4
 8002b7c:	2201      	movs	r2, #1
 8002b7e:	401a      	ands	r2, r3
 8002b80:	697b      	ldr	r3, [r7, #20]
 8002b82:	409a      	lsls	r2, r3
 8002b84:	0013      	movs	r3, r2
 8002b86:	693a      	ldr	r2, [r7, #16]
 8002b88:	4313      	orrs	r3, r2
 8002b8a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	693a      	ldr	r2, [r7, #16]
 8002b90:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	2203      	movs	r2, #3
 8002b98:	4013      	ands	r3, r2
 8002b9a:	2b03      	cmp	r3, #3
 8002b9c:	d017      	beq.n	8002bce <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	68db      	ldr	r3, [r3, #12]
 8002ba2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002ba4:	697b      	ldr	r3, [r7, #20]
 8002ba6:	005b      	lsls	r3, r3, #1
 8002ba8:	2203      	movs	r2, #3
 8002baa:	409a      	lsls	r2, r3
 8002bac:	0013      	movs	r3, r2
 8002bae:	43da      	mvns	r2, r3
 8002bb0:	693b      	ldr	r3, [r7, #16]
 8002bb2:	4013      	ands	r3, r2
 8002bb4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	689a      	ldr	r2, [r3, #8]
 8002bba:	697b      	ldr	r3, [r7, #20]
 8002bbc:	005b      	lsls	r3, r3, #1
 8002bbe:	409a      	lsls	r2, r3
 8002bc0:	0013      	movs	r3, r2
 8002bc2:	693a      	ldr	r2, [r7, #16]
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	693a      	ldr	r2, [r7, #16]
 8002bcc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	2203      	movs	r2, #3
 8002bd4:	4013      	ands	r3, r2
 8002bd6:	2b02      	cmp	r3, #2
 8002bd8:	d123      	bne.n	8002c22 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002bda:	697b      	ldr	r3, [r7, #20]
 8002bdc:	08da      	lsrs	r2, r3, #3
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	3208      	adds	r2, #8
 8002be2:	0092      	lsls	r2, r2, #2
 8002be4:	58d3      	ldr	r3, [r2, r3]
 8002be6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8002be8:	697b      	ldr	r3, [r7, #20]
 8002bea:	2207      	movs	r2, #7
 8002bec:	4013      	ands	r3, r2
 8002bee:	009b      	lsls	r3, r3, #2
 8002bf0:	220f      	movs	r2, #15
 8002bf2:	409a      	lsls	r2, r3
 8002bf4:	0013      	movs	r3, r2
 8002bf6:	43da      	mvns	r2, r3
 8002bf8:	693b      	ldr	r3, [r7, #16]
 8002bfa:	4013      	ands	r3, r2
 8002bfc:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	691a      	ldr	r2, [r3, #16]
 8002c02:	697b      	ldr	r3, [r7, #20]
 8002c04:	2107      	movs	r1, #7
 8002c06:	400b      	ands	r3, r1
 8002c08:	009b      	lsls	r3, r3, #2
 8002c0a:	409a      	lsls	r2, r3
 8002c0c:	0013      	movs	r3, r2
 8002c0e:	693a      	ldr	r2, [r7, #16]
 8002c10:	4313      	orrs	r3, r2
 8002c12:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002c14:	697b      	ldr	r3, [r7, #20]
 8002c16:	08da      	lsrs	r2, r3, #3
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	3208      	adds	r2, #8
 8002c1c:	0092      	lsls	r2, r2, #2
 8002c1e:	6939      	ldr	r1, [r7, #16]
 8002c20:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002c28:	697b      	ldr	r3, [r7, #20]
 8002c2a:	005b      	lsls	r3, r3, #1
 8002c2c:	2203      	movs	r2, #3
 8002c2e:	409a      	lsls	r2, r3
 8002c30:	0013      	movs	r3, r2
 8002c32:	43da      	mvns	r2, r3
 8002c34:	693b      	ldr	r3, [r7, #16]
 8002c36:	4013      	ands	r3, r2
 8002c38:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	2203      	movs	r2, #3
 8002c40:	401a      	ands	r2, r3
 8002c42:	697b      	ldr	r3, [r7, #20]
 8002c44:	005b      	lsls	r3, r3, #1
 8002c46:	409a      	lsls	r2, r3
 8002c48:	0013      	movs	r3, r2
 8002c4a:	693a      	ldr	r2, [r7, #16]
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	693a      	ldr	r2, [r7, #16]
 8002c54:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	685a      	ldr	r2, [r3, #4]
 8002c5a:	23c0      	movs	r3, #192	; 0xc0
 8002c5c:	029b      	lsls	r3, r3, #10
 8002c5e:	4013      	ands	r3, r2
 8002c60:	d100      	bne.n	8002c64 <HAL_GPIO_Init+0x17c>
 8002c62:	e0a0      	b.n	8002da6 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c64:	4b57      	ldr	r3, [pc, #348]	; (8002dc4 <HAL_GPIO_Init+0x2dc>)
 8002c66:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c68:	4b56      	ldr	r3, [pc, #344]	; (8002dc4 <HAL_GPIO_Init+0x2dc>)
 8002c6a:	2101      	movs	r1, #1
 8002c6c:	430a      	orrs	r2, r1
 8002c6e:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8002c70:	4a55      	ldr	r2, [pc, #340]	; (8002dc8 <HAL_GPIO_Init+0x2e0>)
 8002c72:	697b      	ldr	r3, [r7, #20]
 8002c74:	089b      	lsrs	r3, r3, #2
 8002c76:	3302      	adds	r3, #2
 8002c78:	009b      	lsls	r3, r3, #2
 8002c7a:	589b      	ldr	r3, [r3, r2]
 8002c7c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8002c7e:	697b      	ldr	r3, [r7, #20]
 8002c80:	2203      	movs	r2, #3
 8002c82:	4013      	ands	r3, r2
 8002c84:	009b      	lsls	r3, r3, #2
 8002c86:	220f      	movs	r2, #15
 8002c88:	409a      	lsls	r2, r3
 8002c8a:	0013      	movs	r3, r2
 8002c8c:	43da      	mvns	r2, r3
 8002c8e:	693b      	ldr	r3, [r7, #16]
 8002c90:	4013      	ands	r3, r2
 8002c92:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8002c94:	687a      	ldr	r2, [r7, #4]
 8002c96:	23a0      	movs	r3, #160	; 0xa0
 8002c98:	05db      	lsls	r3, r3, #23
 8002c9a:	429a      	cmp	r2, r3
 8002c9c:	d01f      	beq.n	8002cde <HAL_GPIO_Init+0x1f6>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	4a4a      	ldr	r2, [pc, #296]	; (8002dcc <HAL_GPIO_Init+0x2e4>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d019      	beq.n	8002cda <HAL_GPIO_Init+0x1f2>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	4a49      	ldr	r2, [pc, #292]	; (8002dd0 <HAL_GPIO_Init+0x2e8>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d013      	beq.n	8002cd6 <HAL_GPIO_Init+0x1ee>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	4a48      	ldr	r2, [pc, #288]	; (8002dd4 <HAL_GPIO_Init+0x2ec>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d00d      	beq.n	8002cd2 <HAL_GPIO_Init+0x1ea>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	4a47      	ldr	r2, [pc, #284]	; (8002dd8 <HAL_GPIO_Init+0x2f0>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d007      	beq.n	8002cce <HAL_GPIO_Init+0x1e6>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	4a46      	ldr	r2, [pc, #280]	; (8002ddc <HAL_GPIO_Init+0x2f4>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d101      	bne.n	8002cca <HAL_GPIO_Init+0x1e2>
 8002cc6:	2305      	movs	r3, #5
 8002cc8:	e00a      	b.n	8002ce0 <HAL_GPIO_Init+0x1f8>
 8002cca:	2306      	movs	r3, #6
 8002ccc:	e008      	b.n	8002ce0 <HAL_GPIO_Init+0x1f8>
 8002cce:	2304      	movs	r3, #4
 8002cd0:	e006      	b.n	8002ce0 <HAL_GPIO_Init+0x1f8>
 8002cd2:	2303      	movs	r3, #3
 8002cd4:	e004      	b.n	8002ce0 <HAL_GPIO_Init+0x1f8>
 8002cd6:	2302      	movs	r3, #2
 8002cd8:	e002      	b.n	8002ce0 <HAL_GPIO_Init+0x1f8>
 8002cda:	2301      	movs	r3, #1
 8002cdc:	e000      	b.n	8002ce0 <HAL_GPIO_Init+0x1f8>
 8002cde:	2300      	movs	r3, #0
 8002ce0:	697a      	ldr	r2, [r7, #20]
 8002ce2:	2103      	movs	r1, #3
 8002ce4:	400a      	ands	r2, r1
 8002ce6:	0092      	lsls	r2, r2, #2
 8002ce8:	4093      	lsls	r3, r2
 8002cea:	693a      	ldr	r2, [r7, #16]
 8002cec:	4313      	orrs	r3, r2
 8002cee:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002cf0:	4935      	ldr	r1, [pc, #212]	; (8002dc8 <HAL_GPIO_Init+0x2e0>)
 8002cf2:	697b      	ldr	r3, [r7, #20]
 8002cf4:	089b      	lsrs	r3, r3, #2
 8002cf6:	3302      	adds	r3, #2
 8002cf8:	009b      	lsls	r3, r3, #2
 8002cfa:	693a      	ldr	r2, [r7, #16]
 8002cfc:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002cfe:	4b38      	ldr	r3, [pc, #224]	; (8002de0 <HAL_GPIO_Init+0x2f8>)
 8002d00:	689b      	ldr	r3, [r3, #8]
 8002d02:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	43da      	mvns	r2, r3
 8002d08:	693b      	ldr	r3, [r7, #16]
 8002d0a:	4013      	ands	r3, r2
 8002d0c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	685a      	ldr	r2, [r3, #4]
 8002d12:	2380      	movs	r3, #128	; 0x80
 8002d14:	035b      	lsls	r3, r3, #13
 8002d16:	4013      	ands	r3, r2
 8002d18:	d003      	beq.n	8002d22 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8002d1a:	693a      	ldr	r2, [r7, #16]
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002d22:	4b2f      	ldr	r3, [pc, #188]	; (8002de0 <HAL_GPIO_Init+0x2f8>)
 8002d24:	693a      	ldr	r2, [r7, #16]
 8002d26:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002d28:	4b2d      	ldr	r3, [pc, #180]	; (8002de0 <HAL_GPIO_Init+0x2f8>)
 8002d2a:	68db      	ldr	r3, [r3, #12]
 8002d2c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	43da      	mvns	r2, r3
 8002d32:	693b      	ldr	r3, [r7, #16]
 8002d34:	4013      	ands	r3, r2
 8002d36:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	685a      	ldr	r2, [r3, #4]
 8002d3c:	2380      	movs	r3, #128	; 0x80
 8002d3e:	039b      	lsls	r3, r3, #14
 8002d40:	4013      	ands	r3, r2
 8002d42:	d003      	beq.n	8002d4c <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8002d44:	693a      	ldr	r2, [r7, #16]
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002d4c:	4b24      	ldr	r3, [pc, #144]	; (8002de0 <HAL_GPIO_Init+0x2f8>)
 8002d4e:	693a      	ldr	r2, [r7, #16]
 8002d50:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8002d52:	4b23      	ldr	r3, [pc, #140]	; (8002de0 <HAL_GPIO_Init+0x2f8>)
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	43da      	mvns	r2, r3
 8002d5c:	693b      	ldr	r3, [r7, #16]
 8002d5e:	4013      	ands	r3, r2
 8002d60:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	685a      	ldr	r2, [r3, #4]
 8002d66:	2380      	movs	r3, #128	; 0x80
 8002d68:	029b      	lsls	r3, r3, #10
 8002d6a:	4013      	ands	r3, r2
 8002d6c:	d003      	beq.n	8002d76 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8002d6e:	693a      	ldr	r2, [r7, #16]
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	4313      	orrs	r3, r2
 8002d74:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002d76:	4b1a      	ldr	r3, [pc, #104]	; (8002de0 <HAL_GPIO_Init+0x2f8>)
 8002d78:	693a      	ldr	r2, [r7, #16]
 8002d7a:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002d7c:	4b18      	ldr	r3, [pc, #96]	; (8002de0 <HAL_GPIO_Init+0x2f8>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	43da      	mvns	r2, r3
 8002d86:	693b      	ldr	r3, [r7, #16]
 8002d88:	4013      	ands	r3, r2
 8002d8a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	685a      	ldr	r2, [r3, #4]
 8002d90:	2380      	movs	r3, #128	; 0x80
 8002d92:	025b      	lsls	r3, r3, #9
 8002d94:	4013      	ands	r3, r2
 8002d96:	d003      	beq.n	8002da0 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8002d98:	693a      	ldr	r2, [r7, #16]
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	4313      	orrs	r3, r2
 8002d9e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002da0:	4b0f      	ldr	r3, [pc, #60]	; (8002de0 <HAL_GPIO_Init+0x2f8>)
 8002da2:	693a      	ldr	r2, [r7, #16]
 8002da4:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8002da6:	697b      	ldr	r3, [r7, #20]
 8002da8:	3301      	adds	r3, #1
 8002daa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	681a      	ldr	r2, [r3, #0]
 8002db0:	697b      	ldr	r3, [r7, #20]
 8002db2:	40da      	lsrs	r2, r3
 8002db4:	1e13      	subs	r3, r2, #0
 8002db6:	d000      	beq.n	8002dba <HAL_GPIO_Init+0x2d2>
 8002db8:	e6a2      	b.n	8002b00 <HAL_GPIO_Init+0x18>
  }
}
 8002dba:	46c0      	nop			; (mov r8, r8)
 8002dbc:	46c0      	nop			; (mov r8, r8)
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	b006      	add	sp, #24
 8002dc2:	bd80      	pop	{r7, pc}
 8002dc4:	40021000 	.word	0x40021000
 8002dc8:	40010000 	.word	0x40010000
 8002dcc:	50000400 	.word	0x50000400
 8002dd0:	50000800 	.word	0x50000800
 8002dd4:	50000c00 	.word	0x50000c00
 8002dd8:	50001000 	.word	0x50001000
 8002ddc:	50001c00 	.word	0x50001c00
 8002de0:	40010400 	.word	0x40010400

08002de4 <HAL_PWR_ConfigPVD>:
  *         more details about the voltage threshold corresponding to each
  *         detection level.
  * @retval None
  */
void HAL_PWR_ConfigPVD(PWR_PVDTypeDef *sConfigPVD)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b082      	sub	sp, #8
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_PVD_LEVEL(sConfigPVD->PVDLevel));
  assert_param(IS_PWR_PVD_MODE(sConfigPVD->Mode));

  /* Set PLS[7:5] bits according to PVDLevel value */
  MODIFY_REG(PWR->CR, PWR_CR_PLS, sConfigPVD->PVDLevel);
 8002dec:	4b2b      	ldr	r3, [pc, #172]	; (8002e9c <HAL_PWR_ConfigPVD+0xb8>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	22e0      	movs	r2, #224	; 0xe0
 8002df2:	4393      	bics	r3, r2
 8002df4:	0019      	movs	r1, r3
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681a      	ldr	r2, [r3, #0]
 8002dfa:	4b28      	ldr	r3, [pc, #160]	; (8002e9c <HAL_PWR_ConfigPVD+0xb8>)
 8002dfc:	430a      	orrs	r2, r1
 8002dfe:	601a      	str	r2, [r3, #0]
  
  /* Clear any previous config. Keep it clear if no event or IT mode is selected */
  __HAL_PWR_PVD_EXTI_DISABLE_EVENT();
 8002e00:	4b27      	ldr	r3, [pc, #156]	; (8002ea0 <HAL_PWR_ConfigPVD+0xbc>)
 8002e02:	685a      	ldr	r2, [r3, #4]
 8002e04:	4b26      	ldr	r3, [pc, #152]	; (8002ea0 <HAL_PWR_ConfigPVD+0xbc>)
 8002e06:	4927      	ldr	r1, [pc, #156]	; (8002ea4 <HAL_PWR_ConfigPVD+0xc0>)
 8002e08:	400a      	ands	r2, r1
 8002e0a:	605a      	str	r2, [r3, #4]
  __HAL_PWR_PVD_EXTI_DISABLE_IT();
 8002e0c:	4b24      	ldr	r3, [pc, #144]	; (8002ea0 <HAL_PWR_ConfigPVD+0xbc>)
 8002e0e:	681a      	ldr	r2, [r3, #0]
 8002e10:	4b23      	ldr	r3, [pc, #140]	; (8002ea0 <HAL_PWR_ConfigPVD+0xbc>)
 8002e12:	4924      	ldr	r1, [pc, #144]	; (8002ea4 <HAL_PWR_ConfigPVD+0xc0>)
 8002e14:	400a      	ands	r2, r1
 8002e16:	601a      	str	r2, [r3, #0]
  __HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE(); 
 8002e18:	4b21      	ldr	r3, [pc, #132]	; (8002ea0 <HAL_PWR_ConfigPVD+0xbc>)
 8002e1a:	68da      	ldr	r2, [r3, #12]
 8002e1c:	4b20      	ldr	r3, [pc, #128]	; (8002ea0 <HAL_PWR_ConfigPVD+0xbc>)
 8002e1e:	4921      	ldr	r1, [pc, #132]	; (8002ea4 <HAL_PWR_ConfigPVD+0xc0>)
 8002e20:	400a      	ands	r2, r1
 8002e22:	60da      	str	r2, [r3, #12]
  __HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE();
 8002e24:	4b1e      	ldr	r3, [pc, #120]	; (8002ea0 <HAL_PWR_ConfigPVD+0xbc>)
 8002e26:	689a      	ldr	r2, [r3, #8]
 8002e28:	4b1d      	ldr	r3, [pc, #116]	; (8002ea0 <HAL_PWR_ConfigPVD+0xbc>)
 8002e2a:	491e      	ldr	r1, [pc, #120]	; (8002ea4 <HAL_PWR_ConfigPVD+0xc0>)
 8002e2c:	400a      	ands	r2, r1
 8002e2e:	609a      	str	r2, [r3, #8]

  /* Configure interrupt mode */
  if((sConfigPVD->Mode & PVD_MODE_IT) == PVD_MODE_IT)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	685a      	ldr	r2, [r3, #4]
 8002e34:	2380      	movs	r3, #128	; 0x80
 8002e36:	025b      	lsls	r3, r3, #9
 8002e38:	4013      	ands	r3, r2
 8002e3a:	d006      	beq.n	8002e4a <HAL_PWR_ConfigPVD+0x66>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_IT();
 8002e3c:	4b18      	ldr	r3, [pc, #96]	; (8002ea0 <HAL_PWR_ConfigPVD+0xbc>)
 8002e3e:	681a      	ldr	r2, [r3, #0]
 8002e40:	4b17      	ldr	r3, [pc, #92]	; (8002ea0 <HAL_PWR_ConfigPVD+0xbc>)
 8002e42:	2180      	movs	r1, #128	; 0x80
 8002e44:	0249      	lsls	r1, r1, #9
 8002e46:	430a      	orrs	r2, r1
 8002e48:	601a      	str	r2, [r3, #0]
  }
  
  /* Configure event mode */
  if((sConfigPVD->Mode & PVD_MODE_EVT) == PVD_MODE_EVT)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	685a      	ldr	r2, [r3, #4]
 8002e4e:	2380      	movs	r3, #128	; 0x80
 8002e50:	029b      	lsls	r3, r3, #10
 8002e52:	4013      	ands	r3, r2
 8002e54:	d006      	beq.n	8002e64 <HAL_PWR_ConfigPVD+0x80>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_EVENT();
 8002e56:	4b12      	ldr	r3, [pc, #72]	; (8002ea0 <HAL_PWR_ConfigPVD+0xbc>)
 8002e58:	685a      	ldr	r2, [r3, #4]
 8002e5a:	4b11      	ldr	r3, [pc, #68]	; (8002ea0 <HAL_PWR_ConfigPVD+0xbc>)
 8002e5c:	2180      	movs	r1, #128	; 0x80
 8002e5e:	0249      	lsls	r1, r1, #9
 8002e60:	430a      	orrs	r2, r1
 8002e62:	605a      	str	r2, [r3, #4]
  }
  
  /* Configure the edge */
  if((sConfigPVD->Mode & PVD_RISING_EDGE) == PVD_RISING_EDGE)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	2201      	movs	r2, #1
 8002e6a:	4013      	ands	r3, r2
 8002e6c:	d006      	beq.n	8002e7c <HAL_PWR_ConfigPVD+0x98>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE();
 8002e6e:	4b0c      	ldr	r3, [pc, #48]	; (8002ea0 <HAL_PWR_ConfigPVD+0xbc>)
 8002e70:	689a      	ldr	r2, [r3, #8]
 8002e72:	4b0b      	ldr	r3, [pc, #44]	; (8002ea0 <HAL_PWR_ConfigPVD+0xbc>)
 8002e74:	2180      	movs	r1, #128	; 0x80
 8002e76:	0249      	lsls	r1, r1, #9
 8002e78:	430a      	orrs	r2, r1
 8002e7a:	609a      	str	r2, [r3, #8]
  }
  
  if((sConfigPVD->Mode & PVD_FALLING_EDGE) == PVD_FALLING_EDGE)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	2202      	movs	r2, #2
 8002e82:	4013      	ands	r3, r2
 8002e84:	d006      	beq.n	8002e94 <HAL_PWR_ConfigPVD+0xb0>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE();
 8002e86:	4b06      	ldr	r3, [pc, #24]	; (8002ea0 <HAL_PWR_ConfigPVD+0xbc>)
 8002e88:	68da      	ldr	r2, [r3, #12]
 8002e8a:	4b05      	ldr	r3, [pc, #20]	; (8002ea0 <HAL_PWR_ConfigPVD+0xbc>)
 8002e8c:	2180      	movs	r1, #128	; 0x80
 8002e8e:	0249      	lsls	r1, r1, #9
 8002e90:	430a      	orrs	r2, r1
 8002e92:	60da      	str	r2, [r3, #12]
  }
}
 8002e94:	46c0      	nop			; (mov r8, r8)
 8002e96:	46bd      	mov	sp, r7
 8002e98:	b002      	add	sp, #8
 8002e9a:	bd80      	pop	{r7, pc}
 8002e9c:	40007000 	.word	0x40007000
 8002ea0:	40010400 	.word	0x40010400
 8002ea4:	fffeffff 	.word	0xfffeffff

08002ea8 <HAL_PWR_EnablePVD>:
/**
  * @brief Enables the Power Voltage Detector(PVD).
  * @retval None
  */
void HAL_PWR_EnablePVD(void)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	af00      	add	r7, sp, #0
  /* Enable the power voltage detector */
  SET_BIT(PWR->CR, PWR_CR_PVDE);
 8002eac:	4b04      	ldr	r3, [pc, #16]	; (8002ec0 <HAL_PWR_EnablePVD+0x18>)
 8002eae:	681a      	ldr	r2, [r3, #0]
 8002eb0:	4b03      	ldr	r3, [pc, #12]	; (8002ec0 <HAL_PWR_EnablePVD+0x18>)
 8002eb2:	2110      	movs	r1, #16
 8002eb4:	430a      	orrs	r2, r1
 8002eb6:	601a      	str	r2, [r3, #0]
}
 8002eb8:	46c0      	nop			; (mov r8, r8)
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}
 8002ebe:	46c0      	nop			; (mov r8, r8)
 8002ec0:	40007000 	.word	0x40007000

08002ec4 <HAL_PWR_PVD_IRQHandler>:
  * @brief This function handles the PWR PVD interrupt request.
  * @note This API should be called under the PVD_IRQHandler().
  * @retval None
  */
void HAL_PWR_PVD_IRQHandler(void)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	af00      	add	r7, sp, #0
  /* Check PWR exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
 8002ec8:	4b07      	ldr	r3, [pc, #28]	; (8002ee8 <HAL_PWR_PVD_IRQHandler+0x24>)
 8002eca:	695a      	ldr	r2, [r3, #20]
 8002ecc:	2380      	movs	r3, #128	; 0x80
 8002ece:	025b      	lsls	r3, r3, #9
 8002ed0:	4013      	ands	r3, r2
 8002ed2:	d005      	beq.n	8002ee0 <HAL_PWR_PVD_IRQHandler+0x1c>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 8002ed4:	f7fe f92a 	bl	800112c <HAL_PWR_PVDCallback>

    /* Clear PWR Exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 8002ed8:	4b03      	ldr	r3, [pc, #12]	; (8002ee8 <HAL_PWR_PVD_IRQHandler+0x24>)
 8002eda:	2280      	movs	r2, #128	; 0x80
 8002edc:	0252      	lsls	r2, r2, #9
 8002ede:	615a      	str	r2, [r3, #20]
  }
}
 8002ee0:	46c0      	nop			; (mov r8, r8)
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}
 8002ee6:	46c0      	nop			; (mov r8, r8)
 8002ee8:	40010400 	.word	0x40010400

08002eec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002eec:	b5b0      	push	{r4, r5, r7, lr}
 8002eee:	b08a      	sub	sp, #40	; 0x28
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d102      	bne.n	8002f00 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002efa:	2301      	movs	r3, #1
 8002efc:	f000 fbbf 	bl	800367e <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f00:	4bc9      	ldr	r3, [pc, #804]	; (8003228 <HAL_RCC_OscConfig+0x33c>)
 8002f02:	68db      	ldr	r3, [r3, #12]
 8002f04:	220c      	movs	r2, #12
 8002f06:	4013      	ands	r3, r2
 8002f08:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002f0a:	4bc7      	ldr	r3, [pc, #796]	; (8003228 <HAL_RCC_OscConfig+0x33c>)
 8002f0c:	68da      	ldr	r2, [r3, #12]
 8002f0e:	2380      	movs	r3, #128	; 0x80
 8002f10:	025b      	lsls	r3, r3, #9
 8002f12:	4013      	ands	r3, r2
 8002f14:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	2201      	movs	r2, #1
 8002f1c:	4013      	ands	r3, r2
 8002f1e:	d100      	bne.n	8002f22 <HAL_RCC_OscConfig+0x36>
 8002f20:	e07e      	b.n	8003020 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002f22:	69fb      	ldr	r3, [r7, #28]
 8002f24:	2b08      	cmp	r3, #8
 8002f26:	d007      	beq.n	8002f38 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002f28:	69fb      	ldr	r3, [r7, #28]
 8002f2a:	2b0c      	cmp	r3, #12
 8002f2c:	d112      	bne.n	8002f54 <HAL_RCC_OscConfig+0x68>
 8002f2e:	69ba      	ldr	r2, [r7, #24]
 8002f30:	2380      	movs	r3, #128	; 0x80
 8002f32:	025b      	lsls	r3, r3, #9
 8002f34:	429a      	cmp	r2, r3
 8002f36:	d10d      	bne.n	8002f54 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f38:	4bbb      	ldr	r3, [pc, #748]	; (8003228 <HAL_RCC_OscConfig+0x33c>)
 8002f3a:	681a      	ldr	r2, [r3, #0]
 8002f3c:	2380      	movs	r3, #128	; 0x80
 8002f3e:	029b      	lsls	r3, r3, #10
 8002f40:	4013      	ands	r3, r2
 8002f42:	d100      	bne.n	8002f46 <HAL_RCC_OscConfig+0x5a>
 8002f44:	e06b      	b.n	800301e <HAL_RCC_OscConfig+0x132>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d167      	bne.n	800301e <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	f000 fb95 	bl	800367e <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	685a      	ldr	r2, [r3, #4]
 8002f58:	2380      	movs	r3, #128	; 0x80
 8002f5a:	025b      	lsls	r3, r3, #9
 8002f5c:	429a      	cmp	r2, r3
 8002f5e:	d107      	bne.n	8002f70 <HAL_RCC_OscConfig+0x84>
 8002f60:	4bb1      	ldr	r3, [pc, #708]	; (8003228 <HAL_RCC_OscConfig+0x33c>)
 8002f62:	681a      	ldr	r2, [r3, #0]
 8002f64:	4bb0      	ldr	r3, [pc, #704]	; (8003228 <HAL_RCC_OscConfig+0x33c>)
 8002f66:	2180      	movs	r1, #128	; 0x80
 8002f68:	0249      	lsls	r1, r1, #9
 8002f6a:	430a      	orrs	r2, r1
 8002f6c:	601a      	str	r2, [r3, #0]
 8002f6e:	e027      	b.n	8002fc0 <HAL_RCC_OscConfig+0xd4>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	685a      	ldr	r2, [r3, #4]
 8002f74:	23a0      	movs	r3, #160	; 0xa0
 8002f76:	02db      	lsls	r3, r3, #11
 8002f78:	429a      	cmp	r2, r3
 8002f7a:	d10e      	bne.n	8002f9a <HAL_RCC_OscConfig+0xae>
 8002f7c:	4baa      	ldr	r3, [pc, #680]	; (8003228 <HAL_RCC_OscConfig+0x33c>)
 8002f7e:	681a      	ldr	r2, [r3, #0]
 8002f80:	4ba9      	ldr	r3, [pc, #676]	; (8003228 <HAL_RCC_OscConfig+0x33c>)
 8002f82:	2180      	movs	r1, #128	; 0x80
 8002f84:	02c9      	lsls	r1, r1, #11
 8002f86:	430a      	orrs	r2, r1
 8002f88:	601a      	str	r2, [r3, #0]
 8002f8a:	4ba7      	ldr	r3, [pc, #668]	; (8003228 <HAL_RCC_OscConfig+0x33c>)
 8002f8c:	681a      	ldr	r2, [r3, #0]
 8002f8e:	4ba6      	ldr	r3, [pc, #664]	; (8003228 <HAL_RCC_OscConfig+0x33c>)
 8002f90:	2180      	movs	r1, #128	; 0x80
 8002f92:	0249      	lsls	r1, r1, #9
 8002f94:	430a      	orrs	r2, r1
 8002f96:	601a      	str	r2, [r3, #0]
 8002f98:	e012      	b.n	8002fc0 <HAL_RCC_OscConfig+0xd4>
 8002f9a:	4ba3      	ldr	r3, [pc, #652]	; (8003228 <HAL_RCC_OscConfig+0x33c>)
 8002f9c:	681a      	ldr	r2, [r3, #0]
 8002f9e:	4ba2      	ldr	r3, [pc, #648]	; (8003228 <HAL_RCC_OscConfig+0x33c>)
 8002fa0:	49a2      	ldr	r1, [pc, #648]	; (800322c <HAL_RCC_OscConfig+0x340>)
 8002fa2:	400a      	ands	r2, r1
 8002fa4:	601a      	str	r2, [r3, #0]
 8002fa6:	4ba0      	ldr	r3, [pc, #640]	; (8003228 <HAL_RCC_OscConfig+0x33c>)
 8002fa8:	681a      	ldr	r2, [r3, #0]
 8002faa:	2380      	movs	r3, #128	; 0x80
 8002fac:	025b      	lsls	r3, r3, #9
 8002fae:	4013      	ands	r3, r2
 8002fb0:	60fb      	str	r3, [r7, #12]
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	4b9c      	ldr	r3, [pc, #624]	; (8003228 <HAL_RCC_OscConfig+0x33c>)
 8002fb6:	681a      	ldr	r2, [r3, #0]
 8002fb8:	4b9b      	ldr	r3, [pc, #620]	; (8003228 <HAL_RCC_OscConfig+0x33c>)
 8002fba:	499d      	ldr	r1, [pc, #628]	; (8003230 <HAL_RCC_OscConfig+0x344>)
 8002fbc:	400a      	ands	r2, r1
 8002fbe:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d015      	beq.n	8002ff4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fc8:	f7ff f9c0 	bl	800234c <HAL_GetTick>
 8002fcc:	0003      	movs	r3, r0
 8002fce:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002fd0:	e009      	b.n	8002fe6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002fd2:	f7ff f9bb 	bl	800234c <HAL_GetTick>
 8002fd6:	0002      	movs	r2, r0
 8002fd8:	697b      	ldr	r3, [r7, #20]
 8002fda:	1ad3      	subs	r3, r2, r3
 8002fdc:	2b64      	cmp	r3, #100	; 0x64
 8002fde:	d902      	bls.n	8002fe6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002fe0:	2303      	movs	r3, #3
 8002fe2:	f000 fb4c 	bl	800367e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002fe6:	4b90      	ldr	r3, [pc, #576]	; (8003228 <HAL_RCC_OscConfig+0x33c>)
 8002fe8:	681a      	ldr	r2, [r3, #0]
 8002fea:	2380      	movs	r3, #128	; 0x80
 8002fec:	029b      	lsls	r3, r3, #10
 8002fee:	4013      	ands	r3, r2
 8002ff0:	d0ef      	beq.n	8002fd2 <HAL_RCC_OscConfig+0xe6>
 8002ff2:	e015      	b.n	8003020 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ff4:	f7ff f9aa 	bl	800234c <HAL_GetTick>
 8002ff8:	0003      	movs	r3, r0
 8002ffa:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002ffc:	e008      	b.n	8003010 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ffe:	f7ff f9a5 	bl	800234c <HAL_GetTick>
 8003002:	0002      	movs	r2, r0
 8003004:	697b      	ldr	r3, [r7, #20]
 8003006:	1ad3      	subs	r3, r2, r3
 8003008:	2b64      	cmp	r3, #100	; 0x64
 800300a:	d901      	bls.n	8003010 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 800300c:	2303      	movs	r3, #3
 800300e:	e336      	b.n	800367e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003010:	4b85      	ldr	r3, [pc, #532]	; (8003228 <HAL_RCC_OscConfig+0x33c>)
 8003012:	681a      	ldr	r2, [r3, #0]
 8003014:	2380      	movs	r3, #128	; 0x80
 8003016:	029b      	lsls	r3, r3, #10
 8003018:	4013      	ands	r3, r2
 800301a:	d1f0      	bne.n	8002ffe <HAL_RCC_OscConfig+0x112>
 800301c:	e000      	b.n	8003020 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800301e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	2202      	movs	r2, #2
 8003026:	4013      	ands	r3, r2
 8003028:	d100      	bne.n	800302c <HAL_RCC_OscConfig+0x140>
 800302a:	e099      	b.n	8003160 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	68db      	ldr	r3, [r3, #12]
 8003030:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8003032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003034:	2220      	movs	r2, #32
 8003036:	4013      	ands	r3, r2
 8003038:	d009      	beq.n	800304e <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 800303a:	4b7b      	ldr	r3, [pc, #492]	; (8003228 <HAL_RCC_OscConfig+0x33c>)
 800303c:	681a      	ldr	r2, [r3, #0]
 800303e:	4b7a      	ldr	r3, [pc, #488]	; (8003228 <HAL_RCC_OscConfig+0x33c>)
 8003040:	2120      	movs	r1, #32
 8003042:	430a      	orrs	r2, r1
 8003044:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8003046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003048:	2220      	movs	r2, #32
 800304a:	4393      	bics	r3, r2
 800304c:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800304e:	69fb      	ldr	r3, [r7, #28]
 8003050:	2b04      	cmp	r3, #4
 8003052:	d005      	beq.n	8003060 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003054:	69fb      	ldr	r3, [r7, #28]
 8003056:	2b0c      	cmp	r3, #12
 8003058:	d13e      	bne.n	80030d8 <HAL_RCC_OscConfig+0x1ec>
 800305a:	69bb      	ldr	r3, [r7, #24]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d13b      	bne.n	80030d8 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8003060:	4b71      	ldr	r3, [pc, #452]	; (8003228 <HAL_RCC_OscConfig+0x33c>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	2204      	movs	r2, #4
 8003066:	4013      	ands	r3, r2
 8003068:	d004      	beq.n	8003074 <HAL_RCC_OscConfig+0x188>
 800306a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800306c:	2b00      	cmp	r3, #0
 800306e:	d101      	bne.n	8003074 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8003070:	2301      	movs	r3, #1
 8003072:	e304      	b.n	800367e <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003074:	4b6c      	ldr	r3, [pc, #432]	; (8003228 <HAL_RCC_OscConfig+0x33c>)
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	4a6e      	ldr	r2, [pc, #440]	; (8003234 <HAL_RCC_OscConfig+0x348>)
 800307a:	4013      	ands	r3, r2
 800307c:	0019      	movs	r1, r3
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	691b      	ldr	r3, [r3, #16]
 8003082:	021a      	lsls	r2, r3, #8
 8003084:	4b68      	ldr	r3, [pc, #416]	; (8003228 <HAL_RCC_OscConfig+0x33c>)
 8003086:	430a      	orrs	r2, r1
 8003088:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800308a:	4b67      	ldr	r3, [pc, #412]	; (8003228 <HAL_RCC_OscConfig+0x33c>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	2209      	movs	r2, #9
 8003090:	4393      	bics	r3, r2
 8003092:	0019      	movs	r1, r3
 8003094:	4b64      	ldr	r3, [pc, #400]	; (8003228 <HAL_RCC_OscConfig+0x33c>)
 8003096:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003098:	430a      	orrs	r2, r1
 800309a:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800309c:	f000 fc42 	bl	8003924 <HAL_RCC_GetSysClockFreq>
 80030a0:	0001      	movs	r1, r0
 80030a2:	4b61      	ldr	r3, [pc, #388]	; (8003228 <HAL_RCC_OscConfig+0x33c>)
 80030a4:	68db      	ldr	r3, [r3, #12]
 80030a6:	091b      	lsrs	r3, r3, #4
 80030a8:	220f      	movs	r2, #15
 80030aa:	4013      	ands	r3, r2
 80030ac:	4a62      	ldr	r2, [pc, #392]	; (8003238 <HAL_RCC_OscConfig+0x34c>)
 80030ae:	5cd3      	ldrb	r3, [r2, r3]
 80030b0:	000a      	movs	r2, r1
 80030b2:	40da      	lsrs	r2, r3
 80030b4:	4b61      	ldr	r3, [pc, #388]	; (800323c <HAL_RCC_OscConfig+0x350>)
 80030b6:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 80030b8:	4b61      	ldr	r3, [pc, #388]	; (8003240 <HAL_RCC_OscConfig+0x354>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	2513      	movs	r5, #19
 80030be:	197c      	adds	r4, r7, r5
 80030c0:	0018      	movs	r0, r3
 80030c2:	f7ff f8fd 	bl	80022c0 <HAL_InitTick>
 80030c6:	0003      	movs	r3, r0
 80030c8:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 80030ca:	197b      	adds	r3, r7, r5
 80030cc:	781b      	ldrb	r3, [r3, #0]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d046      	beq.n	8003160 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 80030d2:	197b      	adds	r3, r7, r5
 80030d4:	781b      	ldrb	r3, [r3, #0]
 80030d6:	e2d2      	b.n	800367e <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80030d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d027      	beq.n	800312e <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80030de:	4b52      	ldr	r3, [pc, #328]	; (8003228 <HAL_RCC_OscConfig+0x33c>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	2209      	movs	r2, #9
 80030e4:	4393      	bics	r3, r2
 80030e6:	0019      	movs	r1, r3
 80030e8:	4b4f      	ldr	r3, [pc, #316]	; (8003228 <HAL_RCC_OscConfig+0x33c>)
 80030ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030ec:	430a      	orrs	r2, r1
 80030ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030f0:	f7ff f92c 	bl	800234c <HAL_GetTick>
 80030f4:	0003      	movs	r3, r0
 80030f6:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80030f8:	e008      	b.n	800310c <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80030fa:	f7ff f927 	bl	800234c <HAL_GetTick>
 80030fe:	0002      	movs	r2, r0
 8003100:	697b      	ldr	r3, [r7, #20]
 8003102:	1ad3      	subs	r3, r2, r3
 8003104:	2b02      	cmp	r3, #2
 8003106:	d901      	bls.n	800310c <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 8003108:	2303      	movs	r3, #3
 800310a:	e2b8      	b.n	800367e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800310c:	4b46      	ldr	r3, [pc, #280]	; (8003228 <HAL_RCC_OscConfig+0x33c>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	2204      	movs	r2, #4
 8003112:	4013      	ands	r3, r2
 8003114:	d0f1      	beq.n	80030fa <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003116:	4b44      	ldr	r3, [pc, #272]	; (8003228 <HAL_RCC_OscConfig+0x33c>)
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	4a46      	ldr	r2, [pc, #280]	; (8003234 <HAL_RCC_OscConfig+0x348>)
 800311c:	4013      	ands	r3, r2
 800311e:	0019      	movs	r1, r3
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	691b      	ldr	r3, [r3, #16]
 8003124:	021a      	lsls	r2, r3, #8
 8003126:	4b40      	ldr	r3, [pc, #256]	; (8003228 <HAL_RCC_OscConfig+0x33c>)
 8003128:	430a      	orrs	r2, r1
 800312a:	605a      	str	r2, [r3, #4]
 800312c:	e018      	b.n	8003160 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800312e:	4b3e      	ldr	r3, [pc, #248]	; (8003228 <HAL_RCC_OscConfig+0x33c>)
 8003130:	681a      	ldr	r2, [r3, #0]
 8003132:	4b3d      	ldr	r3, [pc, #244]	; (8003228 <HAL_RCC_OscConfig+0x33c>)
 8003134:	2101      	movs	r1, #1
 8003136:	438a      	bics	r2, r1
 8003138:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800313a:	f7ff f907 	bl	800234c <HAL_GetTick>
 800313e:	0003      	movs	r3, r0
 8003140:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003142:	e008      	b.n	8003156 <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003144:	f7ff f902 	bl	800234c <HAL_GetTick>
 8003148:	0002      	movs	r2, r0
 800314a:	697b      	ldr	r3, [r7, #20]
 800314c:	1ad3      	subs	r3, r2, r3
 800314e:	2b02      	cmp	r3, #2
 8003150:	d901      	bls.n	8003156 <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 8003152:	2303      	movs	r3, #3
 8003154:	e293      	b.n	800367e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003156:	4b34      	ldr	r3, [pc, #208]	; (8003228 <HAL_RCC_OscConfig+0x33c>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	2204      	movs	r2, #4
 800315c:	4013      	ands	r3, r2
 800315e:	d1f1      	bne.n	8003144 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	2210      	movs	r2, #16
 8003166:	4013      	ands	r3, r2
 8003168:	d100      	bne.n	800316c <HAL_RCC_OscConfig+0x280>
 800316a:	e0a2      	b.n	80032b2 <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800316c:	69fb      	ldr	r3, [r7, #28]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d140      	bne.n	80031f4 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003172:	4b2d      	ldr	r3, [pc, #180]	; (8003228 <HAL_RCC_OscConfig+0x33c>)
 8003174:	681a      	ldr	r2, [r3, #0]
 8003176:	2380      	movs	r3, #128	; 0x80
 8003178:	009b      	lsls	r3, r3, #2
 800317a:	4013      	ands	r3, r2
 800317c:	d005      	beq.n	800318a <HAL_RCC_OscConfig+0x29e>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	69db      	ldr	r3, [r3, #28]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d101      	bne.n	800318a <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8003186:	2301      	movs	r3, #1
 8003188:	e279      	b.n	800367e <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800318a:	4b27      	ldr	r3, [pc, #156]	; (8003228 <HAL_RCC_OscConfig+0x33c>)
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	4a2d      	ldr	r2, [pc, #180]	; (8003244 <HAL_RCC_OscConfig+0x358>)
 8003190:	4013      	ands	r3, r2
 8003192:	0019      	movs	r1, r3
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003198:	4b23      	ldr	r3, [pc, #140]	; (8003228 <HAL_RCC_OscConfig+0x33c>)
 800319a:	430a      	orrs	r2, r1
 800319c:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800319e:	4b22      	ldr	r3, [pc, #136]	; (8003228 <HAL_RCC_OscConfig+0x33c>)
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	021b      	lsls	r3, r3, #8
 80031a4:	0a19      	lsrs	r1, r3, #8
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6a1b      	ldr	r3, [r3, #32]
 80031aa:	061a      	lsls	r2, r3, #24
 80031ac:	4b1e      	ldr	r3, [pc, #120]	; (8003228 <HAL_RCC_OscConfig+0x33c>)
 80031ae:	430a      	orrs	r2, r1
 80031b0:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031b6:	0b5b      	lsrs	r3, r3, #13
 80031b8:	3301      	adds	r3, #1
 80031ba:	2280      	movs	r2, #128	; 0x80
 80031bc:	0212      	lsls	r2, r2, #8
 80031be:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80031c0:	4b19      	ldr	r3, [pc, #100]	; (8003228 <HAL_RCC_OscConfig+0x33c>)
 80031c2:	68db      	ldr	r3, [r3, #12]
 80031c4:	091b      	lsrs	r3, r3, #4
 80031c6:	210f      	movs	r1, #15
 80031c8:	400b      	ands	r3, r1
 80031ca:	491b      	ldr	r1, [pc, #108]	; (8003238 <HAL_RCC_OscConfig+0x34c>)
 80031cc:	5ccb      	ldrb	r3, [r1, r3]
 80031ce:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80031d0:	4b1a      	ldr	r3, [pc, #104]	; (800323c <HAL_RCC_OscConfig+0x350>)
 80031d2:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 80031d4:	4b1a      	ldr	r3, [pc, #104]	; (8003240 <HAL_RCC_OscConfig+0x354>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	2513      	movs	r5, #19
 80031da:	197c      	adds	r4, r7, r5
 80031dc:	0018      	movs	r0, r3
 80031de:	f7ff f86f 	bl	80022c0 <HAL_InitTick>
 80031e2:	0003      	movs	r3, r0
 80031e4:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80031e6:	197b      	adds	r3, r7, r5
 80031e8:	781b      	ldrb	r3, [r3, #0]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d061      	beq.n	80032b2 <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 80031ee:	197b      	adds	r3, r7, r5
 80031f0:	781b      	ldrb	r3, [r3, #0]
 80031f2:	e244      	b.n	800367e <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	69db      	ldr	r3, [r3, #28]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d040      	beq.n	800327e <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80031fc:	4b0a      	ldr	r3, [pc, #40]	; (8003228 <HAL_RCC_OscConfig+0x33c>)
 80031fe:	681a      	ldr	r2, [r3, #0]
 8003200:	4b09      	ldr	r3, [pc, #36]	; (8003228 <HAL_RCC_OscConfig+0x33c>)
 8003202:	2180      	movs	r1, #128	; 0x80
 8003204:	0049      	lsls	r1, r1, #1
 8003206:	430a      	orrs	r2, r1
 8003208:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800320a:	f7ff f89f 	bl	800234c <HAL_GetTick>
 800320e:	0003      	movs	r3, r0
 8003210:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003212:	e019      	b.n	8003248 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003214:	f7ff f89a 	bl	800234c <HAL_GetTick>
 8003218:	0002      	movs	r2, r0
 800321a:	697b      	ldr	r3, [r7, #20]
 800321c:	1ad3      	subs	r3, r2, r3
 800321e:	2b02      	cmp	r3, #2
 8003220:	d912      	bls.n	8003248 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 8003222:	2303      	movs	r3, #3
 8003224:	e22b      	b.n	800367e <HAL_RCC_OscConfig+0x792>
 8003226:	46c0      	nop			; (mov r8, r8)
 8003228:	40021000 	.word	0x40021000
 800322c:	fffeffff 	.word	0xfffeffff
 8003230:	fffbffff 	.word	0xfffbffff
 8003234:	ffffe0ff 	.word	0xffffe0ff
 8003238:	080070b4 	.word	0x080070b4
 800323c:	20000120 	.word	0x20000120
 8003240:	20000124 	.word	0x20000124
 8003244:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003248:	4bca      	ldr	r3, [pc, #808]	; (8003574 <HAL_RCC_OscConfig+0x688>)
 800324a:	681a      	ldr	r2, [r3, #0]
 800324c:	2380      	movs	r3, #128	; 0x80
 800324e:	009b      	lsls	r3, r3, #2
 8003250:	4013      	ands	r3, r2
 8003252:	d0df      	beq.n	8003214 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003254:	4bc7      	ldr	r3, [pc, #796]	; (8003574 <HAL_RCC_OscConfig+0x688>)
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	4ac7      	ldr	r2, [pc, #796]	; (8003578 <HAL_RCC_OscConfig+0x68c>)
 800325a:	4013      	ands	r3, r2
 800325c:	0019      	movs	r1, r3
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003262:	4bc4      	ldr	r3, [pc, #784]	; (8003574 <HAL_RCC_OscConfig+0x688>)
 8003264:	430a      	orrs	r2, r1
 8003266:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003268:	4bc2      	ldr	r3, [pc, #776]	; (8003574 <HAL_RCC_OscConfig+0x688>)
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	021b      	lsls	r3, r3, #8
 800326e:	0a19      	lsrs	r1, r3, #8
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6a1b      	ldr	r3, [r3, #32]
 8003274:	061a      	lsls	r2, r3, #24
 8003276:	4bbf      	ldr	r3, [pc, #764]	; (8003574 <HAL_RCC_OscConfig+0x688>)
 8003278:	430a      	orrs	r2, r1
 800327a:	605a      	str	r2, [r3, #4]
 800327c:	e019      	b.n	80032b2 <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800327e:	4bbd      	ldr	r3, [pc, #756]	; (8003574 <HAL_RCC_OscConfig+0x688>)
 8003280:	681a      	ldr	r2, [r3, #0]
 8003282:	4bbc      	ldr	r3, [pc, #752]	; (8003574 <HAL_RCC_OscConfig+0x688>)
 8003284:	49bd      	ldr	r1, [pc, #756]	; (800357c <HAL_RCC_OscConfig+0x690>)
 8003286:	400a      	ands	r2, r1
 8003288:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800328a:	f7ff f85f 	bl	800234c <HAL_GetTick>
 800328e:	0003      	movs	r3, r0
 8003290:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8003292:	e008      	b.n	80032a6 <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003294:	f7ff f85a 	bl	800234c <HAL_GetTick>
 8003298:	0002      	movs	r2, r0
 800329a:	697b      	ldr	r3, [r7, #20]
 800329c:	1ad3      	subs	r3, r2, r3
 800329e:	2b02      	cmp	r3, #2
 80032a0:	d901      	bls.n	80032a6 <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 80032a2:	2303      	movs	r3, #3
 80032a4:	e1eb      	b.n	800367e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80032a6:	4bb3      	ldr	r3, [pc, #716]	; (8003574 <HAL_RCC_OscConfig+0x688>)
 80032a8:	681a      	ldr	r2, [r3, #0]
 80032aa:	2380      	movs	r3, #128	; 0x80
 80032ac:	009b      	lsls	r3, r3, #2
 80032ae:	4013      	ands	r3, r2
 80032b0:	d1f0      	bne.n	8003294 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	2208      	movs	r2, #8
 80032b8:	4013      	ands	r3, r2
 80032ba:	d036      	beq.n	800332a <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	695b      	ldr	r3, [r3, #20]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d019      	beq.n	80032f8 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80032c4:	4bab      	ldr	r3, [pc, #684]	; (8003574 <HAL_RCC_OscConfig+0x688>)
 80032c6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80032c8:	4baa      	ldr	r3, [pc, #680]	; (8003574 <HAL_RCC_OscConfig+0x688>)
 80032ca:	2101      	movs	r1, #1
 80032cc:	430a      	orrs	r2, r1
 80032ce:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032d0:	f7ff f83c 	bl	800234c <HAL_GetTick>
 80032d4:	0003      	movs	r3, r0
 80032d6:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80032d8:	e008      	b.n	80032ec <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80032da:	f7ff f837 	bl	800234c <HAL_GetTick>
 80032de:	0002      	movs	r2, r0
 80032e0:	697b      	ldr	r3, [r7, #20]
 80032e2:	1ad3      	subs	r3, r2, r3
 80032e4:	2b02      	cmp	r3, #2
 80032e6:	d901      	bls.n	80032ec <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 80032e8:	2303      	movs	r3, #3
 80032ea:	e1c8      	b.n	800367e <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80032ec:	4ba1      	ldr	r3, [pc, #644]	; (8003574 <HAL_RCC_OscConfig+0x688>)
 80032ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032f0:	2202      	movs	r2, #2
 80032f2:	4013      	ands	r3, r2
 80032f4:	d0f1      	beq.n	80032da <HAL_RCC_OscConfig+0x3ee>
 80032f6:	e018      	b.n	800332a <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032f8:	4b9e      	ldr	r3, [pc, #632]	; (8003574 <HAL_RCC_OscConfig+0x688>)
 80032fa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80032fc:	4b9d      	ldr	r3, [pc, #628]	; (8003574 <HAL_RCC_OscConfig+0x688>)
 80032fe:	2101      	movs	r1, #1
 8003300:	438a      	bics	r2, r1
 8003302:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003304:	f7ff f822 	bl	800234c <HAL_GetTick>
 8003308:	0003      	movs	r3, r0
 800330a:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800330c:	e008      	b.n	8003320 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800330e:	f7ff f81d 	bl	800234c <HAL_GetTick>
 8003312:	0002      	movs	r2, r0
 8003314:	697b      	ldr	r3, [r7, #20]
 8003316:	1ad3      	subs	r3, r2, r3
 8003318:	2b02      	cmp	r3, #2
 800331a:	d901      	bls.n	8003320 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 800331c:	2303      	movs	r3, #3
 800331e:	e1ae      	b.n	800367e <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003320:	4b94      	ldr	r3, [pc, #592]	; (8003574 <HAL_RCC_OscConfig+0x688>)
 8003322:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003324:	2202      	movs	r2, #2
 8003326:	4013      	ands	r3, r2
 8003328:	d1f1      	bne.n	800330e <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	2204      	movs	r2, #4
 8003330:	4013      	ands	r3, r2
 8003332:	d100      	bne.n	8003336 <HAL_RCC_OscConfig+0x44a>
 8003334:	e0ae      	b.n	8003494 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003336:	2023      	movs	r0, #35	; 0x23
 8003338:	183b      	adds	r3, r7, r0
 800333a:	2200      	movs	r2, #0
 800333c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800333e:	4b8d      	ldr	r3, [pc, #564]	; (8003574 <HAL_RCC_OscConfig+0x688>)
 8003340:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003342:	2380      	movs	r3, #128	; 0x80
 8003344:	055b      	lsls	r3, r3, #21
 8003346:	4013      	ands	r3, r2
 8003348:	d109      	bne.n	800335e <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800334a:	4b8a      	ldr	r3, [pc, #552]	; (8003574 <HAL_RCC_OscConfig+0x688>)
 800334c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800334e:	4b89      	ldr	r3, [pc, #548]	; (8003574 <HAL_RCC_OscConfig+0x688>)
 8003350:	2180      	movs	r1, #128	; 0x80
 8003352:	0549      	lsls	r1, r1, #21
 8003354:	430a      	orrs	r2, r1
 8003356:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8003358:	183b      	adds	r3, r7, r0
 800335a:	2201      	movs	r2, #1
 800335c:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800335e:	4b88      	ldr	r3, [pc, #544]	; (8003580 <HAL_RCC_OscConfig+0x694>)
 8003360:	681a      	ldr	r2, [r3, #0]
 8003362:	2380      	movs	r3, #128	; 0x80
 8003364:	005b      	lsls	r3, r3, #1
 8003366:	4013      	ands	r3, r2
 8003368:	d11a      	bne.n	80033a0 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800336a:	4b85      	ldr	r3, [pc, #532]	; (8003580 <HAL_RCC_OscConfig+0x694>)
 800336c:	681a      	ldr	r2, [r3, #0]
 800336e:	4b84      	ldr	r3, [pc, #528]	; (8003580 <HAL_RCC_OscConfig+0x694>)
 8003370:	2180      	movs	r1, #128	; 0x80
 8003372:	0049      	lsls	r1, r1, #1
 8003374:	430a      	orrs	r2, r1
 8003376:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003378:	f7fe ffe8 	bl	800234c <HAL_GetTick>
 800337c:	0003      	movs	r3, r0
 800337e:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003380:	e008      	b.n	8003394 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003382:	f7fe ffe3 	bl	800234c <HAL_GetTick>
 8003386:	0002      	movs	r2, r0
 8003388:	697b      	ldr	r3, [r7, #20]
 800338a:	1ad3      	subs	r3, r2, r3
 800338c:	2b64      	cmp	r3, #100	; 0x64
 800338e:	d901      	bls.n	8003394 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 8003390:	2303      	movs	r3, #3
 8003392:	e174      	b.n	800367e <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003394:	4b7a      	ldr	r3, [pc, #488]	; (8003580 <HAL_RCC_OscConfig+0x694>)
 8003396:	681a      	ldr	r2, [r3, #0]
 8003398:	2380      	movs	r3, #128	; 0x80
 800339a:	005b      	lsls	r3, r3, #1
 800339c:	4013      	ands	r3, r2
 800339e:	d0f0      	beq.n	8003382 <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	689a      	ldr	r2, [r3, #8]
 80033a4:	2380      	movs	r3, #128	; 0x80
 80033a6:	005b      	lsls	r3, r3, #1
 80033a8:	429a      	cmp	r2, r3
 80033aa:	d107      	bne.n	80033bc <HAL_RCC_OscConfig+0x4d0>
 80033ac:	4b71      	ldr	r3, [pc, #452]	; (8003574 <HAL_RCC_OscConfig+0x688>)
 80033ae:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80033b0:	4b70      	ldr	r3, [pc, #448]	; (8003574 <HAL_RCC_OscConfig+0x688>)
 80033b2:	2180      	movs	r1, #128	; 0x80
 80033b4:	0049      	lsls	r1, r1, #1
 80033b6:	430a      	orrs	r2, r1
 80033b8:	651a      	str	r2, [r3, #80]	; 0x50
 80033ba:	e031      	b.n	8003420 <HAL_RCC_OscConfig+0x534>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	689b      	ldr	r3, [r3, #8]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d10c      	bne.n	80033de <HAL_RCC_OscConfig+0x4f2>
 80033c4:	4b6b      	ldr	r3, [pc, #428]	; (8003574 <HAL_RCC_OscConfig+0x688>)
 80033c6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80033c8:	4b6a      	ldr	r3, [pc, #424]	; (8003574 <HAL_RCC_OscConfig+0x688>)
 80033ca:	496c      	ldr	r1, [pc, #432]	; (800357c <HAL_RCC_OscConfig+0x690>)
 80033cc:	400a      	ands	r2, r1
 80033ce:	651a      	str	r2, [r3, #80]	; 0x50
 80033d0:	4b68      	ldr	r3, [pc, #416]	; (8003574 <HAL_RCC_OscConfig+0x688>)
 80033d2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80033d4:	4b67      	ldr	r3, [pc, #412]	; (8003574 <HAL_RCC_OscConfig+0x688>)
 80033d6:	496b      	ldr	r1, [pc, #428]	; (8003584 <HAL_RCC_OscConfig+0x698>)
 80033d8:	400a      	ands	r2, r1
 80033da:	651a      	str	r2, [r3, #80]	; 0x50
 80033dc:	e020      	b.n	8003420 <HAL_RCC_OscConfig+0x534>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	689a      	ldr	r2, [r3, #8]
 80033e2:	23a0      	movs	r3, #160	; 0xa0
 80033e4:	00db      	lsls	r3, r3, #3
 80033e6:	429a      	cmp	r2, r3
 80033e8:	d10e      	bne.n	8003408 <HAL_RCC_OscConfig+0x51c>
 80033ea:	4b62      	ldr	r3, [pc, #392]	; (8003574 <HAL_RCC_OscConfig+0x688>)
 80033ec:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80033ee:	4b61      	ldr	r3, [pc, #388]	; (8003574 <HAL_RCC_OscConfig+0x688>)
 80033f0:	2180      	movs	r1, #128	; 0x80
 80033f2:	00c9      	lsls	r1, r1, #3
 80033f4:	430a      	orrs	r2, r1
 80033f6:	651a      	str	r2, [r3, #80]	; 0x50
 80033f8:	4b5e      	ldr	r3, [pc, #376]	; (8003574 <HAL_RCC_OscConfig+0x688>)
 80033fa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80033fc:	4b5d      	ldr	r3, [pc, #372]	; (8003574 <HAL_RCC_OscConfig+0x688>)
 80033fe:	2180      	movs	r1, #128	; 0x80
 8003400:	0049      	lsls	r1, r1, #1
 8003402:	430a      	orrs	r2, r1
 8003404:	651a      	str	r2, [r3, #80]	; 0x50
 8003406:	e00b      	b.n	8003420 <HAL_RCC_OscConfig+0x534>
 8003408:	4b5a      	ldr	r3, [pc, #360]	; (8003574 <HAL_RCC_OscConfig+0x688>)
 800340a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800340c:	4b59      	ldr	r3, [pc, #356]	; (8003574 <HAL_RCC_OscConfig+0x688>)
 800340e:	495b      	ldr	r1, [pc, #364]	; (800357c <HAL_RCC_OscConfig+0x690>)
 8003410:	400a      	ands	r2, r1
 8003412:	651a      	str	r2, [r3, #80]	; 0x50
 8003414:	4b57      	ldr	r3, [pc, #348]	; (8003574 <HAL_RCC_OscConfig+0x688>)
 8003416:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003418:	4b56      	ldr	r3, [pc, #344]	; (8003574 <HAL_RCC_OscConfig+0x688>)
 800341a:	495a      	ldr	r1, [pc, #360]	; (8003584 <HAL_RCC_OscConfig+0x698>)
 800341c:	400a      	ands	r2, r1
 800341e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	689b      	ldr	r3, [r3, #8]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d015      	beq.n	8003454 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003428:	f7fe ff90 	bl	800234c <HAL_GetTick>
 800342c:	0003      	movs	r3, r0
 800342e:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003430:	e009      	b.n	8003446 <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003432:	f7fe ff8b 	bl	800234c <HAL_GetTick>
 8003436:	0002      	movs	r2, r0
 8003438:	697b      	ldr	r3, [r7, #20]
 800343a:	1ad3      	subs	r3, r2, r3
 800343c:	4a52      	ldr	r2, [pc, #328]	; (8003588 <HAL_RCC_OscConfig+0x69c>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d901      	bls.n	8003446 <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 8003442:	2303      	movs	r3, #3
 8003444:	e11b      	b.n	800367e <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003446:	4b4b      	ldr	r3, [pc, #300]	; (8003574 <HAL_RCC_OscConfig+0x688>)
 8003448:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800344a:	2380      	movs	r3, #128	; 0x80
 800344c:	009b      	lsls	r3, r3, #2
 800344e:	4013      	ands	r3, r2
 8003450:	d0ef      	beq.n	8003432 <HAL_RCC_OscConfig+0x546>
 8003452:	e014      	b.n	800347e <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003454:	f7fe ff7a 	bl	800234c <HAL_GetTick>
 8003458:	0003      	movs	r3, r0
 800345a:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800345c:	e009      	b.n	8003472 <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800345e:	f7fe ff75 	bl	800234c <HAL_GetTick>
 8003462:	0002      	movs	r2, r0
 8003464:	697b      	ldr	r3, [r7, #20]
 8003466:	1ad3      	subs	r3, r2, r3
 8003468:	4a47      	ldr	r2, [pc, #284]	; (8003588 <HAL_RCC_OscConfig+0x69c>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d901      	bls.n	8003472 <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 800346e:	2303      	movs	r3, #3
 8003470:	e105      	b.n	800367e <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003472:	4b40      	ldr	r3, [pc, #256]	; (8003574 <HAL_RCC_OscConfig+0x688>)
 8003474:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003476:	2380      	movs	r3, #128	; 0x80
 8003478:	009b      	lsls	r3, r3, #2
 800347a:	4013      	ands	r3, r2
 800347c:	d1ef      	bne.n	800345e <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800347e:	2323      	movs	r3, #35	; 0x23
 8003480:	18fb      	adds	r3, r7, r3
 8003482:	781b      	ldrb	r3, [r3, #0]
 8003484:	2b01      	cmp	r3, #1
 8003486:	d105      	bne.n	8003494 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003488:	4b3a      	ldr	r3, [pc, #232]	; (8003574 <HAL_RCC_OscConfig+0x688>)
 800348a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800348c:	4b39      	ldr	r3, [pc, #228]	; (8003574 <HAL_RCC_OscConfig+0x688>)
 800348e:	493f      	ldr	r1, [pc, #252]	; (800358c <HAL_RCC_OscConfig+0x6a0>)
 8003490:	400a      	ands	r2, r1
 8003492:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	2220      	movs	r2, #32
 800349a:	4013      	ands	r3, r2
 800349c:	d049      	beq.n	8003532 <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	699b      	ldr	r3, [r3, #24]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d026      	beq.n	80034f4 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80034a6:	4b33      	ldr	r3, [pc, #204]	; (8003574 <HAL_RCC_OscConfig+0x688>)
 80034a8:	689a      	ldr	r2, [r3, #8]
 80034aa:	4b32      	ldr	r3, [pc, #200]	; (8003574 <HAL_RCC_OscConfig+0x688>)
 80034ac:	2101      	movs	r1, #1
 80034ae:	430a      	orrs	r2, r1
 80034b0:	609a      	str	r2, [r3, #8]
 80034b2:	4b30      	ldr	r3, [pc, #192]	; (8003574 <HAL_RCC_OscConfig+0x688>)
 80034b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80034b6:	4b2f      	ldr	r3, [pc, #188]	; (8003574 <HAL_RCC_OscConfig+0x688>)
 80034b8:	2101      	movs	r1, #1
 80034ba:	430a      	orrs	r2, r1
 80034bc:	635a      	str	r2, [r3, #52]	; 0x34
 80034be:	4b34      	ldr	r3, [pc, #208]	; (8003590 <HAL_RCC_OscConfig+0x6a4>)
 80034c0:	6a1a      	ldr	r2, [r3, #32]
 80034c2:	4b33      	ldr	r3, [pc, #204]	; (8003590 <HAL_RCC_OscConfig+0x6a4>)
 80034c4:	2180      	movs	r1, #128	; 0x80
 80034c6:	0189      	lsls	r1, r1, #6
 80034c8:	430a      	orrs	r2, r1
 80034ca:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034cc:	f7fe ff3e 	bl	800234c <HAL_GetTick>
 80034d0:	0003      	movs	r3, r0
 80034d2:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80034d4:	e008      	b.n	80034e8 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80034d6:	f7fe ff39 	bl	800234c <HAL_GetTick>
 80034da:	0002      	movs	r2, r0
 80034dc:	697b      	ldr	r3, [r7, #20]
 80034de:	1ad3      	subs	r3, r2, r3
 80034e0:	2b02      	cmp	r3, #2
 80034e2:	d901      	bls.n	80034e8 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 80034e4:	2303      	movs	r3, #3
 80034e6:	e0ca      	b.n	800367e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80034e8:	4b22      	ldr	r3, [pc, #136]	; (8003574 <HAL_RCC_OscConfig+0x688>)
 80034ea:	689b      	ldr	r3, [r3, #8]
 80034ec:	2202      	movs	r2, #2
 80034ee:	4013      	ands	r3, r2
 80034f0:	d0f1      	beq.n	80034d6 <HAL_RCC_OscConfig+0x5ea>
 80034f2:	e01e      	b.n	8003532 <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80034f4:	4b1f      	ldr	r3, [pc, #124]	; (8003574 <HAL_RCC_OscConfig+0x688>)
 80034f6:	689a      	ldr	r2, [r3, #8]
 80034f8:	4b1e      	ldr	r3, [pc, #120]	; (8003574 <HAL_RCC_OscConfig+0x688>)
 80034fa:	2101      	movs	r1, #1
 80034fc:	438a      	bics	r2, r1
 80034fe:	609a      	str	r2, [r3, #8]
 8003500:	4b23      	ldr	r3, [pc, #140]	; (8003590 <HAL_RCC_OscConfig+0x6a4>)
 8003502:	6a1a      	ldr	r2, [r3, #32]
 8003504:	4b22      	ldr	r3, [pc, #136]	; (8003590 <HAL_RCC_OscConfig+0x6a4>)
 8003506:	4923      	ldr	r1, [pc, #140]	; (8003594 <HAL_RCC_OscConfig+0x6a8>)
 8003508:	400a      	ands	r2, r1
 800350a:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800350c:	f7fe ff1e 	bl	800234c <HAL_GetTick>
 8003510:	0003      	movs	r3, r0
 8003512:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003514:	e008      	b.n	8003528 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003516:	f7fe ff19 	bl	800234c <HAL_GetTick>
 800351a:	0002      	movs	r2, r0
 800351c:	697b      	ldr	r3, [r7, #20]
 800351e:	1ad3      	subs	r3, r2, r3
 8003520:	2b02      	cmp	r3, #2
 8003522:	d901      	bls.n	8003528 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8003524:	2303      	movs	r3, #3
 8003526:	e0aa      	b.n	800367e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003528:	4b12      	ldr	r3, [pc, #72]	; (8003574 <HAL_RCC_OscConfig+0x688>)
 800352a:	689b      	ldr	r3, [r3, #8]
 800352c:	2202      	movs	r2, #2
 800352e:	4013      	ands	r3, r2
 8003530:	d1f1      	bne.n	8003516 <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003536:	2b00      	cmp	r3, #0
 8003538:	d100      	bne.n	800353c <HAL_RCC_OscConfig+0x650>
 800353a:	e09f      	b.n	800367c <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800353c:	69fb      	ldr	r3, [r7, #28]
 800353e:	2b0c      	cmp	r3, #12
 8003540:	d100      	bne.n	8003544 <HAL_RCC_OscConfig+0x658>
 8003542:	e078      	b.n	8003636 <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003548:	2b02      	cmp	r3, #2
 800354a:	d159      	bne.n	8003600 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800354c:	4b09      	ldr	r3, [pc, #36]	; (8003574 <HAL_RCC_OscConfig+0x688>)
 800354e:	681a      	ldr	r2, [r3, #0]
 8003550:	4b08      	ldr	r3, [pc, #32]	; (8003574 <HAL_RCC_OscConfig+0x688>)
 8003552:	4911      	ldr	r1, [pc, #68]	; (8003598 <HAL_RCC_OscConfig+0x6ac>)
 8003554:	400a      	ands	r2, r1
 8003556:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003558:	f7fe fef8 	bl	800234c <HAL_GetTick>
 800355c:	0003      	movs	r3, r0
 800355e:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003560:	e01c      	b.n	800359c <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003562:	f7fe fef3 	bl	800234c <HAL_GetTick>
 8003566:	0002      	movs	r2, r0
 8003568:	697b      	ldr	r3, [r7, #20]
 800356a:	1ad3      	subs	r3, r2, r3
 800356c:	2b02      	cmp	r3, #2
 800356e:	d915      	bls.n	800359c <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 8003570:	2303      	movs	r3, #3
 8003572:	e084      	b.n	800367e <HAL_RCC_OscConfig+0x792>
 8003574:	40021000 	.word	0x40021000
 8003578:	ffff1fff 	.word	0xffff1fff
 800357c:	fffffeff 	.word	0xfffffeff
 8003580:	40007000 	.word	0x40007000
 8003584:	fffffbff 	.word	0xfffffbff
 8003588:	00001388 	.word	0x00001388
 800358c:	efffffff 	.word	0xefffffff
 8003590:	40010000 	.word	0x40010000
 8003594:	ffffdfff 	.word	0xffffdfff
 8003598:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800359c:	4b3a      	ldr	r3, [pc, #232]	; (8003688 <HAL_RCC_OscConfig+0x79c>)
 800359e:	681a      	ldr	r2, [r3, #0]
 80035a0:	2380      	movs	r3, #128	; 0x80
 80035a2:	049b      	lsls	r3, r3, #18
 80035a4:	4013      	ands	r3, r2
 80035a6:	d1dc      	bne.n	8003562 <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80035a8:	4b37      	ldr	r3, [pc, #220]	; (8003688 <HAL_RCC_OscConfig+0x79c>)
 80035aa:	68db      	ldr	r3, [r3, #12]
 80035ac:	4a37      	ldr	r2, [pc, #220]	; (800368c <HAL_RCC_OscConfig+0x7a0>)
 80035ae:	4013      	ands	r3, r2
 80035b0:	0019      	movs	r1, r3
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ba:	431a      	orrs	r2, r3
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035c0:	431a      	orrs	r2, r3
 80035c2:	4b31      	ldr	r3, [pc, #196]	; (8003688 <HAL_RCC_OscConfig+0x79c>)
 80035c4:	430a      	orrs	r2, r1
 80035c6:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80035c8:	4b2f      	ldr	r3, [pc, #188]	; (8003688 <HAL_RCC_OscConfig+0x79c>)
 80035ca:	681a      	ldr	r2, [r3, #0]
 80035cc:	4b2e      	ldr	r3, [pc, #184]	; (8003688 <HAL_RCC_OscConfig+0x79c>)
 80035ce:	2180      	movs	r1, #128	; 0x80
 80035d0:	0449      	lsls	r1, r1, #17
 80035d2:	430a      	orrs	r2, r1
 80035d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035d6:	f7fe feb9 	bl	800234c <HAL_GetTick>
 80035da:	0003      	movs	r3, r0
 80035dc:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80035de:	e008      	b.n	80035f2 <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035e0:	f7fe feb4 	bl	800234c <HAL_GetTick>
 80035e4:	0002      	movs	r2, r0
 80035e6:	697b      	ldr	r3, [r7, #20]
 80035e8:	1ad3      	subs	r3, r2, r3
 80035ea:	2b02      	cmp	r3, #2
 80035ec:	d901      	bls.n	80035f2 <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 80035ee:	2303      	movs	r3, #3
 80035f0:	e045      	b.n	800367e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80035f2:	4b25      	ldr	r3, [pc, #148]	; (8003688 <HAL_RCC_OscConfig+0x79c>)
 80035f4:	681a      	ldr	r2, [r3, #0]
 80035f6:	2380      	movs	r3, #128	; 0x80
 80035f8:	049b      	lsls	r3, r3, #18
 80035fa:	4013      	ands	r3, r2
 80035fc:	d0f0      	beq.n	80035e0 <HAL_RCC_OscConfig+0x6f4>
 80035fe:	e03d      	b.n	800367c <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003600:	4b21      	ldr	r3, [pc, #132]	; (8003688 <HAL_RCC_OscConfig+0x79c>)
 8003602:	681a      	ldr	r2, [r3, #0]
 8003604:	4b20      	ldr	r3, [pc, #128]	; (8003688 <HAL_RCC_OscConfig+0x79c>)
 8003606:	4922      	ldr	r1, [pc, #136]	; (8003690 <HAL_RCC_OscConfig+0x7a4>)
 8003608:	400a      	ands	r2, r1
 800360a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800360c:	f7fe fe9e 	bl	800234c <HAL_GetTick>
 8003610:	0003      	movs	r3, r0
 8003612:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003614:	e008      	b.n	8003628 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003616:	f7fe fe99 	bl	800234c <HAL_GetTick>
 800361a:	0002      	movs	r2, r0
 800361c:	697b      	ldr	r3, [r7, #20]
 800361e:	1ad3      	subs	r3, r2, r3
 8003620:	2b02      	cmp	r3, #2
 8003622:	d901      	bls.n	8003628 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 8003624:	2303      	movs	r3, #3
 8003626:	e02a      	b.n	800367e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003628:	4b17      	ldr	r3, [pc, #92]	; (8003688 <HAL_RCC_OscConfig+0x79c>)
 800362a:	681a      	ldr	r2, [r3, #0]
 800362c:	2380      	movs	r3, #128	; 0x80
 800362e:	049b      	lsls	r3, r3, #18
 8003630:	4013      	ands	r3, r2
 8003632:	d1f0      	bne.n	8003616 <HAL_RCC_OscConfig+0x72a>
 8003634:	e022      	b.n	800367c <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800363a:	2b01      	cmp	r3, #1
 800363c:	d101      	bne.n	8003642 <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 800363e:	2301      	movs	r3, #1
 8003640:	e01d      	b.n	800367e <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003642:	4b11      	ldr	r3, [pc, #68]	; (8003688 <HAL_RCC_OscConfig+0x79c>)
 8003644:	68db      	ldr	r3, [r3, #12]
 8003646:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003648:	69ba      	ldr	r2, [r7, #24]
 800364a:	2380      	movs	r3, #128	; 0x80
 800364c:	025b      	lsls	r3, r3, #9
 800364e:	401a      	ands	r2, r3
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003654:	429a      	cmp	r2, r3
 8003656:	d10f      	bne.n	8003678 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003658:	69ba      	ldr	r2, [r7, #24]
 800365a:	23f0      	movs	r3, #240	; 0xf0
 800365c:	039b      	lsls	r3, r3, #14
 800365e:	401a      	ands	r2, r3
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003664:	429a      	cmp	r2, r3
 8003666:	d107      	bne.n	8003678 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8003668:	69ba      	ldr	r2, [r7, #24]
 800366a:	23c0      	movs	r3, #192	; 0xc0
 800366c:	041b      	lsls	r3, r3, #16
 800366e:	401a      	ands	r2, r3
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003674:	429a      	cmp	r2, r3
 8003676:	d001      	beq.n	800367c <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 8003678:	2301      	movs	r3, #1
 800367a:	e000      	b.n	800367e <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 800367c:	2300      	movs	r3, #0
}
 800367e:	0018      	movs	r0, r3
 8003680:	46bd      	mov	sp, r7
 8003682:	b00a      	add	sp, #40	; 0x28
 8003684:	bdb0      	pop	{r4, r5, r7, pc}
 8003686:	46c0      	nop			; (mov r8, r8)
 8003688:	40021000 	.word	0x40021000
 800368c:	ff02ffff 	.word	0xff02ffff
 8003690:	feffffff 	.word	0xfeffffff

08003694 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003694:	b5b0      	push	{r4, r5, r7, lr}
 8003696:	b084      	sub	sp, #16
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
 800369c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d101      	bne.n	80036a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80036a4:	2301      	movs	r3, #1
 80036a6:	e128      	b.n	80038fa <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80036a8:	4b96      	ldr	r3, [pc, #600]	; (8003904 <HAL_RCC_ClockConfig+0x270>)
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	2201      	movs	r2, #1
 80036ae:	4013      	ands	r3, r2
 80036b0:	683a      	ldr	r2, [r7, #0]
 80036b2:	429a      	cmp	r2, r3
 80036b4:	d91e      	bls.n	80036f4 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036b6:	4b93      	ldr	r3, [pc, #588]	; (8003904 <HAL_RCC_ClockConfig+0x270>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	2201      	movs	r2, #1
 80036bc:	4393      	bics	r3, r2
 80036be:	0019      	movs	r1, r3
 80036c0:	4b90      	ldr	r3, [pc, #576]	; (8003904 <HAL_RCC_ClockConfig+0x270>)
 80036c2:	683a      	ldr	r2, [r7, #0]
 80036c4:	430a      	orrs	r2, r1
 80036c6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80036c8:	f7fe fe40 	bl	800234c <HAL_GetTick>
 80036cc:	0003      	movs	r3, r0
 80036ce:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036d0:	e009      	b.n	80036e6 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036d2:	f7fe fe3b 	bl	800234c <HAL_GetTick>
 80036d6:	0002      	movs	r2, r0
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	1ad3      	subs	r3, r2, r3
 80036dc:	4a8a      	ldr	r2, [pc, #552]	; (8003908 <HAL_RCC_ClockConfig+0x274>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d901      	bls.n	80036e6 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80036e2:	2303      	movs	r3, #3
 80036e4:	e109      	b.n	80038fa <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036e6:	4b87      	ldr	r3, [pc, #540]	; (8003904 <HAL_RCC_ClockConfig+0x270>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	2201      	movs	r2, #1
 80036ec:	4013      	ands	r3, r2
 80036ee:	683a      	ldr	r2, [r7, #0]
 80036f0:	429a      	cmp	r2, r3
 80036f2:	d1ee      	bne.n	80036d2 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	2202      	movs	r2, #2
 80036fa:	4013      	ands	r3, r2
 80036fc:	d009      	beq.n	8003712 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036fe:	4b83      	ldr	r3, [pc, #524]	; (800390c <HAL_RCC_ClockConfig+0x278>)
 8003700:	68db      	ldr	r3, [r3, #12]
 8003702:	22f0      	movs	r2, #240	; 0xf0
 8003704:	4393      	bics	r3, r2
 8003706:	0019      	movs	r1, r3
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	689a      	ldr	r2, [r3, #8]
 800370c:	4b7f      	ldr	r3, [pc, #508]	; (800390c <HAL_RCC_ClockConfig+0x278>)
 800370e:	430a      	orrs	r2, r1
 8003710:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	2201      	movs	r2, #1
 8003718:	4013      	ands	r3, r2
 800371a:	d100      	bne.n	800371e <HAL_RCC_ClockConfig+0x8a>
 800371c:	e089      	b.n	8003832 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	2b02      	cmp	r3, #2
 8003724:	d107      	bne.n	8003736 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003726:	4b79      	ldr	r3, [pc, #484]	; (800390c <HAL_RCC_ClockConfig+0x278>)
 8003728:	681a      	ldr	r2, [r3, #0]
 800372a:	2380      	movs	r3, #128	; 0x80
 800372c:	029b      	lsls	r3, r3, #10
 800372e:	4013      	ands	r3, r2
 8003730:	d120      	bne.n	8003774 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003732:	2301      	movs	r3, #1
 8003734:	e0e1      	b.n	80038fa <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	2b03      	cmp	r3, #3
 800373c:	d107      	bne.n	800374e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800373e:	4b73      	ldr	r3, [pc, #460]	; (800390c <HAL_RCC_ClockConfig+0x278>)
 8003740:	681a      	ldr	r2, [r3, #0]
 8003742:	2380      	movs	r3, #128	; 0x80
 8003744:	049b      	lsls	r3, r3, #18
 8003746:	4013      	ands	r3, r2
 8003748:	d114      	bne.n	8003774 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800374a:	2301      	movs	r3, #1
 800374c:	e0d5      	b.n	80038fa <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	2b01      	cmp	r3, #1
 8003754:	d106      	bne.n	8003764 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003756:	4b6d      	ldr	r3, [pc, #436]	; (800390c <HAL_RCC_ClockConfig+0x278>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	2204      	movs	r2, #4
 800375c:	4013      	ands	r3, r2
 800375e:	d109      	bne.n	8003774 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003760:	2301      	movs	r3, #1
 8003762:	e0ca      	b.n	80038fa <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003764:	4b69      	ldr	r3, [pc, #420]	; (800390c <HAL_RCC_ClockConfig+0x278>)
 8003766:	681a      	ldr	r2, [r3, #0]
 8003768:	2380      	movs	r3, #128	; 0x80
 800376a:	009b      	lsls	r3, r3, #2
 800376c:	4013      	ands	r3, r2
 800376e:	d101      	bne.n	8003774 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003770:	2301      	movs	r3, #1
 8003772:	e0c2      	b.n	80038fa <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003774:	4b65      	ldr	r3, [pc, #404]	; (800390c <HAL_RCC_ClockConfig+0x278>)
 8003776:	68db      	ldr	r3, [r3, #12]
 8003778:	2203      	movs	r2, #3
 800377a:	4393      	bics	r3, r2
 800377c:	0019      	movs	r1, r3
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	685a      	ldr	r2, [r3, #4]
 8003782:	4b62      	ldr	r3, [pc, #392]	; (800390c <HAL_RCC_ClockConfig+0x278>)
 8003784:	430a      	orrs	r2, r1
 8003786:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003788:	f7fe fde0 	bl	800234c <HAL_GetTick>
 800378c:	0003      	movs	r3, r0
 800378e:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	2b02      	cmp	r3, #2
 8003796:	d111      	bne.n	80037bc <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003798:	e009      	b.n	80037ae <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800379a:	f7fe fdd7 	bl	800234c <HAL_GetTick>
 800379e:	0002      	movs	r2, r0
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	1ad3      	subs	r3, r2, r3
 80037a4:	4a58      	ldr	r2, [pc, #352]	; (8003908 <HAL_RCC_ClockConfig+0x274>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d901      	bls.n	80037ae <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 80037aa:	2303      	movs	r3, #3
 80037ac:	e0a5      	b.n	80038fa <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80037ae:	4b57      	ldr	r3, [pc, #348]	; (800390c <HAL_RCC_ClockConfig+0x278>)
 80037b0:	68db      	ldr	r3, [r3, #12]
 80037b2:	220c      	movs	r2, #12
 80037b4:	4013      	ands	r3, r2
 80037b6:	2b08      	cmp	r3, #8
 80037b8:	d1ef      	bne.n	800379a <HAL_RCC_ClockConfig+0x106>
 80037ba:	e03a      	b.n	8003832 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	2b03      	cmp	r3, #3
 80037c2:	d111      	bne.n	80037e8 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80037c4:	e009      	b.n	80037da <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037c6:	f7fe fdc1 	bl	800234c <HAL_GetTick>
 80037ca:	0002      	movs	r2, r0
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	1ad3      	subs	r3, r2, r3
 80037d0:	4a4d      	ldr	r2, [pc, #308]	; (8003908 <HAL_RCC_ClockConfig+0x274>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d901      	bls.n	80037da <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 80037d6:	2303      	movs	r3, #3
 80037d8:	e08f      	b.n	80038fa <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80037da:	4b4c      	ldr	r3, [pc, #304]	; (800390c <HAL_RCC_ClockConfig+0x278>)
 80037dc:	68db      	ldr	r3, [r3, #12]
 80037de:	220c      	movs	r2, #12
 80037e0:	4013      	ands	r3, r2
 80037e2:	2b0c      	cmp	r3, #12
 80037e4:	d1ef      	bne.n	80037c6 <HAL_RCC_ClockConfig+0x132>
 80037e6:	e024      	b.n	8003832 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	2b01      	cmp	r3, #1
 80037ee:	d11b      	bne.n	8003828 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80037f0:	e009      	b.n	8003806 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037f2:	f7fe fdab 	bl	800234c <HAL_GetTick>
 80037f6:	0002      	movs	r2, r0
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	1ad3      	subs	r3, r2, r3
 80037fc:	4a42      	ldr	r2, [pc, #264]	; (8003908 <HAL_RCC_ClockConfig+0x274>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d901      	bls.n	8003806 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8003802:	2303      	movs	r3, #3
 8003804:	e079      	b.n	80038fa <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003806:	4b41      	ldr	r3, [pc, #260]	; (800390c <HAL_RCC_ClockConfig+0x278>)
 8003808:	68db      	ldr	r3, [r3, #12]
 800380a:	220c      	movs	r2, #12
 800380c:	4013      	ands	r3, r2
 800380e:	2b04      	cmp	r3, #4
 8003810:	d1ef      	bne.n	80037f2 <HAL_RCC_ClockConfig+0x15e>
 8003812:	e00e      	b.n	8003832 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003814:	f7fe fd9a 	bl	800234c <HAL_GetTick>
 8003818:	0002      	movs	r2, r0
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	1ad3      	subs	r3, r2, r3
 800381e:	4a3a      	ldr	r2, [pc, #232]	; (8003908 <HAL_RCC_ClockConfig+0x274>)
 8003820:	4293      	cmp	r3, r2
 8003822:	d901      	bls.n	8003828 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8003824:	2303      	movs	r3, #3
 8003826:	e068      	b.n	80038fa <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8003828:	4b38      	ldr	r3, [pc, #224]	; (800390c <HAL_RCC_ClockConfig+0x278>)
 800382a:	68db      	ldr	r3, [r3, #12]
 800382c:	220c      	movs	r2, #12
 800382e:	4013      	ands	r3, r2
 8003830:	d1f0      	bne.n	8003814 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003832:	4b34      	ldr	r3, [pc, #208]	; (8003904 <HAL_RCC_ClockConfig+0x270>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	2201      	movs	r2, #1
 8003838:	4013      	ands	r3, r2
 800383a:	683a      	ldr	r2, [r7, #0]
 800383c:	429a      	cmp	r2, r3
 800383e:	d21e      	bcs.n	800387e <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003840:	4b30      	ldr	r3, [pc, #192]	; (8003904 <HAL_RCC_ClockConfig+0x270>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	2201      	movs	r2, #1
 8003846:	4393      	bics	r3, r2
 8003848:	0019      	movs	r1, r3
 800384a:	4b2e      	ldr	r3, [pc, #184]	; (8003904 <HAL_RCC_ClockConfig+0x270>)
 800384c:	683a      	ldr	r2, [r7, #0]
 800384e:	430a      	orrs	r2, r1
 8003850:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003852:	f7fe fd7b 	bl	800234c <HAL_GetTick>
 8003856:	0003      	movs	r3, r0
 8003858:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800385a:	e009      	b.n	8003870 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800385c:	f7fe fd76 	bl	800234c <HAL_GetTick>
 8003860:	0002      	movs	r2, r0
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	1ad3      	subs	r3, r2, r3
 8003866:	4a28      	ldr	r2, [pc, #160]	; (8003908 <HAL_RCC_ClockConfig+0x274>)
 8003868:	4293      	cmp	r3, r2
 800386a:	d901      	bls.n	8003870 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 800386c:	2303      	movs	r3, #3
 800386e:	e044      	b.n	80038fa <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003870:	4b24      	ldr	r3, [pc, #144]	; (8003904 <HAL_RCC_ClockConfig+0x270>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	2201      	movs	r2, #1
 8003876:	4013      	ands	r3, r2
 8003878:	683a      	ldr	r2, [r7, #0]
 800387a:	429a      	cmp	r2, r3
 800387c:	d1ee      	bne.n	800385c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	2204      	movs	r2, #4
 8003884:	4013      	ands	r3, r2
 8003886:	d009      	beq.n	800389c <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003888:	4b20      	ldr	r3, [pc, #128]	; (800390c <HAL_RCC_ClockConfig+0x278>)
 800388a:	68db      	ldr	r3, [r3, #12]
 800388c:	4a20      	ldr	r2, [pc, #128]	; (8003910 <HAL_RCC_ClockConfig+0x27c>)
 800388e:	4013      	ands	r3, r2
 8003890:	0019      	movs	r1, r3
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	68da      	ldr	r2, [r3, #12]
 8003896:	4b1d      	ldr	r3, [pc, #116]	; (800390c <HAL_RCC_ClockConfig+0x278>)
 8003898:	430a      	orrs	r2, r1
 800389a:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	2208      	movs	r2, #8
 80038a2:	4013      	ands	r3, r2
 80038a4:	d00a      	beq.n	80038bc <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80038a6:	4b19      	ldr	r3, [pc, #100]	; (800390c <HAL_RCC_ClockConfig+0x278>)
 80038a8:	68db      	ldr	r3, [r3, #12]
 80038aa:	4a1a      	ldr	r2, [pc, #104]	; (8003914 <HAL_RCC_ClockConfig+0x280>)
 80038ac:	4013      	ands	r3, r2
 80038ae:	0019      	movs	r1, r3
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	691b      	ldr	r3, [r3, #16]
 80038b4:	00da      	lsls	r2, r3, #3
 80038b6:	4b15      	ldr	r3, [pc, #84]	; (800390c <HAL_RCC_ClockConfig+0x278>)
 80038b8:	430a      	orrs	r2, r1
 80038ba:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80038bc:	f000 f832 	bl	8003924 <HAL_RCC_GetSysClockFreq>
 80038c0:	0001      	movs	r1, r0
 80038c2:	4b12      	ldr	r3, [pc, #72]	; (800390c <HAL_RCC_ClockConfig+0x278>)
 80038c4:	68db      	ldr	r3, [r3, #12]
 80038c6:	091b      	lsrs	r3, r3, #4
 80038c8:	220f      	movs	r2, #15
 80038ca:	4013      	ands	r3, r2
 80038cc:	4a12      	ldr	r2, [pc, #72]	; (8003918 <HAL_RCC_ClockConfig+0x284>)
 80038ce:	5cd3      	ldrb	r3, [r2, r3]
 80038d0:	000a      	movs	r2, r1
 80038d2:	40da      	lsrs	r2, r3
 80038d4:	4b11      	ldr	r3, [pc, #68]	; (800391c <HAL_RCC_ClockConfig+0x288>)
 80038d6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80038d8:	4b11      	ldr	r3, [pc, #68]	; (8003920 <HAL_RCC_ClockConfig+0x28c>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	250b      	movs	r5, #11
 80038de:	197c      	adds	r4, r7, r5
 80038e0:	0018      	movs	r0, r3
 80038e2:	f7fe fced 	bl	80022c0 <HAL_InitTick>
 80038e6:	0003      	movs	r3, r0
 80038e8:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80038ea:	197b      	adds	r3, r7, r5
 80038ec:	781b      	ldrb	r3, [r3, #0]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d002      	beq.n	80038f8 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 80038f2:	197b      	adds	r3, r7, r5
 80038f4:	781b      	ldrb	r3, [r3, #0]
 80038f6:	e000      	b.n	80038fa <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 80038f8:	2300      	movs	r3, #0
}
 80038fa:	0018      	movs	r0, r3
 80038fc:	46bd      	mov	sp, r7
 80038fe:	b004      	add	sp, #16
 8003900:	bdb0      	pop	{r4, r5, r7, pc}
 8003902:	46c0      	nop			; (mov r8, r8)
 8003904:	40022000 	.word	0x40022000
 8003908:	00001388 	.word	0x00001388
 800390c:	40021000 	.word	0x40021000
 8003910:	fffff8ff 	.word	0xfffff8ff
 8003914:	ffffc7ff 	.word	0xffffc7ff
 8003918:	080070b4 	.word	0x080070b4
 800391c:	20000120 	.word	0x20000120
 8003920:	20000124 	.word	0x20000124

08003924 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003924:	b5b0      	push	{r4, r5, r7, lr}
 8003926:	b08e      	sub	sp, #56	; 0x38
 8003928:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 800392a:	4b4c      	ldr	r3, [pc, #304]	; (8003a5c <HAL_RCC_GetSysClockFreq+0x138>)
 800392c:	68db      	ldr	r3, [r3, #12]
 800392e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003930:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003932:	230c      	movs	r3, #12
 8003934:	4013      	ands	r3, r2
 8003936:	2b0c      	cmp	r3, #12
 8003938:	d014      	beq.n	8003964 <HAL_RCC_GetSysClockFreq+0x40>
 800393a:	d900      	bls.n	800393e <HAL_RCC_GetSysClockFreq+0x1a>
 800393c:	e07b      	b.n	8003a36 <HAL_RCC_GetSysClockFreq+0x112>
 800393e:	2b04      	cmp	r3, #4
 8003940:	d002      	beq.n	8003948 <HAL_RCC_GetSysClockFreq+0x24>
 8003942:	2b08      	cmp	r3, #8
 8003944:	d00b      	beq.n	800395e <HAL_RCC_GetSysClockFreq+0x3a>
 8003946:	e076      	b.n	8003a36 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003948:	4b44      	ldr	r3, [pc, #272]	; (8003a5c <HAL_RCC_GetSysClockFreq+0x138>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	2210      	movs	r2, #16
 800394e:	4013      	ands	r3, r2
 8003950:	d002      	beq.n	8003958 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8003952:	4b43      	ldr	r3, [pc, #268]	; (8003a60 <HAL_RCC_GetSysClockFreq+0x13c>)
 8003954:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8003956:	e07c      	b.n	8003a52 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8003958:	4b42      	ldr	r3, [pc, #264]	; (8003a64 <HAL_RCC_GetSysClockFreq+0x140>)
 800395a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800395c:	e079      	b.n	8003a52 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800395e:	4b42      	ldr	r3, [pc, #264]	; (8003a68 <HAL_RCC_GetSysClockFreq+0x144>)
 8003960:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003962:	e076      	b.n	8003a52 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003964:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003966:	0c9a      	lsrs	r2, r3, #18
 8003968:	230f      	movs	r3, #15
 800396a:	401a      	ands	r2, r3
 800396c:	4b3f      	ldr	r3, [pc, #252]	; (8003a6c <HAL_RCC_GetSysClockFreq+0x148>)
 800396e:	5c9b      	ldrb	r3, [r3, r2]
 8003970:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8003972:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003974:	0d9a      	lsrs	r2, r3, #22
 8003976:	2303      	movs	r3, #3
 8003978:	4013      	ands	r3, r2
 800397a:	3301      	adds	r3, #1
 800397c:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800397e:	4b37      	ldr	r3, [pc, #220]	; (8003a5c <HAL_RCC_GetSysClockFreq+0x138>)
 8003980:	68da      	ldr	r2, [r3, #12]
 8003982:	2380      	movs	r3, #128	; 0x80
 8003984:	025b      	lsls	r3, r3, #9
 8003986:	4013      	ands	r3, r2
 8003988:	d01a      	beq.n	80039c0 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800398a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800398c:	61bb      	str	r3, [r7, #24]
 800398e:	2300      	movs	r3, #0
 8003990:	61fb      	str	r3, [r7, #28]
 8003992:	4a35      	ldr	r2, [pc, #212]	; (8003a68 <HAL_RCC_GetSysClockFreq+0x144>)
 8003994:	2300      	movs	r3, #0
 8003996:	69b8      	ldr	r0, [r7, #24]
 8003998:	69f9      	ldr	r1, [r7, #28]
 800399a:	f7fc fc7d 	bl	8000298 <__aeabi_lmul>
 800399e:	0002      	movs	r2, r0
 80039a0:	000b      	movs	r3, r1
 80039a2:	0010      	movs	r0, r2
 80039a4:	0019      	movs	r1, r3
 80039a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a8:	613b      	str	r3, [r7, #16]
 80039aa:	2300      	movs	r3, #0
 80039ac:	617b      	str	r3, [r7, #20]
 80039ae:	693a      	ldr	r2, [r7, #16]
 80039b0:	697b      	ldr	r3, [r7, #20]
 80039b2:	f7fc fc51 	bl	8000258 <__aeabi_uldivmod>
 80039b6:	0002      	movs	r2, r0
 80039b8:	000b      	movs	r3, r1
 80039ba:	0013      	movs	r3, r2
 80039bc:	637b      	str	r3, [r7, #52]	; 0x34
 80039be:	e037      	b.n	8003a30 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80039c0:	4b26      	ldr	r3, [pc, #152]	; (8003a5c <HAL_RCC_GetSysClockFreq+0x138>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	2210      	movs	r2, #16
 80039c6:	4013      	ands	r3, r2
 80039c8:	d01a      	beq.n	8003a00 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 80039ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039cc:	60bb      	str	r3, [r7, #8]
 80039ce:	2300      	movs	r3, #0
 80039d0:	60fb      	str	r3, [r7, #12]
 80039d2:	4a23      	ldr	r2, [pc, #140]	; (8003a60 <HAL_RCC_GetSysClockFreq+0x13c>)
 80039d4:	2300      	movs	r3, #0
 80039d6:	68b8      	ldr	r0, [r7, #8]
 80039d8:	68f9      	ldr	r1, [r7, #12]
 80039da:	f7fc fc5d 	bl	8000298 <__aeabi_lmul>
 80039de:	0002      	movs	r2, r0
 80039e0:	000b      	movs	r3, r1
 80039e2:	0010      	movs	r0, r2
 80039e4:	0019      	movs	r1, r3
 80039e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e8:	603b      	str	r3, [r7, #0]
 80039ea:	2300      	movs	r3, #0
 80039ec:	607b      	str	r3, [r7, #4]
 80039ee:	683a      	ldr	r2, [r7, #0]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	f7fc fc31 	bl	8000258 <__aeabi_uldivmod>
 80039f6:	0002      	movs	r2, r0
 80039f8:	000b      	movs	r3, r1
 80039fa:	0013      	movs	r3, r2
 80039fc:	637b      	str	r3, [r7, #52]	; 0x34
 80039fe:	e017      	b.n	8003a30 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003a00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a02:	0018      	movs	r0, r3
 8003a04:	2300      	movs	r3, #0
 8003a06:	0019      	movs	r1, r3
 8003a08:	4a16      	ldr	r2, [pc, #88]	; (8003a64 <HAL_RCC_GetSysClockFreq+0x140>)
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	f7fc fc44 	bl	8000298 <__aeabi_lmul>
 8003a10:	0002      	movs	r2, r0
 8003a12:	000b      	movs	r3, r1
 8003a14:	0010      	movs	r0, r2
 8003a16:	0019      	movs	r1, r3
 8003a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a1a:	001c      	movs	r4, r3
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	001d      	movs	r5, r3
 8003a20:	0022      	movs	r2, r4
 8003a22:	002b      	movs	r3, r5
 8003a24:	f7fc fc18 	bl	8000258 <__aeabi_uldivmod>
 8003a28:	0002      	movs	r2, r0
 8003a2a:	000b      	movs	r3, r1
 8003a2c:	0013      	movs	r3, r2
 8003a2e:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8003a30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a32:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003a34:	e00d      	b.n	8003a52 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8003a36:	4b09      	ldr	r3, [pc, #36]	; (8003a5c <HAL_RCC_GetSysClockFreq+0x138>)
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	0b5b      	lsrs	r3, r3, #13
 8003a3c:	2207      	movs	r2, #7
 8003a3e:	4013      	ands	r3, r2
 8003a40:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8003a42:	6a3b      	ldr	r3, [r7, #32]
 8003a44:	3301      	adds	r3, #1
 8003a46:	2280      	movs	r2, #128	; 0x80
 8003a48:	0212      	lsls	r2, r2, #8
 8003a4a:	409a      	lsls	r2, r3
 8003a4c:	0013      	movs	r3, r2
 8003a4e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003a50:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8003a52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8003a54:	0018      	movs	r0, r3
 8003a56:	46bd      	mov	sp, r7
 8003a58:	b00e      	add	sp, #56	; 0x38
 8003a5a:	bdb0      	pop	{r4, r5, r7, pc}
 8003a5c:	40021000 	.word	0x40021000
 8003a60:	003d0900 	.word	0x003d0900
 8003a64:	00f42400 	.word	0x00f42400
 8003a68:	007a1200 	.word	0x007a1200
 8003a6c:	080070cc 	.word	0x080070cc

08003a70 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a74:	4b02      	ldr	r3, [pc, #8]	; (8003a80 <HAL_RCC_GetHCLKFreq+0x10>)
 8003a76:	681b      	ldr	r3, [r3, #0]
}
 8003a78:	0018      	movs	r0, r3
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	bd80      	pop	{r7, pc}
 8003a7e:	46c0      	nop			; (mov r8, r8)
 8003a80:	20000120 	.word	0x20000120

08003a84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003a88:	f7ff fff2 	bl	8003a70 <HAL_RCC_GetHCLKFreq>
 8003a8c:	0001      	movs	r1, r0
 8003a8e:	4b06      	ldr	r3, [pc, #24]	; (8003aa8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a90:	68db      	ldr	r3, [r3, #12]
 8003a92:	0a1b      	lsrs	r3, r3, #8
 8003a94:	2207      	movs	r2, #7
 8003a96:	4013      	ands	r3, r2
 8003a98:	4a04      	ldr	r2, [pc, #16]	; (8003aac <HAL_RCC_GetPCLK1Freq+0x28>)
 8003a9a:	5cd3      	ldrb	r3, [r2, r3]
 8003a9c:	40d9      	lsrs	r1, r3
 8003a9e:	000b      	movs	r3, r1
}
 8003aa0:	0018      	movs	r0, r3
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bd80      	pop	{r7, pc}
 8003aa6:	46c0      	nop			; (mov r8, r8)
 8003aa8:	40021000 	.word	0x40021000
 8003aac:	080070c4 	.word	0x080070c4

08003ab0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003ab4:	f7ff ffdc 	bl	8003a70 <HAL_RCC_GetHCLKFreq>
 8003ab8:	0001      	movs	r1, r0
 8003aba:	4b06      	ldr	r3, [pc, #24]	; (8003ad4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003abc:	68db      	ldr	r3, [r3, #12]
 8003abe:	0adb      	lsrs	r3, r3, #11
 8003ac0:	2207      	movs	r2, #7
 8003ac2:	4013      	ands	r3, r2
 8003ac4:	4a04      	ldr	r2, [pc, #16]	; (8003ad8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003ac6:	5cd3      	ldrb	r3, [r2, r3]
 8003ac8:	40d9      	lsrs	r1, r3
 8003aca:	000b      	movs	r3, r1
}
 8003acc:	0018      	movs	r0, r3
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bd80      	pop	{r7, pc}
 8003ad2:	46c0      	nop			; (mov r8, r8)
 8003ad4:	40021000 	.word	0x40021000
 8003ad8:	080070c4 	.word	0x080070c4

08003adc <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b086      	sub	sp, #24
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8003ae4:	2317      	movs	r3, #23
 8003ae6:	18fb      	adds	r3, r7, r3
 8003ae8:	2200      	movs	r2, #0
 8003aea:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	2220      	movs	r2, #32
 8003af2:	4013      	ands	r3, r2
 8003af4:	d106      	bne.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681a      	ldr	r2, [r3, #0]
 8003afa:	2380      	movs	r3, #128	; 0x80
 8003afc:	011b      	lsls	r3, r3, #4
 8003afe:	4013      	ands	r3, r2
 8003b00:	d100      	bne.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x28>
 8003b02:	e104      	b.n	8003d0e <HAL_RCCEx_PeriphCLKConfig+0x232>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b04:	4bb9      	ldr	r3, [pc, #740]	; (8003dec <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003b06:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b08:	2380      	movs	r3, #128	; 0x80
 8003b0a:	055b      	lsls	r3, r3, #21
 8003b0c:	4013      	ands	r3, r2
 8003b0e:	d10a      	bne.n	8003b26 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b10:	4bb6      	ldr	r3, [pc, #728]	; (8003dec <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003b12:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b14:	4bb5      	ldr	r3, [pc, #724]	; (8003dec <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003b16:	2180      	movs	r1, #128	; 0x80
 8003b18:	0549      	lsls	r1, r1, #21
 8003b1a:	430a      	orrs	r2, r1
 8003b1c:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8003b1e:	2317      	movs	r3, #23
 8003b20:	18fb      	adds	r3, r7, r3
 8003b22:	2201      	movs	r2, #1
 8003b24:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b26:	4bb2      	ldr	r3, [pc, #712]	; (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8003b28:	681a      	ldr	r2, [r3, #0]
 8003b2a:	2380      	movs	r3, #128	; 0x80
 8003b2c:	005b      	lsls	r3, r3, #1
 8003b2e:	4013      	ands	r3, r2
 8003b30:	d11a      	bne.n	8003b68 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b32:	4baf      	ldr	r3, [pc, #700]	; (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8003b34:	681a      	ldr	r2, [r3, #0]
 8003b36:	4bae      	ldr	r3, [pc, #696]	; (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8003b38:	2180      	movs	r1, #128	; 0x80
 8003b3a:	0049      	lsls	r1, r1, #1
 8003b3c:	430a      	orrs	r2, r1
 8003b3e:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b40:	f7fe fc04 	bl	800234c <HAL_GetTick>
 8003b44:	0003      	movs	r3, r0
 8003b46:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b48:	e008      	b.n	8003b5c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b4a:	f7fe fbff 	bl	800234c <HAL_GetTick>
 8003b4e:	0002      	movs	r2, r0
 8003b50:	693b      	ldr	r3, [r7, #16]
 8003b52:	1ad3      	subs	r3, r2, r3
 8003b54:	2b64      	cmp	r3, #100	; 0x64
 8003b56:	d901      	bls.n	8003b5c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003b58:	2303      	movs	r3, #3
 8003b5a:	e143      	b.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x308>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b5c:	4ba4      	ldr	r3, [pc, #656]	; (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 8003b5e:	681a      	ldr	r2, [r3, #0]
 8003b60:	2380      	movs	r3, #128	; 0x80
 8003b62:	005b      	lsls	r3, r3, #1
 8003b64:	4013      	ands	r3, r2
 8003b66:	d0f0      	beq.n	8003b4a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8003b68:	4ba0      	ldr	r3, [pc, #640]	; (8003dec <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003b6a:	681a      	ldr	r2, [r3, #0]
 8003b6c:	23c0      	movs	r3, #192	; 0xc0
 8003b6e:	039b      	lsls	r3, r3, #14
 8003b70:	4013      	ands	r3, r2
 8003b72:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	685a      	ldr	r2, [r3, #4]
 8003b78:	23c0      	movs	r3, #192	; 0xc0
 8003b7a:	039b      	lsls	r3, r3, #14
 8003b7c:	4013      	ands	r3, r2
 8003b7e:	68fa      	ldr	r2, [r7, #12]
 8003b80:	429a      	cmp	r2, r3
 8003b82:	d107      	bne.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	689a      	ldr	r2, [r3, #8]
 8003b88:	23c0      	movs	r3, #192	; 0xc0
 8003b8a:	039b      	lsls	r3, r3, #14
 8003b8c:	4013      	ands	r3, r2
 8003b8e:	68fa      	ldr	r2, [r7, #12]
 8003b90:	429a      	cmp	r2, r3
 8003b92:	d013      	beq.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	685a      	ldr	r2, [r3, #4]
 8003b98:	23c0      	movs	r3, #192	; 0xc0
 8003b9a:	029b      	lsls	r3, r3, #10
 8003b9c:	401a      	ands	r2, r3
 8003b9e:	23c0      	movs	r3, #192	; 0xc0
 8003ba0:	029b      	lsls	r3, r3, #10
 8003ba2:	429a      	cmp	r2, r3
 8003ba4:	d10a      	bne.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8003ba6:	4b91      	ldr	r3, [pc, #580]	; (8003dec <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003ba8:	681a      	ldr	r2, [r3, #0]
 8003baa:	2380      	movs	r3, #128	; 0x80
 8003bac:	029b      	lsls	r3, r3, #10
 8003bae:	401a      	ands	r2, r3
 8003bb0:	2380      	movs	r3, #128	; 0x80
 8003bb2:	029b      	lsls	r3, r3, #10
 8003bb4:	429a      	cmp	r2, r3
 8003bb6:	d101      	bne.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8003bb8:	2301      	movs	r3, #1
 8003bba:	e113      	b.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x308>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8003bbc:	4b8b      	ldr	r3, [pc, #556]	; (8003dec <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003bbe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003bc0:	23c0      	movs	r3, #192	; 0xc0
 8003bc2:	029b      	lsls	r3, r3, #10
 8003bc4:	4013      	ands	r3, r2
 8003bc6:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d049      	beq.n	8003c62 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	685a      	ldr	r2, [r3, #4]
 8003bd2:	23c0      	movs	r3, #192	; 0xc0
 8003bd4:	029b      	lsls	r3, r3, #10
 8003bd6:	4013      	ands	r3, r2
 8003bd8:	68fa      	ldr	r2, [r7, #12]
 8003bda:	429a      	cmp	r2, r3
 8003bdc:	d004      	beq.n	8003be8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	2220      	movs	r2, #32
 8003be4:	4013      	ands	r3, r2
 8003be6:	d10d      	bne.n	8003c04 <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	689a      	ldr	r2, [r3, #8]
 8003bec:	23c0      	movs	r3, #192	; 0xc0
 8003bee:	029b      	lsls	r3, r3, #10
 8003bf0:	4013      	ands	r3, r2
 8003bf2:	68fa      	ldr	r2, [r7, #12]
 8003bf4:	429a      	cmp	r2, r3
 8003bf6:	d034      	beq.n	8003c62 <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681a      	ldr	r2, [r3, #0]
 8003bfc:	2380      	movs	r3, #128	; 0x80
 8003bfe:	011b      	lsls	r3, r3, #4
 8003c00:	4013      	ands	r3, r2
 8003c02:	d02e      	beq.n	8003c62 <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8003c04:	4b79      	ldr	r3, [pc, #484]	; (8003dec <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003c06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c08:	4a7a      	ldr	r2, [pc, #488]	; (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8003c0a:	4013      	ands	r3, r2
 8003c0c:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003c0e:	4b77      	ldr	r3, [pc, #476]	; (8003dec <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003c10:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003c12:	4b76      	ldr	r3, [pc, #472]	; (8003dec <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003c14:	2180      	movs	r1, #128	; 0x80
 8003c16:	0309      	lsls	r1, r1, #12
 8003c18:	430a      	orrs	r2, r1
 8003c1a:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003c1c:	4b73      	ldr	r3, [pc, #460]	; (8003dec <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003c1e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003c20:	4b72      	ldr	r3, [pc, #456]	; (8003dec <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003c22:	4975      	ldr	r1, [pc, #468]	; (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 8003c24:	400a      	ands	r2, r1
 8003c26:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8003c28:	4b70      	ldr	r3, [pc, #448]	; (8003dec <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003c2a:	68fa      	ldr	r2, [r7, #12]
 8003c2c:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8003c2e:	68fa      	ldr	r2, [r7, #12]
 8003c30:	2380      	movs	r3, #128	; 0x80
 8003c32:	005b      	lsls	r3, r3, #1
 8003c34:	4013      	ands	r3, r2
 8003c36:	d014      	beq.n	8003c62 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c38:	f7fe fb88 	bl	800234c <HAL_GetTick>
 8003c3c:	0003      	movs	r3, r0
 8003c3e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003c40:	e009      	b.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c42:	f7fe fb83 	bl	800234c <HAL_GetTick>
 8003c46:	0002      	movs	r2, r0
 8003c48:	693b      	ldr	r3, [r7, #16]
 8003c4a:	1ad3      	subs	r3, r2, r3
 8003c4c:	4a6b      	ldr	r2, [pc, #428]	; (8003dfc <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d901      	bls.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 8003c52:	2303      	movs	r3, #3
 8003c54:	e0c6      	b.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x308>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003c56:	4b65      	ldr	r3, [pc, #404]	; (8003dec <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003c58:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003c5a:	2380      	movs	r3, #128	; 0x80
 8003c5c:	009b      	lsls	r3, r3, #2
 8003c5e:	4013      	ands	r3, r2
 8003c60:	d0ef      	beq.n	8003c42 <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681a      	ldr	r2, [r3, #0]
 8003c66:	2380      	movs	r3, #128	; 0x80
 8003c68:	011b      	lsls	r3, r3, #4
 8003c6a:	4013      	ands	r3, r2
 8003c6c:	d01f      	beq.n	8003cae <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	689a      	ldr	r2, [r3, #8]
 8003c72:	23c0      	movs	r3, #192	; 0xc0
 8003c74:	029b      	lsls	r3, r3, #10
 8003c76:	401a      	ands	r2, r3
 8003c78:	23c0      	movs	r3, #192	; 0xc0
 8003c7a:	029b      	lsls	r3, r3, #10
 8003c7c:	429a      	cmp	r2, r3
 8003c7e:	d10c      	bne.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0x1be>
 8003c80:	4b5a      	ldr	r3, [pc, #360]	; (8003dec <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a5e      	ldr	r2, [pc, #376]	; (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8003c86:	4013      	ands	r3, r2
 8003c88:	0019      	movs	r1, r3
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	689a      	ldr	r2, [r3, #8]
 8003c8e:	23c0      	movs	r3, #192	; 0xc0
 8003c90:	039b      	lsls	r3, r3, #14
 8003c92:	401a      	ands	r2, r3
 8003c94:	4b55      	ldr	r3, [pc, #340]	; (8003dec <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003c96:	430a      	orrs	r2, r1
 8003c98:	601a      	str	r2, [r3, #0]
 8003c9a:	4b54      	ldr	r3, [pc, #336]	; (8003dec <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003c9c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	689a      	ldr	r2, [r3, #8]
 8003ca2:	23c0      	movs	r3, #192	; 0xc0
 8003ca4:	029b      	lsls	r3, r3, #10
 8003ca6:	401a      	ands	r2, r3
 8003ca8:	4b50      	ldr	r3, [pc, #320]	; (8003dec <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003caa:	430a      	orrs	r2, r1
 8003cac:	651a      	str	r2, [r3, #80]	; 0x50
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	2220      	movs	r2, #32
 8003cb4:	4013      	ands	r3, r2
 8003cb6:	d01f      	beq.n	8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	685a      	ldr	r2, [r3, #4]
 8003cbc:	23c0      	movs	r3, #192	; 0xc0
 8003cbe:	029b      	lsls	r3, r3, #10
 8003cc0:	401a      	ands	r2, r3
 8003cc2:	23c0      	movs	r3, #192	; 0xc0
 8003cc4:	029b      	lsls	r3, r3, #10
 8003cc6:	429a      	cmp	r2, r3
 8003cc8:	d10c      	bne.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x208>
 8003cca:	4b48      	ldr	r3, [pc, #288]	; (8003dec <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4a4c      	ldr	r2, [pc, #304]	; (8003e00 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8003cd0:	4013      	ands	r3, r2
 8003cd2:	0019      	movs	r1, r3
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	685a      	ldr	r2, [r3, #4]
 8003cd8:	23c0      	movs	r3, #192	; 0xc0
 8003cda:	039b      	lsls	r3, r3, #14
 8003cdc:	401a      	ands	r2, r3
 8003cde:	4b43      	ldr	r3, [pc, #268]	; (8003dec <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003ce0:	430a      	orrs	r2, r1
 8003ce2:	601a      	str	r2, [r3, #0]
 8003ce4:	4b41      	ldr	r3, [pc, #260]	; (8003dec <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003ce6:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	685a      	ldr	r2, [r3, #4]
 8003cec:	23c0      	movs	r3, #192	; 0xc0
 8003cee:	029b      	lsls	r3, r3, #10
 8003cf0:	401a      	ands	r2, r3
 8003cf2:	4b3e      	ldr	r3, [pc, #248]	; (8003dec <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003cf4:	430a      	orrs	r2, r1
 8003cf6:	651a      	str	r2, [r3, #80]	; 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003cf8:	2317      	movs	r3, #23
 8003cfa:	18fb      	adds	r3, r7, r3
 8003cfc:	781b      	ldrb	r3, [r3, #0]
 8003cfe:	2b01      	cmp	r3, #1
 8003d00:	d105      	bne.n	8003d0e <HAL_RCCEx_PeriphCLKConfig+0x232>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d02:	4b3a      	ldr	r3, [pc, #232]	; (8003dec <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003d04:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d06:	4b39      	ldr	r3, [pc, #228]	; (8003dec <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003d08:	493e      	ldr	r1, [pc, #248]	; (8003e04 <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8003d0a:	400a      	ands	r2, r1
 8003d0c:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	2201      	movs	r2, #1
 8003d14:	4013      	ands	r3, r2
 8003d16:	d009      	beq.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003d18:	4b34      	ldr	r3, [pc, #208]	; (8003dec <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003d1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d1c:	2203      	movs	r2, #3
 8003d1e:	4393      	bics	r3, r2
 8003d20:	0019      	movs	r1, r3
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	68da      	ldr	r2, [r3, #12]
 8003d26:	4b31      	ldr	r3, [pc, #196]	; (8003dec <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003d28:	430a      	orrs	r2, r1
 8003d2a:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	2202      	movs	r2, #2
 8003d32:	4013      	ands	r3, r2
 8003d34:	d009      	beq.n	8003d4a <HAL_RCCEx_PeriphCLKConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003d36:	4b2d      	ldr	r3, [pc, #180]	; (8003dec <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003d38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d3a:	220c      	movs	r2, #12
 8003d3c:	4393      	bics	r3, r2
 8003d3e:	0019      	movs	r1, r3
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	691a      	ldr	r2, [r3, #16]
 8003d44:	4b29      	ldr	r3, [pc, #164]	; (8003dec <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003d46:	430a      	orrs	r2, r1
 8003d48:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	2204      	movs	r2, #4
 8003d50:	4013      	ands	r3, r2
 8003d52:	d009      	beq.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003d54:	4b25      	ldr	r3, [pc, #148]	; (8003dec <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003d56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d58:	4a2b      	ldr	r2, [pc, #172]	; (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 8003d5a:	4013      	ands	r3, r2
 8003d5c:	0019      	movs	r1, r3
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	695a      	ldr	r2, [r3, #20]
 8003d62:	4b22      	ldr	r3, [pc, #136]	; (8003dec <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003d64:	430a      	orrs	r2, r1
 8003d66:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	2208      	movs	r2, #8
 8003d6e:	4013      	ands	r3, r2
 8003d70:	d009      	beq.n	8003d86 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003d72:	4b1e      	ldr	r3, [pc, #120]	; (8003dec <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003d74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d76:	4a25      	ldr	r2, [pc, #148]	; (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003d78:	4013      	ands	r3, r2
 8003d7a:	0019      	movs	r1, r3
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	699a      	ldr	r2, [r3, #24]
 8003d80:	4b1a      	ldr	r3, [pc, #104]	; (8003dec <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003d82:	430a      	orrs	r2, r1
 8003d84:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681a      	ldr	r2, [r3, #0]
 8003d8a:	2380      	movs	r3, #128	; 0x80
 8003d8c:	005b      	lsls	r3, r3, #1
 8003d8e:	4013      	ands	r3, r2
 8003d90:	d009      	beq.n	8003da6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003d92:	4b16      	ldr	r3, [pc, #88]	; (8003dec <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003d94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d96:	4a17      	ldr	r2, [pc, #92]	; (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8003d98:	4013      	ands	r3, r2
 8003d9a:	0019      	movs	r1, r3
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	69da      	ldr	r2, [r3, #28]
 8003da0:	4b12      	ldr	r3, [pc, #72]	; (8003dec <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003da2:	430a      	orrs	r2, r1
 8003da4:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	2240      	movs	r2, #64	; 0x40
 8003dac:	4013      	ands	r3, r2
 8003dae:	d009      	beq.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003db0:	4b0e      	ldr	r3, [pc, #56]	; (8003dec <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003db2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003db4:	4a16      	ldr	r2, [pc, #88]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8003db6:	4013      	ands	r3, r2
 8003db8:	0019      	movs	r1, r3
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003dbe:	4b0b      	ldr	r3, [pc, #44]	; (8003dec <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003dc0:	430a      	orrs	r2, r1
 8003dc2:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	2280      	movs	r2, #128	; 0x80
 8003dca:	4013      	ands	r3, r2
 8003dcc:	d009      	beq.n	8003de2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8003dce:	4b07      	ldr	r3, [pc, #28]	; (8003dec <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003dd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dd2:	4a10      	ldr	r2, [pc, #64]	; (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003dd4:	4013      	ands	r3, r2
 8003dd6:	0019      	movs	r1, r3
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6a1a      	ldr	r2, [r3, #32]
 8003ddc:	4b03      	ldr	r3, [pc, #12]	; (8003dec <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003dde:	430a      	orrs	r2, r1
 8003de0:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8003de2:	2300      	movs	r3, #0
}
 8003de4:	0018      	movs	r0, r3
 8003de6:	46bd      	mov	sp, r7
 8003de8:	b006      	add	sp, #24
 8003dea:	bd80      	pop	{r7, pc}
 8003dec:	40021000 	.word	0x40021000
 8003df0:	40007000 	.word	0x40007000
 8003df4:	fffcffff 	.word	0xfffcffff
 8003df8:	fff7ffff 	.word	0xfff7ffff
 8003dfc:	00001388 	.word	0x00001388
 8003e00:	ffcfffff 	.word	0xffcfffff
 8003e04:	efffffff 	.word	0xefffffff
 8003e08:	fffff3ff 	.word	0xfffff3ff
 8003e0c:	ffffcfff 	.word	0xffffcfff
 8003e10:	fbffffff 	.word	0xfbffffff
 8003e14:	fff3ffff 	.word	0xfff3ffff

08003e18 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b082      	sub	sp, #8
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d101      	bne.n	8003e2a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003e26:	2301      	movs	r3, #1
 8003e28:	e032      	b.n	8003e90 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2239      	movs	r2, #57	; 0x39
 8003e2e:	5c9b      	ldrb	r3, [r3, r2]
 8003e30:	b2db      	uxtb	r3, r3
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d107      	bne.n	8003e46 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2238      	movs	r2, #56	; 0x38
 8003e3a:	2100      	movs	r1, #0
 8003e3c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	0018      	movs	r0, r3
 8003e42:	f7fe f923 	bl	800208c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2239      	movs	r2, #57	; 0x39
 8003e4a:	2102      	movs	r1, #2
 8003e4c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681a      	ldr	r2, [r3, #0]
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	3304      	adds	r3, #4
 8003e56:	0019      	movs	r1, r3
 8003e58:	0010      	movs	r0, r2
 8003e5a:	f000 f8f1 	bl	8004040 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	223e      	movs	r2, #62	; 0x3e
 8003e62:	2101      	movs	r1, #1
 8003e64:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	223a      	movs	r2, #58	; 0x3a
 8003e6a:	2101      	movs	r1, #1
 8003e6c:	5499      	strb	r1, [r3, r2]
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	223b      	movs	r2, #59	; 0x3b
 8003e72:	2101      	movs	r1, #1
 8003e74:	5499      	strb	r1, [r3, r2]
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	223c      	movs	r2, #60	; 0x3c
 8003e7a:	2101      	movs	r1, #1
 8003e7c:	5499      	strb	r1, [r3, r2]
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	223d      	movs	r2, #61	; 0x3d
 8003e82:	2101      	movs	r1, #1
 8003e84:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2239      	movs	r2, #57	; 0x39
 8003e8a:	2101      	movs	r1, #1
 8003e8c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003e8e:	2300      	movs	r3, #0
}
 8003e90:	0018      	movs	r0, r3
 8003e92:	46bd      	mov	sp, r7
 8003e94:	b002      	add	sp, #8
 8003e96:	bd80      	pop	{r7, pc}

08003e98 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b084      	sub	sp, #16
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
 8003ea0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003ea2:	230f      	movs	r3, #15
 8003ea4:	18fb      	adds	r3, r7, r3
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2238      	movs	r2, #56	; 0x38
 8003eae:	5c9b      	ldrb	r3, [r3, r2]
 8003eb0:	2b01      	cmp	r3, #1
 8003eb2:	d101      	bne.n	8003eb8 <HAL_TIM_ConfigClockSource+0x20>
 8003eb4:	2302      	movs	r3, #2
 8003eb6:	e0bc      	b.n	8004032 <HAL_TIM_ConfigClockSource+0x19a>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2238      	movs	r2, #56	; 0x38
 8003ebc:	2101      	movs	r1, #1
 8003ebe:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2239      	movs	r2, #57	; 0x39
 8003ec4:	2102      	movs	r1, #2
 8003ec6:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	689b      	ldr	r3, [r3, #8]
 8003ece:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003ed0:	68bb      	ldr	r3, [r7, #8]
 8003ed2:	2277      	movs	r2, #119	; 0x77
 8003ed4:	4393      	bics	r3, r2
 8003ed6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ed8:	68bb      	ldr	r3, [r7, #8]
 8003eda:	4a58      	ldr	r2, [pc, #352]	; (800403c <HAL_TIM_ConfigClockSource+0x1a4>)
 8003edc:	4013      	ands	r3, r2
 8003ede:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	68ba      	ldr	r2, [r7, #8]
 8003ee6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	2280      	movs	r2, #128	; 0x80
 8003eee:	0192      	lsls	r2, r2, #6
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d040      	beq.n	8003f76 <HAL_TIM_ConfigClockSource+0xde>
 8003ef4:	2280      	movs	r2, #128	; 0x80
 8003ef6:	0192      	lsls	r2, r2, #6
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d900      	bls.n	8003efe <HAL_TIM_ConfigClockSource+0x66>
 8003efc:	e088      	b.n	8004010 <HAL_TIM_ConfigClockSource+0x178>
 8003efe:	2280      	movs	r2, #128	; 0x80
 8003f00:	0152      	lsls	r2, r2, #5
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d100      	bne.n	8003f08 <HAL_TIM_ConfigClockSource+0x70>
 8003f06:	e088      	b.n	800401a <HAL_TIM_ConfigClockSource+0x182>
 8003f08:	2280      	movs	r2, #128	; 0x80
 8003f0a:	0152      	lsls	r2, r2, #5
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d900      	bls.n	8003f12 <HAL_TIM_ConfigClockSource+0x7a>
 8003f10:	e07e      	b.n	8004010 <HAL_TIM_ConfigClockSource+0x178>
 8003f12:	2b70      	cmp	r3, #112	; 0x70
 8003f14:	d018      	beq.n	8003f48 <HAL_TIM_ConfigClockSource+0xb0>
 8003f16:	d900      	bls.n	8003f1a <HAL_TIM_ConfigClockSource+0x82>
 8003f18:	e07a      	b.n	8004010 <HAL_TIM_ConfigClockSource+0x178>
 8003f1a:	2b60      	cmp	r3, #96	; 0x60
 8003f1c:	d04f      	beq.n	8003fbe <HAL_TIM_ConfigClockSource+0x126>
 8003f1e:	d900      	bls.n	8003f22 <HAL_TIM_ConfigClockSource+0x8a>
 8003f20:	e076      	b.n	8004010 <HAL_TIM_ConfigClockSource+0x178>
 8003f22:	2b50      	cmp	r3, #80	; 0x50
 8003f24:	d03b      	beq.n	8003f9e <HAL_TIM_ConfigClockSource+0x106>
 8003f26:	d900      	bls.n	8003f2a <HAL_TIM_ConfigClockSource+0x92>
 8003f28:	e072      	b.n	8004010 <HAL_TIM_ConfigClockSource+0x178>
 8003f2a:	2b40      	cmp	r3, #64	; 0x40
 8003f2c:	d057      	beq.n	8003fde <HAL_TIM_ConfigClockSource+0x146>
 8003f2e:	d900      	bls.n	8003f32 <HAL_TIM_ConfigClockSource+0x9a>
 8003f30:	e06e      	b.n	8004010 <HAL_TIM_ConfigClockSource+0x178>
 8003f32:	2b30      	cmp	r3, #48	; 0x30
 8003f34:	d063      	beq.n	8003ffe <HAL_TIM_ConfigClockSource+0x166>
 8003f36:	d86b      	bhi.n	8004010 <HAL_TIM_ConfigClockSource+0x178>
 8003f38:	2b20      	cmp	r3, #32
 8003f3a:	d060      	beq.n	8003ffe <HAL_TIM_ConfigClockSource+0x166>
 8003f3c:	d868      	bhi.n	8004010 <HAL_TIM_ConfigClockSource+0x178>
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d05d      	beq.n	8003ffe <HAL_TIM_ConfigClockSource+0x166>
 8003f42:	2b10      	cmp	r3, #16
 8003f44:	d05b      	beq.n	8003ffe <HAL_TIM_ConfigClockSource+0x166>
 8003f46:	e063      	b.n	8004010 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003f58:	f000 f94a 	bl	80041f0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	689b      	ldr	r3, [r3, #8]
 8003f62:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003f64:	68bb      	ldr	r3, [r7, #8]
 8003f66:	2277      	movs	r2, #119	; 0x77
 8003f68:	4313      	orrs	r3, r2
 8003f6a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	68ba      	ldr	r2, [r7, #8]
 8003f72:	609a      	str	r2, [r3, #8]
      break;
 8003f74:	e052      	b.n	800401c <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003f86:	f000 f933 	bl	80041f0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	689a      	ldr	r2, [r3, #8]
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	2180      	movs	r1, #128	; 0x80
 8003f96:	01c9      	lsls	r1, r1, #7
 8003f98:	430a      	orrs	r2, r1
 8003f9a:	609a      	str	r2, [r3, #8]
      break;
 8003f9c:	e03e      	b.n	800401c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003faa:	001a      	movs	r2, r3
 8003fac:	f000 f8a6 	bl	80040fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	2150      	movs	r1, #80	; 0x50
 8003fb6:	0018      	movs	r0, r3
 8003fb8:	f000 f900 	bl	80041bc <TIM_ITRx_SetConfig>
      break;
 8003fbc:	e02e      	b.n	800401c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003fca:	001a      	movs	r2, r3
 8003fcc:	f000 f8c4 	bl	8004158 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	2160      	movs	r1, #96	; 0x60
 8003fd6:	0018      	movs	r0, r3
 8003fd8:	f000 f8f0 	bl	80041bc <TIM_ITRx_SetConfig>
      break;
 8003fdc:	e01e      	b.n	800401c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003fea:	001a      	movs	r2, r3
 8003fec:	f000 f886 	bl	80040fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	2140      	movs	r1, #64	; 0x40
 8003ff6:	0018      	movs	r0, r3
 8003ff8:	f000 f8e0 	bl	80041bc <TIM_ITRx_SetConfig>
      break;
 8003ffc:	e00e      	b.n	800401c <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681a      	ldr	r2, [r3, #0]
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	0019      	movs	r1, r3
 8004008:	0010      	movs	r0, r2
 800400a:	f000 f8d7 	bl	80041bc <TIM_ITRx_SetConfig>
      break;
 800400e:	e005      	b.n	800401c <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8004010:	230f      	movs	r3, #15
 8004012:	18fb      	adds	r3, r7, r3
 8004014:	2201      	movs	r2, #1
 8004016:	701a      	strb	r2, [r3, #0]
      break;
 8004018:	e000      	b.n	800401c <HAL_TIM_ConfigClockSource+0x184>
      break;
 800401a:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2239      	movs	r2, #57	; 0x39
 8004020:	2101      	movs	r1, #1
 8004022:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2238      	movs	r2, #56	; 0x38
 8004028:	2100      	movs	r1, #0
 800402a:	5499      	strb	r1, [r3, r2]

  return status;
 800402c:	230f      	movs	r3, #15
 800402e:	18fb      	adds	r3, r7, r3
 8004030:	781b      	ldrb	r3, [r3, #0]
}
 8004032:	0018      	movs	r0, r3
 8004034:	46bd      	mov	sp, r7
 8004036:	b004      	add	sp, #16
 8004038:	bd80      	pop	{r7, pc}
 800403a:	46c0      	nop			; (mov r8, r8)
 800403c:	ffff00ff 	.word	0xffff00ff

08004040 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b084      	sub	sp, #16
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
 8004048:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004050:	687a      	ldr	r2, [r7, #4]
 8004052:	2380      	movs	r3, #128	; 0x80
 8004054:	05db      	lsls	r3, r3, #23
 8004056:	429a      	cmp	r2, r3
 8004058:	d00b      	beq.n	8004072 <TIM_Base_SetConfig+0x32>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	4a23      	ldr	r2, [pc, #140]	; (80040ec <TIM_Base_SetConfig+0xac>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d007      	beq.n	8004072 <TIM_Base_SetConfig+0x32>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	4a22      	ldr	r2, [pc, #136]	; (80040f0 <TIM_Base_SetConfig+0xb0>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d003      	beq.n	8004072 <TIM_Base_SetConfig+0x32>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	4a21      	ldr	r2, [pc, #132]	; (80040f4 <TIM_Base_SetConfig+0xb4>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d108      	bne.n	8004084 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	2270      	movs	r2, #112	; 0x70
 8004076:	4393      	bics	r3, r2
 8004078:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	685b      	ldr	r3, [r3, #4]
 800407e:	68fa      	ldr	r2, [r7, #12]
 8004080:	4313      	orrs	r3, r2
 8004082:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004084:	687a      	ldr	r2, [r7, #4]
 8004086:	2380      	movs	r3, #128	; 0x80
 8004088:	05db      	lsls	r3, r3, #23
 800408a:	429a      	cmp	r2, r3
 800408c:	d00b      	beq.n	80040a6 <TIM_Base_SetConfig+0x66>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	4a16      	ldr	r2, [pc, #88]	; (80040ec <TIM_Base_SetConfig+0xac>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d007      	beq.n	80040a6 <TIM_Base_SetConfig+0x66>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	4a15      	ldr	r2, [pc, #84]	; (80040f0 <TIM_Base_SetConfig+0xb0>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d003      	beq.n	80040a6 <TIM_Base_SetConfig+0x66>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	4a14      	ldr	r2, [pc, #80]	; (80040f4 <TIM_Base_SetConfig+0xb4>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d108      	bne.n	80040b8 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	4a13      	ldr	r2, [pc, #76]	; (80040f8 <TIM_Base_SetConfig+0xb8>)
 80040aa:	4013      	ands	r3, r2
 80040ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	68db      	ldr	r3, [r3, #12]
 80040b2:	68fa      	ldr	r2, [r7, #12]
 80040b4:	4313      	orrs	r3, r2
 80040b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	2280      	movs	r2, #128	; 0x80
 80040bc:	4393      	bics	r3, r2
 80040be:	001a      	movs	r2, r3
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	691b      	ldr	r3, [r3, #16]
 80040c4:	4313      	orrs	r3, r2
 80040c6:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	68fa      	ldr	r2, [r7, #12]
 80040cc:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	689a      	ldr	r2, [r3, #8]
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	681a      	ldr	r2, [r3, #0]
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2201      	movs	r2, #1
 80040e2:	615a      	str	r2, [r3, #20]
}
 80040e4:	46c0      	nop			; (mov r8, r8)
 80040e6:	46bd      	mov	sp, r7
 80040e8:	b004      	add	sp, #16
 80040ea:	bd80      	pop	{r7, pc}
 80040ec:	40000400 	.word	0x40000400
 80040f0:	40010800 	.word	0x40010800
 80040f4:	40011400 	.word	0x40011400
 80040f8:	fffffcff 	.word	0xfffffcff

080040fc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b086      	sub	sp, #24
 8004100:	af00      	add	r7, sp, #0
 8004102:	60f8      	str	r0, [r7, #12]
 8004104:	60b9      	str	r1, [r7, #8]
 8004106:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	6a1b      	ldr	r3, [r3, #32]
 800410c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	6a1b      	ldr	r3, [r3, #32]
 8004112:	2201      	movs	r2, #1
 8004114:	4393      	bics	r3, r2
 8004116:	001a      	movs	r2, r3
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	699b      	ldr	r3, [r3, #24]
 8004120:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004122:	693b      	ldr	r3, [r7, #16]
 8004124:	22f0      	movs	r2, #240	; 0xf0
 8004126:	4393      	bics	r3, r2
 8004128:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	011b      	lsls	r3, r3, #4
 800412e:	693a      	ldr	r2, [r7, #16]
 8004130:	4313      	orrs	r3, r2
 8004132:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004134:	697b      	ldr	r3, [r7, #20]
 8004136:	220a      	movs	r2, #10
 8004138:	4393      	bics	r3, r2
 800413a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800413c:	697a      	ldr	r2, [r7, #20]
 800413e:	68bb      	ldr	r3, [r7, #8]
 8004140:	4313      	orrs	r3, r2
 8004142:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	693a      	ldr	r2, [r7, #16]
 8004148:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	697a      	ldr	r2, [r7, #20]
 800414e:	621a      	str	r2, [r3, #32]
}
 8004150:	46c0      	nop			; (mov r8, r8)
 8004152:	46bd      	mov	sp, r7
 8004154:	b006      	add	sp, #24
 8004156:	bd80      	pop	{r7, pc}

08004158 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b086      	sub	sp, #24
 800415c:	af00      	add	r7, sp, #0
 800415e:	60f8      	str	r0, [r7, #12]
 8004160:	60b9      	str	r1, [r7, #8]
 8004162:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	6a1b      	ldr	r3, [r3, #32]
 8004168:	2210      	movs	r2, #16
 800416a:	4393      	bics	r3, r2
 800416c:	001a      	movs	r2, r3
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	699b      	ldr	r3, [r3, #24]
 8004176:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	6a1b      	ldr	r3, [r3, #32]
 800417c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800417e:	697b      	ldr	r3, [r7, #20]
 8004180:	4a0d      	ldr	r2, [pc, #52]	; (80041b8 <TIM_TI2_ConfigInputStage+0x60>)
 8004182:	4013      	ands	r3, r2
 8004184:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	031b      	lsls	r3, r3, #12
 800418a:	697a      	ldr	r2, [r7, #20]
 800418c:	4313      	orrs	r3, r2
 800418e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004190:	693b      	ldr	r3, [r7, #16]
 8004192:	22a0      	movs	r2, #160	; 0xa0
 8004194:	4393      	bics	r3, r2
 8004196:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004198:	68bb      	ldr	r3, [r7, #8]
 800419a:	011b      	lsls	r3, r3, #4
 800419c:	693a      	ldr	r2, [r7, #16]
 800419e:	4313      	orrs	r3, r2
 80041a0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	697a      	ldr	r2, [r7, #20]
 80041a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	693a      	ldr	r2, [r7, #16]
 80041ac:	621a      	str	r2, [r3, #32]
}
 80041ae:	46c0      	nop			; (mov r8, r8)
 80041b0:	46bd      	mov	sp, r7
 80041b2:	b006      	add	sp, #24
 80041b4:	bd80      	pop	{r7, pc}
 80041b6:	46c0      	nop			; (mov r8, r8)
 80041b8:	ffff0fff 	.word	0xffff0fff

080041bc <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b084      	sub	sp, #16
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
 80041c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	689b      	ldr	r3, [r3, #8]
 80041ca:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	2270      	movs	r2, #112	; 0x70
 80041d0:	4393      	bics	r3, r2
 80041d2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80041d4:	683a      	ldr	r2, [r7, #0]
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	4313      	orrs	r3, r2
 80041da:	2207      	movs	r2, #7
 80041dc:	4313      	orrs	r3, r2
 80041de:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	68fa      	ldr	r2, [r7, #12]
 80041e4:	609a      	str	r2, [r3, #8]
}
 80041e6:	46c0      	nop			; (mov r8, r8)
 80041e8:	46bd      	mov	sp, r7
 80041ea:	b004      	add	sp, #16
 80041ec:	bd80      	pop	{r7, pc}
	...

080041f0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b086      	sub	sp, #24
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	60f8      	str	r0, [r7, #12]
 80041f8:	60b9      	str	r1, [r7, #8]
 80041fa:	607a      	str	r2, [r7, #4]
 80041fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	689b      	ldr	r3, [r3, #8]
 8004202:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004204:	697b      	ldr	r3, [r7, #20]
 8004206:	4a09      	ldr	r2, [pc, #36]	; (800422c <TIM_ETR_SetConfig+0x3c>)
 8004208:	4013      	ands	r3, r2
 800420a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	021a      	lsls	r2, r3, #8
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	431a      	orrs	r2, r3
 8004214:	68bb      	ldr	r3, [r7, #8]
 8004216:	4313      	orrs	r3, r2
 8004218:	697a      	ldr	r2, [r7, #20]
 800421a:	4313      	orrs	r3, r2
 800421c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	697a      	ldr	r2, [r7, #20]
 8004222:	609a      	str	r2, [r3, #8]
}
 8004224:	46c0      	nop			; (mov r8, r8)
 8004226:	46bd      	mov	sp, r7
 8004228:	b006      	add	sp, #24
 800422a:	bd80      	pop	{r7, pc}
 800422c:	ffff00ff 	.word	0xffff00ff

08004230 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b084      	sub	sp, #16
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
 8004238:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2238      	movs	r2, #56	; 0x38
 800423e:	5c9b      	ldrb	r3, [r3, r2]
 8004240:	2b01      	cmp	r3, #1
 8004242:	d101      	bne.n	8004248 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004244:	2302      	movs	r3, #2
 8004246:	e047      	b.n	80042d8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2238      	movs	r2, #56	; 0x38
 800424c:	2101      	movs	r1, #1
 800424e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2239      	movs	r2, #57	; 0x39
 8004254:	2102      	movs	r1, #2
 8004256:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	689b      	ldr	r3, [r3, #8]
 8004266:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	2270      	movs	r2, #112	; 0x70
 800426c:	4393      	bics	r3, r2
 800426e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	68fa      	ldr	r2, [r7, #12]
 8004276:	4313      	orrs	r3, r2
 8004278:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	68fa      	ldr	r2, [r7, #12]
 8004280:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681a      	ldr	r2, [r3, #0]
 8004286:	2380      	movs	r3, #128	; 0x80
 8004288:	05db      	lsls	r3, r3, #23
 800428a:	429a      	cmp	r2, r3
 800428c:	d00e      	beq.n	80042ac <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	4a13      	ldr	r2, [pc, #76]	; (80042e0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004294:	4293      	cmp	r3, r2
 8004296:	d009      	beq.n	80042ac <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4a11      	ldr	r2, [pc, #68]	; (80042e4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d004      	beq.n	80042ac <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4a10      	ldr	r2, [pc, #64]	; (80042e8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d10c      	bne.n	80042c6 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80042ac:	68bb      	ldr	r3, [r7, #8]
 80042ae:	2280      	movs	r2, #128	; 0x80
 80042b0:	4393      	bics	r3, r2
 80042b2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	685b      	ldr	r3, [r3, #4]
 80042b8:	68ba      	ldr	r2, [r7, #8]
 80042ba:	4313      	orrs	r3, r2
 80042bc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	68ba      	ldr	r2, [r7, #8]
 80042c4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2239      	movs	r2, #57	; 0x39
 80042ca:	2101      	movs	r1, #1
 80042cc:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2238      	movs	r2, #56	; 0x38
 80042d2:	2100      	movs	r1, #0
 80042d4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80042d6:	2300      	movs	r3, #0
}
 80042d8:	0018      	movs	r0, r3
 80042da:	46bd      	mov	sp, r7
 80042dc:	b004      	add	sp, #16
 80042de:	bd80      	pop	{r7, pc}
 80042e0:	40000400 	.word	0x40000400
 80042e4:	40010800 	.word	0x40010800
 80042e8:	40011400 	.word	0x40011400

080042ec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b082      	sub	sp, #8
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d101      	bne.n	80042fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80042fa:	2301      	movs	r3, #1
 80042fc:	e044      	b.n	8004388 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004302:	2b00      	cmp	r3, #0
 8004304:	d107      	bne.n	8004316 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2278      	movs	r2, #120	; 0x78
 800430a:	2100      	movs	r1, #0
 800430c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	0018      	movs	r0, r3
 8004312:	f7fd ff3f 	bl	8002194 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2224      	movs	r2, #36	; 0x24
 800431a:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	681a      	ldr	r2, [r3, #0]
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	2101      	movs	r1, #1
 8004328:	438a      	bics	r2, r1
 800432a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	0018      	movs	r0, r3
 8004330:	f000 fc2c 	bl	8004b8c <UART_SetConfig>
 8004334:	0003      	movs	r3, r0
 8004336:	2b01      	cmp	r3, #1
 8004338:	d101      	bne.n	800433e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800433a:	2301      	movs	r3, #1
 800433c:	e024      	b.n	8004388 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004342:	2b00      	cmp	r3, #0
 8004344:	d003      	beq.n	800434e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	0018      	movs	r0, r3
 800434a:	f000 febd 	bl	80050c8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	685a      	ldr	r2, [r3, #4]
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	490d      	ldr	r1, [pc, #52]	; (8004390 <HAL_UART_Init+0xa4>)
 800435a:	400a      	ands	r2, r1
 800435c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	689a      	ldr	r2, [r3, #8]
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	212a      	movs	r1, #42	; 0x2a
 800436a:	438a      	bics	r2, r1
 800436c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	681a      	ldr	r2, [r3, #0]
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	2101      	movs	r1, #1
 800437a:	430a      	orrs	r2, r1
 800437c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	0018      	movs	r0, r3
 8004382:	f000 ff55 	bl	8005230 <UART_CheckIdleState>
 8004386:	0003      	movs	r3, r0
}
 8004388:	0018      	movs	r0, r3
 800438a:	46bd      	mov	sp, r7
 800438c:	b002      	add	sp, #8
 800438e:	bd80      	pop	{r7, pc}
 8004390:	ffffb7ff 	.word	0xffffb7ff

08004394 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004394:	b580      	push	{r7, lr}
 8004396:	b08a      	sub	sp, #40	; 0x28
 8004398:	af02      	add	r7, sp, #8
 800439a:	60f8      	str	r0, [r7, #12]
 800439c:	60b9      	str	r1, [r7, #8]
 800439e:	603b      	str	r3, [r7, #0]
 80043a0:	1dbb      	adds	r3, r7, #6
 80043a2:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80043a8:	2b20      	cmp	r3, #32
 80043aa:	d000      	beq.n	80043ae <HAL_UART_Transmit+0x1a>
 80043ac:	e08c      	b.n	80044c8 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 80043ae:	68bb      	ldr	r3, [r7, #8]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d003      	beq.n	80043bc <HAL_UART_Transmit+0x28>
 80043b4:	1dbb      	adds	r3, r7, #6
 80043b6:	881b      	ldrh	r3, [r3, #0]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d101      	bne.n	80043c0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80043bc:	2301      	movs	r3, #1
 80043be:	e084      	b.n	80044ca <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	689a      	ldr	r2, [r3, #8]
 80043c4:	2380      	movs	r3, #128	; 0x80
 80043c6:	015b      	lsls	r3, r3, #5
 80043c8:	429a      	cmp	r2, r3
 80043ca:	d109      	bne.n	80043e0 <HAL_UART_Transmit+0x4c>
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	691b      	ldr	r3, [r3, #16]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d105      	bne.n	80043e0 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80043d4:	68bb      	ldr	r3, [r7, #8]
 80043d6:	2201      	movs	r2, #1
 80043d8:	4013      	ands	r3, r2
 80043da:	d001      	beq.n	80043e0 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80043dc:	2301      	movs	r3, #1
 80043de:	e074      	b.n	80044ca <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	2284      	movs	r2, #132	; 0x84
 80043e4:	2100      	movs	r1, #0
 80043e6:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	2221      	movs	r2, #33	; 0x21
 80043ec:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80043ee:	f7fd ffad 	bl	800234c <HAL_GetTick>
 80043f2:	0003      	movs	r3, r0
 80043f4:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	1dba      	adds	r2, r7, #6
 80043fa:	2150      	movs	r1, #80	; 0x50
 80043fc:	8812      	ldrh	r2, [r2, #0]
 80043fe:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	1dba      	adds	r2, r7, #6
 8004404:	2152      	movs	r1, #82	; 0x52
 8004406:	8812      	ldrh	r2, [r2, #0]
 8004408:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	689a      	ldr	r2, [r3, #8]
 800440e:	2380      	movs	r3, #128	; 0x80
 8004410:	015b      	lsls	r3, r3, #5
 8004412:	429a      	cmp	r2, r3
 8004414:	d108      	bne.n	8004428 <HAL_UART_Transmit+0x94>
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	691b      	ldr	r3, [r3, #16]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d104      	bne.n	8004428 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 800441e:	2300      	movs	r3, #0
 8004420:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004422:	68bb      	ldr	r3, [r7, #8]
 8004424:	61bb      	str	r3, [r7, #24]
 8004426:	e003      	b.n	8004430 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8004428:	68bb      	ldr	r3, [r7, #8]
 800442a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800442c:	2300      	movs	r3, #0
 800442e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004430:	e02f      	b.n	8004492 <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004432:	697a      	ldr	r2, [r7, #20]
 8004434:	68f8      	ldr	r0, [r7, #12]
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	9300      	str	r3, [sp, #0]
 800443a:	0013      	movs	r3, r2
 800443c:	2200      	movs	r2, #0
 800443e:	2180      	movs	r1, #128	; 0x80
 8004440:	f000 ff9e 	bl	8005380 <UART_WaitOnFlagUntilTimeout>
 8004444:	1e03      	subs	r3, r0, #0
 8004446:	d004      	beq.n	8004452 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	2220      	movs	r2, #32
 800444c:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800444e:	2303      	movs	r3, #3
 8004450:	e03b      	b.n	80044ca <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 8004452:	69fb      	ldr	r3, [r7, #28]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d10b      	bne.n	8004470 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004458:	69bb      	ldr	r3, [r7, #24]
 800445a:	881b      	ldrh	r3, [r3, #0]
 800445c:	001a      	movs	r2, r3
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	05d2      	lsls	r2, r2, #23
 8004464:	0dd2      	lsrs	r2, r2, #23
 8004466:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004468:	69bb      	ldr	r3, [r7, #24]
 800446a:	3302      	adds	r3, #2
 800446c:	61bb      	str	r3, [r7, #24]
 800446e:	e007      	b.n	8004480 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004470:	69fb      	ldr	r3, [r7, #28]
 8004472:	781a      	ldrb	r2, [r3, #0]
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800447a:	69fb      	ldr	r3, [r7, #28]
 800447c:	3301      	adds	r3, #1
 800447e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	2252      	movs	r2, #82	; 0x52
 8004484:	5a9b      	ldrh	r3, [r3, r2]
 8004486:	b29b      	uxth	r3, r3
 8004488:	3b01      	subs	r3, #1
 800448a:	b299      	uxth	r1, r3
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	2252      	movs	r2, #82	; 0x52
 8004490:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	2252      	movs	r2, #82	; 0x52
 8004496:	5a9b      	ldrh	r3, [r3, r2]
 8004498:	b29b      	uxth	r3, r3
 800449a:	2b00      	cmp	r3, #0
 800449c:	d1c9      	bne.n	8004432 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800449e:	697a      	ldr	r2, [r7, #20]
 80044a0:	68f8      	ldr	r0, [r7, #12]
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	9300      	str	r3, [sp, #0]
 80044a6:	0013      	movs	r3, r2
 80044a8:	2200      	movs	r2, #0
 80044aa:	2140      	movs	r1, #64	; 0x40
 80044ac:	f000 ff68 	bl	8005380 <UART_WaitOnFlagUntilTimeout>
 80044b0:	1e03      	subs	r3, r0, #0
 80044b2:	d004      	beq.n	80044be <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	2220      	movs	r2, #32
 80044b8:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80044ba:	2303      	movs	r3, #3
 80044bc:	e005      	b.n	80044ca <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	2220      	movs	r2, #32
 80044c2:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80044c4:	2300      	movs	r3, #0
 80044c6:	e000      	b.n	80044ca <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 80044c8:	2302      	movs	r3, #2
  }
}
 80044ca:	0018      	movs	r0, r3
 80044cc:	46bd      	mov	sp, r7
 80044ce:	b008      	add	sp, #32
 80044d0:	bd80      	pop	{r7, pc}
	...

080044d4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b088      	sub	sp, #32
 80044d8:	af00      	add	r7, sp, #0
 80044da:	60f8      	str	r0, [r7, #12]
 80044dc:	60b9      	str	r1, [r7, #8]
 80044de:	1dbb      	adds	r3, r7, #6
 80044e0:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	2280      	movs	r2, #128	; 0x80
 80044e6:	589b      	ldr	r3, [r3, r2]
 80044e8:	2b20      	cmp	r3, #32
 80044ea:	d14a      	bne.n	8004582 <HAL_UART_Receive_IT+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 80044ec:	68bb      	ldr	r3, [r7, #8]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d003      	beq.n	80044fa <HAL_UART_Receive_IT+0x26>
 80044f2:	1dbb      	adds	r3, r7, #6
 80044f4:	881b      	ldrh	r3, [r3, #0]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d101      	bne.n	80044fe <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80044fa:	2301      	movs	r3, #1
 80044fc:	e042      	b.n	8004584 <HAL_UART_Receive_IT+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	689a      	ldr	r2, [r3, #8]
 8004502:	2380      	movs	r3, #128	; 0x80
 8004504:	015b      	lsls	r3, r3, #5
 8004506:	429a      	cmp	r2, r3
 8004508:	d109      	bne.n	800451e <HAL_UART_Receive_IT+0x4a>
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	691b      	ldr	r3, [r3, #16]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d105      	bne.n	800451e <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004512:	68bb      	ldr	r3, [r7, #8]
 8004514:	2201      	movs	r2, #1
 8004516:	4013      	ands	r3, r2
 8004518:	d001      	beq.n	800451e <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 800451a:	2301      	movs	r3, #1
 800451c:	e032      	b.n	8004584 <HAL_UART_Receive_IT+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	2200      	movs	r2, #0
 8004522:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4a18      	ldr	r2, [pc, #96]	; (800458c <HAL_UART_Receive_IT+0xb8>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d020      	beq.n	8004570 <HAL_UART_Receive_IT+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	685a      	ldr	r2, [r3, #4]
 8004534:	2380      	movs	r3, #128	; 0x80
 8004536:	041b      	lsls	r3, r3, #16
 8004538:	4013      	ands	r3, r2
 800453a:	d019      	beq.n	8004570 <HAL_UART_Receive_IT+0x9c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800453c:	f3ef 8310 	mrs	r3, PRIMASK
 8004540:	613b      	str	r3, [r7, #16]
  return(result);
 8004542:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004544:	61fb      	str	r3, [r7, #28]
 8004546:	2301      	movs	r3, #1
 8004548:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800454a:	697b      	ldr	r3, [r7, #20]
 800454c:	f383 8810 	msr	PRIMASK, r3
}
 8004550:	46c0      	nop			; (mov r8, r8)
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	681a      	ldr	r2, [r3, #0]
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	2180      	movs	r1, #128	; 0x80
 800455e:	04c9      	lsls	r1, r1, #19
 8004560:	430a      	orrs	r2, r1
 8004562:	601a      	str	r2, [r3, #0]
 8004564:	69fb      	ldr	r3, [r7, #28]
 8004566:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004568:	69bb      	ldr	r3, [r7, #24]
 800456a:	f383 8810 	msr	PRIMASK, r3
}
 800456e:	46c0      	nop			; (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004570:	1dbb      	adds	r3, r7, #6
 8004572:	881a      	ldrh	r2, [r3, #0]
 8004574:	68b9      	ldr	r1, [r7, #8]
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	0018      	movs	r0, r3
 800457a:	f000 ff6b 	bl	8005454 <UART_Start_Receive_IT>
 800457e:	0003      	movs	r3, r0
 8004580:	e000      	b.n	8004584 <HAL_UART_Receive_IT+0xb0>
  }
  else
  {
    return HAL_BUSY;
 8004582:	2302      	movs	r3, #2
  }
}
 8004584:	0018      	movs	r0, r3
 8004586:	46bd      	mov	sp, r7
 8004588:	b008      	add	sp, #32
 800458a:	bd80      	pop	{r7, pc}
 800458c:	40004800 	.word	0x40004800

08004590 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004590:	b590      	push	{r4, r7, lr}
 8004592:	b0ab      	sub	sp, #172	; 0xac
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	69db      	ldr	r3, [r3, #28]
 800459e:	22a4      	movs	r2, #164	; 0xa4
 80045a0:	18b9      	adds	r1, r7, r2
 80045a2:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	20a0      	movs	r0, #160	; 0xa0
 80045ac:	1839      	adds	r1, r7, r0
 80045ae:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	689b      	ldr	r3, [r3, #8]
 80045b6:	219c      	movs	r1, #156	; 0x9c
 80045b8:	1879      	adds	r1, r7, r1
 80045ba:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80045bc:	0011      	movs	r1, r2
 80045be:	18bb      	adds	r3, r7, r2
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	4a99      	ldr	r2, [pc, #612]	; (8004828 <HAL_UART_IRQHandler+0x298>)
 80045c4:	4013      	ands	r3, r2
 80045c6:	2298      	movs	r2, #152	; 0x98
 80045c8:	18bc      	adds	r4, r7, r2
 80045ca:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 80045cc:	18bb      	adds	r3, r7, r2
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d114      	bne.n	80045fe <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80045d4:	187b      	adds	r3, r7, r1
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	2220      	movs	r2, #32
 80045da:	4013      	ands	r3, r2
 80045dc:	d00f      	beq.n	80045fe <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80045de:	183b      	adds	r3, r7, r0
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	2220      	movs	r2, #32
 80045e4:	4013      	ands	r3, r2
 80045e6:	d00a      	beq.n	80045fe <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d100      	bne.n	80045f2 <HAL_UART_IRQHandler+0x62>
 80045f0:	e2a0      	b.n	8004b34 <HAL_UART_IRQHandler+0x5a4>
      {
        huart->RxISR(huart);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80045f6:	687a      	ldr	r2, [r7, #4]
 80045f8:	0010      	movs	r0, r2
 80045fa:	4798      	blx	r3
      }
      return;
 80045fc:	e29a      	b.n	8004b34 <HAL_UART_IRQHandler+0x5a4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80045fe:	2398      	movs	r3, #152	; 0x98
 8004600:	18fb      	adds	r3, r7, r3
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d100      	bne.n	800460a <HAL_UART_IRQHandler+0x7a>
 8004608:	e114      	b.n	8004834 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800460a:	239c      	movs	r3, #156	; 0x9c
 800460c:	18fb      	adds	r3, r7, r3
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	2201      	movs	r2, #1
 8004612:	4013      	ands	r3, r2
 8004614:	d106      	bne.n	8004624 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004616:	23a0      	movs	r3, #160	; 0xa0
 8004618:	18fb      	adds	r3, r7, r3
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	4a83      	ldr	r2, [pc, #524]	; (800482c <HAL_UART_IRQHandler+0x29c>)
 800461e:	4013      	ands	r3, r2
 8004620:	d100      	bne.n	8004624 <HAL_UART_IRQHandler+0x94>
 8004622:	e107      	b.n	8004834 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004624:	23a4      	movs	r3, #164	; 0xa4
 8004626:	18fb      	adds	r3, r7, r3
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	2201      	movs	r2, #1
 800462c:	4013      	ands	r3, r2
 800462e:	d012      	beq.n	8004656 <HAL_UART_IRQHandler+0xc6>
 8004630:	23a0      	movs	r3, #160	; 0xa0
 8004632:	18fb      	adds	r3, r7, r3
 8004634:	681a      	ldr	r2, [r3, #0]
 8004636:	2380      	movs	r3, #128	; 0x80
 8004638:	005b      	lsls	r3, r3, #1
 800463a:	4013      	ands	r3, r2
 800463c:	d00b      	beq.n	8004656 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	2201      	movs	r2, #1
 8004644:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2284      	movs	r2, #132	; 0x84
 800464a:	589b      	ldr	r3, [r3, r2]
 800464c:	2201      	movs	r2, #1
 800464e:	431a      	orrs	r2, r3
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2184      	movs	r1, #132	; 0x84
 8004654:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004656:	23a4      	movs	r3, #164	; 0xa4
 8004658:	18fb      	adds	r3, r7, r3
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	2202      	movs	r2, #2
 800465e:	4013      	ands	r3, r2
 8004660:	d011      	beq.n	8004686 <HAL_UART_IRQHandler+0xf6>
 8004662:	239c      	movs	r3, #156	; 0x9c
 8004664:	18fb      	adds	r3, r7, r3
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	2201      	movs	r2, #1
 800466a:	4013      	ands	r3, r2
 800466c:	d00b      	beq.n	8004686 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	2202      	movs	r2, #2
 8004674:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2284      	movs	r2, #132	; 0x84
 800467a:	589b      	ldr	r3, [r3, r2]
 800467c:	2204      	movs	r2, #4
 800467e:	431a      	orrs	r2, r3
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2184      	movs	r1, #132	; 0x84
 8004684:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004686:	23a4      	movs	r3, #164	; 0xa4
 8004688:	18fb      	adds	r3, r7, r3
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	2204      	movs	r2, #4
 800468e:	4013      	ands	r3, r2
 8004690:	d011      	beq.n	80046b6 <HAL_UART_IRQHandler+0x126>
 8004692:	239c      	movs	r3, #156	; 0x9c
 8004694:	18fb      	adds	r3, r7, r3
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	2201      	movs	r2, #1
 800469a:	4013      	ands	r3, r2
 800469c:	d00b      	beq.n	80046b6 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	2204      	movs	r2, #4
 80046a4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2284      	movs	r2, #132	; 0x84
 80046aa:	589b      	ldr	r3, [r3, r2]
 80046ac:	2202      	movs	r2, #2
 80046ae:	431a      	orrs	r2, r3
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2184      	movs	r1, #132	; 0x84
 80046b4:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80046b6:	23a4      	movs	r3, #164	; 0xa4
 80046b8:	18fb      	adds	r3, r7, r3
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	2208      	movs	r2, #8
 80046be:	4013      	ands	r3, r2
 80046c0:	d017      	beq.n	80046f2 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80046c2:	23a0      	movs	r3, #160	; 0xa0
 80046c4:	18fb      	adds	r3, r7, r3
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	2220      	movs	r2, #32
 80046ca:	4013      	ands	r3, r2
 80046cc:	d105      	bne.n	80046da <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80046ce:	239c      	movs	r3, #156	; 0x9c
 80046d0:	18fb      	adds	r3, r7, r3
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	2201      	movs	r2, #1
 80046d6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80046d8:	d00b      	beq.n	80046f2 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	2208      	movs	r2, #8
 80046e0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2284      	movs	r2, #132	; 0x84
 80046e6:	589b      	ldr	r3, [r3, r2]
 80046e8:	2208      	movs	r2, #8
 80046ea:	431a      	orrs	r2, r3
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2184      	movs	r1, #132	; 0x84
 80046f0:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80046f2:	23a4      	movs	r3, #164	; 0xa4
 80046f4:	18fb      	adds	r3, r7, r3
 80046f6:	681a      	ldr	r2, [r3, #0]
 80046f8:	2380      	movs	r3, #128	; 0x80
 80046fa:	011b      	lsls	r3, r3, #4
 80046fc:	4013      	ands	r3, r2
 80046fe:	d013      	beq.n	8004728 <HAL_UART_IRQHandler+0x198>
 8004700:	23a0      	movs	r3, #160	; 0xa0
 8004702:	18fb      	adds	r3, r7, r3
 8004704:	681a      	ldr	r2, [r3, #0]
 8004706:	2380      	movs	r3, #128	; 0x80
 8004708:	04db      	lsls	r3, r3, #19
 800470a:	4013      	ands	r3, r2
 800470c:	d00c      	beq.n	8004728 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	2280      	movs	r2, #128	; 0x80
 8004714:	0112      	lsls	r2, r2, #4
 8004716:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2284      	movs	r2, #132	; 0x84
 800471c:	589b      	ldr	r3, [r3, r2]
 800471e:	2220      	movs	r2, #32
 8004720:	431a      	orrs	r2, r3
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2184      	movs	r1, #132	; 0x84
 8004726:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2284      	movs	r2, #132	; 0x84
 800472c:	589b      	ldr	r3, [r3, r2]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d100      	bne.n	8004734 <HAL_UART_IRQHandler+0x1a4>
 8004732:	e201      	b.n	8004b38 <HAL_UART_IRQHandler+0x5a8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004734:	23a4      	movs	r3, #164	; 0xa4
 8004736:	18fb      	adds	r3, r7, r3
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	2220      	movs	r2, #32
 800473c:	4013      	ands	r3, r2
 800473e:	d00e      	beq.n	800475e <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004740:	23a0      	movs	r3, #160	; 0xa0
 8004742:	18fb      	adds	r3, r7, r3
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	2220      	movs	r2, #32
 8004748:	4013      	ands	r3, r2
 800474a:	d008      	beq.n	800475e <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004750:	2b00      	cmp	r3, #0
 8004752:	d004      	beq.n	800475e <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004758:	687a      	ldr	r2, [r7, #4]
 800475a:	0010      	movs	r0, r2
 800475c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	2284      	movs	r2, #132	; 0x84
 8004762:	589b      	ldr	r3, [r3, r2]
 8004764:	2194      	movs	r1, #148	; 0x94
 8004766:	187a      	adds	r2, r7, r1
 8004768:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	689b      	ldr	r3, [r3, #8]
 8004770:	2240      	movs	r2, #64	; 0x40
 8004772:	4013      	ands	r3, r2
 8004774:	2b40      	cmp	r3, #64	; 0x40
 8004776:	d004      	beq.n	8004782 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004778:	187b      	adds	r3, r7, r1
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	2228      	movs	r2, #40	; 0x28
 800477e:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004780:	d047      	beq.n	8004812 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	0018      	movs	r0, r3
 8004786:	f000 ff2f 	bl	80055e8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	689b      	ldr	r3, [r3, #8]
 8004790:	2240      	movs	r2, #64	; 0x40
 8004792:	4013      	ands	r3, r2
 8004794:	2b40      	cmp	r3, #64	; 0x40
 8004796:	d137      	bne.n	8004808 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004798:	f3ef 8310 	mrs	r3, PRIMASK
 800479c:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 800479e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80047a0:	2090      	movs	r0, #144	; 0x90
 80047a2:	183a      	adds	r2, r7, r0
 80047a4:	6013      	str	r3, [r2, #0]
 80047a6:	2301      	movs	r3, #1
 80047a8:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047aa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80047ac:	f383 8810 	msr	PRIMASK, r3
}
 80047b0:	46c0      	nop			; (mov r8, r8)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	689a      	ldr	r2, [r3, #8]
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	2140      	movs	r1, #64	; 0x40
 80047be:	438a      	bics	r2, r1
 80047c0:	609a      	str	r2, [r3, #8]
 80047c2:	183b      	adds	r3, r7, r0
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047c8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80047ca:	f383 8810 	msr	PRIMASK, r3
}
 80047ce:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d012      	beq.n	80047fe <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047dc:	4a14      	ldr	r2, [pc, #80]	; (8004830 <HAL_UART_IRQHandler+0x2a0>)
 80047de:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047e4:	0018      	movs	r0, r3
 80047e6:	f7fd fefd 	bl	80025e4 <HAL_DMA_Abort_IT>
 80047ea:	1e03      	subs	r3, r0, #0
 80047ec:	d01a      	beq.n	8004824 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047f8:	0018      	movs	r0, r3
 80047fa:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047fc:	e012      	b.n	8004824 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	0018      	movs	r0, r3
 8004802:	f000 f9af 	bl	8004b64 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004806:	e00d      	b.n	8004824 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	0018      	movs	r0, r3
 800480c:	f000 f9aa 	bl	8004b64 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004810:	e008      	b.n	8004824 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	0018      	movs	r0, r3
 8004816:	f000 f9a5 	bl	8004b64 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2284      	movs	r2, #132	; 0x84
 800481e:	2100      	movs	r1, #0
 8004820:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8004822:	e189      	b.n	8004b38 <HAL_UART_IRQHandler+0x5a8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004824:	46c0      	nop			; (mov r8, r8)
    return;
 8004826:	e187      	b.n	8004b38 <HAL_UART_IRQHandler+0x5a8>
 8004828:	0000080f 	.word	0x0000080f
 800482c:	04000120 	.word	0x04000120
 8004830:	080056b1 	.word	0x080056b1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004838:	2b01      	cmp	r3, #1
 800483a:	d000      	beq.n	800483e <HAL_UART_IRQHandler+0x2ae>
 800483c:	e13b      	b.n	8004ab6 <HAL_UART_IRQHandler+0x526>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800483e:	23a4      	movs	r3, #164	; 0xa4
 8004840:	18fb      	adds	r3, r7, r3
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	2210      	movs	r2, #16
 8004846:	4013      	ands	r3, r2
 8004848:	d100      	bne.n	800484c <HAL_UART_IRQHandler+0x2bc>
 800484a:	e134      	b.n	8004ab6 <HAL_UART_IRQHandler+0x526>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800484c:	23a0      	movs	r3, #160	; 0xa0
 800484e:	18fb      	adds	r3, r7, r3
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	2210      	movs	r2, #16
 8004854:	4013      	ands	r3, r2
 8004856:	d100      	bne.n	800485a <HAL_UART_IRQHandler+0x2ca>
 8004858:	e12d      	b.n	8004ab6 <HAL_UART_IRQHandler+0x526>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	2210      	movs	r2, #16
 8004860:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	689b      	ldr	r3, [r3, #8]
 8004868:	2240      	movs	r2, #64	; 0x40
 800486a:	4013      	ands	r3, r2
 800486c:	2b40      	cmp	r3, #64	; 0x40
 800486e:	d000      	beq.n	8004872 <HAL_UART_IRQHandler+0x2e2>
 8004870:	e0a1      	b.n	80049b6 <HAL_UART_IRQHandler+0x426>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	685a      	ldr	r2, [r3, #4]
 800487a:	217e      	movs	r1, #126	; 0x7e
 800487c:	187b      	adds	r3, r7, r1
 800487e:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8004880:	187b      	adds	r3, r7, r1
 8004882:	881b      	ldrh	r3, [r3, #0]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d100      	bne.n	800488a <HAL_UART_IRQHandler+0x2fa>
 8004888:	e158      	b.n	8004b3c <HAL_UART_IRQHandler+0x5ac>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2258      	movs	r2, #88	; 0x58
 800488e:	5a9b      	ldrh	r3, [r3, r2]
 8004890:	187a      	adds	r2, r7, r1
 8004892:	8812      	ldrh	r2, [r2, #0]
 8004894:	429a      	cmp	r2, r3
 8004896:	d300      	bcc.n	800489a <HAL_UART_IRQHandler+0x30a>
 8004898:	e150      	b.n	8004b3c <HAL_UART_IRQHandler+0x5ac>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	187a      	adds	r2, r7, r1
 800489e:	215a      	movs	r1, #90	; 0x5a
 80048a0:	8812      	ldrh	r2, [r2, #0]
 80048a2:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	2220      	movs	r2, #32
 80048ae:	4013      	ands	r3, r2
 80048b0:	d16f      	bne.n	8004992 <HAL_UART_IRQHandler+0x402>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80048b2:	f3ef 8310 	mrs	r3, PRIMASK
 80048b6:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80048b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80048ba:	67bb      	str	r3, [r7, #120]	; 0x78
 80048bc:	2301      	movs	r3, #1
 80048be:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048c2:	f383 8810 	msr	PRIMASK, r3
}
 80048c6:	46c0      	nop			; (mov r8, r8)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	681a      	ldr	r2, [r3, #0]
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	499e      	ldr	r1, [pc, #632]	; (8004b4c <HAL_UART_IRQHandler+0x5bc>)
 80048d4:	400a      	ands	r2, r1
 80048d6:	601a      	str	r2, [r3, #0]
 80048d8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80048da:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048de:	f383 8810 	msr	PRIMASK, r3
}
 80048e2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80048e4:	f3ef 8310 	mrs	r3, PRIMASK
 80048e8:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 80048ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048ec:	677b      	str	r3, [r7, #116]	; 0x74
 80048ee:	2301      	movs	r3, #1
 80048f0:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80048f4:	f383 8810 	msr	PRIMASK, r3
}
 80048f8:	46c0      	nop			; (mov r8, r8)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	689a      	ldr	r2, [r3, #8]
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	2101      	movs	r1, #1
 8004906:	438a      	bics	r2, r1
 8004908:	609a      	str	r2, [r3, #8]
 800490a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800490c:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800490e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004910:	f383 8810 	msr	PRIMASK, r3
}
 8004914:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004916:	f3ef 8310 	mrs	r3, PRIMASK
 800491a:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 800491c:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800491e:	673b      	str	r3, [r7, #112]	; 0x70
 8004920:	2301      	movs	r3, #1
 8004922:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004924:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004926:	f383 8810 	msr	PRIMASK, r3
}
 800492a:	46c0      	nop			; (mov r8, r8)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	689a      	ldr	r2, [r3, #8]
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	2140      	movs	r1, #64	; 0x40
 8004938:	438a      	bics	r2, r1
 800493a:	609a      	str	r2, [r3, #8]
 800493c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800493e:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004940:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004942:	f383 8810 	msr	PRIMASK, r3
}
 8004946:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2280      	movs	r2, #128	; 0x80
 800494c:	2120      	movs	r1, #32
 800494e:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2200      	movs	r2, #0
 8004954:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004956:	f3ef 8310 	mrs	r3, PRIMASK
 800495a:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 800495c:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800495e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004960:	2301      	movs	r3, #1
 8004962:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004964:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004966:	f383 8810 	msr	PRIMASK, r3
}
 800496a:	46c0      	nop			; (mov r8, r8)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	681a      	ldr	r2, [r3, #0]
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	2110      	movs	r1, #16
 8004978:	438a      	bics	r2, r1
 800497a:	601a      	str	r2, [r3, #0]
 800497c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800497e:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004980:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004982:	f383 8810 	msr	PRIMASK, r3
}
 8004986:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800498c:	0018      	movs	r0, r3
 800498e:	f7fd fde9 	bl	8002564 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2202      	movs	r2, #2
 8004996:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2258      	movs	r2, #88	; 0x58
 800499c:	5a9a      	ldrh	r2, [r3, r2]
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	215a      	movs	r1, #90	; 0x5a
 80049a2:	5a5b      	ldrh	r3, [r3, r1]
 80049a4:	b29b      	uxth	r3, r3
 80049a6:	1ad3      	subs	r3, r2, r3
 80049a8:	b29a      	uxth	r2, r3
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	0011      	movs	r1, r2
 80049ae:	0018      	movs	r0, r3
 80049b0:	f000 f8e0 	bl	8004b74 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80049b4:	e0c2      	b.n	8004b3c <HAL_UART_IRQHandler+0x5ac>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2258      	movs	r2, #88	; 0x58
 80049ba:	5a99      	ldrh	r1, [r3, r2]
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	225a      	movs	r2, #90	; 0x5a
 80049c0:	5a9b      	ldrh	r3, [r3, r2]
 80049c2:	b29a      	uxth	r2, r3
 80049c4:	208e      	movs	r0, #142	; 0x8e
 80049c6:	183b      	adds	r3, r7, r0
 80049c8:	1a8a      	subs	r2, r1, r2
 80049ca:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	225a      	movs	r2, #90	; 0x5a
 80049d0:	5a9b      	ldrh	r3, [r3, r2]
 80049d2:	b29b      	uxth	r3, r3
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d100      	bne.n	80049da <HAL_UART_IRQHandler+0x44a>
 80049d8:	e0b2      	b.n	8004b40 <HAL_UART_IRQHandler+0x5b0>
          && (nb_rx_data > 0U))
 80049da:	183b      	adds	r3, r7, r0
 80049dc:	881b      	ldrh	r3, [r3, #0]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d100      	bne.n	80049e4 <HAL_UART_IRQHandler+0x454>
 80049e2:	e0ad      	b.n	8004b40 <HAL_UART_IRQHandler+0x5b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80049e4:	f3ef 8310 	mrs	r3, PRIMASK
 80049e8:	60fb      	str	r3, [r7, #12]
  return(result);
 80049ea:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80049ec:	2488      	movs	r4, #136	; 0x88
 80049ee:	193a      	adds	r2, r7, r4
 80049f0:	6013      	str	r3, [r2, #0]
 80049f2:	2301      	movs	r3, #1
 80049f4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049f6:	693b      	ldr	r3, [r7, #16]
 80049f8:	f383 8810 	msr	PRIMASK, r3
}
 80049fc:	46c0      	nop			; (mov r8, r8)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	681a      	ldr	r2, [r3, #0]
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	4951      	ldr	r1, [pc, #324]	; (8004b50 <HAL_UART_IRQHandler+0x5c0>)
 8004a0a:	400a      	ands	r2, r1
 8004a0c:	601a      	str	r2, [r3, #0]
 8004a0e:	193b      	adds	r3, r7, r4
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a14:	697b      	ldr	r3, [r7, #20]
 8004a16:	f383 8810 	msr	PRIMASK, r3
}
 8004a1a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a1c:	f3ef 8310 	mrs	r3, PRIMASK
 8004a20:	61bb      	str	r3, [r7, #24]
  return(result);
 8004a22:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a24:	2484      	movs	r4, #132	; 0x84
 8004a26:	193a      	adds	r2, r7, r4
 8004a28:	6013      	str	r3, [r2, #0]
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a2e:	69fb      	ldr	r3, [r7, #28]
 8004a30:	f383 8810 	msr	PRIMASK, r3
}
 8004a34:	46c0      	nop			; (mov r8, r8)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	689a      	ldr	r2, [r3, #8]
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	2101      	movs	r1, #1
 8004a42:	438a      	bics	r2, r1
 8004a44:	609a      	str	r2, [r3, #8]
 8004a46:	193b      	adds	r3, r7, r4
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a4c:	6a3b      	ldr	r3, [r7, #32]
 8004a4e:	f383 8810 	msr	PRIMASK, r3
}
 8004a52:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2280      	movs	r2, #128	; 0x80
 8004a58:	2120      	movs	r1, #32
 8004a5a:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2200      	movs	r2, #0
 8004a60:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2200      	movs	r2, #0
 8004a66:	669a      	str	r2, [r3, #104]	; 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a68:	f3ef 8310 	mrs	r3, PRIMASK
 8004a6c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a70:	2480      	movs	r4, #128	; 0x80
 8004a72:	193a      	adds	r2, r7, r4
 8004a74:	6013      	str	r3, [r2, #0]
 8004a76:	2301      	movs	r3, #1
 8004a78:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a7c:	f383 8810 	msr	PRIMASK, r3
}
 8004a80:	46c0      	nop			; (mov r8, r8)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	681a      	ldr	r2, [r3, #0]
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	2110      	movs	r1, #16
 8004a8e:	438a      	bics	r2, r1
 8004a90:	601a      	str	r2, [r3, #0]
 8004a92:	193b      	adds	r3, r7, r4
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a9a:	f383 8810 	msr	PRIMASK, r3
}
 8004a9e:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2202      	movs	r2, #2
 8004aa4:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004aa6:	183b      	adds	r3, r7, r0
 8004aa8:	881a      	ldrh	r2, [r3, #0]
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	0011      	movs	r1, r2
 8004aae:	0018      	movs	r0, r3
 8004ab0:	f000 f860 	bl	8004b74 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004ab4:	e044      	b.n	8004b40 <HAL_UART_IRQHandler+0x5b0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004ab6:	23a4      	movs	r3, #164	; 0xa4
 8004ab8:	18fb      	adds	r3, r7, r3
 8004aba:	681a      	ldr	r2, [r3, #0]
 8004abc:	2380      	movs	r3, #128	; 0x80
 8004abe:	035b      	lsls	r3, r3, #13
 8004ac0:	4013      	ands	r3, r2
 8004ac2:	d010      	beq.n	8004ae6 <HAL_UART_IRQHandler+0x556>
 8004ac4:	239c      	movs	r3, #156	; 0x9c
 8004ac6:	18fb      	adds	r3, r7, r3
 8004ac8:	681a      	ldr	r2, [r3, #0]
 8004aca:	2380      	movs	r3, #128	; 0x80
 8004acc:	03db      	lsls	r3, r3, #15
 8004ace:	4013      	ands	r3, r2
 8004ad0:	d009      	beq.n	8004ae6 <HAL_UART_IRQHandler+0x556>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	2280      	movs	r2, #128	; 0x80
 8004ad8:	0352      	lsls	r2, r2, #13
 8004ada:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	0018      	movs	r0, r3
 8004ae0:	f000 ffec 	bl	8005abc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004ae4:	e02f      	b.n	8004b46 <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004ae6:	23a4      	movs	r3, #164	; 0xa4
 8004ae8:	18fb      	adds	r3, r7, r3
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	2280      	movs	r2, #128	; 0x80
 8004aee:	4013      	ands	r3, r2
 8004af0:	d00f      	beq.n	8004b12 <HAL_UART_IRQHandler+0x582>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004af2:	23a0      	movs	r3, #160	; 0xa0
 8004af4:	18fb      	adds	r3, r7, r3
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	2280      	movs	r2, #128	; 0x80
 8004afa:	4013      	ands	r3, r2
 8004afc:	d009      	beq.n	8004b12 <HAL_UART_IRQHandler+0x582>
  {
    if (huart->TxISR != NULL)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d01e      	beq.n	8004b44 <HAL_UART_IRQHandler+0x5b4>
    {
      huart->TxISR(huart);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b0a:	687a      	ldr	r2, [r7, #4]
 8004b0c:	0010      	movs	r0, r2
 8004b0e:	4798      	blx	r3
    }
    return;
 8004b10:	e018      	b.n	8004b44 <HAL_UART_IRQHandler+0x5b4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004b12:	23a4      	movs	r3, #164	; 0xa4
 8004b14:	18fb      	adds	r3, r7, r3
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	2240      	movs	r2, #64	; 0x40
 8004b1a:	4013      	ands	r3, r2
 8004b1c:	d013      	beq.n	8004b46 <HAL_UART_IRQHandler+0x5b6>
 8004b1e:	23a0      	movs	r3, #160	; 0xa0
 8004b20:	18fb      	adds	r3, r7, r3
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	2240      	movs	r2, #64	; 0x40
 8004b26:	4013      	ands	r3, r2
 8004b28:	d00d      	beq.n	8004b46 <HAL_UART_IRQHandler+0x5b6>
  {
    UART_EndTransmit_IT(huart);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	0018      	movs	r0, r3
 8004b2e:	f000 fdd6 	bl	80056de <UART_EndTransmit_IT>
    return;
 8004b32:	e008      	b.n	8004b46 <HAL_UART_IRQHandler+0x5b6>
      return;
 8004b34:	46c0      	nop			; (mov r8, r8)
 8004b36:	e006      	b.n	8004b46 <HAL_UART_IRQHandler+0x5b6>
    return;
 8004b38:	46c0      	nop			; (mov r8, r8)
 8004b3a:	e004      	b.n	8004b46 <HAL_UART_IRQHandler+0x5b6>
      return;
 8004b3c:	46c0      	nop			; (mov r8, r8)
 8004b3e:	e002      	b.n	8004b46 <HAL_UART_IRQHandler+0x5b6>
      return;
 8004b40:	46c0      	nop			; (mov r8, r8)
 8004b42:	e000      	b.n	8004b46 <HAL_UART_IRQHandler+0x5b6>
    return;
 8004b44:	46c0      	nop			; (mov r8, r8)
  }

}
 8004b46:	46bd      	mov	sp, r7
 8004b48:	b02b      	add	sp, #172	; 0xac
 8004b4a:	bd90      	pop	{r4, r7, pc}
 8004b4c:	fffffeff 	.word	0xfffffeff
 8004b50:	fffffedf 	.word	0xfffffedf

08004b54 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b082      	sub	sp, #8
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004b5c:	46c0      	nop			; (mov r8, r8)
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	b002      	add	sp, #8
 8004b62:	bd80      	pop	{r7, pc}

08004b64 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b082      	sub	sp, #8
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004b6c:	46c0      	nop			; (mov r8, r8)
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	b002      	add	sp, #8
 8004b72:	bd80      	pop	{r7, pc}

08004b74 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b082      	sub	sp, #8
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
 8004b7c:	000a      	movs	r2, r1
 8004b7e:	1cbb      	adds	r3, r7, #2
 8004b80:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004b82:	46c0      	nop			; (mov r8, r8)
 8004b84:	46bd      	mov	sp, r7
 8004b86:	b002      	add	sp, #8
 8004b88:	bd80      	pop	{r7, pc}
	...

08004b8c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b8c:	b5b0      	push	{r4, r5, r7, lr}
 8004b8e:	b08e      	sub	sp, #56	; 0x38
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004b94:	231a      	movs	r3, #26
 8004b96:	2218      	movs	r2, #24
 8004b98:	189b      	adds	r3, r3, r2
 8004b9a:	19db      	adds	r3, r3, r7
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004ba0:	69fb      	ldr	r3, [r7, #28]
 8004ba2:	689a      	ldr	r2, [r3, #8]
 8004ba4:	69fb      	ldr	r3, [r7, #28]
 8004ba6:	691b      	ldr	r3, [r3, #16]
 8004ba8:	431a      	orrs	r2, r3
 8004baa:	69fb      	ldr	r3, [r7, #28]
 8004bac:	695b      	ldr	r3, [r3, #20]
 8004bae:	431a      	orrs	r2, r3
 8004bb0:	69fb      	ldr	r3, [r7, #28]
 8004bb2:	69db      	ldr	r3, [r3, #28]
 8004bb4:	4313      	orrs	r3, r2
 8004bb6:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004bb8:	69fb      	ldr	r3, [r7, #28]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	4ac3      	ldr	r2, [pc, #780]	; (8004ecc <UART_SetConfig+0x340>)
 8004bc0:	4013      	ands	r3, r2
 8004bc2:	0019      	movs	r1, r3
 8004bc4:	69fb      	ldr	r3, [r7, #28]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004bca:	430a      	orrs	r2, r1
 8004bcc:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004bce:	69fb      	ldr	r3, [r7, #28]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	685b      	ldr	r3, [r3, #4]
 8004bd4:	4abe      	ldr	r2, [pc, #760]	; (8004ed0 <UART_SetConfig+0x344>)
 8004bd6:	4013      	ands	r3, r2
 8004bd8:	0019      	movs	r1, r3
 8004bda:	69fb      	ldr	r3, [r7, #28]
 8004bdc:	68da      	ldr	r2, [r3, #12]
 8004bde:	69fb      	ldr	r3, [r7, #28]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	430a      	orrs	r2, r1
 8004be4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004be6:	69fb      	ldr	r3, [r7, #28]
 8004be8:	699b      	ldr	r3, [r3, #24]
 8004bea:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004bec:	69fb      	ldr	r3, [r7, #28]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	4ab8      	ldr	r2, [pc, #736]	; (8004ed4 <UART_SetConfig+0x348>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d004      	beq.n	8004c00 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004bf6:	69fb      	ldr	r3, [r7, #28]
 8004bf8:	6a1b      	ldr	r3, [r3, #32]
 8004bfa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004bfc:	4313      	orrs	r3, r2
 8004bfe:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004c00:	69fb      	ldr	r3, [r7, #28]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	689b      	ldr	r3, [r3, #8]
 8004c06:	4ab4      	ldr	r2, [pc, #720]	; (8004ed8 <UART_SetConfig+0x34c>)
 8004c08:	4013      	ands	r3, r2
 8004c0a:	0019      	movs	r1, r3
 8004c0c:	69fb      	ldr	r3, [r7, #28]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004c12:	430a      	orrs	r2, r1
 8004c14:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004c16:	69fb      	ldr	r3, [r7, #28]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4ab0      	ldr	r2, [pc, #704]	; (8004edc <UART_SetConfig+0x350>)
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d131      	bne.n	8004c84 <UART_SetConfig+0xf8>
 8004c20:	4baf      	ldr	r3, [pc, #700]	; (8004ee0 <UART_SetConfig+0x354>)
 8004c22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c24:	2203      	movs	r2, #3
 8004c26:	4013      	ands	r3, r2
 8004c28:	2b03      	cmp	r3, #3
 8004c2a:	d01d      	beq.n	8004c68 <UART_SetConfig+0xdc>
 8004c2c:	d823      	bhi.n	8004c76 <UART_SetConfig+0xea>
 8004c2e:	2b02      	cmp	r3, #2
 8004c30:	d00c      	beq.n	8004c4c <UART_SetConfig+0xc0>
 8004c32:	d820      	bhi.n	8004c76 <UART_SetConfig+0xea>
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d002      	beq.n	8004c3e <UART_SetConfig+0xb2>
 8004c38:	2b01      	cmp	r3, #1
 8004c3a:	d00e      	beq.n	8004c5a <UART_SetConfig+0xce>
 8004c3c:	e01b      	b.n	8004c76 <UART_SetConfig+0xea>
 8004c3e:	231b      	movs	r3, #27
 8004c40:	2218      	movs	r2, #24
 8004c42:	189b      	adds	r3, r3, r2
 8004c44:	19db      	adds	r3, r3, r7
 8004c46:	2201      	movs	r2, #1
 8004c48:	701a      	strb	r2, [r3, #0]
 8004c4a:	e0b4      	b.n	8004db6 <UART_SetConfig+0x22a>
 8004c4c:	231b      	movs	r3, #27
 8004c4e:	2218      	movs	r2, #24
 8004c50:	189b      	adds	r3, r3, r2
 8004c52:	19db      	adds	r3, r3, r7
 8004c54:	2202      	movs	r2, #2
 8004c56:	701a      	strb	r2, [r3, #0]
 8004c58:	e0ad      	b.n	8004db6 <UART_SetConfig+0x22a>
 8004c5a:	231b      	movs	r3, #27
 8004c5c:	2218      	movs	r2, #24
 8004c5e:	189b      	adds	r3, r3, r2
 8004c60:	19db      	adds	r3, r3, r7
 8004c62:	2204      	movs	r2, #4
 8004c64:	701a      	strb	r2, [r3, #0]
 8004c66:	e0a6      	b.n	8004db6 <UART_SetConfig+0x22a>
 8004c68:	231b      	movs	r3, #27
 8004c6a:	2218      	movs	r2, #24
 8004c6c:	189b      	adds	r3, r3, r2
 8004c6e:	19db      	adds	r3, r3, r7
 8004c70:	2208      	movs	r2, #8
 8004c72:	701a      	strb	r2, [r3, #0]
 8004c74:	e09f      	b.n	8004db6 <UART_SetConfig+0x22a>
 8004c76:	231b      	movs	r3, #27
 8004c78:	2218      	movs	r2, #24
 8004c7a:	189b      	adds	r3, r3, r2
 8004c7c:	19db      	adds	r3, r3, r7
 8004c7e:	2210      	movs	r2, #16
 8004c80:	701a      	strb	r2, [r3, #0]
 8004c82:	e098      	b.n	8004db6 <UART_SetConfig+0x22a>
 8004c84:	69fb      	ldr	r3, [r7, #28]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	4a96      	ldr	r2, [pc, #600]	; (8004ee4 <UART_SetConfig+0x358>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d131      	bne.n	8004cf2 <UART_SetConfig+0x166>
 8004c8e:	4b94      	ldr	r3, [pc, #592]	; (8004ee0 <UART_SetConfig+0x354>)
 8004c90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c92:	220c      	movs	r2, #12
 8004c94:	4013      	ands	r3, r2
 8004c96:	2b0c      	cmp	r3, #12
 8004c98:	d01d      	beq.n	8004cd6 <UART_SetConfig+0x14a>
 8004c9a:	d823      	bhi.n	8004ce4 <UART_SetConfig+0x158>
 8004c9c:	2b08      	cmp	r3, #8
 8004c9e:	d00c      	beq.n	8004cba <UART_SetConfig+0x12e>
 8004ca0:	d820      	bhi.n	8004ce4 <UART_SetConfig+0x158>
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d002      	beq.n	8004cac <UART_SetConfig+0x120>
 8004ca6:	2b04      	cmp	r3, #4
 8004ca8:	d00e      	beq.n	8004cc8 <UART_SetConfig+0x13c>
 8004caa:	e01b      	b.n	8004ce4 <UART_SetConfig+0x158>
 8004cac:	231b      	movs	r3, #27
 8004cae:	2218      	movs	r2, #24
 8004cb0:	189b      	adds	r3, r3, r2
 8004cb2:	19db      	adds	r3, r3, r7
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	701a      	strb	r2, [r3, #0]
 8004cb8:	e07d      	b.n	8004db6 <UART_SetConfig+0x22a>
 8004cba:	231b      	movs	r3, #27
 8004cbc:	2218      	movs	r2, #24
 8004cbe:	189b      	adds	r3, r3, r2
 8004cc0:	19db      	adds	r3, r3, r7
 8004cc2:	2202      	movs	r2, #2
 8004cc4:	701a      	strb	r2, [r3, #0]
 8004cc6:	e076      	b.n	8004db6 <UART_SetConfig+0x22a>
 8004cc8:	231b      	movs	r3, #27
 8004cca:	2218      	movs	r2, #24
 8004ccc:	189b      	adds	r3, r3, r2
 8004cce:	19db      	adds	r3, r3, r7
 8004cd0:	2204      	movs	r2, #4
 8004cd2:	701a      	strb	r2, [r3, #0]
 8004cd4:	e06f      	b.n	8004db6 <UART_SetConfig+0x22a>
 8004cd6:	231b      	movs	r3, #27
 8004cd8:	2218      	movs	r2, #24
 8004cda:	189b      	adds	r3, r3, r2
 8004cdc:	19db      	adds	r3, r3, r7
 8004cde:	2208      	movs	r2, #8
 8004ce0:	701a      	strb	r2, [r3, #0]
 8004ce2:	e068      	b.n	8004db6 <UART_SetConfig+0x22a>
 8004ce4:	231b      	movs	r3, #27
 8004ce6:	2218      	movs	r2, #24
 8004ce8:	189b      	adds	r3, r3, r2
 8004cea:	19db      	adds	r3, r3, r7
 8004cec:	2210      	movs	r2, #16
 8004cee:	701a      	strb	r2, [r3, #0]
 8004cf0:	e061      	b.n	8004db6 <UART_SetConfig+0x22a>
 8004cf2:	69fb      	ldr	r3, [r7, #28]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	4a7c      	ldr	r2, [pc, #496]	; (8004ee8 <UART_SetConfig+0x35c>)
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d106      	bne.n	8004d0a <UART_SetConfig+0x17e>
 8004cfc:	231b      	movs	r3, #27
 8004cfe:	2218      	movs	r2, #24
 8004d00:	189b      	adds	r3, r3, r2
 8004d02:	19db      	adds	r3, r3, r7
 8004d04:	2200      	movs	r2, #0
 8004d06:	701a      	strb	r2, [r3, #0]
 8004d08:	e055      	b.n	8004db6 <UART_SetConfig+0x22a>
 8004d0a:	69fb      	ldr	r3, [r7, #28]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4a77      	ldr	r2, [pc, #476]	; (8004eec <UART_SetConfig+0x360>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d106      	bne.n	8004d22 <UART_SetConfig+0x196>
 8004d14:	231b      	movs	r3, #27
 8004d16:	2218      	movs	r2, #24
 8004d18:	189b      	adds	r3, r3, r2
 8004d1a:	19db      	adds	r3, r3, r7
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	701a      	strb	r2, [r3, #0]
 8004d20:	e049      	b.n	8004db6 <UART_SetConfig+0x22a>
 8004d22:	69fb      	ldr	r3, [r7, #28]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	4a6b      	ldr	r2, [pc, #428]	; (8004ed4 <UART_SetConfig+0x348>)
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d13e      	bne.n	8004daa <UART_SetConfig+0x21e>
 8004d2c:	4b6c      	ldr	r3, [pc, #432]	; (8004ee0 <UART_SetConfig+0x354>)
 8004d2e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004d30:	23c0      	movs	r3, #192	; 0xc0
 8004d32:	011b      	lsls	r3, r3, #4
 8004d34:	4013      	ands	r3, r2
 8004d36:	22c0      	movs	r2, #192	; 0xc0
 8004d38:	0112      	lsls	r2, r2, #4
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d027      	beq.n	8004d8e <UART_SetConfig+0x202>
 8004d3e:	22c0      	movs	r2, #192	; 0xc0
 8004d40:	0112      	lsls	r2, r2, #4
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d82a      	bhi.n	8004d9c <UART_SetConfig+0x210>
 8004d46:	2280      	movs	r2, #128	; 0x80
 8004d48:	0112      	lsls	r2, r2, #4
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	d011      	beq.n	8004d72 <UART_SetConfig+0x1e6>
 8004d4e:	2280      	movs	r2, #128	; 0x80
 8004d50:	0112      	lsls	r2, r2, #4
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d822      	bhi.n	8004d9c <UART_SetConfig+0x210>
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d004      	beq.n	8004d64 <UART_SetConfig+0x1d8>
 8004d5a:	2280      	movs	r2, #128	; 0x80
 8004d5c:	00d2      	lsls	r2, r2, #3
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d00e      	beq.n	8004d80 <UART_SetConfig+0x1f4>
 8004d62:	e01b      	b.n	8004d9c <UART_SetConfig+0x210>
 8004d64:	231b      	movs	r3, #27
 8004d66:	2218      	movs	r2, #24
 8004d68:	189b      	adds	r3, r3, r2
 8004d6a:	19db      	adds	r3, r3, r7
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	701a      	strb	r2, [r3, #0]
 8004d70:	e021      	b.n	8004db6 <UART_SetConfig+0x22a>
 8004d72:	231b      	movs	r3, #27
 8004d74:	2218      	movs	r2, #24
 8004d76:	189b      	adds	r3, r3, r2
 8004d78:	19db      	adds	r3, r3, r7
 8004d7a:	2202      	movs	r2, #2
 8004d7c:	701a      	strb	r2, [r3, #0]
 8004d7e:	e01a      	b.n	8004db6 <UART_SetConfig+0x22a>
 8004d80:	231b      	movs	r3, #27
 8004d82:	2218      	movs	r2, #24
 8004d84:	189b      	adds	r3, r3, r2
 8004d86:	19db      	adds	r3, r3, r7
 8004d88:	2204      	movs	r2, #4
 8004d8a:	701a      	strb	r2, [r3, #0]
 8004d8c:	e013      	b.n	8004db6 <UART_SetConfig+0x22a>
 8004d8e:	231b      	movs	r3, #27
 8004d90:	2218      	movs	r2, #24
 8004d92:	189b      	adds	r3, r3, r2
 8004d94:	19db      	adds	r3, r3, r7
 8004d96:	2208      	movs	r2, #8
 8004d98:	701a      	strb	r2, [r3, #0]
 8004d9a:	e00c      	b.n	8004db6 <UART_SetConfig+0x22a>
 8004d9c:	231b      	movs	r3, #27
 8004d9e:	2218      	movs	r2, #24
 8004da0:	189b      	adds	r3, r3, r2
 8004da2:	19db      	adds	r3, r3, r7
 8004da4:	2210      	movs	r2, #16
 8004da6:	701a      	strb	r2, [r3, #0]
 8004da8:	e005      	b.n	8004db6 <UART_SetConfig+0x22a>
 8004daa:	231b      	movs	r3, #27
 8004dac:	2218      	movs	r2, #24
 8004dae:	189b      	adds	r3, r3, r2
 8004db0:	19db      	adds	r3, r3, r7
 8004db2:	2210      	movs	r2, #16
 8004db4:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004db6:	69fb      	ldr	r3, [r7, #28]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	4a46      	ldr	r2, [pc, #280]	; (8004ed4 <UART_SetConfig+0x348>)
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d000      	beq.n	8004dc2 <UART_SetConfig+0x236>
 8004dc0:	e09a      	b.n	8004ef8 <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004dc2:	231b      	movs	r3, #27
 8004dc4:	2218      	movs	r2, #24
 8004dc6:	189b      	adds	r3, r3, r2
 8004dc8:	19db      	adds	r3, r3, r7
 8004dca:	781b      	ldrb	r3, [r3, #0]
 8004dcc:	2b08      	cmp	r3, #8
 8004dce:	d01d      	beq.n	8004e0c <UART_SetConfig+0x280>
 8004dd0:	dc20      	bgt.n	8004e14 <UART_SetConfig+0x288>
 8004dd2:	2b04      	cmp	r3, #4
 8004dd4:	d015      	beq.n	8004e02 <UART_SetConfig+0x276>
 8004dd6:	dc1d      	bgt.n	8004e14 <UART_SetConfig+0x288>
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d002      	beq.n	8004de2 <UART_SetConfig+0x256>
 8004ddc:	2b02      	cmp	r3, #2
 8004dde:	d005      	beq.n	8004dec <UART_SetConfig+0x260>
 8004de0:	e018      	b.n	8004e14 <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004de2:	f7fe fe4f 	bl	8003a84 <HAL_RCC_GetPCLK1Freq>
 8004de6:	0003      	movs	r3, r0
 8004de8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004dea:	e01c      	b.n	8004e26 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004dec:	4b3c      	ldr	r3, [pc, #240]	; (8004ee0 <UART_SetConfig+0x354>)
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	2210      	movs	r2, #16
 8004df2:	4013      	ands	r3, r2
 8004df4:	d002      	beq.n	8004dfc <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8004df6:	4b3e      	ldr	r3, [pc, #248]	; (8004ef0 <UART_SetConfig+0x364>)
 8004df8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004dfa:	e014      	b.n	8004e26 <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 8004dfc:	4b3d      	ldr	r3, [pc, #244]	; (8004ef4 <UART_SetConfig+0x368>)
 8004dfe:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004e00:	e011      	b.n	8004e26 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e02:	f7fe fd8f 	bl	8003924 <HAL_RCC_GetSysClockFreq>
 8004e06:	0003      	movs	r3, r0
 8004e08:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004e0a:	e00c      	b.n	8004e26 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e0c:	2380      	movs	r3, #128	; 0x80
 8004e0e:	021b      	lsls	r3, r3, #8
 8004e10:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004e12:	e008      	b.n	8004e26 <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 8004e14:	2300      	movs	r3, #0
 8004e16:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8004e18:	231a      	movs	r3, #26
 8004e1a:	2218      	movs	r2, #24
 8004e1c:	189b      	adds	r3, r3, r2
 8004e1e:	19db      	adds	r3, r3, r7
 8004e20:	2201      	movs	r2, #1
 8004e22:	701a      	strb	r2, [r3, #0]
        break;
 8004e24:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004e26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d100      	bne.n	8004e2e <UART_SetConfig+0x2a2>
 8004e2c:	e133      	b.n	8005096 <UART_SetConfig+0x50a>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004e2e:	69fb      	ldr	r3, [r7, #28]
 8004e30:	685a      	ldr	r2, [r3, #4]
 8004e32:	0013      	movs	r3, r2
 8004e34:	005b      	lsls	r3, r3, #1
 8004e36:	189b      	adds	r3, r3, r2
 8004e38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004e3a:	429a      	cmp	r2, r3
 8004e3c:	d305      	bcc.n	8004e4a <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004e3e:	69fb      	ldr	r3, [r7, #28]
 8004e40:	685b      	ldr	r3, [r3, #4]
 8004e42:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004e44:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004e46:	429a      	cmp	r2, r3
 8004e48:	d906      	bls.n	8004e58 <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 8004e4a:	231a      	movs	r3, #26
 8004e4c:	2218      	movs	r2, #24
 8004e4e:	189b      	adds	r3, r3, r2
 8004e50:	19db      	adds	r3, r3, r7
 8004e52:	2201      	movs	r2, #1
 8004e54:	701a      	strb	r2, [r3, #0]
 8004e56:	e11e      	b.n	8005096 <UART_SetConfig+0x50a>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004e58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e5a:	613b      	str	r3, [r7, #16]
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	617b      	str	r3, [r7, #20]
 8004e60:	6939      	ldr	r1, [r7, #16]
 8004e62:	697a      	ldr	r2, [r7, #20]
 8004e64:	000b      	movs	r3, r1
 8004e66:	0e1b      	lsrs	r3, r3, #24
 8004e68:	0010      	movs	r0, r2
 8004e6a:	0205      	lsls	r5, r0, #8
 8004e6c:	431d      	orrs	r5, r3
 8004e6e:	000b      	movs	r3, r1
 8004e70:	021c      	lsls	r4, r3, #8
 8004e72:	69fb      	ldr	r3, [r7, #28]
 8004e74:	685b      	ldr	r3, [r3, #4]
 8004e76:	085b      	lsrs	r3, r3, #1
 8004e78:	60bb      	str	r3, [r7, #8]
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	60fb      	str	r3, [r7, #12]
 8004e7e:	68b8      	ldr	r0, [r7, #8]
 8004e80:	68f9      	ldr	r1, [r7, #12]
 8004e82:	1900      	adds	r0, r0, r4
 8004e84:	4169      	adcs	r1, r5
 8004e86:	69fb      	ldr	r3, [r7, #28]
 8004e88:	685b      	ldr	r3, [r3, #4]
 8004e8a:	603b      	str	r3, [r7, #0]
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	607b      	str	r3, [r7, #4]
 8004e90:	683a      	ldr	r2, [r7, #0]
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	f7fb f9e0 	bl	8000258 <__aeabi_uldivmod>
 8004e98:	0002      	movs	r2, r0
 8004e9a:	000b      	movs	r3, r1
 8004e9c:	0013      	movs	r3, r2
 8004e9e:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004ea0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004ea2:	23c0      	movs	r3, #192	; 0xc0
 8004ea4:	009b      	lsls	r3, r3, #2
 8004ea6:	429a      	cmp	r2, r3
 8004ea8:	d309      	bcc.n	8004ebe <UART_SetConfig+0x332>
 8004eaa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004eac:	2380      	movs	r3, #128	; 0x80
 8004eae:	035b      	lsls	r3, r3, #13
 8004eb0:	429a      	cmp	r2, r3
 8004eb2:	d204      	bcs.n	8004ebe <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 8004eb4:	69fb      	ldr	r3, [r7, #28]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004eba:	60da      	str	r2, [r3, #12]
 8004ebc:	e0eb      	b.n	8005096 <UART_SetConfig+0x50a>
        }
        else
        {
          ret = HAL_ERROR;
 8004ebe:	231a      	movs	r3, #26
 8004ec0:	2218      	movs	r2, #24
 8004ec2:	189b      	adds	r3, r3, r2
 8004ec4:	19db      	adds	r3, r3, r7
 8004ec6:	2201      	movs	r2, #1
 8004ec8:	701a      	strb	r2, [r3, #0]
 8004eca:	e0e4      	b.n	8005096 <UART_SetConfig+0x50a>
 8004ecc:	efff69f3 	.word	0xefff69f3
 8004ed0:	ffffcfff 	.word	0xffffcfff
 8004ed4:	40004800 	.word	0x40004800
 8004ed8:	fffff4ff 	.word	0xfffff4ff
 8004edc:	40013800 	.word	0x40013800
 8004ee0:	40021000 	.word	0x40021000
 8004ee4:	40004400 	.word	0x40004400
 8004ee8:	40004c00 	.word	0x40004c00
 8004eec:	40005000 	.word	0x40005000
 8004ef0:	003d0900 	.word	0x003d0900
 8004ef4:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004ef8:	69fb      	ldr	r3, [r7, #28]
 8004efa:	69da      	ldr	r2, [r3, #28]
 8004efc:	2380      	movs	r3, #128	; 0x80
 8004efe:	021b      	lsls	r3, r3, #8
 8004f00:	429a      	cmp	r2, r3
 8004f02:	d000      	beq.n	8004f06 <UART_SetConfig+0x37a>
 8004f04:	e070      	b.n	8004fe8 <UART_SetConfig+0x45c>
  {
    switch (clocksource)
 8004f06:	231b      	movs	r3, #27
 8004f08:	2218      	movs	r2, #24
 8004f0a:	189b      	adds	r3, r3, r2
 8004f0c:	19db      	adds	r3, r3, r7
 8004f0e:	781b      	ldrb	r3, [r3, #0]
 8004f10:	2b08      	cmp	r3, #8
 8004f12:	d822      	bhi.n	8004f5a <UART_SetConfig+0x3ce>
 8004f14:	009a      	lsls	r2, r3, #2
 8004f16:	4b67      	ldr	r3, [pc, #412]	; (80050b4 <UART_SetConfig+0x528>)
 8004f18:	18d3      	adds	r3, r2, r3
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f1e:	f7fe fdb1 	bl	8003a84 <HAL_RCC_GetPCLK1Freq>
 8004f22:	0003      	movs	r3, r0
 8004f24:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004f26:	e021      	b.n	8004f6c <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004f28:	f7fe fdc2 	bl	8003ab0 <HAL_RCC_GetPCLK2Freq>
 8004f2c:	0003      	movs	r3, r0
 8004f2e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004f30:	e01c      	b.n	8004f6c <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004f32:	4b61      	ldr	r3, [pc, #388]	; (80050b8 <UART_SetConfig+0x52c>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	2210      	movs	r2, #16
 8004f38:	4013      	ands	r3, r2
 8004f3a:	d002      	beq.n	8004f42 <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8004f3c:	4b5f      	ldr	r3, [pc, #380]	; (80050bc <UART_SetConfig+0x530>)
 8004f3e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004f40:	e014      	b.n	8004f6c <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 8004f42:	4b5f      	ldr	r3, [pc, #380]	; (80050c0 <UART_SetConfig+0x534>)
 8004f44:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004f46:	e011      	b.n	8004f6c <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f48:	f7fe fcec 	bl	8003924 <HAL_RCC_GetSysClockFreq>
 8004f4c:	0003      	movs	r3, r0
 8004f4e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004f50:	e00c      	b.n	8004f6c <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f52:	2380      	movs	r3, #128	; 0x80
 8004f54:	021b      	lsls	r3, r3, #8
 8004f56:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004f58:	e008      	b.n	8004f6c <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8004f5e:	231a      	movs	r3, #26
 8004f60:	2218      	movs	r2, #24
 8004f62:	189b      	adds	r3, r3, r2
 8004f64:	19db      	adds	r3, r3, r7
 8004f66:	2201      	movs	r2, #1
 8004f68:	701a      	strb	r2, [r3, #0]
        break;
 8004f6a:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004f6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d100      	bne.n	8004f74 <UART_SetConfig+0x3e8>
 8004f72:	e090      	b.n	8005096 <UART_SetConfig+0x50a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004f74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f76:	005a      	lsls	r2, r3, #1
 8004f78:	69fb      	ldr	r3, [r7, #28]
 8004f7a:	685b      	ldr	r3, [r3, #4]
 8004f7c:	085b      	lsrs	r3, r3, #1
 8004f7e:	18d2      	adds	r2, r2, r3
 8004f80:	69fb      	ldr	r3, [r7, #28]
 8004f82:	685b      	ldr	r3, [r3, #4]
 8004f84:	0019      	movs	r1, r3
 8004f86:	0010      	movs	r0, r2
 8004f88:	f7fb f8da 	bl	8000140 <__udivsi3>
 8004f8c:	0003      	movs	r3, r0
 8004f8e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004f90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f92:	2b0f      	cmp	r3, #15
 8004f94:	d921      	bls.n	8004fda <UART_SetConfig+0x44e>
 8004f96:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f98:	2380      	movs	r3, #128	; 0x80
 8004f9a:	025b      	lsls	r3, r3, #9
 8004f9c:	429a      	cmp	r2, r3
 8004f9e:	d21c      	bcs.n	8004fda <UART_SetConfig+0x44e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004fa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fa2:	b29a      	uxth	r2, r3
 8004fa4:	200e      	movs	r0, #14
 8004fa6:	2418      	movs	r4, #24
 8004fa8:	1903      	adds	r3, r0, r4
 8004faa:	19db      	adds	r3, r3, r7
 8004fac:	210f      	movs	r1, #15
 8004fae:	438a      	bics	r2, r1
 8004fb0:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004fb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fb4:	085b      	lsrs	r3, r3, #1
 8004fb6:	b29b      	uxth	r3, r3
 8004fb8:	2207      	movs	r2, #7
 8004fba:	4013      	ands	r3, r2
 8004fbc:	b299      	uxth	r1, r3
 8004fbe:	1903      	adds	r3, r0, r4
 8004fc0:	19db      	adds	r3, r3, r7
 8004fc2:	1902      	adds	r2, r0, r4
 8004fc4:	19d2      	adds	r2, r2, r7
 8004fc6:	8812      	ldrh	r2, [r2, #0]
 8004fc8:	430a      	orrs	r2, r1
 8004fca:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004fcc:	69fb      	ldr	r3, [r7, #28]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	1902      	adds	r2, r0, r4
 8004fd2:	19d2      	adds	r2, r2, r7
 8004fd4:	8812      	ldrh	r2, [r2, #0]
 8004fd6:	60da      	str	r2, [r3, #12]
 8004fd8:	e05d      	b.n	8005096 <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 8004fda:	231a      	movs	r3, #26
 8004fdc:	2218      	movs	r2, #24
 8004fde:	189b      	adds	r3, r3, r2
 8004fe0:	19db      	adds	r3, r3, r7
 8004fe2:	2201      	movs	r2, #1
 8004fe4:	701a      	strb	r2, [r3, #0]
 8004fe6:	e056      	b.n	8005096 <UART_SetConfig+0x50a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004fe8:	231b      	movs	r3, #27
 8004fea:	2218      	movs	r2, #24
 8004fec:	189b      	adds	r3, r3, r2
 8004fee:	19db      	adds	r3, r3, r7
 8004ff0:	781b      	ldrb	r3, [r3, #0]
 8004ff2:	2b08      	cmp	r3, #8
 8004ff4:	d822      	bhi.n	800503c <UART_SetConfig+0x4b0>
 8004ff6:	009a      	lsls	r2, r3, #2
 8004ff8:	4b32      	ldr	r3, [pc, #200]	; (80050c4 <UART_SetConfig+0x538>)
 8004ffa:	18d3      	adds	r3, r2, r3
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005000:	f7fe fd40 	bl	8003a84 <HAL_RCC_GetPCLK1Freq>
 8005004:	0003      	movs	r3, r0
 8005006:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005008:	e021      	b.n	800504e <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800500a:	f7fe fd51 	bl	8003ab0 <HAL_RCC_GetPCLK2Freq>
 800500e:	0003      	movs	r3, r0
 8005010:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005012:	e01c      	b.n	800504e <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005014:	4b28      	ldr	r3, [pc, #160]	; (80050b8 <UART_SetConfig+0x52c>)
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	2210      	movs	r2, #16
 800501a:	4013      	ands	r3, r2
 800501c:	d002      	beq.n	8005024 <UART_SetConfig+0x498>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800501e:	4b27      	ldr	r3, [pc, #156]	; (80050bc <UART_SetConfig+0x530>)
 8005020:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005022:	e014      	b.n	800504e <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 8005024:	4b26      	ldr	r3, [pc, #152]	; (80050c0 <UART_SetConfig+0x534>)
 8005026:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005028:	e011      	b.n	800504e <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800502a:	f7fe fc7b 	bl	8003924 <HAL_RCC_GetSysClockFreq>
 800502e:	0003      	movs	r3, r0
 8005030:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005032:	e00c      	b.n	800504e <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005034:	2380      	movs	r3, #128	; 0x80
 8005036:	021b      	lsls	r3, r3, #8
 8005038:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800503a:	e008      	b.n	800504e <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 800503c:	2300      	movs	r3, #0
 800503e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8005040:	231a      	movs	r3, #26
 8005042:	2218      	movs	r2, #24
 8005044:	189b      	adds	r3, r3, r2
 8005046:	19db      	adds	r3, r3, r7
 8005048:	2201      	movs	r2, #1
 800504a:	701a      	strb	r2, [r3, #0]
        break;
 800504c:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800504e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005050:	2b00      	cmp	r3, #0
 8005052:	d020      	beq.n	8005096 <UART_SetConfig+0x50a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005054:	69fb      	ldr	r3, [r7, #28]
 8005056:	685b      	ldr	r3, [r3, #4]
 8005058:	085a      	lsrs	r2, r3, #1
 800505a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800505c:	18d2      	adds	r2, r2, r3
 800505e:	69fb      	ldr	r3, [r7, #28]
 8005060:	685b      	ldr	r3, [r3, #4]
 8005062:	0019      	movs	r1, r3
 8005064:	0010      	movs	r0, r2
 8005066:	f7fb f86b 	bl	8000140 <__udivsi3>
 800506a:	0003      	movs	r3, r0
 800506c:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800506e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005070:	2b0f      	cmp	r3, #15
 8005072:	d90a      	bls.n	800508a <UART_SetConfig+0x4fe>
 8005074:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005076:	2380      	movs	r3, #128	; 0x80
 8005078:	025b      	lsls	r3, r3, #9
 800507a:	429a      	cmp	r2, r3
 800507c:	d205      	bcs.n	800508a <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800507e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005080:	b29a      	uxth	r2, r3
 8005082:	69fb      	ldr	r3, [r7, #28]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	60da      	str	r2, [r3, #12]
 8005088:	e005      	b.n	8005096 <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 800508a:	231a      	movs	r3, #26
 800508c:	2218      	movs	r2, #24
 800508e:	189b      	adds	r3, r3, r2
 8005090:	19db      	adds	r3, r3, r7
 8005092:	2201      	movs	r2, #1
 8005094:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005096:	69fb      	ldr	r3, [r7, #28]
 8005098:	2200      	movs	r2, #0
 800509a:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800509c:	69fb      	ldr	r3, [r7, #28]
 800509e:	2200      	movs	r2, #0
 80050a0:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80050a2:	231a      	movs	r3, #26
 80050a4:	2218      	movs	r2, #24
 80050a6:	189b      	adds	r3, r3, r2
 80050a8:	19db      	adds	r3, r3, r7
 80050aa:	781b      	ldrb	r3, [r3, #0]
}
 80050ac:	0018      	movs	r0, r3
 80050ae:	46bd      	mov	sp, r7
 80050b0:	b00e      	add	sp, #56	; 0x38
 80050b2:	bdb0      	pop	{r4, r5, r7, pc}
 80050b4:	080070d8 	.word	0x080070d8
 80050b8:	40021000 	.word	0x40021000
 80050bc:	003d0900 	.word	0x003d0900
 80050c0:	00f42400 	.word	0x00f42400
 80050c4:	080070fc 	.word	0x080070fc

080050c8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b082      	sub	sp, #8
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050d4:	2201      	movs	r2, #1
 80050d6:	4013      	ands	r3, r2
 80050d8:	d00b      	beq.n	80050f2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	685b      	ldr	r3, [r3, #4]
 80050e0:	4a4a      	ldr	r2, [pc, #296]	; (800520c <UART_AdvFeatureConfig+0x144>)
 80050e2:	4013      	ands	r3, r2
 80050e4:	0019      	movs	r1, r3
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	430a      	orrs	r2, r1
 80050f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050f6:	2202      	movs	r2, #2
 80050f8:	4013      	ands	r3, r2
 80050fa:	d00b      	beq.n	8005114 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	685b      	ldr	r3, [r3, #4]
 8005102:	4a43      	ldr	r2, [pc, #268]	; (8005210 <UART_AdvFeatureConfig+0x148>)
 8005104:	4013      	ands	r3, r2
 8005106:	0019      	movs	r1, r3
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	430a      	orrs	r2, r1
 8005112:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005118:	2204      	movs	r2, #4
 800511a:	4013      	ands	r3, r2
 800511c:	d00b      	beq.n	8005136 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	685b      	ldr	r3, [r3, #4]
 8005124:	4a3b      	ldr	r2, [pc, #236]	; (8005214 <UART_AdvFeatureConfig+0x14c>)
 8005126:	4013      	ands	r3, r2
 8005128:	0019      	movs	r1, r3
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	430a      	orrs	r2, r1
 8005134:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800513a:	2208      	movs	r2, #8
 800513c:	4013      	ands	r3, r2
 800513e:	d00b      	beq.n	8005158 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	685b      	ldr	r3, [r3, #4]
 8005146:	4a34      	ldr	r2, [pc, #208]	; (8005218 <UART_AdvFeatureConfig+0x150>)
 8005148:	4013      	ands	r3, r2
 800514a:	0019      	movs	r1, r3
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	430a      	orrs	r2, r1
 8005156:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800515c:	2210      	movs	r2, #16
 800515e:	4013      	ands	r3, r2
 8005160:	d00b      	beq.n	800517a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	689b      	ldr	r3, [r3, #8]
 8005168:	4a2c      	ldr	r2, [pc, #176]	; (800521c <UART_AdvFeatureConfig+0x154>)
 800516a:	4013      	ands	r3, r2
 800516c:	0019      	movs	r1, r3
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	430a      	orrs	r2, r1
 8005178:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800517e:	2220      	movs	r2, #32
 8005180:	4013      	ands	r3, r2
 8005182:	d00b      	beq.n	800519c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	689b      	ldr	r3, [r3, #8]
 800518a:	4a25      	ldr	r2, [pc, #148]	; (8005220 <UART_AdvFeatureConfig+0x158>)
 800518c:	4013      	ands	r3, r2
 800518e:	0019      	movs	r1, r3
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	430a      	orrs	r2, r1
 800519a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051a0:	2240      	movs	r2, #64	; 0x40
 80051a2:	4013      	ands	r3, r2
 80051a4:	d01d      	beq.n	80051e2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	685b      	ldr	r3, [r3, #4]
 80051ac:	4a1d      	ldr	r2, [pc, #116]	; (8005224 <UART_AdvFeatureConfig+0x15c>)
 80051ae:	4013      	ands	r3, r2
 80051b0:	0019      	movs	r1, r3
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	430a      	orrs	r2, r1
 80051bc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80051c2:	2380      	movs	r3, #128	; 0x80
 80051c4:	035b      	lsls	r3, r3, #13
 80051c6:	429a      	cmp	r2, r3
 80051c8:	d10b      	bne.n	80051e2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	685b      	ldr	r3, [r3, #4]
 80051d0:	4a15      	ldr	r2, [pc, #84]	; (8005228 <UART_AdvFeatureConfig+0x160>)
 80051d2:	4013      	ands	r3, r2
 80051d4:	0019      	movs	r1, r3
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	430a      	orrs	r2, r1
 80051e0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051e6:	2280      	movs	r2, #128	; 0x80
 80051e8:	4013      	ands	r3, r2
 80051ea:	d00b      	beq.n	8005204 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	685b      	ldr	r3, [r3, #4]
 80051f2:	4a0e      	ldr	r2, [pc, #56]	; (800522c <UART_AdvFeatureConfig+0x164>)
 80051f4:	4013      	ands	r3, r2
 80051f6:	0019      	movs	r1, r3
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	430a      	orrs	r2, r1
 8005202:	605a      	str	r2, [r3, #4]
  }
}
 8005204:	46c0      	nop			; (mov r8, r8)
 8005206:	46bd      	mov	sp, r7
 8005208:	b002      	add	sp, #8
 800520a:	bd80      	pop	{r7, pc}
 800520c:	fffdffff 	.word	0xfffdffff
 8005210:	fffeffff 	.word	0xfffeffff
 8005214:	fffbffff 	.word	0xfffbffff
 8005218:	ffff7fff 	.word	0xffff7fff
 800521c:	ffffefff 	.word	0xffffefff
 8005220:	ffffdfff 	.word	0xffffdfff
 8005224:	ffefffff 	.word	0xffefffff
 8005228:	ff9fffff 	.word	0xff9fffff
 800522c:	fff7ffff 	.word	0xfff7ffff

08005230 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005230:	b580      	push	{r7, lr}
 8005232:	b092      	sub	sp, #72	; 0x48
 8005234:	af02      	add	r7, sp, #8
 8005236:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2284      	movs	r2, #132	; 0x84
 800523c:	2100      	movs	r1, #0
 800523e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005240:	f7fd f884 	bl	800234c <HAL_GetTick>
 8005244:	0003      	movs	r3, r0
 8005246:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	2208      	movs	r2, #8
 8005250:	4013      	ands	r3, r2
 8005252:	2b08      	cmp	r3, #8
 8005254:	d12c      	bne.n	80052b0 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005256:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005258:	2280      	movs	r2, #128	; 0x80
 800525a:	0391      	lsls	r1, r2, #14
 800525c:	6878      	ldr	r0, [r7, #4]
 800525e:	4a46      	ldr	r2, [pc, #280]	; (8005378 <UART_CheckIdleState+0x148>)
 8005260:	9200      	str	r2, [sp, #0]
 8005262:	2200      	movs	r2, #0
 8005264:	f000 f88c 	bl	8005380 <UART_WaitOnFlagUntilTimeout>
 8005268:	1e03      	subs	r3, r0, #0
 800526a:	d021      	beq.n	80052b0 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800526c:	f3ef 8310 	mrs	r3, PRIMASK
 8005270:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8005272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005274:	63bb      	str	r3, [r7, #56]	; 0x38
 8005276:	2301      	movs	r3, #1
 8005278:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800527a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800527c:	f383 8810 	msr	PRIMASK, r3
}
 8005280:	46c0      	nop			; (mov r8, r8)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	681a      	ldr	r2, [r3, #0]
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	2180      	movs	r1, #128	; 0x80
 800528e:	438a      	bics	r2, r1
 8005290:	601a      	str	r2, [r3, #0]
 8005292:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005294:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005296:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005298:	f383 8810 	msr	PRIMASK, r3
}
 800529c:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2220      	movs	r2, #32
 80052a2:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2278      	movs	r2, #120	; 0x78
 80052a8:	2100      	movs	r1, #0
 80052aa:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80052ac:	2303      	movs	r3, #3
 80052ae:	e05f      	b.n	8005370 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	2204      	movs	r2, #4
 80052b8:	4013      	ands	r3, r2
 80052ba:	2b04      	cmp	r3, #4
 80052bc:	d146      	bne.n	800534c <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80052be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052c0:	2280      	movs	r2, #128	; 0x80
 80052c2:	03d1      	lsls	r1, r2, #15
 80052c4:	6878      	ldr	r0, [r7, #4]
 80052c6:	4a2c      	ldr	r2, [pc, #176]	; (8005378 <UART_CheckIdleState+0x148>)
 80052c8:	9200      	str	r2, [sp, #0]
 80052ca:	2200      	movs	r2, #0
 80052cc:	f000 f858 	bl	8005380 <UART_WaitOnFlagUntilTimeout>
 80052d0:	1e03      	subs	r3, r0, #0
 80052d2:	d03b      	beq.n	800534c <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80052d4:	f3ef 8310 	mrs	r3, PRIMASK
 80052d8:	60fb      	str	r3, [r7, #12]
  return(result);
 80052da:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80052dc:	637b      	str	r3, [r7, #52]	; 0x34
 80052de:	2301      	movs	r3, #1
 80052e0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052e2:	693b      	ldr	r3, [r7, #16]
 80052e4:	f383 8810 	msr	PRIMASK, r3
}
 80052e8:	46c0      	nop			; (mov r8, r8)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	681a      	ldr	r2, [r3, #0]
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	4921      	ldr	r1, [pc, #132]	; (800537c <UART_CheckIdleState+0x14c>)
 80052f6:	400a      	ands	r2, r1
 80052f8:	601a      	str	r2, [r3, #0]
 80052fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052fc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052fe:	697b      	ldr	r3, [r7, #20]
 8005300:	f383 8810 	msr	PRIMASK, r3
}
 8005304:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005306:	f3ef 8310 	mrs	r3, PRIMASK
 800530a:	61bb      	str	r3, [r7, #24]
  return(result);
 800530c:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800530e:	633b      	str	r3, [r7, #48]	; 0x30
 8005310:	2301      	movs	r3, #1
 8005312:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005314:	69fb      	ldr	r3, [r7, #28]
 8005316:	f383 8810 	msr	PRIMASK, r3
}
 800531a:	46c0      	nop			; (mov r8, r8)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	689a      	ldr	r2, [r3, #8]
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	2101      	movs	r1, #1
 8005328:	438a      	bics	r2, r1
 800532a:	609a      	str	r2, [r3, #8]
 800532c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800532e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005330:	6a3b      	ldr	r3, [r7, #32]
 8005332:	f383 8810 	msr	PRIMASK, r3
}
 8005336:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2280      	movs	r2, #128	; 0x80
 800533c:	2120      	movs	r1, #32
 800533e:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2278      	movs	r2, #120	; 0x78
 8005344:	2100      	movs	r1, #0
 8005346:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005348:	2303      	movs	r3, #3
 800534a:	e011      	b.n	8005370 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2220      	movs	r2, #32
 8005350:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2280      	movs	r2, #128	; 0x80
 8005356:	2120      	movs	r1, #32
 8005358:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2200      	movs	r2, #0
 800535e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2200      	movs	r2, #0
 8005364:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2278      	movs	r2, #120	; 0x78
 800536a:	2100      	movs	r1, #0
 800536c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800536e:	2300      	movs	r3, #0
}
 8005370:	0018      	movs	r0, r3
 8005372:	46bd      	mov	sp, r7
 8005374:	b010      	add	sp, #64	; 0x40
 8005376:	bd80      	pop	{r7, pc}
 8005378:	01ffffff 	.word	0x01ffffff
 800537c:	fffffedf 	.word	0xfffffedf

08005380 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b084      	sub	sp, #16
 8005384:	af00      	add	r7, sp, #0
 8005386:	60f8      	str	r0, [r7, #12]
 8005388:	60b9      	str	r1, [r7, #8]
 800538a:	603b      	str	r3, [r7, #0]
 800538c:	1dfb      	adds	r3, r7, #7
 800538e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005390:	e04b      	b.n	800542a <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005392:	69bb      	ldr	r3, [r7, #24]
 8005394:	3301      	adds	r3, #1
 8005396:	d048      	beq.n	800542a <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005398:	f7fc ffd8 	bl	800234c <HAL_GetTick>
 800539c:	0002      	movs	r2, r0
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	1ad3      	subs	r3, r2, r3
 80053a2:	69ba      	ldr	r2, [r7, #24]
 80053a4:	429a      	cmp	r2, r3
 80053a6:	d302      	bcc.n	80053ae <UART_WaitOnFlagUntilTimeout+0x2e>
 80053a8:	69bb      	ldr	r3, [r7, #24]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d101      	bne.n	80053b2 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80053ae:	2303      	movs	r3, #3
 80053b0:	e04b      	b.n	800544a <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	2204      	movs	r2, #4
 80053ba:	4013      	ands	r3, r2
 80053bc:	d035      	beq.n	800542a <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	69db      	ldr	r3, [r3, #28]
 80053c4:	2208      	movs	r2, #8
 80053c6:	4013      	ands	r3, r2
 80053c8:	2b08      	cmp	r3, #8
 80053ca:	d111      	bne.n	80053f0 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	2208      	movs	r2, #8
 80053d2:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	0018      	movs	r0, r3
 80053d8:	f000 f906 	bl	80055e8 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	2284      	movs	r2, #132	; 0x84
 80053e0:	2108      	movs	r1, #8
 80053e2:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	2278      	movs	r2, #120	; 0x78
 80053e8:	2100      	movs	r1, #0
 80053ea:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 80053ec:	2301      	movs	r3, #1
 80053ee:	e02c      	b.n	800544a <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	69da      	ldr	r2, [r3, #28]
 80053f6:	2380      	movs	r3, #128	; 0x80
 80053f8:	011b      	lsls	r3, r3, #4
 80053fa:	401a      	ands	r2, r3
 80053fc:	2380      	movs	r3, #128	; 0x80
 80053fe:	011b      	lsls	r3, r3, #4
 8005400:	429a      	cmp	r2, r3
 8005402:	d112      	bne.n	800542a <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	2280      	movs	r2, #128	; 0x80
 800540a:	0112      	lsls	r2, r2, #4
 800540c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	0018      	movs	r0, r3
 8005412:	f000 f8e9 	bl	80055e8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	2284      	movs	r2, #132	; 0x84
 800541a:	2120      	movs	r1, #32
 800541c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	2278      	movs	r2, #120	; 0x78
 8005422:	2100      	movs	r1, #0
 8005424:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8005426:	2303      	movs	r3, #3
 8005428:	e00f      	b.n	800544a <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	69db      	ldr	r3, [r3, #28]
 8005430:	68ba      	ldr	r2, [r7, #8]
 8005432:	4013      	ands	r3, r2
 8005434:	68ba      	ldr	r2, [r7, #8]
 8005436:	1ad3      	subs	r3, r2, r3
 8005438:	425a      	negs	r2, r3
 800543a:	4153      	adcs	r3, r2
 800543c:	b2db      	uxtb	r3, r3
 800543e:	001a      	movs	r2, r3
 8005440:	1dfb      	adds	r3, r7, #7
 8005442:	781b      	ldrb	r3, [r3, #0]
 8005444:	429a      	cmp	r2, r3
 8005446:	d0a4      	beq.n	8005392 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005448:	2300      	movs	r3, #0
}
 800544a:	0018      	movs	r0, r3
 800544c:	46bd      	mov	sp, r7
 800544e:	b004      	add	sp, #16
 8005450:	bd80      	pop	{r7, pc}
	...

08005454 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005454:	b580      	push	{r7, lr}
 8005456:	b090      	sub	sp, #64	; 0x40
 8005458:	af00      	add	r7, sp, #0
 800545a:	60f8      	str	r0, [r7, #12]
 800545c:	60b9      	str	r1, [r7, #8]
 800545e:	1dbb      	adds	r3, r7, #6
 8005460:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	68ba      	ldr	r2, [r7, #8]
 8005466:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	1dba      	adds	r2, r7, #6
 800546c:	2158      	movs	r1, #88	; 0x58
 800546e:	8812      	ldrh	r2, [r2, #0]
 8005470:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	1dba      	adds	r2, r7, #6
 8005476:	215a      	movs	r1, #90	; 0x5a
 8005478:	8812      	ldrh	r2, [r2, #0]
 800547a:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	2200      	movs	r2, #0
 8005480:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	689a      	ldr	r2, [r3, #8]
 8005486:	2380      	movs	r3, #128	; 0x80
 8005488:	015b      	lsls	r3, r3, #5
 800548a:	429a      	cmp	r2, r3
 800548c:	d10d      	bne.n	80054aa <UART_Start_Receive_IT+0x56>
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	691b      	ldr	r3, [r3, #16]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d104      	bne.n	80054a0 <UART_Start_Receive_IT+0x4c>
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	225c      	movs	r2, #92	; 0x5c
 800549a:	4950      	ldr	r1, [pc, #320]	; (80055dc <UART_Start_Receive_IT+0x188>)
 800549c:	5299      	strh	r1, [r3, r2]
 800549e:	e02e      	b.n	80054fe <UART_Start_Receive_IT+0xaa>
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	225c      	movs	r2, #92	; 0x5c
 80054a4:	21ff      	movs	r1, #255	; 0xff
 80054a6:	5299      	strh	r1, [r3, r2]
 80054a8:	e029      	b.n	80054fe <UART_Start_Receive_IT+0xaa>
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	689b      	ldr	r3, [r3, #8]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d10d      	bne.n	80054ce <UART_Start_Receive_IT+0x7a>
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	691b      	ldr	r3, [r3, #16]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d104      	bne.n	80054c4 <UART_Start_Receive_IT+0x70>
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	225c      	movs	r2, #92	; 0x5c
 80054be:	21ff      	movs	r1, #255	; 0xff
 80054c0:	5299      	strh	r1, [r3, r2]
 80054c2:	e01c      	b.n	80054fe <UART_Start_Receive_IT+0xaa>
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	225c      	movs	r2, #92	; 0x5c
 80054c8:	217f      	movs	r1, #127	; 0x7f
 80054ca:	5299      	strh	r1, [r3, r2]
 80054cc:	e017      	b.n	80054fe <UART_Start_Receive_IT+0xaa>
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	689a      	ldr	r2, [r3, #8]
 80054d2:	2380      	movs	r3, #128	; 0x80
 80054d4:	055b      	lsls	r3, r3, #21
 80054d6:	429a      	cmp	r2, r3
 80054d8:	d10d      	bne.n	80054f6 <UART_Start_Receive_IT+0xa2>
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	691b      	ldr	r3, [r3, #16]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d104      	bne.n	80054ec <UART_Start_Receive_IT+0x98>
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	225c      	movs	r2, #92	; 0x5c
 80054e6:	217f      	movs	r1, #127	; 0x7f
 80054e8:	5299      	strh	r1, [r3, r2]
 80054ea:	e008      	b.n	80054fe <UART_Start_Receive_IT+0xaa>
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	225c      	movs	r2, #92	; 0x5c
 80054f0:	213f      	movs	r1, #63	; 0x3f
 80054f2:	5299      	strh	r1, [r3, r2]
 80054f4:	e003      	b.n	80054fe <UART_Start_Receive_IT+0xaa>
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	225c      	movs	r2, #92	; 0x5c
 80054fa:	2100      	movs	r1, #0
 80054fc:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	2284      	movs	r2, #132	; 0x84
 8005502:	2100      	movs	r1, #0
 8005504:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	2280      	movs	r2, #128	; 0x80
 800550a:	2122      	movs	r1, #34	; 0x22
 800550c:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800550e:	f3ef 8310 	mrs	r3, PRIMASK
 8005512:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8005514:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005516:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005518:	2301      	movs	r3, #1
 800551a:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800551c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800551e:	f383 8810 	msr	PRIMASK, r3
}
 8005522:	46c0      	nop			; (mov r8, r8)
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	689a      	ldr	r2, [r3, #8]
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	2101      	movs	r1, #1
 8005530:	430a      	orrs	r2, r1
 8005532:	609a      	str	r2, [r3, #8]
 8005534:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005536:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800553a:	f383 8810 	msr	PRIMASK, r3
}
 800553e:	46c0      	nop			; (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	689a      	ldr	r2, [r3, #8]
 8005544:	2380      	movs	r3, #128	; 0x80
 8005546:	015b      	lsls	r3, r3, #5
 8005548:	429a      	cmp	r2, r3
 800554a:	d107      	bne.n	800555c <UART_Start_Receive_IT+0x108>
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	691b      	ldr	r3, [r3, #16]
 8005550:	2b00      	cmp	r3, #0
 8005552:	d103      	bne.n	800555c <UART_Start_Receive_IT+0x108>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	4a22      	ldr	r2, [pc, #136]	; (80055e0 <UART_Start_Receive_IT+0x18c>)
 8005558:	669a      	str	r2, [r3, #104]	; 0x68
 800555a:	e002      	b.n	8005562 <UART_Start_Receive_IT+0x10e>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	4a21      	ldr	r2, [pc, #132]	; (80055e4 <UART_Start_Receive_IT+0x190>)
 8005560:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	691b      	ldr	r3, [r3, #16]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d019      	beq.n	800559e <UART_Start_Receive_IT+0x14a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800556a:	f3ef 8310 	mrs	r3, PRIMASK
 800556e:	61fb      	str	r3, [r7, #28]
  return(result);
 8005570:	69fb      	ldr	r3, [r7, #28]
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8005572:	637b      	str	r3, [r7, #52]	; 0x34
 8005574:	2301      	movs	r3, #1
 8005576:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005578:	6a3b      	ldr	r3, [r7, #32]
 800557a:	f383 8810 	msr	PRIMASK, r3
}
 800557e:	46c0      	nop			; (mov r8, r8)
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	681a      	ldr	r2, [r3, #0]
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	2190      	movs	r1, #144	; 0x90
 800558c:	0049      	lsls	r1, r1, #1
 800558e:	430a      	orrs	r2, r1
 8005590:	601a      	str	r2, [r3, #0]
 8005592:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005594:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005598:	f383 8810 	msr	PRIMASK, r3
}
 800559c:	e018      	b.n	80055d0 <UART_Start_Receive_IT+0x17c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800559e:	f3ef 8310 	mrs	r3, PRIMASK
 80055a2:	613b      	str	r3, [r7, #16]
  return(result);
 80055a4:	693b      	ldr	r3, [r7, #16]
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80055a6:	63bb      	str	r3, [r7, #56]	; 0x38
 80055a8:	2301      	movs	r3, #1
 80055aa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055ac:	697b      	ldr	r3, [r7, #20]
 80055ae:	f383 8810 	msr	PRIMASK, r3
}
 80055b2:	46c0      	nop			; (mov r8, r8)
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	681a      	ldr	r2, [r3, #0]
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	2120      	movs	r1, #32
 80055c0:	430a      	orrs	r2, r1
 80055c2:	601a      	str	r2, [r3, #0]
 80055c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055c6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055c8:	69bb      	ldr	r3, [r7, #24]
 80055ca:	f383 8810 	msr	PRIMASK, r3
}
 80055ce:	46c0      	nop			; (mov r8, r8)
  }
  return HAL_OK;
 80055d0:	2300      	movs	r3, #0
}
 80055d2:	0018      	movs	r0, r3
 80055d4:	46bd      	mov	sp, r7
 80055d6:	b010      	add	sp, #64	; 0x40
 80055d8:	bd80      	pop	{r7, pc}
 80055da:	46c0      	nop			; (mov r8, r8)
 80055dc:	000001ff 	.word	0x000001ff
 80055e0:	080058f9 	.word	0x080058f9
 80055e4:	08005735 	.word	0x08005735

080055e8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b08e      	sub	sp, #56	; 0x38
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80055f0:	f3ef 8310 	mrs	r3, PRIMASK
 80055f4:	617b      	str	r3, [r7, #20]
  return(result);
 80055f6:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80055f8:	637b      	str	r3, [r7, #52]	; 0x34
 80055fa:	2301      	movs	r3, #1
 80055fc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055fe:	69bb      	ldr	r3, [r7, #24]
 8005600:	f383 8810 	msr	PRIMASK, r3
}
 8005604:	46c0      	nop			; (mov r8, r8)
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	681a      	ldr	r2, [r3, #0]
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	4926      	ldr	r1, [pc, #152]	; (80056ac <UART_EndRxTransfer+0xc4>)
 8005612:	400a      	ands	r2, r1
 8005614:	601a      	str	r2, [r3, #0]
 8005616:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005618:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800561a:	69fb      	ldr	r3, [r7, #28]
 800561c:	f383 8810 	msr	PRIMASK, r3
}
 8005620:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005622:	f3ef 8310 	mrs	r3, PRIMASK
 8005626:	623b      	str	r3, [r7, #32]
  return(result);
 8005628:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800562a:	633b      	str	r3, [r7, #48]	; 0x30
 800562c:	2301      	movs	r3, #1
 800562e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005632:	f383 8810 	msr	PRIMASK, r3
}
 8005636:	46c0      	nop			; (mov r8, r8)
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	689a      	ldr	r2, [r3, #8]
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	2101      	movs	r1, #1
 8005644:	438a      	bics	r2, r1
 8005646:	609a      	str	r2, [r3, #8]
 8005648:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800564a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800564c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800564e:	f383 8810 	msr	PRIMASK, r3
}
 8005652:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005658:	2b01      	cmp	r3, #1
 800565a:	d118      	bne.n	800568e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800565c:	f3ef 8310 	mrs	r3, PRIMASK
 8005660:	60bb      	str	r3, [r7, #8]
  return(result);
 8005662:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005664:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005666:	2301      	movs	r3, #1
 8005668:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	f383 8810 	msr	PRIMASK, r3
}
 8005670:	46c0      	nop			; (mov r8, r8)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	681a      	ldr	r2, [r3, #0]
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	2110      	movs	r1, #16
 800567e:	438a      	bics	r2, r1
 8005680:	601a      	str	r2, [r3, #0]
 8005682:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005684:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005686:	693b      	ldr	r3, [r7, #16]
 8005688:	f383 8810 	msr	PRIMASK, r3
}
 800568c:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	2280      	movs	r2, #128	; 0x80
 8005692:	2120      	movs	r1, #32
 8005694:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	2200      	movs	r2, #0
 800569a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2200      	movs	r2, #0
 80056a0:	669a      	str	r2, [r3, #104]	; 0x68
}
 80056a2:	46c0      	nop			; (mov r8, r8)
 80056a4:	46bd      	mov	sp, r7
 80056a6:	b00e      	add	sp, #56	; 0x38
 80056a8:	bd80      	pop	{r7, pc}
 80056aa:	46c0      	nop			; (mov r8, r8)
 80056ac:	fffffedf 	.word	0xfffffedf

080056b0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b084      	sub	sp, #16
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056bc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	225a      	movs	r2, #90	; 0x5a
 80056c2:	2100      	movs	r1, #0
 80056c4:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	2252      	movs	r2, #82	; 0x52
 80056ca:	2100      	movs	r1, #0
 80056cc:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	0018      	movs	r0, r3
 80056d2:	f7ff fa47 	bl	8004b64 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80056d6:	46c0      	nop			; (mov r8, r8)
 80056d8:	46bd      	mov	sp, r7
 80056da:	b004      	add	sp, #16
 80056dc:	bd80      	pop	{r7, pc}

080056de <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80056de:	b580      	push	{r7, lr}
 80056e0:	b086      	sub	sp, #24
 80056e2:	af00      	add	r7, sp, #0
 80056e4:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80056e6:	f3ef 8310 	mrs	r3, PRIMASK
 80056ea:	60bb      	str	r3, [r7, #8]
  return(result);
 80056ec:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80056ee:	617b      	str	r3, [r7, #20]
 80056f0:	2301      	movs	r3, #1
 80056f2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	f383 8810 	msr	PRIMASK, r3
}
 80056fa:	46c0      	nop			; (mov r8, r8)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	681a      	ldr	r2, [r3, #0]
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	2140      	movs	r1, #64	; 0x40
 8005708:	438a      	bics	r2, r1
 800570a:	601a      	str	r2, [r3, #0]
 800570c:	697b      	ldr	r3, [r7, #20]
 800570e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005710:	693b      	ldr	r3, [r7, #16]
 8005712:	f383 8810 	msr	PRIMASK, r3
}
 8005716:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2220      	movs	r2, #32
 800571c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	2200      	movs	r2, #0
 8005722:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	0018      	movs	r0, r3
 8005728:	f7ff fa14 	bl	8004b54 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800572c:	46c0      	nop			; (mov r8, r8)
 800572e:	46bd      	mov	sp, r7
 8005730:	b006      	add	sp, #24
 8005732:	bd80      	pop	{r7, pc}

08005734 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005734:	b580      	push	{r7, lr}
 8005736:	b094      	sub	sp, #80	; 0x50
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800573c:	204e      	movs	r0, #78	; 0x4e
 800573e:	183b      	adds	r3, r7, r0
 8005740:	687a      	ldr	r2, [r7, #4]
 8005742:	215c      	movs	r1, #92	; 0x5c
 8005744:	5a52      	ldrh	r2, [r2, r1]
 8005746:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2280      	movs	r2, #128	; 0x80
 800574c:	589b      	ldr	r3, [r3, r2]
 800574e:	2b22      	cmp	r3, #34	; 0x22
 8005750:	d000      	beq.n	8005754 <UART_RxISR_8BIT+0x20>
 8005752:	e0bf      	b.n	80058d4 <UART_RxISR_8BIT+0x1a0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800575a:	214c      	movs	r1, #76	; 0x4c
 800575c:	187b      	adds	r3, r7, r1
 800575e:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005760:	187b      	adds	r3, r7, r1
 8005762:	881b      	ldrh	r3, [r3, #0]
 8005764:	b2da      	uxtb	r2, r3
 8005766:	183b      	adds	r3, r7, r0
 8005768:	881b      	ldrh	r3, [r3, #0]
 800576a:	b2d9      	uxtb	r1, r3
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005770:	400a      	ands	r2, r1
 8005772:	b2d2      	uxtb	r2, r2
 8005774:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800577a:	1c5a      	adds	r2, r3, #1
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	225a      	movs	r2, #90	; 0x5a
 8005784:	5a9b      	ldrh	r3, [r3, r2]
 8005786:	b29b      	uxth	r3, r3
 8005788:	3b01      	subs	r3, #1
 800578a:	b299      	uxth	r1, r3
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	225a      	movs	r2, #90	; 0x5a
 8005790:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	225a      	movs	r2, #90	; 0x5a
 8005796:	5a9b      	ldrh	r3, [r3, r2]
 8005798:	b29b      	uxth	r3, r3
 800579a:	2b00      	cmp	r3, #0
 800579c:	d000      	beq.n	80057a0 <UART_RxISR_8BIT+0x6c>
 800579e:	e0a1      	b.n	80058e4 <UART_RxISR_8BIT+0x1b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80057a0:	f3ef 8310 	mrs	r3, PRIMASK
 80057a4:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80057a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80057a8:	64bb      	str	r3, [r7, #72]	; 0x48
 80057aa:	2301      	movs	r3, #1
 80057ac:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057b0:	f383 8810 	msr	PRIMASK, r3
}
 80057b4:	46c0      	nop			; (mov r8, r8)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	681a      	ldr	r2, [r3, #0]
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	494a      	ldr	r1, [pc, #296]	; (80058ec <UART_RxISR_8BIT+0x1b8>)
 80057c2:	400a      	ands	r2, r1
 80057c4:	601a      	str	r2, [r3, #0]
 80057c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80057c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057cc:	f383 8810 	msr	PRIMASK, r3
}
 80057d0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80057d2:	f3ef 8310 	mrs	r3, PRIMASK
 80057d6:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80057d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057da:	647b      	str	r3, [r7, #68]	; 0x44
 80057dc:	2301      	movs	r3, #1
 80057de:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057e2:	f383 8810 	msr	PRIMASK, r3
}
 80057e6:	46c0      	nop			; (mov r8, r8)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	689a      	ldr	r2, [r3, #8]
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	2101      	movs	r1, #1
 80057f4:	438a      	bics	r2, r1
 80057f6:	609a      	str	r2, [r3, #8]
 80057f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80057fa:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057fe:	f383 8810 	msr	PRIMASK, r3
}
 8005802:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2280      	movs	r2, #128	; 0x80
 8005808:	2120      	movs	r1, #32
 800580a:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2200      	movs	r2, #0
 8005810:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	2200      	movs	r2, #0
 8005816:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	4a34      	ldr	r2, [pc, #208]	; (80058f0 <UART_RxISR_8BIT+0x1bc>)
 800581e:	4293      	cmp	r3, r2
 8005820:	d01f      	beq.n	8005862 <UART_RxISR_8BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	685a      	ldr	r2, [r3, #4]
 8005828:	2380      	movs	r3, #128	; 0x80
 800582a:	041b      	lsls	r3, r3, #16
 800582c:	4013      	ands	r3, r2
 800582e:	d018      	beq.n	8005862 <UART_RxISR_8BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005830:	f3ef 8310 	mrs	r3, PRIMASK
 8005834:	61bb      	str	r3, [r7, #24]
  return(result);
 8005836:	69bb      	ldr	r3, [r7, #24]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005838:	643b      	str	r3, [r7, #64]	; 0x40
 800583a:	2301      	movs	r3, #1
 800583c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800583e:	69fb      	ldr	r3, [r7, #28]
 8005840:	f383 8810 	msr	PRIMASK, r3
}
 8005844:	46c0      	nop			; (mov r8, r8)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	681a      	ldr	r2, [r3, #0]
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	4928      	ldr	r1, [pc, #160]	; (80058f4 <UART_RxISR_8BIT+0x1c0>)
 8005852:	400a      	ands	r2, r1
 8005854:	601a      	str	r2, [r3, #0]
 8005856:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005858:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800585a:	6a3b      	ldr	r3, [r7, #32]
 800585c:	f383 8810 	msr	PRIMASK, r3
}
 8005860:	46c0      	nop			; (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005866:	2b01      	cmp	r3, #1
 8005868:	d12f      	bne.n	80058ca <UART_RxISR_8BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	2200      	movs	r2, #0
 800586e:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005870:	f3ef 8310 	mrs	r3, PRIMASK
 8005874:	60fb      	str	r3, [r7, #12]
  return(result);
 8005876:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005878:	63fb      	str	r3, [r7, #60]	; 0x3c
 800587a:	2301      	movs	r3, #1
 800587c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800587e:	693b      	ldr	r3, [r7, #16]
 8005880:	f383 8810 	msr	PRIMASK, r3
}
 8005884:	46c0      	nop			; (mov r8, r8)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	681a      	ldr	r2, [r3, #0]
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	2110      	movs	r1, #16
 8005892:	438a      	bics	r2, r1
 8005894:	601a      	str	r2, [r3, #0]
 8005896:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005898:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800589a:	697b      	ldr	r3, [r7, #20]
 800589c:	f383 8810 	msr	PRIMASK, r3
}
 80058a0:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	69db      	ldr	r3, [r3, #28]
 80058a8:	2210      	movs	r2, #16
 80058aa:	4013      	ands	r3, r2
 80058ac:	2b10      	cmp	r3, #16
 80058ae:	d103      	bne.n	80058b8 <UART_RxISR_8BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	2210      	movs	r2, #16
 80058b6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2258      	movs	r2, #88	; 0x58
 80058bc:	5a9a      	ldrh	r2, [r3, r2]
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	0011      	movs	r1, r2
 80058c2:	0018      	movs	r0, r3
 80058c4:	f7ff f956 	bl	8004b74 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80058c8:	e00c      	b.n	80058e4 <UART_RxISR_8BIT+0x1b0>
        HAL_UART_RxCpltCallback(huart);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	0018      	movs	r0, r3
 80058ce:	f7fb fc0b 	bl	80010e8 <HAL_UART_RxCpltCallback>
}
 80058d2:	e007      	b.n	80058e4 <UART_RxISR_8BIT+0x1b0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	699a      	ldr	r2, [r3, #24]
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	2108      	movs	r1, #8
 80058e0:	430a      	orrs	r2, r1
 80058e2:	619a      	str	r2, [r3, #24]
}
 80058e4:	46c0      	nop			; (mov r8, r8)
 80058e6:	46bd      	mov	sp, r7
 80058e8:	b014      	add	sp, #80	; 0x50
 80058ea:	bd80      	pop	{r7, pc}
 80058ec:	fffffedf 	.word	0xfffffedf
 80058f0:	40004800 	.word	0x40004800
 80058f4:	fbffffff 	.word	0xfbffffff

080058f8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80058f8:	b580      	push	{r7, lr}
 80058fa:	b094      	sub	sp, #80	; 0x50
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005900:	204e      	movs	r0, #78	; 0x4e
 8005902:	183b      	adds	r3, r7, r0
 8005904:	687a      	ldr	r2, [r7, #4]
 8005906:	215c      	movs	r1, #92	; 0x5c
 8005908:	5a52      	ldrh	r2, [r2, r1]
 800590a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2280      	movs	r2, #128	; 0x80
 8005910:	589b      	ldr	r3, [r3, r2]
 8005912:	2b22      	cmp	r3, #34	; 0x22
 8005914:	d000      	beq.n	8005918 <UART_RxISR_16BIT+0x20>
 8005916:	e0bf      	b.n	8005a98 <UART_RxISR_16BIT+0x1a0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800591e:	214c      	movs	r1, #76	; 0x4c
 8005920:	187b      	adds	r3, r7, r1
 8005922:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005928:	64bb      	str	r3, [r7, #72]	; 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 800592a:	187b      	adds	r3, r7, r1
 800592c:	183a      	adds	r2, r7, r0
 800592e:	881b      	ldrh	r3, [r3, #0]
 8005930:	8812      	ldrh	r2, [r2, #0]
 8005932:	4013      	ands	r3, r2
 8005934:	b29a      	uxth	r2, r3
 8005936:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005938:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800593e:	1c9a      	adds	r2, r3, #2
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	225a      	movs	r2, #90	; 0x5a
 8005948:	5a9b      	ldrh	r3, [r3, r2]
 800594a:	b29b      	uxth	r3, r3
 800594c:	3b01      	subs	r3, #1
 800594e:	b299      	uxth	r1, r3
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	225a      	movs	r2, #90	; 0x5a
 8005954:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	225a      	movs	r2, #90	; 0x5a
 800595a:	5a9b      	ldrh	r3, [r3, r2]
 800595c:	b29b      	uxth	r3, r3
 800595e:	2b00      	cmp	r3, #0
 8005960:	d000      	beq.n	8005964 <UART_RxISR_16BIT+0x6c>
 8005962:	e0a1      	b.n	8005aa8 <UART_RxISR_16BIT+0x1b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005964:	f3ef 8310 	mrs	r3, PRIMASK
 8005968:	623b      	str	r3, [r7, #32]
  return(result);
 800596a:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800596c:	647b      	str	r3, [r7, #68]	; 0x44
 800596e:	2301      	movs	r3, #1
 8005970:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005974:	f383 8810 	msr	PRIMASK, r3
}
 8005978:	46c0      	nop			; (mov r8, r8)
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	681a      	ldr	r2, [r3, #0]
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	494a      	ldr	r1, [pc, #296]	; (8005ab0 <UART_RxISR_16BIT+0x1b8>)
 8005986:	400a      	ands	r2, r1
 8005988:	601a      	str	r2, [r3, #0]
 800598a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800598c:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800598e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005990:	f383 8810 	msr	PRIMASK, r3
}
 8005994:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005996:	f3ef 8310 	mrs	r3, PRIMASK
 800599a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 800599c:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800599e:	643b      	str	r3, [r7, #64]	; 0x40
 80059a0:	2301      	movs	r3, #1
 80059a2:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80059a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059a6:	f383 8810 	msr	PRIMASK, r3
}
 80059aa:	46c0      	nop			; (mov r8, r8)
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	689a      	ldr	r2, [r3, #8]
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	2101      	movs	r1, #1
 80059b8:	438a      	bics	r2, r1
 80059ba:	609a      	str	r2, [r3, #8]
 80059bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80059be:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80059c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059c2:	f383 8810 	msr	PRIMASK, r3
}
 80059c6:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2280      	movs	r2, #128	; 0x80
 80059cc:	2120      	movs	r1, #32
 80059ce:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2200      	movs	r2, #0
 80059d4:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	2200      	movs	r2, #0
 80059da:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	4a34      	ldr	r2, [pc, #208]	; (8005ab4 <UART_RxISR_16BIT+0x1bc>)
 80059e2:	4293      	cmp	r3, r2
 80059e4:	d01f      	beq.n	8005a26 <UART_RxISR_16BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	685a      	ldr	r2, [r3, #4]
 80059ec:	2380      	movs	r3, #128	; 0x80
 80059ee:	041b      	lsls	r3, r3, #16
 80059f0:	4013      	ands	r3, r2
 80059f2:	d018      	beq.n	8005a26 <UART_RxISR_16BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80059f4:	f3ef 8310 	mrs	r3, PRIMASK
 80059f8:	617b      	str	r3, [r7, #20]
  return(result);
 80059fa:	697b      	ldr	r3, [r7, #20]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80059fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80059fe:	2301      	movs	r3, #1
 8005a00:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a02:	69bb      	ldr	r3, [r7, #24]
 8005a04:	f383 8810 	msr	PRIMASK, r3
}
 8005a08:	46c0      	nop			; (mov r8, r8)
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	681a      	ldr	r2, [r3, #0]
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	4928      	ldr	r1, [pc, #160]	; (8005ab8 <UART_RxISR_16BIT+0x1c0>)
 8005a16:	400a      	ands	r2, r1
 8005a18:	601a      	str	r2, [r3, #0]
 8005a1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a1c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a1e:	69fb      	ldr	r3, [r7, #28]
 8005a20:	f383 8810 	msr	PRIMASK, r3
}
 8005a24:	46c0      	nop			; (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a2a:	2b01      	cmp	r3, #1
 8005a2c:	d12f      	bne.n	8005a8e <UART_RxISR_16BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2200      	movs	r2, #0
 8005a32:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a34:	f3ef 8310 	mrs	r3, PRIMASK
 8005a38:	60bb      	str	r3, [r7, #8]
  return(result);
 8005a3a:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a3c:	63bb      	str	r3, [r7, #56]	; 0x38
 8005a3e:	2301      	movs	r3, #1
 8005a40:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	f383 8810 	msr	PRIMASK, r3
}
 8005a48:	46c0      	nop			; (mov r8, r8)
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	681a      	ldr	r2, [r3, #0]
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	2110      	movs	r1, #16
 8005a56:	438a      	bics	r2, r1
 8005a58:	601a      	str	r2, [r3, #0]
 8005a5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a5c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a5e:	693b      	ldr	r3, [r7, #16]
 8005a60:	f383 8810 	msr	PRIMASK, r3
}
 8005a64:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	69db      	ldr	r3, [r3, #28]
 8005a6c:	2210      	movs	r2, #16
 8005a6e:	4013      	ands	r3, r2
 8005a70:	2b10      	cmp	r3, #16
 8005a72:	d103      	bne.n	8005a7c <UART_RxISR_16BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	2210      	movs	r2, #16
 8005a7a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2258      	movs	r2, #88	; 0x58
 8005a80:	5a9a      	ldrh	r2, [r3, r2]
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	0011      	movs	r1, r2
 8005a86:	0018      	movs	r0, r3
 8005a88:	f7ff f874 	bl	8004b74 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005a8c:	e00c      	b.n	8005aa8 <UART_RxISR_16BIT+0x1b0>
        HAL_UART_RxCpltCallback(huart);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	0018      	movs	r0, r3
 8005a92:	f7fb fb29 	bl	80010e8 <HAL_UART_RxCpltCallback>
}
 8005a96:	e007      	b.n	8005aa8 <UART_RxISR_16BIT+0x1b0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	699a      	ldr	r2, [r3, #24]
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	2108      	movs	r1, #8
 8005aa4:	430a      	orrs	r2, r1
 8005aa6:	619a      	str	r2, [r3, #24]
}
 8005aa8:	46c0      	nop			; (mov r8, r8)
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	b014      	add	sp, #80	; 0x50
 8005aae:	bd80      	pop	{r7, pc}
 8005ab0:	fffffedf 	.word	0xfffffedf
 8005ab4:	40004800 	.word	0x40004800
 8005ab8:	fbffffff 	.word	0xfbffffff

08005abc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b082      	sub	sp, #8
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005ac4:	46c0      	nop			; (mov r8, r8)
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	b002      	add	sp, #8
 8005aca:	bd80      	pop	{r7, pc}

08005acc <malloc>:
 8005acc:	b510      	push	{r4, lr}
 8005ace:	4b03      	ldr	r3, [pc, #12]	; (8005adc <malloc+0x10>)
 8005ad0:	0001      	movs	r1, r0
 8005ad2:	6818      	ldr	r0, [r3, #0]
 8005ad4:	f000 f830 	bl	8005b38 <_malloc_r>
 8005ad8:	bd10      	pop	{r4, pc}
 8005ada:	46c0      	nop			; (mov r8, r8)
 8005adc:	20000184 	.word	0x20000184

08005ae0 <free>:
 8005ae0:	b510      	push	{r4, lr}
 8005ae2:	4b03      	ldr	r3, [pc, #12]	; (8005af0 <free+0x10>)
 8005ae4:	0001      	movs	r1, r0
 8005ae6:	6818      	ldr	r0, [r3, #0]
 8005ae8:	f000 fb4e 	bl	8006188 <_free_r>
 8005aec:	bd10      	pop	{r4, pc}
 8005aee:	46c0      	nop			; (mov r8, r8)
 8005af0:	20000184 	.word	0x20000184

08005af4 <sbrk_aligned>:
 8005af4:	b570      	push	{r4, r5, r6, lr}
 8005af6:	4e0f      	ldr	r6, [pc, #60]	; (8005b34 <sbrk_aligned+0x40>)
 8005af8:	000d      	movs	r5, r1
 8005afa:	6831      	ldr	r1, [r6, #0]
 8005afc:	0004      	movs	r4, r0
 8005afe:	2900      	cmp	r1, #0
 8005b00:	d102      	bne.n	8005b08 <sbrk_aligned+0x14>
 8005b02:	f000 fac7 	bl	8006094 <_sbrk_r>
 8005b06:	6030      	str	r0, [r6, #0]
 8005b08:	0029      	movs	r1, r5
 8005b0a:	0020      	movs	r0, r4
 8005b0c:	f000 fac2 	bl	8006094 <_sbrk_r>
 8005b10:	1c43      	adds	r3, r0, #1
 8005b12:	d00a      	beq.n	8005b2a <sbrk_aligned+0x36>
 8005b14:	2303      	movs	r3, #3
 8005b16:	1cc5      	adds	r5, r0, #3
 8005b18:	439d      	bics	r5, r3
 8005b1a:	42a8      	cmp	r0, r5
 8005b1c:	d007      	beq.n	8005b2e <sbrk_aligned+0x3a>
 8005b1e:	1a29      	subs	r1, r5, r0
 8005b20:	0020      	movs	r0, r4
 8005b22:	f000 fab7 	bl	8006094 <_sbrk_r>
 8005b26:	3001      	adds	r0, #1
 8005b28:	d101      	bne.n	8005b2e <sbrk_aligned+0x3a>
 8005b2a:	2501      	movs	r5, #1
 8005b2c:	426d      	negs	r5, r5
 8005b2e:	0028      	movs	r0, r5
 8005b30:	bd70      	pop	{r4, r5, r6, pc}
 8005b32:	46c0      	nop			; (mov r8, r8)
 8005b34:	2000033c 	.word	0x2000033c

08005b38 <_malloc_r>:
 8005b38:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005b3a:	2203      	movs	r2, #3
 8005b3c:	1ccb      	adds	r3, r1, #3
 8005b3e:	4393      	bics	r3, r2
 8005b40:	3308      	adds	r3, #8
 8005b42:	0006      	movs	r6, r0
 8005b44:	001f      	movs	r7, r3
 8005b46:	2b0c      	cmp	r3, #12
 8005b48:	d238      	bcs.n	8005bbc <_malloc_r+0x84>
 8005b4a:	270c      	movs	r7, #12
 8005b4c:	42b9      	cmp	r1, r7
 8005b4e:	d837      	bhi.n	8005bc0 <_malloc_r+0x88>
 8005b50:	0030      	movs	r0, r6
 8005b52:	f000 f873 	bl	8005c3c <__malloc_lock>
 8005b56:	4b38      	ldr	r3, [pc, #224]	; (8005c38 <_malloc_r+0x100>)
 8005b58:	9300      	str	r3, [sp, #0]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	001c      	movs	r4, r3
 8005b5e:	2c00      	cmp	r4, #0
 8005b60:	d133      	bne.n	8005bca <_malloc_r+0x92>
 8005b62:	0039      	movs	r1, r7
 8005b64:	0030      	movs	r0, r6
 8005b66:	f7ff ffc5 	bl	8005af4 <sbrk_aligned>
 8005b6a:	0004      	movs	r4, r0
 8005b6c:	1c43      	adds	r3, r0, #1
 8005b6e:	d15e      	bne.n	8005c2e <_malloc_r+0xf6>
 8005b70:	9b00      	ldr	r3, [sp, #0]
 8005b72:	681c      	ldr	r4, [r3, #0]
 8005b74:	0025      	movs	r5, r4
 8005b76:	2d00      	cmp	r5, #0
 8005b78:	d14e      	bne.n	8005c18 <_malloc_r+0xe0>
 8005b7a:	2c00      	cmp	r4, #0
 8005b7c:	d051      	beq.n	8005c22 <_malloc_r+0xea>
 8005b7e:	6823      	ldr	r3, [r4, #0]
 8005b80:	0029      	movs	r1, r5
 8005b82:	18e3      	adds	r3, r4, r3
 8005b84:	0030      	movs	r0, r6
 8005b86:	9301      	str	r3, [sp, #4]
 8005b88:	f000 fa84 	bl	8006094 <_sbrk_r>
 8005b8c:	9b01      	ldr	r3, [sp, #4]
 8005b8e:	4283      	cmp	r3, r0
 8005b90:	d147      	bne.n	8005c22 <_malloc_r+0xea>
 8005b92:	6823      	ldr	r3, [r4, #0]
 8005b94:	0030      	movs	r0, r6
 8005b96:	1aff      	subs	r7, r7, r3
 8005b98:	0039      	movs	r1, r7
 8005b9a:	f7ff ffab 	bl	8005af4 <sbrk_aligned>
 8005b9e:	3001      	adds	r0, #1
 8005ba0:	d03f      	beq.n	8005c22 <_malloc_r+0xea>
 8005ba2:	6823      	ldr	r3, [r4, #0]
 8005ba4:	19db      	adds	r3, r3, r7
 8005ba6:	6023      	str	r3, [r4, #0]
 8005ba8:	9b00      	ldr	r3, [sp, #0]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d040      	beq.n	8005c32 <_malloc_r+0xfa>
 8005bb0:	685a      	ldr	r2, [r3, #4]
 8005bb2:	42a2      	cmp	r2, r4
 8005bb4:	d133      	bne.n	8005c1e <_malloc_r+0xe6>
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	605a      	str	r2, [r3, #4]
 8005bba:	e014      	b.n	8005be6 <_malloc_r+0xae>
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	dac5      	bge.n	8005b4c <_malloc_r+0x14>
 8005bc0:	230c      	movs	r3, #12
 8005bc2:	2500      	movs	r5, #0
 8005bc4:	6033      	str	r3, [r6, #0]
 8005bc6:	0028      	movs	r0, r5
 8005bc8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005bca:	6821      	ldr	r1, [r4, #0]
 8005bcc:	1bc9      	subs	r1, r1, r7
 8005bce:	d420      	bmi.n	8005c12 <_malloc_r+0xda>
 8005bd0:	290b      	cmp	r1, #11
 8005bd2:	d918      	bls.n	8005c06 <_malloc_r+0xce>
 8005bd4:	19e2      	adds	r2, r4, r7
 8005bd6:	6027      	str	r7, [r4, #0]
 8005bd8:	42a3      	cmp	r3, r4
 8005bda:	d112      	bne.n	8005c02 <_malloc_r+0xca>
 8005bdc:	9b00      	ldr	r3, [sp, #0]
 8005bde:	601a      	str	r2, [r3, #0]
 8005be0:	6863      	ldr	r3, [r4, #4]
 8005be2:	6011      	str	r1, [r2, #0]
 8005be4:	6053      	str	r3, [r2, #4]
 8005be6:	0030      	movs	r0, r6
 8005be8:	0025      	movs	r5, r4
 8005bea:	f000 f82f 	bl	8005c4c <__malloc_unlock>
 8005bee:	2207      	movs	r2, #7
 8005bf0:	350b      	adds	r5, #11
 8005bf2:	1d23      	adds	r3, r4, #4
 8005bf4:	4395      	bics	r5, r2
 8005bf6:	1aea      	subs	r2, r5, r3
 8005bf8:	429d      	cmp	r5, r3
 8005bfa:	d0e4      	beq.n	8005bc6 <_malloc_r+0x8e>
 8005bfc:	1b5b      	subs	r3, r3, r5
 8005bfe:	50a3      	str	r3, [r4, r2]
 8005c00:	e7e1      	b.n	8005bc6 <_malloc_r+0x8e>
 8005c02:	605a      	str	r2, [r3, #4]
 8005c04:	e7ec      	b.n	8005be0 <_malloc_r+0xa8>
 8005c06:	6862      	ldr	r2, [r4, #4]
 8005c08:	42a3      	cmp	r3, r4
 8005c0a:	d1d5      	bne.n	8005bb8 <_malloc_r+0x80>
 8005c0c:	9b00      	ldr	r3, [sp, #0]
 8005c0e:	601a      	str	r2, [r3, #0]
 8005c10:	e7e9      	b.n	8005be6 <_malloc_r+0xae>
 8005c12:	0023      	movs	r3, r4
 8005c14:	6864      	ldr	r4, [r4, #4]
 8005c16:	e7a2      	b.n	8005b5e <_malloc_r+0x26>
 8005c18:	002c      	movs	r4, r5
 8005c1a:	686d      	ldr	r5, [r5, #4]
 8005c1c:	e7ab      	b.n	8005b76 <_malloc_r+0x3e>
 8005c1e:	0013      	movs	r3, r2
 8005c20:	e7c4      	b.n	8005bac <_malloc_r+0x74>
 8005c22:	230c      	movs	r3, #12
 8005c24:	0030      	movs	r0, r6
 8005c26:	6033      	str	r3, [r6, #0]
 8005c28:	f000 f810 	bl	8005c4c <__malloc_unlock>
 8005c2c:	e7cb      	b.n	8005bc6 <_malloc_r+0x8e>
 8005c2e:	6027      	str	r7, [r4, #0]
 8005c30:	e7d9      	b.n	8005be6 <_malloc_r+0xae>
 8005c32:	605b      	str	r3, [r3, #4]
 8005c34:	deff      	udf	#255	; 0xff
 8005c36:	46c0      	nop			; (mov r8, r8)
 8005c38:	20000338 	.word	0x20000338

08005c3c <__malloc_lock>:
 8005c3c:	b510      	push	{r4, lr}
 8005c3e:	4802      	ldr	r0, [pc, #8]	; (8005c48 <__malloc_lock+0xc>)
 8005c40:	f000 fa78 	bl	8006134 <__retarget_lock_acquire_recursive>
 8005c44:	bd10      	pop	{r4, pc}
 8005c46:	46c0      	nop			; (mov r8, r8)
 8005c48:	20000480 	.word	0x20000480

08005c4c <__malloc_unlock>:
 8005c4c:	b510      	push	{r4, lr}
 8005c4e:	4802      	ldr	r0, [pc, #8]	; (8005c58 <__malloc_unlock+0xc>)
 8005c50:	f000 fa71 	bl	8006136 <__retarget_lock_release_recursive>
 8005c54:	bd10      	pop	{r4, pc}
 8005c56:	46c0      	nop			; (mov r8, r8)
 8005c58:	20000480 	.word	0x20000480

08005c5c <std>:
 8005c5c:	2300      	movs	r3, #0
 8005c5e:	b510      	push	{r4, lr}
 8005c60:	0004      	movs	r4, r0
 8005c62:	6003      	str	r3, [r0, #0]
 8005c64:	6043      	str	r3, [r0, #4]
 8005c66:	6083      	str	r3, [r0, #8]
 8005c68:	8181      	strh	r1, [r0, #12]
 8005c6a:	6643      	str	r3, [r0, #100]	; 0x64
 8005c6c:	0019      	movs	r1, r3
 8005c6e:	81c2      	strh	r2, [r0, #14]
 8005c70:	6103      	str	r3, [r0, #16]
 8005c72:	6143      	str	r3, [r0, #20]
 8005c74:	6183      	str	r3, [r0, #24]
 8005c76:	2208      	movs	r2, #8
 8005c78:	305c      	adds	r0, #92	; 0x5c
 8005c7a:	f000 f91d 	bl	8005eb8 <memset>
 8005c7e:	4b05      	ldr	r3, [pc, #20]	; (8005c94 <std+0x38>)
 8005c80:	6224      	str	r4, [r4, #32]
 8005c82:	6263      	str	r3, [r4, #36]	; 0x24
 8005c84:	4b04      	ldr	r3, [pc, #16]	; (8005c98 <std+0x3c>)
 8005c86:	62a3      	str	r3, [r4, #40]	; 0x28
 8005c88:	4b04      	ldr	r3, [pc, #16]	; (8005c9c <std+0x40>)
 8005c8a:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005c8c:	4b04      	ldr	r3, [pc, #16]	; (8005ca0 <std+0x44>)
 8005c8e:	6323      	str	r3, [r4, #48]	; 0x30
 8005c90:	bd10      	pop	{r4, pc}
 8005c92:	46c0      	nop			; (mov r8, r8)
 8005c94:	08005e21 	.word	0x08005e21
 8005c98:	08005e49 	.word	0x08005e49
 8005c9c:	08005e81 	.word	0x08005e81
 8005ca0:	08005ead 	.word	0x08005ead

08005ca4 <stdio_exit_handler>:
 8005ca4:	b510      	push	{r4, lr}
 8005ca6:	4a03      	ldr	r2, [pc, #12]	; (8005cb4 <stdio_exit_handler+0x10>)
 8005ca8:	4903      	ldr	r1, [pc, #12]	; (8005cb8 <stdio_exit_handler+0x14>)
 8005caa:	4804      	ldr	r0, [pc, #16]	; (8005cbc <stdio_exit_handler+0x18>)
 8005cac:	f000 f86c 	bl	8005d88 <_fwalk_sglue>
 8005cb0:	bd10      	pop	{r4, pc}
 8005cb2:	46c0      	nop			; (mov r8, r8)
 8005cb4:	2000012c 	.word	0x2000012c
 8005cb8:	08006b7d 	.word	0x08006b7d
 8005cbc:	20000138 	.word	0x20000138

08005cc0 <cleanup_stdio>:
 8005cc0:	6841      	ldr	r1, [r0, #4]
 8005cc2:	4b0b      	ldr	r3, [pc, #44]	; (8005cf0 <cleanup_stdio+0x30>)
 8005cc4:	b510      	push	{r4, lr}
 8005cc6:	0004      	movs	r4, r0
 8005cc8:	4299      	cmp	r1, r3
 8005cca:	d001      	beq.n	8005cd0 <cleanup_stdio+0x10>
 8005ccc:	f000 ff56 	bl	8006b7c <_fflush_r>
 8005cd0:	68a1      	ldr	r1, [r4, #8]
 8005cd2:	4b08      	ldr	r3, [pc, #32]	; (8005cf4 <cleanup_stdio+0x34>)
 8005cd4:	4299      	cmp	r1, r3
 8005cd6:	d002      	beq.n	8005cde <cleanup_stdio+0x1e>
 8005cd8:	0020      	movs	r0, r4
 8005cda:	f000 ff4f 	bl	8006b7c <_fflush_r>
 8005cde:	68e1      	ldr	r1, [r4, #12]
 8005ce0:	4b05      	ldr	r3, [pc, #20]	; (8005cf8 <cleanup_stdio+0x38>)
 8005ce2:	4299      	cmp	r1, r3
 8005ce4:	d002      	beq.n	8005cec <cleanup_stdio+0x2c>
 8005ce6:	0020      	movs	r0, r4
 8005ce8:	f000 ff48 	bl	8006b7c <_fflush_r>
 8005cec:	bd10      	pop	{r4, pc}
 8005cee:	46c0      	nop			; (mov r8, r8)
 8005cf0:	20000340 	.word	0x20000340
 8005cf4:	200003a8 	.word	0x200003a8
 8005cf8:	20000410 	.word	0x20000410

08005cfc <global_stdio_init.part.0>:
 8005cfc:	b510      	push	{r4, lr}
 8005cfe:	4b09      	ldr	r3, [pc, #36]	; (8005d24 <global_stdio_init.part.0+0x28>)
 8005d00:	4a09      	ldr	r2, [pc, #36]	; (8005d28 <global_stdio_init.part.0+0x2c>)
 8005d02:	2104      	movs	r1, #4
 8005d04:	601a      	str	r2, [r3, #0]
 8005d06:	4809      	ldr	r0, [pc, #36]	; (8005d2c <global_stdio_init.part.0+0x30>)
 8005d08:	2200      	movs	r2, #0
 8005d0a:	f7ff ffa7 	bl	8005c5c <std>
 8005d0e:	2201      	movs	r2, #1
 8005d10:	2109      	movs	r1, #9
 8005d12:	4807      	ldr	r0, [pc, #28]	; (8005d30 <global_stdio_init.part.0+0x34>)
 8005d14:	f7ff ffa2 	bl	8005c5c <std>
 8005d18:	2202      	movs	r2, #2
 8005d1a:	2112      	movs	r1, #18
 8005d1c:	4805      	ldr	r0, [pc, #20]	; (8005d34 <global_stdio_init.part.0+0x38>)
 8005d1e:	f7ff ff9d 	bl	8005c5c <std>
 8005d22:	bd10      	pop	{r4, pc}
 8005d24:	20000478 	.word	0x20000478
 8005d28:	08005ca5 	.word	0x08005ca5
 8005d2c:	20000340 	.word	0x20000340
 8005d30:	200003a8 	.word	0x200003a8
 8005d34:	20000410 	.word	0x20000410

08005d38 <__sfp_lock_acquire>:
 8005d38:	b510      	push	{r4, lr}
 8005d3a:	4802      	ldr	r0, [pc, #8]	; (8005d44 <__sfp_lock_acquire+0xc>)
 8005d3c:	f000 f9fa 	bl	8006134 <__retarget_lock_acquire_recursive>
 8005d40:	bd10      	pop	{r4, pc}
 8005d42:	46c0      	nop			; (mov r8, r8)
 8005d44:	20000481 	.word	0x20000481

08005d48 <__sfp_lock_release>:
 8005d48:	b510      	push	{r4, lr}
 8005d4a:	4802      	ldr	r0, [pc, #8]	; (8005d54 <__sfp_lock_release+0xc>)
 8005d4c:	f000 f9f3 	bl	8006136 <__retarget_lock_release_recursive>
 8005d50:	bd10      	pop	{r4, pc}
 8005d52:	46c0      	nop			; (mov r8, r8)
 8005d54:	20000481 	.word	0x20000481

08005d58 <__sinit>:
 8005d58:	b510      	push	{r4, lr}
 8005d5a:	0004      	movs	r4, r0
 8005d5c:	f7ff ffec 	bl	8005d38 <__sfp_lock_acquire>
 8005d60:	6a23      	ldr	r3, [r4, #32]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d002      	beq.n	8005d6c <__sinit+0x14>
 8005d66:	f7ff ffef 	bl	8005d48 <__sfp_lock_release>
 8005d6a:	bd10      	pop	{r4, pc}
 8005d6c:	4b04      	ldr	r3, [pc, #16]	; (8005d80 <__sinit+0x28>)
 8005d6e:	6223      	str	r3, [r4, #32]
 8005d70:	4b04      	ldr	r3, [pc, #16]	; (8005d84 <__sinit+0x2c>)
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d1f6      	bne.n	8005d66 <__sinit+0xe>
 8005d78:	f7ff ffc0 	bl	8005cfc <global_stdio_init.part.0>
 8005d7c:	e7f3      	b.n	8005d66 <__sinit+0xe>
 8005d7e:	46c0      	nop			; (mov r8, r8)
 8005d80:	08005cc1 	.word	0x08005cc1
 8005d84:	20000478 	.word	0x20000478

08005d88 <_fwalk_sglue>:
 8005d88:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005d8a:	0014      	movs	r4, r2
 8005d8c:	2600      	movs	r6, #0
 8005d8e:	9000      	str	r0, [sp, #0]
 8005d90:	9101      	str	r1, [sp, #4]
 8005d92:	68a5      	ldr	r5, [r4, #8]
 8005d94:	6867      	ldr	r7, [r4, #4]
 8005d96:	3f01      	subs	r7, #1
 8005d98:	d504      	bpl.n	8005da4 <_fwalk_sglue+0x1c>
 8005d9a:	6824      	ldr	r4, [r4, #0]
 8005d9c:	2c00      	cmp	r4, #0
 8005d9e:	d1f8      	bne.n	8005d92 <_fwalk_sglue+0xa>
 8005da0:	0030      	movs	r0, r6
 8005da2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005da4:	89ab      	ldrh	r3, [r5, #12]
 8005da6:	2b01      	cmp	r3, #1
 8005da8:	d908      	bls.n	8005dbc <_fwalk_sglue+0x34>
 8005daa:	220e      	movs	r2, #14
 8005dac:	5eab      	ldrsh	r3, [r5, r2]
 8005dae:	3301      	adds	r3, #1
 8005db0:	d004      	beq.n	8005dbc <_fwalk_sglue+0x34>
 8005db2:	0029      	movs	r1, r5
 8005db4:	9800      	ldr	r0, [sp, #0]
 8005db6:	9b01      	ldr	r3, [sp, #4]
 8005db8:	4798      	blx	r3
 8005dba:	4306      	orrs	r6, r0
 8005dbc:	3568      	adds	r5, #104	; 0x68
 8005dbe:	e7ea      	b.n	8005d96 <_fwalk_sglue+0xe>

08005dc0 <iprintf>:
 8005dc0:	b40f      	push	{r0, r1, r2, r3}
 8005dc2:	b507      	push	{r0, r1, r2, lr}
 8005dc4:	4905      	ldr	r1, [pc, #20]	; (8005ddc <iprintf+0x1c>)
 8005dc6:	ab04      	add	r3, sp, #16
 8005dc8:	6808      	ldr	r0, [r1, #0]
 8005dca:	cb04      	ldmia	r3!, {r2}
 8005dcc:	6881      	ldr	r1, [r0, #8]
 8005dce:	9301      	str	r3, [sp, #4]
 8005dd0:	f000 fbae 	bl	8006530 <_vfiprintf_r>
 8005dd4:	b003      	add	sp, #12
 8005dd6:	bc08      	pop	{r3}
 8005dd8:	b004      	add	sp, #16
 8005dda:	4718      	bx	r3
 8005ddc:	20000184 	.word	0x20000184

08005de0 <siprintf>:
 8005de0:	b40e      	push	{r1, r2, r3}
 8005de2:	b500      	push	{lr}
 8005de4:	490b      	ldr	r1, [pc, #44]	; (8005e14 <siprintf+0x34>)
 8005de6:	b09c      	sub	sp, #112	; 0x70
 8005de8:	ab1d      	add	r3, sp, #116	; 0x74
 8005dea:	9002      	str	r0, [sp, #8]
 8005dec:	9006      	str	r0, [sp, #24]
 8005dee:	9107      	str	r1, [sp, #28]
 8005df0:	9104      	str	r1, [sp, #16]
 8005df2:	4809      	ldr	r0, [pc, #36]	; (8005e18 <siprintf+0x38>)
 8005df4:	4909      	ldr	r1, [pc, #36]	; (8005e1c <siprintf+0x3c>)
 8005df6:	cb04      	ldmia	r3!, {r2}
 8005df8:	9105      	str	r1, [sp, #20]
 8005dfa:	6800      	ldr	r0, [r0, #0]
 8005dfc:	a902      	add	r1, sp, #8
 8005dfe:	9301      	str	r3, [sp, #4]
 8005e00:	f000 fa6e 	bl	80062e0 <_svfiprintf_r>
 8005e04:	2200      	movs	r2, #0
 8005e06:	9b02      	ldr	r3, [sp, #8]
 8005e08:	701a      	strb	r2, [r3, #0]
 8005e0a:	b01c      	add	sp, #112	; 0x70
 8005e0c:	bc08      	pop	{r3}
 8005e0e:	b003      	add	sp, #12
 8005e10:	4718      	bx	r3
 8005e12:	46c0      	nop			; (mov r8, r8)
 8005e14:	7fffffff 	.word	0x7fffffff
 8005e18:	20000184 	.word	0x20000184
 8005e1c:	ffff0208 	.word	0xffff0208

08005e20 <__sread>:
 8005e20:	b570      	push	{r4, r5, r6, lr}
 8005e22:	000c      	movs	r4, r1
 8005e24:	250e      	movs	r5, #14
 8005e26:	5f49      	ldrsh	r1, [r1, r5]
 8005e28:	f000 f920 	bl	800606c <_read_r>
 8005e2c:	2800      	cmp	r0, #0
 8005e2e:	db03      	blt.n	8005e38 <__sread+0x18>
 8005e30:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005e32:	181b      	adds	r3, r3, r0
 8005e34:	6563      	str	r3, [r4, #84]	; 0x54
 8005e36:	bd70      	pop	{r4, r5, r6, pc}
 8005e38:	89a3      	ldrh	r3, [r4, #12]
 8005e3a:	4a02      	ldr	r2, [pc, #8]	; (8005e44 <__sread+0x24>)
 8005e3c:	4013      	ands	r3, r2
 8005e3e:	81a3      	strh	r3, [r4, #12]
 8005e40:	e7f9      	b.n	8005e36 <__sread+0x16>
 8005e42:	46c0      	nop			; (mov r8, r8)
 8005e44:	ffffefff 	.word	0xffffefff

08005e48 <__swrite>:
 8005e48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e4a:	001f      	movs	r7, r3
 8005e4c:	898b      	ldrh	r3, [r1, #12]
 8005e4e:	0005      	movs	r5, r0
 8005e50:	000c      	movs	r4, r1
 8005e52:	0016      	movs	r6, r2
 8005e54:	05db      	lsls	r3, r3, #23
 8005e56:	d505      	bpl.n	8005e64 <__swrite+0x1c>
 8005e58:	230e      	movs	r3, #14
 8005e5a:	5ec9      	ldrsh	r1, [r1, r3]
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	2302      	movs	r3, #2
 8005e60:	f000 f8f0 	bl	8006044 <_lseek_r>
 8005e64:	89a3      	ldrh	r3, [r4, #12]
 8005e66:	4a05      	ldr	r2, [pc, #20]	; (8005e7c <__swrite+0x34>)
 8005e68:	0028      	movs	r0, r5
 8005e6a:	4013      	ands	r3, r2
 8005e6c:	81a3      	strh	r3, [r4, #12]
 8005e6e:	0032      	movs	r2, r6
 8005e70:	230e      	movs	r3, #14
 8005e72:	5ee1      	ldrsh	r1, [r4, r3]
 8005e74:	003b      	movs	r3, r7
 8005e76:	f000 f91f 	bl	80060b8 <_write_r>
 8005e7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005e7c:	ffffefff 	.word	0xffffefff

08005e80 <__sseek>:
 8005e80:	b570      	push	{r4, r5, r6, lr}
 8005e82:	000c      	movs	r4, r1
 8005e84:	250e      	movs	r5, #14
 8005e86:	5f49      	ldrsh	r1, [r1, r5]
 8005e88:	f000 f8dc 	bl	8006044 <_lseek_r>
 8005e8c:	89a3      	ldrh	r3, [r4, #12]
 8005e8e:	1c42      	adds	r2, r0, #1
 8005e90:	d103      	bne.n	8005e9a <__sseek+0x1a>
 8005e92:	4a05      	ldr	r2, [pc, #20]	; (8005ea8 <__sseek+0x28>)
 8005e94:	4013      	ands	r3, r2
 8005e96:	81a3      	strh	r3, [r4, #12]
 8005e98:	bd70      	pop	{r4, r5, r6, pc}
 8005e9a:	2280      	movs	r2, #128	; 0x80
 8005e9c:	0152      	lsls	r2, r2, #5
 8005e9e:	4313      	orrs	r3, r2
 8005ea0:	81a3      	strh	r3, [r4, #12]
 8005ea2:	6560      	str	r0, [r4, #84]	; 0x54
 8005ea4:	e7f8      	b.n	8005e98 <__sseek+0x18>
 8005ea6:	46c0      	nop			; (mov r8, r8)
 8005ea8:	ffffefff 	.word	0xffffefff

08005eac <__sclose>:
 8005eac:	b510      	push	{r4, lr}
 8005eae:	230e      	movs	r3, #14
 8005eb0:	5ec9      	ldrsh	r1, [r1, r3]
 8005eb2:	f000 f8b5 	bl	8006020 <_close_r>
 8005eb6:	bd10      	pop	{r4, pc}

08005eb8 <memset>:
 8005eb8:	0003      	movs	r3, r0
 8005eba:	1882      	adds	r2, r0, r2
 8005ebc:	4293      	cmp	r3, r2
 8005ebe:	d100      	bne.n	8005ec2 <memset+0xa>
 8005ec0:	4770      	bx	lr
 8005ec2:	7019      	strb	r1, [r3, #0]
 8005ec4:	3301      	adds	r3, #1
 8005ec6:	e7f9      	b.n	8005ebc <memset+0x4>

08005ec8 <strdup>:
 8005ec8:	b510      	push	{r4, lr}
 8005eca:	4b03      	ldr	r3, [pc, #12]	; (8005ed8 <strdup+0x10>)
 8005ecc:	0001      	movs	r1, r0
 8005ece:	6818      	ldr	r0, [r3, #0]
 8005ed0:	f000 f804 	bl	8005edc <_strdup_r>
 8005ed4:	bd10      	pop	{r4, pc}
 8005ed6:	46c0      	nop			; (mov r8, r8)
 8005ed8:	20000184 	.word	0x20000184

08005edc <_strdup_r>:
 8005edc:	b570      	push	{r4, r5, r6, lr}
 8005ede:	0004      	movs	r4, r0
 8005ee0:	0008      	movs	r0, r1
 8005ee2:	000d      	movs	r5, r1
 8005ee4:	f7fa f91a 	bl	800011c <strlen>
 8005ee8:	1c46      	adds	r6, r0, #1
 8005eea:	0031      	movs	r1, r6
 8005eec:	0020      	movs	r0, r4
 8005eee:	f7ff fe23 	bl	8005b38 <_malloc_r>
 8005ef2:	1e04      	subs	r4, r0, #0
 8005ef4:	d003      	beq.n	8005efe <_strdup_r+0x22>
 8005ef6:	0032      	movs	r2, r6
 8005ef8:	0029      	movs	r1, r5
 8005efa:	f000 f91d 	bl	8006138 <memcpy>
 8005efe:	0020      	movs	r0, r4
 8005f00:	bd70      	pop	{r4, r5, r6, pc}

08005f02 <strncmp>:
 8005f02:	b530      	push	{r4, r5, lr}
 8005f04:	0005      	movs	r5, r0
 8005f06:	1e10      	subs	r0, r2, #0
 8005f08:	d00b      	beq.n	8005f22 <strncmp+0x20>
 8005f0a:	2400      	movs	r4, #0
 8005f0c:	3a01      	subs	r2, #1
 8005f0e:	5d2b      	ldrb	r3, [r5, r4]
 8005f10:	5d08      	ldrb	r0, [r1, r4]
 8005f12:	4283      	cmp	r3, r0
 8005f14:	d104      	bne.n	8005f20 <strncmp+0x1e>
 8005f16:	42a2      	cmp	r2, r4
 8005f18:	d002      	beq.n	8005f20 <strncmp+0x1e>
 8005f1a:	3401      	adds	r4, #1
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d1f6      	bne.n	8005f0e <strncmp+0xc>
 8005f20:	1a18      	subs	r0, r3, r0
 8005f22:	bd30      	pop	{r4, r5, pc}

08005f24 <strpbrk>:
 8005f24:	b510      	push	{r4, lr}
 8005f26:	7803      	ldrb	r3, [r0, #0]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d013      	beq.n	8005f54 <strpbrk+0x30>
 8005f2c:	000b      	movs	r3, r1
 8005f2e:	7802      	ldrb	r2, [r0, #0]
 8005f30:	2a00      	cmp	r2, #0
 8005f32:	d10d      	bne.n	8005f50 <strpbrk+0x2c>
 8005f34:	781b      	ldrb	r3, [r3, #0]
 8005f36:	1e5a      	subs	r2, r3, #1
 8005f38:	4193      	sbcs	r3, r2
 8005f3a:	425b      	negs	r3, r3
 8005f3c:	4018      	ands	r0, r3
 8005f3e:	bd10      	pop	{r4, pc}
 8005f40:	4294      	cmp	r4, r2
 8005f42:	d0fc      	beq.n	8005f3e <strpbrk+0x1a>
 8005f44:	3301      	adds	r3, #1
 8005f46:	781c      	ldrb	r4, [r3, #0]
 8005f48:	2c00      	cmp	r4, #0
 8005f4a:	d1f9      	bne.n	8005f40 <strpbrk+0x1c>
 8005f4c:	3001      	adds	r0, #1
 8005f4e:	e7ee      	b.n	8005f2e <strpbrk+0xa>
 8005f50:	000b      	movs	r3, r1
 8005f52:	e7f8      	b.n	8005f46 <strpbrk+0x22>
 8005f54:	0018      	movs	r0, r3
 8005f56:	e7f2      	b.n	8005f3e <strpbrk+0x1a>

08005f58 <strtok>:
 8005f58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f5a:	4b16      	ldr	r3, [pc, #88]	; (8005fb4 <strtok+0x5c>)
 8005f5c:	0005      	movs	r5, r0
 8005f5e:	681f      	ldr	r7, [r3, #0]
 8005f60:	000e      	movs	r6, r1
 8005f62:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 8005f64:	2c00      	cmp	r4, #0
 8005f66:	d11d      	bne.n	8005fa4 <strtok+0x4c>
 8005f68:	2050      	movs	r0, #80	; 0x50
 8005f6a:	f7ff fdaf 	bl	8005acc <malloc>
 8005f6e:	1e02      	subs	r2, r0, #0
 8005f70:	6478      	str	r0, [r7, #68]	; 0x44
 8005f72:	d104      	bne.n	8005f7e <strtok+0x26>
 8005f74:	215b      	movs	r1, #91	; 0x5b
 8005f76:	4b10      	ldr	r3, [pc, #64]	; (8005fb8 <strtok+0x60>)
 8005f78:	4810      	ldr	r0, [pc, #64]	; (8005fbc <strtok+0x64>)
 8005f7a:	f000 f8e7 	bl	800614c <__assert_func>
 8005f7e:	6004      	str	r4, [r0, #0]
 8005f80:	6044      	str	r4, [r0, #4]
 8005f82:	6084      	str	r4, [r0, #8]
 8005f84:	60c4      	str	r4, [r0, #12]
 8005f86:	6104      	str	r4, [r0, #16]
 8005f88:	6144      	str	r4, [r0, #20]
 8005f8a:	6184      	str	r4, [r0, #24]
 8005f8c:	6284      	str	r4, [r0, #40]	; 0x28
 8005f8e:	62c4      	str	r4, [r0, #44]	; 0x2c
 8005f90:	6304      	str	r4, [r0, #48]	; 0x30
 8005f92:	6344      	str	r4, [r0, #52]	; 0x34
 8005f94:	6384      	str	r4, [r0, #56]	; 0x38
 8005f96:	63c4      	str	r4, [r0, #60]	; 0x3c
 8005f98:	6404      	str	r4, [r0, #64]	; 0x40
 8005f9a:	6444      	str	r4, [r0, #68]	; 0x44
 8005f9c:	6484      	str	r4, [r0, #72]	; 0x48
 8005f9e:	64c4      	str	r4, [r0, #76]	; 0x4c
 8005fa0:	7704      	strb	r4, [r0, #28]
 8005fa2:	6244      	str	r4, [r0, #36]	; 0x24
 8005fa4:	0031      	movs	r1, r6
 8005fa6:	0028      	movs	r0, r5
 8005fa8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005faa:	2301      	movs	r3, #1
 8005fac:	f000 f808 	bl	8005fc0 <__strtok_r>
 8005fb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005fb2:	46c0      	nop			; (mov r8, r8)
 8005fb4:	20000184 	.word	0x20000184
 8005fb8:	08007221 	.word	0x08007221
 8005fbc:	08007238 	.word	0x08007238

08005fc0 <__strtok_r>:
 8005fc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005fc2:	2800      	cmp	r0, #0
 8005fc4:	d102      	bne.n	8005fcc <__strtok_r+0xc>
 8005fc6:	6810      	ldr	r0, [r2, #0]
 8005fc8:	2800      	cmp	r0, #0
 8005fca:	d013      	beq.n	8005ff4 <__strtok_r+0x34>
 8005fcc:	0004      	movs	r4, r0
 8005fce:	0020      	movs	r0, r4
 8005fd0:	000e      	movs	r6, r1
 8005fd2:	7805      	ldrb	r5, [r0, #0]
 8005fd4:	3401      	adds	r4, #1
 8005fd6:	7837      	ldrb	r7, [r6, #0]
 8005fd8:	2f00      	cmp	r7, #0
 8005fda:	d104      	bne.n	8005fe6 <__strtok_r+0x26>
 8005fdc:	2d00      	cmp	r5, #0
 8005fde:	d10f      	bne.n	8006000 <__strtok_r+0x40>
 8005fe0:	0028      	movs	r0, r5
 8005fe2:	6015      	str	r5, [r2, #0]
 8005fe4:	e006      	b.n	8005ff4 <__strtok_r+0x34>
 8005fe6:	3601      	adds	r6, #1
 8005fe8:	42bd      	cmp	r5, r7
 8005fea:	d1f4      	bne.n	8005fd6 <__strtok_r+0x16>
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d1ee      	bne.n	8005fce <__strtok_r+0xe>
 8005ff0:	6014      	str	r4, [r2, #0]
 8005ff2:	7003      	strb	r3, [r0, #0]
 8005ff4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005ff6:	002f      	movs	r7, r5
 8005ff8:	e00f      	b.n	800601a <__strtok_r+0x5a>
 8005ffa:	3301      	adds	r3, #1
 8005ffc:	2e00      	cmp	r6, #0
 8005ffe:	d104      	bne.n	800600a <__strtok_r+0x4a>
 8006000:	0023      	movs	r3, r4
 8006002:	3401      	adds	r4, #1
 8006004:	781d      	ldrb	r5, [r3, #0]
 8006006:	0027      	movs	r7, r4
 8006008:	000b      	movs	r3, r1
 800600a:	781e      	ldrb	r6, [r3, #0]
 800600c:	42b5      	cmp	r5, r6
 800600e:	d1f4      	bne.n	8005ffa <__strtok_r+0x3a>
 8006010:	2d00      	cmp	r5, #0
 8006012:	d0f0      	beq.n	8005ff6 <__strtok_r+0x36>
 8006014:	2300      	movs	r3, #0
 8006016:	3c01      	subs	r4, #1
 8006018:	7023      	strb	r3, [r4, #0]
 800601a:	6017      	str	r7, [r2, #0]
 800601c:	e7ea      	b.n	8005ff4 <__strtok_r+0x34>
	...

08006020 <_close_r>:
 8006020:	2300      	movs	r3, #0
 8006022:	b570      	push	{r4, r5, r6, lr}
 8006024:	4d06      	ldr	r5, [pc, #24]	; (8006040 <_close_r+0x20>)
 8006026:	0004      	movs	r4, r0
 8006028:	0008      	movs	r0, r1
 800602a:	602b      	str	r3, [r5, #0]
 800602c:	f7fb ff71 	bl	8001f12 <_close>
 8006030:	1c43      	adds	r3, r0, #1
 8006032:	d103      	bne.n	800603c <_close_r+0x1c>
 8006034:	682b      	ldr	r3, [r5, #0]
 8006036:	2b00      	cmp	r3, #0
 8006038:	d000      	beq.n	800603c <_close_r+0x1c>
 800603a:	6023      	str	r3, [r4, #0]
 800603c:	bd70      	pop	{r4, r5, r6, pc}
 800603e:	46c0      	nop			; (mov r8, r8)
 8006040:	2000047c 	.word	0x2000047c

08006044 <_lseek_r>:
 8006044:	b570      	push	{r4, r5, r6, lr}
 8006046:	0004      	movs	r4, r0
 8006048:	0008      	movs	r0, r1
 800604a:	0011      	movs	r1, r2
 800604c:	001a      	movs	r2, r3
 800604e:	2300      	movs	r3, #0
 8006050:	4d05      	ldr	r5, [pc, #20]	; (8006068 <_lseek_r+0x24>)
 8006052:	602b      	str	r3, [r5, #0]
 8006054:	f7fb ff7e 	bl	8001f54 <_lseek>
 8006058:	1c43      	adds	r3, r0, #1
 800605a:	d103      	bne.n	8006064 <_lseek_r+0x20>
 800605c:	682b      	ldr	r3, [r5, #0]
 800605e:	2b00      	cmp	r3, #0
 8006060:	d000      	beq.n	8006064 <_lseek_r+0x20>
 8006062:	6023      	str	r3, [r4, #0]
 8006064:	bd70      	pop	{r4, r5, r6, pc}
 8006066:	46c0      	nop			; (mov r8, r8)
 8006068:	2000047c 	.word	0x2000047c

0800606c <_read_r>:
 800606c:	b570      	push	{r4, r5, r6, lr}
 800606e:	0004      	movs	r4, r0
 8006070:	0008      	movs	r0, r1
 8006072:	0011      	movs	r1, r2
 8006074:	001a      	movs	r2, r3
 8006076:	2300      	movs	r3, #0
 8006078:	4d05      	ldr	r5, [pc, #20]	; (8006090 <_read_r+0x24>)
 800607a:	602b      	str	r3, [r5, #0]
 800607c:	f7fb ff10 	bl	8001ea0 <_read>
 8006080:	1c43      	adds	r3, r0, #1
 8006082:	d103      	bne.n	800608c <_read_r+0x20>
 8006084:	682b      	ldr	r3, [r5, #0]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d000      	beq.n	800608c <_read_r+0x20>
 800608a:	6023      	str	r3, [r4, #0]
 800608c:	bd70      	pop	{r4, r5, r6, pc}
 800608e:	46c0      	nop			; (mov r8, r8)
 8006090:	2000047c 	.word	0x2000047c

08006094 <_sbrk_r>:
 8006094:	2300      	movs	r3, #0
 8006096:	b570      	push	{r4, r5, r6, lr}
 8006098:	4d06      	ldr	r5, [pc, #24]	; (80060b4 <_sbrk_r+0x20>)
 800609a:	0004      	movs	r4, r0
 800609c:	0008      	movs	r0, r1
 800609e:	602b      	str	r3, [r5, #0]
 80060a0:	f7fb ff64 	bl	8001f6c <_sbrk>
 80060a4:	1c43      	adds	r3, r0, #1
 80060a6:	d103      	bne.n	80060b0 <_sbrk_r+0x1c>
 80060a8:	682b      	ldr	r3, [r5, #0]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d000      	beq.n	80060b0 <_sbrk_r+0x1c>
 80060ae:	6023      	str	r3, [r4, #0]
 80060b0:	bd70      	pop	{r4, r5, r6, pc}
 80060b2:	46c0      	nop			; (mov r8, r8)
 80060b4:	2000047c 	.word	0x2000047c

080060b8 <_write_r>:
 80060b8:	b570      	push	{r4, r5, r6, lr}
 80060ba:	0004      	movs	r4, r0
 80060bc:	0008      	movs	r0, r1
 80060be:	0011      	movs	r1, r2
 80060c0:	001a      	movs	r2, r3
 80060c2:	2300      	movs	r3, #0
 80060c4:	4d05      	ldr	r5, [pc, #20]	; (80060dc <_write_r+0x24>)
 80060c6:	602b      	str	r3, [r5, #0]
 80060c8:	f7fb ff07 	bl	8001eda <_write>
 80060cc:	1c43      	adds	r3, r0, #1
 80060ce:	d103      	bne.n	80060d8 <_write_r+0x20>
 80060d0:	682b      	ldr	r3, [r5, #0]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d000      	beq.n	80060d8 <_write_r+0x20>
 80060d6:	6023      	str	r3, [r4, #0]
 80060d8:	bd70      	pop	{r4, r5, r6, pc}
 80060da:	46c0      	nop			; (mov r8, r8)
 80060dc:	2000047c 	.word	0x2000047c

080060e0 <__errno>:
 80060e0:	4b01      	ldr	r3, [pc, #4]	; (80060e8 <__errno+0x8>)
 80060e2:	6818      	ldr	r0, [r3, #0]
 80060e4:	4770      	bx	lr
 80060e6:	46c0      	nop			; (mov r8, r8)
 80060e8:	20000184 	.word	0x20000184

080060ec <__libc_init_array>:
 80060ec:	b570      	push	{r4, r5, r6, lr}
 80060ee:	2600      	movs	r6, #0
 80060f0:	4c0c      	ldr	r4, [pc, #48]	; (8006124 <__libc_init_array+0x38>)
 80060f2:	4d0d      	ldr	r5, [pc, #52]	; (8006128 <__libc_init_array+0x3c>)
 80060f4:	1b64      	subs	r4, r4, r5
 80060f6:	10a4      	asrs	r4, r4, #2
 80060f8:	42a6      	cmp	r6, r4
 80060fa:	d109      	bne.n	8006110 <__libc_init_array+0x24>
 80060fc:	2600      	movs	r6, #0
 80060fe:	f000 ff4f 	bl	8006fa0 <_init>
 8006102:	4c0a      	ldr	r4, [pc, #40]	; (800612c <__libc_init_array+0x40>)
 8006104:	4d0a      	ldr	r5, [pc, #40]	; (8006130 <__libc_init_array+0x44>)
 8006106:	1b64      	subs	r4, r4, r5
 8006108:	10a4      	asrs	r4, r4, #2
 800610a:	42a6      	cmp	r6, r4
 800610c:	d105      	bne.n	800611a <__libc_init_array+0x2e>
 800610e:	bd70      	pop	{r4, r5, r6, pc}
 8006110:	00b3      	lsls	r3, r6, #2
 8006112:	58eb      	ldr	r3, [r5, r3]
 8006114:	4798      	blx	r3
 8006116:	3601      	adds	r6, #1
 8006118:	e7ee      	b.n	80060f8 <__libc_init_array+0xc>
 800611a:	00b3      	lsls	r3, r6, #2
 800611c:	58eb      	ldr	r3, [r5, r3]
 800611e:	4798      	blx	r3
 8006120:	3601      	adds	r6, #1
 8006122:	e7f2      	b.n	800610a <__libc_init_array+0x1e>
 8006124:	0800730c 	.word	0x0800730c
 8006128:	0800730c 	.word	0x0800730c
 800612c:	08007310 	.word	0x08007310
 8006130:	0800730c 	.word	0x0800730c

08006134 <__retarget_lock_acquire_recursive>:
 8006134:	4770      	bx	lr

08006136 <__retarget_lock_release_recursive>:
 8006136:	4770      	bx	lr

08006138 <memcpy>:
 8006138:	2300      	movs	r3, #0
 800613a:	b510      	push	{r4, lr}
 800613c:	429a      	cmp	r2, r3
 800613e:	d100      	bne.n	8006142 <memcpy+0xa>
 8006140:	bd10      	pop	{r4, pc}
 8006142:	5ccc      	ldrb	r4, [r1, r3]
 8006144:	54c4      	strb	r4, [r0, r3]
 8006146:	3301      	adds	r3, #1
 8006148:	e7f8      	b.n	800613c <memcpy+0x4>
	...

0800614c <__assert_func>:
 800614c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800614e:	0014      	movs	r4, r2
 8006150:	001a      	movs	r2, r3
 8006152:	4b09      	ldr	r3, [pc, #36]	; (8006178 <__assert_func+0x2c>)
 8006154:	0005      	movs	r5, r0
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	000e      	movs	r6, r1
 800615a:	68d8      	ldr	r0, [r3, #12]
 800615c:	4b07      	ldr	r3, [pc, #28]	; (800617c <__assert_func+0x30>)
 800615e:	2c00      	cmp	r4, #0
 8006160:	d101      	bne.n	8006166 <__assert_func+0x1a>
 8006162:	4b07      	ldr	r3, [pc, #28]	; (8006180 <__assert_func+0x34>)
 8006164:	001c      	movs	r4, r3
 8006166:	4907      	ldr	r1, [pc, #28]	; (8006184 <__assert_func+0x38>)
 8006168:	9301      	str	r3, [sp, #4]
 800616a:	9402      	str	r4, [sp, #8]
 800616c:	002b      	movs	r3, r5
 800616e:	9600      	str	r6, [sp, #0]
 8006170:	f000 fd30 	bl	8006bd4 <fiprintf>
 8006174:	f000 fe02 	bl	8006d7c <abort>
 8006178:	20000184 	.word	0x20000184
 800617c:	08007292 	.word	0x08007292
 8006180:	080072cd 	.word	0x080072cd
 8006184:	0800729f 	.word	0x0800729f

08006188 <_free_r>:
 8006188:	b570      	push	{r4, r5, r6, lr}
 800618a:	0005      	movs	r5, r0
 800618c:	2900      	cmp	r1, #0
 800618e:	d010      	beq.n	80061b2 <_free_r+0x2a>
 8006190:	1f0c      	subs	r4, r1, #4
 8006192:	6823      	ldr	r3, [r4, #0]
 8006194:	2b00      	cmp	r3, #0
 8006196:	da00      	bge.n	800619a <_free_r+0x12>
 8006198:	18e4      	adds	r4, r4, r3
 800619a:	0028      	movs	r0, r5
 800619c:	f7ff fd4e 	bl	8005c3c <__malloc_lock>
 80061a0:	4a1d      	ldr	r2, [pc, #116]	; (8006218 <_free_r+0x90>)
 80061a2:	6813      	ldr	r3, [r2, #0]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d105      	bne.n	80061b4 <_free_r+0x2c>
 80061a8:	6063      	str	r3, [r4, #4]
 80061aa:	6014      	str	r4, [r2, #0]
 80061ac:	0028      	movs	r0, r5
 80061ae:	f7ff fd4d 	bl	8005c4c <__malloc_unlock>
 80061b2:	bd70      	pop	{r4, r5, r6, pc}
 80061b4:	42a3      	cmp	r3, r4
 80061b6:	d908      	bls.n	80061ca <_free_r+0x42>
 80061b8:	6820      	ldr	r0, [r4, #0]
 80061ba:	1821      	adds	r1, r4, r0
 80061bc:	428b      	cmp	r3, r1
 80061be:	d1f3      	bne.n	80061a8 <_free_r+0x20>
 80061c0:	6819      	ldr	r1, [r3, #0]
 80061c2:	685b      	ldr	r3, [r3, #4]
 80061c4:	1809      	adds	r1, r1, r0
 80061c6:	6021      	str	r1, [r4, #0]
 80061c8:	e7ee      	b.n	80061a8 <_free_r+0x20>
 80061ca:	001a      	movs	r2, r3
 80061cc:	685b      	ldr	r3, [r3, #4]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d001      	beq.n	80061d6 <_free_r+0x4e>
 80061d2:	42a3      	cmp	r3, r4
 80061d4:	d9f9      	bls.n	80061ca <_free_r+0x42>
 80061d6:	6811      	ldr	r1, [r2, #0]
 80061d8:	1850      	adds	r0, r2, r1
 80061da:	42a0      	cmp	r0, r4
 80061dc:	d10b      	bne.n	80061f6 <_free_r+0x6e>
 80061de:	6820      	ldr	r0, [r4, #0]
 80061e0:	1809      	adds	r1, r1, r0
 80061e2:	1850      	adds	r0, r2, r1
 80061e4:	6011      	str	r1, [r2, #0]
 80061e6:	4283      	cmp	r3, r0
 80061e8:	d1e0      	bne.n	80061ac <_free_r+0x24>
 80061ea:	6818      	ldr	r0, [r3, #0]
 80061ec:	685b      	ldr	r3, [r3, #4]
 80061ee:	1841      	adds	r1, r0, r1
 80061f0:	6011      	str	r1, [r2, #0]
 80061f2:	6053      	str	r3, [r2, #4]
 80061f4:	e7da      	b.n	80061ac <_free_r+0x24>
 80061f6:	42a0      	cmp	r0, r4
 80061f8:	d902      	bls.n	8006200 <_free_r+0x78>
 80061fa:	230c      	movs	r3, #12
 80061fc:	602b      	str	r3, [r5, #0]
 80061fe:	e7d5      	b.n	80061ac <_free_r+0x24>
 8006200:	6820      	ldr	r0, [r4, #0]
 8006202:	1821      	adds	r1, r4, r0
 8006204:	428b      	cmp	r3, r1
 8006206:	d103      	bne.n	8006210 <_free_r+0x88>
 8006208:	6819      	ldr	r1, [r3, #0]
 800620a:	685b      	ldr	r3, [r3, #4]
 800620c:	1809      	adds	r1, r1, r0
 800620e:	6021      	str	r1, [r4, #0]
 8006210:	6063      	str	r3, [r4, #4]
 8006212:	6054      	str	r4, [r2, #4]
 8006214:	e7ca      	b.n	80061ac <_free_r+0x24>
 8006216:	46c0      	nop			; (mov r8, r8)
 8006218:	20000338 	.word	0x20000338

0800621c <__ssputs_r>:
 800621c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800621e:	b085      	sub	sp, #20
 8006220:	9301      	str	r3, [sp, #4]
 8006222:	9203      	str	r2, [sp, #12]
 8006224:	688e      	ldr	r6, [r1, #8]
 8006226:	9a01      	ldr	r2, [sp, #4]
 8006228:	0007      	movs	r7, r0
 800622a:	000c      	movs	r4, r1
 800622c:	680b      	ldr	r3, [r1, #0]
 800622e:	4296      	cmp	r6, r2
 8006230:	d831      	bhi.n	8006296 <__ssputs_r+0x7a>
 8006232:	898a      	ldrh	r2, [r1, #12]
 8006234:	2190      	movs	r1, #144	; 0x90
 8006236:	00c9      	lsls	r1, r1, #3
 8006238:	420a      	tst	r2, r1
 800623a:	d029      	beq.n	8006290 <__ssputs_r+0x74>
 800623c:	2003      	movs	r0, #3
 800623e:	6921      	ldr	r1, [r4, #16]
 8006240:	1a5b      	subs	r3, r3, r1
 8006242:	9302      	str	r3, [sp, #8]
 8006244:	6963      	ldr	r3, [r4, #20]
 8006246:	4343      	muls	r3, r0
 8006248:	0fdd      	lsrs	r5, r3, #31
 800624a:	18ed      	adds	r5, r5, r3
 800624c:	9b01      	ldr	r3, [sp, #4]
 800624e:	9802      	ldr	r0, [sp, #8]
 8006250:	3301      	adds	r3, #1
 8006252:	181b      	adds	r3, r3, r0
 8006254:	106d      	asrs	r5, r5, #1
 8006256:	42ab      	cmp	r3, r5
 8006258:	d900      	bls.n	800625c <__ssputs_r+0x40>
 800625a:	001d      	movs	r5, r3
 800625c:	0552      	lsls	r2, r2, #21
 800625e:	d529      	bpl.n	80062b4 <__ssputs_r+0x98>
 8006260:	0029      	movs	r1, r5
 8006262:	0038      	movs	r0, r7
 8006264:	f7ff fc68 	bl	8005b38 <_malloc_r>
 8006268:	1e06      	subs	r6, r0, #0
 800626a:	d02d      	beq.n	80062c8 <__ssputs_r+0xac>
 800626c:	9a02      	ldr	r2, [sp, #8]
 800626e:	6921      	ldr	r1, [r4, #16]
 8006270:	f7ff ff62 	bl	8006138 <memcpy>
 8006274:	89a2      	ldrh	r2, [r4, #12]
 8006276:	4b19      	ldr	r3, [pc, #100]	; (80062dc <__ssputs_r+0xc0>)
 8006278:	401a      	ands	r2, r3
 800627a:	2380      	movs	r3, #128	; 0x80
 800627c:	4313      	orrs	r3, r2
 800627e:	81a3      	strh	r3, [r4, #12]
 8006280:	9b02      	ldr	r3, [sp, #8]
 8006282:	6126      	str	r6, [r4, #16]
 8006284:	18f6      	adds	r6, r6, r3
 8006286:	6026      	str	r6, [r4, #0]
 8006288:	6165      	str	r5, [r4, #20]
 800628a:	9e01      	ldr	r6, [sp, #4]
 800628c:	1aed      	subs	r5, r5, r3
 800628e:	60a5      	str	r5, [r4, #8]
 8006290:	9b01      	ldr	r3, [sp, #4]
 8006292:	429e      	cmp	r6, r3
 8006294:	d900      	bls.n	8006298 <__ssputs_r+0x7c>
 8006296:	9e01      	ldr	r6, [sp, #4]
 8006298:	0032      	movs	r2, r6
 800629a:	9903      	ldr	r1, [sp, #12]
 800629c:	6820      	ldr	r0, [r4, #0]
 800629e:	f000 fd4f 	bl	8006d40 <memmove>
 80062a2:	2000      	movs	r0, #0
 80062a4:	68a3      	ldr	r3, [r4, #8]
 80062a6:	1b9b      	subs	r3, r3, r6
 80062a8:	60a3      	str	r3, [r4, #8]
 80062aa:	6823      	ldr	r3, [r4, #0]
 80062ac:	199b      	adds	r3, r3, r6
 80062ae:	6023      	str	r3, [r4, #0]
 80062b0:	b005      	add	sp, #20
 80062b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80062b4:	002a      	movs	r2, r5
 80062b6:	0038      	movs	r0, r7
 80062b8:	f000 fd67 	bl	8006d8a <_realloc_r>
 80062bc:	1e06      	subs	r6, r0, #0
 80062be:	d1df      	bne.n	8006280 <__ssputs_r+0x64>
 80062c0:	0038      	movs	r0, r7
 80062c2:	6921      	ldr	r1, [r4, #16]
 80062c4:	f7ff ff60 	bl	8006188 <_free_r>
 80062c8:	230c      	movs	r3, #12
 80062ca:	2001      	movs	r0, #1
 80062cc:	603b      	str	r3, [r7, #0]
 80062ce:	89a2      	ldrh	r2, [r4, #12]
 80062d0:	3334      	adds	r3, #52	; 0x34
 80062d2:	4313      	orrs	r3, r2
 80062d4:	81a3      	strh	r3, [r4, #12]
 80062d6:	4240      	negs	r0, r0
 80062d8:	e7ea      	b.n	80062b0 <__ssputs_r+0x94>
 80062da:	46c0      	nop			; (mov r8, r8)
 80062dc:	fffffb7f 	.word	0xfffffb7f

080062e0 <_svfiprintf_r>:
 80062e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80062e2:	b0a1      	sub	sp, #132	; 0x84
 80062e4:	9003      	str	r0, [sp, #12]
 80062e6:	001d      	movs	r5, r3
 80062e8:	898b      	ldrh	r3, [r1, #12]
 80062ea:	000f      	movs	r7, r1
 80062ec:	0016      	movs	r6, r2
 80062ee:	061b      	lsls	r3, r3, #24
 80062f0:	d511      	bpl.n	8006316 <_svfiprintf_r+0x36>
 80062f2:	690b      	ldr	r3, [r1, #16]
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d10e      	bne.n	8006316 <_svfiprintf_r+0x36>
 80062f8:	2140      	movs	r1, #64	; 0x40
 80062fa:	f7ff fc1d 	bl	8005b38 <_malloc_r>
 80062fe:	6038      	str	r0, [r7, #0]
 8006300:	6138      	str	r0, [r7, #16]
 8006302:	2800      	cmp	r0, #0
 8006304:	d105      	bne.n	8006312 <_svfiprintf_r+0x32>
 8006306:	230c      	movs	r3, #12
 8006308:	9a03      	ldr	r2, [sp, #12]
 800630a:	3801      	subs	r0, #1
 800630c:	6013      	str	r3, [r2, #0]
 800630e:	b021      	add	sp, #132	; 0x84
 8006310:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006312:	2340      	movs	r3, #64	; 0x40
 8006314:	617b      	str	r3, [r7, #20]
 8006316:	2300      	movs	r3, #0
 8006318:	ac08      	add	r4, sp, #32
 800631a:	6163      	str	r3, [r4, #20]
 800631c:	3320      	adds	r3, #32
 800631e:	7663      	strb	r3, [r4, #25]
 8006320:	3310      	adds	r3, #16
 8006322:	76a3      	strb	r3, [r4, #26]
 8006324:	9507      	str	r5, [sp, #28]
 8006326:	0035      	movs	r5, r6
 8006328:	782b      	ldrb	r3, [r5, #0]
 800632a:	2b00      	cmp	r3, #0
 800632c:	d001      	beq.n	8006332 <_svfiprintf_r+0x52>
 800632e:	2b25      	cmp	r3, #37	; 0x25
 8006330:	d148      	bne.n	80063c4 <_svfiprintf_r+0xe4>
 8006332:	1bab      	subs	r3, r5, r6
 8006334:	9305      	str	r3, [sp, #20]
 8006336:	42b5      	cmp	r5, r6
 8006338:	d00b      	beq.n	8006352 <_svfiprintf_r+0x72>
 800633a:	0032      	movs	r2, r6
 800633c:	0039      	movs	r1, r7
 800633e:	9803      	ldr	r0, [sp, #12]
 8006340:	f7ff ff6c 	bl	800621c <__ssputs_r>
 8006344:	3001      	adds	r0, #1
 8006346:	d100      	bne.n	800634a <_svfiprintf_r+0x6a>
 8006348:	e0af      	b.n	80064aa <_svfiprintf_r+0x1ca>
 800634a:	6963      	ldr	r3, [r4, #20]
 800634c:	9a05      	ldr	r2, [sp, #20]
 800634e:	189b      	adds	r3, r3, r2
 8006350:	6163      	str	r3, [r4, #20]
 8006352:	782b      	ldrb	r3, [r5, #0]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d100      	bne.n	800635a <_svfiprintf_r+0x7a>
 8006358:	e0a7      	b.n	80064aa <_svfiprintf_r+0x1ca>
 800635a:	2201      	movs	r2, #1
 800635c:	2300      	movs	r3, #0
 800635e:	4252      	negs	r2, r2
 8006360:	6062      	str	r2, [r4, #4]
 8006362:	a904      	add	r1, sp, #16
 8006364:	3254      	adds	r2, #84	; 0x54
 8006366:	1852      	adds	r2, r2, r1
 8006368:	1c6e      	adds	r6, r5, #1
 800636a:	6023      	str	r3, [r4, #0]
 800636c:	60e3      	str	r3, [r4, #12]
 800636e:	60a3      	str	r3, [r4, #8]
 8006370:	7013      	strb	r3, [r2, #0]
 8006372:	65a3      	str	r3, [r4, #88]	; 0x58
 8006374:	4b55      	ldr	r3, [pc, #340]	; (80064cc <_svfiprintf_r+0x1ec>)
 8006376:	2205      	movs	r2, #5
 8006378:	0018      	movs	r0, r3
 800637a:	7831      	ldrb	r1, [r6, #0]
 800637c:	9305      	str	r3, [sp, #20]
 800637e:	f000 fcf2 	bl	8006d66 <memchr>
 8006382:	1c75      	adds	r5, r6, #1
 8006384:	2800      	cmp	r0, #0
 8006386:	d11f      	bne.n	80063c8 <_svfiprintf_r+0xe8>
 8006388:	6822      	ldr	r2, [r4, #0]
 800638a:	06d3      	lsls	r3, r2, #27
 800638c:	d504      	bpl.n	8006398 <_svfiprintf_r+0xb8>
 800638e:	2353      	movs	r3, #83	; 0x53
 8006390:	a904      	add	r1, sp, #16
 8006392:	185b      	adds	r3, r3, r1
 8006394:	2120      	movs	r1, #32
 8006396:	7019      	strb	r1, [r3, #0]
 8006398:	0713      	lsls	r3, r2, #28
 800639a:	d504      	bpl.n	80063a6 <_svfiprintf_r+0xc6>
 800639c:	2353      	movs	r3, #83	; 0x53
 800639e:	a904      	add	r1, sp, #16
 80063a0:	185b      	adds	r3, r3, r1
 80063a2:	212b      	movs	r1, #43	; 0x2b
 80063a4:	7019      	strb	r1, [r3, #0]
 80063a6:	7833      	ldrb	r3, [r6, #0]
 80063a8:	2b2a      	cmp	r3, #42	; 0x2a
 80063aa:	d016      	beq.n	80063da <_svfiprintf_r+0xfa>
 80063ac:	0035      	movs	r5, r6
 80063ae:	2100      	movs	r1, #0
 80063b0:	200a      	movs	r0, #10
 80063b2:	68e3      	ldr	r3, [r4, #12]
 80063b4:	782a      	ldrb	r2, [r5, #0]
 80063b6:	1c6e      	adds	r6, r5, #1
 80063b8:	3a30      	subs	r2, #48	; 0x30
 80063ba:	2a09      	cmp	r2, #9
 80063bc:	d94e      	bls.n	800645c <_svfiprintf_r+0x17c>
 80063be:	2900      	cmp	r1, #0
 80063c0:	d111      	bne.n	80063e6 <_svfiprintf_r+0x106>
 80063c2:	e017      	b.n	80063f4 <_svfiprintf_r+0x114>
 80063c4:	3501      	adds	r5, #1
 80063c6:	e7af      	b.n	8006328 <_svfiprintf_r+0x48>
 80063c8:	9b05      	ldr	r3, [sp, #20]
 80063ca:	6822      	ldr	r2, [r4, #0]
 80063cc:	1ac0      	subs	r0, r0, r3
 80063ce:	2301      	movs	r3, #1
 80063d0:	4083      	lsls	r3, r0
 80063d2:	4313      	orrs	r3, r2
 80063d4:	002e      	movs	r6, r5
 80063d6:	6023      	str	r3, [r4, #0]
 80063d8:	e7cc      	b.n	8006374 <_svfiprintf_r+0x94>
 80063da:	9b07      	ldr	r3, [sp, #28]
 80063dc:	1d19      	adds	r1, r3, #4
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	9107      	str	r1, [sp, #28]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	db01      	blt.n	80063ea <_svfiprintf_r+0x10a>
 80063e6:	930b      	str	r3, [sp, #44]	; 0x2c
 80063e8:	e004      	b.n	80063f4 <_svfiprintf_r+0x114>
 80063ea:	425b      	negs	r3, r3
 80063ec:	60e3      	str	r3, [r4, #12]
 80063ee:	2302      	movs	r3, #2
 80063f0:	4313      	orrs	r3, r2
 80063f2:	6023      	str	r3, [r4, #0]
 80063f4:	782b      	ldrb	r3, [r5, #0]
 80063f6:	2b2e      	cmp	r3, #46	; 0x2e
 80063f8:	d10a      	bne.n	8006410 <_svfiprintf_r+0x130>
 80063fa:	786b      	ldrb	r3, [r5, #1]
 80063fc:	2b2a      	cmp	r3, #42	; 0x2a
 80063fe:	d135      	bne.n	800646c <_svfiprintf_r+0x18c>
 8006400:	9b07      	ldr	r3, [sp, #28]
 8006402:	3502      	adds	r5, #2
 8006404:	1d1a      	adds	r2, r3, #4
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	9207      	str	r2, [sp, #28]
 800640a:	2b00      	cmp	r3, #0
 800640c:	db2b      	blt.n	8006466 <_svfiprintf_r+0x186>
 800640e:	9309      	str	r3, [sp, #36]	; 0x24
 8006410:	4e2f      	ldr	r6, [pc, #188]	; (80064d0 <_svfiprintf_r+0x1f0>)
 8006412:	2203      	movs	r2, #3
 8006414:	0030      	movs	r0, r6
 8006416:	7829      	ldrb	r1, [r5, #0]
 8006418:	f000 fca5 	bl	8006d66 <memchr>
 800641c:	2800      	cmp	r0, #0
 800641e:	d006      	beq.n	800642e <_svfiprintf_r+0x14e>
 8006420:	2340      	movs	r3, #64	; 0x40
 8006422:	1b80      	subs	r0, r0, r6
 8006424:	4083      	lsls	r3, r0
 8006426:	6822      	ldr	r2, [r4, #0]
 8006428:	3501      	adds	r5, #1
 800642a:	4313      	orrs	r3, r2
 800642c:	6023      	str	r3, [r4, #0]
 800642e:	7829      	ldrb	r1, [r5, #0]
 8006430:	2206      	movs	r2, #6
 8006432:	4828      	ldr	r0, [pc, #160]	; (80064d4 <_svfiprintf_r+0x1f4>)
 8006434:	1c6e      	adds	r6, r5, #1
 8006436:	7621      	strb	r1, [r4, #24]
 8006438:	f000 fc95 	bl	8006d66 <memchr>
 800643c:	2800      	cmp	r0, #0
 800643e:	d03c      	beq.n	80064ba <_svfiprintf_r+0x1da>
 8006440:	4b25      	ldr	r3, [pc, #148]	; (80064d8 <_svfiprintf_r+0x1f8>)
 8006442:	2b00      	cmp	r3, #0
 8006444:	d125      	bne.n	8006492 <_svfiprintf_r+0x1b2>
 8006446:	2207      	movs	r2, #7
 8006448:	9b07      	ldr	r3, [sp, #28]
 800644a:	3307      	adds	r3, #7
 800644c:	4393      	bics	r3, r2
 800644e:	3308      	adds	r3, #8
 8006450:	9307      	str	r3, [sp, #28]
 8006452:	6963      	ldr	r3, [r4, #20]
 8006454:	9a04      	ldr	r2, [sp, #16]
 8006456:	189b      	adds	r3, r3, r2
 8006458:	6163      	str	r3, [r4, #20]
 800645a:	e764      	b.n	8006326 <_svfiprintf_r+0x46>
 800645c:	4343      	muls	r3, r0
 800645e:	0035      	movs	r5, r6
 8006460:	2101      	movs	r1, #1
 8006462:	189b      	adds	r3, r3, r2
 8006464:	e7a6      	b.n	80063b4 <_svfiprintf_r+0xd4>
 8006466:	2301      	movs	r3, #1
 8006468:	425b      	negs	r3, r3
 800646a:	e7d0      	b.n	800640e <_svfiprintf_r+0x12e>
 800646c:	2300      	movs	r3, #0
 800646e:	200a      	movs	r0, #10
 8006470:	001a      	movs	r2, r3
 8006472:	3501      	adds	r5, #1
 8006474:	6063      	str	r3, [r4, #4]
 8006476:	7829      	ldrb	r1, [r5, #0]
 8006478:	1c6e      	adds	r6, r5, #1
 800647a:	3930      	subs	r1, #48	; 0x30
 800647c:	2909      	cmp	r1, #9
 800647e:	d903      	bls.n	8006488 <_svfiprintf_r+0x1a8>
 8006480:	2b00      	cmp	r3, #0
 8006482:	d0c5      	beq.n	8006410 <_svfiprintf_r+0x130>
 8006484:	9209      	str	r2, [sp, #36]	; 0x24
 8006486:	e7c3      	b.n	8006410 <_svfiprintf_r+0x130>
 8006488:	4342      	muls	r2, r0
 800648a:	0035      	movs	r5, r6
 800648c:	2301      	movs	r3, #1
 800648e:	1852      	adds	r2, r2, r1
 8006490:	e7f1      	b.n	8006476 <_svfiprintf_r+0x196>
 8006492:	aa07      	add	r2, sp, #28
 8006494:	9200      	str	r2, [sp, #0]
 8006496:	0021      	movs	r1, r4
 8006498:	003a      	movs	r2, r7
 800649a:	4b10      	ldr	r3, [pc, #64]	; (80064dc <_svfiprintf_r+0x1fc>)
 800649c:	9803      	ldr	r0, [sp, #12]
 800649e:	e000      	b.n	80064a2 <_svfiprintf_r+0x1c2>
 80064a0:	bf00      	nop
 80064a2:	9004      	str	r0, [sp, #16]
 80064a4:	9b04      	ldr	r3, [sp, #16]
 80064a6:	3301      	adds	r3, #1
 80064a8:	d1d3      	bne.n	8006452 <_svfiprintf_r+0x172>
 80064aa:	89bb      	ldrh	r3, [r7, #12]
 80064ac:	980d      	ldr	r0, [sp, #52]	; 0x34
 80064ae:	065b      	lsls	r3, r3, #25
 80064b0:	d400      	bmi.n	80064b4 <_svfiprintf_r+0x1d4>
 80064b2:	e72c      	b.n	800630e <_svfiprintf_r+0x2e>
 80064b4:	2001      	movs	r0, #1
 80064b6:	4240      	negs	r0, r0
 80064b8:	e729      	b.n	800630e <_svfiprintf_r+0x2e>
 80064ba:	aa07      	add	r2, sp, #28
 80064bc:	9200      	str	r2, [sp, #0]
 80064be:	0021      	movs	r1, r4
 80064c0:	003a      	movs	r2, r7
 80064c2:	4b06      	ldr	r3, [pc, #24]	; (80064dc <_svfiprintf_r+0x1fc>)
 80064c4:	9803      	ldr	r0, [sp, #12]
 80064c6:	f000 f9bf 	bl	8006848 <_printf_i>
 80064ca:	e7ea      	b.n	80064a2 <_svfiprintf_r+0x1c2>
 80064cc:	080072ce 	.word	0x080072ce
 80064d0:	080072d4 	.word	0x080072d4
 80064d4:	080072d8 	.word	0x080072d8
 80064d8:	00000000 	.word	0x00000000
 80064dc:	0800621d 	.word	0x0800621d

080064e0 <__sfputc_r>:
 80064e0:	6893      	ldr	r3, [r2, #8]
 80064e2:	b510      	push	{r4, lr}
 80064e4:	3b01      	subs	r3, #1
 80064e6:	6093      	str	r3, [r2, #8]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	da04      	bge.n	80064f6 <__sfputc_r+0x16>
 80064ec:	6994      	ldr	r4, [r2, #24]
 80064ee:	42a3      	cmp	r3, r4
 80064f0:	db07      	blt.n	8006502 <__sfputc_r+0x22>
 80064f2:	290a      	cmp	r1, #10
 80064f4:	d005      	beq.n	8006502 <__sfputc_r+0x22>
 80064f6:	6813      	ldr	r3, [r2, #0]
 80064f8:	1c58      	adds	r0, r3, #1
 80064fa:	6010      	str	r0, [r2, #0]
 80064fc:	7019      	strb	r1, [r3, #0]
 80064fe:	0008      	movs	r0, r1
 8006500:	bd10      	pop	{r4, pc}
 8006502:	f000 fb77 	bl	8006bf4 <__swbuf_r>
 8006506:	0001      	movs	r1, r0
 8006508:	e7f9      	b.n	80064fe <__sfputc_r+0x1e>

0800650a <__sfputs_r>:
 800650a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800650c:	0006      	movs	r6, r0
 800650e:	000f      	movs	r7, r1
 8006510:	0014      	movs	r4, r2
 8006512:	18d5      	adds	r5, r2, r3
 8006514:	42ac      	cmp	r4, r5
 8006516:	d101      	bne.n	800651c <__sfputs_r+0x12>
 8006518:	2000      	movs	r0, #0
 800651a:	e007      	b.n	800652c <__sfputs_r+0x22>
 800651c:	7821      	ldrb	r1, [r4, #0]
 800651e:	003a      	movs	r2, r7
 8006520:	0030      	movs	r0, r6
 8006522:	f7ff ffdd 	bl	80064e0 <__sfputc_r>
 8006526:	3401      	adds	r4, #1
 8006528:	1c43      	adds	r3, r0, #1
 800652a:	d1f3      	bne.n	8006514 <__sfputs_r+0xa>
 800652c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006530 <_vfiprintf_r>:
 8006530:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006532:	b0a1      	sub	sp, #132	; 0x84
 8006534:	000f      	movs	r7, r1
 8006536:	0015      	movs	r5, r2
 8006538:	001e      	movs	r6, r3
 800653a:	9003      	str	r0, [sp, #12]
 800653c:	2800      	cmp	r0, #0
 800653e:	d004      	beq.n	800654a <_vfiprintf_r+0x1a>
 8006540:	6a03      	ldr	r3, [r0, #32]
 8006542:	2b00      	cmp	r3, #0
 8006544:	d101      	bne.n	800654a <_vfiprintf_r+0x1a>
 8006546:	f7ff fc07 	bl	8005d58 <__sinit>
 800654a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800654c:	07db      	lsls	r3, r3, #31
 800654e:	d405      	bmi.n	800655c <_vfiprintf_r+0x2c>
 8006550:	89bb      	ldrh	r3, [r7, #12]
 8006552:	059b      	lsls	r3, r3, #22
 8006554:	d402      	bmi.n	800655c <_vfiprintf_r+0x2c>
 8006556:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8006558:	f7ff fdec 	bl	8006134 <__retarget_lock_acquire_recursive>
 800655c:	89bb      	ldrh	r3, [r7, #12]
 800655e:	071b      	lsls	r3, r3, #28
 8006560:	d502      	bpl.n	8006568 <_vfiprintf_r+0x38>
 8006562:	693b      	ldr	r3, [r7, #16]
 8006564:	2b00      	cmp	r3, #0
 8006566:	d113      	bne.n	8006590 <_vfiprintf_r+0x60>
 8006568:	0039      	movs	r1, r7
 800656a:	9803      	ldr	r0, [sp, #12]
 800656c:	f000 fb84 	bl	8006c78 <__swsetup_r>
 8006570:	2800      	cmp	r0, #0
 8006572:	d00d      	beq.n	8006590 <_vfiprintf_r+0x60>
 8006574:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006576:	07db      	lsls	r3, r3, #31
 8006578:	d503      	bpl.n	8006582 <_vfiprintf_r+0x52>
 800657a:	2001      	movs	r0, #1
 800657c:	4240      	negs	r0, r0
 800657e:	b021      	add	sp, #132	; 0x84
 8006580:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006582:	89bb      	ldrh	r3, [r7, #12]
 8006584:	059b      	lsls	r3, r3, #22
 8006586:	d4f8      	bmi.n	800657a <_vfiprintf_r+0x4a>
 8006588:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800658a:	f7ff fdd4 	bl	8006136 <__retarget_lock_release_recursive>
 800658e:	e7f4      	b.n	800657a <_vfiprintf_r+0x4a>
 8006590:	2300      	movs	r3, #0
 8006592:	ac08      	add	r4, sp, #32
 8006594:	6163      	str	r3, [r4, #20]
 8006596:	3320      	adds	r3, #32
 8006598:	7663      	strb	r3, [r4, #25]
 800659a:	3310      	adds	r3, #16
 800659c:	76a3      	strb	r3, [r4, #26]
 800659e:	9607      	str	r6, [sp, #28]
 80065a0:	002e      	movs	r6, r5
 80065a2:	7833      	ldrb	r3, [r6, #0]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d001      	beq.n	80065ac <_vfiprintf_r+0x7c>
 80065a8:	2b25      	cmp	r3, #37	; 0x25
 80065aa:	d148      	bne.n	800663e <_vfiprintf_r+0x10e>
 80065ac:	1b73      	subs	r3, r6, r5
 80065ae:	9305      	str	r3, [sp, #20]
 80065b0:	42ae      	cmp	r6, r5
 80065b2:	d00b      	beq.n	80065cc <_vfiprintf_r+0x9c>
 80065b4:	002a      	movs	r2, r5
 80065b6:	0039      	movs	r1, r7
 80065b8:	9803      	ldr	r0, [sp, #12]
 80065ba:	f7ff ffa6 	bl	800650a <__sfputs_r>
 80065be:	3001      	adds	r0, #1
 80065c0:	d100      	bne.n	80065c4 <_vfiprintf_r+0x94>
 80065c2:	e0af      	b.n	8006724 <_vfiprintf_r+0x1f4>
 80065c4:	6963      	ldr	r3, [r4, #20]
 80065c6:	9a05      	ldr	r2, [sp, #20]
 80065c8:	189b      	adds	r3, r3, r2
 80065ca:	6163      	str	r3, [r4, #20]
 80065cc:	7833      	ldrb	r3, [r6, #0]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d100      	bne.n	80065d4 <_vfiprintf_r+0xa4>
 80065d2:	e0a7      	b.n	8006724 <_vfiprintf_r+0x1f4>
 80065d4:	2201      	movs	r2, #1
 80065d6:	2300      	movs	r3, #0
 80065d8:	4252      	negs	r2, r2
 80065da:	6062      	str	r2, [r4, #4]
 80065dc:	a904      	add	r1, sp, #16
 80065de:	3254      	adds	r2, #84	; 0x54
 80065e0:	1852      	adds	r2, r2, r1
 80065e2:	1c75      	adds	r5, r6, #1
 80065e4:	6023      	str	r3, [r4, #0]
 80065e6:	60e3      	str	r3, [r4, #12]
 80065e8:	60a3      	str	r3, [r4, #8]
 80065ea:	7013      	strb	r3, [r2, #0]
 80065ec:	65a3      	str	r3, [r4, #88]	; 0x58
 80065ee:	4b59      	ldr	r3, [pc, #356]	; (8006754 <_vfiprintf_r+0x224>)
 80065f0:	2205      	movs	r2, #5
 80065f2:	0018      	movs	r0, r3
 80065f4:	7829      	ldrb	r1, [r5, #0]
 80065f6:	9305      	str	r3, [sp, #20]
 80065f8:	f000 fbb5 	bl	8006d66 <memchr>
 80065fc:	1c6e      	adds	r6, r5, #1
 80065fe:	2800      	cmp	r0, #0
 8006600:	d11f      	bne.n	8006642 <_vfiprintf_r+0x112>
 8006602:	6822      	ldr	r2, [r4, #0]
 8006604:	06d3      	lsls	r3, r2, #27
 8006606:	d504      	bpl.n	8006612 <_vfiprintf_r+0xe2>
 8006608:	2353      	movs	r3, #83	; 0x53
 800660a:	a904      	add	r1, sp, #16
 800660c:	185b      	adds	r3, r3, r1
 800660e:	2120      	movs	r1, #32
 8006610:	7019      	strb	r1, [r3, #0]
 8006612:	0713      	lsls	r3, r2, #28
 8006614:	d504      	bpl.n	8006620 <_vfiprintf_r+0xf0>
 8006616:	2353      	movs	r3, #83	; 0x53
 8006618:	a904      	add	r1, sp, #16
 800661a:	185b      	adds	r3, r3, r1
 800661c:	212b      	movs	r1, #43	; 0x2b
 800661e:	7019      	strb	r1, [r3, #0]
 8006620:	782b      	ldrb	r3, [r5, #0]
 8006622:	2b2a      	cmp	r3, #42	; 0x2a
 8006624:	d016      	beq.n	8006654 <_vfiprintf_r+0x124>
 8006626:	002e      	movs	r6, r5
 8006628:	2100      	movs	r1, #0
 800662a:	200a      	movs	r0, #10
 800662c:	68e3      	ldr	r3, [r4, #12]
 800662e:	7832      	ldrb	r2, [r6, #0]
 8006630:	1c75      	adds	r5, r6, #1
 8006632:	3a30      	subs	r2, #48	; 0x30
 8006634:	2a09      	cmp	r2, #9
 8006636:	d94e      	bls.n	80066d6 <_vfiprintf_r+0x1a6>
 8006638:	2900      	cmp	r1, #0
 800663a:	d111      	bne.n	8006660 <_vfiprintf_r+0x130>
 800663c:	e017      	b.n	800666e <_vfiprintf_r+0x13e>
 800663e:	3601      	adds	r6, #1
 8006640:	e7af      	b.n	80065a2 <_vfiprintf_r+0x72>
 8006642:	9b05      	ldr	r3, [sp, #20]
 8006644:	6822      	ldr	r2, [r4, #0]
 8006646:	1ac0      	subs	r0, r0, r3
 8006648:	2301      	movs	r3, #1
 800664a:	4083      	lsls	r3, r0
 800664c:	4313      	orrs	r3, r2
 800664e:	0035      	movs	r5, r6
 8006650:	6023      	str	r3, [r4, #0]
 8006652:	e7cc      	b.n	80065ee <_vfiprintf_r+0xbe>
 8006654:	9b07      	ldr	r3, [sp, #28]
 8006656:	1d19      	adds	r1, r3, #4
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	9107      	str	r1, [sp, #28]
 800665c:	2b00      	cmp	r3, #0
 800665e:	db01      	blt.n	8006664 <_vfiprintf_r+0x134>
 8006660:	930b      	str	r3, [sp, #44]	; 0x2c
 8006662:	e004      	b.n	800666e <_vfiprintf_r+0x13e>
 8006664:	425b      	negs	r3, r3
 8006666:	60e3      	str	r3, [r4, #12]
 8006668:	2302      	movs	r3, #2
 800666a:	4313      	orrs	r3, r2
 800666c:	6023      	str	r3, [r4, #0]
 800666e:	7833      	ldrb	r3, [r6, #0]
 8006670:	2b2e      	cmp	r3, #46	; 0x2e
 8006672:	d10a      	bne.n	800668a <_vfiprintf_r+0x15a>
 8006674:	7873      	ldrb	r3, [r6, #1]
 8006676:	2b2a      	cmp	r3, #42	; 0x2a
 8006678:	d135      	bne.n	80066e6 <_vfiprintf_r+0x1b6>
 800667a:	9b07      	ldr	r3, [sp, #28]
 800667c:	3602      	adds	r6, #2
 800667e:	1d1a      	adds	r2, r3, #4
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	9207      	str	r2, [sp, #28]
 8006684:	2b00      	cmp	r3, #0
 8006686:	db2b      	blt.n	80066e0 <_vfiprintf_r+0x1b0>
 8006688:	9309      	str	r3, [sp, #36]	; 0x24
 800668a:	4d33      	ldr	r5, [pc, #204]	; (8006758 <_vfiprintf_r+0x228>)
 800668c:	2203      	movs	r2, #3
 800668e:	0028      	movs	r0, r5
 8006690:	7831      	ldrb	r1, [r6, #0]
 8006692:	f000 fb68 	bl	8006d66 <memchr>
 8006696:	2800      	cmp	r0, #0
 8006698:	d006      	beq.n	80066a8 <_vfiprintf_r+0x178>
 800669a:	2340      	movs	r3, #64	; 0x40
 800669c:	1b40      	subs	r0, r0, r5
 800669e:	4083      	lsls	r3, r0
 80066a0:	6822      	ldr	r2, [r4, #0]
 80066a2:	3601      	adds	r6, #1
 80066a4:	4313      	orrs	r3, r2
 80066a6:	6023      	str	r3, [r4, #0]
 80066a8:	7831      	ldrb	r1, [r6, #0]
 80066aa:	2206      	movs	r2, #6
 80066ac:	482b      	ldr	r0, [pc, #172]	; (800675c <_vfiprintf_r+0x22c>)
 80066ae:	1c75      	adds	r5, r6, #1
 80066b0:	7621      	strb	r1, [r4, #24]
 80066b2:	f000 fb58 	bl	8006d66 <memchr>
 80066b6:	2800      	cmp	r0, #0
 80066b8:	d043      	beq.n	8006742 <_vfiprintf_r+0x212>
 80066ba:	4b29      	ldr	r3, [pc, #164]	; (8006760 <_vfiprintf_r+0x230>)
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d125      	bne.n	800670c <_vfiprintf_r+0x1dc>
 80066c0:	2207      	movs	r2, #7
 80066c2:	9b07      	ldr	r3, [sp, #28]
 80066c4:	3307      	adds	r3, #7
 80066c6:	4393      	bics	r3, r2
 80066c8:	3308      	adds	r3, #8
 80066ca:	9307      	str	r3, [sp, #28]
 80066cc:	6963      	ldr	r3, [r4, #20]
 80066ce:	9a04      	ldr	r2, [sp, #16]
 80066d0:	189b      	adds	r3, r3, r2
 80066d2:	6163      	str	r3, [r4, #20]
 80066d4:	e764      	b.n	80065a0 <_vfiprintf_r+0x70>
 80066d6:	4343      	muls	r3, r0
 80066d8:	002e      	movs	r6, r5
 80066da:	2101      	movs	r1, #1
 80066dc:	189b      	adds	r3, r3, r2
 80066de:	e7a6      	b.n	800662e <_vfiprintf_r+0xfe>
 80066e0:	2301      	movs	r3, #1
 80066e2:	425b      	negs	r3, r3
 80066e4:	e7d0      	b.n	8006688 <_vfiprintf_r+0x158>
 80066e6:	2300      	movs	r3, #0
 80066e8:	200a      	movs	r0, #10
 80066ea:	001a      	movs	r2, r3
 80066ec:	3601      	adds	r6, #1
 80066ee:	6063      	str	r3, [r4, #4]
 80066f0:	7831      	ldrb	r1, [r6, #0]
 80066f2:	1c75      	adds	r5, r6, #1
 80066f4:	3930      	subs	r1, #48	; 0x30
 80066f6:	2909      	cmp	r1, #9
 80066f8:	d903      	bls.n	8006702 <_vfiprintf_r+0x1d2>
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d0c5      	beq.n	800668a <_vfiprintf_r+0x15a>
 80066fe:	9209      	str	r2, [sp, #36]	; 0x24
 8006700:	e7c3      	b.n	800668a <_vfiprintf_r+0x15a>
 8006702:	4342      	muls	r2, r0
 8006704:	002e      	movs	r6, r5
 8006706:	2301      	movs	r3, #1
 8006708:	1852      	adds	r2, r2, r1
 800670a:	e7f1      	b.n	80066f0 <_vfiprintf_r+0x1c0>
 800670c:	aa07      	add	r2, sp, #28
 800670e:	9200      	str	r2, [sp, #0]
 8006710:	0021      	movs	r1, r4
 8006712:	003a      	movs	r2, r7
 8006714:	4b13      	ldr	r3, [pc, #76]	; (8006764 <_vfiprintf_r+0x234>)
 8006716:	9803      	ldr	r0, [sp, #12]
 8006718:	e000      	b.n	800671c <_vfiprintf_r+0x1ec>
 800671a:	bf00      	nop
 800671c:	9004      	str	r0, [sp, #16]
 800671e:	9b04      	ldr	r3, [sp, #16]
 8006720:	3301      	adds	r3, #1
 8006722:	d1d3      	bne.n	80066cc <_vfiprintf_r+0x19c>
 8006724:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006726:	07db      	lsls	r3, r3, #31
 8006728:	d405      	bmi.n	8006736 <_vfiprintf_r+0x206>
 800672a:	89bb      	ldrh	r3, [r7, #12]
 800672c:	059b      	lsls	r3, r3, #22
 800672e:	d402      	bmi.n	8006736 <_vfiprintf_r+0x206>
 8006730:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8006732:	f7ff fd00 	bl	8006136 <__retarget_lock_release_recursive>
 8006736:	89bb      	ldrh	r3, [r7, #12]
 8006738:	065b      	lsls	r3, r3, #25
 800673a:	d500      	bpl.n	800673e <_vfiprintf_r+0x20e>
 800673c:	e71d      	b.n	800657a <_vfiprintf_r+0x4a>
 800673e:	980d      	ldr	r0, [sp, #52]	; 0x34
 8006740:	e71d      	b.n	800657e <_vfiprintf_r+0x4e>
 8006742:	aa07      	add	r2, sp, #28
 8006744:	9200      	str	r2, [sp, #0]
 8006746:	0021      	movs	r1, r4
 8006748:	003a      	movs	r2, r7
 800674a:	4b06      	ldr	r3, [pc, #24]	; (8006764 <_vfiprintf_r+0x234>)
 800674c:	9803      	ldr	r0, [sp, #12]
 800674e:	f000 f87b 	bl	8006848 <_printf_i>
 8006752:	e7e3      	b.n	800671c <_vfiprintf_r+0x1ec>
 8006754:	080072ce 	.word	0x080072ce
 8006758:	080072d4 	.word	0x080072d4
 800675c:	080072d8 	.word	0x080072d8
 8006760:	00000000 	.word	0x00000000
 8006764:	0800650b 	.word	0x0800650b

08006768 <_printf_common>:
 8006768:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800676a:	0016      	movs	r6, r2
 800676c:	9301      	str	r3, [sp, #4]
 800676e:	688a      	ldr	r2, [r1, #8]
 8006770:	690b      	ldr	r3, [r1, #16]
 8006772:	000c      	movs	r4, r1
 8006774:	9000      	str	r0, [sp, #0]
 8006776:	4293      	cmp	r3, r2
 8006778:	da00      	bge.n	800677c <_printf_common+0x14>
 800677a:	0013      	movs	r3, r2
 800677c:	0022      	movs	r2, r4
 800677e:	6033      	str	r3, [r6, #0]
 8006780:	3243      	adds	r2, #67	; 0x43
 8006782:	7812      	ldrb	r2, [r2, #0]
 8006784:	2a00      	cmp	r2, #0
 8006786:	d001      	beq.n	800678c <_printf_common+0x24>
 8006788:	3301      	adds	r3, #1
 800678a:	6033      	str	r3, [r6, #0]
 800678c:	6823      	ldr	r3, [r4, #0]
 800678e:	069b      	lsls	r3, r3, #26
 8006790:	d502      	bpl.n	8006798 <_printf_common+0x30>
 8006792:	6833      	ldr	r3, [r6, #0]
 8006794:	3302      	adds	r3, #2
 8006796:	6033      	str	r3, [r6, #0]
 8006798:	6822      	ldr	r2, [r4, #0]
 800679a:	2306      	movs	r3, #6
 800679c:	0015      	movs	r5, r2
 800679e:	401d      	ands	r5, r3
 80067a0:	421a      	tst	r2, r3
 80067a2:	d027      	beq.n	80067f4 <_printf_common+0x8c>
 80067a4:	0023      	movs	r3, r4
 80067a6:	3343      	adds	r3, #67	; 0x43
 80067a8:	781b      	ldrb	r3, [r3, #0]
 80067aa:	1e5a      	subs	r2, r3, #1
 80067ac:	4193      	sbcs	r3, r2
 80067ae:	6822      	ldr	r2, [r4, #0]
 80067b0:	0692      	lsls	r2, r2, #26
 80067b2:	d430      	bmi.n	8006816 <_printf_common+0xae>
 80067b4:	0022      	movs	r2, r4
 80067b6:	9901      	ldr	r1, [sp, #4]
 80067b8:	9800      	ldr	r0, [sp, #0]
 80067ba:	9d08      	ldr	r5, [sp, #32]
 80067bc:	3243      	adds	r2, #67	; 0x43
 80067be:	47a8      	blx	r5
 80067c0:	3001      	adds	r0, #1
 80067c2:	d025      	beq.n	8006810 <_printf_common+0xa8>
 80067c4:	2206      	movs	r2, #6
 80067c6:	6823      	ldr	r3, [r4, #0]
 80067c8:	2500      	movs	r5, #0
 80067ca:	4013      	ands	r3, r2
 80067cc:	2b04      	cmp	r3, #4
 80067ce:	d105      	bne.n	80067dc <_printf_common+0x74>
 80067d0:	6833      	ldr	r3, [r6, #0]
 80067d2:	68e5      	ldr	r5, [r4, #12]
 80067d4:	1aed      	subs	r5, r5, r3
 80067d6:	43eb      	mvns	r3, r5
 80067d8:	17db      	asrs	r3, r3, #31
 80067da:	401d      	ands	r5, r3
 80067dc:	68a3      	ldr	r3, [r4, #8]
 80067de:	6922      	ldr	r2, [r4, #16]
 80067e0:	4293      	cmp	r3, r2
 80067e2:	dd01      	ble.n	80067e8 <_printf_common+0x80>
 80067e4:	1a9b      	subs	r3, r3, r2
 80067e6:	18ed      	adds	r5, r5, r3
 80067e8:	2600      	movs	r6, #0
 80067ea:	42b5      	cmp	r5, r6
 80067ec:	d120      	bne.n	8006830 <_printf_common+0xc8>
 80067ee:	2000      	movs	r0, #0
 80067f0:	e010      	b.n	8006814 <_printf_common+0xac>
 80067f2:	3501      	adds	r5, #1
 80067f4:	68e3      	ldr	r3, [r4, #12]
 80067f6:	6832      	ldr	r2, [r6, #0]
 80067f8:	1a9b      	subs	r3, r3, r2
 80067fa:	42ab      	cmp	r3, r5
 80067fc:	ddd2      	ble.n	80067a4 <_printf_common+0x3c>
 80067fe:	0022      	movs	r2, r4
 8006800:	2301      	movs	r3, #1
 8006802:	9901      	ldr	r1, [sp, #4]
 8006804:	9800      	ldr	r0, [sp, #0]
 8006806:	9f08      	ldr	r7, [sp, #32]
 8006808:	3219      	adds	r2, #25
 800680a:	47b8      	blx	r7
 800680c:	3001      	adds	r0, #1
 800680e:	d1f0      	bne.n	80067f2 <_printf_common+0x8a>
 8006810:	2001      	movs	r0, #1
 8006812:	4240      	negs	r0, r0
 8006814:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006816:	2030      	movs	r0, #48	; 0x30
 8006818:	18e1      	adds	r1, r4, r3
 800681a:	3143      	adds	r1, #67	; 0x43
 800681c:	7008      	strb	r0, [r1, #0]
 800681e:	0021      	movs	r1, r4
 8006820:	1c5a      	adds	r2, r3, #1
 8006822:	3145      	adds	r1, #69	; 0x45
 8006824:	7809      	ldrb	r1, [r1, #0]
 8006826:	18a2      	adds	r2, r4, r2
 8006828:	3243      	adds	r2, #67	; 0x43
 800682a:	3302      	adds	r3, #2
 800682c:	7011      	strb	r1, [r2, #0]
 800682e:	e7c1      	b.n	80067b4 <_printf_common+0x4c>
 8006830:	0022      	movs	r2, r4
 8006832:	2301      	movs	r3, #1
 8006834:	9901      	ldr	r1, [sp, #4]
 8006836:	9800      	ldr	r0, [sp, #0]
 8006838:	9f08      	ldr	r7, [sp, #32]
 800683a:	321a      	adds	r2, #26
 800683c:	47b8      	blx	r7
 800683e:	3001      	adds	r0, #1
 8006840:	d0e6      	beq.n	8006810 <_printf_common+0xa8>
 8006842:	3601      	adds	r6, #1
 8006844:	e7d1      	b.n	80067ea <_printf_common+0x82>
	...

08006848 <_printf_i>:
 8006848:	b5f0      	push	{r4, r5, r6, r7, lr}
 800684a:	b08b      	sub	sp, #44	; 0x2c
 800684c:	9206      	str	r2, [sp, #24]
 800684e:	000a      	movs	r2, r1
 8006850:	3243      	adds	r2, #67	; 0x43
 8006852:	9307      	str	r3, [sp, #28]
 8006854:	9005      	str	r0, [sp, #20]
 8006856:	9204      	str	r2, [sp, #16]
 8006858:	7e0a      	ldrb	r2, [r1, #24]
 800685a:	000c      	movs	r4, r1
 800685c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800685e:	2a78      	cmp	r2, #120	; 0x78
 8006860:	d809      	bhi.n	8006876 <_printf_i+0x2e>
 8006862:	2a62      	cmp	r2, #98	; 0x62
 8006864:	d80b      	bhi.n	800687e <_printf_i+0x36>
 8006866:	2a00      	cmp	r2, #0
 8006868:	d100      	bne.n	800686c <_printf_i+0x24>
 800686a:	e0be      	b.n	80069ea <_printf_i+0x1a2>
 800686c:	497c      	ldr	r1, [pc, #496]	; (8006a60 <_printf_i+0x218>)
 800686e:	9103      	str	r1, [sp, #12]
 8006870:	2a58      	cmp	r2, #88	; 0x58
 8006872:	d100      	bne.n	8006876 <_printf_i+0x2e>
 8006874:	e093      	b.n	800699e <_printf_i+0x156>
 8006876:	0026      	movs	r6, r4
 8006878:	3642      	adds	r6, #66	; 0x42
 800687a:	7032      	strb	r2, [r6, #0]
 800687c:	e022      	b.n	80068c4 <_printf_i+0x7c>
 800687e:	0010      	movs	r0, r2
 8006880:	3863      	subs	r0, #99	; 0x63
 8006882:	2815      	cmp	r0, #21
 8006884:	d8f7      	bhi.n	8006876 <_printf_i+0x2e>
 8006886:	f7f9 fc51 	bl	800012c <__gnu_thumb1_case_shi>
 800688a:	0016      	.short	0x0016
 800688c:	fff6001f 	.word	0xfff6001f
 8006890:	fff6fff6 	.word	0xfff6fff6
 8006894:	001ffff6 	.word	0x001ffff6
 8006898:	fff6fff6 	.word	0xfff6fff6
 800689c:	fff6fff6 	.word	0xfff6fff6
 80068a0:	003600a3 	.word	0x003600a3
 80068a4:	fff60083 	.word	0xfff60083
 80068a8:	00b4fff6 	.word	0x00b4fff6
 80068ac:	0036fff6 	.word	0x0036fff6
 80068b0:	fff6fff6 	.word	0xfff6fff6
 80068b4:	0087      	.short	0x0087
 80068b6:	0026      	movs	r6, r4
 80068b8:	681a      	ldr	r2, [r3, #0]
 80068ba:	3642      	adds	r6, #66	; 0x42
 80068bc:	1d11      	adds	r1, r2, #4
 80068be:	6019      	str	r1, [r3, #0]
 80068c0:	6813      	ldr	r3, [r2, #0]
 80068c2:	7033      	strb	r3, [r6, #0]
 80068c4:	2301      	movs	r3, #1
 80068c6:	e0a2      	b.n	8006a0e <_printf_i+0x1c6>
 80068c8:	6818      	ldr	r0, [r3, #0]
 80068ca:	6809      	ldr	r1, [r1, #0]
 80068cc:	1d02      	adds	r2, r0, #4
 80068ce:	060d      	lsls	r5, r1, #24
 80068d0:	d50b      	bpl.n	80068ea <_printf_i+0xa2>
 80068d2:	6805      	ldr	r5, [r0, #0]
 80068d4:	601a      	str	r2, [r3, #0]
 80068d6:	2d00      	cmp	r5, #0
 80068d8:	da03      	bge.n	80068e2 <_printf_i+0x9a>
 80068da:	232d      	movs	r3, #45	; 0x2d
 80068dc:	9a04      	ldr	r2, [sp, #16]
 80068de:	426d      	negs	r5, r5
 80068e0:	7013      	strb	r3, [r2, #0]
 80068e2:	4b5f      	ldr	r3, [pc, #380]	; (8006a60 <_printf_i+0x218>)
 80068e4:	270a      	movs	r7, #10
 80068e6:	9303      	str	r3, [sp, #12]
 80068e8:	e01b      	b.n	8006922 <_printf_i+0xda>
 80068ea:	6805      	ldr	r5, [r0, #0]
 80068ec:	601a      	str	r2, [r3, #0]
 80068ee:	0649      	lsls	r1, r1, #25
 80068f0:	d5f1      	bpl.n	80068d6 <_printf_i+0x8e>
 80068f2:	b22d      	sxth	r5, r5
 80068f4:	e7ef      	b.n	80068d6 <_printf_i+0x8e>
 80068f6:	680d      	ldr	r5, [r1, #0]
 80068f8:	6819      	ldr	r1, [r3, #0]
 80068fa:	1d08      	adds	r0, r1, #4
 80068fc:	6018      	str	r0, [r3, #0]
 80068fe:	062e      	lsls	r6, r5, #24
 8006900:	d501      	bpl.n	8006906 <_printf_i+0xbe>
 8006902:	680d      	ldr	r5, [r1, #0]
 8006904:	e003      	b.n	800690e <_printf_i+0xc6>
 8006906:	066d      	lsls	r5, r5, #25
 8006908:	d5fb      	bpl.n	8006902 <_printf_i+0xba>
 800690a:	680d      	ldr	r5, [r1, #0]
 800690c:	b2ad      	uxth	r5, r5
 800690e:	4b54      	ldr	r3, [pc, #336]	; (8006a60 <_printf_i+0x218>)
 8006910:	2708      	movs	r7, #8
 8006912:	9303      	str	r3, [sp, #12]
 8006914:	2a6f      	cmp	r2, #111	; 0x6f
 8006916:	d000      	beq.n	800691a <_printf_i+0xd2>
 8006918:	3702      	adds	r7, #2
 800691a:	0023      	movs	r3, r4
 800691c:	2200      	movs	r2, #0
 800691e:	3343      	adds	r3, #67	; 0x43
 8006920:	701a      	strb	r2, [r3, #0]
 8006922:	6863      	ldr	r3, [r4, #4]
 8006924:	60a3      	str	r3, [r4, #8]
 8006926:	2b00      	cmp	r3, #0
 8006928:	db03      	blt.n	8006932 <_printf_i+0xea>
 800692a:	2104      	movs	r1, #4
 800692c:	6822      	ldr	r2, [r4, #0]
 800692e:	438a      	bics	r2, r1
 8006930:	6022      	str	r2, [r4, #0]
 8006932:	2d00      	cmp	r5, #0
 8006934:	d102      	bne.n	800693c <_printf_i+0xf4>
 8006936:	9e04      	ldr	r6, [sp, #16]
 8006938:	2b00      	cmp	r3, #0
 800693a:	d00c      	beq.n	8006956 <_printf_i+0x10e>
 800693c:	9e04      	ldr	r6, [sp, #16]
 800693e:	0028      	movs	r0, r5
 8006940:	0039      	movs	r1, r7
 8006942:	f7f9 fc83 	bl	800024c <__aeabi_uidivmod>
 8006946:	9b03      	ldr	r3, [sp, #12]
 8006948:	3e01      	subs	r6, #1
 800694a:	5c5b      	ldrb	r3, [r3, r1]
 800694c:	7033      	strb	r3, [r6, #0]
 800694e:	002b      	movs	r3, r5
 8006950:	0005      	movs	r5, r0
 8006952:	429f      	cmp	r7, r3
 8006954:	d9f3      	bls.n	800693e <_printf_i+0xf6>
 8006956:	2f08      	cmp	r7, #8
 8006958:	d109      	bne.n	800696e <_printf_i+0x126>
 800695a:	6823      	ldr	r3, [r4, #0]
 800695c:	07db      	lsls	r3, r3, #31
 800695e:	d506      	bpl.n	800696e <_printf_i+0x126>
 8006960:	6862      	ldr	r2, [r4, #4]
 8006962:	6923      	ldr	r3, [r4, #16]
 8006964:	429a      	cmp	r2, r3
 8006966:	dc02      	bgt.n	800696e <_printf_i+0x126>
 8006968:	2330      	movs	r3, #48	; 0x30
 800696a:	3e01      	subs	r6, #1
 800696c:	7033      	strb	r3, [r6, #0]
 800696e:	9b04      	ldr	r3, [sp, #16]
 8006970:	1b9b      	subs	r3, r3, r6
 8006972:	6123      	str	r3, [r4, #16]
 8006974:	9b07      	ldr	r3, [sp, #28]
 8006976:	0021      	movs	r1, r4
 8006978:	9300      	str	r3, [sp, #0]
 800697a:	9805      	ldr	r0, [sp, #20]
 800697c:	9b06      	ldr	r3, [sp, #24]
 800697e:	aa09      	add	r2, sp, #36	; 0x24
 8006980:	f7ff fef2 	bl	8006768 <_printf_common>
 8006984:	3001      	adds	r0, #1
 8006986:	d147      	bne.n	8006a18 <_printf_i+0x1d0>
 8006988:	2001      	movs	r0, #1
 800698a:	4240      	negs	r0, r0
 800698c:	b00b      	add	sp, #44	; 0x2c
 800698e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006990:	2220      	movs	r2, #32
 8006992:	6809      	ldr	r1, [r1, #0]
 8006994:	430a      	orrs	r2, r1
 8006996:	6022      	str	r2, [r4, #0]
 8006998:	2278      	movs	r2, #120	; 0x78
 800699a:	4932      	ldr	r1, [pc, #200]	; (8006a64 <_printf_i+0x21c>)
 800699c:	9103      	str	r1, [sp, #12]
 800699e:	0021      	movs	r1, r4
 80069a0:	3145      	adds	r1, #69	; 0x45
 80069a2:	700a      	strb	r2, [r1, #0]
 80069a4:	6819      	ldr	r1, [r3, #0]
 80069a6:	6822      	ldr	r2, [r4, #0]
 80069a8:	c920      	ldmia	r1!, {r5}
 80069aa:	0610      	lsls	r0, r2, #24
 80069ac:	d402      	bmi.n	80069b4 <_printf_i+0x16c>
 80069ae:	0650      	lsls	r0, r2, #25
 80069b0:	d500      	bpl.n	80069b4 <_printf_i+0x16c>
 80069b2:	b2ad      	uxth	r5, r5
 80069b4:	6019      	str	r1, [r3, #0]
 80069b6:	07d3      	lsls	r3, r2, #31
 80069b8:	d502      	bpl.n	80069c0 <_printf_i+0x178>
 80069ba:	2320      	movs	r3, #32
 80069bc:	4313      	orrs	r3, r2
 80069be:	6023      	str	r3, [r4, #0]
 80069c0:	2710      	movs	r7, #16
 80069c2:	2d00      	cmp	r5, #0
 80069c4:	d1a9      	bne.n	800691a <_printf_i+0xd2>
 80069c6:	2220      	movs	r2, #32
 80069c8:	6823      	ldr	r3, [r4, #0]
 80069ca:	4393      	bics	r3, r2
 80069cc:	6023      	str	r3, [r4, #0]
 80069ce:	e7a4      	b.n	800691a <_printf_i+0xd2>
 80069d0:	681a      	ldr	r2, [r3, #0]
 80069d2:	680d      	ldr	r5, [r1, #0]
 80069d4:	1d10      	adds	r0, r2, #4
 80069d6:	6949      	ldr	r1, [r1, #20]
 80069d8:	6018      	str	r0, [r3, #0]
 80069da:	6813      	ldr	r3, [r2, #0]
 80069dc:	062e      	lsls	r6, r5, #24
 80069de:	d501      	bpl.n	80069e4 <_printf_i+0x19c>
 80069e0:	6019      	str	r1, [r3, #0]
 80069e2:	e002      	b.n	80069ea <_printf_i+0x1a2>
 80069e4:	066d      	lsls	r5, r5, #25
 80069e6:	d5fb      	bpl.n	80069e0 <_printf_i+0x198>
 80069e8:	8019      	strh	r1, [r3, #0]
 80069ea:	2300      	movs	r3, #0
 80069ec:	9e04      	ldr	r6, [sp, #16]
 80069ee:	6123      	str	r3, [r4, #16]
 80069f0:	e7c0      	b.n	8006974 <_printf_i+0x12c>
 80069f2:	681a      	ldr	r2, [r3, #0]
 80069f4:	1d11      	adds	r1, r2, #4
 80069f6:	6019      	str	r1, [r3, #0]
 80069f8:	6816      	ldr	r6, [r2, #0]
 80069fa:	2100      	movs	r1, #0
 80069fc:	0030      	movs	r0, r6
 80069fe:	6862      	ldr	r2, [r4, #4]
 8006a00:	f000 f9b1 	bl	8006d66 <memchr>
 8006a04:	2800      	cmp	r0, #0
 8006a06:	d001      	beq.n	8006a0c <_printf_i+0x1c4>
 8006a08:	1b80      	subs	r0, r0, r6
 8006a0a:	6060      	str	r0, [r4, #4]
 8006a0c:	6863      	ldr	r3, [r4, #4]
 8006a0e:	6123      	str	r3, [r4, #16]
 8006a10:	2300      	movs	r3, #0
 8006a12:	9a04      	ldr	r2, [sp, #16]
 8006a14:	7013      	strb	r3, [r2, #0]
 8006a16:	e7ad      	b.n	8006974 <_printf_i+0x12c>
 8006a18:	0032      	movs	r2, r6
 8006a1a:	6923      	ldr	r3, [r4, #16]
 8006a1c:	9906      	ldr	r1, [sp, #24]
 8006a1e:	9805      	ldr	r0, [sp, #20]
 8006a20:	9d07      	ldr	r5, [sp, #28]
 8006a22:	47a8      	blx	r5
 8006a24:	3001      	adds	r0, #1
 8006a26:	d0af      	beq.n	8006988 <_printf_i+0x140>
 8006a28:	6823      	ldr	r3, [r4, #0]
 8006a2a:	079b      	lsls	r3, r3, #30
 8006a2c:	d415      	bmi.n	8006a5a <_printf_i+0x212>
 8006a2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a30:	68e0      	ldr	r0, [r4, #12]
 8006a32:	4298      	cmp	r0, r3
 8006a34:	daaa      	bge.n	800698c <_printf_i+0x144>
 8006a36:	0018      	movs	r0, r3
 8006a38:	e7a8      	b.n	800698c <_printf_i+0x144>
 8006a3a:	0022      	movs	r2, r4
 8006a3c:	2301      	movs	r3, #1
 8006a3e:	9906      	ldr	r1, [sp, #24]
 8006a40:	9805      	ldr	r0, [sp, #20]
 8006a42:	9e07      	ldr	r6, [sp, #28]
 8006a44:	3219      	adds	r2, #25
 8006a46:	47b0      	blx	r6
 8006a48:	3001      	adds	r0, #1
 8006a4a:	d09d      	beq.n	8006988 <_printf_i+0x140>
 8006a4c:	3501      	adds	r5, #1
 8006a4e:	68e3      	ldr	r3, [r4, #12]
 8006a50:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006a52:	1a9b      	subs	r3, r3, r2
 8006a54:	42ab      	cmp	r3, r5
 8006a56:	dcf0      	bgt.n	8006a3a <_printf_i+0x1f2>
 8006a58:	e7e9      	b.n	8006a2e <_printf_i+0x1e6>
 8006a5a:	2500      	movs	r5, #0
 8006a5c:	e7f7      	b.n	8006a4e <_printf_i+0x206>
 8006a5e:	46c0      	nop			; (mov r8, r8)
 8006a60:	080072df 	.word	0x080072df
 8006a64:	080072f0 	.word	0x080072f0

08006a68 <__sflush_r>:
 8006a68:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006a6a:	898b      	ldrh	r3, [r1, #12]
 8006a6c:	0005      	movs	r5, r0
 8006a6e:	000c      	movs	r4, r1
 8006a70:	071a      	lsls	r2, r3, #28
 8006a72:	d45c      	bmi.n	8006b2e <__sflush_r+0xc6>
 8006a74:	684a      	ldr	r2, [r1, #4]
 8006a76:	2a00      	cmp	r2, #0
 8006a78:	dc04      	bgt.n	8006a84 <__sflush_r+0x1c>
 8006a7a:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8006a7c:	2a00      	cmp	r2, #0
 8006a7e:	dc01      	bgt.n	8006a84 <__sflush_r+0x1c>
 8006a80:	2000      	movs	r0, #0
 8006a82:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006a84:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8006a86:	2f00      	cmp	r7, #0
 8006a88:	d0fa      	beq.n	8006a80 <__sflush_r+0x18>
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	2080      	movs	r0, #128	; 0x80
 8006a8e:	682e      	ldr	r6, [r5, #0]
 8006a90:	602a      	str	r2, [r5, #0]
 8006a92:	001a      	movs	r2, r3
 8006a94:	0140      	lsls	r0, r0, #5
 8006a96:	6a21      	ldr	r1, [r4, #32]
 8006a98:	4002      	ands	r2, r0
 8006a9a:	4203      	tst	r3, r0
 8006a9c:	d034      	beq.n	8006b08 <__sflush_r+0xa0>
 8006a9e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006aa0:	89a3      	ldrh	r3, [r4, #12]
 8006aa2:	075b      	lsls	r3, r3, #29
 8006aa4:	d506      	bpl.n	8006ab4 <__sflush_r+0x4c>
 8006aa6:	6863      	ldr	r3, [r4, #4]
 8006aa8:	1ac0      	subs	r0, r0, r3
 8006aaa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d001      	beq.n	8006ab4 <__sflush_r+0x4c>
 8006ab0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006ab2:	1ac0      	subs	r0, r0, r3
 8006ab4:	0002      	movs	r2, r0
 8006ab6:	2300      	movs	r3, #0
 8006ab8:	0028      	movs	r0, r5
 8006aba:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8006abc:	6a21      	ldr	r1, [r4, #32]
 8006abe:	47b8      	blx	r7
 8006ac0:	89a2      	ldrh	r2, [r4, #12]
 8006ac2:	1c43      	adds	r3, r0, #1
 8006ac4:	d106      	bne.n	8006ad4 <__sflush_r+0x6c>
 8006ac6:	6829      	ldr	r1, [r5, #0]
 8006ac8:	291d      	cmp	r1, #29
 8006aca:	d82c      	bhi.n	8006b26 <__sflush_r+0xbe>
 8006acc:	4b2a      	ldr	r3, [pc, #168]	; (8006b78 <__sflush_r+0x110>)
 8006ace:	410b      	asrs	r3, r1
 8006ad0:	07db      	lsls	r3, r3, #31
 8006ad2:	d428      	bmi.n	8006b26 <__sflush_r+0xbe>
 8006ad4:	2300      	movs	r3, #0
 8006ad6:	6063      	str	r3, [r4, #4]
 8006ad8:	6923      	ldr	r3, [r4, #16]
 8006ada:	6023      	str	r3, [r4, #0]
 8006adc:	04d2      	lsls	r2, r2, #19
 8006ade:	d505      	bpl.n	8006aec <__sflush_r+0x84>
 8006ae0:	1c43      	adds	r3, r0, #1
 8006ae2:	d102      	bne.n	8006aea <__sflush_r+0x82>
 8006ae4:	682b      	ldr	r3, [r5, #0]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d100      	bne.n	8006aec <__sflush_r+0x84>
 8006aea:	6560      	str	r0, [r4, #84]	; 0x54
 8006aec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006aee:	602e      	str	r6, [r5, #0]
 8006af0:	2900      	cmp	r1, #0
 8006af2:	d0c5      	beq.n	8006a80 <__sflush_r+0x18>
 8006af4:	0023      	movs	r3, r4
 8006af6:	3344      	adds	r3, #68	; 0x44
 8006af8:	4299      	cmp	r1, r3
 8006afa:	d002      	beq.n	8006b02 <__sflush_r+0x9a>
 8006afc:	0028      	movs	r0, r5
 8006afe:	f7ff fb43 	bl	8006188 <_free_r>
 8006b02:	2000      	movs	r0, #0
 8006b04:	6360      	str	r0, [r4, #52]	; 0x34
 8006b06:	e7bc      	b.n	8006a82 <__sflush_r+0x1a>
 8006b08:	2301      	movs	r3, #1
 8006b0a:	0028      	movs	r0, r5
 8006b0c:	47b8      	blx	r7
 8006b0e:	1c43      	adds	r3, r0, #1
 8006b10:	d1c6      	bne.n	8006aa0 <__sflush_r+0x38>
 8006b12:	682b      	ldr	r3, [r5, #0]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d0c3      	beq.n	8006aa0 <__sflush_r+0x38>
 8006b18:	2b1d      	cmp	r3, #29
 8006b1a:	d001      	beq.n	8006b20 <__sflush_r+0xb8>
 8006b1c:	2b16      	cmp	r3, #22
 8006b1e:	d101      	bne.n	8006b24 <__sflush_r+0xbc>
 8006b20:	602e      	str	r6, [r5, #0]
 8006b22:	e7ad      	b.n	8006a80 <__sflush_r+0x18>
 8006b24:	89a2      	ldrh	r2, [r4, #12]
 8006b26:	2340      	movs	r3, #64	; 0x40
 8006b28:	4313      	orrs	r3, r2
 8006b2a:	81a3      	strh	r3, [r4, #12]
 8006b2c:	e7a9      	b.n	8006a82 <__sflush_r+0x1a>
 8006b2e:	690e      	ldr	r6, [r1, #16]
 8006b30:	2e00      	cmp	r6, #0
 8006b32:	d0a5      	beq.n	8006a80 <__sflush_r+0x18>
 8006b34:	680f      	ldr	r7, [r1, #0]
 8006b36:	600e      	str	r6, [r1, #0]
 8006b38:	1bba      	subs	r2, r7, r6
 8006b3a:	9201      	str	r2, [sp, #4]
 8006b3c:	2200      	movs	r2, #0
 8006b3e:	079b      	lsls	r3, r3, #30
 8006b40:	d100      	bne.n	8006b44 <__sflush_r+0xdc>
 8006b42:	694a      	ldr	r2, [r1, #20]
 8006b44:	60a2      	str	r2, [r4, #8]
 8006b46:	9b01      	ldr	r3, [sp, #4]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	dd99      	ble.n	8006a80 <__sflush_r+0x18>
 8006b4c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006b4e:	0032      	movs	r2, r6
 8006b50:	001f      	movs	r7, r3
 8006b52:	0028      	movs	r0, r5
 8006b54:	9b01      	ldr	r3, [sp, #4]
 8006b56:	6a21      	ldr	r1, [r4, #32]
 8006b58:	47b8      	blx	r7
 8006b5a:	2800      	cmp	r0, #0
 8006b5c:	dc06      	bgt.n	8006b6c <__sflush_r+0x104>
 8006b5e:	2340      	movs	r3, #64	; 0x40
 8006b60:	2001      	movs	r0, #1
 8006b62:	89a2      	ldrh	r2, [r4, #12]
 8006b64:	4240      	negs	r0, r0
 8006b66:	4313      	orrs	r3, r2
 8006b68:	81a3      	strh	r3, [r4, #12]
 8006b6a:	e78a      	b.n	8006a82 <__sflush_r+0x1a>
 8006b6c:	9b01      	ldr	r3, [sp, #4]
 8006b6e:	1836      	adds	r6, r6, r0
 8006b70:	1a1b      	subs	r3, r3, r0
 8006b72:	9301      	str	r3, [sp, #4]
 8006b74:	e7e7      	b.n	8006b46 <__sflush_r+0xde>
 8006b76:	46c0      	nop			; (mov r8, r8)
 8006b78:	dfbffffe 	.word	0xdfbffffe

08006b7c <_fflush_r>:
 8006b7c:	690b      	ldr	r3, [r1, #16]
 8006b7e:	b570      	push	{r4, r5, r6, lr}
 8006b80:	0005      	movs	r5, r0
 8006b82:	000c      	movs	r4, r1
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d102      	bne.n	8006b8e <_fflush_r+0x12>
 8006b88:	2500      	movs	r5, #0
 8006b8a:	0028      	movs	r0, r5
 8006b8c:	bd70      	pop	{r4, r5, r6, pc}
 8006b8e:	2800      	cmp	r0, #0
 8006b90:	d004      	beq.n	8006b9c <_fflush_r+0x20>
 8006b92:	6a03      	ldr	r3, [r0, #32]
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d101      	bne.n	8006b9c <_fflush_r+0x20>
 8006b98:	f7ff f8de 	bl	8005d58 <__sinit>
 8006b9c:	220c      	movs	r2, #12
 8006b9e:	5ea3      	ldrsh	r3, [r4, r2]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d0f1      	beq.n	8006b88 <_fflush_r+0xc>
 8006ba4:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006ba6:	07d2      	lsls	r2, r2, #31
 8006ba8:	d404      	bmi.n	8006bb4 <_fflush_r+0x38>
 8006baa:	059b      	lsls	r3, r3, #22
 8006bac:	d402      	bmi.n	8006bb4 <_fflush_r+0x38>
 8006bae:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006bb0:	f7ff fac0 	bl	8006134 <__retarget_lock_acquire_recursive>
 8006bb4:	0028      	movs	r0, r5
 8006bb6:	0021      	movs	r1, r4
 8006bb8:	f7ff ff56 	bl	8006a68 <__sflush_r>
 8006bbc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006bbe:	0005      	movs	r5, r0
 8006bc0:	07db      	lsls	r3, r3, #31
 8006bc2:	d4e2      	bmi.n	8006b8a <_fflush_r+0xe>
 8006bc4:	89a3      	ldrh	r3, [r4, #12]
 8006bc6:	059b      	lsls	r3, r3, #22
 8006bc8:	d4df      	bmi.n	8006b8a <_fflush_r+0xe>
 8006bca:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006bcc:	f7ff fab3 	bl	8006136 <__retarget_lock_release_recursive>
 8006bd0:	e7db      	b.n	8006b8a <_fflush_r+0xe>
	...

08006bd4 <fiprintf>:
 8006bd4:	b40e      	push	{r1, r2, r3}
 8006bd6:	b517      	push	{r0, r1, r2, r4, lr}
 8006bd8:	4c05      	ldr	r4, [pc, #20]	; (8006bf0 <fiprintf+0x1c>)
 8006bda:	ab05      	add	r3, sp, #20
 8006bdc:	cb04      	ldmia	r3!, {r2}
 8006bde:	0001      	movs	r1, r0
 8006be0:	6820      	ldr	r0, [r4, #0]
 8006be2:	9301      	str	r3, [sp, #4]
 8006be4:	f7ff fca4 	bl	8006530 <_vfiprintf_r>
 8006be8:	bc1e      	pop	{r1, r2, r3, r4}
 8006bea:	bc08      	pop	{r3}
 8006bec:	b003      	add	sp, #12
 8006bee:	4718      	bx	r3
 8006bf0:	20000184 	.word	0x20000184

08006bf4 <__swbuf_r>:
 8006bf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bf6:	0006      	movs	r6, r0
 8006bf8:	000d      	movs	r5, r1
 8006bfa:	0014      	movs	r4, r2
 8006bfc:	2800      	cmp	r0, #0
 8006bfe:	d004      	beq.n	8006c0a <__swbuf_r+0x16>
 8006c00:	6a03      	ldr	r3, [r0, #32]
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d101      	bne.n	8006c0a <__swbuf_r+0x16>
 8006c06:	f7ff f8a7 	bl	8005d58 <__sinit>
 8006c0a:	69a3      	ldr	r3, [r4, #24]
 8006c0c:	60a3      	str	r3, [r4, #8]
 8006c0e:	89a3      	ldrh	r3, [r4, #12]
 8006c10:	071b      	lsls	r3, r3, #28
 8006c12:	d528      	bpl.n	8006c66 <__swbuf_r+0x72>
 8006c14:	6923      	ldr	r3, [r4, #16]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d025      	beq.n	8006c66 <__swbuf_r+0x72>
 8006c1a:	6923      	ldr	r3, [r4, #16]
 8006c1c:	6820      	ldr	r0, [r4, #0]
 8006c1e:	b2ef      	uxtb	r7, r5
 8006c20:	1ac0      	subs	r0, r0, r3
 8006c22:	6963      	ldr	r3, [r4, #20]
 8006c24:	b2ed      	uxtb	r5, r5
 8006c26:	4283      	cmp	r3, r0
 8006c28:	dc05      	bgt.n	8006c36 <__swbuf_r+0x42>
 8006c2a:	0021      	movs	r1, r4
 8006c2c:	0030      	movs	r0, r6
 8006c2e:	f7ff ffa5 	bl	8006b7c <_fflush_r>
 8006c32:	2800      	cmp	r0, #0
 8006c34:	d11d      	bne.n	8006c72 <__swbuf_r+0x7e>
 8006c36:	68a3      	ldr	r3, [r4, #8]
 8006c38:	3001      	adds	r0, #1
 8006c3a:	3b01      	subs	r3, #1
 8006c3c:	60a3      	str	r3, [r4, #8]
 8006c3e:	6823      	ldr	r3, [r4, #0]
 8006c40:	1c5a      	adds	r2, r3, #1
 8006c42:	6022      	str	r2, [r4, #0]
 8006c44:	701f      	strb	r7, [r3, #0]
 8006c46:	6963      	ldr	r3, [r4, #20]
 8006c48:	4283      	cmp	r3, r0
 8006c4a:	d004      	beq.n	8006c56 <__swbuf_r+0x62>
 8006c4c:	89a3      	ldrh	r3, [r4, #12]
 8006c4e:	07db      	lsls	r3, r3, #31
 8006c50:	d507      	bpl.n	8006c62 <__swbuf_r+0x6e>
 8006c52:	2d0a      	cmp	r5, #10
 8006c54:	d105      	bne.n	8006c62 <__swbuf_r+0x6e>
 8006c56:	0021      	movs	r1, r4
 8006c58:	0030      	movs	r0, r6
 8006c5a:	f7ff ff8f 	bl	8006b7c <_fflush_r>
 8006c5e:	2800      	cmp	r0, #0
 8006c60:	d107      	bne.n	8006c72 <__swbuf_r+0x7e>
 8006c62:	0028      	movs	r0, r5
 8006c64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006c66:	0021      	movs	r1, r4
 8006c68:	0030      	movs	r0, r6
 8006c6a:	f000 f805 	bl	8006c78 <__swsetup_r>
 8006c6e:	2800      	cmp	r0, #0
 8006c70:	d0d3      	beq.n	8006c1a <__swbuf_r+0x26>
 8006c72:	2501      	movs	r5, #1
 8006c74:	426d      	negs	r5, r5
 8006c76:	e7f4      	b.n	8006c62 <__swbuf_r+0x6e>

08006c78 <__swsetup_r>:
 8006c78:	4b30      	ldr	r3, [pc, #192]	; (8006d3c <__swsetup_r+0xc4>)
 8006c7a:	b570      	push	{r4, r5, r6, lr}
 8006c7c:	0005      	movs	r5, r0
 8006c7e:	6818      	ldr	r0, [r3, #0]
 8006c80:	000c      	movs	r4, r1
 8006c82:	2800      	cmp	r0, #0
 8006c84:	d004      	beq.n	8006c90 <__swsetup_r+0x18>
 8006c86:	6a03      	ldr	r3, [r0, #32]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d101      	bne.n	8006c90 <__swsetup_r+0x18>
 8006c8c:	f7ff f864 	bl	8005d58 <__sinit>
 8006c90:	230c      	movs	r3, #12
 8006c92:	5ee2      	ldrsh	r2, [r4, r3]
 8006c94:	b293      	uxth	r3, r2
 8006c96:	0711      	lsls	r1, r2, #28
 8006c98:	d423      	bmi.n	8006ce2 <__swsetup_r+0x6a>
 8006c9a:	06d9      	lsls	r1, r3, #27
 8006c9c:	d407      	bmi.n	8006cae <__swsetup_r+0x36>
 8006c9e:	2309      	movs	r3, #9
 8006ca0:	2001      	movs	r0, #1
 8006ca2:	602b      	str	r3, [r5, #0]
 8006ca4:	3337      	adds	r3, #55	; 0x37
 8006ca6:	4313      	orrs	r3, r2
 8006ca8:	81a3      	strh	r3, [r4, #12]
 8006caa:	4240      	negs	r0, r0
 8006cac:	bd70      	pop	{r4, r5, r6, pc}
 8006cae:	075b      	lsls	r3, r3, #29
 8006cb0:	d513      	bpl.n	8006cda <__swsetup_r+0x62>
 8006cb2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006cb4:	2900      	cmp	r1, #0
 8006cb6:	d008      	beq.n	8006cca <__swsetup_r+0x52>
 8006cb8:	0023      	movs	r3, r4
 8006cba:	3344      	adds	r3, #68	; 0x44
 8006cbc:	4299      	cmp	r1, r3
 8006cbe:	d002      	beq.n	8006cc6 <__swsetup_r+0x4e>
 8006cc0:	0028      	movs	r0, r5
 8006cc2:	f7ff fa61 	bl	8006188 <_free_r>
 8006cc6:	2300      	movs	r3, #0
 8006cc8:	6363      	str	r3, [r4, #52]	; 0x34
 8006cca:	2224      	movs	r2, #36	; 0x24
 8006ccc:	89a3      	ldrh	r3, [r4, #12]
 8006cce:	4393      	bics	r3, r2
 8006cd0:	81a3      	strh	r3, [r4, #12]
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	6063      	str	r3, [r4, #4]
 8006cd6:	6923      	ldr	r3, [r4, #16]
 8006cd8:	6023      	str	r3, [r4, #0]
 8006cda:	2308      	movs	r3, #8
 8006cdc:	89a2      	ldrh	r2, [r4, #12]
 8006cde:	4313      	orrs	r3, r2
 8006ce0:	81a3      	strh	r3, [r4, #12]
 8006ce2:	6923      	ldr	r3, [r4, #16]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d10b      	bne.n	8006d00 <__swsetup_r+0x88>
 8006ce8:	21a0      	movs	r1, #160	; 0xa0
 8006cea:	2280      	movs	r2, #128	; 0x80
 8006cec:	89a3      	ldrh	r3, [r4, #12]
 8006cee:	0089      	lsls	r1, r1, #2
 8006cf0:	0092      	lsls	r2, r2, #2
 8006cf2:	400b      	ands	r3, r1
 8006cf4:	4293      	cmp	r3, r2
 8006cf6:	d003      	beq.n	8006d00 <__swsetup_r+0x88>
 8006cf8:	0021      	movs	r1, r4
 8006cfa:	0028      	movs	r0, r5
 8006cfc:	f000 f89c 	bl	8006e38 <__smakebuf_r>
 8006d00:	220c      	movs	r2, #12
 8006d02:	5ea3      	ldrsh	r3, [r4, r2]
 8006d04:	2001      	movs	r0, #1
 8006d06:	001a      	movs	r2, r3
 8006d08:	b299      	uxth	r1, r3
 8006d0a:	4002      	ands	r2, r0
 8006d0c:	4203      	tst	r3, r0
 8006d0e:	d00f      	beq.n	8006d30 <__swsetup_r+0xb8>
 8006d10:	2200      	movs	r2, #0
 8006d12:	60a2      	str	r2, [r4, #8]
 8006d14:	6962      	ldr	r2, [r4, #20]
 8006d16:	4252      	negs	r2, r2
 8006d18:	61a2      	str	r2, [r4, #24]
 8006d1a:	2000      	movs	r0, #0
 8006d1c:	6922      	ldr	r2, [r4, #16]
 8006d1e:	4282      	cmp	r2, r0
 8006d20:	d1c4      	bne.n	8006cac <__swsetup_r+0x34>
 8006d22:	0609      	lsls	r1, r1, #24
 8006d24:	d5c2      	bpl.n	8006cac <__swsetup_r+0x34>
 8006d26:	2240      	movs	r2, #64	; 0x40
 8006d28:	4313      	orrs	r3, r2
 8006d2a:	81a3      	strh	r3, [r4, #12]
 8006d2c:	3801      	subs	r0, #1
 8006d2e:	e7bd      	b.n	8006cac <__swsetup_r+0x34>
 8006d30:	0788      	lsls	r0, r1, #30
 8006d32:	d400      	bmi.n	8006d36 <__swsetup_r+0xbe>
 8006d34:	6962      	ldr	r2, [r4, #20]
 8006d36:	60a2      	str	r2, [r4, #8]
 8006d38:	e7ef      	b.n	8006d1a <__swsetup_r+0xa2>
 8006d3a:	46c0      	nop			; (mov r8, r8)
 8006d3c:	20000184 	.word	0x20000184

08006d40 <memmove>:
 8006d40:	b510      	push	{r4, lr}
 8006d42:	4288      	cmp	r0, r1
 8006d44:	d902      	bls.n	8006d4c <memmove+0xc>
 8006d46:	188b      	adds	r3, r1, r2
 8006d48:	4298      	cmp	r0, r3
 8006d4a:	d303      	bcc.n	8006d54 <memmove+0x14>
 8006d4c:	2300      	movs	r3, #0
 8006d4e:	e007      	b.n	8006d60 <memmove+0x20>
 8006d50:	5c8b      	ldrb	r3, [r1, r2]
 8006d52:	5483      	strb	r3, [r0, r2]
 8006d54:	3a01      	subs	r2, #1
 8006d56:	d2fb      	bcs.n	8006d50 <memmove+0x10>
 8006d58:	bd10      	pop	{r4, pc}
 8006d5a:	5ccc      	ldrb	r4, [r1, r3]
 8006d5c:	54c4      	strb	r4, [r0, r3]
 8006d5e:	3301      	adds	r3, #1
 8006d60:	429a      	cmp	r2, r3
 8006d62:	d1fa      	bne.n	8006d5a <memmove+0x1a>
 8006d64:	e7f8      	b.n	8006d58 <memmove+0x18>

08006d66 <memchr>:
 8006d66:	b2c9      	uxtb	r1, r1
 8006d68:	1882      	adds	r2, r0, r2
 8006d6a:	4290      	cmp	r0, r2
 8006d6c:	d101      	bne.n	8006d72 <memchr+0xc>
 8006d6e:	2000      	movs	r0, #0
 8006d70:	4770      	bx	lr
 8006d72:	7803      	ldrb	r3, [r0, #0]
 8006d74:	428b      	cmp	r3, r1
 8006d76:	d0fb      	beq.n	8006d70 <memchr+0xa>
 8006d78:	3001      	adds	r0, #1
 8006d7a:	e7f6      	b.n	8006d6a <memchr+0x4>

08006d7c <abort>:
 8006d7c:	2006      	movs	r0, #6
 8006d7e:	b510      	push	{r4, lr}
 8006d80:	f000 f8c2 	bl	8006f08 <raise>
 8006d84:	2001      	movs	r0, #1
 8006d86:	f7fb f87f 	bl	8001e88 <_exit>

08006d8a <_realloc_r>:
 8006d8a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006d8c:	0007      	movs	r7, r0
 8006d8e:	000e      	movs	r6, r1
 8006d90:	0014      	movs	r4, r2
 8006d92:	2900      	cmp	r1, #0
 8006d94:	d105      	bne.n	8006da2 <_realloc_r+0x18>
 8006d96:	0011      	movs	r1, r2
 8006d98:	f7fe fece 	bl	8005b38 <_malloc_r>
 8006d9c:	0005      	movs	r5, r0
 8006d9e:	0028      	movs	r0, r5
 8006da0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006da2:	2a00      	cmp	r2, #0
 8006da4:	d103      	bne.n	8006dae <_realloc_r+0x24>
 8006da6:	f7ff f9ef 	bl	8006188 <_free_r>
 8006daa:	0025      	movs	r5, r4
 8006dac:	e7f7      	b.n	8006d9e <_realloc_r+0x14>
 8006dae:	f000 f8ef 	bl	8006f90 <_malloc_usable_size_r>
 8006db2:	9001      	str	r0, [sp, #4]
 8006db4:	4284      	cmp	r4, r0
 8006db6:	d803      	bhi.n	8006dc0 <_realloc_r+0x36>
 8006db8:	0035      	movs	r5, r6
 8006dba:	0843      	lsrs	r3, r0, #1
 8006dbc:	42a3      	cmp	r3, r4
 8006dbe:	d3ee      	bcc.n	8006d9e <_realloc_r+0x14>
 8006dc0:	0021      	movs	r1, r4
 8006dc2:	0038      	movs	r0, r7
 8006dc4:	f7fe feb8 	bl	8005b38 <_malloc_r>
 8006dc8:	1e05      	subs	r5, r0, #0
 8006dca:	d0e8      	beq.n	8006d9e <_realloc_r+0x14>
 8006dcc:	9b01      	ldr	r3, [sp, #4]
 8006dce:	0022      	movs	r2, r4
 8006dd0:	429c      	cmp	r4, r3
 8006dd2:	d900      	bls.n	8006dd6 <_realloc_r+0x4c>
 8006dd4:	001a      	movs	r2, r3
 8006dd6:	0031      	movs	r1, r6
 8006dd8:	0028      	movs	r0, r5
 8006dda:	f7ff f9ad 	bl	8006138 <memcpy>
 8006dde:	0031      	movs	r1, r6
 8006de0:	0038      	movs	r0, r7
 8006de2:	f7ff f9d1 	bl	8006188 <_free_r>
 8006de6:	e7da      	b.n	8006d9e <_realloc_r+0x14>

08006de8 <__swhatbuf_r>:
 8006de8:	b570      	push	{r4, r5, r6, lr}
 8006dea:	000e      	movs	r6, r1
 8006dec:	001d      	movs	r5, r3
 8006dee:	230e      	movs	r3, #14
 8006df0:	5ec9      	ldrsh	r1, [r1, r3]
 8006df2:	0014      	movs	r4, r2
 8006df4:	b096      	sub	sp, #88	; 0x58
 8006df6:	2900      	cmp	r1, #0
 8006df8:	da0c      	bge.n	8006e14 <__swhatbuf_r+0x2c>
 8006dfa:	89b2      	ldrh	r2, [r6, #12]
 8006dfc:	2380      	movs	r3, #128	; 0x80
 8006dfe:	0011      	movs	r1, r2
 8006e00:	4019      	ands	r1, r3
 8006e02:	421a      	tst	r2, r3
 8006e04:	d013      	beq.n	8006e2e <__swhatbuf_r+0x46>
 8006e06:	2100      	movs	r1, #0
 8006e08:	3b40      	subs	r3, #64	; 0x40
 8006e0a:	2000      	movs	r0, #0
 8006e0c:	6029      	str	r1, [r5, #0]
 8006e0e:	6023      	str	r3, [r4, #0]
 8006e10:	b016      	add	sp, #88	; 0x58
 8006e12:	bd70      	pop	{r4, r5, r6, pc}
 8006e14:	466a      	mov	r2, sp
 8006e16:	f000 f881 	bl	8006f1c <_fstat_r>
 8006e1a:	2800      	cmp	r0, #0
 8006e1c:	dbed      	blt.n	8006dfa <__swhatbuf_r+0x12>
 8006e1e:	23f0      	movs	r3, #240	; 0xf0
 8006e20:	9901      	ldr	r1, [sp, #4]
 8006e22:	021b      	lsls	r3, r3, #8
 8006e24:	4019      	ands	r1, r3
 8006e26:	4b03      	ldr	r3, [pc, #12]	; (8006e34 <__swhatbuf_r+0x4c>)
 8006e28:	18c9      	adds	r1, r1, r3
 8006e2a:	424b      	negs	r3, r1
 8006e2c:	4159      	adcs	r1, r3
 8006e2e:	2380      	movs	r3, #128	; 0x80
 8006e30:	00db      	lsls	r3, r3, #3
 8006e32:	e7ea      	b.n	8006e0a <__swhatbuf_r+0x22>
 8006e34:	ffffe000 	.word	0xffffe000

08006e38 <__smakebuf_r>:
 8006e38:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006e3a:	2602      	movs	r6, #2
 8006e3c:	898b      	ldrh	r3, [r1, #12]
 8006e3e:	0005      	movs	r5, r0
 8006e40:	000c      	movs	r4, r1
 8006e42:	4233      	tst	r3, r6
 8006e44:	d006      	beq.n	8006e54 <__smakebuf_r+0x1c>
 8006e46:	0023      	movs	r3, r4
 8006e48:	3347      	adds	r3, #71	; 0x47
 8006e4a:	6023      	str	r3, [r4, #0]
 8006e4c:	6123      	str	r3, [r4, #16]
 8006e4e:	2301      	movs	r3, #1
 8006e50:	6163      	str	r3, [r4, #20]
 8006e52:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8006e54:	466a      	mov	r2, sp
 8006e56:	ab01      	add	r3, sp, #4
 8006e58:	f7ff ffc6 	bl	8006de8 <__swhatbuf_r>
 8006e5c:	9900      	ldr	r1, [sp, #0]
 8006e5e:	0007      	movs	r7, r0
 8006e60:	0028      	movs	r0, r5
 8006e62:	f7fe fe69 	bl	8005b38 <_malloc_r>
 8006e66:	2800      	cmp	r0, #0
 8006e68:	d108      	bne.n	8006e7c <__smakebuf_r+0x44>
 8006e6a:	220c      	movs	r2, #12
 8006e6c:	5ea3      	ldrsh	r3, [r4, r2]
 8006e6e:	059a      	lsls	r2, r3, #22
 8006e70:	d4ef      	bmi.n	8006e52 <__smakebuf_r+0x1a>
 8006e72:	2203      	movs	r2, #3
 8006e74:	4393      	bics	r3, r2
 8006e76:	431e      	orrs	r6, r3
 8006e78:	81a6      	strh	r6, [r4, #12]
 8006e7a:	e7e4      	b.n	8006e46 <__smakebuf_r+0xe>
 8006e7c:	2380      	movs	r3, #128	; 0x80
 8006e7e:	89a2      	ldrh	r2, [r4, #12]
 8006e80:	6020      	str	r0, [r4, #0]
 8006e82:	4313      	orrs	r3, r2
 8006e84:	81a3      	strh	r3, [r4, #12]
 8006e86:	9b00      	ldr	r3, [sp, #0]
 8006e88:	6120      	str	r0, [r4, #16]
 8006e8a:	6163      	str	r3, [r4, #20]
 8006e8c:	9b01      	ldr	r3, [sp, #4]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d00c      	beq.n	8006eac <__smakebuf_r+0x74>
 8006e92:	0028      	movs	r0, r5
 8006e94:	230e      	movs	r3, #14
 8006e96:	5ee1      	ldrsh	r1, [r4, r3]
 8006e98:	f000 f852 	bl	8006f40 <_isatty_r>
 8006e9c:	2800      	cmp	r0, #0
 8006e9e:	d005      	beq.n	8006eac <__smakebuf_r+0x74>
 8006ea0:	2303      	movs	r3, #3
 8006ea2:	89a2      	ldrh	r2, [r4, #12]
 8006ea4:	439a      	bics	r2, r3
 8006ea6:	3b02      	subs	r3, #2
 8006ea8:	4313      	orrs	r3, r2
 8006eaa:	81a3      	strh	r3, [r4, #12]
 8006eac:	89a3      	ldrh	r3, [r4, #12]
 8006eae:	433b      	orrs	r3, r7
 8006eb0:	81a3      	strh	r3, [r4, #12]
 8006eb2:	e7ce      	b.n	8006e52 <__smakebuf_r+0x1a>

08006eb4 <_raise_r>:
 8006eb4:	b570      	push	{r4, r5, r6, lr}
 8006eb6:	0004      	movs	r4, r0
 8006eb8:	000d      	movs	r5, r1
 8006eba:	291f      	cmp	r1, #31
 8006ebc:	d904      	bls.n	8006ec8 <_raise_r+0x14>
 8006ebe:	2316      	movs	r3, #22
 8006ec0:	6003      	str	r3, [r0, #0]
 8006ec2:	2001      	movs	r0, #1
 8006ec4:	4240      	negs	r0, r0
 8006ec6:	bd70      	pop	{r4, r5, r6, pc}
 8006ec8:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d004      	beq.n	8006ed8 <_raise_r+0x24>
 8006ece:	008a      	lsls	r2, r1, #2
 8006ed0:	189b      	adds	r3, r3, r2
 8006ed2:	681a      	ldr	r2, [r3, #0]
 8006ed4:	2a00      	cmp	r2, #0
 8006ed6:	d108      	bne.n	8006eea <_raise_r+0x36>
 8006ed8:	0020      	movs	r0, r4
 8006eda:	f000 f855 	bl	8006f88 <_getpid_r>
 8006ede:	002a      	movs	r2, r5
 8006ee0:	0001      	movs	r1, r0
 8006ee2:	0020      	movs	r0, r4
 8006ee4:	f000 f83e 	bl	8006f64 <_kill_r>
 8006ee8:	e7ed      	b.n	8006ec6 <_raise_r+0x12>
 8006eea:	2000      	movs	r0, #0
 8006eec:	2a01      	cmp	r2, #1
 8006eee:	d0ea      	beq.n	8006ec6 <_raise_r+0x12>
 8006ef0:	1c51      	adds	r1, r2, #1
 8006ef2:	d103      	bne.n	8006efc <_raise_r+0x48>
 8006ef4:	2316      	movs	r3, #22
 8006ef6:	3001      	adds	r0, #1
 8006ef8:	6023      	str	r3, [r4, #0]
 8006efa:	e7e4      	b.n	8006ec6 <_raise_r+0x12>
 8006efc:	2400      	movs	r4, #0
 8006efe:	0028      	movs	r0, r5
 8006f00:	601c      	str	r4, [r3, #0]
 8006f02:	4790      	blx	r2
 8006f04:	0020      	movs	r0, r4
 8006f06:	e7de      	b.n	8006ec6 <_raise_r+0x12>

08006f08 <raise>:
 8006f08:	b510      	push	{r4, lr}
 8006f0a:	4b03      	ldr	r3, [pc, #12]	; (8006f18 <raise+0x10>)
 8006f0c:	0001      	movs	r1, r0
 8006f0e:	6818      	ldr	r0, [r3, #0]
 8006f10:	f7ff ffd0 	bl	8006eb4 <_raise_r>
 8006f14:	bd10      	pop	{r4, pc}
 8006f16:	46c0      	nop			; (mov r8, r8)
 8006f18:	20000184 	.word	0x20000184

08006f1c <_fstat_r>:
 8006f1c:	2300      	movs	r3, #0
 8006f1e:	b570      	push	{r4, r5, r6, lr}
 8006f20:	4d06      	ldr	r5, [pc, #24]	; (8006f3c <_fstat_r+0x20>)
 8006f22:	0004      	movs	r4, r0
 8006f24:	0008      	movs	r0, r1
 8006f26:	0011      	movs	r1, r2
 8006f28:	602b      	str	r3, [r5, #0]
 8006f2a:	f7fa fffc 	bl	8001f26 <_fstat>
 8006f2e:	1c43      	adds	r3, r0, #1
 8006f30:	d103      	bne.n	8006f3a <_fstat_r+0x1e>
 8006f32:	682b      	ldr	r3, [r5, #0]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d000      	beq.n	8006f3a <_fstat_r+0x1e>
 8006f38:	6023      	str	r3, [r4, #0]
 8006f3a:	bd70      	pop	{r4, r5, r6, pc}
 8006f3c:	2000047c 	.word	0x2000047c

08006f40 <_isatty_r>:
 8006f40:	2300      	movs	r3, #0
 8006f42:	b570      	push	{r4, r5, r6, lr}
 8006f44:	4d06      	ldr	r5, [pc, #24]	; (8006f60 <_isatty_r+0x20>)
 8006f46:	0004      	movs	r4, r0
 8006f48:	0008      	movs	r0, r1
 8006f4a:	602b      	str	r3, [r5, #0]
 8006f4c:	f7fa fff9 	bl	8001f42 <_isatty>
 8006f50:	1c43      	adds	r3, r0, #1
 8006f52:	d103      	bne.n	8006f5c <_isatty_r+0x1c>
 8006f54:	682b      	ldr	r3, [r5, #0]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d000      	beq.n	8006f5c <_isatty_r+0x1c>
 8006f5a:	6023      	str	r3, [r4, #0]
 8006f5c:	bd70      	pop	{r4, r5, r6, pc}
 8006f5e:	46c0      	nop			; (mov r8, r8)
 8006f60:	2000047c 	.word	0x2000047c

08006f64 <_kill_r>:
 8006f64:	2300      	movs	r3, #0
 8006f66:	b570      	push	{r4, r5, r6, lr}
 8006f68:	4d06      	ldr	r5, [pc, #24]	; (8006f84 <_kill_r+0x20>)
 8006f6a:	0004      	movs	r4, r0
 8006f6c:	0008      	movs	r0, r1
 8006f6e:	0011      	movs	r1, r2
 8006f70:	602b      	str	r3, [r5, #0]
 8006f72:	f7fa ff79 	bl	8001e68 <_kill>
 8006f76:	1c43      	adds	r3, r0, #1
 8006f78:	d103      	bne.n	8006f82 <_kill_r+0x1e>
 8006f7a:	682b      	ldr	r3, [r5, #0]
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d000      	beq.n	8006f82 <_kill_r+0x1e>
 8006f80:	6023      	str	r3, [r4, #0]
 8006f82:	bd70      	pop	{r4, r5, r6, pc}
 8006f84:	2000047c 	.word	0x2000047c

08006f88 <_getpid_r>:
 8006f88:	b510      	push	{r4, lr}
 8006f8a:	f7fa ff67 	bl	8001e5c <_getpid>
 8006f8e:	bd10      	pop	{r4, pc}

08006f90 <_malloc_usable_size_r>:
 8006f90:	1f0b      	subs	r3, r1, #4
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	1f18      	subs	r0, r3, #4
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	da01      	bge.n	8006f9e <_malloc_usable_size_r+0xe>
 8006f9a:	580b      	ldr	r3, [r1, r0]
 8006f9c:	18c0      	adds	r0, r0, r3
 8006f9e:	4770      	bx	lr

08006fa0 <_init>:
 8006fa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fa2:	46c0      	nop			; (mov r8, r8)
 8006fa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006fa6:	bc08      	pop	{r3}
 8006fa8:	469e      	mov	lr, r3
 8006faa:	4770      	bx	lr

08006fac <_fini>:
 8006fac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fae:	46c0      	nop			; (mov r8, r8)
 8006fb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006fb2:	bc08      	pop	{r3}
 8006fb4:	469e      	mov	lr, r3
 8006fb6:	4770      	bx	lr
