
Impulsator_2.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000065b4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000390  08006674  08006674  00016674  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006a04  08006a04  000201f8  2**0
                  CONTENTS
  4 .ARM          00000008  08006a04  08006a04  00016a04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006a0c  08006a0c  000201f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006a0c  08006a0c  00016a0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006a10  08006a10  00016a10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f8  20000000  08006a14  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002f4  200001f8  08006c0c  000201f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004ec  08006c0c  000204ec  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201f8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020220  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d36a  00000000  00000000  00020263  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002bdb  00000000  00000000  0002d5cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ba8  00000000  00000000  000301a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000008cd  00000000  00000000  00030d50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001644d  00000000  00000000  0003161d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010565  00000000  00000000  00047a6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00080726  00000000  00000000  00057fcf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003474  00000000  00000000  000d86f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004b  00000000  00000000  000dbb6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001f8 	.word	0x200001f8
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800665c 	.word	0x0800665c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001fc 	.word	0x200001fc
 8000104:	0800665c 	.word	0x0800665c

08000108 <strcmp>:
 8000108:	7802      	ldrb	r2, [r0, #0]
 800010a:	780b      	ldrb	r3, [r1, #0]
 800010c:	2a00      	cmp	r2, #0
 800010e:	d003      	beq.n	8000118 <strcmp+0x10>
 8000110:	3001      	adds	r0, #1
 8000112:	3101      	adds	r1, #1
 8000114:	429a      	cmp	r2, r3
 8000116:	d0f7      	beq.n	8000108 <strcmp>
 8000118:	1ad0      	subs	r0, r2, r3
 800011a:	4770      	bx	lr

0800011c <strlen>:
 800011c:	2300      	movs	r3, #0
 800011e:	5cc2      	ldrb	r2, [r0, r3]
 8000120:	3301      	adds	r3, #1
 8000122:	2a00      	cmp	r2, #0
 8000124:	d1fb      	bne.n	800011e <strlen+0x2>
 8000126:	1e58      	subs	r0, r3, #1
 8000128:	4770      	bx	lr
	...

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	; 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f806 	bl	8000254 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			; (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__aeabi_idiv0>:
 8000254:	4770      	bx	lr
 8000256:	46c0      	nop			; (mov r8, r8)

08000258 <__aeabi_uldivmod>:
 8000258:	2b00      	cmp	r3, #0
 800025a:	d111      	bne.n	8000280 <__aeabi_uldivmod+0x28>
 800025c:	2a00      	cmp	r2, #0
 800025e:	d10f      	bne.n	8000280 <__aeabi_uldivmod+0x28>
 8000260:	2900      	cmp	r1, #0
 8000262:	d100      	bne.n	8000266 <__aeabi_uldivmod+0xe>
 8000264:	2800      	cmp	r0, #0
 8000266:	d002      	beq.n	800026e <__aeabi_uldivmod+0x16>
 8000268:	2100      	movs	r1, #0
 800026a:	43c9      	mvns	r1, r1
 800026c:	0008      	movs	r0, r1
 800026e:	b407      	push	{r0, r1, r2}
 8000270:	4802      	ldr	r0, [pc, #8]	; (800027c <__aeabi_uldivmod+0x24>)
 8000272:	a102      	add	r1, pc, #8	; (adr r1, 800027c <__aeabi_uldivmod+0x24>)
 8000274:	1840      	adds	r0, r0, r1
 8000276:	9002      	str	r0, [sp, #8]
 8000278:	bd03      	pop	{r0, r1, pc}
 800027a:	46c0      	nop			; (mov r8, r8)
 800027c:	ffffffd9 	.word	0xffffffd9
 8000280:	b403      	push	{r0, r1}
 8000282:	4668      	mov	r0, sp
 8000284:	b501      	push	{r0, lr}
 8000286:	9802      	ldr	r0, [sp, #8]
 8000288:	f000 f84c 	bl	8000324 <__udivmoddi4>
 800028c:	9b01      	ldr	r3, [sp, #4]
 800028e:	469e      	mov	lr, r3
 8000290:	b002      	add	sp, #8
 8000292:	bc0c      	pop	{r2, r3}
 8000294:	4770      	bx	lr
 8000296:	46c0      	nop			; (mov r8, r8)

08000298 <__aeabi_lmul>:
 8000298:	b5f0      	push	{r4, r5, r6, r7, lr}
 800029a:	46ce      	mov	lr, r9
 800029c:	4699      	mov	r9, r3
 800029e:	0c03      	lsrs	r3, r0, #16
 80002a0:	469c      	mov	ip, r3
 80002a2:	0413      	lsls	r3, r2, #16
 80002a4:	4647      	mov	r7, r8
 80002a6:	0c1b      	lsrs	r3, r3, #16
 80002a8:	001d      	movs	r5, r3
 80002aa:	000e      	movs	r6, r1
 80002ac:	4661      	mov	r1, ip
 80002ae:	0404      	lsls	r4, r0, #16
 80002b0:	0c24      	lsrs	r4, r4, #16
 80002b2:	b580      	push	{r7, lr}
 80002b4:	0007      	movs	r7, r0
 80002b6:	0c10      	lsrs	r0, r2, #16
 80002b8:	434b      	muls	r3, r1
 80002ba:	4365      	muls	r5, r4
 80002bc:	4341      	muls	r1, r0
 80002be:	4360      	muls	r0, r4
 80002c0:	0c2c      	lsrs	r4, r5, #16
 80002c2:	18c0      	adds	r0, r0, r3
 80002c4:	1820      	adds	r0, r4, r0
 80002c6:	468c      	mov	ip, r1
 80002c8:	4283      	cmp	r3, r0
 80002ca:	d903      	bls.n	80002d4 <__aeabi_lmul+0x3c>
 80002cc:	2380      	movs	r3, #128	; 0x80
 80002ce:	025b      	lsls	r3, r3, #9
 80002d0:	4698      	mov	r8, r3
 80002d2:	44c4      	add	ip, r8
 80002d4:	4649      	mov	r1, r9
 80002d6:	4379      	muls	r1, r7
 80002d8:	4356      	muls	r6, r2
 80002da:	0c03      	lsrs	r3, r0, #16
 80002dc:	042d      	lsls	r5, r5, #16
 80002de:	0c2d      	lsrs	r5, r5, #16
 80002e0:	1989      	adds	r1, r1, r6
 80002e2:	4463      	add	r3, ip
 80002e4:	0400      	lsls	r0, r0, #16
 80002e6:	1940      	adds	r0, r0, r5
 80002e8:	18c9      	adds	r1, r1, r3
 80002ea:	bcc0      	pop	{r6, r7}
 80002ec:	46b9      	mov	r9, r7
 80002ee:	46b0      	mov	r8, r6
 80002f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002f2:	46c0      	nop			; (mov r8, r8)

080002f4 <__aeabi_f2uiz>:
 80002f4:	219e      	movs	r1, #158	; 0x9e
 80002f6:	b510      	push	{r4, lr}
 80002f8:	05c9      	lsls	r1, r1, #23
 80002fa:	1c04      	adds	r4, r0, #0
 80002fc:	f000 fb16 	bl	800092c <__aeabi_fcmpge>
 8000300:	2800      	cmp	r0, #0
 8000302:	d103      	bne.n	800030c <__aeabi_f2uiz+0x18>
 8000304:	1c20      	adds	r0, r4, #0
 8000306:	f000 fa79 	bl	80007fc <__aeabi_f2iz>
 800030a:	bd10      	pop	{r4, pc}
 800030c:	219e      	movs	r1, #158	; 0x9e
 800030e:	1c20      	adds	r0, r4, #0
 8000310:	05c9      	lsls	r1, r1, #23
 8000312:	f000 f8d3 	bl	80004bc <__aeabi_fsub>
 8000316:	f000 fa71 	bl	80007fc <__aeabi_f2iz>
 800031a:	2380      	movs	r3, #128	; 0x80
 800031c:	061b      	lsls	r3, r3, #24
 800031e:	469c      	mov	ip, r3
 8000320:	4460      	add	r0, ip
 8000322:	e7f2      	b.n	800030a <__aeabi_f2uiz+0x16>

08000324 <__udivmoddi4>:
 8000324:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000326:	4657      	mov	r7, sl
 8000328:	464e      	mov	r6, r9
 800032a:	4645      	mov	r5, r8
 800032c:	46de      	mov	lr, fp
 800032e:	b5e0      	push	{r5, r6, r7, lr}
 8000330:	0004      	movs	r4, r0
 8000332:	000d      	movs	r5, r1
 8000334:	4692      	mov	sl, r2
 8000336:	4699      	mov	r9, r3
 8000338:	b083      	sub	sp, #12
 800033a:	428b      	cmp	r3, r1
 800033c:	d830      	bhi.n	80003a0 <__udivmoddi4+0x7c>
 800033e:	d02d      	beq.n	800039c <__udivmoddi4+0x78>
 8000340:	4649      	mov	r1, r9
 8000342:	4650      	mov	r0, sl
 8000344:	f000 fb1a 	bl	800097c <__clzdi2>
 8000348:	0029      	movs	r1, r5
 800034a:	0006      	movs	r6, r0
 800034c:	0020      	movs	r0, r4
 800034e:	f000 fb15 	bl	800097c <__clzdi2>
 8000352:	1a33      	subs	r3, r6, r0
 8000354:	4698      	mov	r8, r3
 8000356:	3b20      	subs	r3, #32
 8000358:	d434      	bmi.n	80003c4 <__udivmoddi4+0xa0>
 800035a:	469b      	mov	fp, r3
 800035c:	4653      	mov	r3, sl
 800035e:	465a      	mov	r2, fp
 8000360:	4093      	lsls	r3, r2
 8000362:	4642      	mov	r2, r8
 8000364:	001f      	movs	r7, r3
 8000366:	4653      	mov	r3, sl
 8000368:	4093      	lsls	r3, r2
 800036a:	001e      	movs	r6, r3
 800036c:	42af      	cmp	r7, r5
 800036e:	d83b      	bhi.n	80003e8 <__udivmoddi4+0xc4>
 8000370:	42af      	cmp	r7, r5
 8000372:	d100      	bne.n	8000376 <__udivmoddi4+0x52>
 8000374:	e079      	b.n	800046a <__udivmoddi4+0x146>
 8000376:	465b      	mov	r3, fp
 8000378:	1ba4      	subs	r4, r4, r6
 800037a:	41bd      	sbcs	r5, r7
 800037c:	2b00      	cmp	r3, #0
 800037e:	da00      	bge.n	8000382 <__udivmoddi4+0x5e>
 8000380:	e076      	b.n	8000470 <__udivmoddi4+0x14c>
 8000382:	2200      	movs	r2, #0
 8000384:	2300      	movs	r3, #0
 8000386:	9200      	str	r2, [sp, #0]
 8000388:	9301      	str	r3, [sp, #4]
 800038a:	2301      	movs	r3, #1
 800038c:	465a      	mov	r2, fp
 800038e:	4093      	lsls	r3, r2
 8000390:	9301      	str	r3, [sp, #4]
 8000392:	2301      	movs	r3, #1
 8000394:	4642      	mov	r2, r8
 8000396:	4093      	lsls	r3, r2
 8000398:	9300      	str	r3, [sp, #0]
 800039a:	e029      	b.n	80003f0 <__udivmoddi4+0xcc>
 800039c:	4282      	cmp	r2, r0
 800039e:	d9cf      	bls.n	8000340 <__udivmoddi4+0x1c>
 80003a0:	2200      	movs	r2, #0
 80003a2:	2300      	movs	r3, #0
 80003a4:	9200      	str	r2, [sp, #0]
 80003a6:	9301      	str	r3, [sp, #4]
 80003a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	d001      	beq.n	80003b2 <__udivmoddi4+0x8e>
 80003ae:	601c      	str	r4, [r3, #0]
 80003b0:	605d      	str	r5, [r3, #4]
 80003b2:	9800      	ldr	r0, [sp, #0]
 80003b4:	9901      	ldr	r1, [sp, #4]
 80003b6:	b003      	add	sp, #12
 80003b8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ba:	46bb      	mov	fp, r7
 80003bc:	46b2      	mov	sl, r6
 80003be:	46a9      	mov	r9, r5
 80003c0:	46a0      	mov	r8, r4
 80003c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80003c4:	4642      	mov	r2, r8
 80003c6:	469b      	mov	fp, r3
 80003c8:	2320      	movs	r3, #32
 80003ca:	1a9b      	subs	r3, r3, r2
 80003cc:	4652      	mov	r2, sl
 80003ce:	40da      	lsrs	r2, r3
 80003d0:	4641      	mov	r1, r8
 80003d2:	0013      	movs	r3, r2
 80003d4:	464a      	mov	r2, r9
 80003d6:	408a      	lsls	r2, r1
 80003d8:	0017      	movs	r7, r2
 80003da:	4642      	mov	r2, r8
 80003dc:	431f      	orrs	r7, r3
 80003de:	4653      	mov	r3, sl
 80003e0:	4093      	lsls	r3, r2
 80003e2:	001e      	movs	r6, r3
 80003e4:	42af      	cmp	r7, r5
 80003e6:	d9c3      	bls.n	8000370 <__udivmoddi4+0x4c>
 80003e8:	2200      	movs	r2, #0
 80003ea:	2300      	movs	r3, #0
 80003ec:	9200      	str	r2, [sp, #0]
 80003ee:	9301      	str	r3, [sp, #4]
 80003f0:	4643      	mov	r3, r8
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d0d8      	beq.n	80003a8 <__udivmoddi4+0x84>
 80003f6:	07fb      	lsls	r3, r7, #31
 80003f8:	0872      	lsrs	r2, r6, #1
 80003fa:	431a      	orrs	r2, r3
 80003fc:	4646      	mov	r6, r8
 80003fe:	087b      	lsrs	r3, r7, #1
 8000400:	e00e      	b.n	8000420 <__udivmoddi4+0xfc>
 8000402:	42ab      	cmp	r3, r5
 8000404:	d101      	bne.n	800040a <__udivmoddi4+0xe6>
 8000406:	42a2      	cmp	r2, r4
 8000408:	d80c      	bhi.n	8000424 <__udivmoddi4+0x100>
 800040a:	1aa4      	subs	r4, r4, r2
 800040c:	419d      	sbcs	r5, r3
 800040e:	2001      	movs	r0, #1
 8000410:	1924      	adds	r4, r4, r4
 8000412:	416d      	adcs	r5, r5
 8000414:	2100      	movs	r1, #0
 8000416:	3e01      	subs	r6, #1
 8000418:	1824      	adds	r4, r4, r0
 800041a:	414d      	adcs	r5, r1
 800041c:	2e00      	cmp	r6, #0
 800041e:	d006      	beq.n	800042e <__udivmoddi4+0x10a>
 8000420:	42ab      	cmp	r3, r5
 8000422:	d9ee      	bls.n	8000402 <__udivmoddi4+0xde>
 8000424:	3e01      	subs	r6, #1
 8000426:	1924      	adds	r4, r4, r4
 8000428:	416d      	adcs	r5, r5
 800042a:	2e00      	cmp	r6, #0
 800042c:	d1f8      	bne.n	8000420 <__udivmoddi4+0xfc>
 800042e:	9800      	ldr	r0, [sp, #0]
 8000430:	9901      	ldr	r1, [sp, #4]
 8000432:	465b      	mov	r3, fp
 8000434:	1900      	adds	r0, r0, r4
 8000436:	4169      	adcs	r1, r5
 8000438:	2b00      	cmp	r3, #0
 800043a:	db24      	blt.n	8000486 <__udivmoddi4+0x162>
 800043c:	002b      	movs	r3, r5
 800043e:	465a      	mov	r2, fp
 8000440:	4644      	mov	r4, r8
 8000442:	40d3      	lsrs	r3, r2
 8000444:	002a      	movs	r2, r5
 8000446:	40e2      	lsrs	r2, r4
 8000448:	001c      	movs	r4, r3
 800044a:	465b      	mov	r3, fp
 800044c:	0015      	movs	r5, r2
 800044e:	2b00      	cmp	r3, #0
 8000450:	db2a      	blt.n	80004a8 <__udivmoddi4+0x184>
 8000452:	0026      	movs	r6, r4
 8000454:	409e      	lsls	r6, r3
 8000456:	0033      	movs	r3, r6
 8000458:	0026      	movs	r6, r4
 800045a:	4647      	mov	r7, r8
 800045c:	40be      	lsls	r6, r7
 800045e:	0032      	movs	r2, r6
 8000460:	1a80      	subs	r0, r0, r2
 8000462:	4199      	sbcs	r1, r3
 8000464:	9000      	str	r0, [sp, #0]
 8000466:	9101      	str	r1, [sp, #4]
 8000468:	e79e      	b.n	80003a8 <__udivmoddi4+0x84>
 800046a:	42a3      	cmp	r3, r4
 800046c:	d8bc      	bhi.n	80003e8 <__udivmoddi4+0xc4>
 800046e:	e782      	b.n	8000376 <__udivmoddi4+0x52>
 8000470:	4642      	mov	r2, r8
 8000472:	2320      	movs	r3, #32
 8000474:	2100      	movs	r1, #0
 8000476:	1a9b      	subs	r3, r3, r2
 8000478:	2200      	movs	r2, #0
 800047a:	9100      	str	r1, [sp, #0]
 800047c:	9201      	str	r2, [sp, #4]
 800047e:	2201      	movs	r2, #1
 8000480:	40da      	lsrs	r2, r3
 8000482:	9201      	str	r2, [sp, #4]
 8000484:	e785      	b.n	8000392 <__udivmoddi4+0x6e>
 8000486:	4642      	mov	r2, r8
 8000488:	2320      	movs	r3, #32
 800048a:	1a9b      	subs	r3, r3, r2
 800048c:	002a      	movs	r2, r5
 800048e:	4646      	mov	r6, r8
 8000490:	409a      	lsls	r2, r3
 8000492:	0023      	movs	r3, r4
 8000494:	40f3      	lsrs	r3, r6
 8000496:	4644      	mov	r4, r8
 8000498:	4313      	orrs	r3, r2
 800049a:	002a      	movs	r2, r5
 800049c:	40e2      	lsrs	r2, r4
 800049e:	001c      	movs	r4, r3
 80004a0:	465b      	mov	r3, fp
 80004a2:	0015      	movs	r5, r2
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	dad4      	bge.n	8000452 <__udivmoddi4+0x12e>
 80004a8:	4642      	mov	r2, r8
 80004aa:	002f      	movs	r7, r5
 80004ac:	2320      	movs	r3, #32
 80004ae:	0026      	movs	r6, r4
 80004b0:	4097      	lsls	r7, r2
 80004b2:	1a9b      	subs	r3, r3, r2
 80004b4:	40de      	lsrs	r6, r3
 80004b6:	003b      	movs	r3, r7
 80004b8:	4333      	orrs	r3, r6
 80004ba:	e7cd      	b.n	8000458 <__udivmoddi4+0x134>

080004bc <__aeabi_fsub>:
 80004bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004be:	46c6      	mov	lr, r8
 80004c0:	0243      	lsls	r3, r0, #9
 80004c2:	0a5b      	lsrs	r3, r3, #9
 80004c4:	0045      	lsls	r5, r0, #1
 80004c6:	00da      	lsls	r2, r3, #3
 80004c8:	0fc4      	lsrs	r4, r0, #31
 80004ca:	0248      	lsls	r0, r1, #9
 80004cc:	004f      	lsls	r7, r1, #1
 80004ce:	4694      	mov	ip, r2
 80004d0:	0a42      	lsrs	r2, r0, #9
 80004d2:	001e      	movs	r6, r3
 80004d4:	4690      	mov	r8, r2
 80004d6:	b500      	push	{lr}
 80004d8:	0e2d      	lsrs	r5, r5, #24
 80004da:	0e3f      	lsrs	r7, r7, #24
 80004dc:	0fc9      	lsrs	r1, r1, #31
 80004de:	0980      	lsrs	r0, r0, #6
 80004e0:	2fff      	cmp	r7, #255	; 0xff
 80004e2:	d059      	beq.n	8000598 <__aeabi_fsub+0xdc>
 80004e4:	2201      	movs	r2, #1
 80004e6:	4051      	eors	r1, r2
 80004e8:	428c      	cmp	r4, r1
 80004ea:	d039      	beq.n	8000560 <__aeabi_fsub+0xa4>
 80004ec:	1bea      	subs	r2, r5, r7
 80004ee:	2a00      	cmp	r2, #0
 80004f0:	dd58      	ble.n	80005a4 <__aeabi_fsub+0xe8>
 80004f2:	2f00      	cmp	r7, #0
 80004f4:	d068      	beq.n	80005c8 <__aeabi_fsub+0x10c>
 80004f6:	2dff      	cmp	r5, #255	; 0xff
 80004f8:	d100      	bne.n	80004fc <__aeabi_fsub+0x40>
 80004fa:	e0d1      	b.n	80006a0 <__aeabi_fsub+0x1e4>
 80004fc:	2380      	movs	r3, #128	; 0x80
 80004fe:	04db      	lsls	r3, r3, #19
 8000500:	4318      	orrs	r0, r3
 8000502:	2a1b      	cmp	r2, #27
 8000504:	dc00      	bgt.n	8000508 <__aeabi_fsub+0x4c>
 8000506:	e0e3      	b.n	80006d0 <__aeabi_fsub+0x214>
 8000508:	2301      	movs	r3, #1
 800050a:	4662      	mov	r2, ip
 800050c:	1ad3      	subs	r3, r2, r3
 800050e:	015a      	lsls	r2, r3, #5
 8000510:	d400      	bmi.n	8000514 <__aeabi_fsub+0x58>
 8000512:	e0ac      	b.n	800066e <__aeabi_fsub+0x1b2>
 8000514:	019b      	lsls	r3, r3, #6
 8000516:	099e      	lsrs	r6, r3, #6
 8000518:	0030      	movs	r0, r6
 800051a:	f000 fa11 	bl	8000940 <__clzsi2>
 800051e:	0033      	movs	r3, r6
 8000520:	3805      	subs	r0, #5
 8000522:	4083      	lsls	r3, r0
 8000524:	4285      	cmp	r5, r0
 8000526:	dc00      	bgt.n	800052a <__aeabi_fsub+0x6e>
 8000528:	e0c6      	b.n	80006b8 <__aeabi_fsub+0x1fc>
 800052a:	4ab2      	ldr	r2, [pc, #712]	; (80007f4 <__aeabi_fsub+0x338>)
 800052c:	1a2d      	subs	r5, r5, r0
 800052e:	4013      	ands	r3, r2
 8000530:	075a      	lsls	r2, r3, #29
 8000532:	d004      	beq.n	800053e <__aeabi_fsub+0x82>
 8000534:	220f      	movs	r2, #15
 8000536:	401a      	ands	r2, r3
 8000538:	2a04      	cmp	r2, #4
 800053a:	d000      	beq.n	800053e <__aeabi_fsub+0x82>
 800053c:	3304      	adds	r3, #4
 800053e:	015a      	lsls	r2, r3, #5
 8000540:	d400      	bmi.n	8000544 <__aeabi_fsub+0x88>
 8000542:	e097      	b.n	8000674 <__aeabi_fsub+0x1b8>
 8000544:	1c6a      	adds	r2, r5, #1
 8000546:	2dfe      	cmp	r5, #254	; 0xfe
 8000548:	d100      	bne.n	800054c <__aeabi_fsub+0x90>
 800054a:	e084      	b.n	8000656 <__aeabi_fsub+0x19a>
 800054c:	019b      	lsls	r3, r3, #6
 800054e:	0a5e      	lsrs	r6, r3, #9
 8000550:	b2d2      	uxtb	r2, r2
 8000552:	05d0      	lsls	r0, r2, #23
 8000554:	4330      	orrs	r0, r6
 8000556:	07e4      	lsls	r4, r4, #31
 8000558:	4320      	orrs	r0, r4
 800055a:	bc80      	pop	{r7}
 800055c:	46b8      	mov	r8, r7
 800055e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000560:	1bea      	subs	r2, r5, r7
 8000562:	2a00      	cmp	r2, #0
 8000564:	dd41      	ble.n	80005ea <__aeabi_fsub+0x12e>
 8000566:	2f00      	cmp	r7, #0
 8000568:	d06b      	beq.n	8000642 <__aeabi_fsub+0x186>
 800056a:	2dff      	cmp	r5, #255	; 0xff
 800056c:	d100      	bne.n	8000570 <__aeabi_fsub+0xb4>
 800056e:	e097      	b.n	80006a0 <__aeabi_fsub+0x1e4>
 8000570:	2380      	movs	r3, #128	; 0x80
 8000572:	04db      	lsls	r3, r3, #19
 8000574:	4318      	orrs	r0, r3
 8000576:	2a1b      	cmp	r2, #27
 8000578:	dc00      	bgt.n	800057c <__aeabi_fsub+0xc0>
 800057a:	e0cc      	b.n	8000716 <__aeabi_fsub+0x25a>
 800057c:	2301      	movs	r3, #1
 800057e:	4463      	add	r3, ip
 8000580:	015a      	lsls	r2, r3, #5
 8000582:	d574      	bpl.n	800066e <__aeabi_fsub+0x1b2>
 8000584:	3501      	adds	r5, #1
 8000586:	2dff      	cmp	r5, #255	; 0xff
 8000588:	d065      	beq.n	8000656 <__aeabi_fsub+0x19a>
 800058a:	2201      	movs	r2, #1
 800058c:	499a      	ldr	r1, [pc, #616]	; (80007f8 <__aeabi_fsub+0x33c>)
 800058e:	401a      	ands	r2, r3
 8000590:	085b      	lsrs	r3, r3, #1
 8000592:	400b      	ands	r3, r1
 8000594:	4313      	orrs	r3, r2
 8000596:	e7cb      	b.n	8000530 <__aeabi_fsub+0x74>
 8000598:	2800      	cmp	r0, #0
 800059a:	d01f      	beq.n	80005dc <__aeabi_fsub+0x120>
 800059c:	428c      	cmp	r4, r1
 800059e:	d022      	beq.n	80005e6 <__aeabi_fsub+0x12a>
 80005a0:	002a      	movs	r2, r5
 80005a2:	3aff      	subs	r2, #255	; 0xff
 80005a4:	2a00      	cmp	r2, #0
 80005a6:	d035      	beq.n	8000614 <__aeabi_fsub+0x158>
 80005a8:	1b7a      	subs	r2, r7, r5
 80005aa:	2d00      	cmp	r5, #0
 80005ac:	d000      	beq.n	80005b0 <__aeabi_fsub+0xf4>
 80005ae:	e099      	b.n	80006e4 <__aeabi_fsub+0x228>
 80005b0:	4663      	mov	r3, ip
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d100      	bne.n	80005b8 <__aeabi_fsub+0xfc>
 80005b6:	e0dd      	b.n	8000774 <__aeabi_fsub+0x2b8>
 80005b8:	1e53      	subs	r3, r2, #1
 80005ba:	2a01      	cmp	r2, #1
 80005bc:	d100      	bne.n	80005c0 <__aeabi_fsub+0x104>
 80005be:	e105      	b.n	80007cc <__aeabi_fsub+0x310>
 80005c0:	2aff      	cmp	r2, #255	; 0xff
 80005c2:	d06b      	beq.n	800069c <__aeabi_fsub+0x1e0>
 80005c4:	001a      	movs	r2, r3
 80005c6:	e094      	b.n	80006f2 <__aeabi_fsub+0x236>
 80005c8:	2800      	cmp	r0, #0
 80005ca:	d073      	beq.n	80006b4 <__aeabi_fsub+0x1f8>
 80005cc:	1e51      	subs	r1, r2, #1
 80005ce:	2a01      	cmp	r2, #1
 80005d0:	d100      	bne.n	80005d4 <__aeabi_fsub+0x118>
 80005d2:	e0df      	b.n	8000794 <__aeabi_fsub+0x2d8>
 80005d4:	2aff      	cmp	r2, #255	; 0xff
 80005d6:	d063      	beq.n	80006a0 <__aeabi_fsub+0x1e4>
 80005d8:	000a      	movs	r2, r1
 80005da:	e792      	b.n	8000502 <__aeabi_fsub+0x46>
 80005dc:	2201      	movs	r2, #1
 80005de:	4051      	eors	r1, r2
 80005e0:	42a1      	cmp	r1, r4
 80005e2:	d000      	beq.n	80005e6 <__aeabi_fsub+0x12a>
 80005e4:	e782      	b.n	80004ec <__aeabi_fsub+0x30>
 80005e6:	002a      	movs	r2, r5
 80005e8:	3aff      	subs	r2, #255	; 0xff
 80005ea:	2a00      	cmp	r2, #0
 80005ec:	d036      	beq.n	800065c <__aeabi_fsub+0x1a0>
 80005ee:	1b7a      	subs	r2, r7, r5
 80005f0:	2d00      	cmp	r5, #0
 80005f2:	d100      	bne.n	80005f6 <__aeabi_fsub+0x13a>
 80005f4:	e0aa      	b.n	800074c <__aeabi_fsub+0x290>
 80005f6:	2fff      	cmp	r7, #255	; 0xff
 80005f8:	d100      	bne.n	80005fc <__aeabi_fsub+0x140>
 80005fa:	e0da      	b.n	80007b2 <__aeabi_fsub+0x2f6>
 80005fc:	2380      	movs	r3, #128	; 0x80
 80005fe:	4661      	mov	r1, ip
 8000600:	04db      	lsls	r3, r3, #19
 8000602:	4319      	orrs	r1, r3
 8000604:	468c      	mov	ip, r1
 8000606:	2a1b      	cmp	r2, #27
 8000608:	dc00      	bgt.n	800060c <__aeabi_fsub+0x150>
 800060a:	e0d4      	b.n	80007b6 <__aeabi_fsub+0x2fa>
 800060c:	2301      	movs	r3, #1
 800060e:	003d      	movs	r5, r7
 8000610:	181b      	adds	r3, r3, r0
 8000612:	e7b5      	b.n	8000580 <__aeabi_fsub+0xc4>
 8000614:	27fe      	movs	r7, #254	; 0xfe
 8000616:	1c6a      	adds	r2, r5, #1
 8000618:	4217      	tst	r7, r2
 800061a:	d171      	bne.n	8000700 <__aeabi_fsub+0x244>
 800061c:	2d00      	cmp	r5, #0
 800061e:	d000      	beq.n	8000622 <__aeabi_fsub+0x166>
 8000620:	e09e      	b.n	8000760 <__aeabi_fsub+0x2a4>
 8000622:	4663      	mov	r3, ip
 8000624:	2b00      	cmp	r3, #0
 8000626:	d100      	bne.n	800062a <__aeabi_fsub+0x16e>
 8000628:	e0d5      	b.n	80007d6 <__aeabi_fsub+0x31a>
 800062a:	2200      	movs	r2, #0
 800062c:	2800      	cmp	r0, #0
 800062e:	d100      	bne.n	8000632 <__aeabi_fsub+0x176>
 8000630:	e78f      	b.n	8000552 <__aeabi_fsub+0x96>
 8000632:	1a1b      	subs	r3, r3, r0
 8000634:	015e      	lsls	r6, r3, #5
 8000636:	d400      	bmi.n	800063a <__aeabi_fsub+0x17e>
 8000638:	e0d6      	b.n	80007e8 <__aeabi_fsub+0x32c>
 800063a:	4663      	mov	r3, ip
 800063c:	000c      	movs	r4, r1
 800063e:	1ac3      	subs	r3, r0, r3
 8000640:	e776      	b.n	8000530 <__aeabi_fsub+0x74>
 8000642:	2800      	cmp	r0, #0
 8000644:	d036      	beq.n	80006b4 <__aeabi_fsub+0x1f8>
 8000646:	1e51      	subs	r1, r2, #1
 8000648:	2a01      	cmp	r2, #1
 800064a:	d100      	bne.n	800064e <__aeabi_fsub+0x192>
 800064c:	e09a      	b.n	8000784 <__aeabi_fsub+0x2c8>
 800064e:	2aff      	cmp	r2, #255	; 0xff
 8000650:	d026      	beq.n	80006a0 <__aeabi_fsub+0x1e4>
 8000652:	000a      	movs	r2, r1
 8000654:	e78f      	b.n	8000576 <__aeabi_fsub+0xba>
 8000656:	22ff      	movs	r2, #255	; 0xff
 8000658:	2600      	movs	r6, #0
 800065a:	e77a      	b.n	8000552 <__aeabi_fsub+0x96>
 800065c:	27fe      	movs	r7, #254	; 0xfe
 800065e:	1c6a      	adds	r2, r5, #1
 8000660:	4217      	tst	r7, r2
 8000662:	d062      	beq.n	800072a <__aeabi_fsub+0x26e>
 8000664:	2aff      	cmp	r2, #255	; 0xff
 8000666:	d0f6      	beq.n	8000656 <__aeabi_fsub+0x19a>
 8000668:	0015      	movs	r5, r2
 800066a:	4460      	add	r0, ip
 800066c:	0843      	lsrs	r3, r0, #1
 800066e:	075a      	lsls	r2, r3, #29
 8000670:	d000      	beq.n	8000674 <__aeabi_fsub+0x1b8>
 8000672:	e75f      	b.n	8000534 <__aeabi_fsub+0x78>
 8000674:	08db      	lsrs	r3, r3, #3
 8000676:	2dff      	cmp	r5, #255	; 0xff
 8000678:	d012      	beq.n	80006a0 <__aeabi_fsub+0x1e4>
 800067a:	025b      	lsls	r3, r3, #9
 800067c:	0a5e      	lsrs	r6, r3, #9
 800067e:	b2ea      	uxtb	r2, r5
 8000680:	e767      	b.n	8000552 <__aeabi_fsub+0x96>
 8000682:	4662      	mov	r2, ip
 8000684:	2a00      	cmp	r2, #0
 8000686:	d100      	bne.n	800068a <__aeabi_fsub+0x1ce>
 8000688:	e093      	b.n	80007b2 <__aeabi_fsub+0x2f6>
 800068a:	2800      	cmp	r0, #0
 800068c:	d008      	beq.n	80006a0 <__aeabi_fsub+0x1e4>
 800068e:	2280      	movs	r2, #128	; 0x80
 8000690:	03d2      	lsls	r2, r2, #15
 8000692:	4213      	tst	r3, r2
 8000694:	d004      	beq.n	80006a0 <__aeabi_fsub+0x1e4>
 8000696:	4640      	mov	r0, r8
 8000698:	4210      	tst	r0, r2
 800069a:	d101      	bne.n	80006a0 <__aeabi_fsub+0x1e4>
 800069c:	000c      	movs	r4, r1
 800069e:	4643      	mov	r3, r8
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d0d8      	beq.n	8000656 <__aeabi_fsub+0x19a>
 80006a4:	2680      	movs	r6, #128	; 0x80
 80006a6:	03f6      	lsls	r6, r6, #15
 80006a8:	431e      	orrs	r6, r3
 80006aa:	0276      	lsls	r6, r6, #9
 80006ac:	22ff      	movs	r2, #255	; 0xff
 80006ae:	0a76      	lsrs	r6, r6, #9
 80006b0:	e74f      	b.n	8000552 <__aeabi_fsub+0x96>
 80006b2:	4643      	mov	r3, r8
 80006b4:	0015      	movs	r5, r2
 80006b6:	e7de      	b.n	8000676 <__aeabi_fsub+0x1ba>
 80006b8:	2220      	movs	r2, #32
 80006ba:	1b40      	subs	r0, r0, r5
 80006bc:	3001      	adds	r0, #1
 80006be:	1a12      	subs	r2, r2, r0
 80006c0:	0019      	movs	r1, r3
 80006c2:	4093      	lsls	r3, r2
 80006c4:	40c1      	lsrs	r1, r0
 80006c6:	1e5a      	subs	r2, r3, #1
 80006c8:	4193      	sbcs	r3, r2
 80006ca:	2500      	movs	r5, #0
 80006cc:	430b      	orrs	r3, r1
 80006ce:	e72f      	b.n	8000530 <__aeabi_fsub+0x74>
 80006d0:	2320      	movs	r3, #32
 80006d2:	1a9b      	subs	r3, r3, r2
 80006d4:	0001      	movs	r1, r0
 80006d6:	4098      	lsls	r0, r3
 80006d8:	0003      	movs	r3, r0
 80006da:	40d1      	lsrs	r1, r2
 80006dc:	1e5a      	subs	r2, r3, #1
 80006de:	4193      	sbcs	r3, r2
 80006e0:	430b      	orrs	r3, r1
 80006e2:	e712      	b.n	800050a <__aeabi_fsub+0x4e>
 80006e4:	2fff      	cmp	r7, #255	; 0xff
 80006e6:	d0d9      	beq.n	800069c <__aeabi_fsub+0x1e0>
 80006e8:	2380      	movs	r3, #128	; 0x80
 80006ea:	4664      	mov	r4, ip
 80006ec:	04db      	lsls	r3, r3, #19
 80006ee:	431c      	orrs	r4, r3
 80006f0:	46a4      	mov	ip, r4
 80006f2:	2a1b      	cmp	r2, #27
 80006f4:	dd52      	ble.n	800079c <__aeabi_fsub+0x2e0>
 80006f6:	2301      	movs	r3, #1
 80006f8:	000c      	movs	r4, r1
 80006fa:	003d      	movs	r5, r7
 80006fc:	1ac3      	subs	r3, r0, r3
 80006fe:	e706      	b.n	800050e <__aeabi_fsub+0x52>
 8000700:	4663      	mov	r3, ip
 8000702:	1a1e      	subs	r6, r3, r0
 8000704:	0173      	lsls	r3, r6, #5
 8000706:	d439      	bmi.n	800077c <__aeabi_fsub+0x2c0>
 8000708:	2e00      	cmp	r6, #0
 800070a:	d000      	beq.n	800070e <__aeabi_fsub+0x252>
 800070c:	e704      	b.n	8000518 <__aeabi_fsub+0x5c>
 800070e:	2400      	movs	r4, #0
 8000710:	2200      	movs	r2, #0
 8000712:	2600      	movs	r6, #0
 8000714:	e71d      	b.n	8000552 <__aeabi_fsub+0x96>
 8000716:	2320      	movs	r3, #32
 8000718:	1a9b      	subs	r3, r3, r2
 800071a:	0001      	movs	r1, r0
 800071c:	4098      	lsls	r0, r3
 800071e:	0003      	movs	r3, r0
 8000720:	40d1      	lsrs	r1, r2
 8000722:	1e5a      	subs	r2, r3, #1
 8000724:	4193      	sbcs	r3, r2
 8000726:	430b      	orrs	r3, r1
 8000728:	e729      	b.n	800057e <__aeabi_fsub+0xc2>
 800072a:	2d00      	cmp	r5, #0
 800072c:	d1a9      	bne.n	8000682 <__aeabi_fsub+0x1c6>
 800072e:	4663      	mov	r3, ip
 8000730:	2b00      	cmp	r3, #0
 8000732:	d056      	beq.n	80007e2 <__aeabi_fsub+0x326>
 8000734:	2200      	movs	r2, #0
 8000736:	2800      	cmp	r0, #0
 8000738:	d100      	bne.n	800073c <__aeabi_fsub+0x280>
 800073a:	e70a      	b.n	8000552 <__aeabi_fsub+0x96>
 800073c:	0003      	movs	r3, r0
 800073e:	4463      	add	r3, ip
 8000740:	015a      	lsls	r2, r3, #5
 8000742:	d594      	bpl.n	800066e <__aeabi_fsub+0x1b2>
 8000744:	4a2b      	ldr	r2, [pc, #172]	; (80007f4 <__aeabi_fsub+0x338>)
 8000746:	3501      	adds	r5, #1
 8000748:	4013      	ands	r3, r2
 800074a:	e790      	b.n	800066e <__aeabi_fsub+0x1b2>
 800074c:	4663      	mov	r3, ip
 800074e:	2b00      	cmp	r3, #0
 8000750:	d0af      	beq.n	80006b2 <__aeabi_fsub+0x1f6>
 8000752:	1e53      	subs	r3, r2, #1
 8000754:	2a01      	cmp	r2, #1
 8000756:	d015      	beq.n	8000784 <__aeabi_fsub+0x2c8>
 8000758:	2aff      	cmp	r2, #255	; 0xff
 800075a:	d02a      	beq.n	80007b2 <__aeabi_fsub+0x2f6>
 800075c:	001a      	movs	r2, r3
 800075e:	e752      	b.n	8000606 <__aeabi_fsub+0x14a>
 8000760:	4662      	mov	r2, ip
 8000762:	2a00      	cmp	r2, #0
 8000764:	d191      	bne.n	800068a <__aeabi_fsub+0x1ce>
 8000766:	2800      	cmp	r0, #0
 8000768:	d198      	bne.n	800069c <__aeabi_fsub+0x1e0>
 800076a:	2680      	movs	r6, #128	; 0x80
 800076c:	2400      	movs	r4, #0
 800076e:	22ff      	movs	r2, #255	; 0xff
 8000770:	03f6      	lsls	r6, r6, #15
 8000772:	e6ee      	b.n	8000552 <__aeabi_fsub+0x96>
 8000774:	000c      	movs	r4, r1
 8000776:	4643      	mov	r3, r8
 8000778:	0015      	movs	r5, r2
 800077a:	e77c      	b.n	8000676 <__aeabi_fsub+0x1ba>
 800077c:	4663      	mov	r3, ip
 800077e:	000c      	movs	r4, r1
 8000780:	1ac6      	subs	r6, r0, r3
 8000782:	e6c9      	b.n	8000518 <__aeabi_fsub+0x5c>
 8000784:	0003      	movs	r3, r0
 8000786:	4463      	add	r3, ip
 8000788:	2501      	movs	r5, #1
 800078a:	015a      	lsls	r2, r3, #5
 800078c:	d400      	bmi.n	8000790 <__aeabi_fsub+0x2d4>
 800078e:	e76e      	b.n	800066e <__aeabi_fsub+0x1b2>
 8000790:	2502      	movs	r5, #2
 8000792:	e6fa      	b.n	800058a <__aeabi_fsub+0xce>
 8000794:	4663      	mov	r3, ip
 8000796:	2501      	movs	r5, #1
 8000798:	1a1b      	subs	r3, r3, r0
 800079a:	e6b8      	b.n	800050e <__aeabi_fsub+0x52>
 800079c:	4664      	mov	r4, ip
 800079e:	2320      	movs	r3, #32
 80007a0:	40d4      	lsrs	r4, r2
 80007a2:	1a9b      	subs	r3, r3, r2
 80007a4:	4662      	mov	r2, ip
 80007a6:	409a      	lsls	r2, r3
 80007a8:	0013      	movs	r3, r2
 80007aa:	1e5a      	subs	r2, r3, #1
 80007ac:	4193      	sbcs	r3, r2
 80007ae:	4323      	orrs	r3, r4
 80007b0:	e7a2      	b.n	80006f8 <__aeabi_fsub+0x23c>
 80007b2:	4643      	mov	r3, r8
 80007b4:	e774      	b.n	80006a0 <__aeabi_fsub+0x1e4>
 80007b6:	4661      	mov	r1, ip
 80007b8:	2320      	movs	r3, #32
 80007ba:	40d1      	lsrs	r1, r2
 80007bc:	1a9b      	subs	r3, r3, r2
 80007be:	4662      	mov	r2, ip
 80007c0:	409a      	lsls	r2, r3
 80007c2:	0013      	movs	r3, r2
 80007c4:	1e5a      	subs	r2, r3, #1
 80007c6:	4193      	sbcs	r3, r2
 80007c8:	430b      	orrs	r3, r1
 80007ca:	e720      	b.n	800060e <__aeabi_fsub+0x152>
 80007cc:	4663      	mov	r3, ip
 80007ce:	000c      	movs	r4, r1
 80007d0:	2501      	movs	r5, #1
 80007d2:	1ac3      	subs	r3, r0, r3
 80007d4:	e69b      	b.n	800050e <__aeabi_fsub+0x52>
 80007d6:	2800      	cmp	r0, #0
 80007d8:	d099      	beq.n	800070e <__aeabi_fsub+0x252>
 80007da:	000c      	movs	r4, r1
 80007dc:	4646      	mov	r6, r8
 80007de:	2200      	movs	r2, #0
 80007e0:	e6b7      	b.n	8000552 <__aeabi_fsub+0x96>
 80007e2:	4646      	mov	r6, r8
 80007e4:	2200      	movs	r2, #0
 80007e6:	e6b4      	b.n	8000552 <__aeabi_fsub+0x96>
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d000      	beq.n	80007ee <__aeabi_fsub+0x332>
 80007ec:	e73f      	b.n	800066e <__aeabi_fsub+0x1b2>
 80007ee:	2400      	movs	r4, #0
 80007f0:	2600      	movs	r6, #0
 80007f2:	e6ae      	b.n	8000552 <__aeabi_fsub+0x96>
 80007f4:	fbffffff 	.word	0xfbffffff
 80007f8:	7dffffff 	.word	0x7dffffff

080007fc <__aeabi_f2iz>:
 80007fc:	0241      	lsls	r1, r0, #9
 80007fe:	0042      	lsls	r2, r0, #1
 8000800:	0fc3      	lsrs	r3, r0, #31
 8000802:	0a49      	lsrs	r1, r1, #9
 8000804:	2000      	movs	r0, #0
 8000806:	0e12      	lsrs	r2, r2, #24
 8000808:	2a7e      	cmp	r2, #126	; 0x7e
 800080a:	dd03      	ble.n	8000814 <__aeabi_f2iz+0x18>
 800080c:	2a9d      	cmp	r2, #157	; 0x9d
 800080e:	dd02      	ble.n	8000816 <__aeabi_f2iz+0x1a>
 8000810:	4a09      	ldr	r2, [pc, #36]	; (8000838 <__aeabi_f2iz+0x3c>)
 8000812:	1898      	adds	r0, r3, r2
 8000814:	4770      	bx	lr
 8000816:	2080      	movs	r0, #128	; 0x80
 8000818:	0400      	lsls	r0, r0, #16
 800081a:	4301      	orrs	r1, r0
 800081c:	2a95      	cmp	r2, #149	; 0x95
 800081e:	dc07      	bgt.n	8000830 <__aeabi_f2iz+0x34>
 8000820:	2096      	movs	r0, #150	; 0x96
 8000822:	1a82      	subs	r2, r0, r2
 8000824:	40d1      	lsrs	r1, r2
 8000826:	4248      	negs	r0, r1
 8000828:	2b00      	cmp	r3, #0
 800082a:	d1f3      	bne.n	8000814 <__aeabi_f2iz+0x18>
 800082c:	0008      	movs	r0, r1
 800082e:	e7f1      	b.n	8000814 <__aeabi_f2iz+0x18>
 8000830:	3a96      	subs	r2, #150	; 0x96
 8000832:	4091      	lsls	r1, r2
 8000834:	e7f7      	b.n	8000826 <__aeabi_f2iz+0x2a>
 8000836:	46c0      	nop			; (mov r8, r8)
 8000838:	7fffffff 	.word	0x7fffffff

0800083c <__aeabi_ui2f>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	1e04      	subs	r4, r0, #0
 8000840:	d00e      	beq.n	8000860 <__aeabi_ui2f+0x24>
 8000842:	f000 f87d 	bl	8000940 <__clzsi2>
 8000846:	239e      	movs	r3, #158	; 0x9e
 8000848:	0001      	movs	r1, r0
 800084a:	1a1b      	subs	r3, r3, r0
 800084c:	2b96      	cmp	r3, #150	; 0x96
 800084e:	dc0c      	bgt.n	800086a <__aeabi_ui2f+0x2e>
 8000850:	2808      	cmp	r0, #8
 8000852:	d02c      	beq.n	80008ae <__aeabi_ui2f+0x72>
 8000854:	3908      	subs	r1, #8
 8000856:	408c      	lsls	r4, r1
 8000858:	0264      	lsls	r4, r4, #9
 800085a:	0a64      	lsrs	r4, r4, #9
 800085c:	b2d8      	uxtb	r0, r3
 800085e:	e001      	b.n	8000864 <__aeabi_ui2f+0x28>
 8000860:	2000      	movs	r0, #0
 8000862:	2400      	movs	r4, #0
 8000864:	05c0      	lsls	r0, r0, #23
 8000866:	4320      	orrs	r0, r4
 8000868:	bd70      	pop	{r4, r5, r6, pc}
 800086a:	2b99      	cmp	r3, #153	; 0x99
 800086c:	dd0a      	ble.n	8000884 <__aeabi_ui2f+0x48>
 800086e:	0002      	movs	r2, r0
 8000870:	0020      	movs	r0, r4
 8000872:	321b      	adds	r2, #27
 8000874:	4090      	lsls	r0, r2
 8000876:	0002      	movs	r2, r0
 8000878:	1e50      	subs	r0, r2, #1
 800087a:	4182      	sbcs	r2, r0
 800087c:	2005      	movs	r0, #5
 800087e:	1a40      	subs	r0, r0, r1
 8000880:	40c4      	lsrs	r4, r0
 8000882:	4314      	orrs	r4, r2
 8000884:	2905      	cmp	r1, #5
 8000886:	dc16      	bgt.n	80008b6 <__aeabi_ui2f+0x7a>
 8000888:	0022      	movs	r2, r4
 800088a:	480f      	ldr	r0, [pc, #60]	; (80008c8 <__aeabi_ui2f+0x8c>)
 800088c:	4002      	ands	r2, r0
 800088e:	0765      	lsls	r5, r4, #29
 8000890:	d009      	beq.n	80008a6 <__aeabi_ui2f+0x6a>
 8000892:	250f      	movs	r5, #15
 8000894:	402c      	ands	r4, r5
 8000896:	2c04      	cmp	r4, #4
 8000898:	d005      	beq.n	80008a6 <__aeabi_ui2f+0x6a>
 800089a:	3204      	adds	r2, #4
 800089c:	0154      	lsls	r4, r2, #5
 800089e:	d502      	bpl.n	80008a6 <__aeabi_ui2f+0x6a>
 80008a0:	239f      	movs	r3, #159	; 0x9f
 80008a2:	4002      	ands	r2, r0
 80008a4:	1a5b      	subs	r3, r3, r1
 80008a6:	0192      	lsls	r2, r2, #6
 80008a8:	0a54      	lsrs	r4, r2, #9
 80008aa:	b2d8      	uxtb	r0, r3
 80008ac:	e7da      	b.n	8000864 <__aeabi_ui2f+0x28>
 80008ae:	0264      	lsls	r4, r4, #9
 80008b0:	2096      	movs	r0, #150	; 0x96
 80008b2:	0a64      	lsrs	r4, r4, #9
 80008b4:	e7d6      	b.n	8000864 <__aeabi_ui2f+0x28>
 80008b6:	1f4a      	subs	r2, r1, #5
 80008b8:	4094      	lsls	r4, r2
 80008ba:	0022      	movs	r2, r4
 80008bc:	4802      	ldr	r0, [pc, #8]	; (80008c8 <__aeabi_ui2f+0x8c>)
 80008be:	4002      	ands	r2, r0
 80008c0:	0765      	lsls	r5, r4, #29
 80008c2:	d0f0      	beq.n	80008a6 <__aeabi_ui2f+0x6a>
 80008c4:	e7e5      	b.n	8000892 <__aeabi_ui2f+0x56>
 80008c6:	46c0      	nop			; (mov r8, r8)
 80008c8:	fbffffff 	.word	0xfbffffff

080008cc <__aeabi_cfrcmple>:
 80008cc:	4684      	mov	ip, r0
 80008ce:	0008      	movs	r0, r1
 80008d0:	4661      	mov	r1, ip
 80008d2:	e7ff      	b.n	80008d4 <__aeabi_cfcmpeq>

080008d4 <__aeabi_cfcmpeq>:
 80008d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80008d6:	f000 f8c9 	bl	8000a6c <__lesf2>
 80008da:	2800      	cmp	r0, #0
 80008dc:	d401      	bmi.n	80008e2 <__aeabi_cfcmpeq+0xe>
 80008de:	2100      	movs	r1, #0
 80008e0:	42c8      	cmn	r0, r1
 80008e2:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080008e4 <__aeabi_fcmpeq>:
 80008e4:	b510      	push	{r4, lr}
 80008e6:	f000 f855 	bl	8000994 <__eqsf2>
 80008ea:	4240      	negs	r0, r0
 80008ec:	3001      	adds	r0, #1
 80008ee:	bd10      	pop	{r4, pc}

080008f0 <__aeabi_fcmplt>:
 80008f0:	b510      	push	{r4, lr}
 80008f2:	f000 f8bb 	bl	8000a6c <__lesf2>
 80008f6:	2800      	cmp	r0, #0
 80008f8:	db01      	blt.n	80008fe <__aeabi_fcmplt+0xe>
 80008fa:	2000      	movs	r0, #0
 80008fc:	bd10      	pop	{r4, pc}
 80008fe:	2001      	movs	r0, #1
 8000900:	bd10      	pop	{r4, pc}
 8000902:	46c0      	nop			; (mov r8, r8)

08000904 <__aeabi_fcmple>:
 8000904:	b510      	push	{r4, lr}
 8000906:	f000 f8b1 	bl	8000a6c <__lesf2>
 800090a:	2800      	cmp	r0, #0
 800090c:	dd01      	ble.n	8000912 <__aeabi_fcmple+0xe>
 800090e:	2000      	movs	r0, #0
 8000910:	bd10      	pop	{r4, pc}
 8000912:	2001      	movs	r0, #1
 8000914:	bd10      	pop	{r4, pc}
 8000916:	46c0      	nop			; (mov r8, r8)

08000918 <__aeabi_fcmpgt>:
 8000918:	b510      	push	{r4, lr}
 800091a:	f000 f861 	bl	80009e0 <__gesf2>
 800091e:	2800      	cmp	r0, #0
 8000920:	dc01      	bgt.n	8000926 <__aeabi_fcmpgt+0xe>
 8000922:	2000      	movs	r0, #0
 8000924:	bd10      	pop	{r4, pc}
 8000926:	2001      	movs	r0, #1
 8000928:	bd10      	pop	{r4, pc}
 800092a:	46c0      	nop			; (mov r8, r8)

0800092c <__aeabi_fcmpge>:
 800092c:	b510      	push	{r4, lr}
 800092e:	f000 f857 	bl	80009e0 <__gesf2>
 8000932:	2800      	cmp	r0, #0
 8000934:	da01      	bge.n	800093a <__aeabi_fcmpge+0xe>
 8000936:	2000      	movs	r0, #0
 8000938:	bd10      	pop	{r4, pc}
 800093a:	2001      	movs	r0, #1
 800093c:	bd10      	pop	{r4, pc}
 800093e:	46c0      	nop			; (mov r8, r8)

08000940 <__clzsi2>:
 8000940:	211c      	movs	r1, #28
 8000942:	2301      	movs	r3, #1
 8000944:	041b      	lsls	r3, r3, #16
 8000946:	4298      	cmp	r0, r3
 8000948:	d301      	bcc.n	800094e <__clzsi2+0xe>
 800094a:	0c00      	lsrs	r0, r0, #16
 800094c:	3910      	subs	r1, #16
 800094e:	0a1b      	lsrs	r3, r3, #8
 8000950:	4298      	cmp	r0, r3
 8000952:	d301      	bcc.n	8000958 <__clzsi2+0x18>
 8000954:	0a00      	lsrs	r0, r0, #8
 8000956:	3908      	subs	r1, #8
 8000958:	091b      	lsrs	r3, r3, #4
 800095a:	4298      	cmp	r0, r3
 800095c:	d301      	bcc.n	8000962 <__clzsi2+0x22>
 800095e:	0900      	lsrs	r0, r0, #4
 8000960:	3904      	subs	r1, #4
 8000962:	a202      	add	r2, pc, #8	; (adr r2, 800096c <__clzsi2+0x2c>)
 8000964:	5c10      	ldrb	r0, [r2, r0]
 8000966:	1840      	adds	r0, r0, r1
 8000968:	4770      	bx	lr
 800096a:	46c0      	nop			; (mov r8, r8)
 800096c:	02020304 	.word	0x02020304
 8000970:	01010101 	.word	0x01010101
	...

0800097c <__clzdi2>:
 800097c:	b510      	push	{r4, lr}
 800097e:	2900      	cmp	r1, #0
 8000980:	d103      	bne.n	800098a <__clzdi2+0xe>
 8000982:	f7ff ffdd 	bl	8000940 <__clzsi2>
 8000986:	3020      	adds	r0, #32
 8000988:	e002      	b.n	8000990 <__clzdi2+0x14>
 800098a:	0008      	movs	r0, r1
 800098c:	f7ff ffd8 	bl	8000940 <__clzsi2>
 8000990:	bd10      	pop	{r4, pc}
 8000992:	46c0      	nop			; (mov r8, r8)

08000994 <__eqsf2>:
 8000994:	b570      	push	{r4, r5, r6, lr}
 8000996:	0042      	lsls	r2, r0, #1
 8000998:	0245      	lsls	r5, r0, #9
 800099a:	024e      	lsls	r6, r1, #9
 800099c:	004c      	lsls	r4, r1, #1
 800099e:	0fc3      	lsrs	r3, r0, #31
 80009a0:	0a6d      	lsrs	r5, r5, #9
 80009a2:	2001      	movs	r0, #1
 80009a4:	0e12      	lsrs	r2, r2, #24
 80009a6:	0a76      	lsrs	r6, r6, #9
 80009a8:	0e24      	lsrs	r4, r4, #24
 80009aa:	0fc9      	lsrs	r1, r1, #31
 80009ac:	2aff      	cmp	r2, #255	; 0xff
 80009ae:	d006      	beq.n	80009be <__eqsf2+0x2a>
 80009b0:	2cff      	cmp	r4, #255	; 0xff
 80009b2:	d003      	beq.n	80009bc <__eqsf2+0x28>
 80009b4:	42a2      	cmp	r2, r4
 80009b6:	d101      	bne.n	80009bc <__eqsf2+0x28>
 80009b8:	42b5      	cmp	r5, r6
 80009ba:	d006      	beq.n	80009ca <__eqsf2+0x36>
 80009bc:	bd70      	pop	{r4, r5, r6, pc}
 80009be:	2d00      	cmp	r5, #0
 80009c0:	d1fc      	bne.n	80009bc <__eqsf2+0x28>
 80009c2:	2cff      	cmp	r4, #255	; 0xff
 80009c4:	d1fa      	bne.n	80009bc <__eqsf2+0x28>
 80009c6:	2e00      	cmp	r6, #0
 80009c8:	d1f8      	bne.n	80009bc <__eqsf2+0x28>
 80009ca:	428b      	cmp	r3, r1
 80009cc:	d006      	beq.n	80009dc <__eqsf2+0x48>
 80009ce:	2001      	movs	r0, #1
 80009d0:	2a00      	cmp	r2, #0
 80009d2:	d1f3      	bne.n	80009bc <__eqsf2+0x28>
 80009d4:	0028      	movs	r0, r5
 80009d6:	1e43      	subs	r3, r0, #1
 80009d8:	4198      	sbcs	r0, r3
 80009da:	e7ef      	b.n	80009bc <__eqsf2+0x28>
 80009dc:	2000      	movs	r0, #0
 80009de:	e7ed      	b.n	80009bc <__eqsf2+0x28>

080009e0 <__gesf2>:
 80009e0:	b570      	push	{r4, r5, r6, lr}
 80009e2:	0042      	lsls	r2, r0, #1
 80009e4:	0245      	lsls	r5, r0, #9
 80009e6:	024e      	lsls	r6, r1, #9
 80009e8:	004c      	lsls	r4, r1, #1
 80009ea:	0fc3      	lsrs	r3, r0, #31
 80009ec:	0a6d      	lsrs	r5, r5, #9
 80009ee:	0e12      	lsrs	r2, r2, #24
 80009f0:	0a76      	lsrs	r6, r6, #9
 80009f2:	0e24      	lsrs	r4, r4, #24
 80009f4:	0fc8      	lsrs	r0, r1, #31
 80009f6:	2aff      	cmp	r2, #255	; 0xff
 80009f8:	d01b      	beq.n	8000a32 <__gesf2+0x52>
 80009fa:	2cff      	cmp	r4, #255	; 0xff
 80009fc:	d00e      	beq.n	8000a1c <__gesf2+0x3c>
 80009fe:	2a00      	cmp	r2, #0
 8000a00:	d11b      	bne.n	8000a3a <__gesf2+0x5a>
 8000a02:	2c00      	cmp	r4, #0
 8000a04:	d101      	bne.n	8000a0a <__gesf2+0x2a>
 8000a06:	2e00      	cmp	r6, #0
 8000a08:	d01c      	beq.n	8000a44 <__gesf2+0x64>
 8000a0a:	2d00      	cmp	r5, #0
 8000a0c:	d00c      	beq.n	8000a28 <__gesf2+0x48>
 8000a0e:	4283      	cmp	r3, r0
 8000a10:	d01c      	beq.n	8000a4c <__gesf2+0x6c>
 8000a12:	2102      	movs	r1, #2
 8000a14:	1e58      	subs	r0, r3, #1
 8000a16:	4008      	ands	r0, r1
 8000a18:	3801      	subs	r0, #1
 8000a1a:	bd70      	pop	{r4, r5, r6, pc}
 8000a1c:	2e00      	cmp	r6, #0
 8000a1e:	d122      	bne.n	8000a66 <__gesf2+0x86>
 8000a20:	2a00      	cmp	r2, #0
 8000a22:	d1f4      	bne.n	8000a0e <__gesf2+0x2e>
 8000a24:	2d00      	cmp	r5, #0
 8000a26:	d1f2      	bne.n	8000a0e <__gesf2+0x2e>
 8000a28:	2800      	cmp	r0, #0
 8000a2a:	d1f6      	bne.n	8000a1a <__gesf2+0x3a>
 8000a2c:	2001      	movs	r0, #1
 8000a2e:	4240      	negs	r0, r0
 8000a30:	e7f3      	b.n	8000a1a <__gesf2+0x3a>
 8000a32:	2d00      	cmp	r5, #0
 8000a34:	d117      	bne.n	8000a66 <__gesf2+0x86>
 8000a36:	2cff      	cmp	r4, #255	; 0xff
 8000a38:	d0f0      	beq.n	8000a1c <__gesf2+0x3c>
 8000a3a:	2c00      	cmp	r4, #0
 8000a3c:	d1e7      	bne.n	8000a0e <__gesf2+0x2e>
 8000a3e:	2e00      	cmp	r6, #0
 8000a40:	d1e5      	bne.n	8000a0e <__gesf2+0x2e>
 8000a42:	e7e6      	b.n	8000a12 <__gesf2+0x32>
 8000a44:	2000      	movs	r0, #0
 8000a46:	2d00      	cmp	r5, #0
 8000a48:	d0e7      	beq.n	8000a1a <__gesf2+0x3a>
 8000a4a:	e7e2      	b.n	8000a12 <__gesf2+0x32>
 8000a4c:	42a2      	cmp	r2, r4
 8000a4e:	dc05      	bgt.n	8000a5c <__gesf2+0x7c>
 8000a50:	dbea      	blt.n	8000a28 <__gesf2+0x48>
 8000a52:	42b5      	cmp	r5, r6
 8000a54:	d802      	bhi.n	8000a5c <__gesf2+0x7c>
 8000a56:	d3e7      	bcc.n	8000a28 <__gesf2+0x48>
 8000a58:	2000      	movs	r0, #0
 8000a5a:	e7de      	b.n	8000a1a <__gesf2+0x3a>
 8000a5c:	4243      	negs	r3, r0
 8000a5e:	4158      	adcs	r0, r3
 8000a60:	0040      	lsls	r0, r0, #1
 8000a62:	3801      	subs	r0, #1
 8000a64:	e7d9      	b.n	8000a1a <__gesf2+0x3a>
 8000a66:	2002      	movs	r0, #2
 8000a68:	4240      	negs	r0, r0
 8000a6a:	e7d6      	b.n	8000a1a <__gesf2+0x3a>

08000a6c <__lesf2>:
 8000a6c:	b570      	push	{r4, r5, r6, lr}
 8000a6e:	0042      	lsls	r2, r0, #1
 8000a70:	0245      	lsls	r5, r0, #9
 8000a72:	024e      	lsls	r6, r1, #9
 8000a74:	004c      	lsls	r4, r1, #1
 8000a76:	0fc3      	lsrs	r3, r0, #31
 8000a78:	0a6d      	lsrs	r5, r5, #9
 8000a7a:	0e12      	lsrs	r2, r2, #24
 8000a7c:	0a76      	lsrs	r6, r6, #9
 8000a7e:	0e24      	lsrs	r4, r4, #24
 8000a80:	0fc8      	lsrs	r0, r1, #31
 8000a82:	2aff      	cmp	r2, #255	; 0xff
 8000a84:	d00b      	beq.n	8000a9e <__lesf2+0x32>
 8000a86:	2cff      	cmp	r4, #255	; 0xff
 8000a88:	d00d      	beq.n	8000aa6 <__lesf2+0x3a>
 8000a8a:	2a00      	cmp	r2, #0
 8000a8c:	d11f      	bne.n	8000ace <__lesf2+0x62>
 8000a8e:	2c00      	cmp	r4, #0
 8000a90:	d116      	bne.n	8000ac0 <__lesf2+0x54>
 8000a92:	2e00      	cmp	r6, #0
 8000a94:	d114      	bne.n	8000ac0 <__lesf2+0x54>
 8000a96:	2000      	movs	r0, #0
 8000a98:	2d00      	cmp	r5, #0
 8000a9a:	d010      	beq.n	8000abe <__lesf2+0x52>
 8000a9c:	e009      	b.n	8000ab2 <__lesf2+0x46>
 8000a9e:	2d00      	cmp	r5, #0
 8000aa0:	d10c      	bne.n	8000abc <__lesf2+0x50>
 8000aa2:	2cff      	cmp	r4, #255	; 0xff
 8000aa4:	d113      	bne.n	8000ace <__lesf2+0x62>
 8000aa6:	2e00      	cmp	r6, #0
 8000aa8:	d108      	bne.n	8000abc <__lesf2+0x50>
 8000aaa:	2a00      	cmp	r2, #0
 8000aac:	d008      	beq.n	8000ac0 <__lesf2+0x54>
 8000aae:	4283      	cmp	r3, r0
 8000ab0:	d012      	beq.n	8000ad8 <__lesf2+0x6c>
 8000ab2:	2102      	movs	r1, #2
 8000ab4:	1e58      	subs	r0, r3, #1
 8000ab6:	4008      	ands	r0, r1
 8000ab8:	3801      	subs	r0, #1
 8000aba:	e000      	b.n	8000abe <__lesf2+0x52>
 8000abc:	2002      	movs	r0, #2
 8000abe:	bd70      	pop	{r4, r5, r6, pc}
 8000ac0:	2d00      	cmp	r5, #0
 8000ac2:	d1f4      	bne.n	8000aae <__lesf2+0x42>
 8000ac4:	2800      	cmp	r0, #0
 8000ac6:	d1fa      	bne.n	8000abe <__lesf2+0x52>
 8000ac8:	2001      	movs	r0, #1
 8000aca:	4240      	negs	r0, r0
 8000acc:	e7f7      	b.n	8000abe <__lesf2+0x52>
 8000ace:	2c00      	cmp	r4, #0
 8000ad0:	d1ed      	bne.n	8000aae <__lesf2+0x42>
 8000ad2:	2e00      	cmp	r6, #0
 8000ad4:	d1eb      	bne.n	8000aae <__lesf2+0x42>
 8000ad6:	e7ec      	b.n	8000ab2 <__lesf2+0x46>
 8000ad8:	42a2      	cmp	r2, r4
 8000ada:	dc05      	bgt.n	8000ae8 <__lesf2+0x7c>
 8000adc:	dbf2      	blt.n	8000ac4 <__lesf2+0x58>
 8000ade:	42b5      	cmp	r5, r6
 8000ae0:	d802      	bhi.n	8000ae8 <__lesf2+0x7c>
 8000ae2:	d3ef      	bcc.n	8000ac4 <__lesf2+0x58>
 8000ae4:	2000      	movs	r0, #0
 8000ae6:	e7ea      	b.n	8000abe <__lesf2+0x52>
 8000ae8:	4243      	negs	r3, r0
 8000aea:	4158      	adcs	r0, r3
 8000aec:	0040      	lsls	r0, r0, #1
 8000aee:	3801      	subs	r0, #1
 8000af0:	e7e5      	b.n	8000abe <__lesf2+0x52>
 8000af2:	46c0      	nop			; (mov r8, r8)

08000af4 <save_data_to_flash>:
 *      Author: Karol
 */

#include "flash.h"

void save_data_to_flash(uint32_t Address, uint32_t* data, uint8_t size_of_config){
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b086      	sub	sp, #24
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	60f8      	str	r0, [r7, #12]
 8000afc:	60b9      	str	r1, [r7, #8]
 8000afe:	1dfb      	adds	r3, r7, #7
 8000b00:	701a      	strb	r2, [r3, #0]
    HAL_FLASH_Unlock();
 8000b02:	f001 fb93 	bl	800222c <HAL_FLASH_Unlock>

	for(int i =0;i<size_of_config;i++){
 8000b06:	2300      	movs	r3, #0
 8000b08:	617b      	str	r3, [r7, #20]
 8000b0a:	e010      	b.n	8000b2e <save_data_to_flash+0x3a>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,Address+i*4,*(data+i));
 8000b0c:	697b      	ldr	r3, [r7, #20]
 8000b0e:	009b      	lsls	r3, r3, #2
 8000b10:	001a      	movs	r2, r3
 8000b12:	68fb      	ldr	r3, [r7, #12]
 8000b14:	18d1      	adds	r1, r2, r3
 8000b16:	697b      	ldr	r3, [r7, #20]
 8000b18:	009b      	lsls	r3, r3, #2
 8000b1a:	68ba      	ldr	r2, [r7, #8]
 8000b1c:	18d3      	adds	r3, r2, r3
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	001a      	movs	r2, r3
 8000b22:	2002      	movs	r0, #2
 8000b24:	f001 fb46 	bl	80021b4 <HAL_FLASH_Program>
	for(int i =0;i<size_of_config;i++){
 8000b28:	697b      	ldr	r3, [r7, #20]
 8000b2a:	3301      	adds	r3, #1
 8000b2c:	617b      	str	r3, [r7, #20]
 8000b2e:	1dfb      	adds	r3, r7, #7
 8000b30:	781b      	ldrb	r3, [r3, #0]
 8000b32:	697a      	ldr	r2, [r7, #20]
 8000b34:	429a      	cmp	r2, r3
 8000b36:	dbe9      	blt.n	8000b0c <save_data_to_flash+0x18>
	}

	HAL_FLASH_Lock();
 8000b38:	f001 fbcc 	bl	80022d4 <HAL_FLASH_Lock>
}
 8000b3c:	46c0      	nop			; (mov r8, r8)
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	b006      	add	sp, #24
 8000b42:	bd80      	pop	{r7, pc}

08000b44 <read_data_from_flash>:

uint32_t read_data_from_flash(uint32_t Address){
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b084      	sub	sp, #16
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]

	__IO uint32_t read_data = *(__IO uint32_t *)Address;
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	60fb      	str	r3, [r7, #12]
	return (uint32_t)read_data;
 8000b52:	68fb      	ldr	r3, [r7, #12]
}
 8000b54:	0018      	movs	r0, r3
 8000b56:	46bd      	mov	sp, r7
 8000b58:	b004      	add	sp, #16
 8000b5a:	bd80      	pop	{r7, pc}

08000b5c <erase_data_from_flash>:

void erase_data_from_flash(uint32_t Address){
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b086      	sub	sp, #24
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
	HAL_FLASH_Unlock();
 8000b64:	f001 fb62 	bl	800222c <HAL_FLASH_Unlock>
	FLASH_EraseInitTypeDef EraseInitStruct;
	EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 8000b68:	210c      	movs	r1, #12
 8000b6a:	187b      	adds	r3, r7, r1
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	601a      	str	r2, [r3, #0]
	EraseInitStruct.PageAddress = Address;
 8000b70:	187b      	adds	r3, r7, r1
 8000b72:	687a      	ldr	r2, [r7, #4]
 8000b74:	605a      	str	r2, [r3, #4]
	EraseInitStruct.NbPages = 8;
 8000b76:	187b      	adds	r3, r7, r1
 8000b78:	2208      	movs	r2, #8
 8000b7a:	609a      	str	r2, [r3, #8]

	uint32_t PageError;
	if (HAL_FLASHEx_Erase(&EraseInitStruct, &PageError) != HAL_OK)
 8000b7c:	2308      	movs	r3, #8
 8000b7e:	18fa      	adds	r2, r7, r3
 8000b80:	187b      	adds	r3, r7, r1
 8000b82:	0011      	movs	r1, r2
 8000b84:	0018      	movs	r0, r3
 8000b86:	f001 fcc7 	bl	8002518 <HAL_FLASHEx_Erase>
 8000b8a:	1e03      	subs	r3, r0, #0
 8000b8c:	d102      	bne.n	8000b94 <erase_data_from_flash+0x38>
			return HAL_ERROR;
	HAL_FLASH_Lock();
 8000b8e:	f001 fba1 	bl	80022d4 <HAL_FLASH_Lock>
 8000b92:	e000      	b.n	8000b96 <erase_data_from_flash+0x3a>
			return HAL_ERROR;
 8000b94:	46c0      	nop			; (mov r8, r8)
}
 8000b96:	46bd      	mov	sp, r7
 8000b98:	b006      	add	sp, #24
 8000b9a:	bd80      	pop	{r7, pc}

08000b9c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000b9c:	b590      	push	{r4, r7, lr}
 8000b9e:	b089      	sub	sp, #36	; 0x24
 8000ba0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba2:	240c      	movs	r4, #12
 8000ba4:	193b      	adds	r3, r7, r4
 8000ba6:	0018      	movs	r0, r3
 8000ba8:	2314      	movs	r3, #20
 8000baa:	001a      	movs	r2, r3
 8000bac:	2100      	movs	r1, #0
 8000bae:	f004 fcd5 	bl	800555c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bb2:	4b20      	ldr	r3, [pc, #128]	; (8000c34 <MX_GPIO_Init+0x98>)
 8000bb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000bb6:	4b1f      	ldr	r3, [pc, #124]	; (8000c34 <MX_GPIO_Init+0x98>)
 8000bb8:	2104      	movs	r1, #4
 8000bba:	430a      	orrs	r2, r1
 8000bbc:	62da      	str	r2, [r3, #44]	; 0x2c
 8000bbe:	4b1d      	ldr	r3, [pc, #116]	; (8000c34 <MX_GPIO_Init+0x98>)
 8000bc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bc2:	2204      	movs	r2, #4
 8000bc4:	4013      	ands	r3, r2
 8000bc6:	60bb      	str	r3, [r7, #8]
 8000bc8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bca:	4b1a      	ldr	r3, [pc, #104]	; (8000c34 <MX_GPIO_Init+0x98>)
 8000bcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000bce:	4b19      	ldr	r3, [pc, #100]	; (8000c34 <MX_GPIO_Init+0x98>)
 8000bd0:	2180      	movs	r1, #128	; 0x80
 8000bd2:	430a      	orrs	r2, r1
 8000bd4:	62da      	str	r2, [r3, #44]	; 0x2c
 8000bd6:	4b17      	ldr	r3, [pc, #92]	; (8000c34 <MX_GPIO_Init+0x98>)
 8000bd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bda:	2280      	movs	r2, #128	; 0x80
 8000bdc:	4013      	ands	r3, r2
 8000bde:	607b      	str	r3, [r7, #4]
 8000be0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000be2:	4b14      	ldr	r3, [pc, #80]	; (8000c34 <MX_GPIO_Init+0x98>)
 8000be4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000be6:	4b13      	ldr	r3, [pc, #76]	; (8000c34 <MX_GPIO_Init+0x98>)
 8000be8:	2101      	movs	r1, #1
 8000bea:	430a      	orrs	r2, r1
 8000bec:	62da      	str	r2, [r3, #44]	; 0x2c
 8000bee:	4b11      	ldr	r3, [pc, #68]	; (8000c34 <MX_GPIO_Init+0x98>)
 8000bf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bf2:	2201      	movs	r2, #1
 8000bf4:	4013      	ands	r3, r2
 8000bf6:	603b      	str	r3, [r7, #0]
 8000bf8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000bfa:	193b      	adds	r3, r7, r4
 8000bfc:	2280      	movs	r2, #128	; 0x80
 8000bfe:	0192      	lsls	r2, r2, #6
 8000c00:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c02:	193b      	adds	r3, r7, r4
 8000c04:	2288      	movs	r2, #136	; 0x88
 8000c06:	0352      	lsls	r2, r2, #13
 8000c08:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0a:	193b      	adds	r3, r7, r4
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c10:	193b      	adds	r3, r7, r4
 8000c12:	4a09      	ldr	r2, [pc, #36]	; (8000c38 <MX_GPIO_Init+0x9c>)
 8000c14:	0019      	movs	r1, r3
 8000c16:	0010      	movs	r0, r2
 8000c18:	f001 fd06 	bl	8002628 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	2100      	movs	r1, #0
 8000c20:	2007      	movs	r0, #7
 8000c22:	f001 fa0d 	bl	8002040 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8000c26:	2007      	movs	r0, #7
 8000c28:	f001 fa1f 	bl	800206a <HAL_NVIC_EnableIRQ>

}
 8000c2c:	46c0      	nop			; (mov r8, r8)
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	b009      	add	sp, #36	; 0x24
 8000c32:	bd90      	pop	{r4, r7, pc}
 8000c34:	40021000 	.word	0x40021000
 8000c38:	50000800 	.word	0x50000800

08000c3c <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b082      	sub	sp, #8
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, 0);
 8000c44:	1d39      	adds	r1, r7, #4
 8000c46:	4805      	ldr	r0, [pc, #20]	; (8000c5c <__io_putchar+0x20>)
 8000c48:	2300      	movs	r3, #0
 8000c4a:	2201      	movs	r2, #1
 8000c4c:	f002 fef4 	bl	8003a38 <HAL_UART_Transmit>
    return 1;
 8000c50:	2301      	movs	r3, #1
}
 8000c52:	0018      	movs	r0, r3
 8000c54:	46bd      	mov	sp, r7
 8000c56:	b002      	add	sp, #8
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	46c0      	nop			; (mov r8, r8)
 8000c5c:	200002fc 	.word	0x200002fc

08000c60 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b082      	sub	sp, #8
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  if (huart == &huart2) {
 8000c68:	687a      	ldr	r2, [r7, #4]
 8000c6a:	4b0c      	ldr	r3, [pc, #48]	; (8000c9c <HAL_UART_RxCpltCallback+0x3c>)
 8000c6c:	429a      	cmp	r2, r3
 8000c6e:	d110      	bne.n	8000c92 <HAL_UART_RxCpltCallback+0x32>
	  MENU_USB(value);
 8000c70:	4b0b      	ldr	r3, [pc, #44]	; (8000ca0 <HAL_UART_RxCpltCallback+0x40>)
 8000c72:	781b      	ldrb	r3, [r3, #0]
 8000c74:	0018      	movs	r0, r3
 8000c76:	f000 fa31 	bl	80010dc <MENU_USB>
	  HAL_UART_Receive_IT(&huart2, &value, 1);
 8000c7a:	4909      	ldr	r1, [pc, #36]	; (8000ca0 <HAL_UART_RxCpltCallback+0x40>)
 8000c7c:	4b07      	ldr	r3, [pc, #28]	; (8000c9c <HAL_UART_RxCpltCallback+0x3c>)
 8000c7e:	2201      	movs	r2, #1
 8000c80:	0018      	movs	r0, r3
 8000c82:	f002 ff79 	bl	8003b78 <HAL_UART_Receive_IT>
	  HAL_UART_Transmit(&huart2, &value, 1, 0);
 8000c86:	4906      	ldr	r1, [pc, #24]	; (8000ca0 <HAL_UART_RxCpltCallback+0x40>)
 8000c88:	4804      	ldr	r0, [pc, #16]	; (8000c9c <HAL_UART_RxCpltCallback+0x3c>)
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	2201      	movs	r2, #1
 8000c8e:	f002 fed3 	bl	8003a38 <HAL_UART_Transmit>
 }
}
 8000c92:	46c0      	nop			; (mov r8, r8)
 8000c94:	46bd      	mov	sp, r7
 8000c96:	b002      	add	sp, #8
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	46c0      	nop			; (mov r8, r8)
 8000c9c:	200002fc 	.word	0x200002fc
 8000ca0:	20000260 	.word	0x20000260

08000ca4 <TIM6_Callback>:

void TIM6_Callback(void){
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	af00      	add	r7, sp, #0
	if(pulse_parameter.if_running==1){
 8000ca8:	4b08      	ldr	r3, [pc, #32]	; (8000ccc <TIM6_Callback+0x28>)
 8000caa:	6a1b      	ldr	r3, [r3, #32]
 8000cac:	2b01      	cmp	r3, #1
 8000cae:	d106      	bne.n	8000cbe <TIM6_Callback+0x1a>
		STATUS_LED_PORT->ODR^=STATUS_LED_PIN;
 8000cb0:	4b07      	ldr	r3, [pc, #28]	; (8000cd0 <TIM6_Callback+0x2c>)
 8000cb2:	695a      	ldr	r2, [r3, #20]
 8000cb4:	4b06      	ldr	r3, [pc, #24]	; (8000cd0 <TIM6_Callback+0x2c>)
 8000cb6:	2120      	movs	r1, #32
 8000cb8:	404a      	eors	r2, r1
 8000cba:	615a      	str	r2, [r3, #20]
	}
	else{
		STATUS_LED_PORT->ODR=STATUS_LED_PIN;
	}
}
 8000cbc:	e002      	b.n	8000cc4 <TIM6_Callback+0x20>
		STATUS_LED_PORT->ODR=STATUS_LED_PIN;
 8000cbe:	4b04      	ldr	r3, [pc, #16]	; (8000cd0 <TIM6_Callback+0x2c>)
 8000cc0:	2220      	movs	r2, #32
 8000cc2:	615a      	str	r2, [r3, #20]
}
 8000cc4:	46c0      	nop			; (mov r8, r8)
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	46c0      	nop			; (mov r8, r8)
 8000ccc:	2000023c 	.word	0x2000023c
 8000cd0:	50000400 	.word	0x50000400

08000cd4 <HAL_PWR_PVDCallback>:

void HAL_PWR_PVDCallback(void){
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
	static bool was_executed = false;
    if (was_executed) {
 8000cd8:	4b0d      	ldr	r3, [pc, #52]	; (8000d10 <HAL_PWR_PVDCallback+0x3c>)
 8000cda:	781b      	ldrb	r3, [r3, #0]
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d00d      	beq.n	8000cfc <HAL_PWR_PVDCallback+0x28>
    	POWER_LED_PORT->ODR=~POWER_LED_PIN;
 8000ce0:	4b0c      	ldr	r3, [pc, #48]	; (8000d14 <HAL_PWR_PVDCallback+0x40>)
 8000ce2:	2209      	movs	r2, #9
 8000ce4:	4252      	negs	r2, r2
 8000ce6:	615a      	str	r2, [r3, #20]
    	pulse_flag.pvd=1;
 8000ce8:	4b0b      	ldr	r3, [pc, #44]	; (8000d18 <HAL_PWR_PVDCallback+0x44>)
 8000cea:	2201      	movs	r2, #1
 8000cec:	601a      	str	r2, [r3, #0]
		pulse_parameter.if_running=0;
 8000cee:	4b0b      	ldr	r3, [pc, #44]	; (8000d1c <HAL_PWR_PVDCallback+0x48>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	621a      	str	r2, [r3, #32]
		state=SAVE_DATA;
 8000cf4:	4b0a      	ldr	r3, [pc, #40]	; (8000d20 <HAL_PWR_PVDCallback+0x4c>)
 8000cf6:	2202      	movs	r2, #2
 8000cf8:	701a      	strb	r2, [r3, #0]
    }
    else{
    	was_executed=true;
    	pulse_flag.pvd=0;
    }
}
 8000cfa:	e005      	b.n	8000d08 <HAL_PWR_PVDCallback+0x34>
    	was_executed=true;
 8000cfc:	4b04      	ldr	r3, [pc, #16]	; (8000d10 <HAL_PWR_PVDCallback+0x3c>)
 8000cfe:	2201      	movs	r2, #1
 8000d00:	701a      	strb	r2, [r3, #0]
    	pulse_flag.pvd=0;
 8000d02:	4b05      	ldr	r3, [pc, #20]	; (8000d18 <HAL_PWR_PVDCallback+0x44>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	601a      	str	r2, [r3, #0]
}
 8000d08:	46c0      	nop			; (mov r8, r8)
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	46c0      	nop			; (mov r8, r8)
 8000d10:	200002f4 	.word	0x200002f4
 8000d14:	50000400 	.word	0x50000400
 8000d18:	20000234 	.word	0x20000234
 8000d1c:	2000023c 	.word	0x2000023c
 8000d20:	20000214 	.word	0x20000214

08000d24 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b082      	sub	sp, #8
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	0002      	movs	r2, r0
 8000d2c:	1dbb      	adds	r3, r7, #6
 8000d2e:	801a      	strh	r2, [r3, #0]
  if(GPIO_Pin == GPIO_PIN_13) {
 8000d30:	1dbb      	adds	r3, r7, #6
 8000d32:	881a      	ldrh	r2, [r3, #0]
 8000d34:	2380      	movs	r3, #128	; 0x80
 8000d36:	019b      	lsls	r3, r3, #6
 8000d38:	429a      	cmp	r2, r3
 8000d3a:	d111      	bne.n	8000d60 <HAL_GPIO_EXTI_Callback+0x3c>
		static bool was_executed = true;
	    if (was_executed) {
 8000d3c:	4b0b      	ldr	r3, [pc, #44]	; (8000d6c <HAL_GPIO_EXTI_Callback+0x48>)
 8000d3e:	781b      	ldrb	r3, [r3, #0]
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d00e      	beq.n	8000d62 <HAL_GPIO_EXTI_Callback+0x3e>
	    	POWER_LED_PORT->ODR=~POWER_LED_PIN;
 8000d44:	4b0a      	ldr	r3, [pc, #40]	; (8000d70 <HAL_GPIO_EXTI_Callback+0x4c>)
 8000d46:	2209      	movs	r2, #9
 8000d48:	4252      	negs	r2, r2
 8000d4a:	615a      	str	r2, [r3, #20]
	    	pulse_flag.pvd=1;
 8000d4c:	4b09      	ldr	r3, [pc, #36]	; (8000d74 <HAL_GPIO_EXTI_Callback+0x50>)
 8000d4e:	2201      	movs	r2, #1
 8000d50:	601a      	str	r2, [r3, #0]
			pulse_parameter.if_running=0;
 8000d52:	4b09      	ldr	r3, [pc, #36]	; (8000d78 <HAL_GPIO_EXTI_Callback+0x54>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	621a      	str	r2, [r3, #32]
			state=SAVE_DATA;
 8000d58:	4b08      	ldr	r3, [pc, #32]	; (8000d7c <HAL_GPIO_EXTI_Callback+0x58>)
 8000d5a:	2202      	movs	r2, #2
 8000d5c:	701a      	strb	r2, [r3, #0]
	    }
  } else {
    __NOP();
  }
}
 8000d5e:	e000      	b.n	8000d62 <HAL_GPIO_EXTI_Callback+0x3e>
    __NOP();
 8000d60:	46c0      	nop			; (mov r8, r8)
}
 8000d62:	46c0      	nop			; (mov r8, r8)
 8000d64:	46bd      	mov	sp, r7
 8000d66:	b002      	add	sp, #8
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	46c0      	nop			; (mov r8, r8)
 8000d6c:	2000018d 	.word	0x2000018d
 8000d70:	50000400 	.word	0x50000400
 8000d74:	20000234 	.word	0x20000234
 8000d78:	2000023c 	.word	0x2000023c
 8000d7c:	20000214 	.word	0x20000214

08000d80 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	Adrr_flash.Adrr_numer_of_pulses=0x0800FFA0;
 8000d84:	4b49      	ldr	r3, [pc, #292]	; (8000eac <main+0x12c>)
 8000d86:	4a4a      	ldr	r2, [pc, #296]	; (8000eb0 <main+0x130>)
 8000d88:	601a      	str	r2, [r3, #0]
	Adrr_flash.Adrr_total_pulse_generated=0x0800FFA4;
 8000d8a:	4b48      	ldr	r3, [pc, #288]	; (8000eac <main+0x12c>)
 8000d8c:	4a49      	ldr	r2, [pc, #292]	; (8000eb4 <main+0x134>)
 8000d8e:	605a      	str	r2, [r3, #4]
	Adrr_flash.Adrr_Ton=0x0800FFB0;
 8000d90:	4b46      	ldr	r3, [pc, #280]	; (8000eac <main+0x12c>)
 8000d92:	4a49      	ldr	r2, [pc, #292]	; (8000eb8 <main+0x138>)
 8000d94:	609a      	str	r2, [r3, #8]
	Adrr_flash.Adrr_Toff=0x0800FFB4;
 8000d96:	4b45      	ldr	r3, [pc, #276]	; (8000eac <main+0x12c>)
 8000d98:	4a48      	ldr	r2, [pc, #288]	; (8000ebc <main+0x13c>)
 8000d9a:	60da      	str	r2, [r3, #12]
	Adrr_flash.Adrr_freq=0x0800FFA8;
 8000d9c:	4b43      	ldr	r3, [pc, #268]	; (8000eac <main+0x12c>)
 8000d9e:	4a48      	ldr	r2, [pc, #288]	; (8000ec0 <main+0x140>)
 8000da0:	611a      	str	r2, [r3, #16]
	Adrr_flash.Adrr_duty_cycle=0x0800FFAC;
 8000da2:	4b42      	ldr	r3, [pc, #264]	; (8000eac <main+0x12c>)
 8000da4:	4a47      	ldr	r2, [pc, #284]	; (8000ec4 <main+0x144>)
 8000da6:	615a      	str	r2, [r3, #20]
	Adrr_flash.Adrr_if_infinitive=0x0800FFBC;
 8000da8:	4b40      	ldr	r3, [pc, #256]	; (8000eac <main+0x12c>)
 8000daa:	4a47      	ldr	r2, [pc, #284]	; (8000ec8 <main+0x148>)
 8000dac:	619a      	str	r2, [r3, #24]
	state=DONE;
 8000dae:	4b47      	ldr	r3, [pc, #284]	; (8000ecc <main+0x14c>)
 8000db0:	2205      	movs	r2, #5
 8000db2:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000db4:	f001 f804 	bl	8001dc0 <HAL_Init>

  /* USER CODE BEGIN Init */
  PG_init();
 8000db8:	f000 f948 	bl	800104c <PG_init>
  GPIO_LEDS();
 8000dbc:	f000 f906 	bl	8000fcc <GPIO_LEDS>
  TIM6_init();
 8000dc0:	f000 ff34 	bl	8001c2c <TIM6_init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dc4:	f000 f896 	bl	8000ef4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dc8:	f7ff fee8 	bl	8000b9c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000dcc:	f000 ff52 	bl	8001c74 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  printf(menu);
 8000dd0:	4b3f      	ldr	r3, [pc, #252]	; (8000ed0 <main+0x150>)
 8000dd2:	0018      	movs	r0, r3
 8000dd4:	f004 fb46 	bl	8005464 <iprintf>
  HAL_UART_Receive_IT(&huart2, &value, 1);
 8000dd8:	493e      	ldr	r1, [pc, #248]	; (8000ed4 <main+0x154>)
 8000dda:	4b3f      	ldr	r3, [pc, #252]	; (8000ed8 <main+0x158>)
 8000ddc:	2201      	movs	r2, #1
 8000dde:	0018      	movs	r0, r3
 8000de0:	f002 feca 	bl	8003b78 <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while(1){
	  if(pulse_flag.pvd==0){
 8000de4:	4b3d      	ldr	r3, [pc, #244]	; (8000edc <main+0x15c>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d105      	bne.n	8000df8 <main+0x78>
		  POWER_LED_PORT->ODR|=POWER_LED_PIN;
 8000dec:	4b3c      	ldr	r3, [pc, #240]	; (8000ee0 <main+0x160>)
 8000dee:	695a      	ldr	r2, [r3, #20]
 8000df0:	4b3b      	ldr	r3, [pc, #236]	; (8000ee0 <main+0x160>)
 8000df2:	2108      	movs	r1, #8
 8000df4:	430a      	orrs	r2, r1
 8000df6:	615a      	str	r2, [r3, #20]
	  }
	  switch(state){
 8000df8:	4b34      	ldr	r3, [pc, #208]	; (8000ecc <main+0x14c>)
 8000dfa:	781b      	ldrb	r3, [r3, #0]
 8000dfc:	2b05      	cmp	r3, #5
 8000dfe:	d84a      	bhi.n	8000e96 <main+0x116>
 8000e00:	009a      	lsls	r2, r3, #2
 8000e02:	4b38      	ldr	r3, [pc, #224]	; (8000ee4 <main+0x164>)
 8000e04:	18d3      	adds	r3, r2, r3
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	469f      	mov	pc, r3
	  	  case RUNNING_INFI:
	  		generate_pulse();
 8000e0a:	f000 fc63 	bl	80016d4 <generate_pulse>
	  		pulse_parameter.if_infinity=1;
 8000e0e:	4b36      	ldr	r3, [pc, #216]	; (8000ee8 <main+0x168>)
 8000e10:	2201      	movs	r2, #1
 8000e12:	61da      	str	r2, [r3, #28]
	  		break;
 8000e14:	e03f      	b.n	8000e96 <main+0x116>
	  	  case RUNNING_N_TIMES:
	  		generate_pulse();
 8000e16:	f000 fc5d 	bl	80016d4 <generate_pulse>
	  		(pulse_parameter.numer_of_pulses)--;
 8000e1a:	4b33      	ldr	r3, [pc, #204]	; (8000ee8 <main+0x168>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	1e5a      	subs	r2, r3, #1
 8000e20:	4b31      	ldr	r3, [pc, #196]	; (8000ee8 <main+0x168>)
 8000e22:	601a      	str	r2, [r3, #0]
	  		if(pulse_parameter.numer_of_pulses>0 && pulse_parameter.if_running==1){
 8000e24:	4b30      	ldr	r3, [pc, #192]	; (8000ee8 <main+0x168>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d00a      	beq.n	8000e42 <main+0xc2>
 8000e2c:	4b2e      	ldr	r3, [pc, #184]	; (8000ee8 <main+0x168>)
 8000e2e:	6a1b      	ldr	r3, [r3, #32]
 8000e30:	2b01      	cmp	r3, #1
 8000e32:	d106      	bne.n	8000e42 <main+0xc2>
	  			state=RUNNING_N_TIMES;
 8000e34:	4b25      	ldr	r3, [pc, #148]	; (8000ecc <main+0x14c>)
 8000e36:	2201      	movs	r2, #1
 8000e38:	701a      	strb	r2, [r3, #0]
	  			pulse_parameter.if_infinity=0;
 8000e3a:	4b2b      	ldr	r3, [pc, #172]	; (8000ee8 <main+0x168>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	61da      	str	r2, [r3, #28]
	  		  }
	  		 else{
	  			state=SAVE_DATA;
	  		  }
	  		 break;
 8000e40:	e029      	b.n	8000e96 <main+0x116>
	  			state=SAVE_DATA;
 8000e42:	4b22      	ldr	r3, [pc, #136]	; (8000ecc <main+0x14c>)
 8000e44:	2202      	movs	r2, #2
 8000e46:	701a      	strb	r2, [r3, #0]
	  		 break;
 8000e48:	e025      	b.n	8000e96 <main+0x116>
	  	  case SAVE_DATA:
	  		save_data_to_flash(Adrr_flash.Adrr_numer_of_pulses, ptr_to_data_struct,size_of_config);
 8000e4a:	4b18      	ldr	r3, [pc, #96]	; (8000eac <main+0x12c>)
 8000e4c:	6818      	ldr	r0, [r3, #0]
 8000e4e:	4b27      	ldr	r3, [pc, #156]	; (8000eec <main+0x16c>)
 8000e50:	6819      	ldr	r1, [r3, #0]
 8000e52:	4b27      	ldr	r3, [pc, #156]	; (8000ef0 <main+0x170>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	b2db      	uxtb	r3, r3
 8000e58:	001a      	movs	r2, r3
 8000e5a:	f7ff fe4b 	bl	8000af4 <save_data_to_flash>
	  		pulse_flag.save=1;
 8000e5e:	4b1f      	ldr	r3, [pc, #124]	; (8000edc <main+0x15c>)
 8000e60:	2201      	movs	r2, #1
 8000e62:	605a      	str	r2, [r3, #4]
	  		if(pulse_flag.pvd==0){
 8000e64:	4b1d      	ldr	r3, [pc, #116]	; (8000edc <main+0x15c>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d103      	bne.n	8000e74 <main+0xf4>
	  			state=READ_DATA;
 8000e6c:	4b17      	ldr	r3, [pc, #92]	; (8000ecc <main+0x14c>)
 8000e6e:	2203      	movs	r2, #3
 8000e70:	701a      	strb	r2, [r3, #0]
	  		  }
	  		else{
	  			state=DONE;
	  		  }
	  		break;
 8000e72:	e010      	b.n	8000e96 <main+0x116>
	  			state=DONE;
 8000e74:	4b15      	ldr	r3, [pc, #84]	; (8000ecc <main+0x14c>)
 8000e76:	2205      	movs	r2, #5
 8000e78:	701a      	strb	r2, [r3, #0]
	  		break;
 8000e7a:	e00c      	b.n	8000e96 <main+0x116>
	  	  case READ_DATA:
	  		read_data();
 8000e7c:	f000 fc74 	bl	8001768 <read_data>
	  		state=DISPLAY_DATA;
 8000e80:	4b12      	ldr	r3, [pc, #72]	; (8000ecc <main+0x14c>)
 8000e82:	2204      	movs	r2, #4
 8000e84:	701a      	strb	r2, [r3, #0]
	  		break;
 8000e86:	e006      	b.n	8000e96 <main+0x116>
	  	  case DISPLAY_DATA:
	  		display_data();
 8000e88:	f000 fcb0 	bl	80017ec <display_data>
	  		state=DONE;
 8000e8c:	4b0f      	ldr	r3, [pc, #60]	; (8000ecc <main+0x14c>)
 8000e8e:	2205      	movs	r2, #5
 8000e90:	701a      	strb	r2, [r3, #0]
	  		break;
 8000e92:	e000      	b.n	8000e96 <main+0x116>
	  	  case DONE:
	  		break;
 8000e94:	46c0      	nop			; (mov r8, r8)
	  	  }
	  if(pulse_flag.pvd==1 && pulse_flag.save==1){
 8000e96:	4b11      	ldr	r3, [pc, #68]	; (8000edc <main+0x15c>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	2b01      	cmp	r3, #1
 8000e9c:	d1a2      	bne.n	8000de4 <main+0x64>
 8000e9e:	4b0f      	ldr	r3, [pc, #60]	; (8000edc <main+0x15c>)
 8000ea0:	685b      	ldr	r3, [r3, #4]
 8000ea2:	2b01      	cmp	r3, #1
 8000ea4:	d19e      	bne.n	8000de4 <main+0x64>
		STANDBY();
 8000ea6:	f000 fd33 	bl	8001910 <STANDBY>
	  if(pulse_flag.pvd==0){
 8000eaa:	e79b      	b.n	8000de4 <main+0x64>
 8000eac:	20000218 	.word	0x20000218
 8000eb0:	0800ffa0 	.word	0x0800ffa0
 8000eb4:	0800ffa4 	.word	0x0800ffa4
 8000eb8:	0800ffb0 	.word	0x0800ffb0
 8000ebc:	0800ffb4 	.word	0x0800ffb4
 8000ec0:	0800ffa8 	.word	0x0800ffa8
 8000ec4:	0800ffac 	.word	0x0800ffac
 8000ec8:	0800ffbc 	.word	0x0800ffbc
 8000ecc:	20000214 	.word	0x20000214
 8000ed0:	20000008 	.word	0x20000008
 8000ed4:	20000260 	.word	0x20000260
 8000ed8:	200002fc 	.word	0x200002fc
 8000edc:	20000234 	.word	0x20000234
 8000ee0:	50000400 	.word	0x50000400
 8000ee4:	0800679c 	.word	0x0800679c
 8000ee8:	2000023c 	.word	0x2000023c
 8000eec:	20000000 	.word	0x20000000
 8000ef0:	20000004 	.word	0x20000004

08000ef4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ef4:	b590      	push	{r4, r7, lr}
 8000ef6:	b09f      	sub	sp, #124	; 0x7c
 8000ef8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000efa:	2440      	movs	r4, #64	; 0x40
 8000efc:	193b      	adds	r3, r7, r4
 8000efe:	0018      	movs	r0, r3
 8000f00:	2338      	movs	r3, #56	; 0x38
 8000f02:	001a      	movs	r2, r3
 8000f04:	2100      	movs	r1, #0
 8000f06:	f004 fb29 	bl	800555c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f0a:	232c      	movs	r3, #44	; 0x2c
 8000f0c:	18fb      	adds	r3, r7, r3
 8000f0e:	0018      	movs	r0, r3
 8000f10:	2314      	movs	r3, #20
 8000f12:	001a      	movs	r2, r3
 8000f14:	2100      	movs	r1, #0
 8000f16:	f004 fb21 	bl	800555c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f1a:	1d3b      	adds	r3, r7, #4
 8000f1c:	0018      	movs	r0, r3
 8000f1e:	2328      	movs	r3, #40	; 0x28
 8000f20:	001a      	movs	r2, r3
 8000f22:	2100      	movs	r1, #0
 8000f24:	f004 fb1a 	bl	800555c <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f28:	4b26      	ldr	r3, [pc, #152]	; (8000fc4 <SystemClock_Config+0xd0>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	4a26      	ldr	r2, [pc, #152]	; (8000fc8 <SystemClock_Config+0xd4>)
 8000f2e:	401a      	ands	r2, r3
 8000f30:	4b24      	ldr	r3, [pc, #144]	; (8000fc4 <SystemClock_Config+0xd0>)
 8000f32:	2180      	movs	r1, #128	; 0x80
 8000f34:	0109      	lsls	r1, r1, #4
 8000f36:	430a      	orrs	r2, r1
 8000f38:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000f3a:	0021      	movs	r1, r4
 8000f3c:	187b      	adds	r3, r7, r1
 8000f3e:	2210      	movs	r2, #16
 8000f40:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000f42:	187b      	adds	r3, r7, r1
 8000f44:	2201      	movs	r2, #1
 8000f46:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000f48:	187b      	adds	r3, r7, r1
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 8000f4e:	187b      	adds	r3, r7, r1
 8000f50:	22a0      	movs	r2, #160	; 0xa0
 8000f52:	0212      	lsls	r2, r2, #8
 8000f54:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000f56:	187b      	adds	r3, r7, r1
 8000f58:	2200      	movs	r2, #0
 8000f5a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f5c:	187b      	adds	r3, r7, r1
 8000f5e:	0018      	movs	r0, r3
 8000f60:	f001 fd80 	bl	8002a64 <HAL_RCC_OscConfig>
 8000f64:	1e03      	subs	r3, r0, #0
 8000f66:	d001      	beq.n	8000f6c <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000f68:	f000 fccc 	bl	8001904 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f6c:	212c      	movs	r1, #44	; 0x2c
 8000f6e:	187b      	adds	r3, r7, r1
 8000f70:	220f      	movs	r2, #15
 8000f72:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000f74:	187b      	adds	r3, r7, r1
 8000f76:	2200      	movs	r2, #0
 8000f78:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f7a:	187b      	adds	r3, r7, r1
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f80:	187b      	adds	r3, r7, r1
 8000f82:	2200      	movs	r2, #0
 8000f84:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f86:	187b      	adds	r3, r7, r1
 8000f88:	2200      	movs	r2, #0
 8000f8a:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000f8c:	187b      	adds	r3, r7, r1
 8000f8e:	2100      	movs	r1, #0
 8000f90:	0018      	movs	r0, r3
 8000f92:	f002 f93b 	bl	800320c <HAL_RCC_ClockConfig>
 8000f96:	1e03      	subs	r3, r0, #0
 8000f98:	d001      	beq.n	8000f9e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000f9a:	f000 fcb3 	bl	8001904 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000f9e:	1d3b      	adds	r3, r7, #4
 8000fa0:	2202      	movs	r2, #2
 8000fa2:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 8000fa4:	1d3b      	adds	r3, r7, #4
 8000fa6:	2204      	movs	r2, #4
 8000fa8:	611a      	str	r2, [r3, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000faa:	1d3b      	adds	r3, r7, #4
 8000fac:	0018      	movs	r0, r3
 8000fae:	f002 fb51 	bl	8003654 <HAL_RCCEx_PeriphCLKConfig>
 8000fb2:	1e03      	subs	r3, r0, #0
 8000fb4:	d001      	beq.n	8000fba <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000fb6:	f000 fca5 	bl	8001904 <Error_Handler>
  }
}
 8000fba:	46c0      	nop			; (mov r8, r8)
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	b01f      	add	sp, #124	; 0x7c
 8000fc0:	bd90      	pop	{r4, r7, pc}
 8000fc2:	46c0      	nop			; (mov r8, r8)
 8000fc4:	40007000 	.word	0x40007000
 8000fc8:	ffffe7ff 	.word	0xffffe7ff

08000fcc <GPIO_LEDS>:

/* USER CODE BEGIN 4 */

void GPIO_LEDS(void){
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	af00      	add	r7, sp, #0
	RCC->IOPENR |= RCC_IOPENR_GPIOBEN;
 8000fd0:	4b1b      	ldr	r3, [pc, #108]	; (8001040 <GPIO_LEDS+0x74>)
 8000fd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000fd4:	4b1a      	ldr	r3, [pc, #104]	; (8001040 <GPIO_LEDS+0x74>)
 8000fd6:	2102      	movs	r1, #2
 8000fd8:	430a      	orrs	r2, r1
 8000fda:	62da      	str	r2, [r3, #44]	; 0x2c

	GPIOB->MODER &= ((GPIOB->MODER & ~(GPIO_MODER_MODE5)) | (GPIO_MODER_MODE5_0));
 8000fdc:	4b19      	ldr	r3, [pc, #100]	; (8001044 <GPIO_LEDS+0x78>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	4a19      	ldr	r2, [pc, #100]	; (8001048 <GPIO_LEDS+0x7c>)
 8000fe2:	4013      	ands	r3, r2
 8000fe4:	2280      	movs	r2, #128	; 0x80
 8000fe6:	00d2      	lsls	r2, r2, #3
 8000fe8:	431a      	orrs	r2, r3
 8000fea:	4b16      	ldr	r3, [pc, #88]	; (8001044 <GPIO_LEDS+0x78>)
 8000fec:	6819      	ldr	r1, [r3, #0]
 8000fee:	4b15      	ldr	r3, [pc, #84]	; (8001044 <GPIO_LEDS+0x78>)
 8000ff0:	400a      	ands	r2, r1
 8000ff2:	601a      	str	r2, [r3, #0]
	GPIOB->MODER &= ((GPIOB->MODER & ~(GPIO_MODER_MODE1)) | (GPIO_MODER_MODE1_0));
 8000ff4:	4b13      	ldr	r3, [pc, #76]	; (8001044 <GPIO_LEDS+0x78>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	220c      	movs	r2, #12
 8000ffa:	4393      	bics	r3, r2
 8000ffc:	2204      	movs	r2, #4
 8000ffe:	431a      	orrs	r2, r3
 8001000:	4b10      	ldr	r3, [pc, #64]	; (8001044 <GPIO_LEDS+0x78>)
 8001002:	6819      	ldr	r1, [r3, #0]
 8001004:	4b0f      	ldr	r3, [pc, #60]	; (8001044 <GPIO_LEDS+0x78>)
 8001006:	400a      	ands	r2, r1
 8001008:	601a      	str	r2, [r3, #0]
	GPIOB->MODER &= ((GPIOB->MODER & ~(GPIO_MODER_MODE15)) | (GPIO_MODER_MODE15_0));
 800100a:	4b0e      	ldr	r3, [pc, #56]	; (8001044 <GPIO_LEDS+0x78>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	009b      	lsls	r3, r3, #2
 8001010:	089b      	lsrs	r3, r3, #2
 8001012:	2280      	movs	r2, #128	; 0x80
 8001014:	05d2      	lsls	r2, r2, #23
 8001016:	431a      	orrs	r2, r3
 8001018:	4b0a      	ldr	r3, [pc, #40]	; (8001044 <GPIO_LEDS+0x78>)
 800101a:	6819      	ldr	r1, [r3, #0]
 800101c:	4b09      	ldr	r3, [pc, #36]	; (8001044 <GPIO_LEDS+0x78>)
 800101e:	400a      	ands	r2, r1
 8001020:	601a      	str	r2, [r3, #0]
	GPIOB->MODER &= ((GPIOB->MODER & ~(GPIO_MODER_MODE3)) | (GPIO_MODER_MODE3_0));
 8001022:	4b08      	ldr	r3, [pc, #32]	; (8001044 <GPIO_LEDS+0x78>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	22c0      	movs	r2, #192	; 0xc0
 8001028:	4393      	bics	r3, r2
 800102a:	2240      	movs	r2, #64	; 0x40
 800102c:	431a      	orrs	r2, r3
 800102e:	4b05      	ldr	r3, [pc, #20]	; (8001044 <GPIO_LEDS+0x78>)
 8001030:	6819      	ldr	r1, [r3, #0]
 8001032:	4b04      	ldr	r3, [pc, #16]	; (8001044 <GPIO_LEDS+0x78>)
 8001034:	400a      	ands	r2, r1
 8001036:	601a      	str	r2, [r3, #0]
}
 8001038:	46c0      	nop			; (mov r8, r8)
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	46c0      	nop			; (mov r8, r8)
 8001040:	40021000 	.word	0x40021000
 8001044:	50000400 	.word	0x50000400
 8001048:	fffff3ff 	.word	0xfffff3ff

0800104c <PG_init>:

void PG_init(void){
 800104c:	b580      	push	{r7, lr}
 800104e:	af00      	add	r7, sp, #0
	RCC->IOPENR  |= RCC_IOPENR_GPIOAEN;
 8001050:	4b20      	ldr	r3, [pc, #128]	; (80010d4 <PG_init+0x88>)
 8001052:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001054:	4b1f      	ldr	r3, [pc, #124]	; (80010d4 <PG_init+0x88>)
 8001056:	2101      	movs	r1, #1
 8001058:	430a      	orrs	r2, r1
 800105a:	62da      	str	r2, [r3, #44]	; 0x2c

	PULSE_PORT -> MODER = (GPIO_MODER_MODE0_0)|(GPIOA->MODER & ~GPIO_MODER_MODE0);
 800105c:	23a0      	movs	r3, #160	; 0xa0
 800105e:	05db      	lsls	r3, r3, #23
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	2203      	movs	r2, #3
 8001064:	4393      	bics	r3, r2
 8001066:	001a      	movs	r2, r3
 8001068:	23a0      	movs	r3, #160	; 0xa0
 800106a:	05db      	lsls	r3, r3, #23
 800106c:	2101      	movs	r1, #1
 800106e:	430a      	orrs	r2, r1
 8001070:	601a      	str	r2, [r3, #0]
	PULSE_PORT -> MODER = (GPIO_MODER_MODE1_0)|(GPIOA->MODER & ~GPIO_MODER_MODE1);
 8001072:	23a0      	movs	r3, #160	; 0xa0
 8001074:	05db      	lsls	r3, r3, #23
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	220c      	movs	r2, #12
 800107a:	4393      	bics	r3, r2
 800107c:	001a      	movs	r2, r3
 800107e:	23a0      	movs	r3, #160	; 0xa0
 8001080:	05db      	lsls	r3, r3, #23
 8001082:	2104      	movs	r1, #4
 8001084:	430a      	orrs	r2, r1
 8001086:	601a      	str	r2, [r3, #0]
	PULSE_PORT -> MODER = (GPIO_MODER_MODE6_0)|(GPIOA->MODER & ~GPIO_MODER_MODE6);
 8001088:	23a0      	movs	r3, #160	; 0xa0
 800108a:	05db      	lsls	r3, r3, #23
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	4a12      	ldr	r2, [pc, #72]	; (80010d8 <PG_init+0x8c>)
 8001090:	401a      	ands	r2, r3
 8001092:	23a0      	movs	r3, #160	; 0xa0
 8001094:	05db      	lsls	r3, r3, #23
 8001096:	2180      	movs	r1, #128	; 0x80
 8001098:	0149      	lsls	r1, r1, #5
 800109a:	430a      	orrs	r2, r1
 800109c:	601a      	str	r2, [r3, #0]

	PULSE_PORT-> BSRR |= (1U<<0);
 800109e:	23a0      	movs	r3, #160	; 0xa0
 80010a0:	05db      	lsls	r3, r3, #23
 80010a2:	699a      	ldr	r2, [r3, #24]
 80010a4:	23a0      	movs	r3, #160	; 0xa0
 80010a6:	05db      	lsls	r3, r3, #23
 80010a8:	2101      	movs	r1, #1
 80010aa:	430a      	orrs	r2, r1
 80010ac:	619a      	str	r2, [r3, #24]
	PULSE_PORT-> BSRR |= (1U<<1);
 80010ae:	23a0      	movs	r3, #160	; 0xa0
 80010b0:	05db      	lsls	r3, r3, #23
 80010b2:	699a      	ldr	r2, [r3, #24]
 80010b4:	23a0      	movs	r3, #160	; 0xa0
 80010b6:	05db      	lsls	r3, r3, #23
 80010b8:	2102      	movs	r1, #2
 80010ba:	430a      	orrs	r2, r1
 80010bc:	619a      	str	r2, [r3, #24]
	PULSE_PORT-> BSRR |= (1U<<6);
 80010be:	23a0      	movs	r3, #160	; 0xa0
 80010c0:	05db      	lsls	r3, r3, #23
 80010c2:	699a      	ldr	r2, [r3, #24]
 80010c4:	23a0      	movs	r3, #160	; 0xa0
 80010c6:	05db      	lsls	r3, r3, #23
 80010c8:	2140      	movs	r1, #64	; 0x40
 80010ca:	430a      	orrs	r2, r1
 80010cc:	619a      	str	r2, [r3, #24]
}
 80010ce:	46c0      	nop			; (mov r8, r8)
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	40021000 	.word	0x40021000
 80010d8:	ffffcfff 	.word	0xffffcfff

080010dc <MENU_USB>:

void MENU_USB(uint8_t value){
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	0002      	movs	r2, r0
 80010e4:	1dfb      	adds	r3, r7, #7
 80010e6:	701a      	strb	r2, [r3, #0]
 		if (value == '\r' || value == '\n') {
 80010e8:	1dfb      	adds	r3, r7, #7
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	2b0d      	cmp	r3, #13
 80010ee:	d003      	beq.n	80010f8 <MENU_USB+0x1c>
 80010f0:	1dfb      	adds	r3, r7, #7
 80010f2:	781b      	ldrb	r3, [r3, #0]
 80010f4:	2b0a      	cmp	r3, #10
 80010f6:	d105      	bne.n	8001104 <MENU_USB+0x28>
 			display_menu(*line_buffer);
 80010f8:	4b19      	ldr	r3, [pc, #100]	; (8001160 <MENU_USB+0x84>)
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	0018      	movs	r0, r3
 80010fe:	f000 f839 	bl	8001174 <display_menu>
				printf(error);
				printf(error_with_lenght);
			}
			line_buffer[line_length++] = value;
		}
}
 8001102:	e029      	b.n	8001158 <MENU_USB+0x7c>
 		else if (value == '\177') {
 8001104:	1dfb      	adds	r3, r7, #7
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	2b7f      	cmp	r3, #127	; 0x7f
 800110a:	d10d      	bne.n	8001128 <MENU_USB+0x4c>
 			if (line_length > 0) {
 800110c:	4b15      	ldr	r3, [pc, #84]	; (8001164 <MENU_USB+0x88>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	2b00      	cmp	r3, #0
 8001112:	d021      	beq.n	8001158 <MENU_USB+0x7c>
				line_length--;
 8001114:	4b13      	ldr	r3, [pc, #76]	; (8001164 <MENU_USB+0x88>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	1e5a      	subs	r2, r3, #1
 800111a:	4b12      	ldr	r3, [pc, #72]	; (8001164 <MENU_USB+0x88>)
 800111c:	601a      	str	r2, [r3, #0]
				printf("\177 \177");
 800111e:	4b12      	ldr	r3, [pc, #72]	; (8001168 <MENU_USB+0x8c>)
 8001120:	0018      	movs	r0, r3
 8001122:	f004 f99f 	bl	8005464 <iprintf>
}
 8001126:	e017      	b.n	8001158 <MENU_USB+0x7c>
			if (line_length >= LINE_MAX_LENGTH) {
 8001128:	4b0e      	ldr	r3, [pc, #56]	; (8001164 <MENU_USB+0x88>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	2b77      	cmp	r3, #119	; 0x77
 800112e:	d90a      	bls.n	8001146 <MENU_USB+0x6a>
				line_length = 0;
 8001130:	4b0c      	ldr	r3, [pc, #48]	; (8001164 <MENU_USB+0x88>)
 8001132:	2200      	movs	r2, #0
 8001134:	601a      	str	r2, [r3, #0]
				printf(error);
 8001136:	4b0d      	ldr	r3, [pc, #52]	; (800116c <MENU_USB+0x90>)
 8001138:	0018      	movs	r0, r3
 800113a:	f004 f993 	bl	8005464 <iprintf>
				printf(error_with_lenght);
 800113e:	4b0c      	ldr	r3, [pc, #48]	; (8001170 <MENU_USB+0x94>)
 8001140:	0018      	movs	r0, r3
 8001142:	f004 f98f 	bl	8005464 <iprintf>
			line_buffer[line_length++] = value;
 8001146:	4b07      	ldr	r3, [pc, #28]	; (8001164 <MENU_USB+0x88>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	1c59      	adds	r1, r3, #1
 800114c:	4a05      	ldr	r2, [pc, #20]	; (8001164 <MENU_USB+0x88>)
 800114e:	6011      	str	r1, [r2, #0]
 8001150:	4a03      	ldr	r2, [pc, #12]	; (8001160 <MENU_USB+0x84>)
 8001152:	1df9      	adds	r1, r7, #7
 8001154:	7809      	ldrb	r1, [r1, #0]
 8001156:	54d1      	strb	r1, [r2, r3]
}
 8001158:	46c0      	nop			; (mov r8, r8)
 800115a:	46bd      	mov	sp, r7
 800115c:	b002      	add	sp, #8
 800115e:	bd80      	pop	{r7, pc}
 8001160:	20000264 	.word	0x20000264
 8001164:	200002f0 	.word	0x200002f0
 8001168:	08006674 	.word	0x08006674
 800116c:	200000a8 	.word	0x200000a8
 8001170:	2000017c 	.word	0x2000017c

08001174 <display_menu>:

void display_menu(char table){
 8001174:	b580      	push	{r7, lr}
 8001176:	b08a      	sub	sp, #40	; 0x28
 8001178:	af00      	add	r7, sp, #0
 800117a:	0002      	movs	r2, r0
 800117c:	1dfb      	adds	r3, r7, #7
 800117e:	701a      	strb	r2, [r3, #0]
	int result;
	char * ptr;
	if (line_length > 0) {
 8001180:	4bd7      	ldr	r3, [pc, #860]	; (80014e0 <display_menu+0x36c>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	2b00      	cmp	r3, #0
 8001186:	d100      	bne.n	800118a <display_menu+0x16>
 8001188:	e211      	b.n	80015ae <display_menu+0x43a>
		line_buffer[line_length] = '\0';
 800118a:	4bd5      	ldr	r3, [pc, #852]	; (80014e0 <display_menu+0x36c>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	4ad5      	ldr	r2, [pc, #852]	; (80014e4 <display_menu+0x370>)
 8001190:	2100      	movs	r1, #0
 8001192:	54d1      	strb	r1, [r2, r3]
			if (strncmp(line_buffer, "run",3) == 0) {
 8001194:	49d4      	ldr	r1, [pc, #848]	; (80014e8 <display_menu+0x374>)
 8001196:	4bd3      	ldr	r3, [pc, #844]	; (80014e4 <display_menu+0x370>)
 8001198:	2203      	movs	r2, #3
 800119a:	0018      	movs	r0, r3
 800119c:	f004 fa03 	bl	80055a6 <strncmp>
 80011a0:	1e03      	subs	r3, r0, #0
 80011a2:	d000      	beq.n	80011a6 <display_menu+0x32>
 80011a4:	e180      	b.n	80014a8 <display_menu+0x334>
				if(pulse_parameter.if_running==1){
 80011a6:	4bd1      	ldr	r3, [pc, #836]	; (80014ec <display_menu+0x378>)
 80011a8:	6a1b      	ldr	r3, [r3, #32]
 80011aa:	2b01      	cmp	r3, #1
 80011ac:	d104      	bne.n	80011b8 <display_menu+0x44>
					printf("\n\rA program is working, to enter new parameters use stop first\n\r");
 80011ae:	4bd0      	ldr	r3, [pc, #832]	; (80014f0 <display_menu+0x37c>)
 80011b0:	0018      	movs	r0, r3
 80011b2:	f004 f957 	bl	8005464 <iprintf>
 80011b6:	e1e4      	b.n	8001582 <display_menu+0x40e>
				}
				else{
					splitString(line_buffer, tokens);
 80011b8:	4ace      	ldr	r2, [pc, #824]	; (80014f4 <display_menu+0x380>)
 80011ba:	4bca      	ldr	r3, [pc, #808]	; (80014e4 <display_menu+0x370>)
 80011bc:	0011      	movs	r1, r2
 80011be:	0018      	movs	r0, r3
 80011c0:	f000 fa48 	bl	8001654 <splitString>
					ptr=strpbrk(tokens[1], "oo");
 80011c4:	4bcb      	ldr	r3, [pc, #812]	; (80014f4 <display_menu+0x380>)
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	4acb      	ldr	r2, [pc, #812]	; (80014f8 <display_menu+0x384>)
 80011ca:	0011      	movs	r1, r2
 80011cc:	0018      	movs	r0, r3
 80011ce:	f004 f9fb 	bl	80055c8 <strpbrk>
 80011d2:	0003      	movs	r3, r0
 80011d4:	60bb      	str	r3, [r7, #8]
					if((!(ptr==NULL)) && state!=RUNNING_N_TIMES){
 80011d6:	68bb      	ldr	r3, [r7, #8]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d100      	bne.n	80011de <display_menu+0x6a>
 80011dc:	e0a2      	b.n	8001324 <display_menu+0x1b0>
 80011de:	4bc7      	ldr	r3, [pc, #796]	; (80014fc <display_menu+0x388>)
 80011e0:	781b      	ldrb	r3, [r3, #0]
 80011e2:	2b01      	cmp	r3, #1
 80011e4:	d100      	bne.n	80011e8 <display_menu+0x74>
 80011e6:	e09d      	b.n	8001324 <display_menu+0x1b0>
						for(int i=2;i<MAX_TOKENS;i++){
 80011e8:	2302      	movs	r3, #2
 80011ea:	623b      	str	r3, [r7, #32]
 80011ec:	e029      	b.n	8001242 <display_menu+0xce>
							result=1;
 80011ee:	2301      	movs	r3, #1
 80011f0:	627b      	str	r3, [r7, #36]	; 0x24
							for(int j=0;j<strlen(tokens[i]);j++){
 80011f2:	2300      	movs	r3, #0
 80011f4:	61fb      	str	r3, [r7, #28]
 80011f6:	e013      	b.n	8001220 <display_menu+0xac>
								if(!isdigit((unsigned char)tokens[i][j])){
 80011f8:	4bbe      	ldr	r3, [pc, #760]	; (80014f4 <display_menu+0x380>)
 80011fa:	6a3a      	ldr	r2, [r7, #32]
 80011fc:	0092      	lsls	r2, r2, #2
 80011fe:	58d2      	ldr	r2, [r2, r3]
 8001200:	69fb      	ldr	r3, [r7, #28]
 8001202:	18d3      	adds	r3, r2, r3
 8001204:	781b      	ldrb	r3, [r3, #0]
 8001206:	1c5a      	adds	r2, r3, #1
 8001208:	4bbd      	ldr	r3, [pc, #756]	; (8001500 <display_menu+0x38c>)
 800120a:	18d3      	adds	r3, r2, r3
 800120c:	781b      	ldrb	r3, [r3, #0]
 800120e:	001a      	movs	r2, r3
 8001210:	2304      	movs	r3, #4
 8001212:	4013      	ands	r3, r2
 8001214:	d101      	bne.n	800121a <display_menu+0xa6>
									result=0;
 8001216:	2300      	movs	r3, #0
 8001218:	627b      	str	r3, [r7, #36]	; 0x24
							for(int j=0;j<strlen(tokens[i]);j++){
 800121a:	69fb      	ldr	r3, [r7, #28]
 800121c:	3301      	adds	r3, #1
 800121e:	61fb      	str	r3, [r7, #28]
 8001220:	4bb4      	ldr	r3, [pc, #720]	; (80014f4 <display_menu+0x380>)
 8001222:	6a3a      	ldr	r2, [r7, #32]
 8001224:	0092      	lsls	r2, r2, #2
 8001226:	58d3      	ldr	r3, [r2, r3]
 8001228:	0018      	movs	r0, r3
 800122a:	f7fe ff77 	bl	800011c <strlen>
 800122e:	0002      	movs	r2, r0
 8001230:	69fb      	ldr	r3, [r7, #28]
 8001232:	429a      	cmp	r2, r3
 8001234:	d8e0      	bhi.n	80011f8 <display_menu+0x84>
								}
							}
							if(result==0){
 8001236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001238:	2b00      	cmp	r3, #0
 800123a:	d006      	beq.n	800124a <display_menu+0xd6>
						for(int i=2;i<MAX_TOKENS;i++){
 800123c:	6a3b      	ldr	r3, [r7, #32]
 800123e:	3301      	adds	r3, #1
 8001240:	623b      	str	r3, [r7, #32]
 8001242:	6a3b      	ldr	r3, [r7, #32]
 8001244:	2b03      	cmp	r3, #3
 8001246:	ddd2      	ble.n	80011ee <display_menu+0x7a>
 8001248:	e000      	b.n	800124c <display_menu+0xd8>
								break;
 800124a:	46c0      	nop			; (mov r8, r8)
							}
						}
						if(result!=0){
 800124c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800124e:	2b00      	cmp	r3, #0
 8001250:	d062      	beq.n	8001318 <display_menu+0x1a4>
							pulse_parameter.config.freq=ASCII_TO_uint8_t(tokens[2]);
 8001252:	4ba8      	ldr	r3, [pc, #672]	; (80014f4 <display_menu+0x380>)
 8001254:	689b      	ldr	r3, [r3, #8]
 8001256:	0018      	movs	r0, r3
 8001258:	f000 f9c8 	bl	80015ec <ASCII_TO_uint8_t>
 800125c:	0002      	movs	r2, r0
 800125e:	4ba3      	ldr	r3, [pc, #652]	; (80014ec <display_menu+0x378>)
 8001260:	609a      	str	r2, [r3, #8]
							pulse_parameter.config.duty_cycle=ASCII_TO_uint8_t(tokens[3]);
 8001262:	4ba4      	ldr	r3, [pc, #656]	; (80014f4 <display_menu+0x380>)
 8001264:	68db      	ldr	r3, [r3, #12]
 8001266:	0018      	movs	r0, r3
 8001268:	f000 f9c0 	bl	80015ec <ASCII_TO_uint8_t>
 800126c:	0002      	movs	r2, r0
 800126e:	4b9f      	ldr	r3, [pc, #636]	; (80014ec <display_menu+0x378>)
 8001270:	60da      	str	r2, [r3, #12]
								if(pulse_parameter.config.freq==0 || pulse_parameter.config.duty_cycle==0){
 8001272:	4b9e      	ldr	r3, [pc, #632]	; (80014ec <display_menu+0x378>)
 8001274:	689b      	ldr	r3, [r3, #8]
 8001276:	2b00      	cmp	r3, #0
 8001278:	d003      	beq.n	8001282 <display_menu+0x10e>
 800127a:	4b9c      	ldr	r3, [pc, #624]	; (80014ec <display_menu+0x378>)
 800127c:	68db      	ldr	r3, [r3, #12]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d104      	bne.n	800128c <display_menu+0x118>
									printf(error_with_run);
 8001282:	4ba0      	ldr	r3, [pc, #640]	; (8001504 <display_menu+0x390>)
 8001284:	0018      	movs	r0, r3
 8001286:	f004 f8ed 	bl	8005464 <iprintf>
 800128a:	e04a      	b.n	8001322 <display_menu+0x1ae>
								}
								else if(pulse_parameter.config.duty_cycle>=100 || pulse_parameter.config.duty_cycle==0){
 800128c:	4b97      	ldr	r3, [pc, #604]	; (80014ec <display_menu+0x378>)
 800128e:	68db      	ldr	r3, [r3, #12]
 8001290:	2b63      	cmp	r3, #99	; 0x63
 8001292:	d803      	bhi.n	800129c <display_menu+0x128>
 8001294:	4b95      	ldr	r3, [pc, #596]	; (80014ec <display_menu+0x378>)
 8001296:	68db      	ldr	r3, [r3, #12]
 8001298:	2b00      	cmp	r3, #0
 800129a:	d104      	bne.n	80012a6 <display_menu+0x132>
									printf(error_with_duty_cycle);
 800129c:	4b9a      	ldr	r3, [pc, #616]	; (8001508 <display_menu+0x394>)
 800129e:	0018      	movs	r0, r3
 80012a0:	f004 f8e0 	bl	8005464 <iprintf>
 80012a4:	e03d      	b.n	8001322 <display_menu+0x1ae>
								}
								else{
									pulse_parameter.config.Period=(float)(1000/pulse_parameter.config.freq);
 80012a6:	4b91      	ldr	r3, [pc, #580]	; (80014ec <display_menu+0x378>)
 80012a8:	689b      	ldr	r3, [r3, #8]
 80012aa:	0019      	movs	r1, r3
 80012ac:	23fa      	movs	r3, #250	; 0xfa
 80012ae:	0098      	lsls	r0, r3, #2
 80012b0:	f7fe ff46 	bl	8000140 <__udivsi3>
 80012b4:	0003      	movs	r3, r0
 80012b6:	0018      	movs	r0, r3
 80012b8:	f7ff fac0 	bl	800083c <__aeabi_ui2f>
 80012bc:	1c03      	adds	r3, r0, #0
 80012be:	1c18      	adds	r0, r3, #0
 80012c0:	f7ff f818 	bl	80002f4 <__aeabi_f2uiz>
 80012c4:	0002      	movs	r2, r0
 80012c6:	4b89      	ldr	r3, [pc, #548]	; (80014ec <display_menu+0x378>)
 80012c8:	619a      	str	r2, [r3, #24]
									pulse_parameter.config.Ton=(float)((pulse_parameter.config.Period*pulse_parameter.config.duty_cycle)/100);
 80012ca:	4b88      	ldr	r3, [pc, #544]	; (80014ec <display_menu+0x378>)
 80012cc:	699a      	ldr	r2, [r3, #24]
 80012ce:	4b87      	ldr	r3, [pc, #540]	; (80014ec <display_menu+0x378>)
 80012d0:	68db      	ldr	r3, [r3, #12]
 80012d2:	4353      	muls	r3, r2
 80012d4:	2164      	movs	r1, #100	; 0x64
 80012d6:	0018      	movs	r0, r3
 80012d8:	f7fe ff32 	bl	8000140 <__udivsi3>
 80012dc:	0003      	movs	r3, r0
 80012de:	0018      	movs	r0, r3
 80012e0:	f7ff faac 	bl	800083c <__aeabi_ui2f>
 80012e4:	1c03      	adds	r3, r0, #0
 80012e6:	1c18      	adds	r0, r3, #0
 80012e8:	f7ff f804 	bl	80002f4 <__aeabi_f2uiz>
 80012ec:	0002      	movs	r2, r0
 80012ee:	4b7f      	ldr	r3, [pc, #508]	; (80014ec <display_menu+0x378>)
 80012f0:	611a      	str	r2, [r3, #16]
									pulse_parameter.config.Toff=pulse_parameter.config.Period-pulse_parameter.config.Ton;
 80012f2:	4b7e      	ldr	r3, [pc, #504]	; (80014ec <display_menu+0x378>)
 80012f4:	699a      	ldr	r2, [r3, #24]
 80012f6:	4b7d      	ldr	r3, [pc, #500]	; (80014ec <display_menu+0x378>)
 80012f8:	691b      	ldr	r3, [r3, #16]
 80012fa:	1ad2      	subs	r2, r2, r3
 80012fc:	4b7b      	ldr	r3, [pc, #492]	; (80014ec <display_menu+0x378>)
 80012fe:	615a      	str	r2, [r3, #20]
									pulse_parameter.if_running=1;
 8001300:	4b7a      	ldr	r3, [pc, #488]	; (80014ec <display_menu+0x378>)
 8001302:	2201      	movs	r2, #1
 8001304:	621a      	str	r2, [r3, #32]
									state=RUNNING_INFI;
 8001306:	4b7d      	ldr	r3, [pc, #500]	; (80014fc <display_menu+0x388>)
 8001308:	2200      	movs	r2, #0
 800130a:	701a      	strb	r2, [r3, #0]
									erase_data_from_flash(Adrr_flash.Adrr_numer_of_pulses);
 800130c:	4b7f      	ldr	r3, [pc, #508]	; (800150c <display_menu+0x398>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	0018      	movs	r0, r3
 8001312:	f7ff fc23 	bl	8000b5c <erase_data_from_flash>
						if(result!=0){
 8001316:	e0b6      	b.n	8001486 <display_menu+0x312>
								}
						}
						else{
							printf(error_with_run);
 8001318:	4b7a      	ldr	r3, [pc, #488]	; (8001504 <display_menu+0x390>)
 800131a:	0018      	movs	r0, r3
 800131c:	f004 f8a2 	bl	8005464 <iprintf>
						if(result!=0){
 8001320:	e0b1      	b.n	8001486 <display_menu+0x312>
 8001322:	e0b0      	b.n	8001486 <display_menu+0x312>
						}
					}
					else if (ptr==NULL && state!=RUNNING_INFI){
 8001324:	68bb      	ldr	r3, [r7, #8]
 8001326:	2b00      	cmp	r3, #0
 8001328:	d000      	beq.n	800132c <display_menu+0x1b8>
 800132a:	e0ac      	b.n	8001486 <display_menu+0x312>
 800132c:	4b73      	ldr	r3, [pc, #460]	; (80014fc <display_menu+0x388>)
 800132e:	781b      	ldrb	r3, [r3, #0]
 8001330:	2b00      	cmp	r3, #0
 8001332:	d100      	bne.n	8001336 <display_menu+0x1c2>
 8001334:	e0a7      	b.n	8001486 <display_menu+0x312>
						for(int i=1;i<MAX_TOKENS;i++){
 8001336:	2301      	movs	r3, #1
 8001338:	61bb      	str	r3, [r7, #24]
 800133a:	e029      	b.n	8001390 <display_menu+0x21c>
							result=1;
 800133c:	2301      	movs	r3, #1
 800133e:	627b      	str	r3, [r7, #36]	; 0x24
							for(int j=0;j<strlen(tokens[i]);j++){
 8001340:	2300      	movs	r3, #0
 8001342:	617b      	str	r3, [r7, #20]
 8001344:	e013      	b.n	800136e <display_menu+0x1fa>
								if(!isdigit((unsigned char)tokens[i][j])){
 8001346:	4b6b      	ldr	r3, [pc, #428]	; (80014f4 <display_menu+0x380>)
 8001348:	69ba      	ldr	r2, [r7, #24]
 800134a:	0092      	lsls	r2, r2, #2
 800134c:	58d2      	ldr	r2, [r2, r3]
 800134e:	697b      	ldr	r3, [r7, #20]
 8001350:	18d3      	adds	r3, r2, r3
 8001352:	781b      	ldrb	r3, [r3, #0]
 8001354:	1c5a      	adds	r2, r3, #1
 8001356:	4b6a      	ldr	r3, [pc, #424]	; (8001500 <display_menu+0x38c>)
 8001358:	18d3      	adds	r3, r2, r3
 800135a:	781b      	ldrb	r3, [r3, #0]
 800135c:	001a      	movs	r2, r3
 800135e:	2304      	movs	r3, #4
 8001360:	4013      	ands	r3, r2
 8001362:	d101      	bne.n	8001368 <display_menu+0x1f4>
									result=0;
 8001364:	2300      	movs	r3, #0
 8001366:	627b      	str	r3, [r7, #36]	; 0x24
							for(int j=0;j<strlen(tokens[i]);j++){
 8001368:	697b      	ldr	r3, [r7, #20]
 800136a:	3301      	adds	r3, #1
 800136c:	617b      	str	r3, [r7, #20]
 800136e:	4b61      	ldr	r3, [pc, #388]	; (80014f4 <display_menu+0x380>)
 8001370:	69ba      	ldr	r2, [r7, #24]
 8001372:	0092      	lsls	r2, r2, #2
 8001374:	58d3      	ldr	r3, [r2, r3]
 8001376:	0018      	movs	r0, r3
 8001378:	f7fe fed0 	bl	800011c <strlen>
 800137c:	0002      	movs	r2, r0
 800137e:	697b      	ldr	r3, [r7, #20]
 8001380:	429a      	cmp	r2, r3
 8001382:	d8e0      	bhi.n	8001346 <display_menu+0x1d2>
								}
							}
							if(result==0){
 8001384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001386:	2b00      	cmp	r3, #0
 8001388:	d006      	beq.n	8001398 <display_menu+0x224>
						for(int i=1;i<MAX_TOKENS;i++){
 800138a:	69bb      	ldr	r3, [r7, #24]
 800138c:	3301      	adds	r3, #1
 800138e:	61bb      	str	r3, [r7, #24]
 8001390:	69bb      	ldr	r3, [r7, #24]
 8001392:	2b03      	cmp	r3, #3
 8001394:	ddd2      	ble.n	800133c <display_menu+0x1c8>
 8001396:	e000      	b.n	800139a <display_menu+0x226>
								break;
 8001398:	46c0      	nop			; (mov r8, r8)
							}
						}
							if(result!=0){
 800139a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800139c:	2b00      	cmp	r3, #0
 800139e:	d06e      	beq.n	800147e <display_menu+0x30a>
								pulse_parameter.numer_of_pulses=ASCII_TO_uint8_t(tokens[1]);
 80013a0:	4b54      	ldr	r3, [pc, #336]	; (80014f4 <display_menu+0x380>)
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	0018      	movs	r0, r3
 80013a6:	f000 f921 	bl	80015ec <ASCII_TO_uint8_t>
 80013aa:	0002      	movs	r2, r0
 80013ac:	4b4f      	ldr	r3, [pc, #316]	; (80014ec <display_menu+0x378>)
 80013ae:	601a      	str	r2, [r3, #0]
								pulse_parameter.config.freq=ASCII_TO_uint8_t(tokens[2]);
 80013b0:	4b50      	ldr	r3, [pc, #320]	; (80014f4 <display_menu+0x380>)
 80013b2:	689b      	ldr	r3, [r3, #8]
 80013b4:	0018      	movs	r0, r3
 80013b6:	f000 f919 	bl	80015ec <ASCII_TO_uint8_t>
 80013ba:	0002      	movs	r2, r0
 80013bc:	4b4b      	ldr	r3, [pc, #300]	; (80014ec <display_menu+0x378>)
 80013be:	609a      	str	r2, [r3, #8]
								pulse_parameter.config.duty_cycle=ASCII_TO_uint8_t(tokens[3]);
 80013c0:	4b4c      	ldr	r3, [pc, #304]	; (80014f4 <display_menu+0x380>)
 80013c2:	68db      	ldr	r3, [r3, #12]
 80013c4:	0018      	movs	r0, r3
 80013c6:	f000 f911 	bl	80015ec <ASCII_TO_uint8_t>
 80013ca:	0002      	movs	r2, r0
 80013cc:	4b47      	ldr	r3, [pc, #284]	; (80014ec <display_menu+0x378>)
 80013ce:	60da      	str	r2, [r3, #12]
								if(pulse_parameter.numer_of_pulses==0 || pulse_parameter.config.freq==0 || pulse_parameter.config.duty_cycle==0 ){
 80013d0:	4b46      	ldr	r3, [pc, #280]	; (80014ec <display_menu+0x378>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d007      	beq.n	80013e8 <display_menu+0x274>
 80013d8:	4b44      	ldr	r3, [pc, #272]	; (80014ec <display_menu+0x378>)
 80013da:	689b      	ldr	r3, [r3, #8]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d003      	beq.n	80013e8 <display_menu+0x274>
 80013e0:	4b42      	ldr	r3, [pc, #264]	; (80014ec <display_menu+0x378>)
 80013e2:	68db      	ldr	r3, [r3, #12]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d104      	bne.n	80013f2 <display_menu+0x27e>
									printf(error_with_run);
 80013e8:	4b46      	ldr	r3, [pc, #280]	; (8001504 <display_menu+0x390>)
 80013ea:	0018      	movs	r0, r3
 80013ec:	f004 f83a 	bl	8005464 <iprintf>
 80013f0:	e049      	b.n	8001486 <display_menu+0x312>
								}
								else if(pulse_parameter.config.duty_cycle>=100 || pulse_parameter.config.duty_cycle==0){
 80013f2:	4b3e      	ldr	r3, [pc, #248]	; (80014ec <display_menu+0x378>)
 80013f4:	68db      	ldr	r3, [r3, #12]
 80013f6:	2b63      	cmp	r3, #99	; 0x63
 80013f8:	d803      	bhi.n	8001402 <display_menu+0x28e>
 80013fa:	4b3c      	ldr	r3, [pc, #240]	; (80014ec <display_menu+0x378>)
 80013fc:	68db      	ldr	r3, [r3, #12]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d104      	bne.n	800140c <display_menu+0x298>
									printf(error_with_duty_cycle);
 8001402:	4b41      	ldr	r3, [pc, #260]	; (8001508 <display_menu+0x394>)
 8001404:	0018      	movs	r0, r3
 8001406:	f004 f82d 	bl	8005464 <iprintf>
 800140a:	e03c      	b.n	8001486 <display_menu+0x312>
								}
								else{
									pulse_parameter.config.Period=(float)(1000/pulse_parameter.config.freq);
 800140c:	4b37      	ldr	r3, [pc, #220]	; (80014ec <display_menu+0x378>)
 800140e:	689b      	ldr	r3, [r3, #8]
 8001410:	0019      	movs	r1, r3
 8001412:	23fa      	movs	r3, #250	; 0xfa
 8001414:	0098      	lsls	r0, r3, #2
 8001416:	f7fe fe93 	bl	8000140 <__udivsi3>
 800141a:	0003      	movs	r3, r0
 800141c:	0018      	movs	r0, r3
 800141e:	f7ff fa0d 	bl	800083c <__aeabi_ui2f>
 8001422:	1c03      	adds	r3, r0, #0
 8001424:	1c18      	adds	r0, r3, #0
 8001426:	f7fe ff65 	bl	80002f4 <__aeabi_f2uiz>
 800142a:	0002      	movs	r2, r0
 800142c:	4b2f      	ldr	r3, [pc, #188]	; (80014ec <display_menu+0x378>)
 800142e:	619a      	str	r2, [r3, #24]
									pulse_parameter.config.Ton=(float)((pulse_parameter.config.Period*pulse_parameter.config.duty_cycle)/100);
 8001430:	4b2e      	ldr	r3, [pc, #184]	; (80014ec <display_menu+0x378>)
 8001432:	699a      	ldr	r2, [r3, #24]
 8001434:	4b2d      	ldr	r3, [pc, #180]	; (80014ec <display_menu+0x378>)
 8001436:	68db      	ldr	r3, [r3, #12]
 8001438:	4353      	muls	r3, r2
 800143a:	2164      	movs	r1, #100	; 0x64
 800143c:	0018      	movs	r0, r3
 800143e:	f7fe fe7f 	bl	8000140 <__udivsi3>
 8001442:	0003      	movs	r3, r0
 8001444:	0018      	movs	r0, r3
 8001446:	f7ff f9f9 	bl	800083c <__aeabi_ui2f>
 800144a:	1c03      	adds	r3, r0, #0
 800144c:	1c18      	adds	r0, r3, #0
 800144e:	f7fe ff51 	bl	80002f4 <__aeabi_f2uiz>
 8001452:	0002      	movs	r2, r0
 8001454:	4b25      	ldr	r3, [pc, #148]	; (80014ec <display_menu+0x378>)
 8001456:	611a      	str	r2, [r3, #16]
									pulse_parameter.config.Toff=pulse_parameter.config.Period-pulse_parameter.config.Ton;
 8001458:	4b24      	ldr	r3, [pc, #144]	; (80014ec <display_menu+0x378>)
 800145a:	699a      	ldr	r2, [r3, #24]
 800145c:	4b23      	ldr	r3, [pc, #140]	; (80014ec <display_menu+0x378>)
 800145e:	691b      	ldr	r3, [r3, #16]
 8001460:	1ad2      	subs	r2, r2, r3
 8001462:	4b22      	ldr	r3, [pc, #136]	; (80014ec <display_menu+0x378>)
 8001464:	615a      	str	r2, [r3, #20]
									erase_data_from_flash(Adrr_flash.Adrr_numer_of_pulses);
 8001466:	4b29      	ldr	r3, [pc, #164]	; (800150c <display_menu+0x398>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	0018      	movs	r0, r3
 800146c:	f7ff fb76 	bl	8000b5c <erase_data_from_flash>
									pulse_parameter.if_running=1;
 8001470:	4b1e      	ldr	r3, [pc, #120]	; (80014ec <display_menu+0x378>)
 8001472:	2201      	movs	r2, #1
 8001474:	621a      	str	r2, [r3, #32]
									state=RUNNING_N_TIMES;
 8001476:	4b21      	ldr	r3, [pc, #132]	; (80014fc <display_menu+0x388>)
 8001478:	2201      	movs	r2, #1
 800147a:	701a      	strb	r2, [r3, #0]
 800147c:	e003      	b.n	8001486 <display_menu+0x312>
								}
							}
							else{
								printf(error_with_run);
 800147e:	4b21      	ldr	r3, [pc, #132]	; (8001504 <display_menu+0x390>)
 8001480:	0018      	movs	r0, r3
 8001482:	f003 ffef 	bl	8005464 <iprintf>
							}
					}
					for (int i = 0; i < sizeof(tokens) / sizeof(tokens[0]); i++) {
 8001486:	2300      	movs	r3, #0
 8001488:	613b      	str	r3, [r7, #16]
 800148a:	e009      	b.n	80014a0 <display_menu+0x32c>
						 free(tokens[i]);
 800148c:	4b19      	ldr	r3, [pc, #100]	; (80014f4 <display_menu+0x380>)
 800148e:	693a      	ldr	r2, [r7, #16]
 8001490:	0092      	lsls	r2, r2, #2
 8001492:	58d3      	ldr	r3, [r2, r3]
 8001494:	0018      	movs	r0, r3
 8001496:	f003 fe75 	bl	8005184 <free>
					for (int i = 0; i < sizeof(tokens) / sizeof(tokens[0]); i++) {
 800149a:	693b      	ldr	r3, [r7, #16]
 800149c:	3301      	adds	r3, #1
 800149e:	613b      	str	r3, [r7, #16]
 80014a0:	693b      	ldr	r3, [r7, #16]
 80014a2:	2b03      	cmp	r3, #3
 80014a4:	d9f2      	bls.n	800148c <display_menu+0x318>
 80014a6:	e06c      	b.n	8001582 <display_menu+0x40e>
					}
				}
		}
		else if (strcmp(line_buffer, "stop") == 0){
 80014a8:	4a19      	ldr	r2, [pc, #100]	; (8001510 <display_menu+0x39c>)
 80014aa:	4b0e      	ldr	r3, [pc, #56]	; (80014e4 <display_menu+0x370>)
 80014ac:	0011      	movs	r1, r2
 80014ae:	0018      	movs	r0, r3
 80014b0:	f7fe fe2a 	bl	8000108 <strcmp>
 80014b4:	1e03      	subs	r3, r0, #0
 80014b6:	d106      	bne.n	80014c6 <display_menu+0x352>
			pulse_parameter.if_running=0;
 80014b8:	4b0c      	ldr	r3, [pc, #48]	; (80014ec <display_menu+0x378>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	621a      	str	r2, [r3, #32]
			state=SAVE_DATA;
 80014be:	4b0f      	ldr	r3, [pc, #60]	; (80014fc <display_menu+0x388>)
 80014c0:	2202      	movs	r2, #2
 80014c2:	701a      	strb	r2, [r3, #0]
 80014c4:	e05d      	b.n	8001582 <display_menu+0x40e>
		}
		else if (strcmp(line_buffer, "read") == 0){
 80014c6:	4a13      	ldr	r2, [pc, #76]	; (8001514 <display_menu+0x3a0>)
 80014c8:	4b06      	ldr	r3, [pc, #24]	; (80014e4 <display_menu+0x370>)
 80014ca:	0011      	movs	r1, r2
 80014cc:	0018      	movs	r0, r3
 80014ce:	f7fe fe1b 	bl	8000108 <strcmp>
 80014d2:	1e03      	subs	r3, r0, #0
 80014d4:	d120      	bne.n	8001518 <display_menu+0x3a4>
			state=READ_DATA;
 80014d6:	4b09      	ldr	r3, [pc, #36]	; (80014fc <display_menu+0x388>)
 80014d8:	2203      	movs	r2, #3
 80014da:	701a      	strb	r2, [r3, #0]
 80014dc:	e051      	b.n	8001582 <display_menu+0x40e>
 80014de:	46c0      	nop			; (mov r8, r8)
 80014e0:	200002f0 	.word	0x200002f0
 80014e4:	20000264 	.word	0x20000264
 80014e8:	08006678 	.word	0x08006678
 80014ec:	2000023c 	.word	0x2000023c
 80014f0:	0800667c 	.word	0x0800667c
 80014f4:	200002e0 	.word	0x200002e0
 80014f8:	080066c0 	.word	0x080066c0
 80014fc:	20000214 	.word	0x20000214
 8001500:	08006820 	.word	0x08006820
 8001504:	200000b8 	.word	0x200000b8
 8001508:	20000158 	.word	0x20000158
 800150c:	20000218 	.word	0x20000218
 8001510:	080066c4 	.word	0x080066c4
 8001514:	080066cc 	.word	0x080066cc
		}
		else if (strcmp(line_buffer, "cont") == 0){
 8001518:	4a2b      	ldr	r2, [pc, #172]	; (80015c8 <display_menu+0x454>)
 800151a:	4b2c      	ldr	r3, [pc, #176]	; (80015cc <display_menu+0x458>)
 800151c:	0011      	movs	r1, r2
 800151e:	0018      	movs	r0, r3
 8001520:	f7fe fdf2 	bl	8000108 <strcmp>
 8001524:	1e03      	subs	r3, r0, #0
 8001526:	d124      	bne.n	8001572 <display_menu+0x3fe>
			read();
 8001528:	f004 f958 	bl	80057dc <read>
			erase_data_from_flash(Adrr_flash.Adrr_numer_of_pulses);
 800152c:	4b28      	ldr	r3, [pc, #160]	; (80015d0 <display_menu+0x45c>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	0018      	movs	r0, r3
 8001532:	f7ff fb13 	bl	8000b5c <erase_data_from_flash>
			if(pulse_parameter.if_infinity==0){
 8001536:	4b27      	ldr	r3, [pc, #156]	; (80015d4 <display_menu+0x460>)
 8001538:	69db      	ldr	r3, [r3, #28]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d10e      	bne.n	800155c <display_menu+0x3e8>
            	if(pulse_parameter.numer_of_pulses!=0){
 800153e:	4b25      	ldr	r3, [pc, #148]	; (80015d4 <display_menu+0x460>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d006      	beq.n	8001554 <display_menu+0x3e0>
            		pulse_parameter.if_running=1;
 8001546:	4b23      	ldr	r3, [pc, #140]	; (80015d4 <display_menu+0x460>)
 8001548:	2201      	movs	r2, #1
 800154a:	621a      	str	r2, [r3, #32]
					state=RUNNING_N_TIMES;
 800154c:	4b22      	ldr	r3, [pc, #136]	; (80015d8 <display_menu+0x464>)
 800154e:	2201      	movs	r2, #1
 8001550:	701a      	strb	r2, [r3, #0]
 8001552:	e016      	b.n	8001582 <display_menu+0x40e>
            	}
            	else{
            		state=DONE;
 8001554:	4b20      	ldr	r3, [pc, #128]	; (80015d8 <display_menu+0x464>)
 8001556:	2205      	movs	r2, #5
 8001558:	701a      	strb	r2, [r3, #0]
 800155a:	e012      	b.n	8001582 <display_menu+0x40e>
            	}
			}
			else if(pulse_parameter.if_infinity==1){
 800155c:	4b1d      	ldr	r3, [pc, #116]	; (80015d4 <display_menu+0x460>)
 800155e:	69db      	ldr	r3, [r3, #28]
 8001560:	2b01      	cmp	r3, #1
 8001562:	d10e      	bne.n	8001582 <display_menu+0x40e>
				pulse_parameter.if_running=1;
 8001564:	4b1b      	ldr	r3, [pc, #108]	; (80015d4 <display_menu+0x460>)
 8001566:	2201      	movs	r2, #1
 8001568:	621a      	str	r2, [r3, #32]
				state=RUNNING_INFI;
 800156a:	4b1b      	ldr	r3, [pc, #108]	; (80015d8 <display_menu+0x464>)
 800156c:	2200      	movs	r2, #0
 800156e:	701a      	strb	r2, [r3, #0]
 8001570:	e007      	b.n	8001582 <display_menu+0x40e>
			}
		}
		else {
			printf(error);
 8001572:	4b1a      	ldr	r3, [pc, #104]	; (80015dc <display_menu+0x468>)
 8001574:	0018      	movs	r0, r3
 8001576:	f003 ff75 	bl	8005464 <iprintf>
			printf(menu);
 800157a:	4b19      	ldr	r3, [pc, #100]	; (80015e0 <display_menu+0x46c>)
 800157c:	0018      	movs	r0, r3
 800157e:	f003 ff71 	bl	8005464 <iprintf>
		}
		printf("\n\r");
 8001582:	4b18      	ldr	r3, [pc, #96]	; (80015e4 <display_menu+0x470>)
 8001584:	0018      	movs	r0, r3
 8001586:	f003 ff6d 	bl	8005464 <iprintf>
		for(int i;i<line_length;i++){
 800158a:	e007      	b.n	800159c <display_menu+0x428>
			line_buffer[i]='\0';
 800158c:	4a0f      	ldr	r2, [pc, #60]	; (80015cc <display_menu+0x458>)
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	18d3      	adds	r3, r2, r3
 8001592:	2200      	movs	r2, #0
 8001594:	701a      	strb	r2, [r3, #0]
		for(int i;i<line_length;i++){
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	3301      	adds	r3, #1
 800159a:	60fb      	str	r3, [r7, #12]
 800159c:	68fa      	ldr	r2, [r7, #12]
 800159e:	4b12      	ldr	r3, [pc, #72]	; (80015e8 <display_menu+0x474>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	429a      	cmp	r2, r3
 80015a4:	d3f2      	bcc.n	800158c <display_menu+0x418>
			}
		line_length = 0;
 80015a6:	4b10      	ldr	r3, [pc, #64]	; (80015e8 <display_menu+0x474>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	601a      	str	r2, [r3, #0]
	}
	else{
		printf(error);
		printf(menu);
	}
}
 80015ac:	e007      	b.n	80015be <display_menu+0x44a>
		printf(error);
 80015ae:	4b0b      	ldr	r3, [pc, #44]	; (80015dc <display_menu+0x468>)
 80015b0:	0018      	movs	r0, r3
 80015b2:	f003 ff57 	bl	8005464 <iprintf>
		printf(menu);
 80015b6:	4b0a      	ldr	r3, [pc, #40]	; (80015e0 <display_menu+0x46c>)
 80015b8:	0018      	movs	r0, r3
 80015ba:	f003 ff53 	bl	8005464 <iprintf>
}
 80015be:	46c0      	nop			; (mov r8, r8)
 80015c0:	46bd      	mov	sp, r7
 80015c2:	b00a      	add	sp, #40	; 0x28
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	46c0      	nop			; (mov r8, r8)
 80015c8:	080066d4 	.word	0x080066d4
 80015cc:	20000264 	.word	0x20000264
 80015d0:	20000218 	.word	0x20000218
 80015d4:	2000023c 	.word	0x2000023c
 80015d8:	20000214 	.word	0x20000214
 80015dc:	200000a8 	.word	0x200000a8
 80015e0:	20000008 	.word	0x20000008
 80015e4:	080066dc 	.word	0x080066dc
 80015e8:	200002f0 	.word	0x200002f0

080015ec <ASCII_TO_uint8_t>:
uint32_t ASCII_TO_uint8_t(const char *table){
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b086      	sub	sp, #24
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
	uint32_t result = 0;
 80015f4:	2300      	movs	r3, #0
 80015f6:	617b      	str	r3, [r7, #20]
	uint32_t numeric_value=0;
 80015f8:	2300      	movs	r3, #0
 80015fa:	60fb      	str	r3, [r7, #12]
    int size = SIZE_OF_VARIABLE;
 80015fc:	230a      	movs	r3, #10
 80015fe:	60bb      	str	r3, [r7, #8]
    for (int i = 0; i < size; i++) {
 8001600:	2300      	movs	r3, #0
 8001602:	613b      	str	r3, [r7, #16]
 8001604:	e01d      	b.n	8001642 <ASCII_TO_uint8_t+0x56>
    	if(table[i]==' ' || table[i]=='\0'){
 8001606:	693b      	ldr	r3, [r7, #16]
 8001608:	687a      	ldr	r2, [r7, #4]
 800160a:	18d3      	adds	r3, r2, r3
 800160c:	781b      	ldrb	r3, [r3, #0]
 800160e:	2b20      	cmp	r3, #32
 8001610:	d01b      	beq.n	800164a <ASCII_TO_uint8_t+0x5e>
 8001612:	693b      	ldr	r3, [r7, #16]
 8001614:	687a      	ldr	r2, [r7, #4]
 8001616:	18d3      	adds	r3, r2, r3
 8001618:	781b      	ldrb	r3, [r3, #0]
 800161a:	2b00      	cmp	r3, #0
 800161c:	d015      	beq.n	800164a <ASCII_TO_uint8_t+0x5e>
    		break;
    	}
    	else{
        	numeric_value = table[i] - '0';
 800161e:	693b      	ldr	r3, [r7, #16]
 8001620:	687a      	ldr	r2, [r7, #4]
 8001622:	18d3      	adds	r3, r2, r3
 8001624:	781b      	ldrb	r3, [r3, #0]
 8001626:	3b30      	subs	r3, #48	; 0x30
 8001628:	60fb      	str	r3, [r7, #12]
            result = result * 10 + numeric_value;
 800162a:	697a      	ldr	r2, [r7, #20]
 800162c:	0013      	movs	r3, r2
 800162e:	009b      	lsls	r3, r3, #2
 8001630:	189b      	adds	r3, r3, r2
 8001632:	005b      	lsls	r3, r3, #1
 8001634:	001a      	movs	r2, r3
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	189b      	adds	r3, r3, r2
 800163a:	617b      	str	r3, [r7, #20]
    for (int i = 0; i < size; i++) {
 800163c:	693b      	ldr	r3, [r7, #16]
 800163e:	3301      	adds	r3, #1
 8001640:	613b      	str	r3, [r7, #16]
 8001642:	693a      	ldr	r2, [r7, #16]
 8001644:	68bb      	ldr	r3, [r7, #8]
 8001646:	429a      	cmp	r2, r3
 8001648:	dbdd      	blt.n	8001606 <ASCII_TO_uint8_t+0x1a>
    	}
    }
    return result;
 800164a:	697b      	ldr	r3, [r7, #20]
}
 800164c:	0018      	movs	r0, r3
 800164e:	46bd      	mov	sp, r7
 8001650:	b006      	add	sp, #24
 8001652:	bd80      	pop	{r7, pc}

08001654 <splitString>:

void splitString(const char* input_string, char** tokens) {
 8001654:	b590      	push	{r4, r7, lr}
 8001656:	b087      	sub	sp, #28
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
 800165c:	6039      	str	r1, [r7, #0]
	const char delimiters[] = " \r\n";
 800165e:	2408      	movs	r4, #8
 8001660:	193b      	adds	r3, r7, r4
 8001662:	4a1b      	ldr	r2, [pc, #108]	; (80016d0 <splitString+0x7c>)
 8001664:	601a      	str	r2, [r3, #0]
    char* copy_of_input = strdup(input_string);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	0018      	movs	r0, r3
 800166a:	f003 ff7f 	bl	800556c <strdup>
 800166e:	0003      	movs	r3, r0
 8001670:	60fb      	str	r3, [r7, #12]
    char* token = strtok(copy_of_input, delimiters);
 8001672:	193a      	adds	r2, r7, r4
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	0011      	movs	r1, r2
 8001678:	0018      	movs	r0, r3
 800167a:	f003 ffbf 	bl	80055fc <strtok>
 800167e:	0003      	movs	r3, r0
 8001680:	617b      	str	r3, [r7, #20]

    int token_count = 0;
 8001682:	2300      	movs	r3, #0
 8001684:	613b      	str	r3, [r7, #16]
    while (token != NULL && token_count < MAX_TOKENS) {
 8001686:	e014      	b.n	80016b2 <splitString+0x5e>
        tokens[token_count] = strdup(token);
 8001688:	693b      	ldr	r3, [r7, #16]
 800168a:	009b      	lsls	r3, r3, #2
 800168c:	683a      	ldr	r2, [r7, #0]
 800168e:	18d4      	adds	r4, r2, r3
 8001690:	697b      	ldr	r3, [r7, #20]
 8001692:	0018      	movs	r0, r3
 8001694:	f003 ff6a 	bl	800556c <strdup>
 8001698:	0003      	movs	r3, r0
 800169a:	6023      	str	r3, [r4, #0]
        token = strtok(NULL, delimiters);
 800169c:	2308      	movs	r3, #8
 800169e:	18fb      	adds	r3, r7, r3
 80016a0:	0019      	movs	r1, r3
 80016a2:	2000      	movs	r0, #0
 80016a4:	f003 ffaa 	bl	80055fc <strtok>
 80016a8:	0003      	movs	r3, r0
 80016aa:	617b      	str	r3, [r7, #20]
        token_count++;
 80016ac:	693b      	ldr	r3, [r7, #16]
 80016ae:	3301      	adds	r3, #1
 80016b0:	613b      	str	r3, [r7, #16]
    while (token != NULL && token_count < MAX_TOKENS) {
 80016b2:	697b      	ldr	r3, [r7, #20]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d002      	beq.n	80016be <splitString+0x6a>
 80016b8:	693b      	ldr	r3, [r7, #16]
 80016ba:	2b03      	cmp	r3, #3
 80016bc:	dde4      	ble.n	8001688 <splitString+0x34>
    }
    free(copy_of_input);
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	0018      	movs	r0, r3
 80016c2:	f003 fd5f 	bl	8005184 <free>
}
 80016c6:	46c0      	nop			; (mov r8, r8)
 80016c8:	46bd      	mov	sp, r7
 80016ca:	b007      	add	sp, #28
 80016cc:	bd90      	pop	{r4, r7, pc}
 80016ce:	46c0      	nop			; (mov r8, r8)
 80016d0:	000a0d20 	.word	0x000a0d20

080016d4 <generate_pulse>:

void generate_pulse(void){
 80016d4:	b580      	push	{r7, lr}
 80016d6:	af00      	add	r7, sp, #0
	  PULSE_PORT->BSRR = PULSE_LOW;
 80016d8:	23a0      	movs	r3, #160	; 0xa0
 80016da:	05db      	lsls	r3, r3, #23
 80016dc:	2244      	movs	r2, #68	; 0x44
 80016de:	4252      	negs	r2, r2
 80016e0:	619a      	str	r2, [r3, #24]
	  while((PULSE_PORT->ODR & GPIO_ODR_OD0)&&(PULSE_PORT->ODR & GPIO_ODR_OD1)&&(PULSE_PORT->ODR & GPIO_ODR_OD6)){}
 80016e2:	46c0      	nop			; (mov r8, r8)
 80016e4:	23a0      	movs	r3, #160	; 0xa0
 80016e6:	05db      	lsls	r3, r3, #23
 80016e8:	695b      	ldr	r3, [r3, #20]
 80016ea:	2201      	movs	r2, #1
 80016ec:	4013      	ands	r3, r2
 80016ee:	d00b      	beq.n	8001708 <generate_pulse+0x34>
 80016f0:	23a0      	movs	r3, #160	; 0xa0
 80016f2:	05db      	lsls	r3, r3, #23
 80016f4:	695b      	ldr	r3, [r3, #20]
 80016f6:	2202      	movs	r2, #2
 80016f8:	4013      	ands	r3, r2
 80016fa:	d005      	beq.n	8001708 <generate_pulse+0x34>
 80016fc:	23a0      	movs	r3, #160	; 0xa0
 80016fe:	05db      	lsls	r3, r3, #23
 8001700:	695b      	ldr	r3, [r3, #20]
 8001702:	2240      	movs	r2, #64	; 0x40
 8001704:	4013      	ands	r3, r2
 8001706:	d1ed      	bne.n	80016e4 <generate_pulse+0x10>
	  HAL_Delay((uint32_t)pulse_parameter.config.Ton);
 8001708:	4b16      	ldr	r3, [pc, #88]	; (8001764 <generate_pulse+0x90>)
 800170a:	691b      	ldr	r3, [r3, #16]
 800170c:	0018      	movs	r0, r3
 800170e:	f000 fbc7 	bl	8001ea0 <HAL_Delay>
	  PULSE_PORT->BSRR |= PULSE_HIGH;
 8001712:	23a0      	movs	r3, #160	; 0xa0
 8001714:	05db      	lsls	r3, r3, #23
 8001716:	699a      	ldr	r2, [r3, #24]
 8001718:	23a0      	movs	r3, #160	; 0xa0
 800171a:	05db      	lsls	r3, r3, #23
 800171c:	2143      	movs	r1, #67	; 0x43
 800171e:	430a      	orrs	r2, r1
 8001720:	619a      	str	r2, [r3, #24]
	  while(!(PULSE_PORT->ODR & GPIO_ODR_OD0)&&(PULSE_PORT->ODR & GPIO_ODR_OD1)&&(PULSE_PORT->ODR & GPIO_ODR_OD6)){}
 8001722:	46c0      	nop			; (mov r8, r8)
 8001724:	23a0      	movs	r3, #160	; 0xa0
 8001726:	05db      	lsls	r3, r3, #23
 8001728:	695b      	ldr	r3, [r3, #20]
 800172a:	2201      	movs	r2, #1
 800172c:	4013      	ands	r3, r2
 800172e:	d10b      	bne.n	8001748 <generate_pulse+0x74>
 8001730:	23a0      	movs	r3, #160	; 0xa0
 8001732:	05db      	lsls	r3, r3, #23
 8001734:	695b      	ldr	r3, [r3, #20]
 8001736:	2202      	movs	r2, #2
 8001738:	4013      	ands	r3, r2
 800173a:	d005      	beq.n	8001748 <generate_pulse+0x74>
 800173c:	23a0      	movs	r3, #160	; 0xa0
 800173e:	05db      	lsls	r3, r3, #23
 8001740:	695b      	ldr	r3, [r3, #20]
 8001742:	2240      	movs	r2, #64	; 0x40
 8001744:	4013      	ands	r3, r2
 8001746:	d1ed      	bne.n	8001724 <generate_pulse+0x50>
	  HAL_Delay((uint32_t)pulse_parameter.config.Toff);
 8001748:	4b06      	ldr	r3, [pc, #24]	; (8001764 <generate_pulse+0x90>)
 800174a:	695b      	ldr	r3, [r3, #20]
 800174c:	0018      	movs	r0, r3
 800174e:	f000 fba7 	bl	8001ea0 <HAL_Delay>
	  (pulse_parameter.total_pulse_generated)++;
 8001752:	4b04      	ldr	r3, [pc, #16]	; (8001764 <generate_pulse+0x90>)
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	1c5a      	adds	r2, r3, #1
 8001758:	4b02      	ldr	r3, [pc, #8]	; (8001764 <generate_pulse+0x90>)
 800175a:	605a      	str	r2, [r3, #4]
}
 800175c:	46c0      	nop			; (mov r8, r8)
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}
 8001762:	46c0      	nop			; (mov r8, r8)
 8001764:	2000023c 	.word	0x2000023c

08001768 <read_data>:

void read_data(void){
 8001768:	b580      	push	{r7, lr}
 800176a:	af00      	add	r7, sp, #0
	pulse_parameter.if_infinity=read_data_from_flash(Adrr_flash.Adrr_if_infinitive);
 800176c:	4b1d      	ldr	r3, [pc, #116]	; (80017e4 <read_data+0x7c>)
 800176e:	699b      	ldr	r3, [r3, #24]
 8001770:	0018      	movs	r0, r3
 8001772:	f7ff f9e7 	bl	8000b44 <read_data_from_flash>
 8001776:	0002      	movs	r2, r0
 8001778:	4b1b      	ldr	r3, [pc, #108]	; (80017e8 <read_data+0x80>)
 800177a:	61da      	str	r2, [r3, #28]
	pulse_parameter.numer_of_pulses=read_data_from_flash(Adrr_flash.Adrr_numer_of_pulses);
 800177c:	4b19      	ldr	r3, [pc, #100]	; (80017e4 <read_data+0x7c>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	0018      	movs	r0, r3
 8001782:	f7ff f9df 	bl	8000b44 <read_data_from_flash>
 8001786:	0002      	movs	r2, r0
 8001788:	4b17      	ldr	r3, [pc, #92]	; (80017e8 <read_data+0x80>)
 800178a:	601a      	str	r2, [r3, #0]
	pulse_parameter.total_pulse_generated=read_data_from_flash(Adrr_flash.Adrr_total_pulse_generated);
 800178c:	4b15      	ldr	r3, [pc, #84]	; (80017e4 <read_data+0x7c>)
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	0018      	movs	r0, r3
 8001792:	f7ff f9d7 	bl	8000b44 <read_data_from_flash>
 8001796:	0002      	movs	r2, r0
 8001798:	4b13      	ldr	r3, [pc, #76]	; (80017e8 <read_data+0x80>)
 800179a:	605a      	str	r2, [r3, #4]
	pulse_parameter.config.Ton=read_data_from_flash(Adrr_flash.Adrr_Ton);
 800179c:	4b11      	ldr	r3, [pc, #68]	; (80017e4 <read_data+0x7c>)
 800179e:	689b      	ldr	r3, [r3, #8]
 80017a0:	0018      	movs	r0, r3
 80017a2:	f7ff f9cf 	bl	8000b44 <read_data_from_flash>
 80017a6:	0002      	movs	r2, r0
 80017a8:	4b0f      	ldr	r3, [pc, #60]	; (80017e8 <read_data+0x80>)
 80017aa:	611a      	str	r2, [r3, #16]
	pulse_parameter.config.Toff=read_data_from_flash(Adrr_flash.Adrr_Toff);
 80017ac:	4b0d      	ldr	r3, [pc, #52]	; (80017e4 <read_data+0x7c>)
 80017ae:	68db      	ldr	r3, [r3, #12]
 80017b0:	0018      	movs	r0, r3
 80017b2:	f7ff f9c7 	bl	8000b44 <read_data_from_flash>
 80017b6:	0002      	movs	r2, r0
 80017b8:	4b0b      	ldr	r3, [pc, #44]	; (80017e8 <read_data+0x80>)
 80017ba:	615a      	str	r2, [r3, #20]
	pulse_parameter.config.freq=read_data_from_flash(Adrr_flash.Adrr_freq);
 80017bc:	4b09      	ldr	r3, [pc, #36]	; (80017e4 <read_data+0x7c>)
 80017be:	691b      	ldr	r3, [r3, #16]
 80017c0:	0018      	movs	r0, r3
 80017c2:	f7ff f9bf 	bl	8000b44 <read_data_from_flash>
 80017c6:	0002      	movs	r2, r0
 80017c8:	4b07      	ldr	r3, [pc, #28]	; (80017e8 <read_data+0x80>)
 80017ca:	609a      	str	r2, [r3, #8]
	pulse_parameter.config.duty_cycle=read_data_from_flash(Adrr_flash.Adrr_duty_cycle);
 80017cc:	4b05      	ldr	r3, [pc, #20]	; (80017e4 <read_data+0x7c>)
 80017ce:	695b      	ldr	r3, [r3, #20]
 80017d0:	0018      	movs	r0, r3
 80017d2:	f7ff f9b7 	bl	8000b44 <read_data_from_flash>
 80017d6:	0002      	movs	r2, r0
 80017d8:	4b03      	ldr	r3, [pc, #12]	; (80017e8 <read_data+0x80>)
 80017da:	60da      	str	r2, [r3, #12]
}
 80017dc:	46c0      	nop			; (mov r8, r8)
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	46c0      	nop			; (mov r8, r8)
 80017e4:	20000218 	.word	0x20000218
 80017e8:	2000023c 	.word	0x2000023c

080017ec <display_data>:

void display_data(void){
 80017ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017ee:	b087      	sub	sp, #28
 80017f0:	af04      	add	r7, sp, #16
	  if(pulse_parameter.if_infinity==1){
 80017f2:	4b32      	ldr	r3, [pc, #200]	; (80018bc <display_data+0xd0>)
 80017f4:	69db      	ldr	r3, [r3, #28]
 80017f6:	2b01      	cmp	r3, #1
 80017f8:	d114      	bne.n	8001824 <display_data+0x38>
		 sprintf(line_buffer,"User chose to generate infinity pulses,Total pulses:%lu,Ton:%lu,Toff:%lu,Freq:%lu,Duty_cycle:%lu\r\n",pulse_parameter.total_pulse_generated,pulse_parameter.config.Ton,pulse_parameter.config.Toff,pulse_parameter.config.freq,pulse_parameter.config.duty_cycle);
 80017fa:	4b30      	ldr	r3, [pc, #192]	; (80018bc <display_data+0xd0>)
 80017fc:	685d      	ldr	r5, [r3, #4]
 80017fe:	4b2f      	ldr	r3, [pc, #188]	; (80018bc <display_data+0xd0>)
 8001800:	691e      	ldr	r6, [r3, #16]
 8001802:	4b2e      	ldr	r3, [pc, #184]	; (80018bc <display_data+0xd0>)
 8001804:	695a      	ldr	r2, [r3, #20]
 8001806:	4b2d      	ldr	r3, [pc, #180]	; (80018bc <display_data+0xd0>)
 8001808:	6899      	ldr	r1, [r3, #8]
 800180a:	4b2c      	ldr	r3, [pc, #176]	; (80018bc <display_data+0xd0>)
 800180c:	68db      	ldr	r3, [r3, #12]
 800180e:	4c2c      	ldr	r4, [pc, #176]	; (80018c0 <display_data+0xd4>)
 8001810:	482c      	ldr	r0, [pc, #176]	; (80018c4 <display_data+0xd8>)
 8001812:	9302      	str	r3, [sp, #8]
 8001814:	9101      	str	r1, [sp, #4]
 8001816:	9200      	str	r2, [sp, #0]
 8001818:	0033      	movs	r3, r6
 800181a:	002a      	movs	r2, r5
 800181c:	0021      	movs	r1, r4
 800181e:	f003 fe31 	bl	8005484 <siprintf>
 8001822:	e018      	b.n	8001856 <display_data+0x6a>
	  }
	  else{
		  sprintf(line_buffer,"How many pulses left:%lu,Total pulses:%lu,Ton:%lu,Toff:%lu,Freq:%lu,Duty cycle:%lu\r\n",pulse_parameter.numer_of_pulses,pulse_parameter.total_pulse_generated,pulse_parameter.config.Ton,pulse_parameter.config.Toff,pulse_parameter.config.freq,pulse_parameter.config.duty_cycle);
 8001824:	4b25      	ldr	r3, [pc, #148]	; (80018bc <display_data+0xd0>)
 8001826:	681e      	ldr	r6, [r3, #0]
 8001828:	4b24      	ldr	r3, [pc, #144]	; (80018bc <display_data+0xd0>)
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	469c      	mov	ip, r3
 800182e:	4b23      	ldr	r3, [pc, #140]	; (80018bc <display_data+0xd0>)
 8001830:	691a      	ldr	r2, [r3, #16]
 8001832:	4b22      	ldr	r3, [pc, #136]	; (80018bc <display_data+0xd0>)
 8001834:	6959      	ldr	r1, [r3, #20]
 8001836:	4b21      	ldr	r3, [pc, #132]	; (80018bc <display_data+0xd0>)
 8001838:	6898      	ldr	r0, [r3, #8]
 800183a:	4b20      	ldr	r3, [pc, #128]	; (80018bc <display_data+0xd0>)
 800183c:	68db      	ldr	r3, [r3, #12]
 800183e:	4d22      	ldr	r5, [pc, #136]	; (80018c8 <display_data+0xdc>)
 8001840:	4c20      	ldr	r4, [pc, #128]	; (80018c4 <display_data+0xd8>)
 8001842:	9303      	str	r3, [sp, #12]
 8001844:	9002      	str	r0, [sp, #8]
 8001846:	9101      	str	r1, [sp, #4]
 8001848:	9200      	str	r2, [sp, #0]
 800184a:	4663      	mov	r3, ip
 800184c:	0032      	movs	r2, r6
 800184e:	0029      	movs	r1, r5
 8001850:	0020      	movs	r0, r4
 8001852:	f003 fe17 	bl	8005484 <siprintf>
	  }
	  HAL_UART_Transmit(&huart2, (uint8_t*)line_buffer, strlen(line_buffer), 50);
 8001856:	4b1b      	ldr	r3, [pc, #108]	; (80018c4 <display_data+0xd8>)
 8001858:	0018      	movs	r0, r3
 800185a:	f7fe fc5f 	bl	800011c <strlen>
 800185e:	0003      	movs	r3, r0
 8001860:	b29a      	uxth	r2, r3
 8001862:	4918      	ldr	r1, [pc, #96]	; (80018c4 <display_data+0xd8>)
 8001864:	4819      	ldr	r0, [pc, #100]	; (80018cc <display_data+0xe0>)
 8001866:	2332      	movs	r3, #50	; 0x32
 8001868:	f002 f8e6 	bl	8003a38 <HAL_UART_Transmit>
	  for(int i;i<strlen(line_buffer);i++){
 800186c:	e007      	b.n	800187e <display_data+0x92>
		  line_buffer[i]='\0';
 800186e:	4a15      	ldr	r2, [pc, #84]	; (80018c4 <display_data+0xd8>)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	18d3      	adds	r3, r2, r3
 8001874:	2200      	movs	r2, #0
 8001876:	701a      	strb	r2, [r3, #0]
	  for(int i;i<strlen(line_buffer);i++){
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	3301      	adds	r3, #1
 800187c:	607b      	str	r3, [r7, #4]
 800187e:	4b11      	ldr	r3, [pc, #68]	; (80018c4 <display_data+0xd8>)
 8001880:	0018      	movs	r0, r3
 8001882:	f7fe fc4b 	bl	800011c <strlen>
 8001886:	0002      	movs	r2, r0
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	429a      	cmp	r2, r3
 800188c:	d8ef      	bhi.n	800186e <display_data+0x82>
	  }
	  for(int i =0;i<size_of_config;i++){
 800188e:	2300      	movs	r3, #0
 8001890:	603b      	str	r3, [r7, #0]
 8001892:	e009      	b.n	80018a8 <display_data+0xbc>
			*(ptr_to_data_struct+i)=0;
 8001894:	4b0e      	ldr	r3, [pc, #56]	; (80018d0 <display_data+0xe4>)
 8001896:	681a      	ldr	r2, [r3, #0]
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	009b      	lsls	r3, r3, #2
 800189c:	18d3      	adds	r3, r2, r3
 800189e:	2200      	movs	r2, #0
 80018a0:	601a      	str	r2, [r3, #0]
	  for(int i =0;i<size_of_config;i++){
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	3301      	adds	r3, #1
 80018a6:	603b      	str	r3, [r7, #0]
 80018a8:	683a      	ldr	r2, [r7, #0]
 80018aa:	4b0a      	ldr	r3, [pc, #40]	; (80018d4 <display_data+0xe8>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	429a      	cmp	r2, r3
 80018b0:	d3f0      	bcc.n	8001894 <display_data+0xa8>
	  }
}
 80018b2:	46c0      	nop			; (mov r8, r8)
 80018b4:	46c0      	nop			; (mov r8, r8)
 80018b6:	46bd      	mov	sp, r7
 80018b8:	b003      	add	sp, #12
 80018ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80018bc:	2000023c 	.word	0x2000023c
 80018c0:	080066e0 	.word	0x080066e0
 80018c4:	20000264 	.word	0x20000264
 80018c8:	08006744 	.word	0x08006744
 80018cc:	200002fc 	.word	0x200002fc
 80018d0:	20000000 	.word	0x20000000
 80018d4:	20000004 	.word	0x20000004

080018d8 <TIM6_DAC_IRQHandler>:

void TIM6_IRQHandler(void){
 80018d8:	b580      	push	{r7, lr}
 80018da:	af00      	add	r7, sp, #0
	TIM6->SR &=~TIM_SR_UIF;
 80018dc:	4b07      	ldr	r3, [pc, #28]	; (80018fc <TIM6_DAC_IRQHandler+0x24>)
 80018de:	691a      	ldr	r2, [r3, #16]
 80018e0:	4b06      	ldr	r3, [pc, #24]	; (80018fc <TIM6_DAC_IRQHandler+0x24>)
 80018e2:	2101      	movs	r1, #1
 80018e4:	438a      	bics	r2, r1
 80018e6:	611a      	str	r2, [r3, #16]
	if(pulse_flag.pvd==0){
 80018e8:	4b05      	ldr	r3, [pc, #20]	; (8001900 <TIM6_DAC_IRQHandler+0x28>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d101      	bne.n	80018f4 <TIM6_DAC_IRQHandler+0x1c>
		TIM6_Callback();
 80018f0:	f7ff f9d8 	bl	8000ca4 <TIM6_Callback>
	}
}
 80018f4:	46c0      	nop			; (mov r8, r8)
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	46c0      	nop			; (mov r8, r8)
 80018fc:	40001000 	.word	0x40001000
 8001900:	20000234 	.word	0x20000234

08001904 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001908:	b672      	cpsid	i
}
 800190a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800190c:	e7fe      	b.n	800190c <Error_Handler+0x8>
	...

08001910 <STANDBY>:
 *  Created on: Jul 24, 2023
 *      Author: Karol
 */
#include <standby.h>

void STANDBY(void){
 8001910:	b580      	push	{r7, lr}
 8001912:	b082      	sub	sp, #8
 8001914:	af00      	add	r7, sp, #0
	RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8001916:	4b1f      	ldr	r3, [pc, #124]	; (8001994 <STANDBY+0x84>)
 8001918:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800191a:	4b1e      	ldr	r3, [pc, #120]	; (8001994 <STANDBY+0x84>)
 800191c:	2180      	movs	r1, #128	; 0x80
 800191e:	0549      	lsls	r1, r1, #21
 8001920:	430a      	orrs	r2, r1
 8001922:	639a      	str	r2, [r3, #56]	; 0x38

	__HAL_PWR_CLEAR_FLAG(PWR_FLAG_WU);
 8001924:	4b1c      	ldr	r3, [pc, #112]	; (8001998 <STANDBY+0x88>)
 8001926:	681a      	ldr	r2, [r3, #0]
 8001928:	4b1b      	ldr	r3, [pc, #108]	; (8001998 <STANDBY+0x88>)
 800192a:	2104      	movs	r1, #4
 800192c:	430a      	orrs	r2, r1
 800192e:	601a      	str	r2, [r3, #0]

	PWR->CR |= PWR_CR_ULP;
 8001930:	4b19      	ldr	r3, [pc, #100]	; (8001998 <STANDBY+0x88>)
 8001932:	681a      	ldr	r2, [r3, #0]
 8001934:	4b18      	ldr	r3, [pc, #96]	; (8001998 <STANDBY+0x88>)
 8001936:	2180      	movs	r1, #128	; 0x80
 8001938:	0089      	lsls	r1, r1, #2
 800193a:	430a      	orrs	r2, r1
 800193c:	601a      	str	r2, [r3, #0]
	PWR->CR |= (1U<<1);
 800193e:	4b16      	ldr	r3, [pc, #88]	; (8001998 <STANDBY+0x88>)
 8001940:	681a      	ldr	r2, [r3, #0]
 8001942:	4b15      	ldr	r3, [pc, #84]	; (8001998 <STANDBY+0x88>)
 8001944:	2102      	movs	r1, #2
 8001946:	430a      	orrs	r2, r1
 8001948:	601a      	str	r2, [r3, #0]

	SCB->SCR|= SCB_SCR_SLEEPDEEP_Msk;
 800194a:	4b14      	ldr	r3, [pc, #80]	; (800199c <STANDBY+0x8c>)
 800194c:	691a      	ldr	r2, [r3, #16]
 800194e:	4b13      	ldr	r3, [pc, #76]	; (800199c <STANDBY+0x8c>)
 8001950:	2104      	movs	r1, #4
 8001952:	430a      	orrs	r2, r1
 8001954:	611a      	str	r2, [r3, #16]
	SCB->SCR |= SCB_SCR_SLEEPONEXIT_Msk;
 8001956:	4b11      	ldr	r3, [pc, #68]	; (800199c <STANDBY+0x8c>)
 8001958:	691a      	ldr	r2, [r3, #16]
 800195a:	4b10      	ldr	r3, [pc, #64]	; (800199c <STANDBY+0x8c>)
 800195c:	2102      	movs	r1, #2
 800195e:	430a      	orrs	r2, r1
 8001960:	611a      	str	r2, [r3, #16]

	#if defined ( __CC_ARM)
		__force_stores();
	#endif
	for(int i=0;i<50;i++){
 8001962:	2300      	movs	r3, #0
 8001964:	607b      	str	r3, [r7, #4]
 8001966:	e010      	b.n	800198a <STANDBY+0x7a>
		GPIOA->ODR=(1U<<5);
 8001968:	23a0      	movs	r3, #160	; 0xa0
 800196a:	05db      	lsls	r3, r3, #23
 800196c:	2220      	movs	r2, #32
 800196e:	615a      	str	r2, [r3, #20]
		HAL_Delay(500);
 8001970:	23fa      	movs	r3, #250	; 0xfa
 8001972:	005b      	lsls	r3, r3, #1
 8001974:	0018      	movs	r0, r3
 8001976:	f000 fa93 	bl	8001ea0 <HAL_Delay>
		GPIOA->ODR=~(1U<<5);
 800197a:	23a0      	movs	r3, #160	; 0xa0
 800197c:	05db      	lsls	r3, r3, #23
 800197e:	2221      	movs	r2, #33	; 0x21
 8001980:	4252      	negs	r2, r2
 8001982:	615a      	str	r2, [r3, #20]
	for(int i=0;i<50;i++){
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	3301      	adds	r3, #1
 8001988:	607b      	str	r3, [r7, #4]
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	2b31      	cmp	r3, #49	; 0x31
 800198e:	ddeb      	ble.n	8001968 <STANDBY+0x58>
	}
		while(1){
		 __WFI();
 8001990:	bf30      	wfi
 8001992:	e7fd      	b.n	8001990 <STANDBY+0x80>
 8001994:	40021000 	.word	0x40021000
 8001998:	40007000 	.word	0x40007000
 800199c:	e000ed00 	.word	0xe000ed00

080019a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b082      	sub	sp, #8
 80019a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */
  PWR_PVDTypeDef sConfigPVD = {0};
 80019a6:	003b      	movs	r3, r7
 80019a8:	0018      	movs	r0, r3
 80019aa:	2308      	movs	r3, #8
 80019ac:	001a      	movs	r2, r3
 80019ae:	2100      	movs	r1, #0
 80019b0:	f003 fdd4 	bl	800555c <memset>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019b4:	4b12      	ldr	r3, [pc, #72]	; (8001a00 <HAL_MspInit+0x60>)
 80019b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80019b8:	4b11      	ldr	r3, [pc, #68]	; (8001a00 <HAL_MspInit+0x60>)
 80019ba:	2101      	movs	r1, #1
 80019bc:	430a      	orrs	r2, r1
 80019be:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80019c0:	4b0f      	ldr	r3, [pc, #60]	; (8001a00 <HAL_MspInit+0x60>)
 80019c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80019c4:	4b0e      	ldr	r3, [pc, #56]	; (8001a00 <HAL_MspInit+0x60>)
 80019c6:	2180      	movs	r1, #128	; 0x80
 80019c8:	0549      	lsls	r1, r1, #21
 80019ca:	430a      	orrs	r2, r1
 80019cc:	639a      	str	r2, [r3, #56]	; 0x38

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* PVD_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_IRQn, 1, 0);
 80019ce:	2200      	movs	r2, #0
 80019d0:	2101      	movs	r1, #1
 80019d2:	2001      	movs	r0, #1
 80019d4:	f000 fb34 	bl	8002040 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_IRQn);
 80019d8:	2001      	movs	r0, #1
 80019da:	f000 fb46 	bl	800206a <HAL_NVIC_EnableIRQ>

  /** PVD Configuration
  */
  sConfigPVD.PVDLevel = PWR_PVDLEVEL_6;
 80019de:	003b      	movs	r3, r7
 80019e0:	22c0      	movs	r2, #192	; 0xc0
 80019e2:	601a      	str	r2, [r3, #0]
  sConfigPVD.Mode = PWR_PVD_MODE_IT_RISING;
 80019e4:	003b      	movs	r3, r7
 80019e6:	4a07      	ldr	r2, [pc, #28]	; (8001a04 <HAL_MspInit+0x64>)
 80019e8:	605a      	str	r2, [r3, #4]
  HAL_PWR_ConfigPVD(&sConfigPVD);
 80019ea:	003b      	movs	r3, r7
 80019ec:	0018      	movs	r0, r3
 80019ee:	f000 ffb5 	bl	800295c <HAL_PWR_ConfigPVD>

  /** Enable the PVD Output
  */
  HAL_PWR_EnablePVD();
 80019f2:	f001 f815 	bl	8002a20 <HAL_PWR_EnablePVD>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019f6:	46c0      	nop			; (mov r8, r8)
 80019f8:	46bd      	mov	sp, r7
 80019fa:	b002      	add	sp, #8
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	46c0      	nop			; (mov r8, r8)
 8001a00:	40021000 	.word	0x40021000
 8001a04:	00010001 	.word	0x00010001

08001a08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a0c:	e7fe      	b.n	8001a0c <NMI_Handler+0x4>

08001a0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a0e:	b580      	push	{r7, lr}
 8001a10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a12:	e7fe      	b.n	8001a12 <HardFault_Handler+0x4>

08001a14 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001a18:	46c0      	nop			; (mov r8, r8)
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}

08001a1e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a1e:	b580      	push	{r7, lr}
 8001a20:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a22:	46c0      	nop			; (mov r8, r8)
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}

08001a28 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a2c:	f000 fa1c 	bl	8001e68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a30:	46c0      	nop			; (mov r8, r8)
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}

08001a36 <PVD_IRQHandler>:

/**
  * @brief This function handles PVD interrupt through EXTI line 16.
  */
void PVD_IRQHandler(void)
{
 8001a36:	b580      	push	{r7, lr}
 8001a38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_IRQn 0 */

  /* USER CODE END PVD_IRQn 0 */
  HAL_PWR_PVD_IRQHandler();
 8001a3a:	f000 ffff 	bl	8002a3c <HAL_PWR_PVD_IRQHandler>
  /* USER CODE BEGIN PVD_IRQn 1 */

  /* USER CODE END PVD_IRQn 1 */
}
 8001a3e:	46c0      	nop			; (mov r8, r8)
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}

08001a44 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001a48:	2380      	movs	r3, #128	; 0x80
 8001a4a:	019b      	lsls	r3, r3, #6
 8001a4c:	0018      	movs	r0, r3
 8001a4e:	f000 ff69 	bl	8002924 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8001a52:	46c0      	nop			; (mov r8, r8)
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}

08001a58 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001a5c:	4b03      	ldr	r3, [pc, #12]	; (8001a6c <USART2_IRQHandler+0x14>)
 8001a5e:	0018      	movs	r0, r3
 8001a60:	f002 f8e8 	bl	8003c34 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001a64:	46c0      	nop			; (mov r8, r8)
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	46c0      	nop			; (mov r8, r8)
 8001a6c:	200002fc 	.word	0x200002fc

08001a70 <_getpid>:
 8001a70:	b580      	push	{r7, lr}
 8001a72:	af00      	add	r7, sp, #0
 8001a74:	2301      	movs	r3, #1
 8001a76:	0018      	movs	r0, r3
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}

08001a7c <_kill>:
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b082      	sub	sp, #8
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
 8001a84:	6039      	str	r1, [r7, #0]
 8001a86:	f003 fe7d 	bl	8005784 <__errno>
 8001a8a:	0003      	movs	r3, r0
 8001a8c:	2216      	movs	r2, #22
 8001a8e:	601a      	str	r2, [r3, #0]
 8001a90:	2301      	movs	r3, #1
 8001a92:	425b      	negs	r3, r3
 8001a94:	0018      	movs	r0, r3
 8001a96:	46bd      	mov	sp, r7
 8001a98:	b002      	add	sp, #8
 8001a9a:	bd80      	pop	{r7, pc}

08001a9c <_exit>:
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b082      	sub	sp, #8
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	425a      	negs	r2, r3
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	0011      	movs	r1, r2
 8001aac:	0018      	movs	r0, r3
 8001aae:	f7ff ffe5 	bl	8001a7c <_kill>
 8001ab2:	e7fe      	b.n	8001ab2 <_exit+0x16>

08001ab4 <_read>:
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b086      	sub	sp, #24
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	60f8      	str	r0, [r7, #12]
 8001abc:	60b9      	str	r1, [r7, #8]
 8001abe:	607a      	str	r2, [r7, #4]
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	617b      	str	r3, [r7, #20]
 8001ac4:	e00a      	b.n	8001adc <_read+0x28>
 8001ac6:	e000      	b.n	8001aca <_read+0x16>
 8001ac8:	bf00      	nop
 8001aca:	0001      	movs	r1, r0
 8001acc:	68bb      	ldr	r3, [r7, #8]
 8001ace:	1c5a      	adds	r2, r3, #1
 8001ad0:	60ba      	str	r2, [r7, #8]
 8001ad2:	b2ca      	uxtb	r2, r1
 8001ad4:	701a      	strb	r2, [r3, #0]
 8001ad6:	697b      	ldr	r3, [r7, #20]
 8001ad8:	3301      	adds	r3, #1
 8001ada:	617b      	str	r3, [r7, #20]
 8001adc:	697a      	ldr	r2, [r7, #20]
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	429a      	cmp	r2, r3
 8001ae2:	dbf0      	blt.n	8001ac6 <_read+0x12>
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	0018      	movs	r0, r3
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	b006      	add	sp, #24
 8001aec:	bd80      	pop	{r7, pc}

08001aee <_write>:
 8001aee:	b580      	push	{r7, lr}
 8001af0:	b086      	sub	sp, #24
 8001af2:	af00      	add	r7, sp, #0
 8001af4:	60f8      	str	r0, [r7, #12]
 8001af6:	60b9      	str	r1, [r7, #8]
 8001af8:	607a      	str	r2, [r7, #4]
 8001afa:	2300      	movs	r3, #0
 8001afc:	617b      	str	r3, [r7, #20]
 8001afe:	e009      	b.n	8001b14 <_write+0x26>
 8001b00:	68bb      	ldr	r3, [r7, #8]
 8001b02:	1c5a      	adds	r2, r3, #1
 8001b04:	60ba      	str	r2, [r7, #8]
 8001b06:	781b      	ldrb	r3, [r3, #0]
 8001b08:	0018      	movs	r0, r3
 8001b0a:	f7ff f897 	bl	8000c3c <__io_putchar>
 8001b0e:	697b      	ldr	r3, [r7, #20]
 8001b10:	3301      	adds	r3, #1
 8001b12:	617b      	str	r3, [r7, #20]
 8001b14:	697a      	ldr	r2, [r7, #20]
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	429a      	cmp	r2, r3
 8001b1a:	dbf1      	blt.n	8001b00 <_write+0x12>
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	0018      	movs	r0, r3
 8001b20:	46bd      	mov	sp, r7
 8001b22:	b006      	add	sp, #24
 8001b24:	bd80      	pop	{r7, pc}

08001b26 <_close>:
 8001b26:	b580      	push	{r7, lr}
 8001b28:	b082      	sub	sp, #8
 8001b2a:	af00      	add	r7, sp, #0
 8001b2c:	6078      	str	r0, [r7, #4]
 8001b2e:	2301      	movs	r3, #1
 8001b30:	425b      	negs	r3, r3
 8001b32:	0018      	movs	r0, r3
 8001b34:	46bd      	mov	sp, r7
 8001b36:	b002      	add	sp, #8
 8001b38:	bd80      	pop	{r7, pc}

08001b3a <_fstat>:
 8001b3a:	b580      	push	{r7, lr}
 8001b3c:	b082      	sub	sp, #8
 8001b3e:	af00      	add	r7, sp, #0
 8001b40:	6078      	str	r0, [r7, #4]
 8001b42:	6039      	str	r1, [r7, #0]
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	2280      	movs	r2, #128	; 0x80
 8001b48:	0192      	lsls	r2, r2, #6
 8001b4a:	605a      	str	r2, [r3, #4]
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	0018      	movs	r0, r3
 8001b50:	46bd      	mov	sp, r7
 8001b52:	b002      	add	sp, #8
 8001b54:	bd80      	pop	{r7, pc}

08001b56 <_isatty>:
 8001b56:	b580      	push	{r7, lr}
 8001b58:	b082      	sub	sp, #8
 8001b5a:	af00      	add	r7, sp, #0
 8001b5c:	6078      	str	r0, [r7, #4]
 8001b5e:	2301      	movs	r3, #1
 8001b60:	0018      	movs	r0, r3
 8001b62:	46bd      	mov	sp, r7
 8001b64:	b002      	add	sp, #8
 8001b66:	bd80      	pop	{r7, pc}

08001b68 <_lseek>:
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b084      	sub	sp, #16
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	60f8      	str	r0, [r7, #12]
 8001b70:	60b9      	str	r1, [r7, #8]
 8001b72:	607a      	str	r2, [r7, #4]
 8001b74:	2300      	movs	r3, #0
 8001b76:	0018      	movs	r0, r3
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	b004      	add	sp, #16
 8001b7c:	bd80      	pop	{r7, pc}
	...

08001b80 <_sbrk>:
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b086      	sub	sp, #24
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
 8001b88:	4a14      	ldr	r2, [pc, #80]	; (8001bdc <_sbrk+0x5c>)
 8001b8a:	4b15      	ldr	r3, [pc, #84]	; (8001be0 <_sbrk+0x60>)
 8001b8c:	1ad3      	subs	r3, r2, r3
 8001b8e:	617b      	str	r3, [r7, #20]
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	613b      	str	r3, [r7, #16]
 8001b94:	4b13      	ldr	r3, [pc, #76]	; (8001be4 <_sbrk+0x64>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d102      	bne.n	8001ba2 <_sbrk+0x22>
 8001b9c:	4b11      	ldr	r3, [pc, #68]	; (8001be4 <_sbrk+0x64>)
 8001b9e:	4a12      	ldr	r2, [pc, #72]	; (8001be8 <_sbrk+0x68>)
 8001ba0:	601a      	str	r2, [r3, #0]
 8001ba2:	4b10      	ldr	r3, [pc, #64]	; (8001be4 <_sbrk+0x64>)
 8001ba4:	681a      	ldr	r2, [r3, #0]
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	18d3      	adds	r3, r2, r3
 8001baa:	693a      	ldr	r2, [r7, #16]
 8001bac:	429a      	cmp	r2, r3
 8001bae:	d207      	bcs.n	8001bc0 <_sbrk+0x40>
 8001bb0:	f003 fde8 	bl	8005784 <__errno>
 8001bb4:	0003      	movs	r3, r0
 8001bb6:	220c      	movs	r2, #12
 8001bb8:	601a      	str	r2, [r3, #0]
 8001bba:	2301      	movs	r3, #1
 8001bbc:	425b      	negs	r3, r3
 8001bbe:	e009      	b.n	8001bd4 <_sbrk+0x54>
 8001bc0:	4b08      	ldr	r3, [pc, #32]	; (8001be4 <_sbrk+0x64>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	60fb      	str	r3, [r7, #12]
 8001bc6:	4b07      	ldr	r3, [pc, #28]	; (8001be4 <_sbrk+0x64>)
 8001bc8:	681a      	ldr	r2, [r3, #0]
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	18d2      	adds	r2, r2, r3
 8001bce:	4b05      	ldr	r3, [pc, #20]	; (8001be4 <_sbrk+0x64>)
 8001bd0:	601a      	str	r2, [r3, #0]
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	0018      	movs	r0, r3
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	b006      	add	sp, #24
 8001bda:	bd80      	pop	{r7, pc}
 8001bdc:	20005000 	.word	0x20005000
 8001be0:	00000400 	.word	0x00000400
 8001be4:	200002f8 	.word	0x200002f8
 8001be8:	200004f0 	.word	0x200004f0

08001bec <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001bf0:	46c0      	nop			; (mov r8, r8)
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}
	...

08001bf8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b082      	sub	sp, #8
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	0002      	movs	r2, r0
 8001c00:	1dfb      	adds	r3, r7, #7
 8001c02:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001c04:	1dfb      	adds	r3, r7, #7
 8001c06:	781b      	ldrb	r3, [r3, #0]
 8001c08:	2b7f      	cmp	r3, #127	; 0x7f
 8001c0a:	d809      	bhi.n	8001c20 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c0c:	1dfb      	adds	r3, r7, #7
 8001c0e:	781b      	ldrb	r3, [r3, #0]
 8001c10:	001a      	movs	r2, r3
 8001c12:	231f      	movs	r3, #31
 8001c14:	401a      	ands	r2, r3
 8001c16:	4b04      	ldr	r3, [pc, #16]	; (8001c28 <__NVIC_EnableIRQ+0x30>)
 8001c18:	2101      	movs	r1, #1
 8001c1a:	4091      	lsls	r1, r2
 8001c1c:	000a      	movs	r2, r1
 8001c1e:	601a      	str	r2, [r3, #0]
  }
}
 8001c20:	46c0      	nop			; (mov r8, r8)
 8001c22:	46bd      	mov	sp, r7
 8001c24:	b002      	add	sp, #8
 8001c26:	bd80      	pop	{r7, pc}
 8001c28:	e000e100 	.word	0xe000e100

08001c2c <TIM6_init>:
 *  Created on: Aug 9, 2023
 *      Author: Dell
 */
#include "tim6.h"

void TIM6_init(void){
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	af00      	add	r7, sp, #0
	RCC->APB1ENR=RCC_APB1ENR_TIM6EN;
 8001c30:	4b0d      	ldr	r3, [pc, #52]	; (8001c68 <TIM6_init+0x3c>)
 8001c32:	2210      	movs	r2, #16
 8001c34:	639a      	str	r2, [r3, #56]	; 0x38

	TIM6->PSC=200-1;
 8001c36:	4b0d      	ldr	r3, [pc, #52]	; (8001c6c <TIM6_init+0x40>)
 8001c38:	22c7      	movs	r2, #199	; 0xc7
 8001c3a:	629a      	str	r2, [r3, #40]	; 0x28
	TIM6->ARR=5000-1;
 8001c3c:	4b0b      	ldr	r3, [pc, #44]	; (8001c6c <TIM6_init+0x40>)
 8001c3e:	4a0c      	ldr	r2, [pc, #48]	; (8001c70 <TIM6_init+0x44>)
 8001c40:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM6->CNT=0;
 8001c42:	4b0a      	ldr	r3, [pc, #40]	; (8001c6c <TIM6_init+0x40>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	625a      	str	r2, [r3, #36]	; 0x24
	TIM6->CR1= TIM_CR1_CEN;
 8001c48:	4b08      	ldr	r3, [pc, #32]	; (8001c6c <TIM6_init+0x40>)
 8001c4a:	2201      	movs	r2, #1
 8001c4c:	601a      	str	r2, [r3, #0]
	TIM6->DIER|=TIM_DIER_UIE;
 8001c4e:	4b07      	ldr	r3, [pc, #28]	; (8001c6c <TIM6_init+0x40>)
 8001c50:	68da      	ldr	r2, [r3, #12]
 8001c52:	4b06      	ldr	r3, [pc, #24]	; (8001c6c <TIM6_init+0x40>)
 8001c54:	2101      	movs	r1, #1
 8001c56:	430a      	orrs	r2, r1
 8001c58:	60da      	str	r2, [r3, #12]
	NVIC_EnableIRQ(TIM6_IRQn);
 8001c5a:	2011      	movs	r0, #17
 8001c5c:	f7ff ffcc 	bl	8001bf8 <__NVIC_EnableIRQ>
}
 8001c60:	46c0      	nop			; (mov r8, r8)
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	46c0      	nop			; (mov r8, r8)
 8001c68:	40021000 	.word	0x40021000
 8001c6c:	40001000 	.word	0x40001000
 8001c70:	00001387 	.word	0x00001387

08001c74 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001c78:	4b14      	ldr	r3, [pc, #80]	; (8001ccc <MX_USART2_UART_Init+0x58>)
 8001c7a:	4a15      	ldr	r2, [pc, #84]	; (8001cd0 <MX_USART2_UART_Init+0x5c>)
 8001c7c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001c7e:	4b13      	ldr	r3, [pc, #76]	; (8001ccc <MX_USART2_UART_Init+0x58>)
 8001c80:	22e1      	movs	r2, #225	; 0xe1
 8001c82:	0252      	lsls	r2, r2, #9
 8001c84:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001c86:	4b11      	ldr	r3, [pc, #68]	; (8001ccc <MX_USART2_UART_Init+0x58>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001c8c:	4b0f      	ldr	r3, [pc, #60]	; (8001ccc <MX_USART2_UART_Init+0x58>)
 8001c8e:	2200      	movs	r2, #0
 8001c90:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001c92:	4b0e      	ldr	r3, [pc, #56]	; (8001ccc <MX_USART2_UART_Init+0x58>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001c98:	4b0c      	ldr	r3, [pc, #48]	; (8001ccc <MX_USART2_UART_Init+0x58>)
 8001c9a:	220c      	movs	r2, #12
 8001c9c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c9e:	4b0b      	ldr	r3, [pc, #44]	; (8001ccc <MX_USART2_UART_Init+0x58>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ca4:	4b09      	ldr	r3, [pc, #36]	; (8001ccc <MX_USART2_UART_Init+0x58>)
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001caa:	4b08      	ldr	r3, [pc, #32]	; (8001ccc <MX_USART2_UART_Init+0x58>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001cb0:	4b06      	ldr	r3, [pc, #24]	; (8001ccc <MX_USART2_UART_Init+0x58>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001cb6:	4b05      	ldr	r3, [pc, #20]	; (8001ccc <MX_USART2_UART_Init+0x58>)
 8001cb8:	0018      	movs	r0, r3
 8001cba:	f001 fe69 	bl	8003990 <HAL_UART_Init>
 8001cbe:	1e03      	subs	r3, r0, #0
 8001cc0:	d001      	beq.n	8001cc6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001cc2:	f7ff fe1f 	bl	8001904 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001cc6:	46c0      	nop			; (mov r8, r8)
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd80      	pop	{r7, pc}
 8001ccc:	200002fc 	.word	0x200002fc
 8001cd0:	40004400 	.word	0x40004400

08001cd4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001cd4:	b590      	push	{r4, r7, lr}
 8001cd6:	b089      	sub	sp, #36	; 0x24
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cdc:	240c      	movs	r4, #12
 8001cde:	193b      	adds	r3, r7, r4
 8001ce0:	0018      	movs	r0, r3
 8001ce2:	2314      	movs	r3, #20
 8001ce4:	001a      	movs	r2, r3
 8001ce6:	2100      	movs	r1, #0
 8001ce8:	f003 fc38 	bl	800555c <memset>
  if(uartHandle->Instance==USART2)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4a1c      	ldr	r2, [pc, #112]	; (8001d64 <HAL_UART_MspInit+0x90>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d131      	bne.n	8001d5a <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001cf6:	4b1c      	ldr	r3, [pc, #112]	; (8001d68 <HAL_UART_MspInit+0x94>)
 8001cf8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001cfa:	4b1b      	ldr	r3, [pc, #108]	; (8001d68 <HAL_UART_MspInit+0x94>)
 8001cfc:	2180      	movs	r1, #128	; 0x80
 8001cfe:	0289      	lsls	r1, r1, #10
 8001d00:	430a      	orrs	r2, r1
 8001d02:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d04:	4b18      	ldr	r3, [pc, #96]	; (8001d68 <HAL_UART_MspInit+0x94>)
 8001d06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d08:	4b17      	ldr	r3, [pc, #92]	; (8001d68 <HAL_UART_MspInit+0x94>)
 8001d0a:	2101      	movs	r1, #1
 8001d0c:	430a      	orrs	r2, r1
 8001d0e:	62da      	str	r2, [r3, #44]	; 0x2c
 8001d10:	4b15      	ldr	r3, [pc, #84]	; (8001d68 <HAL_UART_MspInit+0x94>)
 8001d12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d14:	2201      	movs	r2, #1
 8001d16:	4013      	ands	r3, r2
 8001d18:	60bb      	str	r3, [r7, #8]
 8001d1a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001d1c:	0021      	movs	r1, r4
 8001d1e:	187b      	adds	r3, r7, r1
 8001d20:	220c      	movs	r2, #12
 8001d22:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d24:	187b      	adds	r3, r7, r1
 8001d26:	2202      	movs	r2, #2
 8001d28:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d2a:	187b      	adds	r3, r7, r1
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d30:	187b      	adds	r3, r7, r1
 8001d32:	2203      	movs	r2, #3
 8001d34:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8001d36:	187b      	adds	r3, r7, r1
 8001d38:	2204      	movs	r2, #4
 8001d3a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d3c:	187a      	adds	r2, r7, r1
 8001d3e:	23a0      	movs	r3, #160	; 0xa0
 8001d40:	05db      	lsls	r3, r3, #23
 8001d42:	0011      	movs	r1, r2
 8001d44:	0018      	movs	r0, r3
 8001d46:	f000 fc6f 	bl	8002628 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	2100      	movs	r1, #0
 8001d4e:	201c      	movs	r0, #28
 8001d50:	f000 f976 	bl	8002040 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001d54:	201c      	movs	r0, #28
 8001d56:	f000 f988 	bl	800206a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001d5a:	46c0      	nop			; (mov r8, r8)
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	b009      	add	sp, #36	; 0x24
 8001d60:	bd90      	pop	{r4, r7, pc}
 8001d62:	46c0      	nop			; (mov r8, r8)
 8001d64:	40004400 	.word	0x40004400
 8001d68:	40021000 	.word	0x40021000

08001d6c <Reset_Handler>:
 8001d6c:	480d      	ldr	r0, [pc, #52]	; (8001da4 <LoopForever+0x2>)
 8001d6e:	4685      	mov	sp, r0
 8001d70:	f7ff ff3c 	bl	8001bec <SystemInit>
 8001d74:	480c      	ldr	r0, [pc, #48]	; (8001da8 <LoopForever+0x6>)
 8001d76:	490d      	ldr	r1, [pc, #52]	; (8001dac <LoopForever+0xa>)
 8001d78:	4a0d      	ldr	r2, [pc, #52]	; (8001db0 <LoopForever+0xe>)
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	e002      	b.n	8001d84 <LoopCopyDataInit>

08001d7e <CopyDataInit>:
 8001d7e:	58d4      	ldr	r4, [r2, r3]
 8001d80:	50c4      	str	r4, [r0, r3]
 8001d82:	3304      	adds	r3, #4

08001d84 <LoopCopyDataInit>:
 8001d84:	18c4      	adds	r4, r0, r3
 8001d86:	428c      	cmp	r4, r1
 8001d88:	d3f9      	bcc.n	8001d7e <CopyDataInit>
 8001d8a:	4a0a      	ldr	r2, [pc, #40]	; (8001db4 <LoopForever+0x12>)
 8001d8c:	4c0a      	ldr	r4, [pc, #40]	; (8001db8 <LoopForever+0x16>)
 8001d8e:	2300      	movs	r3, #0
 8001d90:	e001      	b.n	8001d96 <LoopFillZerobss>

08001d92 <FillZerobss>:
 8001d92:	6013      	str	r3, [r2, #0]
 8001d94:	3204      	adds	r2, #4

08001d96 <LoopFillZerobss>:
 8001d96:	42a2      	cmp	r2, r4
 8001d98:	d3fb      	bcc.n	8001d92 <FillZerobss>
 8001d9a:	f003 fcf9 	bl	8005790 <__libc_init_array>
 8001d9e:	f7fe ffef 	bl	8000d80 <main>

08001da2 <LoopForever>:
 8001da2:	e7fe      	b.n	8001da2 <LoopForever>
 8001da4:	20005000 	.word	0x20005000
 8001da8:	20000000 	.word	0x20000000
 8001dac:	200001f8 	.word	0x200001f8
 8001db0:	08006a14 	.word	0x08006a14
 8001db4:	200001f8 	.word	0x200001f8
 8001db8:	200004ec 	.word	0x200004ec

08001dbc <ADC1_COMP_IRQHandler>:
 8001dbc:	e7fe      	b.n	8001dbc <ADC1_COMP_IRQHandler>
	...

08001dc0 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b082      	sub	sp, #8
 8001dc4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001dc6:	1dfb      	adds	r3, r7, #7
 8001dc8:	2200      	movs	r2, #0
 8001dca:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8001dcc:	4b0b      	ldr	r3, [pc, #44]	; (8001dfc <HAL_Init+0x3c>)
 8001dce:	681a      	ldr	r2, [r3, #0]
 8001dd0:	4b0a      	ldr	r3, [pc, #40]	; (8001dfc <HAL_Init+0x3c>)
 8001dd2:	2140      	movs	r1, #64	; 0x40
 8001dd4:	430a      	orrs	r2, r1
 8001dd6:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001dd8:	2000      	movs	r0, #0
 8001dda:	f000 f811 	bl	8001e00 <HAL_InitTick>
 8001dde:	1e03      	subs	r3, r0, #0
 8001de0:	d003      	beq.n	8001dea <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8001de2:	1dfb      	adds	r3, r7, #7
 8001de4:	2201      	movs	r2, #1
 8001de6:	701a      	strb	r2, [r3, #0]
 8001de8:	e001      	b.n	8001dee <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001dea:	f7ff fdd9 	bl	80019a0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001dee:	1dfb      	adds	r3, r7, #7
 8001df0:	781b      	ldrb	r3, [r3, #0]
}
 8001df2:	0018      	movs	r0, r3
 8001df4:	46bd      	mov	sp, r7
 8001df6:	b002      	add	sp, #8
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	46c0      	nop			; (mov r8, r8)
 8001dfc:	40022000 	.word	0x40022000

08001e00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e00:	b590      	push	{r4, r7, lr}
 8001e02:	b083      	sub	sp, #12
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e08:	4b14      	ldr	r3, [pc, #80]	; (8001e5c <HAL_InitTick+0x5c>)
 8001e0a:	681c      	ldr	r4, [r3, #0]
 8001e0c:	4b14      	ldr	r3, [pc, #80]	; (8001e60 <HAL_InitTick+0x60>)
 8001e0e:	781b      	ldrb	r3, [r3, #0]
 8001e10:	0019      	movs	r1, r3
 8001e12:	23fa      	movs	r3, #250	; 0xfa
 8001e14:	0098      	lsls	r0, r3, #2
 8001e16:	f7fe f993 	bl	8000140 <__udivsi3>
 8001e1a:	0003      	movs	r3, r0
 8001e1c:	0019      	movs	r1, r3
 8001e1e:	0020      	movs	r0, r4
 8001e20:	f7fe f98e 	bl	8000140 <__udivsi3>
 8001e24:	0003      	movs	r3, r0
 8001e26:	0018      	movs	r0, r3
 8001e28:	f000 f92f 	bl	800208a <HAL_SYSTICK_Config>
 8001e2c:	1e03      	subs	r3, r0, #0
 8001e2e:	d001      	beq.n	8001e34 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001e30:	2301      	movs	r3, #1
 8001e32:	e00f      	b.n	8001e54 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2b03      	cmp	r3, #3
 8001e38:	d80b      	bhi.n	8001e52 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e3a:	6879      	ldr	r1, [r7, #4]
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	425b      	negs	r3, r3
 8001e40:	2200      	movs	r2, #0
 8001e42:	0018      	movs	r0, r3
 8001e44:	f000 f8fc 	bl	8002040 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e48:	4b06      	ldr	r3, [pc, #24]	; (8001e64 <HAL_InitTick+0x64>)
 8001e4a:	687a      	ldr	r2, [r7, #4]
 8001e4c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	e000      	b.n	8001e54 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001e52:	2301      	movs	r3, #1
}
 8001e54:	0018      	movs	r0, r3
 8001e56:	46bd      	mov	sp, r7
 8001e58:	b003      	add	sp, #12
 8001e5a:	bd90      	pop	{r4, r7, pc}
 8001e5c:	20000190 	.word	0x20000190
 8001e60:	20000198 	.word	0x20000198
 8001e64:	20000194 	.word	0x20000194

08001e68 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e6c:	4b05      	ldr	r3, [pc, #20]	; (8001e84 <HAL_IncTick+0x1c>)
 8001e6e:	781b      	ldrb	r3, [r3, #0]
 8001e70:	001a      	movs	r2, r3
 8001e72:	4b05      	ldr	r3, [pc, #20]	; (8001e88 <HAL_IncTick+0x20>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	18d2      	adds	r2, r2, r3
 8001e78:	4b03      	ldr	r3, [pc, #12]	; (8001e88 <HAL_IncTick+0x20>)
 8001e7a:	601a      	str	r2, [r3, #0]
}
 8001e7c:	46c0      	nop			; (mov r8, r8)
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	46c0      	nop			; (mov r8, r8)
 8001e84:	20000198 	.word	0x20000198
 8001e88:	20000384 	.word	0x20000384

08001e8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	af00      	add	r7, sp, #0
  return uwTick;
 8001e90:	4b02      	ldr	r3, [pc, #8]	; (8001e9c <HAL_GetTick+0x10>)
 8001e92:	681b      	ldr	r3, [r3, #0]
}
 8001e94:	0018      	movs	r0, r3
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	46c0      	nop			; (mov r8, r8)
 8001e9c:	20000384 	.word	0x20000384

08001ea0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b084      	sub	sp, #16
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ea8:	f7ff fff0 	bl	8001e8c <HAL_GetTick>
 8001eac:	0003      	movs	r3, r0
 8001eae:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	3301      	adds	r3, #1
 8001eb8:	d005      	beq.n	8001ec6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001eba:	4b0a      	ldr	r3, [pc, #40]	; (8001ee4 <HAL_Delay+0x44>)
 8001ebc:	781b      	ldrb	r3, [r3, #0]
 8001ebe:	001a      	movs	r2, r3
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	189b      	adds	r3, r3, r2
 8001ec4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001ec6:	46c0      	nop			; (mov r8, r8)
 8001ec8:	f7ff ffe0 	bl	8001e8c <HAL_GetTick>
 8001ecc:	0002      	movs	r2, r0
 8001ece:	68bb      	ldr	r3, [r7, #8]
 8001ed0:	1ad3      	subs	r3, r2, r3
 8001ed2:	68fa      	ldr	r2, [r7, #12]
 8001ed4:	429a      	cmp	r2, r3
 8001ed6:	d8f7      	bhi.n	8001ec8 <HAL_Delay+0x28>
  {
  }
}
 8001ed8:	46c0      	nop			; (mov r8, r8)
 8001eda:	46c0      	nop			; (mov r8, r8)
 8001edc:	46bd      	mov	sp, r7
 8001ede:	b004      	add	sp, #16
 8001ee0:	bd80      	pop	{r7, pc}
 8001ee2:	46c0      	nop			; (mov r8, r8)
 8001ee4:	20000198 	.word	0x20000198

08001ee8 <__NVIC_EnableIRQ>:
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b082      	sub	sp, #8
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	0002      	movs	r2, r0
 8001ef0:	1dfb      	adds	r3, r7, #7
 8001ef2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001ef4:	1dfb      	adds	r3, r7, #7
 8001ef6:	781b      	ldrb	r3, [r3, #0]
 8001ef8:	2b7f      	cmp	r3, #127	; 0x7f
 8001efa:	d809      	bhi.n	8001f10 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001efc:	1dfb      	adds	r3, r7, #7
 8001efe:	781b      	ldrb	r3, [r3, #0]
 8001f00:	001a      	movs	r2, r3
 8001f02:	231f      	movs	r3, #31
 8001f04:	401a      	ands	r2, r3
 8001f06:	4b04      	ldr	r3, [pc, #16]	; (8001f18 <__NVIC_EnableIRQ+0x30>)
 8001f08:	2101      	movs	r1, #1
 8001f0a:	4091      	lsls	r1, r2
 8001f0c:	000a      	movs	r2, r1
 8001f0e:	601a      	str	r2, [r3, #0]
}
 8001f10:	46c0      	nop			; (mov r8, r8)
 8001f12:	46bd      	mov	sp, r7
 8001f14:	b002      	add	sp, #8
 8001f16:	bd80      	pop	{r7, pc}
 8001f18:	e000e100 	.word	0xe000e100

08001f1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f1c:	b590      	push	{r4, r7, lr}
 8001f1e:	b083      	sub	sp, #12
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	0002      	movs	r2, r0
 8001f24:	6039      	str	r1, [r7, #0]
 8001f26:	1dfb      	adds	r3, r7, #7
 8001f28:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001f2a:	1dfb      	adds	r3, r7, #7
 8001f2c:	781b      	ldrb	r3, [r3, #0]
 8001f2e:	2b7f      	cmp	r3, #127	; 0x7f
 8001f30:	d828      	bhi.n	8001f84 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001f32:	4a2f      	ldr	r2, [pc, #188]	; (8001ff0 <__NVIC_SetPriority+0xd4>)
 8001f34:	1dfb      	adds	r3, r7, #7
 8001f36:	781b      	ldrb	r3, [r3, #0]
 8001f38:	b25b      	sxtb	r3, r3
 8001f3a:	089b      	lsrs	r3, r3, #2
 8001f3c:	33c0      	adds	r3, #192	; 0xc0
 8001f3e:	009b      	lsls	r3, r3, #2
 8001f40:	589b      	ldr	r3, [r3, r2]
 8001f42:	1dfa      	adds	r2, r7, #7
 8001f44:	7812      	ldrb	r2, [r2, #0]
 8001f46:	0011      	movs	r1, r2
 8001f48:	2203      	movs	r2, #3
 8001f4a:	400a      	ands	r2, r1
 8001f4c:	00d2      	lsls	r2, r2, #3
 8001f4e:	21ff      	movs	r1, #255	; 0xff
 8001f50:	4091      	lsls	r1, r2
 8001f52:	000a      	movs	r2, r1
 8001f54:	43d2      	mvns	r2, r2
 8001f56:	401a      	ands	r2, r3
 8001f58:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	019b      	lsls	r3, r3, #6
 8001f5e:	22ff      	movs	r2, #255	; 0xff
 8001f60:	401a      	ands	r2, r3
 8001f62:	1dfb      	adds	r3, r7, #7
 8001f64:	781b      	ldrb	r3, [r3, #0]
 8001f66:	0018      	movs	r0, r3
 8001f68:	2303      	movs	r3, #3
 8001f6a:	4003      	ands	r3, r0
 8001f6c:	00db      	lsls	r3, r3, #3
 8001f6e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001f70:	481f      	ldr	r0, [pc, #124]	; (8001ff0 <__NVIC_SetPriority+0xd4>)
 8001f72:	1dfb      	adds	r3, r7, #7
 8001f74:	781b      	ldrb	r3, [r3, #0]
 8001f76:	b25b      	sxtb	r3, r3
 8001f78:	089b      	lsrs	r3, r3, #2
 8001f7a:	430a      	orrs	r2, r1
 8001f7c:	33c0      	adds	r3, #192	; 0xc0
 8001f7e:	009b      	lsls	r3, r3, #2
 8001f80:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001f82:	e031      	b.n	8001fe8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001f84:	4a1b      	ldr	r2, [pc, #108]	; (8001ff4 <__NVIC_SetPriority+0xd8>)
 8001f86:	1dfb      	adds	r3, r7, #7
 8001f88:	781b      	ldrb	r3, [r3, #0]
 8001f8a:	0019      	movs	r1, r3
 8001f8c:	230f      	movs	r3, #15
 8001f8e:	400b      	ands	r3, r1
 8001f90:	3b08      	subs	r3, #8
 8001f92:	089b      	lsrs	r3, r3, #2
 8001f94:	3306      	adds	r3, #6
 8001f96:	009b      	lsls	r3, r3, #2
 8001f98:	18d3      	adds	r3, r2, r3
 8001f9a:	3304      	adds	r3, #4
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	1dfa      	adds	r2, r7, #7
 8001fa0:	7812      	ldrb	r2, [r2, #0]
 8001fa2:	0011      	movs	r1, r2
 8001fa4:	2203      	movs	r2, #3
 8001fa6:	400a      	ands	r2, r1
 8001fa8:	00d2      	lsls	r2, r2, #3
 8001faa:	21ff      	movs	r1, #255	; 0xff
 8001fac:	4091      	lsls	r1, r2
 8001fae:	000a      	movs	r2, r1
 8001fb0:	43d2      	mvns	r2, r2
 8001fb2:	401a      	ands	r2, r3
 8001fb4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	019b      	lsls	r3, r3, #6
 8001fba:	22ff      	movs	r2, #255	; 0xff
 8001fbc:	401a      	ands	r2, r3
 8001fbe:	1dfb      	adds	r3, r7, #7
 8001fc0:	781b      	ldrb	r3, [r3, #0]
 8001fc2:	0018      	movs	r0, r3
 8001fc4:	2303      	movs	r3, #3
 8001fc6:	4003      	ands	r3, r0
 8001fc8:	00db      	lsls	r3, r3, #3
 8001fca:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001fcc:	4809      	ldr	r0, [pc, #36]	; (8001ff4 <__NVIC_SetPriority+0xd8>)
 8001fce:	1dfb      	adds	r3, r7, #7
 8001fd0:	781b      	ldrb	r3, [r3, #0]
 8001fd2:	001c      	movs	r4, r3
 8001fd4:	230f      	movs	r3, #15
 8001fd6:	4023      	ands	r3, r4
 8001fd8:	3b08      	subs	r3, #8
 8001fda:	089b      	lsrs	r3, r3, #2
 8001fdc:	430a      	orrs	r2, r1
 8001fde:	3306      	adds	r3, #6
 8001fe0:	009b      	lsls	r3, r3, #2
 8001fe2:	18c3      	adds	r3, r0, r3
 8001fe4:	3304      	adds	r3, #4
 8001fe6:	601a      	str	r2, [r3, #0]
}
 8001fe8:	46c0      	nop			; (mov r8, r8)
 8001fea:	46bd      	mov	sp, r7
 8001fec:	b003      	add	sp, #12
 8001fee:	bd90      	pop	{r4, r7, pc}
 8001ff0:	e000e100 	.word	0xe000e100
 8001ff4:	e000ed00 	.word	0xe000ed00

08001ff8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b082      	sub	sp, #8
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	1e5a      	subs	r2, r3, #1
 8002004:	2380      	movs	r3, #128	; 0x80
 8002006:	045b      	lsls	r3, r3, #17
 8002008:	429a      	cmp	r2, r3
 800200a:	d301      	bcc.n	8002010 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800200c:	2301      	movs	r3, #1
 800200e:	e010      	b.n	8002032 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002010:	4b0a      	ldr	r3, [pc, #40]	; (800203c <SysTick_Config+0x44>)
 8002012:	687a      	ldr	r2, [r7, #4]
 8002014:	3a01      	subs	r2, #1
 8002016:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002018:	2301      	movs	r3, #1
 800201a:	425b      	negs	r3, r3
 800201c:	2103      	movs	r1, #3
 800201e:	0018      	movs	r0, r3
 8002020:	f7ff ff7c 	bl	8001f1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002024:	4b05      	ldr	r3, [pc, #20]	; (800203c <SysTick_Config+0x44>)
 8002026:	2200      	movs	r2, #0
 8002028:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800202a:	4b04      	ldr	r3, [pc, #16]	; (800203c <SysTick_Config+0x44>)
 800202c:	2207      	movs	r2, #7
 800202e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002030:	2300      	movs	r3, #0
}
 8002032:	0018      	movs	r0, r3
 8002034:	46bd      	mov	sp, r7
 8002036:	b002      	add	sp, #8
 8002038:	bd80      	pop	{r7, pc}
 800203a:	46c0      	nop			; (mov r8, r8)
 800203c:	e000e010 	.word	0xe000e010

08002040 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002040:	b580      	push	{r7, lr}
 8002042:	b084      	sub	sp, #16
 8002044:	af00      	add	r7, sp, #0
 8002046:	60b9      	str	r1, [r7, #8]
 8002048:	607a      	str	r2, [r7, #4]
 800204a:	210f      	movs	r1, #15
 800204c:	187b      	adds	r3, r7, r1
 800204e:	1c02      	adds	r2, r0, #0
 8002050:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8002052:	68ba      	ldr	r2, [r7, #8]
 8002054:	187b      	adds	r3, r7, r1
 8002056:	781b      	ldrb	r3, [r3, #0]
 8002058:	b25b      	sxtb	r3, r3
 800205a:	0011      	movs	r1, r2
 800205c:	0018      	movs	r0, r3
 800205e:	f7ff ff5d 	bl	8001f1c <__NVIC_SetPriority>
}
 8002062:	46c0      	nop			; (mov r8, r8)
 8002064:	46bd      	mov	sp, r7
 8002066:	b004      	add	sp, #16
 8002068:	bd80      	pop	{r7, pc}

0800206a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800206a:	b580      	push	{r7, lr}
 800206c:	b082      	sub	sp, #8
 800206e:	af00      	add	r7, sp, #0
 8002070:	0002      	movs	r2, r0
 8002072:	1dfb      	adds	r3, r7, #7
 8002074:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002076:	1dfb      	adds	r3, r7, #7
 8002078:	781b      	ldrb	r3, [r3, #0]
 800207a:	b25b      	sxtb	r3, r3
 800207c:	0018      	movs	r0, r3
 800207e:	f7ff ff33 	bl	8001ee8 <__NVIC_EnableIRQ>
}
 8002082:	46c0      	nop			; (mov r8, r8)
 8002084:	46bd      	mov	sp, r7
 8002086:	b002      	add	sp, #8
 8002088:	bd80      	pop	{r7, pc}

0800208a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800208a:	b580      	push	{r7, lr}
 800208c:	b082      	sub	sp, #8
 800208e:	af00      	add	r7, sp, #0
 8002090:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	0018      	movs	r0, r3
 8002096:	f7ff ffaf 	bl	8001ff8 <SysTick_Config>
 800209a:	0003      	movs	r3, r0
}
 800209c:	0018      	movs	r0, r3
 800209e:	46bd      	mov	sp, r7
 80020a0:	b002      	add	sp, #8
 80020a2:	bd80      	pop	{r7, pc}

080020a4 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b084      	sub	sp, #16
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80020ac:	230f      	movs	r3, #15
 80020ae:	18fb      	adds	r3, r7, r3
 80020b0:	2200      	movs	r2, #0
 80020b2:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2225      	movs	r2, #37	; 0x25
 80020b8:	5c9b      	ldrb	r3, [r3, r2]
 80020ba:	b2db      	uxtb	r3, r3
 80020bc:	2b02      	cmp	r3, #2
 80020be:	d008      	beq.n	80020d2 <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2204      	movs	r2, #4
 80020c4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2224      	movs	r2, #36	; 0x24
 80020ca:	2100      	movs	r1, #0
 80020cc:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80020ce:	2301      	movs	r3, #1
 80020d0:	e024      	b.n	800211c <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	681a      	ldr	r2, [r3, #0]
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	210e      	movs	r1, #14
 80020de:	438a      	bics	r2, r1
 80020e0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	681a      	ldr	r2, [r3, #0]
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	2101      	movs	r1, #1
 80020ee:	438a      	bics	r2, r1
 80020f0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020f6:	221c      	movs	r2, #28
 80020f8:	401a      	ands	r2, r3
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020fe:	2101      	movs	r1, #1
 8002100:	4091      	lsls	r1, r2
 8002102:	000a      	movs	r2, r1
 8002104:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2225      	movs	r2, #37	; 0x25
 800210a:	2101      	movs	r1, #1
 800210c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2224      	movs	r2, #36	; 0x24
 8002112:	2100      	movs	r1, #0
 8002114:	5499      	strb	r1, [r3, r2]

    return status;
 8002116:	230f      	movs	r3, #15
 8002118:	18fb      	adds	r3, r7, r3
 800211a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800211c:	0018      	movs	r0, r3
 800211e:	46bd      	mov	sp, r7
 8002120:	b004      	add	sp, #16
 8002122:	bd80      	pop	{r7, pc}

08002124 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b084      	sub	sp, #16
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800212c:	210f      	movs	r1, #15
 800212e:	187b      	adds	r3, r7, r1
 8002130:	2200      	movs	r2, #0
 8002132:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2225      	movs	r2, #37	; 0x25
 8002138:	5c9b      	ldrb	r3, [r3, r2]
 800213a:	b2db      	uxtb	r3, r3
 800213c:	2b02      	cmp	r3, #2
 800213e:	d006      	beq.n	800214e <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2204      	movs	r2, #4
 8002144:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002146:	187b      	adds	r3, r7, r1
 8002148:	2201      	movs	r2, #1
 800214a:	701a      	strb	r2, [r3, #0]
 800214c:	e02a      	b.n	80021a4 <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	681a      	ldr	r2, [r3, #0]
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	210e      	movs	r1, #14
 800215a:	438a      	bics	r2, r1
 800215c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	681a      	ldr	r2, [r3, #0]
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	2101      	movs	r1, #1
 800216a:	438a      	bics	r2, r1
 800216c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002172:	221c      	movs	r2, #28
 8002174:	401a      	ands	r2, r3
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800217a:	2101      	movs	r1, #1
 800217c:	4091      	lsls	r1, r2
 800217e:	000a      	movs	r2, r1
 8002180:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2225      	movs	r2, #37	; 0x25
 8002186:	2101      	movs	r1, #1
 8002188:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2224      	movs	r2, #36	; 0x24
 800218e:	2100      	movs	r1, #0
 8002190:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002196:	2b00      	cmp	r3, #0
 8002198:	d004      	beq.n	80021a4 <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800219e:	687a      	ldr	r2, [r7, #4]
 80021a0:	0010      	movs	r0, r2
 80021a2:	4798      	blx	r3
    }
  }
  return status;
 80021a4:	230f      	movs	r3, #15
 80021a6:	18fb      	adds	r3, r7, r3
 80021a8:	781b      	ldrb	r3, [r3, #0]
}
 80021aa:	0018      	movs	r0, r3
 80021ac:	46bd      	mov	sp, r7
 80021ae:	b004      	add	sp, #16
 80021b0:	bd80      	pop	{r7, pc}
	...

080021b4 <HAL_FLASH_Program>:
  * @param  Data          Specifie the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint32_t Data)
{
 80021b4:	b5b0      	push	{r4, r5, r7, lr}
 80021b6:	b086      	sub	sp, #24
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	60f8      	str	r0, [r7, #12]
 80021bc:	60b9      	str	r1, [r7, #8]
 80021be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80021c0:	2317      	movs	r3, #23
 80021c2:	18fb      	adds	r3, r7, r3
 80021c4:	2201      	movs	r2, #1
 80021c6:	701a      	strb	r2, [r3, #0]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80021c8:	4b16      	ldr	r3, [pc, #88]	; (8002224 <HAL_FLASH_Program+0x70>)
 80021ca:	7c1b      	ldrb	r3, [r3, #16]
 80021cc:	2b01      	cmp	r3, #1
 80021ce:	d101      	bne.n	80021d4 <HAL_FLASH_Program+0x20>
 80021d0:	2302      	movs	r3, #2
 80021d2:	e022      	b.n	800221a <HAL_FLASH_Program+0x66>
 80021d4:	4b13      	ldr	r3, [pc, #76]	; (8002224 <HAL_FLASH_Program+0x70>)
 80021d6:	2201      	movs	r2, #1
 80021d8:	741a      	strb	r2, [r3, #16]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80021da:	2517      	movs	r5, #23
 80021dc:	197c      	adds	r4, r7, r5
 80021de:	4b12      	ldr	r3, [pc, #72]	; (8002228 <HAL_FLASH_Program+0x74>)
 80021e0:	0018      	movs	r0, r3
 80021e2:	f000 f88b 	bl	80022fc <FLASH_WaitForLastOperation>
 80021e6:	0003      	movs	r3, r0
 80021e8:	7023      	strb	r3, [r4, #0]
  
  if(status == HAL_OK)
 80021ea:	0029      	movs	r1, r5
 80021ec:	187b      	adds	r3, r7, r1
 80021ee:	781b      	ldrb	r3, [r3, #0]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d10c      	bne.n	800220e <HAL_FLASH_Program+0x5a>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80021f4:	4b0b      	ldr	r3, [pc, #44]	; (8002224 <HAL_FLASH_Program+0x70>)
 80021f6:	2200      	movs	r2, #0
 80021f8:	615a      	str	r2, [r3, #20]

    /*Program word (32-bit) at a specified address.*/
    *(__IO uint32_t *)Address = Data;
 80021fa:	68bb      	ldr	r3, [r7, #8]
 80021fc:	687a      	ldr	r2, [r7, #4]
 80021fe:	601a      	str	r2, [r3, #0]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002200:	187c      	adds	r4, r7, r1
 8002202:	4b09      	ldr	r3, [pc, #36]	; (8002228 <HAL_FLASH_Program+0x74>)
 8002204:	0018      	movs	r0, r3
 8002206:	f000 f879 	bl	80022fc <FLASH_WaitForLastOperation>
 800220a:	0003      	movs	r3, r0
 800220c:	7023      	strb	r3, [r4, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800220e:	4b05      	ldr	r3, [pc, #20]	; (8002224 <HAL_FLASH_Program+0x70>)
 8002210:	2200      	movs	r2, #0
 8002212:	741a      	strb	r2, [r3, #16]

  return status;
 8002214:	2317      	movs	r3, #23
 8002216:	18fb      	adds	r3, r7, r3
 8002218:	781b      	ldrb	r3, [r3, #0]
}
 800221a:	0018      	movs	r0, r3
 800221c:	46bd      	mov	sp, r7
 800221e:	b006      	add	sp, #24
 8002220:	bdb0      	pop	{r4, r5, r7, pc}
 8002222:	46c0      	nop			; (mov r8, r8)
 8002224:	20000388 	.word	0x20000388
 8002228:	0000c350 	.word	0x0000c350

0800222c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b086      	sub	sp, #24
 8002230:	af00      	add	r7, sp, #0
  uint32_t primask_bit;

  /* Unlocking FLASH_PECR register access*/
  if(HAL_IS_BIT_SET(FLASH->PECR, FLASH_PECR_PELOCK))
 8002232:	4b23      	ldr	r3, [pc, #140]	; (80022c0 <HAL_FLASH_Unlock+0x94>)
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	2201      	movs	r2, #1
 8002238:	4013      	ands	r3, r2
 800223a:	2b01      	cmp	r3, #1
 800223c:	d11a      	bne.n	8002274 <HAL_FLASH_Unlock+0x48>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800223e:	f3ef 8310 	mrs	r3, PRIMASK
 8002242:	60fb      	str	r3, [r7, #12]
  return(result);
 8002244:	68fb      	ldr	r3, [r7, #12]
  {
    /* Disable interrupts to avoid any interruption during unlock sequence */
    primask_bit = __get_PRIMASK();
 8002246:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8002248:	b672      	cpsid	i
}
 800224a:	46c0      	nop			; (mov r8, r8)
    __disable_irq();

    WRITE_REG(FLASH->PEKEYR, FLASH_PEKEY1);
 800224c:	4b1c      	ldr	r3, [pc, #112]	; (80022c0 <HAL_FLASH_Unlock+0x94>)
 800224e:	4a1d      	ldr	r2, [pc, #116]	; (80022c4 <HAL_FLASH_Unlock+0x98>)
 8002250:	60da      	str	r2, [r3, #12]
    WRITE_REG(FLASH->PEKEYR, FLASH_PEKEY2);
 8002252:	4b1b      	ldr	r3, [pc, #108]	; (80022c0 <HAL_FLASH_Unlock+0x94>)
 8002254:	4a1c      	ldr	r2, [pc, #112]	; (80022c8 <HAL_FLASH_Unlock+0x9c>)
 8002256:	60da      	str	r2, [r3, #12]
 8002258:	697b      	ldr	r3, [r7, #20]
 800225a:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800225c:	693b      	ldr	r3, [r7, #16]
 800225e:	f383 8810 	msr	PRIMASK, r3
}
 8002262:	46c0      	nop			; (mov r8, r8)

    /* Re-enable the interrupts: restore previous priority mask */
    __set_PRIMASK(primask_bit);

    if(HAL_IS_BIT_SET(FLASH->PECR, FLASH_PECR_PELOCK))
 8002264:	4b16      	ldr	r3, [pc, #88]	; (80022c0 <HAL_FLASH_Unlock+0x94>)
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	2201      	movs	r2, #1
 800226a:	4013      	ands	r3, r2
 800226c:	2b01      	cmp	r3, #1
 800226e:	d101      	bne.n	8002274 <HAL_FLASH_Unlock+0x48>
    {
      return HAL_ERROR;
 8002270:	2301      	movs	r3, #1
 8002272:	e021      	b.n	80022b8 <HAL_FLASH_Unlock+0x8c>
    }
  }

  if (HAL_IS_BIT_SET(FLASH->PECR, FLASH_PECR_PRGLOCK))
 8002274:	4b12      	ldr	r3, [pc, #72]	; (80022c0 <HAL_FLASH_Unlock+0x94>)
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	2202      	movs	r2, #2
 800227a:	4013      	ands	r3, r2
 800227c:	2b02      	cmp	r3, #2
 800227e:	d11a      	bne.n	80022b6 <HAL_FLASH_Unlock+0x8a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002280:	f3ef 8310 	mrs	r3, PRIMASK
 8002284:	607b      	str	r3, [r7, #4]
  return(result);
 8002286:	687b      	ldr	r3, [r7, #4]
  {
    /* Disable interrupts to avoid any interruption during unlock sequence */
    primask_bit = __get_PRIMASK();
 8002288:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800228a:	b672      	cpsid	i
}
 800228c:	46c0      	nop			; (mov r8, r8)
    __disable_irq();

    /* Unlocking the program memory access */
    WRITE_REG(FLASH->PRGKEYR, FLASH_PRGKEY1);
 800228e:	4b0c      	ldr	r3, [pc, #48]	; (80022c0 <HAL_FLASH_Unlock+0x94>)
 8002290:	4a0e      	ldr	r2, [pc, #56]	; (80022cc <HAL_FLASH_Unlock+0xa0>)
 8002292:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->PRGKEYR, FLASH_PRGKEY2);  
 8002294:	4b0a      	ldr	r3, [pc, #40]	; (80022c0 <HAL_FLASH_Unlock+0x94>)
 8002296:	4a0e      	ldr	r2, [pc, #56]	; (80022d0 <HAL_FLASH_Unlock+0xa4>)
 8002298:	611a      	str	r2, [r3, #16]
 800229a:	697b      	ldr	r3, [r7, #20]
 800229c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800229e:	68bb      	ldr	r3, [r7, #8]
 80022a0:	f383 8810 	msr	PRIMASK, r3
}
 80022a4:	46c0      	nop			; (mov r8, r8)

    /* Re-enable the interrupts: restore previous priority mask */
    __set_PRIMASK(primask_bit);

    if (HAL_IS_BIT_SET(FLASH->PECR, FLASH_PECR_PRGLOCK))
 80022a6:	4b06      	ldr	r3, [pc, #24]	; (80022c0 <HAL_FLASH_Unlock+0x94>)
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	2202      	movs	r2, #2
 80022ac:	4013      	ands	r3, r2
 80022ae:	2b02      	cmp	r3, #2
 80022b0:	d101      	bne.n	80022b6 <HAL_FLASH_Unlock+0x8a>
    {
      return HAL_ERROR;
 80022b2:	2301      	movs	r3, #1
 80022b4:	e000      	b.n	80022b8 <HAL_FLASH_Unlock+0x8c>
    }
  }

  return HAL_OK; 
 80022b6:	2300      	movs	r3, #0
}
 80022b8:	0018      	movs	r0, r3
 80022ba:	46bd      	mov	sp, r7
 80022bc:	b006      	add	sp, #24
 80022be:	bd80      	pop	{r7, pc}
 80022c0:	40022000 	.word	0x40022000
 80022c4:	89abcdef 	.word	0x89abcdef
 80022c8:	02030405 	.word	0x02030405
 80022cc:	8c9daebf 	.word	0x8c9daebf
 80022d0:	13141516 	.word	0x13141516

080022d4 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	af00      	add	r7, sp, #0
  /* Set the PRGLOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->PECR, FLASH_PECR_PRGLOCK);
 80022d8:	4b07      	ldr	r3, [pc, #28]	; (80022f8 <HAL_FLASH_Lock+0x24>)
 80022da:	685a      	ldr	r2, [r3, #4]
 80022dc:	4b06      	ldr	r3, [pc, #24]	; (80022f8 <HAL_FLASH_Lock+0x24>)
 80022de:	2102      	movs	r1, #2
 80022e0:	430a      	orrs	r2, r1
 80022e2:	605a      	str	r2, [r3, #4]
  
  /* Set the PELOCK Bit to lock the PECR Register access */
  SET_BIT(FLASH->PECR, FLASH_PECR_PELOCK);
 80022e4:	4b04      	ldr	r3, [pc, #16]	; (80022f8 <HAL_FLASH_Lock+0x24>)
 80022e6:	685a      	ldr	r2, [r3, #4]
 80022e8:	4b03      	ldr	r3, [pc, #12]	; (80022f8 <HAL_FLASH_Lock+0x24>)
 80022ea:	2101      	movs	r1, #1
 80022ec:	430a      	orrs	r2, r1
 80022ee:	605a      	str	r2, [r3, #4]

  return HAL_OK;  
 80022f0:	2300      	movs	r3, #0
}
 80022f2:	0018      	movs	r0, r3
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bd80      	pop	{r7, pc}
 80022f8:	40022000 	.word	0x40022000

080022fc <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b084      	sub	sp, #16
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8002304:	f7ff fdc2 	bl	8001e8c <HAL_GetTick>
 8002308:	0003      	movs	r3, r0
 800230a:	60fb      	str	r3, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800230c:	e00f      	b.n	800232e <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	3301      	adds	r3, #1
 8002312:	d00c      	beq.n	800232e <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d007      	beq.n	800232a <FLASH_WaitForLastOperation+0x2e>
 800231a:	f7ff fdb7 	bl	8001e8c <HAL_GetTick>
 800231e:	0002      	movs	r2, r0
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	1ad3      	subs	r3, r2, r3
 8002324:	687a      	ldr	r2, [r7, #4]
 8002326:	429a      	cmp	r2, r3
 8002328:	d201      	bcs.n	800232e <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 800232a:	2303      	movs	r3, #3
 800232c:	e052      	b.n	80023d4 <FLASH_WaitForLastOperation+0xd8>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800232e:	4b2b      	ldr	r3, [pc, #172]	; (80023dc <FLASH_WaitForLastOperation+0xe0>)
 8002330:	699b      	ldr	r3, [r3, #24]
 8002332:	2201      	movs	r2, #1
 8002334:	4013      	ands	r3, r2
 8002336:	2b01      	cmp	r3, #1
 8002338:	d0e9      	beq.n	800230e <FLASH_WaitForLastOperation+0x12>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800233a:	4b28      	ldr	r3, [pc, #160]	; (80023dc <FLASH_WaitForLastOperation+0xe0>)
 800233c:	699b      	ldr	r3, [r3, #24]
 800233e:	2202      	movs	r2, #2
 8002340:	4013      	ands	r3, r2
 8002342:	2b02      	cmp	r3, #2
 8002344:	d102      	bne.n	800234c <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8002346:	4b25      	ldr	r3, [pc, #148]	; (80023dc <FLASH_WaitForLastOperation+0xe0>)
 8002348:	2202      	movs	r2, #2
 800234a:	619a      	str	r2, [r3, #24]
  }
  
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 800234c:	4b23      	ldr	r3, [pc, #140]	; (80023dc <FLASH_WaitForLastOperation+0xe0>)
 800234e:	699a      	ldr	r2, [r3, #24]
 8002350:	2380      	movs	r3, #128	; 0x80
 8002352:	005b      	lsls	r3, r3, #1
 8002354:	401a      	ands	r2, r3
 8002356:	2380      	movs	r3, #128	; 0x80
 8002358:	005b      	lsls	r3, r3, #1
 800235a:	429a      	cmp	r2, r3
 800235c:	d035      	beq.n	80023ca <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 800235e:	4b1f      	ldr	r3, [pc, #124]	; (80023dc <FLASH_WaitForLastOperation+0xe0>)
 8002360:	699a      	ldr	r2, [r3, #24]
 8002362:	2380      	movs	r3, #128	; 0x80
 8002364:	009b      	lsls	r3, r3, #2
 8002366:	401a      	ands	r2, r3
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 8002368:	2380      	movs	r3, #128	; 0x80
 800236a:	009b      	lsls	r3, r3, #2
 800236c:	429a      	cmp	r2, r3
 800236e:	d02c      	beq.n	80023ca <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 8002370:	4b1a      	ldr	r3, [pc, #104]	; (80023dc <FLASH_WaitForLastOperation+0xe0>)
 8002372:	699a      	ldr	r2, [r3, #24]
 8002374:	2380      	movs	r3, #128	; 0x80
 8002376:	00db      	lsls	r3, r3, #3
 8002378:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 800237a:	2380      	movs	r3, #128	; 0x80
 800237c:	00db      	lsls	r3, r3, #3
 800237e:	429a      	cmp	r2, r3
 8002380:	d023      	beq.n	80023ca <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 8002382:	4b16      	ldr	r3, [pc, #88]	; (80023dc <FLASH_WaitForLastOperation+0xe0>)
 8002384:	699a      	ldr	r2, [r3, #24]
 8002386:	2380      	movs	r3, #128	; 0x80
 8002388:	011b      	lsls	r3, r3, #4
 800238a:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 800238c:	2380      	movs	r3, #128	; 0x80
 800238e:	011b      	lsls	r3, r3, #4
 8002390:	429a      	cmp	r2, r3
 8002392:	d01a      	beq.n	80023ca <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 8002394:	4b11      	ldr	r3, [pc, #68]	; (80023dc <FLASH_WaitForLastOperation+0xe0>)
 8002396:	699a      	ldr	r2, [r3, #24]
 8002398:	2380      	movs	r3, #128	; 0x80
 800239a:	019b      	lsls	r3, r3, #6
 800239c:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 800239e:	2380      	movs	r3, #128	; 0x80
 80023a0:	019b      	lsls	r3, r3, #6
 80023a2:	429a      	cmp	r2, r3
 80023a4:	d011      	beq.n	80023ca <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 80023a6:	4b0d      	ldr	r3, [pc, #52]	; (80023dc <FLASH_WaitForLastOperation+0xe0>)
 80023a8:	699a      	ldr	r2, [r3, #24]
 80023aa:	2380      	movs	r3, #128	; 0x80
 80023ac:	029b      	lsls	r3, r3, #10
 80023ae:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 80023b0:	2380      	movs	r3, #128	; 0x80
 80023b2:	029b      	lsls	r3, r3, #10
 80023b4:	429a      	cmp	r2, r3
 80023b6:	d008      	beq.n	80023ca <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR) )
 80023b8:	4b08      	ldr	r3, [pc, #32]	; (80023dc <FLASH_WaitForLastOperation+0xe0>)
 80023ba:	699a      	ldr	r2, [r3, #24]
 80023bc:	2380      	movs	r3, #128	; 0x80
 80023be:	025b      	lsls	r3, r3, #9
 80023c0:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 80023c2:	2380      	movs	r3, #128	; 0x80
 80023c4:	025b      	lsls	r3, r3, #9
 80023c6:	429a      	cmp	r2, r3
 80023c8:	d103      	bne.n	80023d2 <FLASH_WaitForLastOperation+0xd6>
     *           cut of the STM32L031xx device or the first cut of the STM32L041xx
     *           device, this error should be ignored. The revId of the device
     *           can be retrieved via the HAL_GetREVID() function.
     *
     */
    FLASH_SetErrorCode();
 80023ca:	f000 f809 	bl	80023e0 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80023ce:	2301      	movs	r3, #1
 80023d0:	e000      	b.n	80023d4 <FLASH_WaitForLastOperation+0xd8>
  }

  /* There is no error flag set */
  return HAL_OK;
 80023d2:	2300      	movs	r3, #0
}
 80023d4:	0018      	movs	r0, r3
 80023d6:	46bd      	mov	sp, r7
 80023d8:	b004      	add	sp, #16
 80023da:	bd80      	pop	{r7, pc}
 80023dc:	40022000 	.word	0x40022000

080023e0 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b082      	sub	sp, #8
 80023e4:	af00      	add	r7, sp, #0
  uint32_t flags = 0;
 80023e6:	2300      	movs	r3, #0
 80023e8:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 80023ea:	4b49      	ldr	r3, [pc, #292]	; (8002510 <FLASH_SetErrorCode+0x130>)
 80023ec:	699a      	ldr	r2, [r3, #24]
 80023ee:	2380      	movs	r3, #128	; 0x80
 80023f0:	005b      	lsls	r3, r3, #1
 80023f2:	401a      	ands	r2, r3
 80023f4:	2380      	movs	r3, #128	; 0x80
 80023f6:	005b      	lsls	r3, r3, #1
 80023f8:	429a      	cmp	r2, r3
 80023fa:	d10a      	bne.n	8002412 <FLASH_SetErrorCode+0x32>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80023fc:	4b45      	ldr	r3, [pc, #276]	; (8002514 <FLASH_SetErrorCode+0x134>)
 80023fe:	695b      	ldr	r3, [r3, #20]
 8002400:	2202      	movs	r2, #2
 8002402:	431a      	orrs	r2, r3
 8002404:	4b43      	ldr	r3, [pc, #268]	; (8002514 <FLASH_SetErrorCode+0x134>)
 8002406:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_WRPERR;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2280      	movs	r2, #128	; 0x80
 800240c:	0052      	lsls	r2, r2, #1
 800240e:	4313      	orrs	r3, r2
 8002410:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))
 8002412:	4b3f      	ldr	r3, [pc, #252]	; (8002510 <FLASH_SetErrorCode+0x130>)
 8002414:	699a      	ldr	r2, [r3, #24]
 8002416:	2380      	movs	r3, #128	; 0x80
 8002418:	009b      	lsls	r3, r3, #2
 800241a:	401a      	ands	r2, r3
 800241c:	2380      	movs	r3, #128	; 0x80
 800241e:	009b      	lsls	r3, r3, #2
 8002420:	429a      	cmp	r2, r3
 8002422:	d10a      	bne.n	800243a <FLASH_SetErrorCode+0x5a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8002424:	4b3b      	ldr	r3, [pc, #236]	; (8002514 <FLASH_SetErrorCode+0x134>)
 8002426:	695b      	ldr	r3, [r3, #20]
 8002428:	2201      	movs	r2, #1
 800242a:	431a      	orrs	r2, r3
 800242c:	4b39      	ldr	r3, [pc, #228]	; (8002514 <FLASH_SetErrorCode+0x134>)
 800242e:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_PGAERR;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2280      	movs	r2, #128	; 0x80
 8002434:	0092      	lsls	r2, r2, #2
 8002436:	4313      	orrs	r3, r2
 8002438:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR))
 800243a:	4b35      	ldr	r3, [pc, #212]	; (8002510 <FLASH_SetErrorCode+0x130>)
 800243c:	699a      	ldr	r2, [r3, #24]
 800243e:	2380      	movs	r3, #128	; 0x80
 8002440:	00db      	lsls	r3, r3, #3
 8002442:	401a      	ands	r2, r3
 8002444:	2380      	movs	r3, #128	; 0x80
 8002446:	00db      	lsls	r3, r3, #3
 8002448:	429a      	cmp	r2, r3
 800244a:	d10a      	bne.n	8002462 <FLASH_SetErrorCode+0x82>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_SIZE;
 800244c:	4b31      	ldr	r3, [pc, #196]	; (8002514 <FLASH_SetErrorCode+0x134>)
 800244e:	695b      	ldr	r3, [r3, #20]
 8002450:	2208      	movs	r2, #8
 8002452:	431a      	orrs	r2, r3
 8002454:	4b2f      	ldr	r3, [pc, #188]	; (8002514 <FLASH_SetErrorCode+0x134>)
 8002456:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_SIZERR;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2280      	movs	r2, #128	; 0x80
 800245c:	00d2      	lsls	r2, r2, #3
 800245e:	4313      	orrs	r3, r2
 8002460:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8002462:	4b2b      	ldr	r3, [pc, #172]	; (8002510 <FLASH_SetErrorCode+0x130>)
 8002464:	699a      	ldr	r2, [r3, #24]
 8002466:	2380      	movs	r3, #128	; 0x80
 8002468:	011b      	lsls	r3, r3, #4
 800246a:	401a      	ands	r2, r3
 800246c:	2380      	movs	r3, #128	; 0x80
 800246e:	011b      	lsls	r3, r3, #4
 8002470:	429a      	cmp	r2, r3
 8002472:	d10a      	bne.n	800248a <FLASH_SetErrorCode+0xaa>
     *           cut of the STM32L031xx device or the first cut of the STM32L041xx
     *           device, this error should be ignored. The revId of the device
     *           can be retrieved via the HAL_GetREVID() function.
     *
     */
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8002474:	4b27      	ldr	r3, [pc, #156]	; (8002514 <FLASH_SetErrorCode+0x134>)
 8002476:	695b      	ldr	r3, [r3, #20]
 8002478:	2204      	movs	r2, #4
 800247a:	431a      	orrs	r2, r3
 800247c:	4b25      	ldr	r3, [pc, #148]	; (8002514 <FLASH_SetErrorCode+0x134>)
 800247e:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_OPTVERR;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2280      	movs	r2, #128	; 0x80
 8002484:	0112      	lsls	r2, r2, #4
 8002486:	4313      	orrs	r3, r2
 8002488:	607b      	str	r3, [r7, #4]
  }

  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR))
 800248a:	4b21      	ldr	r3, [pc, #132]	; (8002510 <FLASH_SetErrorCode+0x130>)
 800248c:	699a      	ldr	r2, [r3, #24]
 800248e:	2380      	movs	r3, #128	; 0x80
 8002490:	019b      	lsls	r3, r3, #6
 8002492:	401a      	ands	r2, r3
 8002494:	2380      	movs	r3, #128	; 0x80
 8002496:	019b      	lsls	r3, r3, #6
 8002498:	429a      	cmp	r2, r3
 800249a:	d10a      	bne.n	80024b2 <FLASH_SetErrorCode+0xd2>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 800249c:	4b1d      	ldr	r3, [pc, #116]	; (8002514 <FLASH_SetErrorCode+0x134>)
 800249e:	695b      	ldr	r3, [r3, #20]
 80024a0:	2210      	movs	r2, #16
 80024a2:	431a      	orrs	r2, r3
 80024a4:	4b1b      	ldr	r3, [pc, #108]	; (8002514 <FLASH_SetErrorCode+0x134>)
 80024a6:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_RDERR;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2280      	movs	r2, #128	; 0x80
 80024ac:	0192      	lsls	r2, r2, #6
 80024ae:	4313      	orrs	r3, r2
 80024b0:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR))
 80024b2:	4b17      	ldr	r3, [pc, #92]	; (8002510 <FLASH_SetErrorCode+0x130>)
 80024b4:	699a      	ldr	r2, [r3, #24]
 80024b6:	2380      	movs	r3, #128	; 0x80
 80024b8:	029b      	lsls	r3, r3, #10
 80024ba:	401a      	ands	r2, r3
 80024bc:	2380      	movs	r3, #128	; 0x80
 80024be:	029b      	lsls	r3, r3, #10
 80024c0:	429a      	cmp	r2, r3
 80024c2:	d109      	bne.n	80024d8 <FLASH_SetErrorCode+0xf8>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_FWWERR;
 80024c4:	4b13      	ldr	r3, [pc, #76]	; (8002514 <FLASH_SetErrorCode+0x134>)
 80024c6:	695b      	ldr	r3, [r3, #20]
 80024c8:	2220      	movs	r2, #32
 80024ca:	431a      	orrs	r2, r3
 80024cc:	4b11      	ldr	r3, [pc, #68]	; (8002514 <FLASH_SetErrorCode+0x134>)
 80024ce:	615a      	str	r2, [r3, #20]
    flags |= HAL_FLASH_ERROR_FWWERR;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2220      	movs	r2, #32
 80024d4:	4313      	orrs	r3, r2
 80024d6:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR))
 80024d8:	4b0d      	ldr	r3, [pc, #52]	; (8002510 <FLASH_SetErrorCode+0x130>)
 80024da:	699a      	ldr	r2, [r3, #24]
 80024dc:	2380      	movs	r3, #128	; 0x80
 80024de:	025b      	lsls	r3, r3, #9
 80024e0:	401a      	ands	r2, r3
 80024e2:	2380      	movs	r3, #128	; 0x80
 80024e4:	025b      	lsls	r3, r3, #9
 80024e6:	429a      	cmp	r2, r3
 80024e8:	d10a      	bne.n	8002500 <FLASH_SetErrorCode+0x120>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_NOTZERO;
 80024ea:	4b0a      	ldr	r3, [pc, #40]	; (8002514 <FLASH_SetErrorCode+0x134>)
 80024ec:	695b      	ldr	r3, [r3, #20]
 80024ee:	2240      	movs	r2, #64	; 0x40
 80024f0:	431a      	orrs	r2, r3
 80024f2:	4b08      	ldr	r3, [pc, #32]	; (8002514 <FLASH_SetErrorCode+0x134>)
 80024f4:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_NOTZEROERR;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2280      	movs	r2, #128	; 0x80
 80024fa:	0252      	lsls	r2, r2, #9
 80024fc:	4313      	orrs	r3, r2
 80024fe:	607b      	str	r3, [r7, #4]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8002500:	4b03      	ldr	r3, [pc, #12]	; (8002510 <FLASH_SetErrorCode+0x130>)
 8002502:	687a      	ldr	r2, [r7, #4]
 8002504:	619a      	str	r2, [r3, #24]
}  
 8002506:	46c0      	nop			; (mov r8, r8)
 8002508:	46bd      	mov	sp, r7
 800250a:	b002      	add	sp, #8
 800250c:	bd80      	pop	{r7, pc}
 800250e:	46c0      	nop			; (mov r8, r8)
 8002510:	40022000 	.word	0x40022000
 8002514:	20000388 	.word	0x20000388

08002518 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8002518:	b5b0      	push	{r4, r5, r7, lr}
 800251a:	b084      	sub	sp, #16
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
 8002520:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002522:	230f      	movs	r3, #15
 8002524:	18fb      	adds	r3, r7, r3
 8002526:	2201      	movs	r2, #1
 8002528:	701a      	strb	r2, [r3, #0]
  uint32_t address = 0U;
 800252a:	2300      	movs	r3, #0
 800252c:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800252e:	4b29      	ldr	r3, [pc, #164]	; (80025d4 <HAL_FLASHEx_Erase+0xbc>)
 8002530:	7c1b      	ldrb	r3, [r3, #16]
 8002532:	2b01      	cmp	r3, #1
 8002534:	d101      	bne.n	800253a <HAL_FLASHEx_Erase+0x22>
 8002536:	2302      	movs	r3, #2
 8002538:	e048      	b.n	80025cc <HAL_FLASHEx_Erase+0xb4>
 800253a:	4b26      	ldr	r3, [pc, #152]	; (80025d4 <HAL_FLASHEx_Erase+0xbc>)
 800253c:	2201      	movs	r2, #1
 800253e:	741a      	strb	r2, [r3, #16]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002540:	250f      	movs	r5, #15
 8002542:	197c      	adds	r4, r7, r5
 8002544:	4b24      	ldr	r3, [pc, #144]	; (80025d8 <HAL_FLASHEx_Erase+0xc0>)
 8002546:	0018      	movs	r0, r3
 8002548:	f7ff fed8 	bl	80022fc <FLASH_WaitForLastOperation>
 800254c:	0003      	movs	r3, r0
 800254e:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8002550:	197b      	adds	r3, r7, r5
 8002552:	781b      	ldrb	r3, [r3, #0]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d133      	bne.n	80025c0 <HAL_FLASHEx_Erase+0xa8>
  {
    /*Initialization of PageError variable*/
    *PageError = 0xFFFFFFFFU;
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	2201      	movs	r2, #1
 800255c:	4252      	negs	r2, r2
 800255e:	601a      	str	r2, [r3, #0]
    assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));
    assert_param(IS_FLASH_PROGRAM_ADDRESS(pEraseInit->PageAddress));
    assert_param(IS_FLASH_PROGRAM_ADDRESS((pEraseInit->PageAddress & ~(FLASH_PAGE_SIZE - 1U)) + pEraseInit->NbPages * FLASH_PAGE_SIZE - 1U));

    /* Erase page by page to be done*/
    for(address = pEraseInit->PageAddress; 
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	60bb      	str	r3, [r7, #8]
 8002566:	e022      	b.n	80025ae <HAL_FLASHEx_Erase+0x96>
        address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
        address += FLASH_PAGE_SIZE)
    {
      FLASH_PageErase(address);
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	0018      	movs	r0, r3
 800256c:	f000 f83a 	bl	80025e4 <FLASH_PageErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002570:	250f      	movs	r5, #15
 8002572:	197c      	adds	r4, r7, r5
 8002574:	4b18      	ldr	r3, [pc, #96]	; (80025d8 <HAL_FLASHEx_Erase+0xc0>)
 8002576:	0018      	movs	r0, r3
 8002578:	f7ff fec0 	bl	80022fc <FLASH_WaitForLastOperation>
 800257c:	0003      	movs	r3, r0
 800257e:	7023      	strb	r3, [r4, #0]

      /* If the erase operation is completed, disable the ERASE Bit */
      CLEAR_BIT(FLASH->PECR, FLASH_PECR_PROG);
 8002580:	4b16      	ldr	r3, [pc, #88]	; (80025dc <HAL_FLASHEx_Erase+0xc4>)
 8002582:	685a      	ldr	r2, [r3, #4]
 8002584:	4b15      	ldr	r3, [pc, #84]	; (80025dc <HAL_FLASHEx_Erase+0xc4>)
 8002586:	2108      	movs	r1, #8
 8002588:	438a      	bics	r2, r1
 800258a:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(FLASH->PECR, FLASH_PECR_ERASE);
 800258c:	4b13      	ldr	r3, [pc, #76]	; (80025dc <HAL_FLASHEx_Erase+0xc4>)
 800258e:	685a      	ldr	r2, [r3, #4]
 8002590:	4b12      	ldr	r3, [pc, #72]	; (80025dc <HAL_FLASHEx_Erase+0xc4>)
 8002592:	4913      	ldr	r1, [pc, #76]	; (80025e0 <HAL_FLASHEx_Erase+0xc8>)
 8002594:	400a      	ands	r2, r1
 8002596:	605a      	str	r2, [r3, #4]

      if (status != HAL_OK) 
 8002598:	197b      	adds	r3, r7, r5
 800259a:	781b      	ldrb	r3, [r3, #0]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d003      	beq.n	80025a8 <HAL_FLASHEx_Erase+0x90>
      {
        /* In case of error, stop erase procedure and return the faulty address */
        *PageError = address;
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	68ba      	ldr	r2, [r7, #8]
 80025a4:	601a      	str	r2, [r3, #0]
        break;
 80025a6:	e00b      	b.n	80025c0 <HAL_FLASHEx_Erase+0xa8>
        address += FLASH_PAGE_SIZE)
 80025a8:	68bb      	ldr	r3, [r7, #8]
 80025aa:	3380      	adds	r3, #128	; 0x80
 80025ac:	60bb      	str	r3, [r7, #8]
        address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	689b      	ldr	r3, [r3, #8]
 80025b2:	01da      	lsls	r2, r3, #7
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	18d3      	adds	r3, r2, r3
 80025ba:	68ba      	ldr	r2, [r7, #8]
 80025bc:	429a      	cmp	r2, r3
 80025be:	d3d3      	bcc.n	8002568 <HAL_FLASHEx_Erase+0x50>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80025c0:	4b04      	ldr	r3, [pc, #16]	; (80025d4 <HAL_FLASHEx_Erase+0xbc>)
 80025c2:	2200      	movs	r2, #0
 80025c4:	741a      	strb	r2, [r3, #16]

  return status;
 80025c6:	230f      	movs	r3, #15
 80025c8:	18fb      	adds	r3, r7, r3
 80025ca:	781b      	ldrb	r3, [r3, #0]
}
 80025cc:	0018      	movs	r0, r3
 80025ce:	46bd      	mov	sp, r7
 80025d0:	b004      	add	sp, #16
 80025d2:	bdb0      	pop	{r4, r5, r7, pc}
 80025d4:	20000388 	.word	0x20000388
 80025d8:	0000c350 	.word	0x0000c350
 80025dc:	40022000 	.word	0x40022000
 80025e0:	fffffdff 	.word	0xfffffdff

080025e4 <FLASH_PageErase>:
  * @note   A Page is erased in the Program memory only if the address to load 
  *         is the start address of a page (multiple of @ref FLASH_PAGE_SIZE bytes).
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b082      	sub	sp, #8
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80025ec:	4b0c      	ldr	r3, [pc, #48]	; (8002620 <FLASH_PageErase+0x3c>)
 80025ee:	2200      	movs	r2, #0
 80025f0:	615a      	str	r2, [r3, #20]

  /* Set the ERASE bit */
  SET_BIT(FLASH->PECR, FLASH_PECR_ERASE);
 80025f2:	4b0c      	ldr	r3, [pc, #48]	; (8002624 <FLASH_PageErase+0x40>)
 80025f4:	685a      	ldr	r2, [r3, #4]
 80025f6:	4b0b      	ldr	r3, [pc, #44]	; (8002624 <FLASH_PageErase+0x40>)
 80025f8:	2180      	movs	r1, #128	; 0x80
 80025fa:	0089      	lsls	r1, r1, #2
 80025fc:	430a      	orrs	r2, r1
 80025fe:	605a      	str	r2, [r3, #4]

  /* Set PROG bit */
  SET_BIT(FLASH->PECR, FLASH_PECR_PROG);
 8002600:	4b08      	ldr	r3, [pc, #32]	; (8002624 <FLASH_PageErase+0x40>)
 8002602:	685a      	ldr	r2, [r3, #4]
 8002604:	4b07      	ldr	r3, [pc, #28]	; (8002624 <FLASH_PageErase+0x40>)
 8002606:	2108      	movs	r1, #8
 8002608:	430a      	orrs	r2, r1
 800260a:	605a      	str	r2, [r3, #4]

  /* Write 00000000h to the first word of the program page to erase */
  *(__IO uint32_t *)(uint32_t)(PageAddress & ~(FLASH_PAGE_SIZE - 1)) = 0x00000000;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	227f      	movs	r2, #127	; 0x7f
 8002610:	4393      	bics	r3, r2
 8002612:	2200      	movs	r2, #0
 8002614:	601a      	str	r2, [r3, #0]
}
 8002616:	46c0      	nop			; (mov r8, r8)
 8002618:	46bd      	mov	sp, r7
 800261a:	b002      	add	sp, #8
 800261c:	bd80      	pop	{r7, pc}
 800261e:	46c0      	nop			; (mov r8, r8)
 8002620:	20000388 	.word	0x20000388
 8002624:	40022000 	.word	0x40022000

08002628 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b086      	sub	sp, #24
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
 8002630:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002632:	2300      	movs	r3, #0
 8002634:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002636:	2300      	movs	r3, #0
 8002638:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800263a:	2300      	movs	r3, #0
 800263c:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800263e:	e155      	b.n	80028ec <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	2101      	movs	r1, #1
 8002646:	697a      	ldr	r2, [r7, #20]
 8002648:	4091      	lsls	r1, r2
 800264a:	000a      	movs	r2, r1
 800264c:	4013      	ands	r3, r2
 800264e:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d100      	bne.n	8002658 <HAL_GPIO_Init+0x30>
 8002656:	e146      	b.n	80028e6 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	2203      	movs	r2, #3
 800265e:	4013      	ands	r3, r2
 8002660:	2b01      	cmp	r3, #1
 8002662:	d005      	beq.n	8002670 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	2203      	movs	r2, #3
 800266a:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800266c:	2b02      	cmp	r3, #2
 800266e:	d130      	bne.n	80026d2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	689b      	ldr	r3, [r3, #8]
 8002674:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8002676:	697b      	ldr	r3, [r7, #20]
 8002678:	005b      	lsls	r3, r3, #1
 800267a:	2203      	movs	r2, #3
 800267c:	409a      	lsls	r2, r3
 800267e:	0013      	movs	r3, r2
 8002680:	43da      	mvns	r2, r3
 8002682:	693b      	ldr	r3, [r7, #16]
 8002684:	4013      	ands	r3, r2
 8002686:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	68da      	ldr	r2, [r3, #12]
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	005b      	lsls	r3, r3, #1
 8002690:	409a      	lsls	r2, r3
 8002692:	0013      	movs	r3, r2
 8002694:	693a      	ldr	r2, [r7, #16]
 8002696:	4313      	orrs	r3, r2
 8002698:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	693a      	ldr	r2, [r7, #16]
 800269e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80026a6:	2201      	movs	r2, #1
 80026a8:	697b      	ldr	r3, [r7, #20]
 80026aa:	409a      	lsls	r2, r3
 80026ac:	0013      	movs	r3, r2
 80026ae:	43da      	mvns	r2, r3
 80026b0:	693b      	ldr	r3, [r7, #16]
 80026b2:	4013      	ands	r3, r2
 80026b4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	091b      	lsrs	r3, r3, #4
 80026bc:	2201      	movs	r2, #1
 80026be:	401a      	ands	r2, r3
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	409a      	lsls	r2, r3
 80026c4:	0013      	movs	r3, r2
 80026c6:	693a      	ldr	r2, [r7, #16]
 80026c8:	4313      	orrs	r3, r2
 80026ca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	693a      	ldr	r2, [r7, #16]
 80026d0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	2203      	movs	r2, #3
 80026d8:	4013      	ands	r3, r2
 80026da:	2b03      	cmp	r3, #3
 80026dc:	d017      	beq.n	800270e <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	68db      	ldr	r3, [r3, #12]
 80026e2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80026e4:	697b      	ldr	r3, [r7, #20]
 80026e6:	005b      	lsls	r3, r3, #1
 80026e8:	2203      	movs	r2, #3
 80026ea:	409a      	lsls	r2, r3
 80026ec:	0013      	movs	r3, r2
 80026ee:	43da      	mvns	r2, r3
 80026f0:	693b      	ldr	r3, [r7, #16]
 80026f2:	4013      	ands	r3, r2
 80026f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	689a      	ldr	r2, [r3, #8]
 80026fa:	697b      	ldr	r3, [r7, #20]
 80026fc:	005b      	lsls	r3, r3, #1
 80026fe:	409a      	lsls	r2, r3
 8002700:	0013      	movs	r3, r2
 8002702:	693a      	ldr	r2, [r7, #16]
 8002704:	4313      	orrs	r3, r2
 8002706:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	693a      	ldr	r2, [r7, #16]
 800270c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	2203      	movs	r2, #3
 8002714:	4013      	ands	r3, r2
 8002716:	2b02      	cmp	r3, #2
 8002718:	d123      	bne.n	8002762 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800271a:	697b      	ldr	r3, [r7, #20]
 800271c:	08da      	lsrs	r2, r3, #3
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	3208      	adds	r2, #8
 8002722:	0092      	lsls	r2, r2, #2
 8002724:	58d3      	ldr	r3, [r2, r3]
 8002726:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8002728:	697b      	ldr	r3, [r7, #20]
 800272a:	2207      	movs	r2, #7
 800272c:	4013      	ands	r3, r2
 800272e:	009b      	lsls	r3, r3, #2
 8002730:	220f      	movs	r2, #15
 8002732:	409a      	lsls	r2, r3
 8002734:	0013      	movs	r3, r2
 8002736:	43da      	mvns	r2, r3
 8002738:	693b      	ldr	r3, [r7, #16]
 800273a:	4013      	ands	r3, r2
 800273c:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	691a      	ldr	r2, [r3, #16]
 8002742:	697b      	ldr	r3, [r7, #20]
 8002744:	2107      	movs	r1, #7
 8002746:	400b      	ands	r3, r1
 8002748:	009b      	lsls	r3, r3, #2
 800274a:	409a      	lsls	r2, r3
 800274c:	0013      	movs	r3, r2
 800274e:	693a      	ldr	r2, [r7, #16]
 8002750:	4313      	orrs	r3, r2
 8002752:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002754:	697b      	ldr	r3, [r7, #20]
 8002756:	08da      	lsrs	r2, r3, #3
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	3208      	adds	r2, #8
 800275c:	0092      	lsls	r2, r2, #2
 800275e:	6939      	ldr	r1, [r7, #16]
 8002760:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002768:	697b      	ldr	r3, [r7, #20]
 800276a:	005b      	lsls	r3, r3, #1
 800276c:	2203      	movs	r2, #3
 800276e:	409a      	lsls	r2, r3
 8002770:	0013      	movs	r3, r2
 8002772:	43da      	mvns	r2, r3
 8002774:	693b      	ldr	r3, [r7, #16]
 8002776:	4013      	ands	r3, r2
 8002778:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	2203      	movs	r2, #3
 8002780:	401a      	ands	r2, r3
 8002782:	697b      	ldr	r3, [r7, #20]
 8002784:	005b      	lsls	r3, r3, #1
 8002786:	409a      	lsls	r2, r3
 8002788:	0013      	movs	r3, r2
 800278a:	693a      	ldr	r2, [r7, #16]
 800278c:	4313      	orrs	r3, r2
 800278e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	693a      	ldr	r2, [r7, #16]
 8002794:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	685a      	ldr	r2, [r3, #4]
 800279a:	23c0      	movs	r3, #192	; 0xc0
 800279c:	029b      	lsls	r3, r3, #10
 800279e:	4013      	ands	r3, r2
 80027a0:	d100      	bne.n	80027a4 <HAL_GPIO_Init+0x17c>
 80027a2:	e0a0      	b.n	80028e6 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027a4:	4b57      	ldr	r3, [pc, #348]	; (8002904 <HAL_GPIO_Init+0x2dc>)
 80027a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80027a8:	4b56      	ldr	r3, [pc, #344]	; (8002904 <HAL_GPIO_Init+0x2dc>)
 80027aa:	2101      	movs	r1, #1
 80027ac:	430a      	orrs	r2, r1
 80027ae:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 80027b0:	4a55      	ldr	r2, [pc, #340]	; (8002908 <HAL_GPIO_Init+0x2e0>)
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	089b      	lsrs	r3, r3, #2
 80027b6:	3302      	adds	r3, #2
 80027b8:	009b      	lsls	r3, r3, #2
 80027ba:	589b      	ldr	r3, [r3, r2]
 80027bc:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80027be:	697b      	ldr	r3, [r7, #20]
 80027c0:	2203      	movs	r2, #3
 80027c2:	4013      	ands	r3, r2
 80027c4:	009b      	lsls	r3, r3, #2
 80027c6:	220f      	movs	r2, #15
 80027c8:	409a      	lsls	r2, r3
 80027ca:	0013      	movs	r3, r2
 80027cc:	43da      	mvns	r2, r3
 80027ce:	693b      	ldr	r3, [r7, #16]
 80027d0:	4013      	ands	r3, r2
 80027d2:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80027d4:	687a      	ldr	r2, [r7, #4]
 80027d6:	23a0      	movs	r3, #160	; 0xa0
 80027d8:	05db      	lsls	r3, r3, #23
 80027da:	429a      	cmp	r2, r3
 80027dc:	d01f      	beq.n	800281e <HAL_GPIO_Init+0x1f6>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	4a4a      	ldr	r2, [pc, #296]	; (800290c <HAL_GPIO_Init+0x2e4>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d019      	beq.n	800281a <HAL_GPIO_Init+0x1f2>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	4a49      	ldr	r2, [pc, #292]	; (8002910 <HAL_GPIO_Init+0x2e8>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d013      	beq.n	8002816 <HAL_GPIO_Init+0x1ee>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	4a48      	ldr	r2, [pc, #288]	; (8002914 <HAL_GPIO_Init+0x2ec>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d00d      	beq.n	8002812 <HAL_GPIO_Init+0x1ea>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	4a47      	ldr	r2, [pc, #284]	; (8002918 <HAL_GPIO_Init+0x2f0>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d007      	beq.n	800280e <HAL_GPIO_Init+0x1e6>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	4a46      	ldr	r2, [pc, #280]	; (800291c <HAL_GPIO_Init+0x2f4>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d101      	bne.n	800280a <HAL_GPIO_Init+0x1e2>
 8002806:	2305      	movs	r3, #5
 8002808:	e00a      	b.n	8002820 <HAL_GPIO_Init+0x1f8>
 800280a:	2306      	movs	r3, #6
 800280c:	e008      	b.n	8002820 <HAL_GPIO_Init+0x1f8>
 800280e:	2304      	movs	r3, #4
 8002810:	e006      	b.n	8002820 <HAL_GPIO_Init+0x1f8>
 8002812:	2303      	movs	r3, #3
 8002814:	e004      	b.n	8002820 <HAL_GPIO_Init+0x1f8>
 8002816:	2302      	movs	r3, #2
 8002818:	e002      	b.n	8002820 <HAL_GPIO_Init+0x1f8>
 800281a:	2301      	movs	r3, #1
 800281c:	e000      	b.n	8002820 <HAL_GPIO_Init+0x1f8>
 800281e:	2300      	movs	r3, #0
 8002820:	697a      	ldr	r2, [r7, #20]
 8002822:	2103      	movs	r1, #3
 8002824:	400a      	ands	r2, r1
 8002826:	0092      	lsls	r2, r2, #2
 8002828:	4093      	lsls	r3, r2
 800282a:	693a      	ldr	r2, [r7, #16]
 800282c:	4313      	orrs	r3, r2
 800282e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002830:	4935      	ldr	r1, [pc, #212]	; (8002908 <HAL_GPIO_Init+0x2e0>)
 8002832:	697b      	ldr	r3, [r7, #20]
 8002834:	089b      	lsrs	r3, r3, #2
 8002836:	3302      	adds	r3, #2
 8002838:	009b      	lsls	r3, r3, #2
 800283a:	693a      	ldr	r2, [r7, #16]
 800283c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800283e:	4b38      	ldr	r3, [pc, #224]	; (8002920 <HAL_GPIO_Init+0x2f8>)
 8002840:	689b      	ldr	r3, [r3, #8]
 8002842:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	43da      	mvns	r2, r3
 8002848:	693b      	ldr	r3, [r7, #16]
 800284a:	4013      	ands	r3, r2
 800284c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	685a      	ldr	r2, [r3, #4]
 8002852:	2380      	movs	r3, #128	; 0x80
 8002854:	035b      	lsls	r3, r3, #13
 8002856:	4013      	ands	r3, r2
 8002858:	d003      	beq.n	8002862 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 800285a:	693a      	ldr	r2, [r7, #16]
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	4313      	orrs	r3, r2
 8002860:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002862:	4b2f      	ldr	r3, [pc, #188]	; (8002920 <HAL_GPIO_Init+0x2f8>)
 8002864:	693a      	ldr	r2, [r7, #16]
 8002866:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002868:	4b2d      	ldr	r3, [pc, #180]	; (8002920 <HAL_GPIO_Init+0x2f8>)
 800286a:	68db      	ldr	r3, [r3, #12]
 800286c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	43da      	mvns	r2, r3
 8002872:	693b      	ldr	r3, [r7, #16]
 8002874:	4013      	ands	r3, r2
 8002876:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	685a      	ldr	r2, [r3, #4]
 800287c:	2380      	movs	r3, #128	; 0x80
 800287e:	039b      	lsls	r3, r3, #14
 8002880:	4013      	ands	r3, r2
 8002882:	d003      	beq.n	800288c <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8002884:	693a      	ldr	r2, [r7, #16]
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	4313      	orrs	r3, r2
 800288a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800288c:	4b24      	ldr	r3, [pc, #144]	; (8002920 <HAL_GPIO_Init+0x2f8>)
 800288e:	693a      	ldr	r2, [r7, #16]
 8002890:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8002892:	4b23      	ldr	r3, [pc, #140]	; (8002920 <HAL_GPIO_Init+0x2f8>)
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	43da      	mvns	r2, r3
 800289c:	693b      	ldr	r3, [r7, #16]
 800289e:	4013      	ands	r3, r2
 80028a0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	685a      	ldr	r2, [r3, #4]
 80028a6:	2380      	movs	r3, #128	; 0x80
 80028a8:	029b      	lsls	r3, r3, #10
 80028aa:	4013      	ands	r3, r2
 80028ac:	d003      	beq.n	80028b6 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 80028ae:	693a      	ldr	r2, [r7, #16]
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	4313      	orrs	r3, r2
 80028b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80028b6:	4b1a      	ldr	r3, [pc, #104]	; (8002920 <HAL_GPIO_Init+0x2f8>)
 80028b8:	693a      	ldr	r2, [r7, #16]
 80028ba:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80028bc:	4b18      	ldr	r3, [pc, #96]	; (8002920 <HAL_GPIO_Init+0x2f8>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	43da      	mvns	r2, r3
 80028c6:	693b      	ldr	r3, [r7, #16]
 80028c8:	4013      	ands	r3, r2
 80028ca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	685a      	ldr	r2, [r3, #4]
 80028d0:	2380      	movs	r3, #128	; 0x80
 80028d2:	025b      	lsls	r3, r3, #9
 80028d4:	4013      	ands	r3, r2
 80028d6:	d003      	beq.n	80028e0 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 80028d8:	693a      	ldr	r2, [r7, #16]
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	4313      	orrs	r3, r2
 80028de:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80028e0:	4b0f      	ldr	r3, [pc, #60]	; (8002920 <HAL_GPIO_Init+0x2f8>)
 80028e2:	693a      	ldr	r2, [r7, #16]
 80028e4:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 80028e6:	697b      	ldr	r3, [r7, #20]
 80028e8:	3301      	adds	r3, #1
 80028ea:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	681a      	ldr	r2, [r3, #0]
 80028f0:	697b      	ldr	r3, [r7, #20]
 80028f2:	40da      	lsrs	r2, r3
 80028f4:	1e13      	subs	r3, r2, #0
 80028f6:	d000      	beq.n	80028fa <HAL_GPIO_Init+0x2d2>
 80028f8:	e6a2      	b.n	8002640 <HAL_GPIO_Init+0x18>
  }
}
 80028fa:	46c0      	nop			; (mov r8, r8)
 80028fc:	46c0      	nop			; (mov r8, r8)
 80028fe:	46bd      	mov	sp, r7
 8002900:	b006      	add	sp, #24
 8002902:	bd80      	pop	{r7, pc}
 8002904:	40021000 	.word	0x40021000
 8002908:	40010000 	.word	0x40010000
 800290c:	50000400 	.word	0x50000400
 8002910:	50000800 	.word	0x50000800
 8002914:	50000c00 	.word	0x50000c00
 8002918:	50001000 	.word	0x50001000
 800291c:	50001c00 	.word	0x50001c00
 8002920:	40010400 	.word	0x40010400

08002924 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected to the EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b082      	sub	sp, #8
 8002928:	af00      	add	r7, sp, #0
 800292a:	0002      	movs	r2, r0
 800292c:	1dbb      	adds	r3, r7, #6
 800292e:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002930:	4b09      	ldr	r3, [pc, #36]	; (8002958 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8002932:	695b      	ldr	r3, [r3, #20]
 8002934:	1dba      	adds	r2, r7, #6
 8002936:	8812      	ldrh	r2, [r2, #0]
 8002938:	4013      	ands	r3, r2
 800293a:	d008      	beq.n	800294e <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800293c:	4b06      	ldr	r3, [pc, #24]	; (8002958 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 800293e:	1dba      	adds	r2, r7, #6
 8002940:	8812      	ldrh	r2, [r2, #0]
 8002942:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002944:	1dbb      	adds	r3, r7, #6
 8002946:	881b      	ldrh	r3, [r3, #0]
 8002948:	0018      	movs	r0, r3
 800294a:	f7fe f9eb 	bl	8000d24 <HAL_GPIO_EXTI_Callback>
  }
}
 800294e:	46c0      	nop			; (mov r8, r8)
 8002950:	46bd      	mov	sp, r7
 8002952:	b002      	add	sp, #8
 8002954:	bd80      	pop	{r7, pc}
 8002956:	46c0      	nop			; (mov r8, r8)
 8002958:	40010400 	.word	0x40010400

0800295c <HAL_PWR_ConfigPVD>:
  *         more details about the voltage threshold corresponding to each
  *         detection level.
  * @retval None
  */
void HAL_PWR_ConfigPVD(PWR_PVDTypeDef *sConfigPVD)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b082      	sub	sp, #8
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_PVD_LEVEL(sConfigPVD->PVDLevel));
  assert_param(IS_PWR_PVD_MODE(sConfigPVD->Mode));

  /* Set PLS[7:5] bits according to PVDLevel value */
  MODIFY_REG(PWR->CR, PWR_CR_PLS, sConfigPVD->PVDLevel);
 8002964:	4b2b      	ldr	r3, [pc, #172]	; (8002a14 <HAL_PWR_ConfigPVD+0xb8>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	22e0      	movs	r2, #224	; 0xe0
 800296a:	4393      	bics	r3, r2
 800296c:	0019      	movs	r1, r3
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681a      	ldr	r2, [r3, #0]
 8002972:	4b28      	ldr	r3, [pc, #160]	; (8002a14 <HAL_PWR_ConfigPVD+0xb8>)
 8002974:	430a      	orrs	r2, r1
 8002976:	601a      	str	r2, [r3, #0]
  
  /* Clear any previous config. Keep it clear if no event or IT mode is selected */
  __HAL_PWR_PVD_EXTI_DISABLE_EVENT();
 8002978:	4b27      	ldr	r3, [pc, #156]	; (8002a18 <HAL_PWR_ConfigPVD+0xbc>)
 800297a:	685a      	ldr	r2, [r3, #4]
 800297c:	4b26      	ldr	r3, [pc, #152]	; (8002a18 <HAL_PWR_ConfigPVD+0xbc>)
 800297e:	4927      	ldr	r1, [pc, #156]	; (8002a1c <HAL_PWR_ConfigPVD+0xc0>)
 8002980:	400a      	ands	r2, r1
 8002982:	605a      	str	r2, [r3, #4]
  __HAL_PWR_PVD_EXTI_DISABLE_IT();
 8002984:	4b24      	ldr	r3, [pc, #144]	; (8002a18 <HAL_PWR_ConfigPVD+0xbc>)
 8002986:	681a      	ldr	r2, [r3, #0]
 8002988:	4b23      	ldr	r3, [pc, #140]	; (8002a18 <HAL_PWR_ConfigPVD+0xbc>)
 800298a:	4924      	ldr	r1, [pc, #144]	; (8002a1c <HAL_PWR_ConfigPVD+0xc0>)
 800298c:	400a      	ands	r2, r1
 800298e:	601a      	str	r2, [r3, #0]
  __HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE(); 
 8002990:	4b21      	ldr	r3, [pc, #132]	; (8002a18 <HAL_PWR_ConfigPVD+0xbc>)
 8002992:	68da      	ldr	r2, [r3, #12]
 8002994:	4b20      	ldr	r3, [pc, #128]	; (8002a18 <HAL_PWR_ConfigPVD+0xbc>)
 8002996:	4921      	ldr	r1, [pc, #132]	; (8002a1c <HAL_PWR_ConfigPVD+0xc0>)
 8002998:	400a      	ands	r2, r1
 800299a:	60da      	str	r2, [r3, #12]
  __HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE();
 800299c:	4b1e      	ldr	r3, [pc, #120]	; (8002a18 <HAL_PWR_ConfigPVD+0xbc>)
 800299e:	689a      	ldr	r2, [r3, #8]
 80029a0:	4b1d      	ldr	r3, [pc, #116]	; (8002a18 <HAL_PWR_ConfigPVD+0xbc>)
 80029a2:	491e      	ldr	r1, [pc, #120]	; (8002a1c <HAL_PWR_ConfigPVD+0xc0>)
 80029a4:	400a      	ands	r2, r1
 80029a6:	609a      	str	r2, [r3, #8]

  /* Configure interrupt mode */
  if((sConfigPVD->Mode & PVD_MODE_IT) == PVD_MODE_IT)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	685a      	ldr	r2, [r3, #4]
 80029ac:	2380      	movs	r3, #128	; 0x80
 80029ae:	025b      	lsls	r3, r3, #9
 80029b0:	4013      	ands	r3, r2
 80029b2:	d006      	beq.n	80029c2 <HAL_PWR_ConfigPVD+0x66>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_IT();
 80029b4:	4b18      	ldr	r3, [pc, #96]	; (8002a18 <HAL_PWR_ConfigPVD+0xbc>)
 80029b6:	681a      	ldr	r2, [r3, #0]
 80029b8:	4b17      	ldr	r3, [pc, #92]	; (8002a18 <HAL_PWR_ConfigPVD+0xbc>)
 80029ba:	2180      	movs	r1, #128	; 0x80
 80029bc:	0249      	lsls	r1, r1, #9
 80029be:	430a      	orrs	r2, r1
 80029c0:	601a      	str	r2, [r3, #0]
  }
  
  /* Configure event mode */
  if((sConfigPVD->Mode & PVD_MODE_EVT) == PVD_MODE_EVT)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	685a      	ldr	r2, [r3, #4]
 80029c6:	2380      	movs	r3, #128	; 0x80
 80029c8:	029b      	lsls	r3, r3, #10
 80029ca:	4013      	ands	r3, r2
 80029cc:	d006      	beq.n	80029dc <HAL_PWR_ConfigPVD+0x80>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_EVENT();
 80029ce:	4b12      	ldr	r3, [pc, #72]	; (8002a18 <HAL_PWR_ConfigPVD+0xbc>)
 80029d0:	685a      	ldr	r2, [r3, #4]
 80029d2:	4b11      	ldr	r3, [pc, #68]	; (8002a18 <HAL_PWR_ConfigPVD+0xbc>)
 80029d4:	2180      	movs	r1, #128	; 0x80
 80029d6:	0249      	lsls	r1, r1, #9
 80029d8:	430a      	orrs	r2, r1
 80029da:	605a      	str	r2, [r3, #4]
  }
  
  /* Configure the edge */
  if((sConfigPVD->Mode & PVD_RISING_EDGE) == PVD_RISING_EDGE)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	2201      	movs	r2, #1
 80029e2:	4013      	ands	r3, r2
 80029e4:	d006      	beq.n	80029f4 <HAL_PWR_ConfigPVD+0x98>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE();
 80029e6:	4b0c      	ldr	r3, [pc, #48]	; (8002a18 <HAL_PWR_ConfigPVD+0xbc>)
 80029e8:	689a      	ldr	r2, [r3, #8]
 80029ea:	4b0b      	ldr	r3, [pc, #44]	; (8002a18 <HAL_PWR_ConfigPVD+0xbc>)
 80029ec:	2180      	movs	r1, #128	; 0x80
 80029ee:	0249      	lsls	r1, r1, #9
 80029f0:	430a      	orrs	r2, r1
 80029f2:	609a      	str	r2, [r3, #8]
  }
  
  if((sConfigPVD->Mode & PVD_FALLING_EDGE) == PVD_FALLING_EDGE)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	2202      	movs	r2, #2
 80029fa:	4013      	ands	r3, r2
 80029fc:	d006      	beq.n	8002a0c <HAL_PWR_ConfigPVD+0xb0>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE();
 80029fe:	4b06      	ldr	r3, [pc, #24]	; (8002a18 <HAL_PWR_ConfigPVD+0xbc>)
 8002a00:	68da      	ldr	r2, [r3, #12]
 8002a02:	4b05      	ldr	r3, [pc, #20]	; (8002a18 <HAL_PWR_ConfigPVD+0xbc>)
 8002a04:	2180      	movs	r1, #128	; 0x80
 8002a06:	0249      	lsls	r1, r1, #9
 8002a08:	430a      	orrs	r2, r1
 8002a0a:	60da      	str	r2, [r3, #12]
  }
}
 8002a0c:	46c0      	nop			; (mov r8, r8)
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	b002      	add	sp, #8
 8002a12:	bd80      	pop	{r7, pc}
 8002a14:	40007000 	.word	0x40007000
 8002a18:	40010400 	.word	0x40010400
 8002a1c:	fffeffff 	.word	0xfffeffff

08002a20 <HAL_PWR_EnablePVD>:
/**
  * @brief Enables the Power Voltage Detector(PVD).
  * @retval None
  */
void HAL_PWR_EnablePVD(void)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	af00      	add	r7, sp, #0
  /* Enable the power voltage detector */
  SET_BIT(PWR->CR, PWR_CR_PVDE);
 8002a24:	4b04      	ldr	r3, [pc, #16]	; (8002a38 <HAL_PWR_EnablePVD+0x18>)
 8002a26:	681a      	ldr	r2, [r3, #0]
 8002a28:	4b03      	ldr	r3, [pc, #12]	; (8002a38 <HAL_PWR_EnablePVD+0x18>)
 8002a2a:	2110      	movs	r1, #16
 8002a2c:	430a      	orrs	r2, r1
 8002a2e:	601a      	str	r2, [r3, #0]
}
 8002a30:	46c0      	nop			; (mov r8, r8)
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd80      	pop	{r7, pc}
 8002a36:	46c0      	nop			; (mov r8, r8)
 8002a38:	40007000 	.word	0x40007000

08002a3c <HAL_PWR_PVD_IRQHandler>:
  * @brief This function handles the PWR PVD interrupt request.
  * @note This API should be called under the PVD_IRQHandler().
  * @retval None
  */
void HAL_PWR_PVD_IRQHandler(void)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	af00      	add	r7, sp, #0
  /* Check PWR exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
 8002a40:	4b07      	ldr	r3, [pc, #28]	; (8002a60 <HAL_PWR_PVD_IRQHandler+0x24>)
 8002a42:	695a      	ldr	r2, [r3, #20]
 8002a44:	2380      	movs	r3, #128	; 0x80
 8002a46:	025b      	lsls	r3, r3, #9
 8002a48:	4013      	ands	r3, r2
 8002a4a:	d005      	beq.n	8002a58 <HAL_PWR_PVD_IRQHandler+0x1c>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 8002a4c:	f7fe f942 	bl	8000cd4 <HAL_PWR_PVDCallback>

    /* Clear PWR Exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 8002a50:	4b03      	ldr	r3, [pc, #12]	; (8002a60 <HAL_PWR_PVD_IRQHandler+0x24>)
 8002a52:	2280      	movs	r2, #128	; 0x80
 8002a54:	0252      	lsls	r2, r2, #9
 8002a56:	615a      	str	r2, [r3, #20]
  }
}
 8002a58:	46c0      	nop			; (mov r8, r8)
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}
 8002a5e:	46c0      	nop			; (mov r8, r8)
 8002a60:	40010400 	.word	0x40010400

08002a64 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a64:	b5b0      	push	{r4, r5, r7, lr}
 8002a66:	b08a      	sub	sp, #40	; 0x28
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d102      	bne.n	8002a78 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002a72:	2301      	movs	r3, #1
 8002a74:	f000 fbbf 	bl	80031f6 <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a78:	4bc9      	ldr	r3, [pc, #804]	; (8002da0 <HAL_RCC_OscConfig+0x33c>)
 8002a7a:	68db      	ldr	r3, [r3, #12]
 8002a7c:	220c      	movs	r2, #12
 8002a7e:	4013      	ands	r3, r2
 8002a80:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002a82:	4bc7      	ldr	r3, [pc, #796]	; (8002da0 <HAL_RCC_OscConfig+0x33c>)
 8002a84:	68da      	ldr	r2, [r3, #12]
 8002a86:	2380      	movs	r3, #128	; 0x80
 8002a88:	025b      	lsls	r3, r3, #9
 8002a8a:	4013      	ands	r3, r2
 8002a8c:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	2201      	movs	r2, #1
 8002a94:	4013      	ands	r3, r2
 8002a96:	d100      	bne.n	8002a9a <HAL_RCC_OscConfig+0x36>
 8002a98:	e07e      	b.n	8002b98 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002a9a:	69fb      	ldr	r3, [r7, #28]
 8002a9c:	2b08      	cmp	r3, #8
 8002a9e:	d007      	beq.n	8002ab0 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002aa0:	69fb      	ldr	r3, [r7, #28]
 8002aa2:	2b0c      	cmp	r3, #12
 8002aa4:	d112      	bne.n	8002acc <HAL_RCC_OscConfig+0x68>
 8002aa6:	69ba      	ldr	r2, [r7, #24]
 8002aa8:	2380      	movs	r3, #128	; 0x80
 8002aaa:	025b      	lsls	r3, r3, #9
 8002aac:	429a      	cmp	r2, r3
 8002aae:	d10d      	bne.n	8002acc <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ab0:	4bbb      	ldr	r3, [pc, #748]	; (8002da0 <HAL_RCC_OscConfig+0x33c>)
 8002ab2:	681a      	ldr	r2, [r3, #0]
 8002ab4:	2380      	movs	r3, #128	; 0x80
 8002ab6:	029b      	lsls	r3, r3, #10
 8002ab8:	4013      	ands	r3, r2
 8002aba:	d100      	bne.n	8002abe <HAL_RCC_OscConfig+0x5a>
 8002abc:	e06b      	b.n	8002b96 <HAL_RCC_OscConfig+0x132>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d167      	bne.n	8002b96 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	f000 fb95 	bl	80031f6 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	685a      	ldr	r2, [r3, #4]
 8002ad0:	2380      	movs	r3, #128	; 0x80
 8002ad2:	025b      	lsls	r3, r3, #9
 8002ad4:	429a      	cmp	r2, r3
 8002ad6:	d107      	bne.n	8002ae8 <HAL_RCC_OscConfig+0x84>
 8002ad8:	4bb1      	ldr	r3, [pc, #708]	; (8002da0 <HAL_RCC_OscConfig+0x33c>)
 8002ada:	681a      	ldr	r2, [r3, #0]
 8002adc:	4bb0      	ldr	r3, [pc, #704]	; (8002da0 <HAL_RCC_OscConfig+0x33c>)
 8002ade:	2180      	movs	r1, #128	; 0x80
 8002ae0:	0249      	lsls	r1, r1, #9
 8002ae2:	430a      	orrs	r2, r1
 8002ae4:	601a      	str	r2, [r3, #0]
 8002ae6:	e027      	b.n	8002b38 <HAL_RCC_OscConfig+0xd4>
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	685a      	ldr	r2, [r3, #4]
 8002aec:	23a0      	movs	r3, #160	; 0xa0
 8002aee:	02db      	lsls	r3, r3, #11
 8002af0:	429a      	cmp	r2, r3
 8002af2:	d10e      	bne.n	8002b12 <HAL_RCC_OscConfig+0xae>
 8002af4:	4baa      	ldr	r3, [pc, #680]	; (8002da0 <HAL_RCC_OscConfig+0x33c>)
 8002af6:	681a      	ldr	r2, [r3, #0]
 8002af8:	4ba9      	ldr	r3, [pc, #676]	; (8002da0 <HAL_RCC_OscConfig+0x33c>)
 8002afa:	2180      	movs	r1, #128	; 0x80
 8002afc:	02c9      	lsls	r1, r1, #11
 8002afe:	430a      	orrs	r2, r1
 8002b00:	601a      	str	r2, [r3, #0]
 8002b02:	4ba7      	ldr	r3, [pc, #668]	; (8002da0 <HAL_RCC_OscConfig+0x33c>)
 8002b04:	681a      	ldr	r2, [r3, #0]
 8002b06:	4ba6      	ldr	r3, [pc, #664]	; (8002da0 <HAL_RCC_OscConfig+0x33c>)
 8002b08:	2180      	movs	r1, #128	; 0x80
 8002b0a:	0249      	lsls	r1, r1, #9
 8002b0c:	430a      	orrs	r2, r1
 8002b0e:	601a      	str	r2, [r3, #0]
 8002b10:	e012      	b.n	8002b38 <HAL_RCC_OscConfig+0xd4>
 8002b12:	4ba3      	ldr	r3, [pc, #652]	; (8002da0 <HAL_RCC_OscConfig+0x33c>)
 8002b14:	681a      	ldr	r2, [r3, #0]
 8002b16:	4ba2      	ldr	r3, [pc, #648]	; (8002da0 <HAL_RCC_OscConfig+0x33c>)
 8002b18:	49a2      	ldr	r1, [pc, #648]	; (8002da4 <HAL_RCC_OscConfig+0x340>)
 8002b1a:	400a      	ands	r2, r1
 8002b1c:	601a      	str	r2, [r3, #0]
 8002b1e:	4ba0      	ldr	r3, [pc, #640]	; (8002da0 <HAL_RCC_OscConfig+0x33c>)
 8002b20:	681a      	ldr	r2, [r3, #0]
 8002b22:	2380      	movs	r3, #128	; 0x80
 8002b24:	025b      	lsls	r3, r3, #9
 8002b26:	4013      	ands	r3, r2
 8002b28:	60fb      	str	r3, [r7, #12]
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	4b9c      	ldr	r3, [pc, #624]	; (8002da0 <HAL_RCC_OscConfig+0x33c>)
 8002b2e:	681a      	ldr	r2, [r3, #0]
 8002b30:	4b9b      	ldr	r3, [pc, #620]	; (8002da0 <HAL_RCC_OscConfig+0x33c>)
 8002b32:	499d      	ldr	r1, [pc, #628]	; (8002da8 <HAL_RCC_OscConfig+0x344>)
 8002b34:	400a      	ands	r2, r1
 8002b36:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d015      	beq.n	8002b6c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b40:	f7ff f9a4 	bl	8001e8c <HAL_GetTick>
 8002b44:	0003      	movs	r3, r0
 8002b46:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002b48:	e009      	b.n	8002b5e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b4a:	f7ff f99f 	bl	8001e8c <HAL_GetTick>
 8002b4e:	0002      	movs	r2, r0
 8002b50:	697b      	ldr	r3, [r7, #20]
 8002b52:	1ad3      	subs	r3, r2, r3
 8002b54:	2b64      	cmp	r3, #100	; 0x64
 8002b56:	d902      	bls.n	8002b5e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002b58:	2303      	movs	r3, #3
 8002b5a:	f000 fb4c 	bl	80031f6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002b5e:	4b90      	ldr	r3, [pc, #576]	; (8002da0 <HAL_RCC_OscConfig+0x33c>)
 8002b60:	681a      	ldr	r2, [r3, #0]
 8002b62:	2380      	movs	r3, #128	; 0x80
 8002b64:	029b      	lsls	r3, r3, #10
 8002b66:	4013      	ands	r3, r2
 8002b68:	d0ef      	beq.n	8002b4a <HAL_RCC_OscConfig+0xe6>
 8002b6a:	e015      	b.n	8002b98 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b6c:	f7ff f98e 	bl	8001e8c <HAL_GetTick>
 8002b70:	0003      	movs	r3, r0
 8002b72:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002b74:	e008      	b.n	8002b88 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002b76:	f7ff f989 	bl	8001e8c <HAL_GetTick>
 8002b7a:	0002      	movs	r2, r0
 8002b7c:	697b      	ldr	r3, [r7, #20]
 8002b7e:	1ad3      	subs	r3, r2, r3
 8002b80:	2b64      	cmp	r3, #100	; 0x64
 8002b82:	d901      	bls.n	8002b88 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8002b84:	2303      	movs	r3, #3
 8002b86:	e336      	b.n	80031f6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002b88:	4b85      	ldr	r3, [pc, #532]	; (8002da0 <HAL_RCC_OscConfig+0x33c>)
 8002b8a:	681a      	ldr	r2, [r3, #0]
 8002b8c:	2380      	movs	r3, #128	; 0x80
 8002b8e:	029b      	lsls	r3, r3, #10
 8002b90:	4013      	ands	r3, r2
 8002b92:	d1f0      	bne.n	8002b76 <HAL_RCC_OscConfig+0x112>
 8002b94:	e000      	b.n	8002b98 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b96:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	2202      	movs	r2, #2
 8002b9e:	4013      	ands	r3, r2
 8002ba0:	d100      	bne.n	8002ba4 <HAL_RCC_OscConfig+0x140>
 8002ba2:	e099      	b.n	8002cd8 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	68db      	ldr	r3, [r3, #12]
 8002ba8:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8002baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bac:	2220      	movs	r2, #32
 8002bae:	4013      	ands	r3, r2
 8002bb0:	d009      	beq.n	8002bc6 <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8002bb2:	4b7b      	ldr	r3, [pc, #492]	; (8002da0 <HAL_RCC_OscConfig+0x33c>)
 8002bb4:	681a      	ldr	r2, [r3, #0]
 8002bb6:	4b7a      	ldr	r3, [pc, #488]	; (8002da0 <HAL_RCC_OscConfig+0x33c>)
 8002bb8:	2120      	movs	r1, #32
 8002bba:	430a      	orrs	r2, r1
 8002bbc:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8002bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bc0:	2220      	movs	r2, #32
 8002bc2:	4393      	bics	r3, r2
 8002bc4:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002bc6:	69fb      	ldr	r3, [r7, #28]
 8002bc8:	2b04      	cmp	r3, #4
 8002bca:	d005      	beq.n	8002bd8 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002bcc:	69fb      	ldr	r3, [r7, #28]
 8002bce:	2b0c      	cmp	r3, #12
 8002bd0:	d13e      	bne.n	8002c50 <HAL_RCC_OscConfig+0x1ec>
 8002bd2:	69bb      	ldr	r3, [r7, #24]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d13b      	bne.n	8002c50 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8002bd8:	4b71      	ldr	r3, [pc, #452]	; (8002da0 <HAL_RCC_OscConfig+0x33c>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	2204      	movs	r2, #4
 8002bde:	4013      	ands	r3, r2
 8002be0:	d004      	beq.n	8002bec <HAL_RCC_OscConfig+0x188>
 8002be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d101      	bne.n	8002bec <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8002be8:	2301      	movs	r3, #1
 8002bea:	e304      	b.n	80031f6 <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bec:	4b6c      	ldr	r3, [pc, #432]	; (8002da0 <HAL_RCC_OscConfig+0x33c>)
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	4a6e      	ldr	r2, [pc, #440]	; (8002dac <HAL_RCC_OscConfig+0x348>)
 8002bf2:	4013      	ands	r3, r2
 8002bf4:	0019      	movs	r1, r3
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	691b      	ldr	r3, [r3, #16]
 8002bfa:	021a      	lsls	r2, r3, #8
 8002bfc:	4b68      	ldr	r3, [pc, #416]	; (8002da0 <HAL_RCC_OscConfig+0x33c>)
 8002bfe:	430a      	orrs	r2, r1
 8002c00:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002c02:	4b67      	ldr	r3, [pc, #412]	; (8002da0 <HAL_RCC_OscConfig+0x33c>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	2209      	movs	r2, #9
 8002c08:	4393      	bics	r3, r2
 8002c0a:	0019      	movs	r1, r3
 8002c0c:	4b64      	ldr	r3, [pc, #400]	; (8002da0 <HAL_RCC_OscConfig+0x33c>)
 8002c0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c10:	430a      	orrs	r2, r1
 8002c12:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002c14:	f000 fc42 	bl	800349c <HAL_RCC_GetSysClockFreq>
 8002c18:	0001      	movs	r1, r0
 8002c1a:	4b61      	ldr	r3, [pc, #388]	; (8002da0 <HAL_RCC_OscConfig+0x33c>)
 8002c1c:	68db      	ldr	r3, [r3, #12]
 8002c1e:	091b      	lsrs	r3, r3, #4
 8002c20:	220f      	movs	r2, #15
 8002c22:	4013      	ands	r3, r2
 8002c24:	4a62      	ldr	r2, [pc, #392]	; (8002db0 <HAL_RCC_OscConfig+0x34c>)
 8002c26:	5cd3      	ldrb	r3, [r2, r3]
 8002c28:	000a      	movs	r2, r1
 8002c2a:	40da      	lsrs	r2, r3
 8002c2c:	4b61      	ldr	r3, [pc, #388]	; (8002db4 <HAL_RCC_OscConfig+0x350>)
 8002c2e:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8002c30:	4b61      	ldr	r3, [pc, #388]	; (8002db8 <HAL_RCC_OscConfig+0x354>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	2513      	movs	r5, #19
 8002c36:	197c      	adds	r4, r7, r5
 8002c38:	0018      	movs	r0, r3
 8002c3a:	f7ff f8e1 	bl	8001e00 <HAL_InitTick>
 8002c3e:	0003      	movs	r3, r0
 8002c40:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8002c42:	197b      	adds	r3, r7, r5
 8002c44:	781b      	ldrb	r3, [r3, #0]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d046      	beq.n	8002cd8 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 8002c4a:	197b      	adds	r3, r7, r5
 8002c4c:	781b      	ldrb	r3, [r3, #0]
 8002c4e:	e2d2      	b.n	80031f6 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8002c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d027      	beq.n	8002ca6 <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002c56:	4b52      	ldr	r3, [pc, #328]	; (8002da0 <HAL_RCC_OscConfig+0x33c>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	2209      	movs	r2, #9
 8002c5c:	4393      	bics	r3, r2
 8002c5e:	0019      	movs	r1, r3
 8002c60:	4b4f      	ldr	r3, [pc, #316]	; (8002da0 <HAL_RCC_OscConfig+0x33c>)
 8002c62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c64:	430a      	orrs	r2, r1
 8002c66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c68:	f7ff f910 	bl	8001e8c <HAL_GetTick>
 8002c6c:	0003      	movs	r3, r0
 8002c6e:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002c70:	e008      	b.n	8002c84 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c72:	f7ff f90b 	bl	8001e8c <HAL_GetTick>
 8002c76:	0002      	movs	r2, r0
 8002c78:	697b      	ldr	r3, [r7, #20]
 8002c7a:	1ad3      	subs	r3, r2, r3
 8002c7c:	2b02      	cmp	r3, #2
 8002c7e:	d901      	bls.n	8002c84 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 8002c80:	2303      	movs	r3, #3
 8002c82:	e2b8      	b.n	80031f6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002c84:	4b46      	ldr	r3, [pc, #280]	; (8002da0 <HAL_RCC_OscConfig+0x33c>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	2204      	movs	r2, #4
 8002c8a:	4013      	ands	r3, r2
 8002c8c:	d0f1      	beq.n	8002c72 <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c8e:	4b44      	ldr	r3, [pc, #272]	; (8002da0 <HAL_RCC_OscConfig+0x33c>)
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	4a46      	ldr	r2, [pc, #280]	; (8002dac <HAL_RCC_OscConfig+0x348>)
 8002c94:	4013      	ands	r3, r2
 8002c96:	0019      	movs	r1, r3
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	691b      	ldr	r3, [r3, #16]
 8002c9c:	021a      	lsls	r2, r3, #8
 8002c9e:	4b40      	ldr	r3, [pc, #256]	; (8002da0 <HAL_RCC_OscConfig+0x33c>)
 8002ca0:	430a      	orrs	r2, r1
 8002ca2:	605a      	str	r2, [r3, #4]
 8002ca4:	e018      	b.n	8002cd8 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ca6:	4b3e      	ldr	r3, [pc, #248]	; (8002da0 <HAL_RCC_OscConfig+0x33c>)
 8002ca8:	681a      	ldr	r2, [r3, #0]
 8002caa:	4b3d      	ldr	r3, [pc, #244]	; (8002da0 <HAL_RCC_OscConfig+0x33c>)
 8002cac:	2101      	movs	r1, #1
 8002cae:	438a      	bics	r2, r1
 8002cb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cb2:	f7ff f8eb 	bl	8001e8c <HAL_GetTick>
 8002cb6:	0003      	movs	r3, r0
 8002cb8:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002cba:	e008      	b.n	8002cce <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002cbc:	f7ff f8e6 	bl	8001e8c <HAL_GetTick>
 8002cc0:	0002      	movs	r2, r0
 8002cc2:	697b      	ldr	r3, [r7, #20]
 8002cc4:	1ad3      	subs	r3, r2, r3
 8002cc6:	2b02      	cmp	r3, #2
 8002cc8:	d901      	bls.n	8002cce <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 8002cca:	2303      	movs	r3, #3
 8002ccc:	e293      	b.n	80031f6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002cce:	4b34      	ldr	r3, [pc, #208]	; (8002da0 <HAL_RCC_OscConfig+0x33c>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	2204      	movs	r2, #4
 8002cd4:	4013      	ands	r3, r2
 8002cd6:	d1f1      	bne.n	8002cbc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	2210      	movs	r2, #16
 8002cde:	4013      	ands	r3, r2
 8002ce0:	d100      	bne.n	8002ce4 <HAL_RCC_OscConfig+0x280>
 8002ce2:	e0a2      	b.n	8002e2a <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002ce4:	69fb      	ldr	r3, [r7, #28]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d140      	bne.n	8002d6c <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002cea:	4b2d      	ldr	r3, [pc, #180]	; (8002da0 <HAL_RCC_OscConfig+0x33c>)
 8002cec:	681a      	ldr	r2, [r3, #0]
 8002cee:	2380      	movs	r3, #128	; 0x80
 8002cf0:	009b      	lsls	r3, r3, #2
 8002cf2:	4013      	ands	r3, r2
 8002cf4:	d005      	beq.n	8002d02 <HAL_RCC_OscConfig+0x29e>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	69db      	ldr	r3, [r3, #28]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d101      	bne.n	8002d02 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	e279      	b.n	80031f6 <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002d02:	4b27      	ldr	r3, [pc, #156]	; (8002da0 <HAL_RCC_OscConfig+0x33c>)
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	4a2d      	ldr	r2, [pc, #180]	; (8002dbc <HAL_RCC_OscConfig+0x358>)
 8002d08:	4013      	ands	r3, r2
 8002d0a:	0019      	movs	r1, r3
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002d10:	4b23      	ldr	r3, [pc, #140]	; (8002da0 <HAL_RCC_OscConfig+0x33c>)
 8002d12:	430a      	orrs	r2, r1
 8002d14:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002d16:	4b22      	ldr	r3, [pc, #136]	; (8002da0 <HAL_RCC_OscConfig+0x33c>)
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	021b      	lsls	r3, r3, #8
 8002d1c:	0a19      	lsrs	r1, r3, #8
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6a1b      	ldr	r3, [r3, #32]
 8002d22:	061a      	lsls	r2, r3, #24
 8002d24:	4b1e      	ldr	r3, [pc, #120]	; (8002da0 <HAL_RCC_OscConfig+0x33c>)
 8002d26:	430a      	orrs	r2, r1
 8002d28:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d2e:	0b5b      	lsrs	r3, r3, #13
 8002d30:	3301      	adds	r3, #1
 8002d32:	2280      	movs	r2, #128	; 0x80
 8002d34:	0212      	lsls	r2, r2, #8
 8002d36:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002d38:	4b19      	ldr	r3, [pc, #100]	; (8002da0 <HAL_RCC_OscConfig+0x33c>)
 8002d3a:	68db      	ldr	r3, [r3, #12]
 8002d3c:	091b      	lsrs	r3, r3, #4
 8002d3e:	210f      	movs	r1, #15
 8002d40:	400b      	ands	r3, r1
 8002d42:	491b      	ldr	r1, [pc, #108]	; (8002db0 <HAL_RCC_OscConfig+0x34c>)
 8002d44:	5ccb      	ldrb	r3, [r1, r3]
 8002d46:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002d48:	4b1a      	ldr	r3, [pc, #104]	; (8002db4 <HAL_RCC_OscConfig+0x350>)
 8002d4a:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8002d4c:	4b1a      	ldr	r3, [pc, #104]	; (8002db8 <HAL_RCC_OscConfig+0x354>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	2513      	movs	r5, #19
 8002d52:	197c      	adds	r4, r7, r5
 8002d54:	0018      	movs	r0, r3
 8002d56:	f7ff f853 	bl	8001e00 <HAL_InitTick>
 8002d5a:	0003      	movs	r3, r0
 8002d5c:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8002d5e:	197b      	adds	r3, r7, r5
 8002d60:	781b      	ldrb	r3, [r3, #0]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d061      	beq.n	8002e2a <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 8002d66:	197b      	adds	r3, r7, r5
 8002d68:	781b      	ldrb	r3, [r3, #0]
 8002d6a:	e244      	b.n	80031f6 <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	69db      	ldr	r3, [r3, #28]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d040      	beq.n	8002df6 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002d74:	4b0a      	ldr	r3, [pc, #40]	; (8002da0 <HAL_RCC_OscConfig+0x33c>)
 8002d76:	681a      	ldr	r2, [r3, #0]
 8002d78:	4b09      	ldr	r3, [pc, #36]	; (8002da0 <HAL_RCC_OscConfig+0x33c>)
 8002d7a:	2180      	movs	r1, #128	; 0x80
 8002d7c:	0049      	lsls	r1, r1, #1
 8002d7e:	430a      	orrs	r2, r1
 8002d80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d82:	f7ff f883 	bl	8001e8c <HAL_GetTick>
 8002d86:	0003      	movs	r3, r0
 8002d88:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002d8a:	e019      	b.n	8002dc0 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002d8c:	f7ff f87e 	bl	8001e8c <HAL_GetTick>
 8002d90:	0002      	movs	r2, r0
 8002d92:	697b      	ldr	r3, [r7, #20]
 8002d94:	1ad3      	subs	r3, r2, r3
 8002d96:	2b02      	cmp	r3, #2
 8002d98:	d912      	bls.n	8002dc0 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 8002d9a:	2303      	movs	r3, #3
 8002d9c:	e22b      	b.n	80031f6 <HAL_RCC_OscConfig+0x792>
 8002d9e:	46c0      	nop			; (mov r8, r8)
 8002da0:	40021000 	.word	0x40021000
 8002da4:	fffeffff 	.word	0xfffeffff
 8002da8:	fffbffff 	.word	0xfffbffff
 8002dac:	ffffe0ff 	.word	0xffffe0ff
 8002db0:	080067b4 	.word	0x080067b4
 8002db4:	20000190 	.word	0x20000190
 8002db8:	20000194 	.word	0x20000194
 8002dbc:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002dc0:	4bca      	ldr	r3, [pc, #808]	; (80030ec <HAL_RCC_OscConfig+0x688>)
 8002dc2:	681a      	ldr	r2, [r3, #0]
 8002dc4:	2380      	movs	r3, #128	; 0x80
 8002dc6:	009b      	lsls	r3, r3, #2
 8002dc8:	4013      	ands	r3, r2
 8002dca:	d0df      	beq.n	8002d8c <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002dcc:	4bc7      	ldr	r3, [pc, #796]	; (80030ec <HAL_RCC_OscConfig+0x688>)
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	4ac7      	ldr	r2, [pc, #796]	; (80030f0 <HAL_RCC_OscConfig+0x68c>)
 8002dd2:	4013      	ands	r3, r2
 8002dd4:	0019      	movs	r1, r3
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002dda:	4bc4      	ldr	r3, [pc, #784]	; (80030ec <HAL_RCC_OscConfig+0x688>)
 8002ddc:	430a      	orrs	r2, r1
 8002dde:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002de0:	4bc2      	ldr	r3, [pc, #776]	; (80030ec <HAL_RCC_OscConfig+0x688>)
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	021b      	lsls	r3, r3, #8
 8002de6:	0a19      	lsrs	r1, r3, #8
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6a1b      	ldr	r3, [r3, #32]
 8002dec:	061a      	lsls	r2, r3, #24
 8002dee:	4bbf      	ldr	r3, [pc, #764]	; (80030ec <HAL_RCC_OscConfig+0x688>)
 8002df0:	430a      	orrs	r2, r1
 8002df2:	605a      	str	r2, [r3, #4]
 8002df4:	e019      	b.n	8002e2a <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002df6:	4bbd      	ldr	r3, [pc, #756]	; (80030ec <HAL_RCC_OscConfig+0x688>)
 8002df8:	681a      	ldr	r2, [r3, #0]
 8002dfa:	4bbc      	ldr	r3, [pc, #752]	; (80030ec <HAL_RCC_OscConfig+0x688>)
 8002dfc:	49bd      	ldr	r1, [pc, #756]	; (80030f4 <HAL_RCC_OscConfig+0x690>)
 8002dfe:	400a      	ands	r2, r1
 8002e00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e02:	f7ff f843 	bl	8001e8c <HAL_GetTick>
 8002e06:	0003      	movs	r3, r0
 8002e08:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002e0a:	e008      	b.n	8002e1e <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002e0c:	f7ff f83e 	bl	8001e8c <HAL_GetTick>
 8002e10:	0002      	movs	r2, r0
 8002e12:	697b      	ldr	r3, [r7, #20]
 8002e14:	1ad3      	subs	r3, r2, r3
 8002e16:	2b02      	cmp	r3, #2
 8002e18:	d901      	bls.n	8002e1e <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 8002e1a:	2303      	movs	r3, #3
 8002e1c:	e1eb      	b.n	80031f6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002e1e:	4bb3      	ldr	r3, [pc, #716]	; (80030ec <HAL_RCC_OscConfig+0x688>)
 8002e20:	681a      	ldr	r2, [r3, #0]
 8002e22:	2380      	movs	r3, #128	; 0x80
 8002e24:	009b      	lsls	r3, r3, #2
 8002e26:	4013      	ands	r3, r2
 8002e28:	d1f0      	bne.n	8002e0c <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	2208      	movs	r2, #8
 8002e30:	4013      	ands	r3, r2
 8002e32:	d036      	beq.n	8002ea2 <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	695b      	ldr	r3, [r3, #20]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d019      	beq.n	8002e70 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e3c:	4bab      	ldr	r3, [pc, #684]	; (80030ec <HAL_RCC_OscConfig+0x688>)
 8002e3e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002e40:	4baa      	ldr	r3, [pc, #680]	; (80030ec <HAL_RCC_OscConfig+0x688>)
 8002e42:	2101      	movs	r1, #1
 8002e44:	430a      	orrs	r2, r1
 8002e46:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e48:	f7ff f820 	bl	8001e8c <HAL_GetTick>
 8002e4c:	0003      	movs	r3, r0
 8002e4e:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002e50:	e008      	b.n	8002e64 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e52:	f7ff f81b 	bl	8001e8c <HAL_GetTick>
 8002e56:	0002      	movs	r2, r0
 8002e58:	697b      	ldr	r3, [r7, #20]
 8002e5a:	1ad3      	subs	r3, r2, r3
 8002e5c:	2b02      	cmp	r3, #2
 8002e5e:	d901      	bls.n	8002e64 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 8002e60:	2303      	movs	r3, #3
 8002e62:	e1c8      	b.n	80031f6 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002e64:	4ba1      	ldr	r3, [pc, #644]	; (80030ec <HAL_RCC_OscConfig+0x688>)
 8002e66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e68:	2202      	movs	r2, #2
 8002e6a:	4013      	ands	r3, r2
 8002e6c:	d0f1      	beq.n	8002e52 <HAL_RCC_OscConfig+0x3ee>
 8002e6e:	e018      	b.n	8002ea2 <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e70:	4b9e      	ldr	r3, [pc, #632]	; (80030ec <HAL_RCC_OscConfig+0x688>)
 8002e72:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002e74:	4b9d      	ldr	r3, [pc, #628]	; (80030ec <HAL_RCC_OscConfig+0x688>)
 8002e76:	2101      	movs	r1, #1
 8002e78:	438a      	bics	r2, r1
 8002e7a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e7c:	f7ff f806 	bl	8001e8c <HAL_GetTick>
 8002e80:	0003      	movs	r3, r0
 8002e82:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002e84:	e008      	b.n	8002e98 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e86:	f7ff f801 	bl	8001e8c <HAL_GetTick>
 8002e8a:	0002      	movs	r2, r0
 8002e8c:	697b      	ldr	r3, [r7, #20]
 8002e8e:	1ad3      	subs	r3, r2, r3
 8002e90:	2b02      	cmp	r3, #2
 8002e92:	d901      	bls.n	8002e98 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8002e94:	2303      	movs	r3, #3
 8002e96:	e1ae      	b.n	80031f6 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002e98:	4b94      	ldr	r3, [pc, #592]	; (80030ec <HAL_RCC_OscConfig+0x688>)
 8002e9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e9c:	2202      	movs	r2, #2
 8002e9e:	4013      	ands	r3, r2
 8002ea0:	d1f1      	bne.n	8002e86 <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	2204      	movs	r2, #4
 8002ea8:	4013      	ands	r3, r2
 8002eaa:	d100      	bne.n	8002eae <HAL_RCC_OscConfig+0x44a>
 8002eac:	e0ae      	b.n	800300c <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002eae:	2023      	movs	r0, #35	; 0x23
 8002eb0:	183b      	adds	r3, r7, r0
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002eb6:	4b8d      	ldr	r3, [pc, #564]	; (80030ec <HAL_RCC_OscConfig+0x688>)
 8002eb8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002eba:	2380      	movs	r3, #128	; 0x80
 8002ebc:	055b      	lsls	r3, r3, #21
 8002ebe:	4013      	ands	r3, r2
 8002ec0:	d109      	bne.n	8002ed6 <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ec2:	4b8a      	ldr	r3, [pc, #552]	; (80030ec <HAL_RCC_OscConfig+0x688>)
 8002ec4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ec6:	4b89      	ldr	r3, [pc, #548]	; (80030ec <HAL_RCC_OscConfig+0x688>)
 8002ec8:	2180      	movs	r1, #128	; 0x80
 8002eca:	0549      	lsls	r1, r1, #21
 8002ecc:	430a      	orrs	r2, r1
 8002ece:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8002ed0:	183b      	adds	r3, r7, r0
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ed6:	4b88      	ldr	r3, [pc, #544]	; (80030f8 <HAL_RCC_OscConfig+0x694>)
 8002ed8:	681a      	ldr	r2, [r3, #0]
 8002eda:	2380      	movs	r3, #128	; 0x80
 8002edc:	005b      	lsls	r3, r3, #1
 8002ede:	4013      	ands	r3, r2
 8002ee0:	d11a      	bne.n	8002f18 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ee2:	4b85      	ldr	r3, [pc, #532]	; (80030f8 <HAL_RCC_OscConfig+0x694>)
 8002ee4:	681a      	ldr	r2, [r3, #0]
 8002ee6:	4b84      	ldr	r3, [pc, #528]	; (80030f8 <HAL_RCC_OscConfig+0x694>)
 8002ee8:	2180      	movs	r1, #128	; 0x80
 8002eea:	0049      	lsls	r1, r1, #1
 8002eec:	430a      	orrs	r2, r1
 8002eee:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ef0:	f7fe ffcc 	bl	8001e8c <HAL_GetTick>
 8002ef4:	0003      	movs	r3, r0
 8002ef6:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ef8:	e008      	b.n	8002f0c <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002efa:	f7fe ffc7 	bl	8001e8c <HAL_GetTick>
 8002efe:	0002      	movs	r2, r0
 8002f00:	697b      	ldr	r3, [r7, #20]
 8002f02:	1ad3      	subs	r3, r2, r3
 8002f04:	2b64      	cmp	r3, #100	; 0x64
 8002f06:	d901      	bls.n	8002f0c <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 8002f08:	2303      	movs	r3, #3
 8002f0a:	e174      	b.n	80031f6 <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f0c:	4b7a      	ldr	r3, [pc, #488]	; (80030f8 <HAL_RCC_OscConfig+0x694>)
 8002f0e:	681a      	ldr	r2, [r3, #0]
 8002f10:	2380      	movs	r3, #128	; 0x80
 8002f12:	005b      	lsls	r3, r3, #1
 8002f14:	4013      	ands	r3, r2
 8002f16:	d0f0      	beq.n	8002efa <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	689a      	ldr	r2, [r3, #8]
 8002f1c:	2380      	movs	r3, #128	; 0x80
 8002f1e:	005b      	lsls	r3, r3, #1
 8002f20:	429a      	cmp	r2, r3
 8002f22:	d107      	bne.n	8002f34 <HAL_RCC_OscConfig+0x4d0>
 8002f24:	4b71      	ldr	r3, [pc, #452]	; (80030ec <HAL_RCC_OscConfig+0x688>)
 8002f26:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002f28:	4b70      	ldr	r3, [pc, #448]	; (80030ec <HAL_RCC_OscConfig+0x688>)
 8002f2a:	2180      	movs	r1, #128	; 0x80
 8002f2c:	0049      	lsls	r1, r1, #1
 8002f2e:	430a      	orrs	r2, r1
 8002f30:	651a      	str	r2, [r3, #80]	; 0x50
 8002f32:	e031      	b.n	8002f98 <HAL_RCC_OscConfig+0x534>
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	689b      	ldr	r3, [r3, #8]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d10c      	bne.n	8002f56 <HAL_RCC_OscConfig+0x4f2>
 8002f3c:	4b6b      	ldr	r3, [pc, #428]	; (80030ec <HAL_RCC_OscConfig+0x688>)
 8002f3e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002f40:	4b6a      	ldr	r3, [pc, #424]	; (80030ec <HAL_RCC_OscConfig+0x688>)
 8002f42:	496c      	ldr	r1, [pc, #432]	; (80030f4 <HAL_RCC_OscConfig+0x690>)
 8002f44:	400a      	ands	r2, r1
 8002f46:	651a      	str	r2, [r3, #80]	; 0x50
 8002f48:	4b68      	ldr	r3, [pc, #416]	; (80030ec <HAL_RCC_OscConfig+0x688>)
 8002f4a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002f4c:	4b67      	ldr	r3, [pc, #412]	; (80030ec <HAL_RCC_OscConfig+0x688>)
 8002f4e:	496b      	ldr	r1, [pc, #428]	; (80030fc <HAL_RCC_OscConfig+0x698>)
 8002f50:	400a      	ands	r2, r1
 8002f52:	651a      	str	r2, [r3, #80]	; 0x50
 8002f54:	e020      	b.n	8002f98 <HAL_RCC_OscConfig+0x534>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	689a      	ldr	r2, [r3, #8]
 8002f5a:	23a0      	movs	r3, #160	; 0xa0
 8002f5c:	00db      	lsls	r3, r3, #3
 8002f5e:	429a      	cmp	r2, r3
 8002f60:	d10e      	bne.n	8002f80 <HAL_RCC_OscConfig+0x51c>
 8002f62:	4b62      	ldr	r3, [pc, #392]	; (80030ec <HAL_RCC_OscConfig+0x688>)
 8002f64:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002f66:	4b61      	ldr	r3, [pc, #388]	; (80030ec <HAL_RCC_OscConfig+0x688>)
 8002f68:	2180      	movs	r1, #128	; 0x80
 8002f6a:	00c9      	lsls	r1, r1, #3
 8002f6c:	430a      	orrs	r2, r1
 8002f6e:	651a      	str	r2, [r3, #80]	; 0x50
 8002f70:	4b5e      	ldr	r3, [pc, #376]	; (80030ec <HAL_RCC_OscConfig+0x688>)
 8002f72:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002f74:	4b5d      	ldr	r3, [pc, #372]	; (80030ec <HAL_RCC_OscConfig+0x688>)
 8002f76:	2180      	movs	r1, #128	; 0x80
 8002f78:	0049      	lsls	r1, r1, #1
 8002f7a:	430a      	orrs	r2, r1
 8002f7c:	651a      	str	r2, [r3, #80]	; 0x50
 8002f7e:	e00b      	b.n	8002f98 <HAL_RCC_OscConfig+0x534>
 8002f80:	4b5a      	ldr	r3, [pc, #360]	; (80030ec <HAL_RCC_OscConfig+0x688>)
 8002f82:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002f84:	4b59      	ldr	r3, [pc, #356]	; (80030ec <HAL_RCC_OscConfig+0x688>)
 8002f86:	495b      	ldr	r1, [pc, #364]	; (80030f4 <HAL_RCC_OscConfig+0x690>)
 8002f88:	400a      	ands	r2, r1
 8002f8a:	651a      	str	r2, [r3, #80]	; 0x50
 8002f8c:	4b57      	ldr	r3, [pc, #348]	; (80030ec <HAL_RCC_OscConfig+0x688>)
 8002f8e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002f90:	4b56      	ldr	r3, [pc, #344]	; (80030ec <HAL_RCC_OscConfig+0x688>)
 8002f92:	495a      	ldr	r1, [pc, #360]	; (80030fc <HAL_RCC_OscConfig+0x698>)
 8002f94:	400a      	ands	r2, r1
 8002f96:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	689b      	ldr	r3, [r3, #8]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d015      	beq.n	8002fcc <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fa0:	f7fe ff74 	bl	8001e8c <HAL_GetTick>
 8002fa4:	0003      	movs	r3, r0
 8002fa6:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002fa8:	e009      	b.n	8002fbe <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002faa:	f7fe ff6f 	bl	8001e8c <HAL_GetTick>
 8002fae:	0002      	movs	r2, r0
 8002fb0:	697b      	ldr	r3, [r7, #20]
 8002fb2:	1ad3      	subs	r3, r2, r3
 8002fb4:	4a52      	ldr	r2, [pc, #328]	; (8003100 <HAL_RCC_OscConfig+0x69c>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d901      	bls.n	8002fbe <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 8002fba:	2303      	movs	r3, #3
 8002fbc:	e11b      	b.n	80031f6 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002fbe:	4b4b      	ldr	r3, [pc, #300]	; (80030ec <HAL_RCC_OscConfig+0x688>)
 8002fc0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002fc2:	2380      	movs	r3, #128	; 0x80
 8002fc4:	009b      	lsls	r3, r3, #2
 8002fc6:	4013      	ands	r3, r2
 8002fc8:	d0ef      	beq.n	8002faa <HAL_RCC_OscConfig+0x546>
 8002fca:	e014      	b.n	8002ff6 <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fcc:	f7fe ff5e 	bl	8001e8c <HAL_GetTick>
 8002fd0:	0003      	movs	r3, r0
 8002fd2:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002fd4:	e009      	b.n	8002fea <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002fd6:	f7fe ff59 	bl	8001e8c <HAL_GetTick>
 8002fda:	0002      	movs	r2, r0
 8002fdc:	697b      	ldr	r3, [r7, #20]
 8002fde:	1ad3      	subs	r3, r2, r3
 8002fe0:	4a47      	ldr	r2, [pc, #284]	; (8003100 <HAL_RCC_OscConfig+0x69c>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d901      	bls.n	8002fea <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 8002fe6:	2303      	movs	r3, #3
 8002fe8:	e105      	b.n	80031f6 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002fea:	4b40      	ldr	r3, [pc, #256]	; (80030ec <HAL_RCC_OscConfig+0x688>)
 8002fec:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002fee:	2380      	movs	r3, #128	; 0x80
 8002ff0:	009b      	lsls	r3, r3, #2
 8002ff2:	4013      	ands	r3, r2
 8002ff4:	d1ef      	bne.n	8002fd6 <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002ff6:	2323      	movs	r3, #35	; 0x23
 8002ff8:	18fb      	adds	r3, r7, r3
 8002ffa:	781b      	ldrb	r3, [r3, #0]
 8002ffc:	2b01      	cmp	r3, #1
 8002ffe:	d105      	bne.n	800300c <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003000:	4b3a      	ldr	r3, [pc, #232]	; (80030ec <HAL_RCC_OscConfig+0x688>)
 8003002:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003004:	4b39      	ldr	r3, [pc, #228]	; (80030ec <HAL_RCC_OscConfig+0x688>)
 8003006:	493f      	ldr	r1, [pc, #252]	; (8003104 <HAL_RCC_OscConfig+0x6a0>)
 8003008:	400a      	ands	r2, r1
 800300a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	2220      	movs	r2, #32
 8003012:	4013      	ands	r3, r2
 8003014:	d049      	beq.n	80030aa <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	699b      	ldr	r3, [r3, #24]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d026      	beq.n	800306c <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800301e:	4b33      	ldr	r3, [pc, #204]	; (80030ec <HAL_RCC_OscConfig+0x688>)
 8003020:	689a      	ldr	r2, [r3, #8]
 8003022:	4b32      	ldr	r3, [pc, #200]	; (80030ec <HAL_RCC_OscConfig+0x688>)
 8003024:	2101      	movs	r1, #1
 8003026:	430a      	orrs	r2, r1
 8003028:	609a      	str	r2, [r3, #8]
 800302a:	4b30      	ldr	r3, [pc, #192]	; (80030ec <HAL_RCC_OscConfig+0x688>)
 800302c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800302e:	4b2f      	ldr	r3, [pc, #188]	; (80030ec <HAL_RCC_OscConfig+0x688>)
 8003030:	2101      	movs	r1, #1
 8003032:	430a      	orrs	r2, r1
 8003034:	635a      	str	r2, [r3, #52]	; 0x34
 8003036:	4b34      	ldr	r3, [pc, #208]	; (8003108 <HAL_RCC_OscConfig+0x6a4>)
 8003038:	6a1a      	ldr	r2, [r3, #32]
 800303a:	4b33      	ldr	r3, [pc, #204]	; (8003108 <HAL_RCC_OscConfig+0x6a4>)
 800303c:	2180      	movs	r1, #128	; 0x80
 800303e:	0189      	lsls	r1, r1, #6
 8003040:	430a      	orrs	r2, r1
 8003042:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003044:	f7fe ff22 	bl	8001e8c <HAL_GetTick>
 8003048:	0003      	movs	r3, r0
 800304a:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800304c:	e008      	b.n	8003060 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800304e:	f7fe ff1d 	bl	8001e8c <HAL_GetTick>
 8003052:	0002      	movs	r2, r0
 8003054:	697b      	ldr	r3, [r7, #20]
 8003056:	1ad3      	subs	r3, r2, r3
 8003058:	2b02      	cmp	r3, #2
 800305a:	d901      	bls.n	8003060 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 800305c:	2303      	movs	r3, #3
 800305e:	e0ca      	b.n	80031f6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003060:	4b22      	ldr	r3, [pc, #136]	; (80030ec <HAL_RCC_OscConfig+0x688>)
 8003062:	689b      	ldr	r3, [r3, #8]
 8003064:	2202      	movs	r2, #2
 8003066:	4013      	ands	r3, r2
 8003068:	d0f1      	beq.n	800304e <HAL_RCC_OscConfig+0x5ea>
 800306a:	e01e      	b.n	80030aa <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800306c:	4b1f      	ldr	r3, [pc, #124]	; (80030ec <HAL_RCC_OscConfig+0x688>)
 800306e:	689a      	ldr	r2, [r3, #8]
 8003070:	4b1e      	ldr	r3, [pc, #120]	; (80030ec <HAL_RCC_OscConfig+0x688>)
 8003072:	2101      	movs	r1, #1
 8003074:	438a      	bics	r2, r1
 8003076:	609a      	str	r2, [r3, #8]
 8003078:	4b23      	ldr	r3, [pc, #140]	; (8003108 <HAL_RCC_OscConfig+0x6a4>)
 800307a:	6a1a      	ldr	r2, [r3, #32]
 800307c:	4b22      	ldr	r3, [pc, #136]	; (8003108 <HAL_RCC_OscConfig+0x6a4>)
 800307e:	4923      	ldr	r1, [pc, #140]	; (800310c <HAL_RCC_OscConfig+0x6a8>)
 8003080:	400a      	ands	r2, r1
 8003082:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003084:	f7fe ff02 	bl	8001e8c <HAL_GetTick>
 8003088:	0003      	movs	r3, r0
 800308a:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800308c:	e008      	b.n	80030a0 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800308e:	f7fe fefd 	bl	8001e8c <HAL_GetTick>
 8003092:	0002      	movs	r2, r0
 8003094:	697b      	ldr	r3, [r7, #20]
 8003096:	1ad3      	subs	r3, r2, r3
 8003098:	2b02      	cmp	r3, #2
 800309a:	d901      	bls.n	80030a0 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 800309c:	2303      	movs	r3, #3
 800309e:	e0aa      	b.n	80031f6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80030a0:	4b12      	ldr	r3, [pc, #72]	; (80030ec <HAL_RCC_OscConfig+0x688>)
 80030a2:	689b      	ldr	r3, [r3, #8]
 80030a4:	2202      	movs	r2, #2
 80030a6:	4013      	ands	r3, r2
 80030a8:	d1f1      	bne.n	800308e <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d100      	bne.n	80030b4 <HAL_RCC_OscConfig+0x650>
 80030b2:	e09f      	b.n	80031f4 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80030b4:	69fb      	ldr	r3, [r7, #28]
 80030b6:	2b0c      	cmp	r3, #12
 80030b8:	d100      	bne.n	80030bc <HAL_RCC_OscConfig+0x658>
 80030ba:	e078      	b.n	80031ae <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030c0:	2b02      	cmp	r3, #2
 80030c2:	d159      	bne.n	8003178 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030c4:	4b09      	ldr	r3, [pc, #36]	; (80030ec <HAL_RCC_OscConfig+0x688>)
 80030c6:	681a      	ldr	r2, [r3, #0]
 80030c8:	4b08      	ldr	r3, [pc, #32]	; (80030ec <HAL_RCC_OscConfig+0x688>)
 80030ca:	4911      	ldr	r1, [pc, #68]	; (8003110 <HAL_RCC_OscConfig+0x6ac>)
 80030cc:	400a      	ands	r2, r1
 80030ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030d0:	f7fe fedc 	bl	8001e8c <HAL_GetTick>
 80030d4:	0003      	movs	r3, r0
 80030d6:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80030d8:	e01c      	b.n	8003114 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030da:	f7fe fed7 	bl	8001e8c <HAL_GetTick>
 80030de:	0002      	movs	r2, r0
 80030e0:	697b      	ldr	r3, [r7, #20]
 80030e2:	1ad3      	subs	r3, r2, r3
 80030e4:	2b02      	cmp	r3, #2
 80030e6:	d915      	bls.n	8003114 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 80030e8:	2303      	movs	r3, #3
 80030ea:	e084      	b.n	80031f6 <HAL_RCC_OscConfig+0x792>
 80030ec:	40021000 	.word	0x40021000
 80030f0:	ffff1fff 	.word	0xffff1fff
 80030f4:	fffffeff 	.word	0xfffffeff
 80030f8:	40007000 	.word	0x40007000
 80030fc:	fffffbff 	.word	0xfffffbff
 8003100:	00001388 	.word	0x00001388
 8003104:	efffffff 	.word	0xefffffff
 8003108:	40010000 	.word	0x40010000
 800310c:	ffffdfff 	.word	0xffffdfff
 8003110:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003114:	4b3a      	ldr	r3, [pc, #232]	; (8003200 <HAL_RCC_OscConfig+0x79c>)
 8003116:	681a      	ldr	r2, [r3, #0]
 8003118:	2380      	movs	r3, #128	; 0x80
 800311a:	049b      	lsls	r3, r3, #18
 800311c:	4013      	ands	r3, r2
 800311e:	d1dc      	bne.n	80030da <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003120:	4b37      	ldr	r3, [pc, #220]	; (8003200 <HAL_RCC_OscConfig+0x79c>)
 8003122:	68db      	ldr	r3, [r3, #12]
 8003124:	4a37      	ldr	r2, [pc, #220]	; (8003204 <HAL_RCC_OscConfig+0x7a0>)
 8003126:	4013      	ands	r3, r2
 8003128:	0019      	movs	r1, r3
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003132:	431a      	orrs	r2, r3
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003138:	431a      	orrs	r2, r3
 800313a:	4b31      	ldr	r3, [pc, #196]	; (8003200 <HAL_RCC_OscConfig+0x79c>)
 800313c:	430a      	orrs	r2, r1
 800313e:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003140:	4b2f      	ldr	r3, [pc, #188]	; (8003200 <HAL_RCC_OscConfig+0x79c>)
 8003142:	681a      	ldr	r2, [r3, #0]
 8003144:	4b2e      	ldr	r3, [pc, #184]	; (8003200 <HAL_RCC_OscConfig+0x79c>)
 8003146:	2180      	movs	r1, #128	; 0x80
 8003148:	0449      	lsls	r1, r1, #17
 800314a:	430a      	orrs	r2, r1
 800314c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800314e:	f7fe fe9d 	bl	8001e8c <HAL_GetTick>
 8003152:	0003      	movs	r3, r0
 8003154:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8003156:	e008      	b.n	800316a <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003158:	f7fe fe98 	bl	8001e8c <HAL_GetTick>
 800315c:	0002      	movs	r2, r0
 800315e:	697b      	ldr	r3, [r7, #20]
 8003160:	1ad3      	subs	r3, r2, r3
 8003162:	2b02      	cmp	r3, #2
 8003164:	d901      	bls.n	800316a <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 8003166:	2303      	movs	r3, #3
 8003168:	e045      	b.n	80031f6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800316a:	4b25      	ldr	r3, [pc, #148]	; (8003200 <HAL_RCC_OscConfig+0x79c>)
 800316c:	681a      	ldr	r2, [r3, #0]
 800316e:	2380      	movs	r3, #128	; 0x80
 8003170:	049b      	lsls	r3, r3, #18
 8003172:	4013      	ands	r3, r2
 8003174:	d0f0      	beq.n	8003158 <HAL_RCC_OscConfig+0x6f4>
 8003176:	e03d      	b.n	80031f4 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003178:	4b21      	ldr	r3, [pc, #132]	; (8003200 <HAL_RCC_OscConfig+0x79c>)
 800317a:	681a      	ldr	r2, [r3, #0]
 800317c:	4b20      	ldr	r3, [pc, #128]	; (8003200 <HAL_RCC_OscConfig+0x79c>)
 800317e:	4922      	ldr	r1, [pc, #136]	; (8003208 <HAL_RCC_OscConfig+0x7a4>)
 8003180:	400a      	ands	r2, r1
 8003182:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003184:	f7fe fe82 	bl	8001e8c <HAL_GetTick>
 8003188:	0003      	movs	r3, r0
 800318a:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800318c:	e008      	b.n	80031a0 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800318e:	f7fe fe7d 	bl	8001e8c <HAL_GetTick>
 8003192:	0002      	movs	r2, r0
 8003194:	697b      	ldr	r3, [r7, #20]
 8003196:	1ad3      	subs	r3, r2, r3
 8003198:	2b02      	cmp	r3, #2
 800319a:	d901      	bls.n	80031a0 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 800319c:	2303      	movs	r3, #3
 800319e:	e02a      	b.n	80031f6 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80031a0:	4b17      	ldr	r3, [pc, #92]	; (8003200 <HAL_RCC_OscConfig+0x79c>)
 80031a2:	681a      	ldr	r2, [r3, #0]
 80031a4:	2380      	movs	r3, #128	; 0x80
 80031a6:	049b      	lsls	r3, r3, #18
 80031a8:	4013      	ands	r3, r2
 80031aa:	d1f0      	bne.n	800318e <HAL_RCC_OscConfig+0x72a>
 80031ac:	e022      	b.n	80031f4 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031b2:	2b01      	cmp	r3, #1
 80031b4:	d101      	bne.n	80031ba <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 80031b6:	2301      	movs	r3, #1
 80031b8:	e01d      	b.n	80031f6 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80031ba:	4b11      	ldr	r3, [pc, #68]	; (8003200 <HAL_RCC_OscConfig+0x79c>)
 80031bc:	68db      	ldr	r3, [r3, #12]
 80031be:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031c0:	69ba      	ldr	r2, [r7, #24]
 80031c2:	2380      	movs	r3, #128	; 0x80
 80031c4:	025b      	lsls	r3, r3, #9
 80031c6:	401a      	ands	r2, r3
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031cc:	429a      	cmp	r2, r3
 80031ce:	d10f      	bne.n	80031f0 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80031d0:	69ba      	ldr	r2, [r7, #24]
 80031d2:	23f0      	movs	r3, #240	; 0xf0
 80031d4:	039b      	lsls	r3, r3, #14
 80031d6:	401a      	ands	r2, r3
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031dc:	429a      	cmp	r2, r3
 80031de:	d107      	bne.n	80031f0 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80031e0:	69ba      	ldr	r2, [r7, #24]
 80031e2:	23c0      	movs	r3, #192	; 0xc0
 80031e4:	041b      	lsls	r3, r3, #16
 80031e6:	401a      	ands	r2, r3
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80031ec:	429a      	cmp	r2, r3
 80031ee:	d001      	beq.n	80031f4 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 80031f0:	2301      	movs	r3, #1
 80031f2:	e000      	b.n	80031f6 <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 80031f4:	2300      	movs	r3, #0
}
 80031f6:	0018      	movs	r0, r3
 80031f8:	46bd      	mov	sp, r7
 80031fa:	b00a      	add	sp, #40	; 0x28
 80031fc:	bdb0      	pop	{r4, r5, r7, pc}
 80031fe:	46c0      	nop			; (mov r8, r8)
 8003200:	40021000 	.word	0x40021000
 8003204:	ff02ffff 	.word	0xff02ffff
 8003208:	feffffff 	.word	0xfeffffff

0800320c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800320c:	b5b0      	push	{r4, r5, r7, lr}
 800320e:	b084      	sub	sp, #16
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
 8003214:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d101      	bne.n	8003220 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800321c:	2301      	movs	r3, #1
 800321e:	e128      	b.n	8003472 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003220:	4b96      	ldr	r3, [pc, #600]	; (800347c <HAL_RCC_ClockConfig+0x270>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	2201      	movs	r2, #1
 8003226:	4013      	ands	r3, r2
 8003228:	683a      	ldr	r2, [r7, #0]
 800322a:	429a      	cmp	r2, r3
 800322c:	d91e      	bls.n	800326c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800322e:	4b93      	ldr	r3, [pc, #588]	; (800347c <HAL_RCC_ClockConfig+0x270>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	2201      	movs	r2, #1
 8003234:	4393      	bics	r3, r2
 8003236:	0019      	movs	r1, r3
 8003238:	4b90      	ldr	r3, [pc, #576]	; (800347c <HAL_RCC_ClockConfig+0x270>)
 800323a:	683a      	ldr	r2, [r7, #0]
 800323c:	430a      	orrs	r2, r1
 800323e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003240:	f7fe fe24 	bl	8001e8c <HAL_GetTick>
 8003244:	0003      	movs	r3, r0
 8003246:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003248:	e009      	b.n	800325e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800324a:	f7fe fe1f 	bl	8001e8c <HAL_GetTick>
 800324e:	0002      	movs	r2, r0
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	1ad3      	subs	r3, r2, r3
 8003254:	4a8a      	ldr	r2, [pc, #552]	; (8003480 <HAL_RCC_ClockConfig+0x274>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d901      	bls.n	800325e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800325a:	2303      	movs	r3, #3
 800325c:	e109      	b.n	8003472 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800325e:	4b87      	ldr	r3, [pc, #540]	; (800347c <HAL_RCC_ClockConfig+0x270>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	2201      	movs	r2, #1
 8003264:	4013      	ands	r3, r2
 8003266:	683a      	ldr	r2, [r7, #0]
 8003268:	429a      	cmp	r2, r3
 800326a:	d1ee      	bne.n	800324a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	2202      	movs	r2, #2
 8003272:	4013      	ands	r3, r2
 8003274:	d009      	beq.n	800328a <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003276:	4b83      	ldr	r3, [pc, #524]	; (8003484 <HAL_RCC_ClockConfig+0x278>)
 8003278:	68db      	ldr	r3, [r3, #12]
 800327a:	22f0      	movs	r2, #240	; 0xf0
 800327c:	4393      	bics	r3, r2
 800327e:	0019      	movs	r1, r3
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	689a      	ldr	r2, [r3, #8]
 8003284:	4b7f      	ldr	r3, [pc, #508]	; (8003484 <HAL_RCC_ClockConfig+0x278>)
 8003286:	430a      	orrs	r2, r1
 8003288:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	2201      	movs	r2, #1
 8003290:	4013      	ands	r3, r2
 8003292:	d100      	bne.n	8003296 <HAL_RCC_ClockConfig+0x8a>
 8003294:	e089      	b.n	80033aa <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	2b02      	cmp	r3, #2
 800329c:	d107      	bne.n	80032ae <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800329e:	4b79      	ldr	r3, [pc, #484]	; (8003484 <HAL_RCC_ClockConfig+0x278>)
 80032a0:	681a      	ldr	r2, [r3, #0]
 80032a2:	2380      	movs	r3, #128	; 0x80
 80032a4:	029b      	lsls	r3, r3, #10
 80032a6:	4013      	ands	r3, r2
 80032a8:	d120      	bne.n	80032ec <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80032aa:	2301      	movs	r3, #1
 80032ac:	e0e1      	b.n	8003472 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	2b03      	cmp	r3, #3
 80032b4:	d107      	bne.n	80032c6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80032b6:	4b73      	ldr	r3, [pc, #460]	; (8003484 <HAL_RCC_ClockConfig+0x278>)
 80032b8:	681a      	ldr	r2, [r3, #0]
 80032ba:	2380      	movs	r3, #128	; 0x80
 80032bc:	049b      	lsls	r3, r3, #18
 80032be:	4013      	ands	r3, r2
 80032c0:	d114      	bne.n	80032ec <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80032c2:	2301      	movs	r3, #1
 80032c4:	e0d5      	b.n	8003472 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	2b01      	cmp	r3, #1
 80032cc:	d106      	bne.n	80032dc <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80032ce:	4b6d      	ldr	r3, [pc, #436]	; (8003484 <HAL_RCC_ClockConfig+0x278>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	2204      	movs	r2, #4
 80032d4:	4013      	ands	r3, r2
 80032d6:	d109      	bne.n	80032ec <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80032d8:	2301      	movs	r3, #1
 80032da:	e0ca      	b.n	8003472 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80032dc:	4b69      	ldr	r3, [pc, #420]	; (8003484 <HAL_RCC_ClockConfig+0x278>)
 80032de:	681a      	ldr	r2, [r3, #0]
 80032e0:	2380      	movs	r3, #128	; 0x80
 80032e2:	009b      	lsls	r3, r3, #2
 80032e4:	4013      	ands	r3, r2
 80032e6:	d101      	bne.n	80032ec <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80032e8:	2301      	movs	r3, #1
 80032ea:	e0c2      	b.n	8003472 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80032ec:	4b65      	ldr	r3, [pc, #404]	; (8003484 <HAL_RCC_ClockConfig+0x278>)
 80032ee:	68db      	ldr	r3, [r3, #12]
 80032f0:	2203      	movs	r2, #3
 80032f2:	4393      	bics	r3, r2
 80032f4:	0019      	movs	r1, r3
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	685a      	ldr	r2, [r3, #4]
 80032fa:	4b62      	ldr	r3, [pc, #392]	; (8003484 <HAL_RCC_ClockConfig+0x278>)
 80032fc:	430a      	orrs	r2, r1
 80032fe:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003300:	f7fe fdc4 	bl	8001e8c <HAL_GetTick>
 8003304:	0003      	movs	r3, r0
 8003306:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	2b02      	cmp	r3, #2
 800330e:	d111      	bne.n	8003334 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003310:	e009      	b.n	8003326 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003312:	f7fe fdbb 	bl	8001e8c <HAL_GetTick>
 8003316:	0002      	movs	r2, r0
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	1ad3      	subs	r3, r2, r3
 800331c:	4a58      	ldr	r2, [pc, #352]	; (8003480 <HAL_RCC_ClockConfig+0x274>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d901      	bls.n	8003326 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8003322:	2303      	movs	r3, #3
 8003324:	e0a5      	b.n	8003472 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003326:	4b57      	ldr	r3, [pc, #348]	; (8003484 <HAL_RCC_ClockConfig+0x278>)
 8003328:	68db      	ldr	r3, [r3, #12]
 800332a:	220c      	movs	r2, #12
 800332c:	4013      	ands	r3, r2
 800332e:	2b08      	cmp	r3, #8
 8003330:	d1ef      	bne.n	8003312 <HAL_RCC_ClockConfig+0x106>
 8003332:	e03a      	b.n	80033aa <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	2b03      	cmp	r3, #3
 800333a:	d111      	bne.n	8003360 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800333c:	e009      	b.n	8003352 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800333e:	f7fe fda5 	bl	8001e8c <HAL_GetTick>
 8003342:	0002      	movs	r2, r0
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	1ad3      	subs	r3, r2, r3
 8003348:	4a4d      	ldr	r2, [pc, #308]	; (8003480 <HAL_RCC_ClockConfig+0x274>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d901      	bls.n	8003352 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 800334e:	2303      	movs	r3, #3
 8003350:	e08f      	b.n	8003472 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003352:	4b4c      	ldr	r3, [pc, #304]	; (8003484 <HAL_RCC_ClockConfig+0x278>)
 8003354:	68db      	ldr	r3, [r3, #12]
 8003356:	220c      	movs	r2, #12
 8003358:	4013      	ands	r3, r2
 800335a:	2b0c      	cmp	r3, #12
 800335c:	d1ef      	bne.n	800333e <HAL_RCC_ClockConfig+0x132>
 800335e:	e024      	b.n	80033aa <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	2b01      	cmp	r3, #1
 8003366:	d11b      	bne.n	80033a0 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003368:	e009      	b.n	800337e <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800336a:	f7fe fd8f 	bl	8001e8c <HAL_GetTick>
 800336e:	0002      	movs	r2, r0
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	1ad3      	subs	r3, r2, r3
 8003374:	4a42      	ldr	r2, [pc, #264]	; (8003480 <HAL_RCC_ClockConfig+0x274>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d901      	bls.n	800337e <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 800337a:	2303      	movs	r3, #3
 800337c:	e079      	b.n	8003472 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800337e:	4b41      	ldr	r3, [pc, #260]	; (8003484 <HAL_RCC_ClockConfig+0x278>)
 8003380:	68db      	ldr	r3, [r3, #12]
 8003382:	220c      	movs	r2, #12
 8003384:	4013      	ands	r3, r2
 8003386:	2b04      	cmp	r3, #4
 8003388:	d1ef      	bne.n	800336a <HAL_RCC_ClockConfig+0x15e>
 800338a:	e00e      	b.n	80033aa <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800338c:	f7fe fd7e 	bl	8001e8c <HAL_GetTick>
 8003390:	0002      	movs	r2, r0
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	1ad3      	subs	r3, r2, r3
 8003396:	4a3a      	ldr	r2, [pc, #232]	; (8003480 <HAL_RCC_ClockConfig+0x274>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d901      	bls.n	80033a0 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 800339c:	2303      	movs	r3, #3
 800339e:	e068      	b.n	8003472 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80033a0:	4b38      	ldr	r3, [pc, #224]	; (8003484 <HAL_RCC_ClockConfig+0x278>)
 80033a2:	68db      	ldr	r3, [r3, #12]
 80033a4:	220c      	movs	r2, #12
 80033a6:	4013      	ands	r3, r2
 80033a8:	d1f0      	bne.n	800338c <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80033aa:	4b34      	ldr	r3, [pc, #208]	; (800347c <HAL_RCC_ClockConfig+0x270>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	2201      	movs	r2, #1
 80033b0:	4013      	ands	r3, r2
 80033b2:	683a      	ldr	r2, [r7, #0]
 80033b4:	429a      	cmp	r2, r3
 80033b6:	d21e      	bcs.n	80033f6 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033b8:	4b30      	ldr	r3, [pc, #192]	; (800347c <HAL_RCC_ClockConfig+0x270>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	2201      	movs	r2, #1
 80033be:	4393      	bics	r3, r2
 80033c0:	0019      	movs	r1, r3
 80033c2:	4b2e      	ldr	r3, [pc, #184]	; (800347c <HAL_RCC_ClockConfig+0x270>)
 80033c4:	683a      	ldr	r2, [r7, #0]
 80033c6:	430a      	orrs	r2, r1
 80033c8:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80033ca:	f7fe fd5f 	bl	8001e8c <HAL_GetTick>
 80033ce:	0003      	movs	r3, r0
 80033d0:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033d2:	e009      	b.n	80033e8 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033d4:	f7fe fd5a 	bl	8001e8c <HAL_GetTick>
 80033d8:	0002      	movs	r2, r0
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	1ad3      	subs	r3, r2, r3
 80033de:	4a28      	ldr	r2, [pc, #160]	; (8003480 <HAL_RCC_ClockConfig+0x274>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d901      	bls.n	80033e8 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 80033e4:	2303      	movs	r3, #3
 80033e6:	e044      	b.n	8003472 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033e8:	4b24      	ldr	r3, [pc, #144]	; (800347c <HAL_RCC_ClockConfig+0x270>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	2201      	movs	r2, #1
 80033ee:	4013      	ands	r3, r2
 80033f0:	683a      	ldr	r2, [r7, #0]
 80033f2:	429a      	cmp	r2, r3
 80033f4:	d1ee      	bne.n	80033d4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	2204      	movs	r2, #4
 80033fc:	4013      	ands	r3, r2
 80033fe:	d009      	beq.n	8003414 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003400:	4b20      	ldr	r3, [pc, #128]	; (8003484 <HAL_RCC_ClockConfig+0x278>)
 8003402:	68db      	ldr	r3, [r3, #12]
 8003404:	4a20      	ldr	r2, [pc, #128]	; (8003488 <HAL_RCC_ClockConfig+0x27c>)
 8003406:	4013      	ands	r3, r2
 8003408:	0019      	movs	r1, r3
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	68da      	ldr	r2, [r3, #12]
 800340e:	4b1d      	ldr	r3, [pc, #116]	; (8003484 <HAL_RCC_ClockConfig+0x278>)
 8003410:	430a      	orrs	r2, r1
 8003412:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	2208      	movs	r2, #8
 800341a:	4013      	ands	r3, r2
 800341c:	d00a      	beq.n	8003434 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800341e:	4b19      	ldr	r3, [pc, #100]	; (8003484 <HAL_RCC_ClockConfig+0x278>)
 8003420:	68db      	ldr	r3, [r3, #12]
 8003422:	4a1a      	ldr	r2, [pc, #104]	; (800348c <HAL_RCC_ClockConfig+0x280>)
 8003424:	4013      	ands	r3, r2
 8003426:	0019      	movs	r1, r3
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	691b      	ldr	r3, [r3, #16]
 800342c:	00da      	lsls	r2, r3, #3
 800342e:	4b15      	ldr	r3, [pc, #84]	; (8003484 <HAL_RCC_ClockConfig+0x278>)
 8003430:	430a      	orrs	r2, r1
 8003432:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003434:	f000 f832 	bl	800349c <HAL_RCC_GetSysClockFreq>
 8003438:	0001      	movs	r1, r0
 800343a:	4b12      	ldr	r3, [pc, #72]	; (8003484 <HAL_RCC_ClockConfig+0x278>)
 800343c:	68db      	ldr	r3, [r3, #12]
 800343e:	091b      	lsrs	r3, r3, #4
 8003440:	220f      	movs	r2, #15
 8003442:	4013      	ands	r3, r2
 8003444:	4a12      	ldr	r2, [pc, #72]	; (8003490 <HAL_RCC_ClockConfig+0x284>)
 8003446:	5cd3      	ldrb	r3, [r2, r3]
 8003448:	000a      	movs	r2, r1
 800344a:	40da      	lsrs	r2, r3
 800344c:	4b11      	ldr	r3, [pc, #68]	; (8003494 <HAL_RCC_ClockConfig+0x288>)
 800344e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003450:	4b11      	ldr	r3, [pc, #68]	; (8003498 <HAL_RCC_ClockConfig+0x28c>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	250b      	movs	r5, #11
 8003456:	197c      	adds	r4, r7, r5
 8003458:	0018      	movs	r0, r3
 800345a:	f7fe fcd1 	bl	8001e00 <HAL_InitTick>
 800345e:	0003      	movs	r3, r0
 8003460:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8003462:	197b      	adds	r3, r7, r5
 8003464:	781b      	ldrb	r3, [r3, #0]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d002      	beq.n	8003470 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 800346a:	197b      	adds	r3, r7, r5
 800346c:	781b      	ldrb	r3, [r3, #0]
 800346e:	e000      	b.n	8003472 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8003470:	2300      	movs	r3, #0
}
 8003472:	0018      	movs	r0, r3
 8003474:	46bd      	mov	sp, r7
 8003476:	b004      	add	sp, #16
 8003478:	bdb0      	pop	{r4, r5, r7, pc}
 800347a:	46c0      	nop			; (mov r8, r8)
 800347c:	40022000 	.word	0x40022000
 8003480:	00001388 	.word	0x00001388
 8003484:	40021000 	.word	0x40021000
 8003488:	fffff8ff 	.word	0xfffff8ff
 800348c:	ffffc7ff 	.word	0xffffc7ff
 8003490:	080067b4 	.word	0x080067b4
 8003494:	20000190 	.word	0x20000190
 8003498:	20000194 	.word	0x20000194

0800349c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800349c:	b5b0      	push	{r4, r5, r7, lr}
 800349e:	b08e      	sub	sp, #56	; 0x38
 80034a0:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 80034a2:	4b4c      	ldr	r3, [pc, #304]	; (80035d4 <HAL_RCC_GetSysClockFreq+0x138>)
 80034a4:	68db      	ldr	r3, [r3, #12]
 80034a6:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80034a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80034aa:	230c      	movs	r3, #12
 80034ac:	4013      	ands	r3, r2
 80034ae:	2b0c      	cmp	r3, #12
 80034b0:	d014      	beq.n	80034dc <HAL_RCC_GetSysClockFreq+0x40>
 80034b2:	d900      	bls.n	80034b6 <HAL_RCC_GetSysClockFreq+0x1a>
 80034b4:	e07b      	b.n	80035ae <HAL_RCC_GetSysClockFreq+0x112>
 80034b6:	2b04      	cmp	r3, #4
 80034b8:	d002      	beq.n	80034c0 <HAL_RCC_GetSysClockFreq+0x24>
 80034ba:	2b08      	cmp	r3, #8
 80034bc:	d00b      	beq.n	80034d6 <HAL_RCC_GetSysClockFreq+0x3a>
 80034be:	e076      	b.n	80035ae <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80034c0:	4b44      	ldr	r3, [pc, #272]	; (80035d4 <HAL_RCC_GetSysClockFreq+0x138>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	2210      	movs	r2, #16
 80034c6:	4013      	ands	r3, r2
 80034c8:	d002      	beq.n	80034d0 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80034ca:	4b43      	ldr	r3, [pc, #268]	; (80035d8 <HAL_RCC_GetSysClockFreq+0x13c>)
 80034cc:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 80034ce:	e07c      	b.n	80035ca <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 80034d0:	4b42      	ldr	r3, [pc, #264]	; (80035dc <HAL_RCC_GetSysClockFreq+0x140>)
 80034d2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80034d4:	e079      	b.n	80035ca <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80034d6:	4b42      	ldr	r3, [pc, #264]	; (80035e0 <HAL_RCC_GetSysClockFreq+0x144>)
 80034d8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80034da:	e076      	b.n	80035ca <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80034dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034de:	0c9a      	lsrs	r2, r3, #18
 80034e0:	230f      	movs	r3, #15
 80034e2:	401a      	ands	r2, r3
 80034e4:	4b3f      	ldr	r3, [pc, #252]	; (80035e4 <HAL_RCC_GetSysClockFreq+0x148>)
 80034e6:	5c9b      	ldrb	r3, [r3, r2]
 80034e8:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80034ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034ec:	0d9a      	lsrs	r2, r3, #22
 80034ee:	2303      	movs	r3, #3
 80034f0:	4013      	ands	r3, r2
 80034f2:	3301      	adds	r3, #1
 80034f4:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80034f6:	4b37      	ldr	r3, [pc, #220]	; (80035d4 <HAL_RCC_GetSysClockFreq+0x138>)
 80034f8:	68da      	ldr	r2, [r3, #12]
 80034fa:	2380      	movs	r3, #128	; 0x80
 80034fc:	025b      	lsls	r3, r3, #9
 80034fe:	4013      	ands	r3, r2
 8003500:	d01a      	beq.n	8003538 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003502:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003504:	61bb      	str	r3, [r7, #24]
 8003506:	2300      	movs	r3, #0
 8003508:	61fb      	str	r3, [r7, #28]
 800350a:	4a35      	ldr	r2, [pc, #212]	; (80035e0 <HAL_RCC_GetSysClockFreq+0x144>)
 800350c:	2300      	movs	r3, #0
 800350e:	69b8      	ldr	r0, [r7, #24]
 8003510:	69f9      	ldr	r1, [r7, #28]
 8003512:	f7fc fec1 	bl	8000298 <__aeabi_lmul>
 8003516:	0002      	movs	r2, r0
 8003518:	000b      	movs	r3, r1
 800351a:	0010      	movs	r0, r2
 800351c:	0019      	movs	r1, r3
 800351e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003520:	613b      	str	r3, [r7, #16]
 8003522:	2300      	movs	r3, #0
 8003524:	617b      	str	r3, [r7, #20]
 8003526:	693a      	ldr	r2, [r7, #16]
 8003528:	697b      	ldr	r3, [r7, #20]
 800352a:	f7fc fe95 	bl	8000258 <__aeabi_uldivmod>
 800352e:	0002      	movs	r2, r0
 8003530:	000b      	movs	r3, r1
 8003532:	0013      	movs	r3, r2
 8003534:	637b      	str	r3, [r7, #52]	; 0x34
 8003536:	e037      	b.n	80035a8 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003538:	4b26      	ldr	r3, [pc, #152]	; (80035d4 <HAL_RCC_GetSysClockFreq+0x138>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	2210      	movs	r2, #16
 800353e:	4013      	ands	r3, r2
 8003540:	d01a      	beq.n	8003578 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8003542:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003544:	60bb      	str	r3, [r7, #8]
 8003546:	2300      	movs	r3, #0
 8003548:	60fb      	str	r3, [r7, #12]
 800354a:	4a23      	ldr	r2, [pc, #140]	; (80035d8 <HAL_RCC_GetSysClockFreq+0x13c>)
 800354c:	2300      	movs	r3, #0
 800354e:	68b8      	ldr	r0, [r7, #8]
 8003550:	68f9      	ldr	r1, [r7, #12]
 8003552:	f7fc fea1 	bl	8000298 <__aeabi_lmul>
 8003556:	0002      	movs	r2, r0
 8003558:	000b      	movs	r3, r1
 800355a:	0010      	movs	r0, r2
 800355c:	0019      	movs	r1, r3
 800355e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003560:	603b      	str	r3, [r7, #0]
 8003562:	2300      	movs	r3, #0
 8003564:	607b      	str	r3, [r7, #4]
 8003566:	683a      	ldr	r2, [r7, #0]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	f7fc fe75 	bl	8000258 <__aeabi_uldivmod>
 800356e:	0002      	movs	r2, r0
 8003570:	000b      	movs	r3, r1
 8003572:	0013      	movs	r3, r2
 8003574:	637b      	str	r3, [r7, #52]	; 0x34
 8003576:	e017      	b.n	80035a8 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003578:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800357a:	0018      	movs	r0, r3
 800357c:	2300      	movs	r3, #0
 800357e:	0019      	movs	r1, r3
 8003580:	4a16      	ldr	r2, [pc, #88]	; (80035dc <HAL_RCC_GetSysClockFreq+0x140>)
 8003582:	2300      	movs	r3, #0
 8003584:	f7fc fe88 	bl	8000298 <__aeabi_lmul>
 8003588:	0002      	movs	r2, r0
 800358a:	000b      	movs	r3, r1
 800358c:	0010      	movs	r0, r2
 800358e:	0019      	movs	r1, r3
 8003590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003592:	001c      	movs	r4, r3
 8003594:	2300      	movs	r3, #0
 8003596:	001d      	movs	r5, r3
 8003598:	0022      	movs	r2, r4
 800359a:	002b      	movs	r3, r5
 800359c:	f7fc fe5c 	bl	8000258 <__aeabi_uldivmod>
 80035a0:	0002      	movs	r2, r0
 80035a2:	000b      	movs	r3, r1
 80035a4:	0013      	movs	r3, r2
 80035a6:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 80035a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035aa:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80035ac:	e00d      	b.n	80035ca <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80035ae:	4b09      	ldr	r3, [pc, #36]	; (80035d4 <HAL_RCC_GetSysClockFreq+0x138>)
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	0b5b      	lsrs	r3, r3, #13
 80035b4:	2207      	movs	r2, #7
 80035b6:	4013      	ands	r3, r2
 80035b8:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80035ba:	6a3b      	ldr	r3, [r7, #32]
 80035bc:	3301      	adds	r3, #1
 80035be:	2280      	movs	r2, #128	; 0x80
 80035c0:	0212      	lsls	r2, r2, #8
 80035c2:	409a      	lsls	r2, r3
 80035c4:	0013      	movs	r3, r2
 80035c6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80035c8:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80035ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80035cc:	0018      	movs	r0, r3
 80035ce:	46bd      	mov	sp, r7
 80035d0:	b00e      	add	sp, #56	; 0x38
 80035d2:	bdb0      	pop	{r4, r5, r7, pc}
 80035d4:	40021000 	.word	0x40021000
 80035d8:	003d0900 	.word	0x003d0900
 80035dc:	00f42400 	.word	0x00f42400
 80035e0:	007a1200 	.word	0x007a1200
 80035e4:	080067cc 	.word	0x080067cc

080035e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80035ec:	4b02      	ldr	r3, [pc, #8]	; (80035f8 <HAL_RCC_GetHCLKFreq+0x10>)
 80035ee:	681b      	ldr	r3, [r3, #0]
}
 80035f0:	0018      	movs	r0, r3
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bd80      	pop	{r7, pc}
 80035f6:	46c0      	nop			; (mov r8, r8)
 80035f8:	20000190 	.word	0x20000190

080035fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003600:	f7ff fff2 	bl	80035e8 <HAL_RCC_GetHCLKFreq>
 8003604:	0001      	movs	r1, r0
 8003606:	4b06      	ldr	r3, [pc, #24]	; (8003620 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003608:	68db      	ldr	r3, [r3, #12]
 800360a:	0a1b      	lsrs	r3, r3, #8
 800360c:	2207      	movs	r2, #7
 800360e:	4013      	ands	r3, r2
 8003610:	4a04      	ldr	r2, [pc, #16]	; (8003624 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003612:	5cd3      	ldrb	r3, [r2, r3]
 8003614:	40d9      	lsrs	r1, r3
 8003616:	000b      	movs	r3, r1
}
 8003618:	0018      	movs	r0, r3
 800361a:	46bd      	mov	sp, r7
 800361c:	bd80      	pop	{r7, pc}
 800361e:	46c0      	nop			; (mov r8, r8)
 8003620:	40021000 	.word	0x40021000
 8003624:	080067c4 	.word	0x080067c4

08003628 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800362c:	f7ff ffdc 	bl	80035e8 <HAL_RCC_GetHCLKFreq>
 8003630:	0001      	movs	r1, r0
 8003632:	4b06      	ldr	r3, [pc, #24]	; (800364c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003634:	68db      	ldr	r3, [r3, #12]
 8003636:	0adb      	lsrs	r3, r3, #11
 8003638:	2207      	movs	r2, #7
 800363a:	4013      	ands	r3, r2
 800363c:	4a04      	ldr	r2, [pc, #16]	; (8003650 <HAL_RCC_GetPCLK2Freq+0x28>)
 800363e:	5cd3      	ldrb	r3, [r2, r3]
 8003640:	40d9      	lsrs	r1, r3
 8003642:	000b      	movs	r3, r1
}
 8003644:	0018      	movs	r0, r3
 8003646:	46bd      	mov	sp, r7
 8003648:	bd80      	pop	{r7, pc}
 800364a:	46c0      	nop			; (mov r8, r8)
 800364c:	40021000 	.word	0x40021000
 8003650:	080067c4 	.word	0x080067c4

08003654 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b086      	sub	sp, #24
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 800365c:	2317      	movs	r3, #23
 800365e:	18fb      	adds	r3, r7, r3
 8003660:	2200      	movs	r2, #0
 8003662:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	2220      	movs	r2, #32
 800366a:	4013      	ands	r3, r2
 800366c:	d106      	bne.n	800367c <HAL_RCCEx_PeriphCLKConfig+0x28>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681a      	ldr	r2, [r3, #0]
 8003672:	2380      	movs	r3, #128	; 0x80
 8003674:	011b      	lsls	r3, r3, #4
 8003676:	4013      	ands	r3, r2
 8003678:	d100      	bne.n	800367c <HAL_RCCEx_PeriphCLKConfig+0x28>
 800367a:	e104      	b.n	8003886 <HAL_RCCEx_PeriphCLKConfig+0x232>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800367c:	4bb9      	ldr	r3, [pc, #740]	; (8003964 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800367e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003680:	2380      	movs	r3, #128	; 0x80
 8003682:	055b      	lsls	r3, r3, #21
 8003684:	4013      	ands	r3, r2
 8003686:	d10a      	bne.n	800369e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003688:	4bb6      	ldr	r3, [pc, #728]	; (8003964 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800368a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800368c:	4bb5      	ldr	r3, [pc, #724]	; (8003964 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800368e:	2180      	movs	r1, #128	; 0x80
 8003690:	0549      	lsls	r1, r1, #21
 8003692:	430a      	orrs	r2, r1
 8003694:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8003696:	2317      	movs	r3, #23
 8003698:	18fb      	adds	r3, r7, r3
 800369a:	2201      	movs	r2, #1
 800369c:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800369e:	4bb2      	ldr	r3, [pc, #712]	; (8003968 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 80036a0:	681a      	ldr	r2, [r3, #0]
 80036a2:	2380      	movs	r3, #128	; 0x80
 80036a4:	005b      	lsls	r3, r3, #1
 80036a6:	4013      	ands	r3, r2
 80036a8:	d11a      	bne.n	80036e0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80036aa:	4baf      	ldr	r3, [pc, #700]	; (8003968 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 80036ac:	681a      	ldr	r2, [r3, #0]
 80036ae:	4bae      	ldr	r3, [pc, #696]	; (8003968 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 80036b0:	2180      	movs	r1, #128	; 0x80
 80036b2:	0049      	lsls	r1, r1, #1
 80036b4:	430a      	orrs	r2, r1
 80036b6:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80036b8:	f7fe fbe8 	bl	8001e8c <HAL_GetTick>
 80036bc:	0003      	movs	r3, r0
 80036be:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036c0:	e008      	b.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036c2:	f7fe fbe3 	bl	8001e8c <HAL_GetTick>
 80036c6:	0002      	movs	r2, r0
 80036c8:	693b      	ldr	r3, [r7, #16]
 80036ca:	1ad3      	subs	r3, r2, r3
 80036cc:	2b64      	cmp	r3, #100	; 0x64
 80036ce:	d901      	bls.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80036d0:	2303      	movs	r3, #3
 80036d2:	e143      	b.n	800395c <HAL_RCCEx_PeriphCLKConfig+0x308>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036d4:	4ba4      	ldr	r3, [pc, #656]	; (8003968 <HAL_RCCEx_PeriphCLKConfig+0x314>)
 80036d6:	681a      	ldr	r2, [r3, #0]
 80036d8:	2380      	movs	r3, #128	; 0x80
 80036da:	005b      	lsls	r3, r3, #1
 80036dc:	4013      	ands	r3, r2
 80036de:	d0f0      	beq.n	80036c2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80036e0:	4ba0      	ldr	r3, [pc, #640]	; (8003964 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80036e2:	681a      	ldr	r2, [r3, #0]
 80036e4:	23c0      	movs	r3, #192	; 0xc0
 80036e6:	039b      	lsls	r3, r3, #14
 80036e8:	4013      	ands	r3, r2
 80036ea:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	685a      	ldr	r2, [r3, #4]
 80036f0:	23c0      	movs	r3, #192	; 0xc0
 80036f2:	039b      	lsls	r3, r3, #14
 80036f4:	4013      	ands	r3, r2
 80036f6:	68fa      	ldr	r2, [r7, #12]
 80036f8:	429a      	cmp	r2, r3
 80036fa:	d107      	bne.n	800370c <HAL_RCCEx_PeriphCLKConfig+0xb8>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	689a      	ldr	r2, [r3, #8]
 8003700:	23c0      	movs	r3, #192	; 0xc0
 8003702:	039b      	lsls	r3, r3, #14
 8003704:	4013      	ands	r3, r2
 8003706:	68fa      	ldr	r2, [r7, #12]
 8003708:	429a      	cmp	r2, r3
 800370a:	d013      	beq.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0xe0>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	685a      	ldr	r2, [r3, #4]
 8003710:	23c0      	movs	r3, #192	; 0xc0
 8003712:	029b      	lsls	r3, r3, #10
 8003714:	401a      	ands	r2, r3
 8003716:	23c0      	movs	r3, #192	; 0xc0
 8003718:	029b      	lsls	r3, r3, #10
 800371a:	429a      	cmp	r2, r3
 800371c:	d10a      	bne.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800371e:	4b91      	ldr	r3, [pc, #580]	; (8003964 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003720:	681a      	ldr	r2, [r3, #0]
 8003722:	2380      	movs	r3, #128	; 0x80
 8003724:	029b      	lsls	r3, r3, #10
 8003726:	401a      	ands	r2, r3
 8003728:	2380      	movs	r3, #128	; 0x80
 800372a:	029b      	lsls	r3, r3, #10
 800372c:	429a      	cmp	r2, r3
 800372e:	d101      	bne.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8003730:	2301      	movs	r3, #1
 8003732:	e113      	b.n	800395c <HAL_RCCEx_PeriphCLKConfig+0x308>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8003734:	4b8b      	ldr	r3, [pc, #556]	; (8003964 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003736:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003738:	23c0      	movs	r3, #192	; 0xc0
 800373a:	029b      	lsls	r3, r3, #10
 800373c:	4013      	ands	r3, r2
 800373e:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d049      	beq.n	80037da <HAL_RCCEx_PeriphCLKConfig+0x186>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	685a      	ldr	r2, [r3, #4]
 800374a:	23c0      	movs	r3, #192	; 0xc0
 800374c:	029b      	lsls	r3, r3, #10
 800374e:	4013      	ands	r3, r2
 8003750:	68fa      	ldr	r2, [r7, #12]
 8003752:	429a      	cmp	r2, r3
 8003754:	d004      	beq.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	2220      	movs	r2, #32
 800375c:	4013      	ands	r3, r2
 800375e:	d10d      	bne.n	800377c <HAL_RCCEx_PeriphCLKConfig+0x128>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	689a      	ldr	r2, [r3, #8]
 8003764:	23c0      	movs	r3, #192	; 0xc0
 8003766:	029b      	lsls	r3, r3, #10
 8003768:	4013      	ands	r3, r2
 800376a:	68fa      	ldr	r2, [r7, #12]
 800376c:	429a      	cmp	r2, r3
 800376e:	d034      	beq.n	80037da <HAL_RCCEx_PeriphCLKConfig+0x186>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681a      	ldr	r2, [r3, #0]
 8003774:	2380      	movs	r3, #128	; 0x80
 8003776:	011b      	lsls	r3, r3, #4
 8003778:	4013      	ands	r3, r2
 800377a:	d02e      	beq.n	80037da <HAL_RCCEx_PeriphCLKConfig+0x186>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 800377c:	4b79      	ldr	r3, [pc, #484]	; (8003964 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800377e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003780:	4a7a      	ldr	r2, [pc, #488]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8003782:	4013      	ands	r3, r2
 8003784:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003786:	4b77      	ldr	r3, [pc, #476]	; (8003964 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003788:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800378a:	4b76      	ldr	r3, [pc, #472]	; (8003964 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800378c:	2180      	movs	r1, #128	; 0x80
 800378e:	0309      	lsls	r1, r1, #12
 8003790:	430a      	orrs	r2, r1
 8003792:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003794:	4b73      	ldr	r3, [pc, #460]	; (8003964 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003796:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003798:	4b72      	ldr	r3, [pc, #456]	; (8003964 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800379a:	4975      	ldr	r1, [pc, #468]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x31c>)
 800379c:	400a      	ands	r2, r1
 800379e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 80037a0:	4b70      	ldr	r3, [pc, #448]	; (8003964 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80037a2:	68fa      	ldr	r2, [r7, #12]
 80037a4:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 80037a6:	68fa      	ldr	r2, [r7, #12]
 80037a8:	2380      	movs	r3, #128	; 0x80
 80037aa:	005b      	lsls	r3, r3, #1
 80037ac:	4013      	ands	r3, r2
 80037ae:	d014      	beq.n	80037da <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037b0:	f7fe fb6c 	bl	8001e8c <HAL_GetTick>
 80037b4:	0003      	movs	r3, r0
 80037b6:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80037b8:	e009      	b.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0x17a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80037ba:	f7fe fb67 	bl	8001e8c <HAL_GetTick>
 80037be:	0002      	movs	r2, r0
 80037c0:	693b      	ldr	r3, [r7, #16]
 80037c2:	1ad3      	subs	r3, r2, r3
 80037c4:	4a6b      	ldr	r2, [pc, #428]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d901      	bls.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0x17a>
          {
            return HAL_TIMEOUT;
 80037ca:	2303      	movs	r3, #3
 80037cc:	e0c6      	b.n	800395c <HAL_RCCEx_PeriphCLKConfig+0x308>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80037ce:	4b65      	ldr	r3, [pc, #404]	; (8003964 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80037d0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80037d2:	2380      	movs	r3, #128	; 0x80
 80037d4:	009b      	lsls	r3, r3, #2
 80037d6:	4013      	ands	r3, r2
 80037d8:	d0ef      	beq.n	80037ba <HAL_RCCEx_PeriphCLKConfig+0x166>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681a      	ldr	r2, [r3, #0]
 80037de:	2380      	movs	r3, #128	; 0x80
 80037e0:	011b      	lsls	r3, r3, #4
 80037e2:	4013      	ands	r3, r2
 80037e4:	d01f      	beq.n	8003826 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	689a      	ldr	r2, [r3, #8]
 80037ea:	23c0      	movs	r3, #192	; 0xc0
 80037ec:	029b      	lsls	r3, r3, #10
 80037ee:	401a      	ands	r2, r3
 80037f0:	23c0      	movs	r3, #192	; 0xc0
 80037f2:	029b      	lsls	r3, r3, #10
 80037f4:	429a      	cmp	r2, r3
 80037f6:	d10c      	bne.n	8003812 <HAL_RCCEx_PeriphCLKConfig+0x1be>
 80037f8:	4b5a      	ldr	r3, [pc, #360]	; (8003964 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4a5e      	ldr	r2, [pc, #376]	; (8003978 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 80037fe:	4013      	ands	r3, r2
 8003800:	0019      	movs	r1, r3
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	689a      	ldr	r2, [r3, #8]
 8003806:	23c0      	movs	r3, #192	; 0xc0
 8003808:	039b      	lsls	r3, r3, #14
 800380a:	401a      	ands	r2, r3
 800380c:	4b55      	ldr	r3, [pc, #340]	; (8003964 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800380e:	430a      	orrs	r2, r1
 8003810:	601a      	str	r2, [r3, #0]
 8003812:	4b54      	ldr	r3, [pc, #336]	; (8003964 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003814:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	689a      	ldr	r2, [r3, #8]
 800381a:	23c0      	movs	r3, #192	; 0xc0
 800381c:	029b      	lsls	r3, r3, #10
 800381e:	401a      	ands	r2, r3
 8003820:	4b50      	ldr	r3, [pc, #320]	; (8003964 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003822:	430a      	orrs	r2, r1
 8003824:	651a      	str	r2, [r3, #80]	; 0x50
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	2220      	movs	r2, #32
 800382c:	4013      	ands	r3, r2
 800382e:	d01f      	beq.n	8003870 <HAL_RCCEx_PeriphCLKConfig+0x21c>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	685a      	ldr	r2, [r3, #4]
 8003834:	23c0      	movs	r3, #192	; 0xc0
 8003836:	029b      	lsls	r3, r3, #10
 8003838:	401a      	ands	r2, r3
 800383a:	23c0      	movs	r3, #192	; 0xc0
 800383c:	029b      	lsls	r3, r3, #10
 800383e:	429a      	cmp	r2, r3
 8003840:	d10c      	bne.n	800385c <HAL_RCCEx_PeriphCLKConfig+0x208>
 8003842:	4b48      	ldr	r3, [pc, #288]	; (8003964 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a4c      	ldr	r2, [pc, #304]	; (8003978 <HAL_RCCEx_PeriphCLKConfig+0x324>)
 8003848:	4013      	ands	r3, r2
 800384a:	0019      	movs	r1, r3
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	685a      	ldr	r2, [r3, #4]
 8003850:	23c0      	movs	r3, #192	; 0xc0
 8003852:	039b      	lsls	r3, r3, #14
 8003854:	401a      	ands	r2, r3
 8003856:	4b43      	ldr	r3, [pc, #268]	; (8003964 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003858:	430a      	orrs	r2, r1
 800385a:	601a      	str	r2, [r3, #0]
 800385c:	4b41      	ldr	r3, [pc, #260]	; (8003964 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800385e:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	685a      	ldr	r2, [r3, #4]
 8003864:	23c0      	movs	r3, #192	; 0xc0
 8003866:	029b      	lsls	r3, r3, #10
 8003868:	401a      	ands	r2, r3
 800386a:	4b3e      	ldr	r3, [pc, #248]	; (8003964 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800386c:	430a      	orrs	r2, r1
 800386e:	651a      	str	r2, [r3, #80]	; 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003870:	2317      	movs	r3, #23
 8003872:	18fb      	adds	r3, r7, r3
 8003874:	781b      	ldrb	r3, [r3, #0]
 8003876:	2b01      	cmp	r3, #1
 8003878:	d105      	bne.n	8003886 <HAL_RCCEx_PeriphCLKConfig+0x232>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800387a:	4b3a      	ldr	r3, [pc, #232]	; (8003964 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800387c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800387e:	4b39      	ldr	r3, [pc, #228]	; (8003964 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003880:	493e      	ldr	r1, [pc, #248]	; (800397c <HAL_RCCEx_PeriphCLKConfig+0x328>)
 8003882:	400a      	ands	r2, r1
 8003884:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	2201      	movs	r2, #1
 800388c:	4013      	ands	r3, r2
 800388e:	d009      	beq.n	80038a4 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003890:	4b34      	ldr	r3, [pc, #208]	; (8003964 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003892:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003894:	2203      	movs	r2, #3
 8003896:	4393      	bics	r3, r2
 8003898:	0019      	movs	r1, r3
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	68da      	ldr	r2, [r3, #12]
 800389e:	4b31      	ldr	r3, [pc, #196]	; (8003964 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80038a0:	430a      	orrs	r2, r1
 80038a2:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	2202      	movs	r2, #2
 80038aa:	4013      	ands	r3, r2
 80038ac:	d009      	beq.n	80038c2 <HAL_RCCEx_PeriphCLKConfig+0x26e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80038ae:	4b2d      	ldr	r3, [pc, #180]	; (8003964 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80038b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038b2:	220c      	movs	r2, #12
 80038b4:	4393      	bics	r3, r2
 80038b6:	0019      	movs	r1, r3
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	691a      	ldr	r2, [r3, #16]
 80038bc:	4b29      	ldr	r3, [pc, #164]	; (8003964 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80038be:	430a      	orrs	r2, r1
 80038c0:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	2204      	movs	r2, #4
 80038c8:	4013      	ands	r3, r2
 80038ca:	d009      	beq.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80038cc:	4b25      	ldr	r3, [pc, #148]	; (8003964 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80038ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038d0:	4a2b      	ldr	r2, [pc, #172]	; (8003980 <HAL_RCCEx_PeriphCLKConfig+0x32c>)
 80038d2:	4013      	ands	r3, r2
 80038d4:	0019      	movs	r1, r3
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	695a      	ldr	r2, [r3, #20]
 80038da:	4b22      	ldr	r3, [pc, #136]	; (8003964 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80038dc:	430a      	orrs	r2, r1
 80038de:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	2208      	movs	r2, #8
 80038e6:	4013      	ands	r3, r2
 80038e8:	d009      	beq.n	80038fe <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80038ea:	4b1e      	ldr	r3, [pc, #120]	; (8003964 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80038ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038ee:	4a25      	ldr	r2, [pc, #148]	; (8003984 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80038f0:	4013      	ands	r3, r2
 80038f2:	0019      	movs	r1, r3
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	699a      	ldr	r2, [r3, #24]
 80038f8:	4b1a      	ldr	r3, [pc, #104]	; (8003964 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 80038fa:	430a      	orrs	r2, r1
 80038fc:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681a      	ldr	r2, [r3, #0]
 8003902:	2380      	movs	r3, #128	; 0x80
 8003904:	005b      	lsls	r3, r3, #1
 8003906:	4013      	ands	r3, r2
 8003908:	d009      	beq.n	800391e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800390a:	4b16      	ldr	r3, [pc, #88]	; (8003964 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800390c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800390e:	4a17      	ldr	r2, [pc, #92]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x318>)
 8003910:	4013      	ands	r3, r2
 8003912:	0019      	movs	r1, r3
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	69da      	ldr	r2, [r3, #28]
 8003918:	4b12      	ldr	r3, [pc, #72]	; (8003964 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800391a:	430a      	orrs	r2, r1
 800391c:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	2240      	movs	r2, #64	; 0x40
 8003924:	4013      	ands	r3, r2
 8003926:	d009      	beq.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x2e8>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003928:	4b0e      	ldr	r3, [pc, #56]	; (8003964 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 800392a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800392c:	4a16      	ldr	r2, [pc, #88]	; (8003988 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 800392e:	4013      	ands	r3, r2
 8003930:	0019      	movs	r1, r3
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003936:	4b0b      	ldr	r3, [pc, #44]	; (8003964 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003938:	430a      	orrs	r2, r1
 800393a:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	2280      	movs	r2, #128	; 0x80
 8003942:	4013      	ands	r3, r2
 8003944:	d009      	beq.n	800395a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8003946:	4b07      	ldr	r3, [pc, #28]	; (8003964 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003948:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800394a:	4a10      	ldr	r2, [pc, #64]	; (800398c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800394c:	4013      	ands	r3, r2
 800394e:	0019      	movs	r1, r3
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6a1a      	ldr	r2, [r3, #32]
 8003954:	4b03      	ldr	r3, [pc, #12]	; (8003964 <HAL_RCCEx_PeriphCLKConfig+0x310>)
 8003956:	430a      	orrs	r2, r1
 8003958:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800395a:	2300      	movs	r3, #0
}
 800395c:	0018      	movs	r0, r3
 800395e:	46bd      	mov	sp, r7
 8003960:	b006      	add	sp, #24
 8003962:	bd80      	pop	{r7, pc}
 8003964:	40021000 	.word	0x40021000
 8003968:	40007000 	.word	0x40007000
 800396c:	fffcffff 	.word	0xfffcffff
 8003970:	fff7ffff 	.word	0xfff7ffff
 8003974:	00001388 	.word	0x00001388
 8003978:	ffcfffff 	.word	0xffcfffff
 800397c:	efffffff 	.word	0xefffffff
 8003980:	fffff3ff 	.word	0xfffff3ff
 8003984:	ffffcfff 	.word	0xffffcfff
 8003988:	fbffffff 	.word	0xfbffffff
 800398c:	fff3ffff 	.word	0xfff3ffff

08003990 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b082      	sub	sp, #8
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d101      	bne.n	80039a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800399e:	2301      	movs	r3, #1
 80039a0:	e044      	b.n	8003a2c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d107      	bne.n	80039ba <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2278      	movs	r2, #120	; 0x78
 80039ae:	2100      	movs	r1, #0
 80039b0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	0018      	movs	r0, r3
 80039b6:	f7fe f98d 	bl	8001cd4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2224      	movs	r2, #36	; 0x24
 80039be:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	681a      	ldr	r2, [r3, #0]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	2101      	movs	r1, #1
 80039cc:	438a      	bics	r2, r1
 80039ce:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	0018      	movs	r0, r3
 80039d4:	f000 fc2c 	bl	8004230 <UART_SetConfig>
 80039d8:	0003      	movs	r3, r0
 80039da:	2b01      	cmp	r3, #1
 80039dc:	d101      	bne.n	80039e2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80039de:	2301      	movs	r3, #1
 80039e0:	e024      	b.n	8003a2c <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d003      	beq.n	80039f2 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	0018      	movs	r0, r3
 80039ee:	f000 febd 	bl	800476c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	685a      	ldr	r2, [r3, #4]
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	490d      	ldr	r1, [pc, #52]	; (8003a34 <HAL_UART_Init+0xa4>)
 80039fe:	400a      	ands	r2, r1
 8003a00:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	689a      	ldr	r2, [r3, #8]
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	212a      	movs	r1, #42	; 0x2a
 8003a0e:	438a      	bics	r2, r1
 8003a10:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	681a      	ldr	r2, [r3, #0]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	2101      	movs	r1, #1
 8003a1e:	430a      	orrs	r2, r1
 8003a20:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	0018      	movs	r0, r3
 8003a26:	f000 ff55 	bl	80048d4 <UART_CheckIdleState>
 8003a2a:	0003      	movs	r3, r0
}
 8003a2c:	0018      	movs	r0, r3
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	b002      	add	sp, #8
 8003a32:	bd80      	pop	{r7, pc}
 8003a34:	ffffb7ff 	.word	0xffffb7ff

08003a38 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b08a      	sub	sp, #40	; 0x28
 8003a3c:	af02      	add	r7, sp, #8
 8003a3e:	60f8      	str	r0, [r7, #12]
 8003a40:	60b9      	str	r1, [r7, #8]
 8003a42:	603b      	str	r3, [r7, #0]
 8003a44:	1dbb      	adds	r3, r7, #6
 8003a46:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a4c:	2b20      	cmp	r3, #32
 8003a4e:	d000      	beq.n	8003a52 <HAL_UART_Transmit+0x1a>
 8003a50:	e08c      	b.n	8003b6c <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a52:	68bb      	ldr	r3, [r7, #8]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d003      	beq.n	8003a60 <HAL_UART_Transmit+0x28>
 8003a58:	1dbb      	adds	r3, r7, #6
 8003a5a:	881b      	ldrh	r3, [r3, #0]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d101      	bne.n	8003a64 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8003a60:	2301      	movs	r3, #1
 8003a62:	e084      	b.n	8003b6e <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	689a      	ldr	r2, [r3, #8]
 8003a68:	2380      	movs	r3, #128	; 0x80
 8003a6a:	015b      	lsls	r3, r3, #5
 8003a6c:	429a      	cmp	r2, r3
 8003a6e:	d109      	bne.n	8003a84 <HAL_UART_Transmit+0x4c>
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	691b      	ldr	r3, [r3, #16]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d105      	bne.n	8003a84 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003a78:	68bb      	ldr	r3, [r7, #8]
 8003a7a:	2201      	movs	r2, #1
 8003a7c:	4013      	ands	r3, r2
 8003a7e:	d001      	beq.n	8003a84 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8003a80:	2301      	movs	r3, #1
 8003a82:	e074      	b.n	8003b6e <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	2284      	movs	r2, #132	; 0x84
 8003a88:	2100      	movs	r1, #0
 8003a8a:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	2221      	movs	r2, #33	; 0x21
 8003a90:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003a92:	f7fe f9fb 	bl	8001e8c <HAL_GetTick>
 8003a96:	0003      	movs	r3, r0
 8003a98:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	1dba      	adds	r2, r7, #6
 8003a9e:	2150      	movs	r1, #80	; 0x50
 8003aa0:	8812      	ldrh	r2, [r2, #0]
 8003aa2:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	1dba      	adds	r2, r7, #6
 8003aa8:	2152      	movs	r1, #82	; 0x52
 8003aaa:	8812      	ldrh	r2, [r2, #0]
 8003aac:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	689a      	ldr	r2, [r3, #8]
 8003ab2:	2380      	movs	r3, #128	; 0x80
 8003ab4:	015b      	lsls	r3, r3, #5
 8003ab6:	429a      	cmp	r2, r3
 8003ab8:	d108      	bne.n	8003acc <HAL_UART_Transmit+0x94>
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	691b      	ldr	r3, [r3, #16]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d104      	bne.n	8003acc <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003ac6:	68bb      	ldr	r3, [r7, #8]
 8003ac8:	61bb      	str	r3, [r7, #24]
 8003aca:	e003      	b.n	8003ad4 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 8003acc:	68bb      	ldr	r3, [r7, #8]
 8003ace:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003ad4:	e02f      	b.n	8003b36 <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003ad6:	697a      	ldr	r2, [r7, #20]
 8003ad8:	68f8      	ldr	r0, [r7, #12]
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	9300      	str	r3, [sp, #0]
 8003ade:	0013      	movs	r3, r2
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	2180      	movs	r1, #128	; 0x80
 8003ae4:	f000 ff9e 	bl	8004a24 <UART_WaitOnFlagUntilTimeout>
 8003ae8:	1e03      	subs	r3, r0, #0
 8003aea:	d004      	beq.n	8003af6 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	2220      	movs	r2, #32
 8003af0:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8003af2:	2303      	movs	r3, #3
 8003af4:	e03b      	b.n	8003b6e <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 8003af6:	69fb      	ldr	r3, [r7, #28]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d10b      	bne.n	8003b14 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003afc:	69bb      	ldr	r3, [r7, #24]
 8003afe:	881b      	ldrh	r3, [r3, #0]
 8003b00:	001a      	movs	r2, r3
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	05d2      	lsls	r2, r2, #23
 8003b08:	0dd2      	lsrs	r2, r2, #23
 8003b0a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003b0c:	69bb      	ldr	r3, [r7, #24]
 8003b0e:	3302      	adds	r3, #2
 8003b10:	61bb      	str	r3, [r7, #24]
 8003b12:	e007      	b.n	8003b24 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003b14:	69fb      	ldr	r3, [r7, #28]
 8003b16:	781a      	ldrb	r2, [r3, #0]
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003b1e:	69fb      	ldr	r3, [r7, #28]
 8003b20:	3301      	adds	r3, #1
 8003b22:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	2252      	movs	r2, #82	; 0x52
 8003b28:	5a9b      	ldrh	r3, [r3, r2]
 8003b2a:	b29b      	uxth	r3, r3
 8003b2c:	3b01      	subs	r3, #1
 8003b2e:	b299      	uxth	r1, r3
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	2252      	movs	r2, #82	; 0x52
 8003b34:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	2252      	movs	r2, #82	; 0x52
 8003b3a:	5a9b      	ldrh	r3, [r3, r2]
 8003b3c:	b29b      	uxth	r3, r3
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d1c9      	bne.n	8003ad6 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003b42:	697a      	ldr	r2, [r7, #20]
 8003b44:	68f8      	ldr	r0, [r7, #12]
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	9300      	str	r3, [sp, #0]
 8003b4a:	0013      	movs	r3, r2
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	2140      	movs	r1, #64	; 0x40
 8003b50:	f000 ff68 	bl	8004a24 <UART_WaitOnFlagUntilTimeout>
 8003b54:	1e03      	subs	r3, r0, #0
 8003b56:	d004      	beq.n	8003b62 <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	2220      	movs	r2, #32
 8003b5c:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8003b5e:	2303      	movs	r3, #3
 8003b60:	e005      	b.n	8003b6e <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	2220      	movs	r2, #32
 8003b66:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003b68:	2300      	movs	r3, #0
 8003b6a:	e000      	b.n	8003b6e <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8003b6c:	2302      	movs	r3, #2
  }
}
 8003b6e:	0018      	movs	r0, r3
 8003b70:	46bd      	mov	sp, r7
 8003b72:	b008      	add	sp, #32
 8003b74:	bd80      	pop	{r7, pc}
	...

08003b78 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b088      	sub	sp, #32
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	60f8      	str	r0, [r7, #12]
 8003b80:	60b9      	str	r1, [r7, #8]
 8003b82:	1dbb      	adds	r3, r7, #6
 8003b84:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	2280      	movs	r2, #128	; 0x80
 8003b8a:	589b      	ldr	r3, [r3, r2]
 8003b8c:	2b20      	cmp	r3, #32
 8003b8e:	d14a      	bne.n	8003c26 <HAL_UART_Receive_IT+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b90:	68bb      	ldr	r3, [r7, #8]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d003      	beq.n	8003b9e <HAL_UART_Receive_IT+0x26>
 8003b96:	1dbb      	adds	r3, r7, #6
 8003b98:	881b      	ldrh	r3, [r3, #0]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d101      	bne.n	8003ba2 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	e042      	b.n	8003c28 <HAL_UART_Receive_IT+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	689a      	ldr	r2, [r3, #8]
 8003ba6:	2380      	movs	r3, #128	; 0x80
 8003ba8:	015b      	lsls	r3, r3, #5
 8003baa:	429a      	cmp	r2, r3
 8003bac:	d109      	bne.n	8003bc2 <HAL_UART_Receive_IT+0x4a>
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	691b      	ldr	r3, [r3, #16]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d105      	bne.n	8003bc2 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003bb6:	68bb      	ldr	r3, [r7, #8]
 8003bb8:	2201      	movs	r2, #1
 8003bba:	4013      	ands	r3, r2
 8003bbc:	d001      	beq.n	8003bc2 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	e032      	b.n	8003c28 <HAL_UART_Receive_IT+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4a18      	ldr	r2, [pc, #96]	; (8003c30 <HAL_UART_Receive_IT+0xb8>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d020      	beq.n	8003c14 <HAL_UART_Receive_IT+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	685a      	ldr	r2, [r3, #4]
 8003bd8:	2380      	movs	r3, #128	; 0x80
 8003bda:	041b      	lsls	r3, r3, #16
 8003bdc:	4013      	ands	r3, r2
 8003bde:	d019      	beq.n	8003c14 <HAL_UART_Receive_IT+0x9c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003be0:	f3ef 8310 	mrs	r3, PRIMASK
 8003be4:	613b      	str	r3, [r7, #16]
  return(result);
 8003be6:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003be8:	61fb      	str	r3, [r7, #28]
 8003bea:	2301      	movs	r3, #1
 8003bec:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bee:	697b      	ldr	r3, [r7, #20]
 8003bf0:	f383 8810 	msr	PRIMASK, r3
}
 8003bf4:	46c0      	nop			; (mov r8, r8)
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	681a      	ldr	r2, [r3, #0]
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	2180      	movs	r1, #128	; 0x80
 8003c02:	04c9      	lsls	r1, r1, #19
 8003c04:	430a      	orrs	r2, r1
 8003c06:	601a      	str	r2, [r3, #0]
 8003c08:	69fb      	ldr	r3, [r7, #28]
 8003c0a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c0c:	69bb      	ldr	r3, [r7, #24]
 8003c0e:	f383 8810 	msr	PRIMASK, r3
}
 8003c12:	46c0      	nop			; (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003c14:	1dbb      	adds	r3, r7, #6
 8003c16:	881a      	ldrh	r2, [r3, #0]
 8003c18:	68b9      	ldr	r1, [r7, #8]
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	0018      	movs	r0, r3
 8003c1e:	f000 ff6b 	bl	8004af8 <UART_Start_Receive_IT>
 8003c22:	0003      	movs	r3, r0
 8003c24:	e000      	b.n	8003c28 <HAL_UART_Receive_IT+0xb0>
  }
  else
  {
    return HAL_BUSY;
 8003c26:	2302      	movs	r3, #2
  }
}
 8003c28:	0018      	movs	r0, r3
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	b008      	add	sp, #32
 8003c2e:	bd80      	pop	{r7, pc}
 8003c30:	40004800 	.word	0x40004800

08003c34 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003c34:	b590      	push	{r4, r7, lr}
 8003c36:	b0ab      	sub	sp, #172	; 0xac
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	69db      	ldr	r3, [r3, #28]
 8003c42:	22a4      	movs	r2, #164	; 0xa4
 8003c44:	18b9      	adds	r1, r7, r2
 8003c46:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	20a0      	movs	r0, #160	; 0xa0
 8003c50:	1839      	adds	r1, r7, r0
 8003c52:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	689b      	ldr	r3, [r3, #8]
 8003c5a:	219c      	movs	r1, #156	; 0x9c
 8003c5c:	1879      	adds	r1, r7, r1
 8003c5e:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003c60:	0011      	movs	r1, r2
 8003c62:	18bb      	adds	r3, r7, r2
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4a99      	ldr	r2, [pc, #612]	; (8003ecc <HAL_UART_IRQHandler+0x298>)
 8003c68:	4013      	ands	r3, r2
 8003c6a:	2298      	movs	r2, #152	; 0x98
 8003c6c:	18bc      	adds	r4, r7, r2
 8003c6e:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8003c70:	18bb      	adds	r3, r7, r2
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d114      	bne.n	8003ca2 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003c78:	187b      	adds	r3, r7, r1
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	2220      	movs	r2, #32
 8003c7e:	4013      	ands	r3, r2
 8003c80:	d00f      	beq.n	8003ca2 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003c82:	183b      	adds	r3, r7, r0
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	2220      	movs	r2, #32
 8003c88:	4013      	ands	r3, r2
 8003c8a:	d00a      	beq.n	8003ca2 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d100      	bne.n	8003c96 <HAL_UART_IRQHandler+0x62>
 8003c94:	e2a0      	b.n	80041d8 <HAL_UART_IRQHandler+0x5a4>
      {
        huart->RxISR(huart);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003c9a:	687a      	ldr	r2, [r7, #4]
 8003c9c:	0010      	movs	r0, r2
 8003c9e:	4798      	blx	r3
      }
      return;
 8003ca0:	e29a      	b.n	80041d8 <HAL_UART_IRQHandler+0x5a4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003ca2:	2398      	movs	r3, #152	; 0x98
 8003ca4:	18fb      	adds	r3, r7, r3
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d100      	bne.n	8003cae <HAL_UART_IRQHandler+0x7a>
 8003cac:	e114      	b.n	8003ed8 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003cae:	239c      	movs	r3, #156	; 0x9c
 8003cb0:	18fb      	adds	r3, r7, r3
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	2201      	movs	r2, #1
 8003cb6:	4013      	ands	r3, r2
 8003cb8:	d106      	bne.n	8003cc8 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003cba:	23a0      	movs	r3, #160	; 0xa0
 8003cbc:	18fb      	adds	r3, r7, r3
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4a83      	ldr	r2, [pc, #524]	; (8003ed0 <HAL_UART_IRQHandler+0x29c>)
 8003cc2:	4013      	ands	r3, r2
 8003cc4:	d100      	bne.n	8003cc8 <HAL_UART_IRQHandler+0x94>
 8003cc6:	e107      	b.n	8003ed8 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003cc8:	23a4      	movs	r3, #164	; 0xa4
 8003cca:	18fb      	adds	r3, r7, r3
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	2201      	movs	r2, #1
 8003cd0:	4013      	ands	r3, r2
 8003cd2:	d012      	beq.n	8003cfa <HAL_UART_IRQHandler+0xc6>
 8003cd4:	23a0      	movs	r3, #160	; 0xa0
 8003cd6:	18fb      	adds	r3, r7, r3
 8003cd8:	681a      	ldr	r2, [r3, #0]
 8003cda:	2380      	movs	r3, #128	; 0x80
 8003cdc:	005b      	lsls	r3, r3, #1
 8003cde:	4013      	ands	r3, r2
 8003ce0:	d00b      	beq.n	8003cfa <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	2201      	movs	r2, #1
 8003ce8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2284      	movs	r2, #132	; 0x84
 8003cee:	589b      	ldr	r3, [r3, r2]
 8003cf0:	2201      	movs	r2, #1
 8003cf2:	431a      	orrs	r2, r3
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2184      	movs	r1, #132	; 0x84
 8003cf8:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003cfa:	23a4      	movs	r3, #164	; 0xa4
 8003cfc:	18fb      	adds	r3, r7, r3
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	2202      	movs	r2, #2
 8003d02:	4013      	ands	r3, r2
 8003d04:	d011      	beq.n	8003d2a <HAL_UART_IRQHandler+0xf6>
 8003d06:	239c      	movs	r3, #156	; 0x9c
 8003d08:	18fb      	adds	r3, r7, r3
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	2201      	movs	r2, #1
 8003d0e:	4013      	ands	r3, r2
 8003d10:	d00b      	beq.n	8003d2a <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	2202      	movs	r2, #2
 8003d18:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2284      	movs	r2, #132	; 0x84
 8003d1e:	589b      	ldr	r3, [r3, r2]
 8003d20:	2204      	movs	r2, #4
 8003d22:	431a      	orrs	r2, r3
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2184      	movs	r1, #132	; 0x84
 8003d28:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003d2a:	23a4      	movs	r3, #164	; 0xa4
 8003d2c:	18fb      	adds	r3, r7, r3
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	2204      	movs	r2, #4
 8003d32:	4013      	ands	r3, r2
 8003d34:	d011      	beq.n	8003d5a <HAL_UART_IRQHandler+0x126>
 8003d36:	239c      	movs	r3, #156	; 0x9c
 8003d38:	18fb      	adds	r3, r7, r3
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	2201      	movs	r2, #1
 8003d3e:	4013      	ands	r3, r2
 8003d40:	d00b      	beq.n	8003d5a <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	2204      	movs	r2, #4
 8003d48:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2284      	movs	r2, #132	; 0x84
 8003d4e:	589b      	ldr	r3, [r3, r2]
 8003d50:	2202      	movs	r2, #2
 8003d52:	431a      	orrs	r2, r3
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2184      	movs	r1, #132	; 0x84
 8003d58:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003d5a:	23a4      	movs	r3, #164	; 0xa4
 8003d5c:	18fb      	adds	r3, r7, r3
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	2208      	movs	r2, #8
 8003d62:	4013      	ands	r3, r2
 8003d64:	d017      	beq.n	8003d96 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003d66:	23a0      	movs	r3, #160	; 0xa0
 8003d68:	18fb      	adds	r3, r7, r3
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	2220      	movs	r2, #32
 8003d6e:	4013      	ands	r3, r2
 8003d70:	d105      	bne.n	8003d7e <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003d72:	239c      	movs	r3, #156	; 0x9c
 8003d74:	18fb      	adds	r3, r7, r3
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	2201      	movs	r2, #1
 8003d7a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003d7c:	d00b      	beq.n	8003d96 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	2208      	movs	r2, #8
 8003d84:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2284      	movs	r2, #132	; 0x84
 8003d8a:	589b      	ldr	r3, [r3, r2]
 8003d8c:	2208      	movs	r2, #8
 8003d8e:	431a      	orrs	r2, r3
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2184      	movs	r1, #132	; 0x84
 8003d94:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003d96:	23a4      	movs	r3, #164	; 0xa4
 8003d98:	18fb      	adds	r3, r7, r3
 8003d9a:	681a      	ldr	r2, [r3, #0]
 8003d9c:	2380      	movs	r3, #128	; 0x80
 8003d9e:	011b      	lsls	r3, r3, #4
 8003da0:	4013      	ands	r3, r2
 8003da2:	d013      	beq.n	8003dcc <HAL_UART_IRQHandler+0x198>
 8003da4:	23a0      	movs	r3, #160	; 0xa0
 8003da6:	18fb      	adds	r3, r7, r3
 8003da8:	681a      	ldr	r2, [r3, #0]
 8003daa:	2380      	movs	r3, #128	; 0x80
 8003dac:	04db      	lsls	r3, r3, #19
 8003dae:	4013      	ands	r3, r2
 8003db0:	d00c      	beq.n	8003dcc <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	2280      	movs	r2, #128	; 0x80
 8003db8:	0112      	lsls	r2, r2, #4
 8003dba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2284      	movs	r2, #132	; 0x84
 8003dc0:	589b      	ldr	r3, [r3, r2]
 8003dc2:	2220      	movs	r2, #32
 8003dc4:	431a      	orrs	r2, r3
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2184      	movs	r1, #132	; 0x84
 8003dca:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2284      	movs	r2, #132	; 0x84
 8003dd0:	589b      	ldr	r3, [r3, r2]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d100      	bne.n	8003dd8 <HAL_UART_IRQHandler+0x1a4>
 8003dd6:	e201      	b.n	80041dc <HAL_UART_IRQHandler+0x5a8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003dd8:	23a4      	movs	r3, #164	; 0xa4
 8003dda:	18fb      	adds	r3, r7, r3
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	2220      	movs	r2, #32
 8003de0:	4013      	ands	r3, r2
 8003de2:	d00e      	beq.n	8003e02 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003de4:	23a0      	movs	r3, #160	; 0xa0
 8003de6:	18fb      	adds	r3, r7, r3
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	2220      	movs	r2, #32
 8003dec:	4013      	ands	r3, r2
 8003dee:	d008      	beq.n	8003e02 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d004      	beq.n	8003e02 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003dfc:	687a      	ldr	r2, [r7, #4]
 8003dfe:	0010      	movs	r0, r2
 8003e00:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2284      	movs	r2, #132	; 0x84
 8003e06:	589b      	ldr	r3, [r3, r2]
 8003e08:	2194      	movs	r1, #148	; 0x94
 8003e0a:	187a      	adds	r2, r7, r1
 8003e0c:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	689b      	ldr	r3, [r3, #8]
 8003e14:	2240      	movs	r2, #64	; 0x40
 8003e16:	4013      	ands	r3, r2
 8003e18:	2b40      	cmp	r3, #64	; 0x40
 8003e1a:	d004      	beq.n	8003e26 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003e1c:	187b      	adds	r3, r7, r1
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	2228      	movs	r2, #40	; 0x28
 8003e22:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003e24:	d047      	beq.n	8003eb6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	0018      	movs	r0, r3
 8003e2a:	f000 ff2f 	bl	8004c8c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	689b      	ldr	r3, [r3, #8]
 8003e34:	2240      	movs	r2, #64	; 0x40
 8003e36:	4013      	ands	r3, r2
 8003e38:	2b40      	cmp	r3, #64	; 0x40
 8003e3a:	d137      	bne.n	8003eac <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e3c:	f3ef 8310 	mrs	r3, PRIMASK
 8003e40:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8003e42:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e44:	2090      	movs	r0, #144	; 0x90
 8003e46:	183a      	adds	r2, r7, r0
 8003e48:	6013      	str	r3, [r2, #0]
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e4e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003e50:	f383 8810 	msr	PRIMASK, r3
}
 8003e54:	46c0      	nop			; (mov r8, r8)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	689a      	ldr	r2, [r3, #8]
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	2140      	movs	r1, #64	; 0x40
 8003e62:	438a      	bics	r2, r1
 8003e64:	609a      	str	r2, [r3, #8]
 8003e66:	183b      	adds	r3, r7, r0
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e6c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003e6e:	f383 8810 	msr	PRIMASK, r3
}
 8003e72:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d012      	beq.n	8003ea2 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e80:	4a14      	ldr	r2, [pc, #80]	; (8003ed4 <HAL_UART_IRQHandler+0x2a0>)
 8003e82:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e88:	0018      	movs	r0, r3
 8003e8a:	f7fe f94b 	bl	8002124 <HAL_DMA_Abort_IT>
 8003e8e:	1e03      	subs	r3, r0, #0
 8003e90:	d01a      	beq.n	8003ec8 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e96:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e9c:	0018      	movs	r0, r3
 8003e9e:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ea0:	e012      	b.n	8003ec8 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	0018      	movs	r0, r3
 8003ea6:	f000 f9af 	bl	8004208 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003eaa:	e00d      	b.n	8003ec8 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	0018      	movs	r0, r3
 8003eb0:	f000 f9aa 	bl	8004208 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003eb4:	e008      	b.n	8003ec8 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	0018      	movs	r0, r3
 8003eba:	f000 f9a5 	bl	8004208 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2284      	movs	r2, #132	; 0x84
 8003ec2:	2100      	movs	r1, #0
 8003ec4:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8003ec6:	e189      	b.n	80041dc <HAL_UART_IRQHandler+0x5a8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ec8:	46c0      	nop			; (mov r8, r8)
    return;
 8003eca:	e187      	b.n	80041dc <HAL_UART_IRQHandler+0x5a8>
 8003ecc:	0000080f 	.word	0x0000080f
 8003ed0:	04000120 	.word	0x04000120
 8003ed4:	08004d55 	.word	0x08004d55

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003edc:	2b01      	cmp	r3, #1
 8003ede:	d000      	beq.n	8003ee2 <HAL_UART_IRQHandler+0x2ae>
 8003ee0:	e13b      	b.n	800415a <HAL_UART_IRQHandler+0x526>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003ee2:	23a4      	movs	r3, #164	; 0xa4
 8003ee4:	18fb      	adds	r3, r7, r3
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	2210      	movs	r2, #16
 8003eea:	4013      	ands	r3, r2
 8003eec:	d100      	bne.n	8003ef0 <HAL_UART_IRQHandler+0x2bc>
 8003eee:	e134      	b.n	800415a <HAL_UART_IRQHandler+0x526>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003ef0:	23a0      	movs	r3, #160	; 0xa0
 8003ef2:	18fb      	adds	r3, r7, r3
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	2210      	movs	r2, #16
 8003ef8:	4013      	ands	r3, r2
 8003efa:	d100      	bne.n	8003efe <HAL_UART_IRQHandler+0x2ca>
 8003efc:	e12d      	b.n	800415a <HAL_UART_IRQHandler+0x526>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	2210      	movs	r2, #16
 8003f04:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	689b      	ldr	r3, [r3, #8]
 8003f0c:	2240      	movs	r2, #64	; 0x40
 8003f0e:	4013      	ands	r3, r2
 8003f10:	2b40      	cmp	r3, #64	; 0x40
 8003f12:	d000      	beq.n	8003f16 <HAL_UART_IRQHandler+0x2e2>
 8003f14:	e0a1      	b.n	800405a <HAL_UART_IRQHandler+0x426>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	685a      	ldr	r2, [r3, #4]
 8003f1e:	217e      	movs	r1, #126	; 0x7e
 8003f20:	187b      	adds	r3, r7, r1
 8003f22:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8003f24:	187b      	adds	r3, r7, r1
 8003f26:	881b      	ldrh	r3, [r3, #0]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d100      	bne.n	8003f2e <HAL_UART_IRQHandler+0x2fa>
 8003f2c:	e158      	b.n	80041e0 <HAL_UART_IRQHandler+0x5ac>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2258      	movs	r2, #88	; 0x58
 8003f32:	5a9b      	ldrh	r3, [r3, r2]
 8003f34:	187a      	adds	r2, r7, r1
 8003f36:	8812      	ldrh	r2, [r2, #0]
 8003f38:	429a      	cmp	r2, r3
 8003f3a:	d300      	bcc.n	8003f3e <HAL_UART_IRQHandler+0x30a>
 8003f3c:	e150      	b.n	80041e0 <HAL_UART_IRQHandler+0x5ac>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	187a      	adds	r2, r7, r1
 8003f42:	215a      	movs	r1, #90	; 0x5a
 8003f44:	8812      	ldrh	r2, [r2, #0]
 8003f46:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	2220      	movs	r2, #32
 8003f52:	4013      	ands	r3, r2
 8003f54:	d16f      	bne.n	8004036 <HAL_UART_IRQHandler+0x402>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f56:	f3ef 8310 	mrs	r3, PRIMASK
 8003f5a:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8003f5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003f5e:	67bb      	str	r3, [r7, #120]	; 0x78
 8003f60:	2301      	movs	r3, #1
 8003f62:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f66:	f383 8810 	msr	PRIMASK, r3
}
 8003f6a:	46c0      	nop			; (mov r8, r8)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	681a      	ldr	r2, [r3, #0]
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	499e      	ldr	r1, [pc, #632]	; (80041f0 <HAL_UART_IRQHandler+0x5bc>)
 8003f78:	400a      	ands	r2, r1
 8003f7a:	601a      	str	r2, [r3, #0]
 8003f7c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003f7e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f82:	f383 8810 	msr	PRIMASK, r3
}
 8003f86:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f88:	f3ef 8310 	mrs	r3, PRIMASK
 8003f8c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8003f8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f90:	677b      	str	r3, [r7, #116]	; 0x74
 8003f92:	2301      	movs	r3, #1
 8003f94:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f98:	f383 8810 	msr	PRIMASK, r3
}
 8003f9c:	46c0      	nop			; (mov r8, r8)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	689a      	ldr	r2, [r3, #8]
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	2101      	movs	r1, #1
 8003faa:	438a      	bics	r2, r1
 8003fac:	609a      	str	r2, [r3, #8]
 8003fae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003fb0:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fb2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003fb4:	f383 8810 	msr	PRIMASK, r3
}
 8003fb8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003fba:	f3ef 8310 	mrs	r3, PRIMASK
 8003fbe:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8003fc0:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003fc2:	673b      	str	r3, [r7, #112]	; 0x70
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fc8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003fca:	f383 8810 	msr	PRIMASK, r3
}
 8003fce:	46c0      	nop			; (mov r8, r8)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	689a      	ldr	r2, [r3, #8]
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	2140      	movs	r1, #64	; 0x40
 8003fdc:	438a      	bics	r2, r1
 8003fde:	609a      	str	r2, [r3, #8]
 8003fe0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003fe2:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fe4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003fe6:	f383 8810 	msr	PRIMASK, r3
}
 8003fea:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2280      	movs	r2, #128	; 0x80
 8003ff0:	2120      	movs	r1, #32
 8003ff2:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ffa:	f3ef 8310 	mrs	r3, PRIMASK
 8003ffe:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8004000:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004002:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004004:	2301      	movs	r3, #1
 8004006:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004008:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800400a:	f383 8810 	msr	PRIMASK, r3
}
 800400e:	46c0      	nop			; (mov r8, r8)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	681a      	ldr	r2, [r3, #0]
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	2110      	movs	r1, #16
 800401c:	438a      	bics	r2, r1
 800401e:	601a      	str	r2, [r3, #0]
 8004020:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004022:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004024:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004026:	f383 8810 	msr	PRIMASK, r3
}
 800402a:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004030:	0018      	movs	r0, r3
 8004032:	f7fe f837 	bl	80020a4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2202      	movs	r2, #2
 800403a:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2258      	movs	r2, #88	; 0x58
 8004040:	5a9a      	ldrh	r2, [r3, r2]
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	215a      	movs	r1, #90	; 0x5a
 8004046:	5a5b      	ldrh	r3, [r3, r1]
 8004048:	b29b      	uxth	r3, r3
 800404a:	1ad3      	subs	r3, r2, r3
 800404c:	b29a      	uxth	r2, r3
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	0011      	movs	r1, r2
 8004052:	0018      	movs	r0, r3
 8004054:	f000 f8e0 	bl	8004218 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004058:	e0c2      	b.n	80041e0 <HAL_UART_IRQHandler+0x5ac>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2258      	movs	r2, #88	; 0x58
 800405e:	5a99      	ldrh	r1, [r3, r2]
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	225a      	movs	r2, #90	; 0x5a
 8004064:	5a9b      	ldrh	r3, [r3, r2]
 8004066:	b29a      	uxth	r2, r3
 8004068:	208e      	movs	r0, #142	; 0x8e
 800406a:	183b      	adds	r3, r7, r0
 800406c:	1a8a      	subs	r2, r1, r2
 800406e:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	225a      	movs	r2, #90	; 0x5a
 8004074:	5a9b      	ldrh	r3, [r3, r2]
 8004076:	b29b      	uxth	r3, r3
 8004078:	2b00      	cmp	r3, #0
 800407a:	d100      	bne.n	800407e <HAL_UART_IRQHandler+0x44a>
 800407c:	e0b2      	b.n	80041e4 <HAL_UART_IRQHandler+0x5b0>
          && (nb_rx_data > 0U))
 800407e:	183b      	adds	r3, r7, r0
 8004080:	881b      	ldrh	r3, [r3, #0]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d100      	bne.n	8004088 <HAL_UART_IRQHandler+0x454>
 8004086:	e0ad      	b.n	80041e4 <HAL_UART_IRQHandler+0x5b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004088:	f3ef 8310 	mrs	r3, PRIMASK
 800408c:	60fb      	str	r3, [r7, #12]
  return(result);
 800408e:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004090:	2488      	movs	r4, #136	; 0x88
 8004092:	193a      	adds	r2, r7, r4
 8004094:	6013      	str	r3, [r2, #0]
 8004096:	2301      	movs	r3, #1
 8004098:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800409a:	693b      	ldr	r3, [r7, #16]
 800409c:	f383 8810 	msr	PRIMASK, r3
}
 80040a0:	46c0      	nop			; (mov r8, r8)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	681a      	ldr	r2, [r3, #0]
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	4951      	ldr	r1, [pc, #324]	; (80041f4 <HAL_UART_IRQHandler+0x5c0>)
 80040ae:	400a      	ands	r2, r1
 80040b0:	601a      	str	r2, [r3, #0]
 80040b2:	193b      	adds	r3, r7, r4
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040b8:	697b      	ldr	r3, [r7, #20]
 80040ba:	f383 8810 	msr	PRIMASK, r3
}
 80040be:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80040c0:	f3ef 8310 	mrs	r3, PRIMASK
 80040c4:	61bb      	str	r3, [r7, #24]
  return(result);
 80040c6:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040c8:	2484      	movs	r4, #132	; 0x84
 80040ca:	193a      	adds	r2, r7, r4
 80040cc:	6013      	str	r3, [r2, #0]
 80040ce:	2301      	movs	r3, #1
 80040d0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040d2:	69fb      	ldr	r3, [r7, #28]
 80040d4:	f383 8810 	msr	PRIMASK, r3
}
 80040d8:	46c0      	nop			; (mov r8, r8)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	689a      	ldr	r2, [r3, #8]
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	2101      	movs	r1, #1
 80040e6:	438a      	bics	r2, r1
 80040e8:	609a      	str	r2, [r3, #8]
 80040ea:	193b      	adds	r3, r7, r4
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040f0:	6a3b      	ldr	r3, [r7, #32]
 80040f2:	f383 8810 	msr	PRIMASK, r3
}
 80040f6:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2280      	movs	r2, #128	; 0x80
 80040fc:	2120      	movs	r1, #32
 80040fe:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2200      	movs	r2, #0
 8004104:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2200      	movs	r2, #0
 800410a:	669a      	str	r2, [r3, #104]	; 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800410c:	f3ef 8310 	mrs	r3, PRIMASK
 8004110:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004112:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004114:	2480      	movs	r4, #128	; 0x80
 8004116:	193a      	adds	r2, r7, r4
 8004118:	6013      	str	r3, [r2, #0]
 800411a:	2301      	movs	r3, #1
 800411c:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800411e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004120:	f383 8810 	msr	PRIMASK, r3
}
 8004124:	46c0      	nop			; (mov r8, r8)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	681a      	ldr	r2, [r3, #0]
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	2110      	movs	r1, #16
 8004132:	438a      	bics	r2, r1
 8004134:	601a      	str	r2, [r3, #0]
 8004136:	193b      	adds	r3, r7, r4
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800413c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800413e:	f383 8810 	msr	PRIMASK, r3
}
 8004142:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2202      	movs	r2, #2
 8004148:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800414a:	183b      	adds	r3, r7, r0
 800414c:	881a      	ldrh	r2, [r3, #0]
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	0011      	movs	r1, r2
 8004152:	0018      	movs	r0, r3
 8004154:	f000 f860 	bl	8004218 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004158:	e044      	b.n	80041e4 <HAL_UART_IRQHandler+0x5b0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800415a:	23a4      	movs	r3, #164	; 0xa4
 800415c:	18fb      	adds	r3, r7, r3
 800415e:	681a      	ldr	r2, [r3, #0]
 8004160:	2380      	movs	r3, #128	; 0x80
 8004162:	035b      	lsls	r3, r3, #13
 8004164:	4013      	ands	r3, r2
 8004166:	d010      	beq.n	800418a <HAL_UART_IRQHandler+0x556>
 8004168:	239c      	movs	r3, #156	; 0x9c
 800416a:	18fb      	adds	r3, r7, r3
 800416c:	681a      	ldr	r2, [r3, #0]
 800416e:	2380      	movs	r3, #128	; 0x80
 8004170:	03db      	lsls	r3, r3, #15
 8004172:	4013      	ands	r3, r2
 8004174:	d009      	beq.n	800418a <HAL_UART_IRQHandler+0x556>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	2280      	movs	r2, #128	; 0x80
 800417c:	0352      	lsls	r2, r2, #13
 800417e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	0018      	movs	r0, r3
 8004184:	f000 ffec 	bl	8005160 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004188:	e02f      	b.n	80041ea <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800418a:	23a4      	movs	r3, #164	; 0xa4
 800418c:	18fb      	adds	r3, r7, r3
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	2280      	movs	r2, #128	; 0x80
 8004192:	4013      	ands	r3, r2
 8004194:	d00f      	beq.n	80041b6 <HAL_UART_IRQHandler+0x582>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004196:	23a0      	movs	r3, #160	; 0xa0
 8004198:	18fb      	adds	r3, r7, r3
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	2280      	movs	r2, #128	; 0x80
 800419e:	4013      	ands	r3, r2
 80041a0:	d009      	beq.n	80041b6 <HAL_UART_IRQHandler+0x582>
  {
    if (huart->TxISR != NULL)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d01e      	beq.n	80041e8 <HAL_UART_IRQHandler+0x5b4>
    {
      huart->TxISR(huart);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80041ae:	687a      	ldr	r2, [r7, #4]
 80041b0:	0010      	movs	r0, r2
 80041b2:	4798      	blx	r3
    }
    return;
 80041b4:	e018      	b.n	80041e8 <HAL_UART_IRQHandler+0x5b4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80041b6:	23a4      	movs	r3, #164	; 0xa4
 80041b8:	18fb      	adds	r3, r7, r3
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	2240      	movs	r2, #64	; 0x40
 80041be:	4013      	ands	r3, r2
 80041c0:	d013      	beq.n	80041ea <HAL_UART_IRQHandler+0x5b6>
 80041c2:	23a0      	movs	r3, #160	; 0xa0
 80041c4:	18fb      	adds	r3, r7, r3
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	2240      	movs	r2, #64	; 0x40
 80041ca:	4013      	ands	r3, r2
 80041cc:	d00d      	beq.n	80041ea <HAL_UART_IRQHandler+0x5b6>
  {
    UART_EndTransmit_IT(huart);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	0018      	movs	r0, r3
 80041d2:	f000 fdd6 	bl	8004d82 <UART_EndTransmit_IT>
    return;
 80041d6:	e008      	b.n	80041ea <HAL_UART_IRQHandler+0x5b6>
      return;
 80041d8:	46c0      	nop			; (mov r8, r8)
 80041da:	e006      	b.n	80041ea <HAL_UART_IRQHandler+0x5b6>
    return;
 80041dc:	46c0      	nop			; (mov r8, r8)
 80041de:	e004      	b.n	80041ea <HAL_UART_IRQHandler+0x5b6>
      return;
 80041e0:	46c0      	nop			; (mov r8, r8)
 80041e2:	e002      	b.n	80041ea <HAL_UART_IRQHandler+0x5b6>
      return;
 80041e4:	46c0      	nop			; (mov r8, r8)
 80041e6:	e000      	b.n	80041ea <HAL_UART_IRQHandler+0x5b6>
    return;
 80041e8:	46c0      	nop			; (mov r8, r8)
  }

}
 80041ea:	46bd      	mov	sp, r7
 80041ec:	b02b      	add	sp, #172	; 0xac
 80041ee:	bd90      	pop	{r4, r7, pc}
 80041f0:	fffffeff 	.word	0xfffffeff
 80041f4:	fffffedf 	.word	0xfffffedf

080041f8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b082      	sub	sp, #8
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004200:	46c0      	nop			; (mov r8, r8)
 8004202:	46bd      	mov	sp, r7
 8004204:	b002      	add	sp, #8
 8004206:	bd80      	pop	{r7, pc}

08004208 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b082      	sub	sp, #8
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004210:	46c0      	nop			; (mov r8, r8)
 8004212:	46bd      	mov	sp, r7
 8004214:	b002      	add	sp, #8
 8004216:	bd80      	pop	{r7, pc}

08004218 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b082      	sub	sp, #8
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
 8004220:	000a      	movs	r2, r1
 8004222:	1cbb      	adds	r3, r7, #2
 8004224:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004226:	46c0      	nop			; (mov r8, r8)
 8004228:	46bd      	mov	sp, r7
 800422a:	b002      	add	sp, #8
 800422c:	bd80      	pop	{r7, pc}
	...

08004230 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004230:	b5b0      	push	{r4, r5, r7, lr}
 8004232:	b08e      	sub	sp, #56	; 0x38
 8004234:	af00      	add	r7, sp, #0
 8004236:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004238:	231a      	movs	r3, #26
 800423a:	2218      	movs	r2, #24
 800423c:	189b      	adds	r3, r3, r2
 800423e:	19db      	adds	r3, r3, r7
 8004240:	2200      	movs	r2, #0
 8004242:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004244:	69fb      	ldr	r3, [r7, #28]
 8004246:	689a      	ldr	r2, [r3, #8]
 8004248:	69fb      	ldr	r3, [r7, #28]
 800424a:	691b      	ldr	r3, [r3, #16]
 800424c:	431a      	orrs	r2, r3
 800424e:	69fb      	ldr	r3, [r7, #28]
 8004250:	695b      	ldr	r3, [r3, #20]
 8004252:	431a      	orrs	r2, r3
 8004254:	69fb      	ldr	r3, [r7, #28]
 8004256:	69db      	ldr	r3, [r3, #28]
 8004258:	4313      	orrs	r3, r2
 800425a:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800425c:	69fb      	ldr	r3, [r7, #28]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	4ac3      	ldr	r2, [pc, #780]	; (8004570 <UART_SetConfig+0x340>)
 8004264:	4013      	ands	r3, r2
 8004266:	0019      	movs	r1, r3
 8004268:	69fb      	ldr	r3, [r7, #28]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800426e:	430a      	orrs	r2, r1
 8004270:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004272:	69fb      	ldr	r3, [r7, #28]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	685b      	ldr	r3, [r3, #4]
 8004278:	4abe      	ldr	r2, [pc, #760]	; (8004574 <UART_SetConfig+0x344>)
 800427a:	4013      	ands	r3, r2
 800427c:	0019      	movs	r1, r3
 800427e:	69fb      	ldr	r3, [r7, #28]
 8004280:	68da      	ldr	r2, [r3, #12]
 8004282:	69fb      	ldr	r3, [r7, #28]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	430a      	orrs	r2, r1
 8004288:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800428a:	69fb      	ldr	r3, [r7, #28]
 800428c:	699b      	ldr	r3, [r3, #24]
 800428e:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004290:	69fb      	ldr	r3, [r7, #28]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	4ab8      	ldr	r2, [pc, #736]	; (8004578 <UART_SetConfig+0x348>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d004      	beq.n	80042a4 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800429a:	69fb      	ldr	r3, [r7, #28]
 800429c:	6a1b      	ldr	r3, [r3, #32]
 800429e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80042a0:	4313      	orrs	r3, r2
 80042a2:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80042a4:	69fb      	ldr	r3, [r7, #28]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	689b      	ldr	r3, [r3, #8]
 80042aa:	4ab4      	ldr	r2, [pc, #720]	; (800457c <UART_SetConfig+0x34c>)
 80042ac:	4013      	ands	r3, r2
 80042ae:	0019      	movs	r1, r3
 80042b0:	69fb      	ldr	r3, [r7, #28]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80042b6:	430a      	orrs	r2, r1
 80042b8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80042ba:	69fb      	ldr	r3, [r7, #28]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4ab0      	ldr	r2, [pc, #704]	; (8004580 <UART_SetConfig+0x350>)
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d131      	bne.n	8004328 <UART_SetConfig+0xf8>
 80042c4:	4baf      	ldr	r3, [pc, #700]	; (8004584 <UART_SetConfig+0x354>)
 80042c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042c8:	2203      	movs	r2, #3
 80042ca:	4013      	ands	r3, r2
 80042cc:	2b03      	cmp	r3, #3
 80042ce:	d01d      	beq.n	800430c <UART_SetConfig+0xdc>
 80042d0:	d823      	bhi.n	800431a <UART_SetConfig+0xea>
 80042d2:	2b02      	cmp	r3, #2
 80042d4:	d00c      	beq.n	80042f0 <UART_SetConfig+0xc0>
 80042d6:	d820      	bhi.n	800431a <UART_SetConfig+0xea>
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d002      	beq.n	80042e2 <UART_SetConfig+0xb2>
 80042dc:	2b01      	cmp	r3, #1
 80042de:	d00e      	beq.n	80042fe <UART_SetConfig+0xce>
 80042e0:	e01b      	b.n	800431a <UART_SetConfig+0xea>
 80042e2:	231b      	movs	r3, #27
 80042e4:	2218      	movs	r2, #24
 80042e6:	189b      	adds	r3, r3, r2
 80042e8:	19db      	adds	r3, r3, r7
 80042ea:	2201      	movs	r2, #1
 80042ec:	701a      	strb	r2, [r3, #0]
 80042ee:	e0b4      	b.n	800445a <UART_SetConfig+0x22a>
 80042f0:	231b      	movs	r3, #27
 80042f2:	2218      	movs	r2, #24
 80042f4:	189b      	adds	r3, r3, r2
 80042f6:	19db      	adds	r3, r3, r7
 80042f8:	2202      	movs	r2, #2
 80042fa:	701a      	strb	r2, [r3, #0]
 80042fc:	e0ad      	b.n	800445a <UART_SetConfig+0x22a>
 80042fe:	231b      	movs	r3, #27
 8004300:	2218      	movs	r2, #24
 8004302:	189b      	adds	r3, r3, r2
 8004304:	19db      	adds	r3, r3, r7
 8004306:	2204      	movs	r2, #4
 8004308:	701a      	strb	r2, [r3, #0]
 800430a:	e0a6      	b.n	800445a <UART_SetConfig+0x22a>
 800430c:	231b      	movs	r3, #27
 800430e:	2218      	movs	r2, #24
 8004310:	189b      	adds	r3, r3, r2
 8004312:	19db      	adds	r3, r3, r7
 8004314:	2208      	movs	r2, #8
 8004316:	701a      	strb	r2, [r3, #0]
 8004318:	e09f      	b.n	800445a <UART_SetConfig+0x22a>
 800431a:	231b      	movs	r3, #27
 800431c:	2218      	movs	r2, #24
 800431e:	189b      	adds	r3, r3, r2
 8004320:	19db      	adds	r3, r3, r7
 8004322:	2210      	movs	r2, #16
 8004324:	701a      	strb	r2, [r3, #0]
 8004326:	e098      	b.n	800445a <UART_SetConfig+0x22a>
 8004328:	69fb      	ldr	r3, [r7, #28]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4a96      	ldr	r2, [pc, #600]	; (8004588 <UART_SetConfig+0x358>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d131      	bne.n	8004396 <UART_SetConfig+0x166>
 8004332:	4b94      	ldr	r3, [pc, #592]	; (8004584 <UART_SetConfig+0x354>)
 8004334:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004336:	220c      	movs	r2, #12
 8004338:	4013      	ands	r3, r2
 800433a:	2b0c      	cmp	r3, #12
 800433c:	d01d      	beq.n	800437a <UART_SetConfig+0x14a>
 800433e:	d823      	bhi.n	8004388 <UART_SetConfig+0x158>
 8004340:	2b08      	cmp	r3, #8
 8004342:	d00c      	beq.n	800435e <UART_SetConfig+0x12e>
 8004344:	d820      	bhi.n	8004388 <UART_SetConfig+0x158>
 8004346:	2b00      	cmp	r3, #0
 8004348:	d002      	beq.n	8004350 <UART_SetConfig+0x120>
 800434a:	2b04      	cmp	r3, #4
 800434c:	d00e      	beq.n	800436c <UART_SetConfig+0x13c>
 800434e:	e01b      	b.n	8004388 <UART_SetConfig+0x158>
 8004350:	231b      	movs	r3, #27
 8004352:	2218      	movs	r2, #24
 8004354:	189b      	adds	r3, r3, r2
 8004356:	19db      	adds	r3, r3, r7
 8004358:	2200      	movs	r2, #0
 800435a:	701a      	strb	r2, [r3, #0]
 800435c:	e07d      	b.n	800445a <UART_SetConfig+0x22a>
 800435e:	231b      	movs	r3, #27
 8004360:	2218      	movs	r2, #24
 8004362:	189b      	adds	r3, r3, r2
 8004364:	19db      	adds	r3, r3, r7
 8004366:	2202      	movs	r2, #2
 8004368:	701a      	strb	r2, [r3, #0]
 800436a:	e076      	b.n	800445a <UART_SetConfig+0x22a>
 800436c:	231b      	movs	r3, #27
 800436e:	2218      	movs	r2, #24
 8004370:	189b      	adds	r3, r3, r2
 8004372:	19db      	adds	r3, r3, r7
 8004374:	2204      	movs	r2, #4
 8004376:	701a      	strb	r2, [r3, #0]
 8004378:	e06f      	b.n	800445a <UART_SetConfig+0x22a>
 800437a:	231b      	movs	r3, #27
 800437c:	2218      	movs	r2, #24
 800437e:	189b      	adds	r3, r3, r2
 8004380:	19db      	adds	r3, r3, r7
 8004382:	2208      	movs	r2, #8
 8004384:	701a      	strb	r2, [r3, #0]
 8004386:	e068      	b.n	800445a <UART_SetConfig+0x22a>
 8004388:	231b      	movs	r3, #27
 800438a:	2218      	movs	r2, #24
 800438c:	189b      	adds	r3, r3, r2
 800438e:	19db      	adds	r3, r3, r7
 8004390:	2210      	movs	r2, #16
 8004392:	701a      	strb	r2, [r3, #0]
 8004394:	e061      	b.n	800445a <UART_SetConfig+0x22a>
 8004396:	69fb      	ldr	r3, [r7, #28]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4a7c      	ldr	r2, [pc, #496]	; (800458c <UART_SetConfig+0x35c>)
 800439c:	4293      	cmp	r3, r2
 800439e:	d106      	bne.n	80043ae <UART_SetConfig+0x17e>
 80043a0:	231b      	movs	r3, #27
 80043a2:	2218      	movs	r2, #24
 80043a4:	189b      	adds	r3, r3, r2
 80043a6:	19db      	adds	r3, r3, r7
 80043a8:	2200      	movs	r2, #0
 80043aa:	701a      	strb	r2, [r3, #0]
 80043ac:	e055      	b.n	800445a <UART_SetConfig+0x22a>
 80043ae:	69fb      	ldr	r3, [r7, #28]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	4a77      	ldr	r2, [pc, #476]	; (8004590 <UART_SetConfig+0x360>)
 80043b4:	4293      	cmp	r3, r2
 80043b6:	d106      	bne.n	80043c6 <UART_SetConfig+0x196>
 80043b8:	231b      	movs	r3, #27
 80043ba:	2218      	movs	r2, #24
 80043bc:	189b      	adds	r3, r3, r2
 80043be:	19db      	adds	r3, r3, r7
 80043c0:	2200      	movs	r2, #0
 80043c2:	701a      	strb	r2, [r3, #0]
 80043c4:	e049      	b.n	800445a <UART_SetConfig+0x22a>
 80043c6:	69fb      	ldr	r3, [r7, #28]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4a6b      	ldr	r2, [pc, #428]	; (8004578 <UART_SetConfig+0x348>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d13e      	bne.n	800444e <UART_SetConfig+0x21e>
 80043d0:	4b6c      	ldr	r3, [pc, #432]	; (8004584 <UART_SetConfig+0x354>)
 80043d2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80043d4:	23c0      	movs	r3, #192	; 0xc0
 80043d6:	011b      	lsls	r3, r3, #4
 80043d8:	4013      	ands	r3, r2
 80043da:	22c0      	movs	r2, #192	; 0xc0
 80043dc:	0112      	lsls	r2, r2, #4
 80043de:	4293      	cmp	r3, r2
 80043e0:	d027      	beq.n	8004432 <UART_SetConfig+0x202>
 80043e2:	22c0      	movs	r2, #192	; 0xc0
 80043e4:	0112      	lsls	r2, r2, #4
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d82a      	bhi.n	8004440 <UART_SetConfig+0x210>
 80043ea:	2280      	movs	r2, #128	; 0x80
 80043ec:	0112      	lsls	r2, r2, #4
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d011      	beq.n	8004416 <UART_SetConfig+0x1e6>
 80043f2:	2280      	movs	r2, #128	; 0x80
 80043f4:	0112      	lsls	r2, r2, #4
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d822      	bhi.n	8004440 <UART_SetConfig+0x210>
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d004      	beq.n	8004408 <UART_SetConfig+0x1d8>
 80043fe:	2280      	movs	r2, #128	; 0x80
 8004400:	00d2      	lsls	r2, r2, #3
 8004402:	4293      	cmp	r3, r2
 8004404:	d00e      	beq.n	8004424 <UART_SetConfig+0x1f4>
 8004406:	e01b      	b.n	8004440 <UART_SetConfig+0x210>
 8004408:	231b      	movs	r3, #27
 800440a:	2218      	movs	r2, #24
 800440c:	189b      	adds	r3, r3, r2
 800440e:	19db      	adds	r3, r3, r7
 8004410:	2200      	movs	r2, #0
 8004412:	701a      	strb	r2, [r3, #0]
 8004414:	e021      	b.n	800445a <UART_SetConfig+0x22a>
 8004416:	231b      	movs	r3, #27
 8004418:	2218      	movs	r2, #24
 800441a:	189b      	adds	r3, r3, r2
 800441c:	19db      	adds	r3, r3, r7
 800441e:	2202      	movs	r2, #2
 8004420:	701a      	strb	r2, [r3, #0]
 8004422:	e01a      	b.n	800445a <UART_SetConfig+0x22a>
 8004424:	231b      	movs	r3, #27
 8004426:	2218      	movs	r2, #24
 8004428:	189b      	adds	r3, r3, r2
 800442a:	19db      	adds	r3, r3, r7
 800442c:	2204      	movs	r2, #4
 800442e:	701a      	strb	r2, [r3, #0]
 8004430:	e013      	b.n	800445a <UART_SetConfig+0x22a>
 8004432:	231b      	movs	r3, #27
 8004434:	2218      	movs	r2, #24
 8004436:	189b      	adds	r3, r3, r2
 8004438:	19db      	adds	r3, r3, r7
 800443a:	2208      	movs	r2, #8
 800443c:	701a      	strb	r2, [r3, #0]
 800443e:	e00c      	b.n	800445a <UART_SetConfig+0x22a>
 8004440:	231b      	movs	r3, #27
 8004442:	2218      	movs	r2, #24
 8004444:	189b      	adds	r3, r3, r2
 8004446:	19db      	adds	r3, r3, r7
 8004448:	2210      	movs	r2, #16
 800444a:	701a      	strb	r2, [r3, #0]
 800444c:	e005      	b.n	800445a <UART_SetConfig+0x22a>
 800444e:	231b      	movs	r3, #27
 8004450:	2218      	movs	r2, #24
 8004452:	189b      	adds	r3, r3, r2
 8004454:	19db      	adds	r3, r3, r7
 8004456:	2210      	movs	r2, #16
 8004458:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800445a:	69fb      	ldr	r3, [r7, #28]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4a46      	ldr	r2, [pc, #280]	; (8004578 <UART_SetConfig+0x348>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d000      	beq.n	8004466 <UART_SetConfig+0x236>
 8004464:	e09a      	b.n	800459c <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004466:	231b      	movs	r3, #27
 8004468:	2218      	movs	r2, #24
 800446a:	189b      	adds	r3, r3, r2
 800446c:	19db      	adds	r3, r3, r7
 800446e:	781b      	ldrb	r3, [r3, #0]
 8004470:	2b08      	cmp	r3, #8
 8004472:	d01d      	beq.n	80044b0 <UART_SetConfig+0x280>
 8004474:	dc20      	bgt.n	80044b8 <UART_SetConfig+0x288>
 8004476:	2b04      	cmp	r3, #4
 8004478:	d015      	beq.n	80044a6 <UART_SetConfig+0x276>
 800447a:	dc1d      	bgt.n	80044b8 <UART_SetConfig+0x288>
 800447c:	2b00      	cmp	r3, #0
 800447e:	d002      	beq.n	8004486 <UART_SetConfig+0x256>
 8004480:	2b02      	cmp	r3, #2
 8004482:	d005      	beq.n	8004490 <UART_SetConfig+0x260>
 8004484:	e018      	b.n	80044b8 <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004486:	f7ff f8b9 	bl	80035fc <HAL_RCC_GetPCLK1Freq>
 800448a:	0003      	movs	r3, r0
 800448c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800448e:	e01c      	b.n	80044ca <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004490:	4b3c      	ldr	r3, [pc, #240]	; (8004584 <UART_SetConfig+0x354>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	2210      	movs	r2, #16
 8004496:	4013      	ands	r3, r2
 8004498:	d002      	beq.n	80044a0 <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800449a:	4b3e      	ldr	r3, [pc, #248]	; (8004594 <UART_SetConfig+0x364>)
 800449c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800449e:	e014      	b.n	80044ca <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 80044a0:	4b3d      	ldr	r3, [pc, #244]	; (8004598 <UART_SetConfig+0x368>)
 80044a2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80044a4:	e011      	b.n	80044ca <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80044a6:	f7fe fff9 	bl	800349c <HAL_RCC_GetSysClockFreq>
 80044aa:	0003      	movs	r3, r0
 80044ac:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80044ae:	e00c      	b.n	80044ca <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80044b0:	2380      	movs	r3, #128	; 0x80
 80044b2:	021b      	lsls	r3, r3, #8
 80044b4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80044b6:	e008      	b.n	80044ca <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 80044b8:	2300      	movs	r3, #0
 80044ba:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80044bc:	231a      	movs	r3, #26
 80044be:	2218      	movs	r2, #24
 80044c0:	189b      	adds	r3, r3, r2
 80044c2:	19db      	adds	r3, r3, r7
 80044c4:	2201      	movs	r2, #1
 80044c6:	701a      	strb	r2, [r3, #0]
        break;
 80044c8:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80044ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d100      	bne.n	80044d2 <UART_SetConfig+0x2a2>
 80044d0:	e133      	b.n	800473a <UART_SetConfig+0x50a>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80044d2:	69fb      	ldr	r3, [r7, #28]
 80044d4:	685a      	ldr	r2, [r3, #4]
 80044d6:	0013      	movs	r3, r2
 80044d8:	005b      	lsls	r3, r3, #1
 80044da:	189b      	adds	r3, r3, r2
 80044dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80044de:	429a      	cmp	r2, r3
 80044e0:	d305      	bcc.n	80044ee <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 80044e2:	69fb      	ldr	r3, [r7, #28]
 80044e4:	685b      	ldr	r3, [r3, #4]
 80044e6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80044e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80044ea:	429a      	cmp	r2, r3
 80044ec:	d906      	bls.n	80044fc <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 80044ee:	231a      	movs	r3, #26
 80044f0:	2218      	movs	r2, #24
 80044f2:	189b      	adds	r3, r3, r2
 80044f4:	19db      	adds	r3, r3, r7
 80044f6:	2201      	movs	r2, #1
 80044f8:	701a      	strb	r2, [r3, #0]
 80044fa:	e11e      	b.n	800473a <UART_SetConfig+0x50a>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80044fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044fe:	613b      	str	r3, [r7, #16]
 8004500:	2300      	movs	r3, #0
 8004502:	617b      	str	r3, [r7, #20]
 8004504:	6939      	ldr	r1, [r7, #16]
 8004506:	697a      	ldr	r2, [r7, #20]
 8004508:	000b      	movs	r3, r1
 800450a:	0e1b      	lsrs	r3, r3, #24
 800450c:	0010      	movs	r0, r2
 800450e:	0205      	lsls	r5, r0, #8
 8004510:	431d      	orrs	r5, r3
 8004512:	000b      	movs	r3, r1
 8004514:	021c      	lsls	r4, r3, #8
 8004516:	69fb      	ldr	r3, [r7, #28]
 8004518:	685b      	ldr	r3, [r3, #4]
 800451a:	085b      	lsrs	r3, r3, #1
 800451c:	60bb      	str	r3, [r7, #8]
 800451e:	2300      	movs	r3, #0
 8004520:	60fb      	str	r3, [r7, #12]
 8004522:	68b8      	ldr	r0, [r7, #8]
 8004524:	68f9      	ldr	r1, [r7, #12]
 8004526:	1900      	adds	r0, r0, r4
 8004528:	4169      	adcs	r1, r5
 800452a:	69fb      	ldr	r3, [r7, #28]
 800452c:	685b      	ldr	r3, [r3, #4]
 800452e:	603b      	str	r3, [r7, #0]
 8004530:	2300      	movs	r3, #0
 8004532:	607b      	str	r3, [r7, #4]
 8004534:	683a      	ldr	r2, [r7, #0]
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	f7fb fe8e 	bl	8000258 <__aeabi_uldivmod>
 800453c:	0002      	movs	r2, r0
 800453e:	000b      	movs	r3, r1
 8004540:	0013      	movs	r3, r2
 8004542:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004544:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004546:	23c0      	movs	r3, #192	; 0xc0
 8004548:	009b      	lsls	r3, r3, #2
 800454a:	429a      	cmp	r2, r3
 800454c:	d309      	bcc.n	8004562 <UART_SetConfig+0x332>
 800454e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004550:	2380      	movs	r3, #128	; 0x80
 8004552:	035b      	lsls	r3, r3, #13
 8004554:	429a      	cmp	r2, r3
 8004556:	d204      	bcs.n	8004562 <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 8004558:	69fb      	ldr	r3, [r7, #28]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800455e:	60da      	str	r2, [r3, #12]
 8004560:	e0eb      	b.n	800473a <UART_SetConfig+0x50a>
        }
        else
        {
          ret = HAL_ERROR;
 8004562:	231a      	movs	r3, #26
 8004564:	2218      	movs	r2, #24
 8004566:	189b      	adds	r3, r3, r2
 8004568:	19db      	adds	r3, r3, r7
 800456a:	2201      	movs	r2, #1
 800456c:	701a      	strb	r2, [r3, #0]
 800456e:	e0e4      	b.n	800473a <UART_SetConfig+0x50a>
 8004570:	efff69f3 	.word	0xefff69f3
 8004574:	ffffcfff 	.word	0xffffcfff
 8004578:	40004800 	.word	0x40004800
 800457c:	fffff4ff 	.word	0xfffff4ff
 8004580:	40013800 	.word	0x40013800
 8004584:	40021000 	.word	0x40021000
 8004588:	40004400 	.word	0x40004400
 800458c:	40004c00 	.word	0x40004c00
 8004590:	40005000 	.word	0x40005000
 8004594:	003d0900 	.word	0x003d0900
 8004598:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800459c:	69fb      	ldr	r3, [r7, #28]
 800459e:	69da      	ldr	r2, [r3, #28]
 80045a0:	2380      	movs	r3, #128	; 0x80
 80045a2:	021b      	lsls	r3, r3, #8
 80045a4:	429a      	cmp	r2, r3
 80045a6:	d000      	beq.n	80045aa <UART_SetConfig+0x37a>
 80045a8:	e070      	b.n	800468c <UART_SetConfig+0x45c>
  {
    switch (clocksource)
 80045aa:	231b      	movs	r3, #27
 80045ac:	2218      	movs	r2, #24
 80045ae:	189b      	adds	r3, r3, r2
 80045b0:	19db      	adds	r3, r3, r7
 80045b2:	781b      	ldrb	r3, [r3, #0]
 80045b4:	2b08      	cmp	r3, #8
 80045b6:	d822      	bhi.n	80045fe <UART_SetConfig+0x3ce>
 80045b8:	009a      	lsls	r2, r3, #2
 80045ba:	4b67      	ldr	r3, [pc, #412]	; (8004758 <UART_SetConfig+0x528>)
 80045bc:	18d3      	adds	r3, r2, r3
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80045c2:	f7ff f81b 	bl	80035fc <HAL_RCC_GetPCLK1Freq>
 80045c6:	0003      	movs	r3, r0
 80045c8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80045ca:	e021      	b.n	8004610 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80045cc:	f7ff f82c 	bl	8003628 <HAL_RCC_GetPCLK2Freq>
 80045d0:	0003      	movs	r3, r0
 80045d2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80045d4:	e01c      	b.n	8004610 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80045d6:	4b61      	ldr	r3, [pc, #388]	; (800475c <UART_SetConfig+0x52c>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	2210      	movs	r2, #16
 80045dc:	4013      	ands	r3, r2
 80045de:	d002      	beq.n	80045e6 <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80045e0:	4b5f      	ldr	r3, [pc, #380]	; (8004760 <UART_SetConfig+0x530>)
 80045e2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80045e4:	e014      	b.n	8004610 <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 80045e6:	4b5f      	ldr	r3, [pc, #380]	; (8004764 <UART_SetConfig+0x534>)
 80045e8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80045ea:	e011      	b.n	8004610 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80045ec:	f7fe ff56 	bl	800349c <HAL_RCC_GetSysClockFreq>
 80045f0:	0003      	movs	r3, r0
 80045f2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80045f4:	e00c      	b.n	8004610 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80045f6:	2380      	movs	r3, #128	; 0x80
 80045f8:	021b      	lsls	r3, r3, #8
 80045fa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80045fc:	e008      	b.n	8004610 <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 80045fe:	2300      	movs	r3, #0
 8004600:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8004602:	231a      	movs	r3, #26
 8004604:	2218      	movs	r2, #24
 8004606:	189b      	adds	r3, r3, r2
 8004608:	19db      	adds	r3, r3, r7
 800460a:	2201      	movs	r2, #1
 800460c:	701a      	strb	r2, [r3, #0]
        break;
 800460e:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004610:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004612:	2b00      	cmp	r3, #0
 8004614:	d100      	bne.n	8004618 <UART_SetConfig+0x3e8>
 8004616:	e090      	b.n	800473a <UART_SetConfig+0x50a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004618:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800461a:	005a      	lsls	r2, r3, #1
 800461c:	69fb      	ldr	r3, [r7, #28]
 800461e:	685b      	ldr	r3, [r3, #4]
 8004620:	085b      	lsrs	r3, r3, #1
 8004622:	18d2      	adds	r2, r2, r3
 8004624:	69fb      	ldr	r3, [r7, #28]
 8004626:	685b      	ldr	r3, [r3, #4]
 8004628:	0019      	movs	r1, r3
 800462a:	0010      	movs	r0, r2
 800462c:	f7fb fd88 	bl	8000140 <__udivsi3>
 8004630:	0003      	movs	r3, r0
 8004632:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004634:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004636:	2b0f      	cmp	r3, #15
 8004638:	d921      	bls.n	800467e <UART_SetConfig+0x44e>
 800463a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800463c:	2380      	movs	r3, #128	; 0x80
 800463e:	025b      	lsls	r3, r3, #9
 8004640:	429a      	cmp	r2, r3
 8004642:	d21c      	bcs.n	800467e <UART_SetConfig+0x44e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004646:	b29a      	uxth	r2, r3
 8004648:	200e      	movs	r0, #14
 800464a:	2418      	movs	r4, #24
 800464c:	1903      	adds	r3, r0, r4
 800464e:	19db      	adds	r3, r3, r7
 8004650:	210f      	movs	r1, #15
 8004652:	438a      	bics	r2, r1
 8004654:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004658:	085b      	lsrs	r3, r3, #1
 800465a:	b29b      	uxth	r3, r3
 800465c:	2207      	movs	r2, #7
 800465e:	4013      	ands	r3, r2
 8004660:	b299      	uxth	r1, r3
 8004662:	1903      	adds	r3, r0, r4
 8004664:	19db      	adds	r3, r3, r7
 8004666:	1902      	adds	r2, r0, r4
 8004668:	19d2      	adds	r2, r2, r7
 800466a:	8812      	ldrh	r2, [r2, #0]
 800466c:	430a      	orrs	r2, r1
 800466e:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004670:	69fb      	ldr	r3, [r7, #28]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	1902      	adds	r2, r0, r4
 8004676:	19d2      	adds	r2, r2, r7
 8004678:	8812      	ldrh	r2, [r2, #0]
 800467a:	60da      	str	r2, [r3, #12]
 800467c:	e05d      	b.n	800473a <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 800467e:	231a      	movs	r3, #26
 8004680:	2218      	movs	r2, #24
 8004682:	189b      	adds	r3, r3, r2
 8004684:	19db      	adds	r3, r3, r7
 8004686:	2201      	movs	r2, #1
 8004688:	701a      	strb	r2, [r3, #0]
 800468a:	e056      	b.n	800473a <UART_SetConfig+0x50a>
      }
    }
  }
  else
  {
    switch (clocksource)
 800468c:	231b      	movs	r3, #27
 800468e:	2218      	movs	r2, #24
 8004690:	189b      	adds	r3, r3, r2
 8004692:	19db      	adds	r3, r3, r7
 8004694:	781b      	ldrb	r3, [r3, #0]
 8004696:	2b08      	cmp	r3, #8
 8004698:	d822      	bhi.n	80046e0 <UART_SetConfig+0x4b0>
 800469a:	009a      	lsls	r2, r3, #2
 800469c:	4b32      	ldr	r3, [pc, #200]	; (8004768 <UART_SetConfig+0x538>)
 800469e:	18d3      	adds	r3, r2, r3
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80046a4:	f7fe ffaa 	bl	80035fc <HAL_RCC_GetPCLK1Freq>
 80046a8:	0003      	movs	r3, r0
 80046aa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80046ac:	e021      	b.n	80046f2 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80046ae:	f7fe ffbb 	bl	8003628 <HAL_RCC_GetPCLK2Freq>
 80046b2:	0003      	movs	r3, r0
 80046b4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80046b6:	e01c      	b.n	80046f2 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80046b8:	4b28      	ldr	r3, [pc, #160]	; (800475c <UART_SetConfig+0x52c>)
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	2210      	movs	r2, #16
 80046be:	4013      	ands	r3, r2
 80046c0:	d002      	beq.n	80046c8 <UART_SetConfig+0x498>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80046c2:	4b27      	ldr	r3, [pc, #156]	; (8004760 <UART_SetConfig+0x530>)
 80046c4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80046c6:	e014      	b.n	80046f2 <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 80046c8:	4b26      	ldr	r3, [pc, #152]	; (8004764 <UART_SetConfig+0x534>)
 80046ca:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80046cc:	e011      	b.n	80046f2 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80046ce:	f7fe fee5 	bl	800349c <HAL_RCC_GetSysClockFreq>
 80046d2:	0003      	movs	r3, r0
 80046d4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80046d6:	e00c      	b.n	80046f2 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80046d8:	2380      	movs	r3, #128	; 0x80
 80046da:	021b      	lsls	r3, r3, #8
 80046dc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80046de:	e008      	b.n	80046f2 <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 80046e0:	2300      	movs	r3, #0
 80046e2:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80046e4:	231a      	movs	r3, #26
 80046e6:	2218      	movs	r2, #24
 80046e8:	189b      	adds	r3, r3, r2
 80046ea:	19db      	adds	r3, r3, r7
 80046ec:	2201      	movs	r2, #1
 80046ee:	701a      	strb	r2, [r3, #0]
        break;
 80046f0:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80046f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d020      	beq.n	800473a <UART_SetConfig+0x50a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80046f8:	69fb      	ldr	r3, [r7, #28]
 80046fa:	685b      	ldr	r3, [r3, #4]
 80046fc:	085a      	lsrs	r2, r3, #1
 80046fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004700:	18d2      	adds	r2, r2, r3
 8004702:	69fb      	ldr	r3, [r7, #28]
 8004704:	685b      	ldr	r3, [r3, #4]
 8004706:	0019      	movs	r1, r3
 8004708:	0010      	movs	r0, r2
 800470a:	f7fb fd19 	bl	8000140 <__udivsi3>
 800470e:	0003      	movs	r3, r0
 8004710:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004714:	2b0f      	cmp	r3, #15
 8004716:	d90a      	bls.n	800472e <UART_SetConfig+0x4fe>
 8004718:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800471a:	2380      	movs	r3, #128	; 0x80
 800471c:	025b      	lsls	r3, r3, #9
 800471e:	429a      	cmp	r2, r3
 8004720:	d205      	bcs.n	800472e <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004722:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004724:	b29a      	uxth	r2, r3
 8004726:	69fb      	ldr	r3, [r7, #28]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	60da      	str	r2, [r3, #12]
 800472c:	e005      	b.n	800473a <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 800472e:	231a      	movs	r3, #26
 8004730:	2218      	movs	r2, #24
 8004732:	189b      	adds	r3, r3, r2
 8004734:	19db      	adds	r3, r3, r7
 8004736:	2201      	movs	r2, #1
 8004738:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800473a:	69fb      	ldr	r3, [r7, #28]
 800473c:	2200      	movs	r2, #0
 800473e:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004740:	69fb      	ldr	r3, [r7, #28]
 8004742:	2200      	movs	r2, #0
 8004744:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004746:	231a      	movs	r3, #26
 8004748:	2218      	movs	r2, #24
 800474a:	189b      	adds	r3, r3, r2
 800474c:	19db      	adds	r3, r3, r7
 800474e:	781b      	ldrb	r3, [r3, #0]
}
 8004750:	0018      	movs	r0, r3
 8004752:	46bd      	mov	sp, r7
 8004754:	b00e      	add	sp, #56	; 0x38
 8004756:	bdb0      	pop	{r4, r5, r7, pc}
 8004758:	080067d8 	.word	0x080067d8
 800475c:	40021000 	.word	0x40021000
 8004760:	003d0900 	.word	0x003d0900
 8004764:	00f42400 	.word	0x00f42400
 8004768:	080067fc 	.word	0x080067fc

0800476c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b082      	sub	sp, #8
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004778:	2201      	movs	r2, #1
 800477a:	4013      	ands	r3, r2
 800477c:	d00b      	beq.n	8004796 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	685b      	ldr	r3, [r3, #4]
 8004784:	4a4a      	ldr	r2, [pc, #296]	; (80048b0 <UART_AdvFeatureConfig+0x144>)
 8004786:	4013      	ands	r3, r2
 8004788:	0019      	movs	r1, r3
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	430a      	orrs	r2, r1
 8004794:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800479a:	2202      	movs	r2, #2
 800479c:	4013      	ands	r3, r2
 800479e:	d00b      	beq.n	80047b8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	685b      	ldr	r3, [r3, #4]
 80047a6:	4a43      	ldr	r2, [pc, #268]	; (80048b4 <UART_AdvFeatureConfig+0x148>)
 80047a8:	4013      	ands	r3, r2
 80047aa:	0019      	movs	r1, r3
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	430a      	orrs	r2, r1
 80047b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047bc:	2204      	movs	r2, #4
 80047be:	4013      	ands	r3, r2
 80047c0:	d00b      	beq.n	80047da <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	685b      	ldr	r3, [r3, #4]
 80047c8:	4a3b      	ldr	r2, [pc, #236]	; (80048b8 <UART_AdvFeatureConfig+0x14c>)
 80047ca:	4013      	ands	r3, r2
 80047cc:	0019      	movs	r1, r3
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	430a      	orrs	r2, r1
 80047d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047de:	2208      	movs	r2, #8
 80047e0:	4013      	ands	r3, r2
 80047e2:	d00b      	beq.n	80047fc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	685b      	ldr	r3, [r3, #4]
 80047ea:	4a34      	ldr	r2, [pc, #208]	; (80048bc <UART_AdvFeatureConfig+0x150>)
 80047ec:	4013      	ands	r3, r2
 80047ee:	0019      	movs	r1, r3
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	430a      	orrs	r2, r1
 80047fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004800:	2210      	movs	r2, #16
 8004802:	4013      	ands	r3, r2
 8004804:	d00b      	beq.n	800481e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	689b      	ldr	r3, [r3, #8]
 800480c:	4a2c      	ldr	r2, [pc, #176]	; (80048c0 <UART_AdvFeatureConfig+0x154>)
 800480e:	4013      	ands	r3, r2
 8004810:	0019      	movs	r1, r3
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	430a      	orrs	r2, r1
 800481c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004822:	2220      	movs	r2, #32
 8004824:	4013      	ands	r3, r2
 8004826:	d00b      	beq.n	8004840 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	689b      	ldr	r3, [r3, #8]
 800482e:	4a25      	ldr	r2, [pc, #148]	; (80048c4 <UART_AdvFeatureConfig+0x158>)
 8004830:	4013      	ands	r3, r2
 8004832:	0019      	movs	r1, r3
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	430a      	orrs	r2, r1
 800483e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004844:	2240      	movs	r2, #64	; 0x40
 8004846:	4013      	ands	r3, r2
 8004848:	d01d      	beq.n	8004886 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	685b      	ldr	r3, [r3, #4]
 8004850:	4a1d      	ldr	r2, [pc, #116]	; (80048c8 <UART_AdvFeatureConfig+0x15c>)
 8004852:	4013      	ands	r3, r2
 8004854:	0019      	movs	r1, r3
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	430a      	orrs	r2, r1
 8004860:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004866:	2380      	movs	r3, #128	; 0x80
 8004868:	035b      	lsls	r3, r3, #13
 800486a:	429a      	cmp	r2, r3
 800486c:	d10b      	bne.n	8004886 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	685b      	ldr	r3, [r3, #4]
 8004874:	4a15      	ldr	r2, [pc, #84]	; (80048cc <UART_AdvFeatureConfig+0x160>)
 8004876:	4013      	ands	r3, r2
 8004878:	0019      	movs	r1, r3
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	430a      	orrs	r2, r1
 8004884:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800488a:	2280      	movs	r2, #128	; 0x80
 800488c:	4013      	ands	r3, r2
 800488e:	d00b      	beq.n	80048a8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	685b      	ldr	r3, [r3, #4]
 8004896:	4a0e      	ldr	r2, [pc, #56]	; (80048d0 <UART_AdvFeatureConfig+0x164>)
 8004898:	4013      	ands	r3, r2
 800489a:	0019      	movs	r1, r3
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	430a      	orrs	r2, r1
 80048a6:	605a      	str	r2, [r3, #4]
  }
}
 80048a8:	46c0      	nop			; (mov r8, r8)
 80048aa:	46bd      	mov	sp, r7
 80048ac:	b002      	add	sp, #8
 80048ae:	bd80      	pop	{r7, pc}
 80048b0:	fffdffff 	.word	0xfffdffff
 80048b4:	fffeffff 	.word	0xfffeffff
 80048b8:	fffbffff 	.word	0xfffbffff
 80048bc:	ffff7fff 	.word	0xffff7fff
 80048c0:	ffffefff 	.word	0xffffefff
 80048c4:	ffffdfff 	.word	0xffffdfff
 80048c8:	ffefffff 	.word	0xffefffff
 80048cc:	ff9fffff 	.word	0xff9fffff
 80048d0:	fff7ffff 	.word	0xfff7ffff

080048d4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b092      	sub	sp, #72	; 0x48
 80048d8:	af02      	add	r7, sp, #8
 80048da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2284      	movs	r2, #132	; 0x84
 80048e0:	2100      	movs	r1, #0
 80048e2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80048e4:	f7fd fad2 	bl	8001e8c <HAL_GetTick>
 80048e8:	0003      	movs	r3, r0
 80048ea:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	2208      	movs	r2, #8
 80048f4:	4013      	ands	r3, r2
 80048f6:	2b08      	cmp	r3, #8
 80048f8:	d12c      	bne.n	8004954 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80048fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048fc:	2280      	movs	r2, #128	; 0x80
 80048fe:	0391      	lsls	r1, r2, #14
 8004900:	6878      	ldr	r0, [r7, #4]
 8004902:	4a46      	ldr	r2, [pc, #280]	; (8004a1c <UART_CheckIdleState+0x148>)
 8004904:	9200      	str	r2, [sp, #0]
 8004906:	2200      	movs	r2, #0
 8004908:	f000 f88c 	bl	8004a24 <UART_WaitOnFlagUntilTimeout>
 800490c:	1e03      	subs	r3, r0, #0
 800490e:	d021      	beq.n	8004954 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004910:	f3ef 8310 	mrs	r3, PRIMASK
 8004914:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004918:	63bb      	str	r3, [r7, #56]	; 0x38
 800491a:	2301      	movs	r3, #1
 800491c:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800491e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004920:	f383 8810 	msr	PRIMASK, r3
}
 8004924:	46c0      	nop			; (mov r8, r8)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	681a      	ldr	r2, [r3, #0]
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	2180      	movs	r1, #128	; 0x80
 8004932:	438a      	bics	r2, r1
 8004934:	601a      	str	r2, [r3, #0]
 8004936:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004938:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800493a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800493c:	f383 8810 	msr	PRIMASK, r3
}
 8004940:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2220      	movs	r2, #32
 8004946:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2278      	movs	r2, #120	; 0x78
 800494c:	2100      	movs	r1, #0
 800494e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004950:	2303      	movs	r3, #3
 8004952:	e05f      	b.n	8004a14 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	2204      	movs	r2, #4
 800495c:	4013      	ands	r3, r2
 800495e:	2b04      	cmp	r3, #4
 8004960:	d146      	bne.n	80049f0 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004962:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004964:	2280      	movs	r2, #128	; 0x80
 8004966:	03d1      	lsls	r1, r2, #15
 8004968:	6878      	ldr	r0, [r7, #4]
 800496a:	4a2c      	ldr	r2, [pc, #176]	; (8004a1c <UART_CheckIdleState+0x148>)
 800496c:	9200      	str	r2, [sp, #0]
 800496e:	2200      	movs	r2, #0
 8004970:	f000 f858 	bl	8004a24 <UART_WaitOnFlagUntilTimeout>
 8004974:	1e03      	subs	r3, r0, #0
 8004976:	d03b      	beq.n	80049f0 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004978:	f3ef 8310 	mrs	r3, PRIMASK
 800497c:	60fb      	str	r3, [r7, #12]
  return(result);
 800497e:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004980:	637b      	str	r3, [r7, #52]	; 0x34
 8004982:	2301      	movs	r3, #1
 8004984:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004986:	693b      	ldr	r3, [r7, #16]
 8004988:	f383 8810 	msr	PRIMASK, r3
}
 800498c:	46c0      	nop			; (mov r8, r8)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	681a      	ldr	r2, [r3, #0]
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4921      	ldr	r1, [pc, #132]	; (8004a20 <UART_CheckIdleState+0x14c>)
 800499a:	400a      	ands	r2, r1
 800499c:	601a      	str	r2, [r3, #0]
 800499e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049a0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049a2:	697b      	ldr	r3, [r7, #20]
 80049a4:	f383 8810 	msr	PRIMASK, r3
}
 80049a8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80049aa:	f3ef 8310 	mrs	r3, PRIMASK
 80049ae:	61bb      	str	r3, [r7, #24]
  return(result);
 80049b0:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049b2:	633b      	str	r3, [r7, #48]	; 0x30
 80049b4:	2301      	movs	r3, #1
 80049b6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049b8:	69fb      	ldr	r3, [r7, #28]
 80049ba:	f383 8810 	msr	PRIMASK, r3
}
 80049be:	46c0      	nop			; (mov r8, r8)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	689a      	ldr	r2, [r3, #8]
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	2101      	movs	r1, #1
 80049cc:	438a      	bics	r2, r1
 80049ce:	609a      	str	r2, [r3, #8]
 80049d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049d2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049d4:	6a3b      	ldr	r3, [r7, #32]
 80049d6:	f383 8810 	msr	PRIMASK, r3
}
 80049da:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2280      	movs	r2, #128	; 0x80
 80049e0:	2120      	movs	r1, #32
 80049e2:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2278      	movs	r2, #120	; 0x78
 80049e8:	2100      	movs	r1, #0
 80049ea:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80049ec:	2303      	movs	r3, #3
 80049ee:	e011      	b.n	8004a14 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2220      	movs	r2, #32
 80049f4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2280      	movs	r2, #128	; 0x80
 80049fa:	2120      	movs	r1, #32
 80049fc:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	2200      	movs	r2, #0
 8004a02:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2200      	movs	r2, #0
 8004a08:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2278      	movs	r2, #120	; 0x78
 8004a0e:	2100      	movs	r1, #0
 8004a10:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004a12:	2300      	movs	r3, #0
}
 8004a14:	0018      	movs	r0, r3
 8004a16:	46bd      	mov	sp, r7
 8004a18:	b010      	add	sp, #64	; 0x40
 8004a1a:	bd80      	pop	{r7, pc}
 8004a1c:	01ffffff 	.word	0x01ffffff
 8004a20:	fffffedf 	.word	0xfffffedf

08004a24 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b084      	sub	sp, #16
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	60f8      	str	r0, [r7, #12]
 8004a2c:	60b9      	str	r1, [r7, #8]
 8004a2e:	603b      	str	r3, [r7, #0]
 8004a30:	1dfb      	adds	r3, r7, #7
 8004a32:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a34:	e04b      	b.n	8004ace <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a36:	69bb      	ldr	r3, [r7, #24]
 8004a38:	3301      	adds	r3, #1
 8004a3a:	d048      	beq.n	8004ace <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a3c:	f7fd fa26 	bl	8001e8c <HAL_GetTick>
 8004a40:	0002      	movs	r2, r0
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	1ad3      	subs	r3, r2, r3
 8004a46:	69ba      	ldr	r2, [r7, #24]
 8004a48:	429a      	cmp	r2, r3
 8004a4a:	d302      	bcc.n	8004a52 <UART_WaitOnFlagUntilTimeout+0x2e>
 8004a4c:	69bb      	ldr	r3, [r7, #24]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d101      	bne.n	8004a56 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8004a52:	2303      	movs	r3, #3
 8004a54:	e04b      	b.n	8004aee <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	2204      	movs	r2, #4
 8004a5e:	4013      	ands	r3, r2
 8004a60:	d035      	beq.n	8004ace <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	69db      	ldr	r3, [r3, #28]
 8004a68:	2208      	movs	r2, #8
 8004a6a:	4013      	ands	r3, r2
 8004a6c:	2b08      	cmp	r3, #8
 8004a6e:	d111      	bne.n	8004a94 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	2208      	movs	r2, #8
 8004a76:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	0018      	movs	r0, r3
 8004a7c:	f000 f906 	bl	8004c8c <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	2284      	movs	r2, #132	; 0x84
 8004a84:	2108      	movs	r1, #8
 8004a86:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	2278      	movs	r2, #120	; 0x78
 8004a8c:	2100      	movs	r1, #0
 8004a8e:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8004a90:	2301      	movs	r3, #1
 8004a92:	e02c      	b.n	8004aee <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	69da      	ldr	r2, [r3, #28]
 8004a9a:	2380      	movs	r3, #128	; 0x80
 8004a9c:	011b      	lsls	r3, r3, #4
 8004a9e:	401a      	ands	r2, r3
 8004aa0:	2380      	movs	r3, #128	; 0x80
 8004aa2:	011b      	lsls	r3, r3, #4
 8004aa4:	429a      	cmp	r2, r3
 8004aa6:	d112      	bne.n	8004ace <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	2280      	movs	r2, #128	; 0x80
 8004aae:	0112      	lsls	r2, r2, #4
 8004ab0:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	0018      	movs	r0, r3
 8004ab6:	f000 f8e9 	bl	8004c8c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	2284      	movs	r2, #132	; 0x84
 8004abe:	2120      	movs	r1, #32
 8004ac0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	2278      	movs	r2, #120	; 0x78
 8004ac6:	2100      	movs	r1, #0
 8004ac8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004aca:	2303      	movs	r3, #3
 8004acc:	e00f      	b.n	8004aee <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	69db      	ldr	r3, [r3, #28]
 8004ad4:	68ba      	ldr	r2, [r7, #8]
 8004ad6:	4013      	ands	r3, r2
 8004ad8:	68ba      	ldr	r2, [r7, #8]
 8004ada:	1ad3      	subs	r3, r2, r3
 8004adc:	425a      	negs	r2, r3
 8004ade:	4153      	adcs	r3, r2
 8004ae0:	b2db      	uxtb	r3, r3
 8004ae2:	001a      	movs	r2, r3
 8004ae4:	1dfb      	adds	r3, r7, #7
 8004ae6:	781b      	ldrb	r3, [r3, #0]
 8004ae8:	429a      	cmp	r2, r3
 8004aea:	d0a4      	beq.n	8004a36 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004aec:	2300      	movs	r3, #0
}
 8004aee:	0018      	movs	r0, r3
 8004af0:	46bd      	mov	sp, r7
 8004af2:	b004      	add	sp, #16
 8004af4:	bd80      	pop	{r7, pc}
	...

08004af8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b090      	sub	sp, #64	; 0x40
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	60f8      	str	r0, [r7, #12]
 8004b00:	60b9      	str	r1, [r7, #8]
 8004b02:	1dbb      	adds	r3, r7, #6
 8004b04:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	68ba      	ldr	r2, [r7, #8]
 8004b0a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	1dba      	adds	r2, r7, #6
 8004b10:	2158      	movs	r1, #88	; 0x58
 8004b12:	8812      	ldrh	r2, [r2, #0]
 8004b14:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	1dba      	adds	r2, r7, #6
 8004b1a:	215a      	movs	r1, #90	; 0x5a
 8004b1c:	8812      	ldrh	r2, [r2, #0]
 8004b1e:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	2200      	movs	r2, #0
 8004b24:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	689a      	ldr	r2, [r3, #8]
 8004b2a:	2380      	movs	r3, #128	; 0x80
 8004b2c:	015b      	lsls	r3, r3, #5
 8004b2e:	429a      	cmp	r2, r3
 8004b30:	d10d      	bne.n	8004b4e <UART_Start_Receive_IT+0x56>
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	691b      	ldr	r3, [r3, #16]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d104      	bne.n	8004b44 <UART_Start_Receive_IT+0x4c>
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	225c      	movs	r2, #92	; 0x5c
 8004b3e:	4950      	ldr	r1, [pc, #320]	; (8004c80 <UART_Start_Receive_IT+0x188>)
 8004b40:	5299      	strh	r1, [r3, r2]
 8004b42:	e02e      	b.n	8004ba2 <UART_Start_Receive_IT+0xaa>
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	225c      	movs	r2, #92	; 0x5c
 8004b48:	21ff      	movs	r1, #255	; 0xff
 8004b4a:	5299      	strh	r1, [r3, r2]
 8004b4c:	e029      	b.n	8004ba2 <UART_Start_Receive_IT+0xaa>
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	689b      	ldr	r3, [r3, #8]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d10d      	bne.n	8004b72 <UART_Start_Receive_IT+0x7a>
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	691b      	ldr	r3, [r3, #16]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d104      	bne.n	8004b68 <UART_Start_Receive_IT+0x70>
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	225c      	movs	r2, #92	; 0x5c
 8004b62:	21ff      	movs	r1, #255	; 0xff
 8004b64:	5299      	strh	r1, [r3, r2]
 8004b66:	e01c      	b.n	8004ba2 <UART_Start_Receive_IT+0xaa>
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	225c      	movs	r2, #92	; 0x5c
 8004b6c:	217f      	movs	r1, #127	; 0x7f
 8004b6e:	5299      	strh	r1, [r3, r2]
 8004b70:	e017      	b.n	8004ba2 <UART_Start_Receive_IT+0xaa>
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	689a      	ldr	r2, [r3, #8]
 8004b76:	2380      	movs	r3, #128	; 0x80
 8004b78:	055b      	lsls	r3, r3, #21
 8004b7a:	429a      	cmp	r2, r3
 8004b7c:	d10d      	bne.n	8004b9a <UART_Start_Receive_IT+0xa2>
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	691b      	ldr	r3, [r3, #16]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d104      	bne.n	8004b90 <UART_Start_Receive_IT+0x98>
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	225c      	movs	r2, #92	; 0x5c
 8004b8a:	217f      	movs	r1, #127	; 0x7f
 8004b8c:	5299      	strh	r1, [r3, r2]
 8004b8e:	e008      	b.n	8004ba2 <UART_Start_Receive_IT+0xaa>
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	225c      	movs	r2, #92	; 0x5c
 8004b94:	213f      	movs	r1, #63	; 0x3f
 8004b96:	5299      	strh	r1, [r3, r2]
 8004b98:	e003      	b.n	8004ba2 <UART_Start_Receive_IT+0xaa>
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	225c      	movs	r2, #92	; 0x5c
 8004b9e:	2100      	movs	r1, #0
 8004ba0:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	2284      	movs	r2, #132	; 0x84
 8004ba6:	2100      	movs	r1, #0
 8004ba8:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	2280      	movs	r2, #128	; 0x80
 8004bae:	2122      	movs	r1, #34	; 0x22
 8004bb0:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004bb2:	f3ef 8310 	mrs	r3, PRIMASK
 8004bb6:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8004bb8:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bba:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004bbc:	2301      	movs	r3, #1
 8004bbe:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bc2:	f383 8810 	msr	PRIMASK, r3
}
 8004bc6:	46c0      	nop			; (mov r8, r8)
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	689a      	ldr	r2, [r3, #8]
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	2101      	movs	r1, #1
 8004bd4:	430a      	orrs	r2, r1
 8004bd6:	609a      	str	r2, [r3, #8]
 8004bd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004bda:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bde:	f383 8810 	msr	PRIMASK, r3
}
 8004be2:	46c0      	nop			; (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	689a      	ldr	r2, [r3, #8]
 8004be8:	2380      	movs	r3, #128	; 0x80
 8004bea:	015b      	lsls	r3, r3, #5
 8004bec:	429a      	cmp	r2, r3
 8004bee:	d107      	bne.n	8004c00 <UART_Start_Receive_IT+0x108>
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	691b      	ldr	r3, [r3, #16]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d103      	bne.n	8004c00 <UART_Start_Receive_IT+0x108>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	4a22      	ldr	r2, [pc, #136]	; (8004c84 <UART_Start_Receive_IT+0x18c>)
 8004bfc:	669a      	str	r2, [r3, #104]	; 0x68
 8004bfe:	e002      	b.n	8004c06 <UART_Start_Receive_IT+0x10e>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	4a21      	ldr	r2, [pc, #132]	; (8004c88 <UART_Start_Receive_IT+0x190>)
 8004c04:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	691b      	ldr	r3, [r3, #16]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d019      	beq.n	8004c42 <UART_Start_Receive_IT+0x14a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c0e:	f3ef 8310 	mrs	r3, PRIMASK
 8004c12:	61fb      	str	r3, [r7, #28]
  return(result);
 8004c14:	69fb      	ldr	r3, [r7, #28]
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004c16:	637b      	str	r3, [r7, #52]	; 0x34
 8004c18:	2301      	movs	r3, #1
 8004c1a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c1c:	6a3b      	ldr	r3, [r7, #32]
 8004c1e:	f383 8810 	msr	PRIMASK, r3
}
 8004c22:	46c0      	nop			; (mov r8, r8)
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	681a      	ldr	r2, [r3, #0]
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	2190      	movs	r1, #144	; 0x90
 8004c30:	0049      	lsls	r1, r1, #1
 8004c32:	430a      	orrs	r2, r1
 8004c34:	601a      	str	r2, [r3, #0]
 8004c36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c38:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c3c:	f383 8810 	msr	PRIMASK, r3
}
 8004c40:	e018      	b.n	8004c74 <UART_Start_Receive_IT+0x17c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c42:	f3ef 8310 	mrs	r3, PRIMASK
 8004c46:	613b      	str	r3, [r7, #16]
  return(result);
 8004c48:	693b      	ldr	r3, [r7, #16]
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8004c4a:	63bb      	str	r3, [r7, #56]	; 0x38
 8004c4c:	2301      	movs	r3, #1
 8004c4e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c50:	697b      	ldr	r3, [r7, #20]
 8004c52:	f383 8810 	msr	PRIMASK, r3
}
 8004c56:	46c0      	nop			; (mov r8, r8)
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	681a      	ldr	r2, [r3, #0]
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	2120      	movs	r1, #32
 8004c64:	430a      	orrs	r2, r1
 8004c66:	601a      	str	r2, [r3, #0]
 8004c68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c6a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c6c:	69bb      	ldr	r3, [r7, #24]
 8004c6e:	f383 8810 	msr	PRIMASK, r3
}
 8004c72:	46c0      	nop			; (mov r8, r8)
  }
  return HAL_OK;
 8004c74:	2300      	movs	r3, #0
}
 8004c76:	0018      	movs	r0, r3
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	b010      	add	sp, #64	; 0x40
 8004c7c:	bd80      	pop	{r7, pc}
 8004c7e:	46c0      	nop			; (mov r8, r8)
 8004c80:	000001ff 	.word	0x000001ff
 8004c84:	08004f9d 	.word	0x08004f9d
 8004c88:	08004dd9 	.word	0x08004dd9

08004c8c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b08e      	sub	sp, #56	; 0x38
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c94:	f3ef 8310 	mrs	r3, PRIMASK
 8004c98:	617b      	str	r3, [r7, #20]
  return(result);
 8004c9a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c9c:	637b      	str	r3, [r7, #52]	; 0x34
 8004c9e:	2301      	movs	r3, #1
 8004ca0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ca2:	69bb      	ldr	r3, [r7, #24]
 8004ca4:	f383 8810 	msr	PRIMASK, r3
}
 8004ca8:	46c0      	nop			; (mov r8, r8)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	681a      	ldr	r2, [r3, #0]
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	4926      	ldr	r1, [pc, #152]	; (8004d50 <UART_EndRxTransfer+0xc4>)
 8004cb6:	400a      	ands	r2, r1
 8004cb8:	601a      	str	r2, [r3, #0]
 8004cba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cbc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cbe:	69fb      	ldr	r3, [r7, #28]
 8004cc0:	f383 8810 	msr	PRIMASK, r3
}
 8004cc4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004cc6:	f3ef 8310 	mrs	r3, PRIMASK
 8004cca:	623b      	str	r3, [r7, #32]
  return(result);
 8004ccc:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cce:	633b      	str	r3, [r7, #48]	; 0x30
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cd6:	f383 8810 	msr	PRIMASK, r3
}
 8004cda:	46c0      	nop			; (mov r8, r8)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	689a      	ldr	r2, [r3, #8]
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	2101      	movs	r1, #1
 8004ce8:	438a      	bics	r2, r1
 8004cea:	609a      	str	r2, [r3, #8]
 8004cec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cee:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cf2:	f383 8810 	msr	PRIMASK, r3
}
 8004cf6:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004cfc:	2b01      	cmp	r3, #1
 8004cfe:	d118      	bne.n	8004d32 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d00:	f3ef 8310 	mrs	r3, PRIMASK
 8004d04:	60bb      	str	r3, [r7, #8]
  return(result);
 8004d06:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d08:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	f383 8810 	msr	PRIMASK, r3
}
 8004d14:	46c0      	nop			; (mov r8, r8)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	681a      	ldr	r2, [r3, #0]
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	2110      	movs	r1, #16
 8004d22:	438a      	bics	r2, r1
 8004d24:	601a      	str	r2, [r3, #0]
 8004d26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d28:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d2a:	693b      	ldr	r3, [r7, #16]
 8004d2c:	f383 8810 	msr	PRIMASK, r3
}
 8004d30:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2280      	movs	r2, #128	; 0x80
 8004d36:	2120      	movs	r1, #32
 8004d38:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2200      	movs	r2, #0
 8004d44:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004d46:	46c0      	nop			; (mov r8, r8)
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	b00e      	add	sp, #56	; 0x38
 8004d4c:	bd80      	pop	{r7, pc}
 8004d4e:	46c0      	nop			; (mov r8, r8)
 8004d50:	fffffedf 	.word	0xfffffedf

08004d54 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b084      	sub	sp, #16
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d60:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	225a      	movs	r2, #90	; 0x5a
 8004d66:	2100      	movs	r1, #0
 8004d68:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	2252      	movs	r2, #82	; 0x52
 8004d6e:	2100      	movs	r1, #0
 8004d70:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	0018      	movs	r0, r3
 8004d76:	f7ff fa47 	bl	8004208 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004d7a:	46c0      	nop			; (mov r8, r8)
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	b004      	add	sp, #16
 8004d80:	bd80      	pop	{r7, pc}

08004d82 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004d82:	b580      	push	{r7, lr}
 8004d84:	b086      	sub	sp, #24
 8004d86:	af00      	add	r7, sp, #0
 8004d88:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d8a:	f3ef 8310 	mrs	r3, PRIMASK
 8004d8e:	60bb      	str	r3, [r7, #8]
  return(result);
 8004d90:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004d92:	617b      	str	r3, [r7, #20]
 8004d94:	2301      	movs	r3, #1
 8004d96:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	f383 8810 	msr	PRIMASK, r3
}
 8004d9e:	46c0      	nop			; (mov r8, r8)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	681a      	ldr	r2, [r3, #0]
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	2140      	movs	r1, #64	; 0x40
 8004dac:	438a      	bics	r2, r1
 8004dae:	601a      	str	r2, [r3, #0]
 8004db0:	697b      	ldr	r3, [r7, #20]
 8004db2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004db4:	693b      	ldr	r3, [r7, #16]
 8004db6:	f383 8810 	msr	PRIMASK, r3
}
 8004dba:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2220      	movs	r2, #32
 8004dc0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	0018      	movs	r0, r3
 8004dcc:	f7ff fa14 	bl	80041f8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004dd0:	46c0      	nop			; (mov r8, r8)
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	b006      	add	sp, #24
 8004dd6:	bd80      	pop	{r7, pc}

08004dd8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b094      	sub	sp, #80	; 0x50
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004de0:	204e      	movs	r0, #78	; 0x4e
 8004de2:	183b      	adds	r3, r7, r0
 8004de4:	687a      	ldr	r2, [r7, #4]
 8004de6:	215c      	movs	r1, #92	; 0x5c
 8004de8:	5a52      	ldrh	r2, [r2, r1]
 8004dea:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2280      	movs	r2, #128	; 0x80
 8004df0:	589b      	ldr	r3, [r3, r2]
 8004df2:	2b22      	cmp	r3, #34	; 0x22
 8004df4:	d000      	beq.n	8004df8 <UART_RxISR_8BIT+0x20>
 8004df6:	e0bf      	b.n	8004f78 <UART_RxISR_8BIT+0x1a0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004dfe:	214c      	movs	r1, #76	; 0x4c
 8004e00:	187b      	adds	r3, r7, r1
 8004e02:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004e04:	187b      	adds	r3, r7, r1
 8004e06:	881b      	ldrh	r3, [r3, #0]
 8004e08:	b2da      	uxtb	r2, r3
 8004e0a:	183b      	adds	r3, r7, r0
 8004e0c:	881b      	ldrh	r3, [r3, #0]
 8004e0e:	b2d9      	uxtb	r1, r3
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e14:	400a      	ands	r2, r1
 8004e16:	b2d2      	uxtb	r2, r2
 8004e18:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e1e:	1c5a      	adds	r2, r3, #1
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	225a      	movs	r2, #90	; 0x5a
 8004e28:	5a9b      	ldrh	r3, [r3, r2]
 8004e2a:	b29b      	uxth	r3, r3
 8004e2c:	3b01      	subs	r3, #1
 8004e2e:	b299      	uxth	r1, r3
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	225a      	movs	r2, #90	; 0x5a
 8004e34:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	225a      	movs	r2, #90	; 0x5a
 8004e3a:	5a9b      	ldrh	r3, [r3, r2]
 8004e3c:	b29b      	uxth	r3, r3
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d000      	beq.n	8004e44 <UART_RxISR_8BIT+0x6c>
 8004e42:	e0a1      	b.n	8004f88 <UART_RxISR_8BIT+0x1b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e44:	f3ef 8310 	mrs	r3, PRIMASK
 8004e48:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e4c:	64bb      	str	r3, [r7, #72]	; 0x48
 8004e4e:	2301      	movs	r3, #1
 8004e50:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e54:	f383 8810 	msr	PRIMASK, r3
}
 8004e58:	46c0      	nop			; (mov r8, r8)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	681a      	ldr	r2, [r3, #0]
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	494a      	ldr	r1, [pc, #296]	; (8004f90 <UART_RxISR_8BIT+0x1b8>)
 8004e66:	400a      	ands	r2, r1
 8004e68:	601a      	str	r2, [r3, #0]
 8004e6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e70:	f383 8810 	msr	PRIMASK, r3
}
 8004e74:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e76:	f3ef 8310 	mrs	r3, PRIMASK
 8004e7a:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8004e7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e7e:	647b      	str	r3, [r7, #68]	; 0x44
 8004e80:	2301      	movs	r3, #1
 8004e82:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e86:	f383 8810 	msr	PRIMASK, r3
}
 8004e8a:	46c0      	nop			; (mov r8, r8)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	689a      	ldr	r2, [r3, #8]
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	2101      	movs	r1, #1
 8004e98:	438a      	bics	r2, r1
 8004e9a:	609a      	str	r2, [r3, #8]
 8004e9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e9e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ea0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ea2:	f383 8810 	msr	PRIMASK, r3
}
 8004ea6:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2280      	movs	r2, #128	; 0x80
 8004eac:	2120      	movs	r1, #32
 8004eae:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2200      	movs	r2, #0
 8004eba:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	4a34      	ldr	r2, [pc, #208]	; (8004f94 <UART_RxISR_8BIT+0x1bc>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d01f      	beq.n	8004f06 <UART_RxISR_8BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	685a      	ldr	r2, [r3, #4]
 8004ecc:	2380      	movs	r3, #128	; 0x80
 8004ece:	041b      	lsls	r3, r3, #16
 8004ed0:	4013      	ands	r3, r2
 8004ed2:	d018      	beq.n	8004f06 <UART_RxISR_8BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ed4:	f3ef 8310 	mrs	r3, PRIMASK
 8004ed8:	61bb      	str	r3, [r7, #24]
  return(result);
 8004eda:	69bb      	ldr	r3, [r7, #24]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004edc:	643b      	str	r3, [r7, #64]	; 0x40
 8004ede:	2301      	movs	r3, #1
 8004ee0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ee2:	69fb      	ldr	r3, [r7, #28]
 8004ee4:	f383 8810 	msr	PRIMASK, r3
}
 8004ee8:	46c0      	nop			; (mov r8, r8)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	681a      	ldr	r2, [r3, #0]
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	4928      	ldr	r1, [pc, #160]	; (8004f98 <UART_RxISR_8BIT+0x1c0>)
 8004ef6:	400a      	ands	r2, r1
 8004ef8:	601a      	str	r2, [r3, #0]
 8004efa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004efc:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004efe:	6a3b      	ldr	r3, [r7, #32]
 8004f00:	f383 8810 	msr	PRIMASK, r3
}
 8004f04:	46c0      	nop			; (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f0a:	2b01      	cmp	r3, #1
 8004f0c:	d12f      	bne.n	8004f6e <UART_RxISR_8BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2200      	movs	r2, #0
 8004f12:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004f14:	f3ef 8310 	mrs	r3, PRIMASK
 8004f18:	60fb      	str	r3, [r7, #12]
  return(result);
 8004f1a:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f1c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f1e:	2301      	movs	r3, #1
 8004f20:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f22:	693b      	ldr	r3, [r7, #16]
 8004f24:	f383 8810 	msr	PRIMASK, r3
}
 8004f28:	46c0      	nop			; (mov r8, r8)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	681a      	ldr	r2, [r3, #0]
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	2110      	movs	r1, #16
 8004f36:	438a      	bics	r2, r1
 8004f38:	601a      	str	r2, [r3, #0]
 8004f3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f3c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f3e:	697b      	ldr	r3, [r7, #20]
 8004f40:	f383 8810 	msr	PRIMASK, r3
}
 8004f44:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	69db      	ldr	r3, [r3, #28]
 8004f4c:	2210      	movs	r2, #16
 8004f4e:	4013      	ands	r3, r2
 8004f50:	2b10      	cmp	r3, #16
 8004f52:	d103      	bne.n	8004f5c <UART_RxISR_8BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	2210      	movs	r2, #16
 8004f5a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2258      	movs	r2, #88	; 0x58
 8004f60:	5a9a      	ldrh	r2, [r3, r2]
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	0011      	movs	r1, r2
 8004f66:	0018      	movs	r0, r3
 8004f68:	f7ff f956 	bl	8004218 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004f6c:	e00c      	b.n	8004f88 <UART_RxISR_8BIT+0x1b0>
        HAL_UART_RxCpltCallback(huart);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	0018      	movs	r0, r3
 8004f72:	f7fb fe75 	bl	8000c60 <HAL_UART_RxCpltCallback>
}
 8004f76:	e007      	b.n	8004f88 <UART_RxISR_8BIT+0x1b0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	699a      	ldr	r2, [r3, #24]
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	2108      	movs	r1, #8
 8004f84:	430a      	orrs	r2, r1
 8004f86:	619a      	str	r2, [r3, #24]
}
 8004f88:	46c0      	nop			; (mov r8, r8)
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	b014      	add	sp, #80	; 0x50
 8004f8e:	bd80      	pop	{r7, pc}
 8004f90:	fffffedf 	.word	0xfffffedf
 8004f94:	40004800 	.word	0x40004800
 8004f98:	fbffffff 	.word	0xfbffffff

08004f9c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b094      	sub	sp, #80	; 0x50
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004fa4:	204e      	movs	r0, #78	; 0x4e
 8004fa6:	183b      	adds	r3, r7, r0
 8004fa8:	687a      	ldr	r2, [r7, #4]
 8004faa:	215c      	movs	r1, #92	; 0x5c
 8004fac:	5a52      	ldrh	r2, [r2, r1]
 8004fae:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2280      	movs	r2, #128	; 0x80
 8004fb4:	589b      	ldr	r3, [r3, r2]
 8004fb6:	2b22      	cmp	r3, #34	; 0x22
 8004fb8:	d000      	beq.n	8004fbc <UART_RxISR_16BIT+0x20>
 8004fba:	e0bf      	b.n	800513c <UART_RxISR_16BIT+0x1a0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004fc2:	214c      	movs	r1, #76	; 0x4c
 8004fc4:	187b      	adds	r3, r7, r1
 8004fc6:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fcc:	64bb      	str	r3, [r7, #72]	; 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 8004fce:	187b      	adds	r3, r7, r1
 8004fd0:	183a      	adds	r2, r7, r0
 8004fd2:	881b      	ldrh	r3, [r3, #0]
 8004fd4:	8812      	ldrh	r2, [r2, #0]
 8004fd6:	4013      	ands	r3, r2
 8004fd8:	b29a      	uxth	r2, r3
 8004fda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004fdc:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fe2:	1c9a      	adds	r2, r3, #2
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	225a      	movs	r2, #90	; 0x5a
 8004fec:	5a9b      	ldrh	r3, [r3, r2]
 8004fee:	b29b      	uxth	r3, r3
 8004ff0:	3b01      	subs	r3, #1
 8004ff2:	b299      	uxth	r1, r3
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	225a      	movs	r2, #90	; 0x5a
 8004ff8:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	225a      	movs	r2, #90	; 0x5a
 8004ffe:	5a9b      	ldrh	r3, [r3, r2]
 8005000:	b29b      	uxth	r3, r3
 8005002:	2b00      	cmp	r3, #0
 8005004:	d000      	beq.n	8005008 <UART_RxISR_16BIT+0x6c>
 8005006:	e0a1      	b.n	800514c <UART_RxISR_16BIT+0x1b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005008:	f3ef 8310 	mrs	r3, PRIMASK
 800500c:	623b      	str	r3, [r7, #32]
  return(result);
 800500e:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005010:	647b      	str	r3, [r7, #68]	; 0x44
 8005012:	2301      	movs	r3, #1
 8005014:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005018:	f383 8810 	msr	PRIMASK, r3
}
 800501c:	46c0      	nop			; (mov r8, r8)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	681a      	ldr	r2, [r3, #0]
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	494a      	ldr	r1, [pc, #296]	; (8005154 <UART_RxISR_16BIT+0x1b8>)
 800502a:	400a      	ands	r2, r1
 800502c:	601a      	str	r2, [r3, #0]
 800502e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005030:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005032:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005034:	f383 8810 	msr	PRIMASK, r3
}
 8005038:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800503a:	f3ef 8310 	mrs	r3, PRIMASK
 800503e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8005040:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005042:	643b      	str	r3, [r7, #64]	; 0x40
 8005044:	2301      	movs	r3, #1
 8005046:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005048:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800504a:	f383 8810 	msr	PRIMASK, r3
}
 800504e:	46c0      	nop			; (mov r8, r8)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	689a      	ldr	r2, [r3, #8]
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	2101      	movs	r1, #1
 800505c:	438a      	bics	r2, r1
 800505e:	609a      	str	r2, [r3, #8]
 8005060:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005062:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005064:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005066:	f383 8810 	msr	PRIMASK, r3
}
 800506a:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2280      	movs	r2, #128	; 0x80
 8005070:	2120      	movs	r1, #32
 8005072:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2200      	movs	r2, #0
 8005078:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2200      	movs	r2, #0
 800507e:	665a      	str	r2, [r3, #100]	; 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	4a34      	ldr	r2, [pc, #208]	; (8005158 <UART_RxISR_16BIT+0x1bc>)
 8005086:	4293      	cmp	r3, r2
 8005088:	d01f      	beq.n	80050ca <UART_RxISR_16BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	685a      	ldr	r2, [r3, #4]
 8005090:	2380      	movs	r3, #128	; 0x80
 8005092:	041b      	lsls	r3, r3, #16
 8005094:	4013      	ands	r3, r2
 8005096:	d018      	beq.n	80050ca <UART_RxISR_16BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005098:	f3ef 8310 	mrs	r3, PRIMASK
 800509c:	617b      	str	r3, [r7, #20]
  return(result);
 800509e:	697b      	ldr	r3, [r7, #20]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80050a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80050a2:	2301      	movs	r3, #1
 80050a4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050a6:	69bb      	ldr	r3, [r7, #24]
 80050a8:	f383 8810 	msr	PRIMASK, r3
}
 80050ac:	46c0      	nop			; (mov r8, r8)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	681a      	ldr	r2, [r3, #0]
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	4928      	ldr	r1, [pc, #160]	; (800515c <UART_RxISR_16BIT+0x1c0>)
 80050ba:	400a      	ands	r2, r1
 80050bc:	601a      	str	r2, [r3, #0]
 80050be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050c0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050c2:	69fb      	ldr	r3, [r7, #28]
 80050c4:	f383 8810 	msr	PRIMASK, r3
}
 80050c8:	46c0      	nop			; (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050ce:	2b01      	cmp	r3, #1
 80050d0:	d12f      	bne.n	8005132 <UART_RxISR_16BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2200      	movs	r2, #0
 80050d6:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80050d8:	f3ef 8310 	mrs	r3, PRIMASK
 80050dc:	60bb      	str	r3, [r7, #8]
  return(result);
 80050de:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050e0:	63bb      	str	r3, [r7, #56]	; 0x38
 80050e2:	2301      	movs	r3, #1
 80050e4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	f383 8810 	msr	PRIMASK, r3
}
 80050ec:	46c0      	nop			; (mov r8, r8)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	681a      	ldr	r2, [r3, #0]
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	2110      	movs	r1, #16
 80050fa:	438a      	bics	r2, r1
 80050fc:	601a      	str	r2, [r3, #0]
 80050fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005100:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005102:	693b      	ldr	r3, [r7, #16]
 8005104:	f383 8810 	msr	PRIMASK, r3
}
 8005108:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	69db      	ldr	r3, [r3, #28]
 8005110:	2210      	movs	r2, #16
 8005112:	4013      	ands	r3, r2
 8005114:	2b10      	cmp	r3, #16
 8005116:	d103      	bne.n	8005120 <UART_RxISR_16BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	2210      	movs	r2, #16
 800511e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2258      	movs	r2, #88	; 0x58
 8005124:	5a9a      	ldrh	r2, [r3, r2]
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	0011      	movs	r1, r2
 800512a:	0018      	movs	r0, r3
 800512c:	f7ff f874 	bl	8004218 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005130:	e00c      	b.n	800514c <UART_RxISR_16BIT+0x1b0>
        HAL_UART_RxCpltCallback(huart);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	0018      	movs	r0, r3
 8005136:	f7fb fd93 	bl	8000c60 <HAL_UART_RxCpltCallback>
}
 800513a:	e007      	b.n	800514c <UART_RxISR_16BIT+0x1b0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	699a      	ldr	r2, [r3, #24]
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	2108      	movs	r1, #8
 8005148:	430a      	orrs	r2, r1
 800514a:	619a      	str	r2, [r3, #24]
}
 800514c:	46c0      	nop			; (mov r8, r8)
 800514e:	46bd      	mov	sp, r7
 8005150:	b014      	add	sp, #80	; 0x50
 8005152:	bd80      	pop	{r7, pc}
 8005154:	fffffedf 	.word	0xfffffedf
 8005158:	40004800 	.word	0x40004800
 800515c:	fbffffff 	.word	0xfbffffff

08005160 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005160:	b580      	push	{r7, lr}
 8005162:	b082      	sub	sp, #8
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005168:	46c0      	nop			; (mov r8, r8)
 800516a:	46bd      	mov	sp, r7
 800516c:	b002      	add	sp, #8
 800516e:	bd80      	pop	{r7, pc}

08005170 <malloc>:
 8005170:	b510      	push	{r4, lr}
 8005172:	4b03      	ldr	r3, [pc, #12]	; (8005180 <malloc+0x10>)
 8005174:	0001      	movs	r1, r0
 8005176:	6818      	ldr	r0, [r3, #0]
 8005178:	f000 f830 	bl	80051dc <_malloc_r>
 800517c:	bd10      	pop	{r4, pc}
 800517e:	46c0      	nop			; (mov r8, r8)
 8005180:	200001f4 	.word	0x200001f4

08005184 <free>:
 8005184:	b510      	push	{r4, lr}
 8005186:	4b03      	ldr	r3, [pc, #12]	; (8005194 <free+0x10>)
 8005188:	0001      	movs	r1, r0
 800518a:	6818      	ldr	r0, [r3, #0]
 800518c:	f000 fb5a 	bl	8005844 <_free_r>
 8005190:	bd10      	pop	{r4, pc}
 8005192:	46c0      	nop			; (mov r8, r8)
 8005194:	200001f4 	.word	0x200001f4

08005198 <sbrk_aligned>:
 8005198:	b570      	push	{r4, r5, r6, lr}
 800519a:	4e0f      	ldr	r6, [pc, #60]	; (80051d8 <sbrk_aligned+0x40>)
 800519c:	000d      	movs	r5, r1
 800519e:	6831      	ldr	r1, [r6, #0]
 80051a0:	0004      	movs	r4, r0
 80051a2:	2900      	cmp	r1, #0
 80051a4:	d102      	bne.n	80051ac <sbrk_aligned+0x14>
 80051a6:	f000 fac7 	bl	8005738 <_sbrk_r>
 80051aa:	6030      	str	r0, [r6, #0]
 80051ac:	0029      	movs	r1, r5
 80051ae:	0020      	movs	r0, r4
 80051b0:	f000 fac2 	bl	8005738 <_sbrk_r>
 80051b4:	1c43      	adds	r3, r0, #1
 80051b6:	d00a      	beq.n	80051ce <sbrk_aligned+0x36>
 80051b8:	2303      	movs	r3, #3
 80051ba:	1cc5      	adds	r5, r0, #3
 80051bc:	439d      	bics	r5, r3
 80051be:	42a8      	cmp	r0, r5
 80051c0:	d007      	beq.n	80051d2 <sbrk_aligned+0x3a>
 80051c2:	1a29      	subs	r1, r5, r0
 80051c4:	0020      	movs	r0, r4
 80051c6:	f000 fab7 	bl	8005738 <_sbrk_r>
 80051ca:	3001      	adds	r0, #1
 80051cc:	d101      	bne.n	80051d2 <sbrk_aligned+0x3a>
 80051ce:	2501      	movs	r5, #1
 80051d0:	426d      	negs	r5, r5
 80051d2:	0028      	movs	r0, r5
 80051d4:	bd70      	pop	{r4, r5, r6, pc}
 80051d6:	46c0      	nop			; (mov r8, r8)
 80051d8:	200003a4 	.word	0x200003a4

080051dc <_malloc_r>:
 80051dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80051de:	2203      	movs	r2, #3
 80051e0:	1ccb      	adds	r3, r1, #3
 80051e2:	4393      	bics	r3, r2
 80051e4:	3308      	adds	r3, #8
 80051e6:	0006      	movs	r6, r0
 80051e8:	001f      	movs	r7, r3
 80051ea:	2b0c      	cmp	r3, #12
 80051ec:	d238      	bcs.n	8005260 <_malloc_r+0x84>
 80051ee:	270c      	movs	r7, #12
 80051f0:	42b9      	cmp	r1, r7
 80051f2:	d837      	bhi.n	8005264 <_malloc_r+0x88>
 80051f4:	0030      	movs	r0, r6
 80051f6:	f000 f873 	bl	80052e0 <__malloc_lock>
 80051fa:	4b38      	ldr	r3, [pc, #224]	; (80052dc <_malloc_r+0x100>)
 80051fc:	9300      	str	r3, [sp, #0]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	001c      	movs	r4, r3
 8005202:	2c00      	cmp	r4, #0
 8005204:	d133      	bne.n	800526e <_malloc_r+0x92>
 8005206:	0039      	movs	r1, r7
 8005208:	0030      	movs	r0, r6
 800520a:	f7ff ffc5 	bl	8005198 <sbrk_aligned>
 800520e:	0004      	movs	r4, r0
 8005210:	1c43      	adds	r3, r0, #1
 8005212:	d15e      	bne.n	80052d2 <_malloc_r+0xf6>
 8005214:	9b00      	ldr	r3, [sp, #0]
 8005216:	681c      	ldr	r4, [r3, #0]
 8005218:	0025      	movs	r5, r4
 800521a:	2d00      	cmp	r5, #0
 800521c:	d14e      	bne.n	80052bc <_malloc_r+0xe0>
 800521e:	2c00      	cmp	r4, #0
 8005220:	d051      	beq.n	80052c6 <_malloc_r+0xea>
 8005222:	6823      	ldr	r3, [r4, #0]
 8005224:	0029      	movs	r1, r5
 8005226:	18e3      	adds	r3, r4, r3
 8005228:	0030      	movs	r0, r6
 800522a:	9301      	str	r3, [sp, #4]
 800522c:	f000 fa84 	bl	8005738 <_sbrk_r>
 8005230:	9b01      	ldr	r3, [sp, #4]
 8005232:	4283      	cmp	r3, r0
 8005234:	d147      	bne.n	80052c6 <_malloc_r+0xea>
 8005236:	6823      	ldr	r3, [r4, #0]
 8005238:	0030      	movs	r0, r6
 800523a:	1aff      	subs	r7, r7, r3
 800523c:	0039      	movs	r1, r7
 800523e:	f7ff ffab 	bl	8005198 <sbrk_aligned>
 8005242:	3001      	adds	r0, #1
 8005244:	d03f      	beq.n	80052c6 <_malloc_r+0xea>
 8005246:	6823      	ldr	r3, [r4, #0]
 8005248:	19db      	adds	r3, r3, r7
 800524a:	6023      	str	r3, [r4, #0]
 800524c:	9b00      	ldr	r3, [sp, #0]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	2b00      	cmp	r3, #0
 8005252:	d040      	beq.n	80052d6 <_malloc_r+0xfa>
 8005254:	685a      	ldr	r2, [r3, #4]
 8005256:	42a2      	cmp	r2, r4
 8005258:	d133      	bne.n	80052c2 <_malloc_r+0xe6>
 800525a:	2200      	movs	r2, #0
 800525c:	605a      	str	r2, [r3, #4]
 800525e:	e014      	b.n	800528a <_malloc_r+0xae>
 8005260:	2b00      	cmp	r3, #0
 8005262:	dac5      	bge.n	80051f0 <_malloc_r+0x14>
 8005264:	230c      	movs	r3, #12
 8005266:	2500      	movs	r5, #0
 8005268:	6033      	str	r3, [r6, #0]
 800526a:	0028      	movs	r0, r5
 800526c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800526e:	6821      	ldr	r1, [r4, #0]
 8005270:	1bc9      	subs	r1, r1, r7
 8005272:	d420      	bmi.n	80052b6 <_malloc_r+0xda>
 8005274:	290b      	cmp	r1, #11
 8005276:	d918      	bls.n	80052aa <_malloc_r+0xce>
 8005278:	19e2      	adds	r2, r4, r7
 800527a:	6027      	str	r7, [r4, #0]
 800527c:	42a3      	cmp	r3, r4
 800527e:	d112      	bne.n	80052a6 <_malloc_r+0xca>
 8005280:	9b00      	ldr	r3, [sp, #0]
 8005282:	601a      	str	r2, [r3, #0]
 8005284:	6863      	ldr	r3, [r4, #4]
 8005286:	6011      	str	r1, [r2, #0]
 8005288:	6053      	str	r3, [r2, #4]
 800528a:	0030      	movs	r0, r6
 800528c:	0025      	movs	r5, r4
 800528e:	f000 f82f 	bl	80052f0 <__malloc_unlock>
 8005292:	2207      	movs	r2, #7
 8005294:	350b      	adds	r5, #11
 8005296:	1d23      	adds	r3, r4, #4
 8005298:	4395      	bics	r5, r2
 800529a:	1aea      	subs	r2, r5, r3
 800529c:	429d      	cmp	r5, r3
 800529e:	d0e4      	beq.n	800526a <_malloc_r+0x8e>
 80052a0:	1b5b      	subs	r3, r3, r5
 80052a2:	50a3      	str	r3, [r4, r2]
 80052a4:	e7e1      	b.n	800526a <_malloc_r+0x8e>
 80052a6:	605a      	str	r2, [r3, #4]
 80052a8:	e7ec      	b.n	8005284 <_malloc_r+0xa8>
 80052aa:	6862      	ldr	r2, [r4, #4]
 80052ac:	42a3      	cmp	r3, r4
 80052ae:	d1d5      	bne.n	800525c <_malloc_r+0x80>
 80052b0:	9b00      	ldr	r3, [sp, #0]
 80052b2:	601a      	str	r2, [r3, #0]
 80052b4:	e7e9      	b.n	800528a <_malloc_r+0xae>
 80052b6:	0023      	movs	r3, r4
 80052b8:	6864      	ldr	r4, [r4, #4]
 80052ba:	e7a2      	b.n	8005202 <_malloc_r+0x26>
 80052bc:	002c      	movs	r4, r5
 80052be:	686d      	ldr	r5, [r5, #4]
 80052c0:	e7ab      	b.n	800521a <_malloc_r+0x3e>
 80052c2:	0013      	movs	r3, r2
 80052c4:	e7c4      	b.n	8005250 <_malloc_r+0x74>
 80052c6:	230c      	movs	r3, #12
 80052c8:	0030      	movs	r0, r6
 80052ca:	6033      	str	r3, [r6, #0]
 80052cc:	f000 f810 	bl	80052f0 <__malloc_unlock>
 80052d0:	e7cb      	b.n	800526a <_malloc_r+0x8e>
 80052d2:	6027      	str	r7, [r4, #0]
 80052d4:	e7d9      	b.n	800528a <_malloc_r+0xae>
 80052d6:	605b      	str	r3, [r3, #4]
 80052d8:	deff      	udf	#255	; 0xff
 80052da:	46c0      	nop			; (mov r8, r8)
 80052dc:	200003a0 	.word	0x200003a0

080052e0 <__malloc_lock>:
 80052e0:	b510      	push	{r4, lr}
 80052e2:	4802      	ldr	r0, [pc, #8]	; (80052ec <__malloc_lock+0xc>)
 80052e4:	f000 fa78 	bl	80057d8 <__retarget_lock_acquire_recursive>
 80052e8:	bd10      	pop	{r4, pc}
 80052ea:	46c0      	nop			; (mov r8, r8)
 80052ec:	200004e8 	.word	0x200004e8

080052f0 <__malloc_unlock>:
 80052f0:	b510      	push	{r4, lr}
 80052f2:	4802      	ldr	r0, [pc, #8]	; (80052fc <__malloc_unlock+0xc>)
 80052f4:	f000 fa71 	bl	80057da <__retarget_lock_release_recursive>
 80052f8:	bd10      	pop	{r4, pc}
 80052fa:	46c0      	nop			; (mov r8, r8)
 80052fc:	200004e8 	.word	0x200004e8

08005300 <std>:
 8005300:	2300      	movs	r3, #0
 8005302:	b510      	push	{r4, lr}
 8005304:	0004      	movs	r4, r0
 8005306:	6003      	str	r3, [r0, #0]
 8005308:	6043      	str	r3, [r0, #4]
 800530a:	6083      	str	r3, [r0, #8]
 800530c:	8181      	strh	r1, [r0, #12]
 800530e:	6643      	str	r3, [r0, #100]	; 0x64
 8005310:	0019      	movs	r1, r3
 8005312:	81c2      	strh	r2, [r0, #14]
 8005314:	6103      	str	r3, [r0, #16]
 8005316:	6143      	str	r3, [r0, #20]
 8005318:	6183      	str	r3, [r0, #24]
 800531a:	2208      	movs	r2, #8
 800531c:	305c      	adds	r0, #92	; 0x5c
 800531e:	f000 f91d 	bl	800555c <memset>
 8005322:	4b05      	ldr	r3, [pc, #20]	; (8005338 <std+0x38>)
 8005324:	6224      	str	r4, [r4, #32]
 8005326:	6263      	str	r3, [r4, #36]	; 0x24
 8005328:	4b04      	ldr	r3, [pc, #16]	; (800533c <std+0x3c>)
 800532a:	62a3      	str	r3, [r4, #40]	; 0x28
 800532c:	4b04      	ldr	r3, [pc, #16]	; (8005340 <std+0x40>)
 800532e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005330:	4b04      	ldr	r3, [pc, #16]	; (8005344 <std+0x44>)
 8005332:	6323      	str	r3, [r4, #48]	; 0x30
 8005334:	bd10      	pop	{r4, pc}
 8005336:	46c0      	nop			; (mov r8, r8)
 8005338:	080054c5 	.word	0x080054c5
 800533c:	080054ed 	.word	0x080054ed
 8005340:	08005525 	.word	0x08005525
 8005344:	08005551 	.word	0x08005551

08005348 <stdio_exit_handler>:
 8005348:	b510      	push	{r4, lr}
 800534a:	4a03      	ldr	r2, [pc, #12]	; (8005358 <stdio_exit_handler+0x10>)
 800534c:	4903      	ldr	r1, [pc, #12]	; (800535c <stdio_exit_handler+0x14>)
 800534e:	4804      	ldr	r0, [pc, #16]	; (8005360 <stdio_exit_handler+0x18>)
 8005350:	f000 f86c 	bl	800542c <_fwalk_sglue>
 8005354:	bd10      	pop	{r4, pc}
 8005356:	46c0      	nop			; (mov r8, r8)
 8005358:	2000019c 	.word	0x2000019c
 800535c:	08006239 	.word	0x08006239
 8005360:	200001a8 	.word	0x200001a8

08005364 <cleanup_stdio>:
 8005364:	6841      	ldr	r1, [r0, #4]
 8005366:	4b0b      	ldr	r3, [pc, #44]	; (8005394 <cleanup_stdio+0x30>)
 8005368:	b510      	push	{r4, lr}
 800536a:	0004      	movs	r4, r0
 800536c:	4299      	cmp	r1, r3
 800536e:	d001      	beq.n	8005374 <cleanup_stdio+0x10>
 8005370:	f000 ff62 	bl	8006238 <_fflush_r>
 8005374:	68a1      	ldr	r1, [r4, #8]
 8005376:	4b08      	ldr	r3, [pc, #32]	; (8005398 <cleanup_stdio+0x34>)
 8005378:	4299      	cmp	r1, r3
 800537a:	d002      	beq.n	8005382 <cleanup_stdio+0x1e>
 800537c:	0020      	movs	r0, r4
 800537e:	f000 ff5b 	bl	8006238 <_fflush_r>
 8005382:	68e1      	ldr	r1, [r4, #12]
 8005384:	4b05      	ldr	r3, [pc, #20]	; (800539c <cleanup_stdio+0x38>)
 8005386:	4299      	cmp	r1, r3
 8005388:	d002      	beq.n	8005390 <cleanup_stdio+0x2c>
 800538a:	0020      	movs	r0, r4
 800538c:	f000 ff54 	bl	8006238 <_fflush_r>
 8005390:	bd10      	pop	{r4, pc}
 8005392:	46c0      	nop			; (mov r8, r8)
 8005394:	200003a8 	.word	0x200003a8
 8005398:	20000410 	.word	0x20000410
 800539c:	20000478 	.word	0x20000478

080053a0 <global_stdio_init.part.0>:
 80053a0:	b510      	push	{r4, lr}
 80053a2:	4b09      	ldr	r3, [pc, #36]	; (80053c8 <global_stdio_init.part.0+0x28>)
 80053a4:	4a09      	ldr	r2, [pc, #36]	; (80053cc <global_stdio_init.part.0+0x2c>)
 80053a6:	2104      	movs	r1, #4
 80053a8:	601a      	str	r2, [r3, #0]
 80053aa:	4809      	ldr	r0, [pc, #36]	; (80053d0 <global_stdio_init.part.0+0x30>)
 80053ac:	2200      	movs	r2, #0
 80053ae:	f7ff ffa7 	bl	8005300 <std>
 80053b2:	2201      	movs	r2, #1
 80053b4:	2109      	movs	r1, #9
 80053b6:	4807      	ldr	r0, [pc, #28]	; (80053d4 <global_stdio_init.part.0+0x34>)
 80053b8:	f7ff ffa2 	bl	8005300 <std>
 80053bc:	2202      	movs	r2, #2
 80053be:	2112      	movs	r1, #18
 80053c0:	4805      	ldr	r0, [pc, #20]	; (80053d8 <global_stdio_init.part.0+0x38>)
 80053c2:	f7ff ff9d 	bl	8005300 <std>
 80053c6:	bd10      	pop	{r4, pc}
 80053c8:	200004e0 	.word	0x200004e0
 80053cc:	08005349 	.word	0x08005349
 80053d0:	200003a8 	.word	0x200003a8
 80053d4:	20000410 	.word	0x20000410
 80053d8:	20000478 	.word	0x20000478

080053dc <__sfp_lock_acquire>:
 80053dc:	b510      	push	{r4, lr}
 80053de:	4802      	ldr	r0, [pc, #8]	; (80053e8 <__sfp_lock_acquire+0xc>)
 80053e0:	f000 f9fa 	bl	80057d8 <__retarget_lock_acquire_recursive>
 80053e4:	bd10      	pop	{r4, pc}
 80053e6:	46c0      	nop			; (mov r8, r8)
 80053e8:	200004e9 	.word	0x200004e9

080053ec <__sfp_lock_release>:
 80053ec:	b510      	push	{r4, lr}
 80053ee:	4802      	ldr	r0, [pc, #8]	; (80053f8 <__sfp_lock_release+0xc>)
 80053f0:	f000 f9f3 	bl	80057da <__retarget_lock_release_recursive>
 80053f4:	bd10      	pop	{r4, pc}
 80053f6:	46c0      	nop			; (mov r8, r8)
 80053f8:	200004e9 	.word	0x200004e9

080053fc <__sinit>:
 80053fc:	b510      	push	{r4, lr}
 80053fe:	0004      	movs	r4, r0
 8005400:	f7ff ffec 	bl	80053dc <__sfp_lock_acquire>
 8005404:	6a23      	ldr	r3, [r4, #32]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d002      	beq.n	8005410 <__sinit+0x14>
 800540a:	f7ff ffef 	bl	80053ec <__sfp_lock_release>
 800540e:	bd10      	pop	{r4, pc}
 8005410:	4b04      	ldr	r3, [pc, #16]	; (8005424 <__sinit+0x28>)
 8005412:	6223      	str	r3, [r4, #32]
 8005414:	4b04      	ldr	r3, [pc, #16]	; (8005428 <__sinit+0x2c>)
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d1f6      	bne.n	800540a <__sinit+0xe>
 800541c:	f7ff ffc0 	bl	80053a0 <global_stdio_init.part.0>
 8005420:	e7f3      	b.n	800540a <__sinit+0xe>
 8005422:	46c0      	nop			; (mov r8, r8)
 8005424:	08005365 	.word	0x08005365
 8005428:	200004e0 	.word	0x200004e0

0800542c <_fwalk_sglue>:
 800542c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800542e:	0014      	movs	r4, r2
 8005430:	2600      	movs	r6, #0
 8005432:	9000      	str	r0, [sp, #0]
 8005434:	9101      	str	r1, [sp, #4]
 8005436:	68a5      	ldr	r5, [r4, #8]
 8005438:	6867      	ldr	r7, [r4, #4]
 800543a:	3f01      	subs	r7, #1
 800543c:	d504      	bpl.n	8005448 <_fwalk_sglue+0x1c>
 800543e:	6824      	ldr	r4, [r4, #0]
 8005440:	2c00      	cmp	r4, #0
 8005442:	d1f8      	bne.n	8005436 <_fwalk_sglue+0xa>
 8005444:	0030      	movs	r0, r6
 8005446:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005448:	89ab      	ldrh	r3, [r5, #12]
 800544a:	2b01      	cmp	r3, #1
 800544c:	d908      	bls.n	8005460 <_fwalk_sglue+0x34>
 800544e:	220e      	movs	r2, #14
 8005450:	5eab      	ldrsh	r3, [r5, r2]
 8005452:	3301      	adds	r3, #1
 8005454:	d004      	beq.n	8005460 <_fwalk_sglue+0x34>
 8005456:	0029      	movs	r1, r5
 8005458:	9800      	ldr	r0, [sp, #0]
 800545a:	9b01      	ldr	r3, [sp, #4]
 800545c:	4798      	blx	r3
 800545e:	4306      	orrs	r6, r0
 8005460:	3568      	adds	r5, #104	; 0x68
 8005462:	e7ea      	b.n	800543a <_fwalk_sglue+0xe>

08005464 <iprintf>:
 8005464:	b40f      	push	{r0, r1, r2, r3}
 8005466:	b507      	push	{r0, r1, r2, lr}
 8005468:	4905      	ldr	r1, [pc, #20]	; (8005480 <iprintf+0x1c>)
 800546a:	ab04      	add	r3, sp, #16
 800546c:	6808      	ldr	r0, [r1, #0]
 800546e:	cb04      	ldmia	r3!, {r2}
 8005470:	6881      	ldr	r1, [r0, #8]
 8005472:	9301      	str	r3, [sp, #4]
 8005474:	f000 fbba 	bl	8005bec <_vfiprintf_r>
 8005478:	b003      	add	sp, #12
 800547a:	bc08      	pop	{r3}
 800547c:	b004      	add	sp, #16
 800547e:	4718      	bx	r3
 8005480:	200001f4 	.word	0x200001f4

08005484 <siprintf>:
 8005484:	b40e      	push	{r1, r2, r3}
 8005486:	b500      	push	{lr}
 8005488:	490b      	ldr	r1, [pc, #44]	; (80054b8 <siprintf+0x34>)
 800548a:	b09c      	sub	sp, #112	; 0x70
 800548c:	ab1d      	add	r3, sp, #116	; 0x74
 800548e:	9002      	str	r0, [sp, #8]
 8005490:	9006      	str	r0, [sp, #24]
 8005492:	9107      	str	r1, [sp, #28]
 8005494:	9104      	str	r1, [sp, #16]
 8005496:	4809      	ldr	r0, [pc, #36]	; (80054bc <siprintf+0x38>)
 8005498:	4909      	ldr	r1, [pc, #36]	; (80054c0 <siprintf+0x3c>)
 800549a:	cb04      	ldmia	r3!, {r2}
 800549c:	9105      	str	r1, [sp, #20]
 800549e:	6800      	ldr	r0, [r0, #0]
 80054a0:	a902      	add	r1, sp, #8
 80054a2:	9301      	str	r3, [sp, #4]
 80054a4:	f000 fa7a 	bl	800599c <_svfiprintf_r>
 80054a8:	2200      	movs	r2, #0
 80054aa:	9b02      	ldr	r3, [sp, #8]
 80054ac:	701a      	strb	r2, [r3, #0]
 80054ae:	b01c      	add	sp, #112	; 0x70
 80054b0:	bc08      	pop	{r3}
 80054b2:	b003      	add	sp, #12
 80054b4:	4718      	bx	r3
 80054b6:	46c0      	nop			; (mov r8, r8)
 80054b8:	7fffffff 	.word	0x7fffffff
 80054bc:	200001f4 	.word	0x200001f4
 80054c0:	ffff0208 	.word	0xffff0208

080054c4 <__sread>:
 80054c4:	b570      	push	{r4, r5, r6, lr}
 80054c6:	000c      	movs	r4, r1
 80054c8:	250e      	movs	r5, #14
 80054ca:	5f49      	ldrsh	r1, [r1, r5]
 80054cc:	f000 f920 	bl	8005710 <_read_r>
 80054d0:	2800      	cmp	r0, #0
 80054d2:	db03      	blt.n	80054dc <__sread+0x18>
 80054d4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80054d6:	181b      	adds	r3, r3, r0
 80054d8:	6563      	str	r3, [r4, #84]	; 0x54
 80054da:	bd70      	pop	{r4, r5, r6, pc}
 80054dc:	89a3      	ldrh	r3, [r4, #12]
 80054de:	4a02      	ldr	r2, [pc, #8]	; (80054e8 <__sread+0x24>)
 80054e0:	4013      	ands	r3, r2
 80054e2:	81a3      	strh	r3, [r4, #12]
 80054e4:	e7f9      	b.n	80054da <__sread+0x16>
 80054e6:	46c0      	nop			; (mov r8, r8)
 80054e8:	ffffefff 	.word	0xffffefff

080054ec <__swrite>:
 80054ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054ee:	001f      	movs	r7, r3
 80054f0:	898b      	ldrh	r3, [r1, #12]
 80054f2:	0005      	movs	r5, r0
 80054f4:	000c      	movs	r4, r1
 80054f6:	0016      	movs	r6, r2
 80054f8:	05db      	lsls	r3, r3, #23
 80054fa:	d505      	bpl.n	8005508 <__swrite+0x1c>
 80054fc:	230e      	movs	r3, #14
 80054fe:	5ec9      	ldrsh	r1, [r1, r3]
 8005500:	2200      	movs	r2, #0
 8005502:	2302      	movs	r3, #2
 8005504:	f000 f8f0 	bl	80056e8 <_lseek_r>
 8005508:	89a3      	ldrh	r3, [r4, #12]
 800550a:	4a05      	ldr	r2, [pc, #20]	; (8005520 <__swrite+0x34>)
 800550c:	0028      	movs	r0, r5
 800550e:	4013      	ands	r3, r2
 8005510:	81a3      	strh	r3, [r4, #12]
 8005512:	0032      	movs	r2, r6
 8005514:	230e      	movs	r3, #14
 8005516:	5ee1      	ldrsh	r1, [r4, r3]
 8005518:	003b      	movs	r3, r7
 800551a:	f000 f91f 	bl	800575c <_write_r>
 800551e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005520:	ffffefff 	.word	0xffffefff

08005524 <__sseek>:
 8005524:	b570      	push	{r4, r5, r6, lr}
 8005526:	000c      	movs	r4, r1
 8005528:	250e      	movs	r5, #14
 800552a:	5f49      	ldrsh	r1, [r1, r5]
 800552c:	f000 f8dc 	bl	80056e8 <_lseek_r>
 8005530:	89a3      	ldrh	r3, [r4, #12]
 8005532:	1c42      	adds	r2, r0, #1
 8005534:	d103      	bne.n	800553e <__sseek+0x1a>
 8005536:	4a05      	ldr	r2, [pc, #20]	; (800554c <__sseek+0x28>)
 8005538:	4013      	ands	r3, r2
 800553a:	81a3      	strh	r3, [r4, #12]
 800553c:	bd70      	pop	{r4, r5, r6, pc}
 800553e:	2280      	movs	r2, #128	; 0x80
 8005540:	0152      	lsls	r2, r2, #5
 8005542:	4313      	orrs	r3, r2
 8005544:	81a3      	strh	r3, [r4, #12]
 8005546:	6560      	str	r0, [r4, #84]	; 0x54
 8005548:	e7f8      	b.n	800553c <__sseek+0x18>
 800554a:	46c0      	nop			; (mov r8, r8)
 800554c:	ffffefff 	.word	0xffffefff

08005550 <__sclose>:
 8005550:	b510      	push	{r4, lr}
 8005552:	230e      	movs	r3, #14
 8005554:	5ec9      	ldrsh	r1, [r1, r3]
 8005556:	f000 f8b5 	bl	80056c4 <_close_r>
 800555a:	bd10      	pop	{r4, pc}

0800555c <memset>:
 800555c:	0003      	movs	r3, r0
 800555e:	1882      	adds	r2, r0, r2
 8005560:	4293      	cmp	r3, r2
 8005562:	d100      	bne.n	8005566 <memset+0xa>
 8005564:	4770      	bx	lr
 8005566:	7019      	strb	r1, [r3, #0]
 8005568:	3301      	adds	r3, #1
 800556a:	e7f9      	b.n	8005560 <memset+0x4>

0800556c <strdup>:
 800556c:	b510      	push	{r4, lr}
 800556e:	4b03      	ldr	r3, [pc, #12]	; (800557c <strdup+0x10>)
 8005570:	0001      	movs	r1, r0
 8005572:	6818      	ldr	r0, [r3, #0]
 8005574:	f000 f804 	bl	8005580 <_strdup_r>
 8005578:	bd10      	pop	{r4, pc}
 800557a:	46c0      	nop			; (mov r8, r8)
 800557c:	200001f4 	.word	0x200001f4

08005580 <_strdup_r>:
 8005580:	b570      	push	{r4, r5, r6, lr}
 8005582:	0004      	movs	r4, r0
 8005584:	0008      	movs	r0, r1
 8005586:	000d      	movs	r5, r1
 8005588:	f7fa fdc8 	bl	800011c <strlen>
 800558c:	1c46      	adds	r6, r0, #1
 800558e:	0031      	movs	r1, r6
 8005590:	0020      	movs	r0, r4
 8005592:	f7ff fe23 	bl	80051dc <_malloc_r>
 8005596:	1e04      	subs	r4, r0, #0
 8005598:	d003      	beq.n	80055a2 <_strdup_r+0x22>
 800559a:	0032      	movs	r2, r6
 800559c:	0029      	movs	r1, r5
 800559e:	f000 f929 	bl	80057f4 <memcpy>
 80055a2:	0020      	movs	r0, r4
 80055a4:	bd70      	pop	{r4, r5, r6, pc}

080055a6 <strncmp>:
 80055a6:	b530      	push	{r4, r5, lr}
 80055a8:	0005      	movs	r5, r0
 80055aa:	1e10      	subs	r0, r2, #0
 80055ac:	d00b      	beq.n	80055c6 <strncmp+0x20>
 80055ae:	2400      	movs	r4, #0
 80055b0:	3a01      	subs	r2, #1
 80055b2:	5d2b      	ldrb	r3, [r5, r4]
 80055b4:	5d08      	ldrb	r0, [r1, r4]
 80055b6:	4283      	cmp	r3, r0
 80055b8:	d104      	bne.n	80055c4 <strncmp+0x1e>
 80055ba:	42a2      	cmp	r2, r4
 80055bc:	d002      	beq.n	80055c4 <strncmp+0x1e>
 80055be:	3401      	adds	r4, #1
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d1f6      	bne.n	80055b2 <strncmp+0xc>
 80055c4:	1a18      	subs	r0, r3, r0
 80055c6:	bd30      	pop	{r4, r5, pc}

080055c8 <strpbrk>:
 80055c8:	b510      	push	{r4, lr}
 80055ca:	7803      	ldrb	r3, [r0, #0]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d013      	beq.n	80055f8 <strpbrk+0x30>
 80055d0:	000b      	movs	r3, r1
 80055d2:	7802      	ldrb	r2, [r0, #0]
 80055d4:	2a00      	cmp	r2, #0
 80055d6:	d10d      	bne.n	80055f4 <strpbrk+0x2c>
 80055d8:	781b      	ldrb	r3, [r3, #0]
 80055da:	1e5a      	subs	r2, r3, #1
 80055dc:	4193      	sbcs	r3, r2
 80055de:	425b      	negs	r3, r3
 80055e0:	4018      	ands	r0, r3
 80055e2:	bd10      	pop	{r4, pc}
 80055e4:	4294      	cmp	r4, r2
 80055e6:	d0fc      	beq.n	80055e2 <strpbrk+0x1a>
 80055e8:	3301      	adds	r3, #1
 80055ea:	781c      	ldrb	r4, [r3, #0]
 80055ec:	2c00      	cmp	r4, #0
 80055ee:	d1f9      	bne.n	80055e4 <strpbrk+0x1c>
 80055f0:	3001      	adds	r0, #1
 80055f2:	e7ee      	b.n	80055d2 <strpbrk+0xa>
 80055f4:	000b      	movs	r3, r1
 80055f6:	e7f8      	b.n	80055ea <strpbrk+0x22>
 80055f8:	0018      	movs	r0, r3
 80055fa:	e7f2      	b.n	80055e2 <strpbrk+0x1a>

080055fc <strtok>:
 80055fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055fe:	4b16      	ldr	r3, [pc, #88]	; (8005658 <strtok+0x5c>)
 8005600:	0005      	movs	r5, r0
 8005602:	681f      	ldr	r7, [r3, #0]
 8005604:	000e      	movs	r6, r1
 8005606:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 8005608:	2c00      	cmp	r4, #0
 800560a:	d11d      	bne.n	8005648 <strtok+0x4c>
 800560c:	2050      	movs	r0, #80	; 0x50
 800560e:	f7ff fdaf 	bl	8005170 <malloc>
 8005612:	1e02      	subs	r2, r0, #0
 8005614:	6478      	str	r0, [r7, #68]	; 0x44
 8005616:	d104      	bne.n	8005622 <strtok+0x26>
 8005618:	215b      	movs	r1, #91	; 0x5b
 800561a:	4b10      	ldr	r3, [pc, #64]	; (800565c <strtok+0x60>)
 800561c:	4810      	ldr	r0, [pc, #64]	; (8005660 <strtok+0x64>)
 800561e:	f000 f8f3 	bl	8005808 <__assert_func>
 8005622:	6004      	str	r4, [r0, #0]
 8005624:	6044      	str	r4, [r0, #4]
 8005626:	6084      	str	r4, [r0, #8]
 8005628:	60c4      	str	r4, [r0, #12]
 800562a:	6104      	str	r4, [r0, #16]
 800562c:	6144      	str	r4, [r0, #20]
 800562e:	6184      	str	r4, [r0, #24]
 8005630:	6284      	str	r4, [r0, #40]	; 0x28
 8005632:	62c4      	str	r4, [r0, #44]	; 0x2c
 8005634:	6304      	str	r4, [r0, #48]	; 0x30
 8005636:	6344      	str	r4, [r0, #52]	; 0x34
 8005638:	6384      	str	r4, [r0, #56]	; 0x38
 800563a:	63c4      	str	r4, [r0, #60]	; 0x3c
 800563c:	6404      	str	r4, [r0, #64]	; 0x40
 800563e:	6444      	str	r4, [r0, #68]	; 0x44
 8005640:	6484      	str	r4, [r0, #72]	; 0x48
 8005642:	64c4      	str	r4, [r0, #76]	; 0x4c
 8005644:	7704      	strb	r4, [r0, #28]
 8005646:	6244      	str	r4, [r0, #36]	; 0x24
 8005648:	0031      	movs	r1, r6
 800564a:	0028      	movs	r0, r5
 800564c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800564e:	2301      	movs	r3, #1
 8005650:	f000 f808 	bl	8005664 <__strtok_r>
 8005654:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005656:	46c0      	nop			; (mov r8, r8)
 8005658:	200001f4 	.word	0x200001f4
 800565c:	08006921 	.word	0x08006921
 8005660:	08006938 	.word	0x08006938

08005664 <__strtok_r>:
 8005664:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005666:	2800      	cmp	r0, #0
 8005668:	d102      	bne.n	8005670 <__strtok_r+0xc>
 800566a:	6810      	ldr	r0, [r2, #0]
 800566c:	2800      	cmp	r0, #0
 800566e:	d013      	beq.n	8005698 <__strtok_r+0x34>
 8005670:	0004      	movs	r4, r0
 8005672:	0020      	movs	r0, r4
 8005674:	000e      	movs	r6, r1
 8005676:	7805      	ldrb	r5, [r0, #0]
 8005678:	3401      	adds	r4, #1
 800567a:	7837      	ldrb	r7, [r6, #0]
 800567c:	2f00      	cmp	r7, #0
 800567e:	d104      	bne.n	800568a <__strtok_r+0x26>
 8005680:	2d00      	cmp	r5, #0
 8005682:	d10f      	bne.n	80056a4 <__strtok_r+0x40>
 8005684:	0028      	movs	r0, r5
 8005686:	6015      	str	r5, [r2, #0]
 8005688:	e006      	b.n	8005698 <__strtok_r+0x34>
 800568a:	3601      	adds	r6, #1
 800568c:	42bd      	cmp	r5, r7
 800568e:	d1f4      	bne.n	800567a <__strtok_r+0x16>
 8005690:	2b00      	cmp	r3, #0
 8005692:	d1ee      	bne.n	8005672 <__strtok_r+0xe>
 8005694:	6014      	str	r4, [r2, #0]
 8005696:	7003      	strb	r3, [r0, #0]
 8005698:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800569a:	002f      	movs	r7, r5
 800569c:	e00f      	b.n	80056be <__strtok_r+0x5a>
 800569e:	3301      	adds	r3, #1
 80056a0:	2e00      	cmp	r6, #0
 80056a2:	d104      	bne.n	80056ae <__strtok_r+0x4a>
 80056a4:	0023      	movs	r3, r4
 80056a6:	3401      	adds	r4, #1
 80056a8:	781d      	ldrb	r5, [r3, #0]
 80056aa:	0027      	movs	r7, r4
 80056ac:	000b      	movs	r3, r1
 80056ae:	781e      	ldrb	r6, [r3, #0]
 80056b0:	42b5      	cmp	r5, r6
 80056b2:	d1f4      	bne.n	800569e <__strtok_r+0x3a>
 80056b4:	2d00      	cmp	r5, #0
 80056b6:	d0f0      	beq.n	800569a <__strtok_r+0x36>
 80056b8:	2300      	movs	r3, #0
 80056ba:	3c01      	subs	r4, #1
 80056bc:	7023      	strb	r3, [r4, #0]
 80056be:	6017      	str	r7, [r2, #0]
 80056c0:	e7ea      	b.n	8005698 <__strtok_r+0x34>
	...

080056c4 <_close_r>:
 80056c4:	2300      	movs	r3, #0
 80056c6:	b570      	push	{r4, r5, r6, lr}
 80056c8:	4d06      	ldr	r5, [pc, #24]	; (80056e4 <_close_r+0x20>)
 80056ca:	0004      	movs	r4, r0
 80056cc:	0008      	movs	r0, r1
 80056ce:	602b      	str	r3, [r5, #0]
 80056d0:	f7fc fa29 	bl	8001b26 <_close>
 80056d4:	1c43      	adds	r3, r0, #1
 80056d6:	d103      	bne.n	80056e0 <_close_r+0x1c>
 80056d8:	682b      	ldr	r3, [r5, #0]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d000      	beq.n	80056e0 <_close_r+0x1c>
 80056de:	6023      	str	r3, [r4, #0]
 80056e0:	bd70      	pop	{r4, r5, r6, pc}
 80056e2:	46c0      	nop			; (mov r8, r8)
 80056e4:	200004e4 	.word	0x200004e4

080056e8 <_lseek_r>:
 80056e8:	b570      	push	{r4, r5, r6, lr}
 80056ea:	0004      	movs	r4, r0
 80056ec:	0008      	movs	r0, r1
 80056ee:	0011      	movs	r1, r2
 80056f0:	001a      	movs	r2, r3
 80056f2:	2300      	movs	r3, #0
 80056f4:	4d05      	ldr	r5, [pc, #20]	; (800570c <_lseek_r+0x24>)
 80056f6:	602b      	str	r3, [r5, #0]
 80056f8:	f7fc fa36 	bl	8001b68 <_lseek>
 80056fc:	1c43      	adds	r3, r0, #1
 80056fe:	d103      	bne.n	8005708 <_lseek_r+0x20>
 8005700:	682b      	ldr	r3, [r5, #0]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d000      	beq.n	8005708 <_lseek_r+0x20>
 8005706:	6023      	str	r3, [r4, #0]
 8005708:	bd70      	pop	{r4, r5, r6, pc}
 800570a:	46c0      	nop			; (mov r8, r8)
 800570c:	200004e4 	.word	0x200004e4

08005710 <_read_r>:
 8005710:	b570      	push	{r4, r5, r6, lr}
 8005712:	0004      	movs	r4, r0
 8005714:	0008      	movs	r0, r1
 8005716:	0011      	movs	r1, r2
 8005718:	001a      	movs	r2, r3
 800571a:	2300      	movs	r3, #0
 800571c:	4d05      	ldr	r5, [pc, #20]	; (8005734 <_read_r+0x24>)
 800571e:	602b      	str	r3, [r5, #0]
 8005720:	f7fc f9c8 	bl	8001ab4 <_read>
 8005724:	1c43      	adds	r3, r0, #1
 8005726:	d103      	bne.n	8005730 <_read_r+0x20>
 8005728:	682b      	ldr	r3, [r5, #0]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d000      	beq.n	8005730 <_read_r+0x20>
 800572e:	6023      	str	r3, [r4, #0]
 8005730:	bd70      	pop	{r4, r5, r6, pc}
 8005732:	46c0      	nop			; (mov r8, r8)
 8005734:	200004e4 	.word	0x200004e4

08005738 <_sbrk_r>:
 8005738:	2300      	movs	r3, #0
 800573a:	b570      	push	{r4, r5, r6, lr}
 800573c:	4d06      	ldr	r5, [pc, #24]	; (8005758 <_sbrk_r+0x20>)
 800573e:	0004      	movs	r4, r0
 8005740:	0008      	movs	r0, r1
 8005742:	602b      	str	r3, [r5, #0]
 8005744:	f7fc fa1c 	bl	8001b80 <_sbrk>
 8005748:	1c43      	adds	r3, r0, #1
 800574a:	d103      	bne.n	8005754 <_sbrk_r+0x1c>
 800574c:	682b      	ldr	r3, [r5, #0]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d000      	beq.n	8005754 <_sbrk_r+0x1c>
 8005752:	6023      	str	r3, [r4, #0]
 8005754:	bd70      	pop	{r4, r5, r6, pc}
 8005756:	46c0      	nop			; (mov r8, r8)
 8005758:	200004e4 	.word	0x200004e4

0800575c <_write_r>:
 800575c:	b570      	push	{r4, r5, r6, lr}
 800575e:	0004      	movs	r4, r0
 8005760:	0008      	movs	r0, r1
 8005762:	0011      	movs	r1, r2
 8005764:	001a      	movs	r2, r3
 8005766:	2300      	movs	r3, #0
 8005768:	4d05      	ldr	r5, [pc, #20]	; (8005780 <_write_r+0x24>)
 800576a:	602b      	str	r3, [r5, #0]
 800576c:	f7fc f9bf 	bl	8001aee <_write>
 8005770:	1c43      	adds	r3, r0, #1
 8005772:	d103      	bne.n	800577c <_write_r+0x20>
 8005774:	682b      	ldr	r3, [r5, #0]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d000      	beq.n	800577c <_write_r+0x20>
 800577a:	6023      	str	r3, [r4, #0]
 800577c:	bd70      	pop	{r4, r5, r6, pc}
 800577e:	46c0      	nop			; (mov r8, r8)
 8005780:	200004e4 	.word	0x200004e4

08005784 <__errno>:
 8005784:	4b01      	ldr	r3, [pc, #4]	; (800578c <__errno+0x8>)
 8005786:	6818      	ldr	r0, [r3, #0]
 8005788:	4770      	bx	lr
 800578a:	46c0      	nop			; (mov r8, r8)
 800578c:	200001f4 	.word	0x200001f4

08005790 <__libc_init_array>:
 8005790:	b570      	push	{r4, r5, r6, lr}
 8005792:	2600      	movs	r6, #0
 8005794:	4c0c      	ldr	r4, [pc, #48]	; (80057c8 <__libc_init_array+0x38>)
 8005796:	4d0d      	ldr	r5, [pc, #52]	; (80057cc <__libc_init_array+0x3c>)
 8005798:	1b64      	subs	r4, r4, r5
 800579a:	10a4      	asrs	r4, r4, #2
 800579c:	42a6      	cmp	r6, r4
 800579e:	d109      	bne.n	80057b4 <__libc_init_array+0x24>
 80057a0:	2600      	movs	r6, #0
 80057a2:	f000 ff5b 	bl	800665c <_init>
 80057a6:	4c0a      	ldr	r4, [pc, #40]	; (80057d0 <__libc_init_array+0x40>)
 80057a8:	4d0a      	ldr	r5, [pc, #40]	; (80057d4 <__libc_init_array+0x44>)
 80057aa:	1b64      	subs	r4, r4, r5
 80057ac:	10a4      	asrs	r4, r4, #2
 80057ae:	42a6      	cmp	r6, r4
 80057b0:	d105      	bne.n	80057be <__libc_init_array+0x2e>
 80057b2:	bd70      	pop	{r4, r5, r6, pc}
 80057b4:	00b3      	lsls	r3, r6, #2
 80057b6:	58eb      	ldr	r3, [r5, r3]
 80057b8:	4798      	blx	r3
 80057ba:	3601      	adds	r6, #1
 80057bc:	e7ee      	b.n	800579c <__libc_init_array+0xc>
 80057be:	00b3      	lsls	r3, r6, #2
 80057c0:	58eb      	ldr	r3, [r5, r3]
 80057c2:	4798      	blx	r3
 80057c4:	3601      	adds	r6, #1
 80057c6:	e7f2      	b.n	80057ae <__libc_init_array+0x1e>
 80057c8:	08006a0c 	.word	0x08006a0c
 80057cc:	08006a0c 	.word	0x08006a0c
 80057d0:	08006a10 	.word	0x08006a10
 80057d4:	08006a0c 	.word	0x08006a0c

080057d8 <__retarget_lock_acquire_recursive>:
 80057d8:	4770      	bx	lr

080057da <__retarget_lock_release_recursive>:
 80057da:	4770      	bx	lr

080057dc <read>:
 80057dc:	b510      	push	{r4, lr}
 80057de:	4c04      	ldr	r4, [pc, #16]	; (80057f0 <read+0x14>)
 80057e0:	0013      	movs	r3, r2
 80057e2:	000a      	movs	r2, r1
 80057e4:	0001      	movs	r1, r0
 80057e6:	6820      	ldr	r0, [r4, #0]
 80057e8:	f7ff ff92 	bl	8005710 <_read_r>
 80057ec:	bd10      	pop	{r4, pc}
 80057ee:	46c0      	nop			; (mov r8, r8)
 80057f0:	200001f4 	.word	0x200001f4

080057f4 <memcpy>:
 80057f4:	2300      	movs	r3, #0
 80057f6:	b510      	push	{r4, lr}
 80057f8:	429a      	cmp	r2, r3
 80057fa:	d100      	bne.n	80057fe <memcpy+0xa>
 80057fc:	bd10      	pop	{r4, pc}
 80057fe:	5ccc      	ldrb	r4, [r1, r3]
 8005800:	54c4      	strb	r4, [r0, r3]
 8005802:	3301      	adds	r3, #1
 8005804:	e7f8      	b.n	80057f8 <memcpy+0x4>
	...

08005808 <__assert_func>:
 8005808:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800580a:	0014      	movs	r4, r2
 800580c:	001a      	movs	r2, r3
 800580e:	4b09      	ldr	r3, [pc, #36]	; (8005834 <__assert_func+0x2c>)
 8005810:	0005      	movs	r5, r0
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	000e      	movs	r6, r1
 8005816:	68d8      	ldr	r0, [r3, #12]
 8005818:	4b07      	ldr	r3, [pc, #28]	; (8005838 <__assert_func+0x30>)
 800581a:	2c00      	cmp	r4, #0
 800581c:	d101      	bne.n	8005822 <__assert_func+0x1a>
 800581e:	4b07      	ldr	r3, [pc, #28]	; (800583c <__assert_func+0x34>)
 8005820:	001c      	movs	r4, r3
 8005822:	4907      	ldr	r1, [pc, #28]	; (8005840 <__assert_func+0x38>)
 8005824:	9301      	str	r3, [sp, #4]
 8005826:	9402      	str	r4, [sp, #8]
 8005828:	002b      	movs	r3, r5
 800582a:	9600      	str	r6, [sp, #0]
 800582c:	f000 fd30 	bl	8006290 <fiprintf>
 8005830:	f000 fe02 	bl	8006438 <abort>
 8005834:	200001f4 	.word	0x200001f4
 8005838:	08006992 	.word	0x08006992
 800583c:	080069cd 	.word	0x080069cd
 8005840:	0800699f 	.word	0x0800699f

08005844 <_free_r>:
 8005844:	b570      	push	{r4, r5, r6, lr}
 8005846:	0005      	movs	r5, r0
 8005848:	2900      	cmp	r1, #0
 800584a:	d010      	beq.n	800586e <_free_r+0x2a>
 800584c:	1f0c      	subs	r4, r1, #4
 800584e:	6823      	ldr	r3, [r4, #0]
 8005850:	2b00      	cmp	r3, #0
 8005852:	da00      	bge.n	8005856 <_free_r+0x12>
 8005854:	18e4      	adds	r4, r4, r3
 8005856:	0028      	movs	r0, r5
 8005858:	f7ff fd42 	bl	80052e0 <__malloc_lock>
 800585c:	4a1d      	ldr	r2, [pc, #116]	; (80058d4 <_free_r+0x90>)
 800585e:	6813      	ldr	r3, [r2, #0]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d105      	bne.n	8005870 <_free_r+0x2c>
 8005864:	6063      	str	r3, [r4, #4]
 8005866:	6014      	str	r4, [r2, #0]
 8005868:	0028      	movs	r0, r5
 800586a:	f7ff fd41 	bl	80052f0 <__malloc_unlock>
 800586e:	bd70      	pop	{r4, r5, r6, pc}
 8005870:	42a3      	cmp	r3, r4
 8005872:	d908      	bls.n	8005886 <_free_r+0x42>
 8005874:	6820      	ldr	r0, [r4, #0]
 8005876:	1821      	adds	r1, r4, r0
 8005878:	428b      	cmp	r3, r1
 800587a:	d1f3      	bne.n	8005864 <_free_r+0x20>
 800587c:	6819      	ldr	r1, [r3, #0]
 800587e:	685b      	ldr	r3, [r3, #4]
 8005880:	1809      	adds	r1, r1, r0
 8005882:	6021      	str	r1, [r4, #0]
 8005884:	e7ee      	b.n	8005864 <_free_r+0x20>
 8005886:	001a      	movs	r2, r3
 8005888:	685b      	ldr	r3, [r3, #4]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d001      	beq.n	8005892 <_free_r+0x4e>
 800588e:	42a3      	cmp	r3, r4
 8005890:	d9f9      	bls.n	8005886 <_free_r+0x42>
 8005892:	6811      	ldr	r1, [r2, #0]
 8005894:	1850      	adds	r0, r2, r1
 8005896:	42a0      	cmp	r0, r4
 8005898:	d10b      	bne.n	80058b2 <_free_r+0x6e>
 800589a:	6820      	ldr	r0, [r4, #0]
 800589c:	1809      	adds	r1, r1, r0
 800589e:	1850      	adds	r0, r2, r1
 80058a0:	6011      	str	r1, [r2, #0]
 80058a2:	4283      	cmp	r3, r0
 80058a4:	d1e0      	bne.n	8005868 <_free_r+0x24>
 80058a6:	6818      	ldr	r0, [r3, #0]
 80058a8:	685b      	ldr	r3, [r3, #4]
 80058aa:	1841      	adds	r1, r0, r1
 80058ac:	6011      	str	r1, [r2, #0]
 80058ae:	6053      	str	r3, [r2, #4]
 80058b0:	e7da      	b.n	8005868 <_free_r+0x24>
 80058b2:	42a0      	cmp	r0, r4
 80058b4:	d902      	bls.n	80058bc <_free_r+0x78>
 80058b6:	230c      	movs	r3, #12
 80058b8:	602b      	str	r3, [r5, #0]
 80058ba:	e7d5      	b.n	8005868 <_free_r+0x24>
 80058bc:	6820      	ldr	r0, [r4, #0]
 80058be:	1821      	adds	r1, r4, r0
 80058c0:	428b      	cmp	r3, r1
 80058c2:	d103      	bne.n	80058cc <_free_r+0x88>
 80058c4:	6819      	ldr	r1, [r3, #0]
 80058c6:	685b      	ldr	r3, [r3, #4]
 80058c8:	1809      	adds	r1, r1, r0
 80058ca:	6021      	str	r1, [r4, #0]
 80058cc:	6063      	str	r3, [r4, #4]
 80058ce:	6054      	str	r4, [r2, #4]
 80058d0:	e7ca      	b.n	8005868 <_free_r+0x24>
 80058d2:	46c0      	nop			; (mov r8, r8)
 80058d4:	200003a0 	.word	0x200003a0

080058d8 <__ssputs_r>:
 80058d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80058da:	b085      	sub	sp, #20
 80058dc:	9301      	str	r3, [sp, #4]
 80058de:	9203      	str	r2, [sp, #12]
 80058e0:	688e      	ldr	r6, [r1, #8]
 80058e2:	9a01      	ldr	r2, [sp, #4]
 80058e4:	0007      	movs	r7, r0
 80058e6:	000c      	movs	r4, r1
 80058e8:	680b      	ldr	r3, [r1, #0]
 80058ea:	4296      	cmp	r6, r2
 80058ec:	d831      	bhi.n	8005952 <__ssputs_r+0x7a>
 80058ee:	898a      	ldrh	r2, [r1, #12]
 80058f0:	2190      	movs	r1, #144	; 0x90
 80058f2:	00c9      	lsls	r1, r1, #3
 80058f4:	420a      	tst	r2, r1
 80058f6:	d029      	beq.n	800594c <__ssputs_r+0x74>
 80058f8:	2003      	movs	r0, #3
 80058fa:	6921      	ldr	r1, [r4, #16]
 80058fc:	1a5b      	subs	r3, r3, r1
 80058fe:	9302      	str	r3, [sp, #8]
 8005900:	6963      	ldr	r3, [r4, #20]
 8005902:	4343      	muls	r3, r0
 8005904:	0fdd      	lsrs	r5, r3, #31
 8005906:	18ed      	adds	r5, r5, r3
 8005908:	9b01      	ldr	r3, [sp, #4]
 800590a:	9802      	ldr	r0, [sp, #8]
 800590c:	3301      	adds	r3, #1
 800590e:	181b      	adds	r3, r3, r0
 8005910:	106d      	asrs	r5, r5, #1
 8005912:	42ab      	cmp	r3, r5
 8005914:	d900      	bls.n	8005918 <__ssputs_r+0x40>
 8005916:	001d      	movs	r5, r3
 8005918:	0552      	lsls	r2, r2, #21
 800591a:	d529      	bpl.n	8005970 <__ssputs_r+0x98>
 800591c:	0029      	movs	r1, r5
 800591e:	0038      	movs	r0, r7
 8005920:	f7ff fc5c 	bl	80051dc <_malloc_r>
 8005924:	1e06      	subs	r6, r0, #0
 8005926:	d02d      	beq.n	8005984 <__ssputs_r+0xac>
 8005928:	9a02      	ldr	r2, [sp, #8]
 800592a:	6921      	ldr	r1, [r4, #16]
 800592c:	f7ff ff62 	bl	80057f4 <memcpy>
 8005930:	89a2      	ldrh	r2, [r4, #12]
 8005932:	4b19      	ldr	r3, [pc, #100]	; (8005998 <__ssputs_r+0xc0>)
 8005934:	401a      	ands	r2, r3
 8005936:	2380      	movs	r3, #128	; 0x80
 8005938:	4313      	orrs	r3, r2
 800593a:	81a3      	strh	r3, [r4, #12]
 800593c:	9b02      	ldr	r3, [sp, #8]
 800593e:	6126      	str	r6, [r4, #16]
 8005940:	18f6      	adds	r6, r6, r3
 8005942:	6026      	str	r6, [r4, #0]
 8005944:	6165      	str	r5, [r4, #20]
 8005946:	9e01      	ldr	r6, [sp, #4]
 8005948:	1aed      	subs	r5, r5, r3
 800594a:	60a5      	str	r5, [r4, #8]
 800594c:	9b01      	ldr	r3, [sp, #4]
 800594e:	429e      	cmp	r6, r3
 8005950:	d900      	bls.n	8005954 <__ssputs_r+0x7c>
 8005952:	9e01      	ldr	r6, [sp, #4]
 8005954:	0032      	movs	r2, r6
 8005956:	9903      	ldr	r1, [sp, #12]
 8005958:	6820      	ldr	r0, [r4, #0]
 800595a:	f000 fd4f 	bl	80063fc <memmove>
 800595e:	2000      	movs	r0, #0
 8005960:	68a3      	ldr	r3, [r4, #8]
 8005962:	1b9b      	subs	r3, r3, r6
 8005964:	60a3      	str	r3, [r4, #8]
 8005966:	6823      	ldr	r3, [r4, #0]
 8005968:	199b      	adds	r3, r3, r6
 800596a:	6023      	str	r3, [r4, #0]
 800596c:	b005      	add	sp, #20
 800596e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005970:	002a      	movs	r2, r5
 8005972:	0038      	movs	r0, r7
 8005974:	f000 fd67 	bl	8006446 <_realloc_r>
 8005978:	1e06      	subs	r6, r0, #0
 800597a:	d1df      	bne.n	800593c <__ssputs_r+0x64>
 800597c:	0038      	movs	r0, r7
 800597e:	6921      	ldr	r1, [r4, #16]
 8005980:	f7ff ff60 	bl	8005844 <_free_r>
 8005984:	230c      	movs	r3, #12
 8005986:	2001      	movs	r0, #1
 8005988:	603b      	str	r3, [r7, #0]
 800598a:	89a2      	ldrh	r2, [r4, #12]
 800598c:	3334      	adds	r3, #52	; 0x34
 800598e:	4313      	orrs	r3, r2
 8005990:	81a3      	strh	r3, [r4, #12]
 8005992:	4240      	negs	r0, r0
 8005994:	e7ea      	b.n	800596c <__ssputs_r+0x94>
 8005996:	46c0      	nop			; (mov r8, r8)
 8005998:	fffffb7f 	.word	0xfffffb7f

0800599c <_svfiprintf_r>:
 800599c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800599e:	b0a1      	sub	sp, #132	; 0x84
 80059a0:	9003      	str	r0, [sp, #12]
 80059a2:	001d      	movs	r5, r3
 80059a4:	898b      	ldrh	r3, [r1, #12]
 80059a6:	000f      	movs	r7, r1
 80059a8:	0016      	movs	r6, r2
 80059aa:	061b      	lsls	r3, r3, #24
 80059ac:	d511      	bpl.n	80059d2 <_svfiprintf_r+0x36>
 80059ae:	690b      	ldr	r3, [r1, #16]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d10e      	bne.n	80059d2 <_svfiprintf_r+0x36>
 80059b4:	2140      	movs	r1, #64	; 0x40
 80059b6:	f7ff fc11 	bl	80051dc <_malloc_r>
 80059ba:	6038      	str	r0, [r7, #0]
 80059bc:	6138      	str	r0, [r7, #16]
 80059be:	2800      	cmp	r0, #0
 80059c0:	d105      	bne.n	80059ce <_svfiprintf_r+0x32>
 80059c2:	230c      	movs	r3, #12
 80059c4:	9a03      	ldr	r2, [sp, #12]
 80059c6:	3801      	subs	r0, #1
 80059c8:	6013      	str	r3, [r2, #0]
 80059ca:	b021      	add	sp, #132	; 0x84
 80059cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80059ce:	2340      	movs	r3, #64	; 0x40
 80059d0:	617b      	str	r3, [r7, #20]
 80059d2:	2300      	movs	r3, #0
 80059d4:	ac08      	add	r4, sp, #32
 80059d6:	6163      	str	r3, [r4, #20]
 80059d8:	3320      	adds	r3, #32
 80059da:	7663      	strb	r3, [r4, #25]
 80059dc:	3310      	adds	r3, #16
 80059de:	76a3      	strb	r3, [r4, #26]
 80059e0:	9507      	str	r5, [sp, #28]
 80059e2:	0035      	movs	r5, r6
 80059e4:	782b      	ldrb	r3, [r5, #0]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d001      	beq.n	80059ee <_svfiprintf_r+0x52>
 80059ea:	2b25      	cmp	r3, #37	; 0x25
 80059ec:	d148      	bne.n	8005a80 <_svfiprintf_r+0xe4>
 80059ee:	1bab      	subs	r3, r5, r6
 80059f0:	9305      	str	r3, [sp, #20]
 80059f2:	42b5      	cmp	r5, r6
 80059f4:	d00b      	beq.n	8005a0e <_svfiprintf_r+0x72>
 80059f6:	0032      	movs	r2, r6
 80059f8:	0039      	movs	r1, r7
 80059fa:	9803      	ldr	r0, [sp, #12]
 80059fc:	f7ff ff6c 	bl	80058d8 <__ssputs_r>
 8005a00:	3001      	adds	r0, #1
 8005a02:	d100      	bne.n	8005a06 <_svfiprintf_r+0x6a>
 8005a04:	e0af      	b.n	8005b66 <_svfiprintf_r+0x1ca>
 8005a06:	6963      	ldr	r3, [r4, #20]
 8005a08:	9a05      	ldr	r2, [sp, #20]
 8005a0a:	189b      	adds	r3, r3, r2
 8005a0c:	6163      	str	r3, [r4, #20]
 8005a0e:	782b      	ldrb	r3, [r5, #0]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d100      	bne.n	8005a16 <_svfiprintf_r+0x7a>
 8005a14:	e0a7      	b.n	8005b66 <_svfiprintf_r+0x1ca>
 8005a16:	2201      	movs	r2, #1
 8005a18:	2300      	movs	r3, #0
 8005a1a:	4252      	negs	r2, r2
 8005a1c:	6062      	str	r2, [r4, #4]
 8005a1e:	a904      	add	r1, sp, #16
 8005a20:	3254      	adds	r2, #84	; 0x54
 8005a22:	1852      	adds	r2, r2, r1
 8005a24:	1c6e      	adds	r6, r5, #1
 8005a26:	6023      	str	r3, [r4, #0]
 8005a28:	60e3      	str	r3, [r4, #12]
 8005a2a:	60a3      	str	r3, [r4, #8]
 8005a2c:	7013      	strb	r3, [r2, #0]
 8005a2e:	65a3      	str	r3, [r4, #88]	; 0x58
 8005a30:	4b55      	ldr	r3, [pc, #340]	; (8005b88 <_svfiprintf_r+0x1ec>)
 8005a32:	2205      	movs	r2, #5
 8005a34:	0018      	movs	r0, r3
 8005a36:	7831      	ldrb	r1, [r6, #0]
 8005a38:	9305      	str	r3, [sp, #20]
 8005a3a:	f000 fcf2 	bl	8006422 <memchr>
 8005a3e:	1c75      	adds	r5, r6, #1
 8005a40:	2800      	cmp	r0, #0
 8005a42:	d11f      	bne.n	8005a84 <_svfiprintf_r+0xe8>
 8005a44:	6822      	ldr	r2, [r4, #0]
 8005a46:	06d3      	lsls	r3, r2, #27
 8005a48:	d504      	bpl.n	8005a54 <_svfiprintf_r+0xb8>
 8005a4a:	2353      	movs	r3, #83	; 0x53
 8005a4c:	a904      	add	r1, sp, #16
 8005a4e:	185b      	adds	r3, r3, r1
 8005a50:	2120      	movs	r1, #32
 8005a52:	7019      	strb	r1, [r3, #0]
 8005a54:	0713      	lsls	r3, r2, #28
 8005a56:	d504      	bpl.n	8005a62 <_svfiprintf_r+0xc6>
 8005a58:	2353      	movs	r3, #83	; 0x53
 8005a5a:	a904      	add	r1, sp, #16
 8005a5c:	185b      	adds	r3, r3, r1
 8005a5e:	212b      	movs	r1, #43	; 0x2b
 8005a60:	7019      	strb	r1, [r3, #0]
 8005a62:	7833      	ldrb	r3, [r6, #0]
 8005a64:	2b2a      	cmp	r3, #42	; 0x2a
 8005a66:	d016      	beq.n	8005a96 <_svfiprintf_r+0xfa>
 8005a68:	0035      	movs	r5, r6
 8005a6a:	2100      	movs	r1, #0
 8005a6c:	200a      	movs	r0, #10
 8005a6e:	68e3      	ldr	r3, [r4, #12]
 8005a70:	782a      	ldrb	r2, [r5, #0]
 8005a72:	1c6e      	adds	r6, r5, #1
 8005a74:	3a30      	subs	r2, #48	; 0x30
 8005a76:	2a09      	cmp	r2, #9
 8005a78:	d94e      	bls.n	8005b18 <_svfiprintf_r+0x17c>
 8005a7a:	2900      	cmp	r1, #0
 8005a7c:	d111      	bne.n	8005aa2 <_svfiprintf_r+0x106>
 8005a7e:	e017      	b.n	8005ab0 <_svfiprintf_r+0x114>
 8005a80:	3501      	adds	r5, #1
 8005a82:	e7af      	b.n	80059e4 <_svfiprintf_r+0x48>
 8005a84:	9b05      	ldr	r3, [sp, #20]
 8005a86:	6822      	ldr	r2, [r4, #0]
 8005a88:	1ac0      	subs	r0, r0, r3
 8005a8a:	2301      	movs	r3, #1
 8005a8c:	4083      	lsls	r3, r0
 8005a8e:	4313      	orrs	r3, r2
 8005a90:	002e      	movs	r6, r5
 8005a92:	6023      	str	r3, [r4, #0]
 8005a94:	e7cc      	b.n	8005a30 <_svfiprintf_r+0x94>
 8005a96:	9b07      	ldr	r3, [sp, #28]
 8005a98:	1d19      	adds	r1, r3, #4
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	9107      	str	r1, [sp, #28]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	db01      	blt.n	8005aa6 <_svfiprintf_r+0x10a>
 8005aa2:	930b      	str	r3, [sp, #44]	; 0x2c
 8005aa4:	e004      	b.n	8005ab0 <_svfiprintf_r+0x114>
 8005aa6:	425b      	negs	r3, r3
 8005aa8:	60e3      	str	r3, [r4, #12]
 8005aaa:	2302      	movs	r3, #2
 8005aac:	4313      	orrs	r3, r2
 8005aae:	6023      	str	r3, [r4, #0]
 8005ab0:	782b      	ldrb	r3, [r5, #0]
 8005ab2:	2b2e      	cmp	r3, #46	; 0x2e
 8005ab4:	d10a      	bne.n	8005acc <_svfiprintf_r+0x130>
 8005ab6:	786b      	ldrb	r3, [r5, #1]
 8005ab8:	2b2a      	cmp	r3, #42	; 0x2a
 8005aba:	d135      	bne.n	8005b28 <_svfiprintf_r+0x18c>
 8005abc:	9b07      	ldr	r3, [sp, #28]
 8005abe:	3502      	adds	r5, #2
 8005ac0:	1d1a      	adds	r2, r3, #4
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	9207      	str	r2, [sp, #28]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	db2b      	blt.n	8005b22 <_svfiprintf_r+0x186>
 8005aca:	9309      	str	r3, [sp, #36]	; 0x24
 8005acc:	4e2f      	ldr	r6, [pc, #188]	; (8005b8c <_svfiprintf_r+0x1f0>)
 8005ace:	2203      	movs	r2, #3
 8005ad0:	0030      	movs	r0, r6
 8005ad2:	7829      	ldrb	r1, [r5, #0]
 8005ad4:	f000 fca5 	bl	8006422 <memchr>
 8005ad8:	2800      	cmp	r0, #0
 8005ada:	d006      	beq.n	8005aea <_svfiprintf_r+0x14e>
 8005adc:	2340      	movs	r3, #64	; 0x40
 8005ade:	1b80      	subs	r0, r0, r6
 8005ae0:	4083      	lsls	r3, r0
 8005ae2:	6822      	ldr	r2, [r4, #0]
 8005ae4:	3501      	adds	r5, #1
 8005ae6:	4313      	orrs	r3, r2
 8005ae8:	6023      	str	r3, [r4, #0]
 8005aea:	7829      	ldrb	r1, [r5, #0]
 8005aec:	2206      	movs	r2, #6
 8005aee:	4828      	ldr	r0, [pc, #160]	; (8005b90 <_svfiprintf_r+0x1f4>)
 8005af0:	1c6e      	adds	r6, r5, #1
 8005af2:	7621      	strb	r1, [r4, #24]
 8005af4:	f000 fc95 	bl	8006422 <memchr>
 8005af8:	2800      	cmp	r0, #0
 8005afa:	d03c      	beq.n	8005b76 <_svfiprintf_r+0x1da>
 8005afc:	4b25      	ldr	r3, [pc, #148]	; (8005b94 <_svfiprintf_r+0x1f8>)
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d125      	bne.n	8005b4e <_svfiprintf_r+0x1b2>
 8005b02:	2207      	movs	r2, #7
 8005b04:	9b07      	ldr	r3, [sp, #28]
 8005b06:	3307      	adds	r3, #7
 8005b08:	4393      	bics	r3, r2
 8005b0a:	3308      	adds	r3, #8
 8005b0c:	9307      	str	r3, [sp, #28]
 8005b0e:	6963      	ldr	r3, [r4, #20]
 8005b10:	9a04      	ldr	r2, [sp, #16]
 8005b12:	189b      	adds	r3, r3, r2
 8005b14:	6163      	str	r3, [r4, #20]
 8005b16:	e764      	b.n	80059e2 <_svfiprintf_r+0x46>
 8005b18:	4343      	muls	r3, r0
 8005b1a:	0035      	movs	r5, r6
 8005b1c:	2101      	movs	r1, #1
 8005b1e:	189b      	adds	r3, r3, r2
 8005b20:	e7a6      	b.n	8005a70 <_svfiprintf_r+0xd4>
 8005b22:	2301      	movs	r3, #1
 8005b24:	425b      	negs	r3, r3
 8005b26:	e7d0      	b.n	8005aca <_svfiprintf_r+0x12e>
 8005b28:	2300      	movs	r3, #0
 8005b2a:	200a      	movs	r0, #10
 8005b2c:	001a      	movs	r2, r3
 8005b2e:	3501      	adds	r5, #1
 8005b30:	6063      	str	r3, [r4, #4]
 8005b32:	7829      	ldrb	r1, [r5, #0]
 8005b34:	1c6e      	adds	r6, r5, #1
 8005b36:	3930      	subs	r1, #48	; 0x30
 8005b38:	2909      	cmp	r1, #9
 8005b3a:	d903      	bls.n	8005b44 <_svfiprintf_r+0x1a8>
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d0c5      	beq.n	8005acc <_svfiprintf_r+0x130>
 8005b40:	9209      	str	r2, [sp, #36]	; 0x24
 8005b42:	e7c3      	b.n	8005acc <_svfiprintf_r+0x130>
 8005b44:	4342      	muls	r2, r0
 8005b46:	0035      	movs	r5, r6
 8005b48:	2301      	movs	r3, #1
 8005b4a:	1852      	adds	r2, r2, r1
 8005b4c:	e7f1      	b.n	8005b32 <_svfiprintf_r+0x196>
 8005b4e:	aa07      	add	r2, sp, #28
 8005b50:	9200      	str	r2, [sp, #0]
 8005b52:	0021      	movs	r1, r4
 8005b54:	003a      	movs	r2, r7
 8005b56:	4b10      	ldr	r3, [pc, #64]	; (8005b98 <_svfiprintf_r+0x1fc>)
 8005b58:	9803      	ldr	r0, [sp, #12]
 8005b5a:	e000      	b.n	8005b5e <_svfiprintf_r+0x1c2>
 8005b5c:	bf00      	nop
 8005b5e:	9004      	str	r0, [sp, #16]
 8005b60:	9b04      	ldr	r3, [sp, #16]
 8005b62:	3301      	adds	r3, #1
 8005b64:	d1d3      	bne.n	8005b0e <_svfiprintf_r+0x172>
 8005b66:	89bb      	ldrh	r3, [r7, #12]
 8005b68:	980d      	ldr	r0, [sp, #52]	; 0x34
 8005b6a:	065b      	lsls	r3, r3, #25
 8005b6c:	d400      	bmi.n	8005b70 <_svfiprintf_r+0x1d4>
 8005b6e:	e72c      	b.n	80059ca <_svfiprintf_r+0x2e>
 8005b70:	2001      	movs	r0, #1
 8005b72:	4240      	negs	r0, r0
 8005b74:	e729      	b.n	80059ca <_svfiprintf_r+0x2e>
 8005b76:	aa07      	add	r2, sp, #28
 8005b78:	9200      	str	r2, [sp, #0]
 8005b7a:	0021      	movs	r1, r4
 8005b7c:	003a      	movs	r2, r7
 8005b7e:	4b06      	ldr	r3, [pc, #24]	; (8005b98 <_svfiprintf_r+0x1fc>)
 8005b80:	9803      	ldr	r0, [sp, #12]
 8005b82:	f000 f9bf 	bl	8005f04 <_printf_i>
 8005b86:	e7ea      	b.n	8005b5e <_svfiprintf_r+0x1c2>
 8005b88:	080069ce 	.word	0x080069ce
 8005b8c:	080069d4 	.word	0x080069d4
 8005b90:	080069d8 	.word	0x080069d8
 8005b94:	00000000 	.word	0x00000000
 8005b98:	080058d9 	.word	0x080058d9

08005b9c <__sfputc_r>:
 8005b9c:	6893      	ldr	r3, [r2, #8]
 8005b9e:	b510      	push	{r4, lr}
 8005ba0:	3b01      	subs	r3, #1
 8005ba2:	6093      	str	r3, [r2, #8]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	da04      	bge.n	8005bb2 <__sfputc_r+0x16>
 8005ba8:	6994      	ldr	r4, [r2, #24]
 8005baa:	42a3      	cmp	r3, r4
 8005bac:	db07      	blt.n	8005bbe <__sfputc_r+0x22>
 8005bae:	290a      	cmp	r1, #10
 8005bb0:	d005      	beq.n	8005bbe <__sfputc_r+0x22>
 8005bb2:	6813      	ldr	r3, [r2, #0]
 8005bb4:	1c58      	adds	r0, r3, #1
 8005bb6:	6010      	str	r0, [r2, #0]
 8005bb8:	7019      	strb	r1, [r3, #0]
 8005bba:	0008      	movs	r0, r1
 8005bbc:	bd10      	pop	{r4, pc}
 8005bbe:	f000 fb77 	bl	80062b0 <__swbuf_r>
 8005bc2:	0001      	movs	r1, r0
 8005bc4:	e7f9      	b.n	8005bba <__sfputc_r+0x1e>

08005bc6 <__sfputs_r>:
 8005bc6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bc8:	0006      	movs	r6, r0
 8005bca:	000f      	movs	r7, r1
 8005bcc:	0014      	movs	r4, r2
 8005bce:	18d5      	adds	r5, r2, r3
 8005bd0:	42ac      	cmp	r4, r5
 8005bd2:	d101      	bne.n	8005bd8 <__sfputs_r+0x12>
 8005bd4:	2000      	movs	r0, #0
 8005bd6:	e007      	b.n	8005be8 <__sfputs_r+0x22>
 8005bd8:	7821      	ldrb	r1, [r4, #0]
 8005bda:	003a      	movs	r2, r7
 8005bdc:	0030      	movs	r0, r6
 8005bde:	f7ff ffdd 	bl	8005b9c <__sfputc_r>
 8005be2:	3401      	adds	r4, #1
 8005be4:	1c43      	adds	r3, r0, #1
 8005be6:	d1f3      	bne.n	8005bd0 <__sfputs_r+0xa>
 8005be8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005bec <_vfiprintf_r>:
 8005bec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005bee:	b0a1      	sub	sp, #132	; 0x84
 8005bf0:	000f      	movs	r7, r1
 8005bf2:	0015      	movs	r5, r2
 8005bf4:	001e      	movs	r6, r3
 8005bf6:	9003      	str	r0, [sp, #12]
 8005bf8:	2800      	cmp	r0, #0
 8005bfa:	d004      	beq.n	8005c06 <_vfiprintf_r+0x1a>
 8005bfc:	6a03      	ldr	r3, [r0, #32]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d101      	bne.n	8005c06 <_vfiprintf_r+0x1a>
 8005c02:	f7ff fbfb 	bl	80053fc <__sinit>
 8005c06:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005c08:	07db      	lsls	r3, r3, #31
 8005c0a:	d405      	bmi.n	8005c18 <_vfiprintf_r+0x2c>
 8005c0c:	89bb      	ldrh	r3, [r7, #12]
 8005c0e:	059b      	lsls	r3, r3, #22
 8005c10:	d402      	bmi.n	8005c18 <_vfiprintf_r+0x2c>
 8005c12:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8005c14:	f7ff fde0 	bl	80057d8 <__retarget_lock_acquire_recursive>
 8005c18:	89bb      	ldrh	r3, [r7, #12]
 8005c1a:	071b      	lsls	r3, r3, #28
 8005c1c:	d502      	bpl.n	8005c24 <_vfiprintf_r+0x38>
 8005c1e:	693b      	ldr	r3, [r7, #16]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d113      	bne.n	8005c4c <_vfiprintf_r+0x60>
 8005c24:	0039      	movs	r1, r7
 8005c26:	9803      	ldr	r0, [sp, #12]
 8005c28:	f000 fb84 	bl	8006334 <__swsetup_r>
 8005c2c:	2800      	cmp	r0, #0
 8005c2e:	d00d      	beq.n	8005c4c <_vfiprintf_r+0x60>
 8005c30:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005c32:	07db      	lsls	r3, r3, #31
 8005c34:	d503      	bpl.n	8005c3e <_vfiprintf_r+0x52>
 8005c36:	2001      	movs	r0, #1
 8005c38:	4240      	negs	r0, r0
 8005c3a:	b021      	add	sp, #132	; 0x84
 8005c3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c3e:	89bb      	ldrh	r3, [r7, #12]
 8005c40:	059b      	lsls	r3, r3, #22
 8005c42:	d4f8      	bmi.n	8005c36 <_vfiprintf_r+0x4a>
 8005c44:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8005c46:	f7ff fdc8 	bl	80057da <__retarget_lock_release_recursive>
 8005c4a:	e7f4      	b.n	8005c36 <_vfiprintf_r+0x4a>
 8005c4c:	2300      	movs	r3, #0
 8005c4e:	ac08      	add	r4, sp, #32
 8005c50:	6163      	str	r3, [r4, #20]
 8005c52:	3320      	adds	r3, #32
 8005c54:	7663      	strb	r3, [r4, #25]
 8005c56:	3310      	adds	r3, #16
 8005c58:	76a3      	strb	r3, [r4, #26]
 8005c5a:	9607      	str	r6, [sp, #28]
 8005c5c:	002e      	movs	r6, r5
 8005c5e:	7833      	ldrb	r3, [r6, #0]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d001      	beq.n	8005c68 <_vfiprintf_r+0x7c>
 8005c64:	2b25      	cmp	r3, #37	; 0x25
 8005c66:	d148      	bne.n	8005cfa <_vfiprintf_r+0x10e>
 8005c68:	1b73      	subs	r3, r6, r5
 8005c6a:	9305      	str	r3, [sp, #20]
 8005c6c:	42ae      	cmp	r6, r5
 8005c6e:	d00b      	beq.n	8005c88 <_vfiprintf_r+0x9c>
 8005c70:	002a      	movs	r2, r5
 8005c72:	0039      	movs	r1, r7
 8005c74:	9803      	ldr	r0, [sp, #12]
 8005c76:	f7ff ffa6 	bl	8005bc6 <__sfputs_r>
 8005c7a:	3001      	adds	r0, #1
 8005c7c:	d100      	bne.n	8005c80 <_vfiprintf_r+0x94>
 8005c7e:	e0af      	b.n	8005de0 <_vfiprintf_r+0x1f4>
 8005c80:	6963      	ldr	r3, [r4, #20]
 8005c82:	9a05      	ldr	r2, [sp, #20]
 8005c84:	189b      	adds	r3, r3, r2
 8005c86:	6163      	str	r3, [r4, #20]
 8005c88:	7833      	ldrb	r3, [r6, #0]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d100      	bne.n	8005c90 <_vfiprintf_r+0xa4>
 8005c8e:	e0a7      	b.n	8005de0 <_vfiprintf_r+0x1f4>
 8005c90:	2201      	movs	r2, #1
 8005c92:	2300      	movs	r3, #0
 8005c94:	4252      	negs	r2, r2
 8005c96:	6062      	str	r2, [r4, #4]
 8005c98:	a904      	add	r1, sp, #16
 8005c9a:	3254      	adds	r2, #84	; 0x54
 8005c9c:	1852      	adds	r2, r2, r1
 8005c9e:	1c75      	adds	r5, r6, #1
 8005ca0:	6023      	str	r3, [r4, #0]
 8005ca2:	60e3      	str	r3, [r4, #12]
 8005ca4:	60a3      	str	r3, [r4, #8]
 8005ca6:	7013      	strb	r3, [r2, #0]
 8005ca8:	65a3      	str	r3, [r4, #88]	; 0x58
 8005caa:	4b59      	ldr	r3, [pc, #356]	; (8005e10 <_vfiprintf_r+0x224>)
 8005cac:	2205      	movs	r2, #5
 8005cae:	0018      	movs	r0, r3
 8005cb0:	7829      	ldrb	r1, [r5, #0]
 8005cb2:	9305      	str	r3, [sp, #20]
 8005cb4:	f000 fbb5 	bl	8006422 <memchr>
 8005cb8:	1c6e      	adds	r6, r5, #1
 8005cba:	2800      	cmp	r0, #0
 8005cbc:	d11f      	bne.n	8005cfe <_vfiprintf_r+0x112>
 8005cbe:	6822      	ldr	r2, [r4, #0]
 8005cc0:	06d3      	lsls	r3, r2, #27
 8005cc2:	d504      	bpl.n	8005cce <_vfiprintf_r+0xe2>
 8005cc4:	2353      	movs	r3, #83	; 0x53
 8005cc6:	a904      	add	r1, sp, #16
 8005cc8:	185b      	adds	r3, r3, r1
 8005cca:	2120      	movs	r1, #32
 8005ccc:	7019      	strb	r1, [r3, #0]
 8005cce:	0713      	lsls	r3, r2, #28
 8005cd0:	d504      	bpl.n	8005cdc <_vfiprintf_r+0xf0>
 8005cd2:	2353      	movs	r3, #83	; 0x53
 8005cd4:	a904      	add	r1, sp, #16
 8005cd6:	185b      	adds	r3, r3, r1
 8005cd8:	212b      	movs	r1, #43	; 0x2b
 8005cda:	7019      	strb	r1, [r3, #0]
 8005cdc:	782b      	ldrb	r3, [r5, #0]
 8005cde:	2b2a      	cmp	r3, #42	; 0x2a
 8005ce0:	d016      	beq.n	8005d10 <_vfiprintf_r+0x124>
 8005ce2:	002e      	movs	r6, r5
 8005ce4:	2100      	movs	r1, #0
 8005ce6:	200a      	movs	r0, #10
 8005ce8:	68e3      	ldr	r3, [r4, #12]
 8005cea:	7832      	ldrb	r2, [r6, #0]
 8005cec:	1c75      	adds	r5, r6, #1
 8005cee:	3a30      	subs	r2, #48	; 0x30
 8005cf0:	2a09      	cmp	r2, #9
 8005cf2:	d94e      	bls.n	8005d92 <_vfiprintf_r+0x1a6>
 8005cf4:	2900      	cmp	r1, #0
 8005cf6:	d111      	bne.n	8005d1c <_vfiprintf_r+0x130>
 8005cf8:	e017      	b.n	8005d2a <_vfiprintf_r+0x13e>
 8005cfa:	3601      	adds	r6, #1
 8005cfc:	e7af      	b.n	8005c5e <_vfiprintf_r+0x72>
 8005cfe:	9b05      	ldr	r3, [sp, #20]
 8005d00:	6822      	ldr	r2, [r4, #0]
 8005d02:	1ac0      	subs	r0, r0, r3
 8005d04:	2301      	movs	r3, #1
 8005d06:	4083      	lsls	r3, r0
 8005d08:	4313      	orrs	r3, r2
 8005d0a:	0035      	movs	r5, r6
 8005d0c:	6023      	str	r3, [r4, #0]
 8005d0e:	e7cc      	b.n	8005caa <_vfiprintf_r+0xbe>
 8005d10:	9b07      	ldr	r3, [sp, #28]
 8005d12:	1d19      	adds	r1, r3, #4
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	9107      	str	r1, [sp, #28]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	db01      	blt.n	8005d20 <_vfiprintf_r+0x134>
 8005d1c:	930b      	str	r3, [sp, #44]	; 0x2c
 8005d1e:	e004      	b.n	8005d2a <_vfiprintf_r+0x13e>
 8005d20:	425b      	negs	r3, r3
 8005d22:	60e3      	str	r3, [r4, #12]
 8005d24:	2302      	movs	r3, #2
 8005d26:	4313      	orrs	r3, r2
 8005d28:	6023      	str	r3, [r4, #0]
 8005d2a:	7833      	ldrb	r3, [r6, #0]
 8005d2c:	2b2e      	cmp	r3, #46	; 0x2e
 8005d2e:	d10a      	bne.n	8005d46 <_vfiprintf_r+0x15a>
 8005d30:	7873      	ldrb	r3, [r6, #1]
 8005d32:	2b2a      	cmp	r3, #42	; 0x2a
 8005d34:	d135      	bne.n	8005da2 <_vfiprintf_r+0x1b6>
 8005d36:	9b07      	ldr	r3, [sp, #28]
 8005d38:	3602      	adds	r6, #2
 8005d3a:	1d1a      	adds	r2, r3, #4
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	9207      	str	r2, [sp, #28]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	db2b      	blt.n	8005d9c <_vfiprintf_r+0x1b0>
 8005d44:	9309      	str	r3, [sp, #36]	; 0x24
 8005d46:	4d33      	ldr	r5, [pc, #204]	; (8005e14 <_vfiprintf_r+0x228>)
 8005d48:	2203      	movs	r2, #3
 8005d4a:	0028      	movs	r0, r5
 8005d4c:	7831      	ldrb	r1, [r6, #0]
 8005d4e:	f000 fb68 	bl	8006422 <memchr>
 8005d52:	2800      	cmp	r0, #0
 8005d54:	d006      	beq.n	8005d64 <_vfiprintf_r+0x178>
 8005d56:	2340      	movs	r3, #64	; 0x40
 8005d58:	1b40      	subs	r0, r0, r5
 8005d5a:	4083      	lsls	r3, r0
 8005d5c:	6822      	ldr	r2, [r4, #0]
 8005d5e:	3601      	adds	r6, #1
 8005d60:	4313      	orrs	r3, r2
 8005d62:	6023      	str	r3, [r4, #0]
 8005d64:	7831      	ldrb	r1, [r6, #0]
 8005d66:	2206      	movs	r2, #6
 8005d68:	482b      	ldr	r0, [pc, #172]	; (8005e18 <_vfiprintf_r+0x22c>)
 8005d6a:	1c75      	adds	r5, r6, #1
 8005d6c:	7621      	strb	r1, [r4, #24]
 8005d6e:	f000 fb58 	bl	8006422 <memchr>
 8005d72:	2800      	cmp	r0, #0
 8005d74:	d043      	beq.n	8005dfe <_vfiprintf_r+0x212>
 8005d76:	4b29      	ldr	r3, [pc, #164]	; (8005e1c <_vfiprintf_r+0x230>)
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d125      	bne.n	8005dc8 <_vfiprintf_r+0x1dc>
 8005d7c:	2207      	movs	r2, #7
 8005d7e:	9b07      	ldr	r3, [sp, #28]
 8005d80:	3307      	adds	r3, #7
 8005d82:	4393      	bics	r3, r2
 8005d84:	3308      	adds	r3, #8
 8005d86:	9307      	str	r3, [sp, #28]
 8005d88:	6963      	ldr	r3, [r4, #20]
 8005d8a:	9a04      	ldr	r2, [sp, #16]
 8005d8c:	189b      	adds	r3, r3, r2
 8005d8e:	6163      	str	r3, [r4, #20]
 8005d90:	e764      	b.n	8005c5c <_vfiprintf_r+0x70>
 8005d92:	4343      	muls	r3, r0
 8005d94:	002e      	movs	r6, r5
 8005d96:	2101      	movs	r1, #1
 8005d98:	189b      	adds	r3, r3, r2
 8005d9a:	e7a6      	b.n	8005cea <_vfiprintf_r+0xfe>
 8005d9c:	2301      	movs	r3, #1
 8005d9e:	425b      	negs	r3, r3
 8005da0:	e7d0      	b.n	8005d44 <_vfiprintf_r+0x158>
 8005da2:	2300      	movs	r3, #0
 8005da4:	200a      	movs	r0, #10
 8005da6:	001a      	movs	r2, r3
 8005da8:	3601      	adds	r6, #1
 8005daa:	6063      	str	r3, [r4, #4]
 8005dac:	7831      	ldrb	r1, [r6, #0]
 8005dae:	1c75      	adds	r5, r6, #1
 8005db0:	3930      	subs	r1, #48	; 0x30
 8005db2:	2909      	cmp	r1, #9
 8005db4:	d903      	bls.n	8005dbe <_vfiprintf_r+0x1d2>
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d0c5      	beq.n	8005d46 <_vfiprintf_r+0x15a>
 8005dba:	9209      	str	r2, [sp, #36]	; 0x24
 8005dbc:	e7c3      	b.n	8005d46 <_vfiprintf_r+0x15a>
 8005dbe:	4342      	muls	r2, r0
 8005dc0:	002e      	movs	r6, r5
 8005dc2:	2301      	movs	r3, #1
 8005dc4:	1852      	adds	r2, r2, r1
 8005dc6:	e7f1      	b.n	8005dac <_vfiprintf_r+0x1c0>
 8005dc8:	aa07      	add	r2, sp, #28
 8005dca:	9200      	str	r2, [sp, #0]
 8005dcc:	0021      	movs	r1, r4
 8005dce:	003a      	movs	r2, r7
 8005dd0:	4b13      	ldr	r3, [pc, #76]	; (8005e20 <_vfiprintf_r+0x234>)
 8005dd2:	9803      	ldr	r0, [sp, #12]
 8005dd4:	e000      	b.n	8005dd8 <_vfiprintf_r+0x1ec>
 8005dd6:	bf00      	nop
 8005dd8:	9004      	str	r0, [sp, #16]
 8005dda:	9b04      	ldr	r3, [sp, #16]
 8005ddc:	3301      	adds	r3, #1
 8005dde:	d1d3      	bne.n	8005d88 <_vfiprintf_r+0x19c>
 8005de0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005de2:	07db      	lsls	r3, r3, #31
 8005de4:	d405      	bmi.n	8005df2 <_vfiprintf_r+0x206>
 8005de6:	89bb      	ldrh	r3, [r7, #12]
 8005de8:	059b      	lsls	r3, r3, #22
 8005dea:	d402      	bmi.n	8005df2 <_vfiprintf_r+0x206>
 8005dec:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8005dee:	f7ff fcf4 	bl	80057da <__retarget_lock_release_recursive>
 8005df2:	89bb      	ldrh	r3, [r7, #12]
 8005df4:	065b      	lsls	r3, r3, #25
 8005df6:	d500      	bpl.n	8005dfa <_vfiprintf_r+0x20e>
 8005df8:	e71d      	b.n	8005c36 <_vfiprintf_r+0x4a>
 8005dfa:	980d      	ldr	r0, [sp, #52]	; 0x34
 8005dfc:	e71d      	b.n	8005c3a <_vfiprintf_r+0x4e>
 8005dfe:	aa07      	add	r2, sp, #28
 8005e00:	9200      	str	r2, [sp, #0]
 8005e02:	0021      	movs	r1, r4
 8005e04:	003a      	movs	r2, r7
 8005e06:	4b06      	ldr	r3, [pc, #24]	; (8005e20 <_vfiprintf_r+0x234>)
 8005e08:	9803      	ldr	r0, [sp, #12]
 8005e0a:	f000 f87b 	bl	8005f04 <_printf_i>
 8005e0e:	e7e3      	b.n	8005dd8 <_vfiprintf_r+0x1ec>
 8005e10:	080069ce 	.word	0x080069ce
 8005e14:	080069d4 	.word	0x080069d4
 8005e18:	080069d8 	.word	0x080069d8
 8005e1c:	00000000 	.word	0x00000000
 8005e20:	08005bc7 	.word	0x08005bc7

08005e24 <_printf_common>:
 8005e24:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005e26:	0016      	movs	r6, r2
 8005e28:	9301      	str	r3, [sp, #4]
 8005e2a:	688a      	ldr	r2, [r1, #8]
 8005e2c:	690b      	ldr	r3, [r1, #16]
 8005e2e:	000c      	movs	r4, r1
 8005e30:	9000      	str	r0, [sp, #0]
 8005e32:	4293      	cmp	r3, r2
 8005e34:	da00      	bge.n	8005e38 <_printf_common+0x14>
 8005e36:	0013      	movs	r3, r2
 8005e38:	0022      	movs	r2, r4
 8005e3a:	6033      	str	r3, [r6, #0]
 8005e3c:	3243      	adds	r2, #67	; 0x43
 8005e3e:	7812      	ldrb	r2, [r2, #0]
 8005e40:	2a00      	cmp	r2, #0
 8005e42:	d001      	beq.n	8005e48 <_printf_common+0x24>
 8005e44:	3301      	adds	r3, #1
 8005e46:	6033      	str	r3, [r6, #0]
 8005e48:	6823      	ldr	r3, [r4, #0]
 8005e4a:	069b      	lsls	r3, r3, #26
 8005e4c:	d502      	bpl.n	8005e54 <_printf_common+0x30>
 8005e4e:	6833      	ldr	r3, [r6, #0]
 8005e50:	3302      	adds	r3, #2
 8005e52:	6033      	str	r3, [r6, #0]
 8005e54:	6822      	ldr	r2, [r4, #0]
 8005e56:	2306      	movs	r3, #6
 8005e58:	0015      	movs	r5, r2
 8005e5a:	401d      	ands	r5, r3
 8005e5c:	421a      	tst	r2, r3
 8005e5e:	d027      	beq.n	8005eb0 <_printf_common+0x8c>
 8005e60:	0023      	movs	r3, r4
 8005e62:	3343      	adds	r3, #67	; 0x43
 8005e64:	781b      	ldrb	r3, [r3, #0]
 8005e66:	1e5a      	subs	r2, r3, #1
 8005e68:	4193      	sbcs	r3, r2
 8005e6a:	6822      	ldr	r2, [r4, #0]
 8005e6c:	0692      	lsls	r2, r2, #26
 8005e6e:	d430      	bmi.n	8005ed2 <_printf_common+0xae>
 8005e70:	0022      	movs	r2, r4
 8005e72:	9901      	ldr	r1, [sp, #4]
 8005e74:	9800      	ldr	r0, [sp, #0]
 8005e76:	9d08      	ldr	r5, [sp, #32]
 8005e78:	3243      	adds	r2, #67	; 0x43
 8005e7a:	47a8      	blx	r5
 8005e7c:	3001      	adds	r0, #1
 8005e7e:	d025      	beq.n	8005ecc <_printf_common+0xa8>
 8005e80:	2206      	movs	r2, #6
 8005e82:	6823      	ldr	r3, [r4, #0]
 8005e84:	2500      	movs	r5, #0
 8005e86:	4013      	ands	r3, r2
 8005e88:	2b04      	cmp	r3, #4
 8005e8a:	d105      	bne.n	8005e98 <_printf_common+0x74>
 8005e8c:	6833      	ldr	r3, [r6, #0]
 8005e8e:	68e5      	ldr	r5, [r4, #12]
 8005e90:	1aed      	subs	r5, r5, r3
 8005e92:	43eb      	mvns	r3, r5
 8005e94:	17db      	asrs	r3, r3, #31
 8005e96:	401d      	ands	r5, r3
 8005e98:	68a3      	ldr	r3, [r4, #8]
 8005e9a:	6922      	ldr	r2, [r4, #16]
 8005e9c:	4293      	cmp	r3, r2
 8005e9e:	dd01      	ble.n	8005ea4 <_printf_common+0x80>
 8005ea0:	1a9b      	subs	r3, r3, r2
 8005ea2:	18ed      	adds	r5, r5, r3
 8005ea4:	2600      	movs	r6, #0
 8005ea6:	42b5      	cmp	r5, r6
 8005ea8:	d120      	bne.n	8005eec <_printf_common+0xc8>
 8005eaa:	2000      	movs	r0, #0
 8005eac:	e010      	b.n	8005ed0 <_printf_common+0xac>
 8005eae:	3501      	adds	r5, #1
 8005eb0:	68e3      	ldr	r3, [r4, #12]
 8005eb2:	6832      	ldr	r2, [r6, #0]
 8005eb4:	1a9b      	subs	r3, r3, r2
 8005eb6:	42ab      	cmp	r3, r5
 8005eb8:	ddd2      	ble.n	8005e60 <_printf_common+0x3c>
 8005eba:	0022      	movs	r2, r4
 8005ebc:	2301      	movs	r3, #1
 8005ebe:	9901      	ldr	r1, [sp, #4]
 8005ec0:	9800      	ldr	r0, [sp, #0]
 8005ec2:	9f08      	ldr	r7, [sp, #32]
 8005ec4:	3219      	adds	r2, #25
 8005ec6:	47b8      	blx	r7
 8005ec8:	3001      	adds	r0, #1
 8005eca:	d1f0      	bne.n	8005eae <_printf_common+0x8a>
 8005ecc:	2001      	movs	r0, #1
 8005ece:	4240      	negs	r0, r0
 8005ed0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005ed2:	2030      	movs	r0, #48	; 0x30
 8005ed4:	18e1      	adds	r1, r4, r3
 8005ed6:	3143      	adds	r1, #67	; 0x43
 8005ed8:	7008      	strb	r0, [r1, #0]
 8005eda:	0021      	movs	r1, r4
 8005edc:	1c5a      	adds	r2, r3, #1
 8005ede:	3145      	adds	r1, #69	; 0x45
 8005ee0:	7809      	ldrb	r1, [r1, #0]
 8005ee2:	18a2      	adds	r2, r4, r2
 8005ee4:	3243      	adds	r2, #67	; 0x43
 8005ee6:	3302      	adds	r3, #2
 8005ee8:	7011      	strb	r1, [r2, #0]
 8005eea:	e7c1      	b.n	8005e70 <_printf_common+0x4c>
 8005eec:	0022      	movs	r2, r4
 8005eee:	2301      	movs	r3, #1
 8005ef0:	9901      	ldr	r1, [sp, #4]
 8005ef2:	9800      	ldr	r0, [sp, #0]
 8005ef4:	9f08      	ldr	r7, [sp, #32]
 8005ef6:	321a      	adds	r2, #26
 8005ef8:	47b8      	blx	r7
 8005efa:	3001      	adds	r0, #1
 8005efc:	d0e6      	beq.n	8005ecc <_printf_common+0xa8>
 8005efe:	3601      	adds	r6, #1
 8005f00:	e7d1      	b.n	8005ea6 <_printf_common+0x82>
	...

08005f04 <_printf_i>:
 8005f04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005f06:	b08b      	sub	sp, #44	; 0x2c
 8005f08:	9206      	str	r2, [sp, #24]
 8005f0a:	000a      	movs	r2, r1
 8005f0c:	3243      	adds	r2, #67	; 0x43
 8005f0e:	9307      	str	r3, [sp, #28]
 8005f10:	9005      	str	r0, [sp, #20]
 8005f12:	9204      	str	r2, [sp, #16]
 8005f14:	7e0a      	ldrb	r2, [r1, #24]
 8005f16:	000c      	movs	r4, r1
 8005f18:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005f1a:	2a78      	cmp	r2, #120	; 0x78
 8005f1c:	d809      	bhi.n	8005f32 <_printf_i+0x2e>
 8005f1e:	2a62      	cmp	r2, #98	; 0x62
 8005f20:	d80b      	bhi.n	8005f3a <_printf_i+0x36>
 8005f22:	2a00      	cmp	r2, #0
 8005f24:	d100      	bne.n	8005f28 <_printf_i+0x24>
 8005f26:	e0be      	b.n	80060a6 <_printf_i+0x1a2>
 8005f28:	497c      	ldr	r1, [pc, #496]	; (800611c <_printf_i+0x218>)
 8005f2a:	9103      	str	r1, [sp, #12]
 8005f2c:	2a58      	cmp	r2, #88	; 0x58
 8005f2e:	d100      	bne.n	8005f32 <_printf_i+0x2e>
 8005f30:	e093      	b.n	800605a <_printf_i+0x156>
 8005f32:	0026      	movs	r6, r4
 8005f34:	3642      	adds	r6, #66	; 0x42
 8005f36:	7032      	strb	r2, [r6, #0]
 8005f38:	e022      	b.n	8005f80 <_printf_i+0x7c>
 8005f3a:	0010      	movs	r0, r2
 8005f3c:	3863      	subs	r0, #99	; 0x63
 8005f3e:	2815      	cmp	r0, #21
 8005f40:	d8f7      	bhi.n	8005f32 <_printf_i+0x2e>
 8005f42:	f7fa f8f3 	bl	800012c <__gnu_thumb1_case_shi>
 8005f46:	0016      	.short	0x0016
 8005f48:	fff6001f 	.word	0xfff6001f
 8005f4c:	fff6fff6 	.word	0xfff6fff6
 8005f50:	001ffff6 	.word	0x001ffff6
 8005f54:	fff6fff6 	.word	0xfff6fff6
 8005f58:	fff6fff6 	.word	0xfff6fff6
 8005f5c:	003600a3 	.word	0x003600a3
 8005f60:	fff60083 	.word	0xfff60083
 8005f64:	00b4fff6 	.word	0x00b4fff6
 8005f68:	0036fff6 	.word	0x0036fff6
 8005f6c:	fff6fff6 	.word	0xfff6fff6
 8005f70:	0087      	.short	0x0087
 8005f72:	0026      	movs	r6, r4
 8005f74:	681a      	ldr	r2, [r3, #0]
 8005f76:	3642      	adds	r6, #66	; 0x42
 8005f78:	1d11      	adds	r1, r2, #4
 8005f7a:	6019      	str	r1, [r3, #0]
 8005f7c:	6813      	ldr	r3, [r2, #0]
 8005f7e:	7033      	strb	r3, [r6, #0]
 8005f80:	2301      	movs	r3, #1
 8005f82:	e0a2      	b.n	80060ca <_printf_i+0x1c6>
 8005f84:	6818      	ldr	r0, [r3, #0]
 8005f86:	6809      	ldr	r1, [r1, #0]
 8005f88:	1d02      	adds	r2, r0, #4
 8005f8a:	060d      	lsls	r5, r1, #24
 8005f8c:	d50b      	bpl.n	8005fa6 <_printf_i+0xa2>
 8005f8e:	6805      	ldr	r5, [r0, #0]
 8005f90:	601a      	str	r2, [r3, #0]
 8005f92:	2d00      	cmp	r5, #0
 8005f94:	da03      	bge.n	8005f9e <_printf_i+0x9a>
 8005f96:	232d      	movs	r3, #45	; 0x2d
 8005f98:	9a04      	ldr	r2, [sp, #16]
 8005f9a:	426d      	negs	r5, r5
 8005f9c:	7013      	strb	r3, [r2, #0]
 8005f9e:	4b5f      	ldr	r3, [pc, #380]	; (800611c <_printf_i+0x218>)
 8005fa0:	270a      	movs	r7, #10
 8005fa2:	9303      	str	r3, [sp, #12]
 8005fa4:	e01b      	b.n	8005fde <_printf_i+0xda>
 8005fa6:	6805      	ldr	r5, [r0, #0]
 8005fa8:	601a      	str	r2, [r3, #0]
 8005faa:	0649      	lsls	r1, r1, #25
 8005fac:	d5f1      	bpl.n	8005f92 <_printf_i+0x8e>
 8005fae:	b22d      	sxth	r5, r5
 8005fb0:	e7ef      	b.n	8005f92 <_printf_i+0x8e>
 8005fb2:	680d      	ldr	r5, [r1, #0]
 8005fb4:	6819      	ldr	r1, [r3, #0]
 8005fb6:	1d08      	adds	r0, r1, #4
 8005fb8:	6018      	str	r0, [r3, #0]
 8005fba:	062e      	lsls	r6, r5, #24
 8005fbc:	d501      	bpl.n	8005fc2 <_printf_i+0xbe>
 8005fbe:	680d      	ldr	r5, [r1, #0]
 8005fc0:	e003      	b.n	8005fca <_printf_i+0xc6>
 8005fc2:	066d      	lsls	r5, r5, #25
 8005fc4:	d5fb      	bpl.n	8005fbe <_printf_i+0xba>
 8005fc6:	680d      	ldr	r5, [r1, #0]
 8005fc8:	b2ad      	uxth	r5, r5
 8005fca:	4b54      	ldr	r3, [pc, #336]	; (800611c <_printf_i+0x218>)
 8005fcc:	2708      	movs	r7, #8
 8005fce:	9303      	str	r3, [sp, #12]
 8005fd0:	2a6f      	cmp	r2, #111	; 0x6f
 8005fd2:	d000      	beq.n	8005fd6 <_printf_i+0xd2>
 8005fd4:	3702      	adds	r7, #2
 8005fd6:	0023      	movs	r3, r4
 8005fd8:	2200      	movs	r2, #0
 8005fda:	3343      	adds	r3, #67	; 0x43
 8005fdc:	701a      	strb	r2, [r3, #0]
 8005fde:	6863      	ldr	r3, [r4, #4]
 8005fe0:	60a3      	str	r3, [r4, #8]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	db03      	blt.n	8005fee <_printf_i+0xea>
 8005fe6:	2104      	movs	r1, #4
 8005fe8:	6822      	ldr	r2, [r4, #0]
 8005fea:	438a      	bics	r2, r1
 8005fec:	6022      	str	r2, [r4, #0]
 8005fee:	2d00      	cmp	r5, #0
 8005ff0:	d102      	bne.n	8005ff8 <_printf_i+0xf4>
 8005ff2:	9e04      	ldr	r6, [sp, #16]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d00c      	beq.n	8006012 <_printf_i+0x10e>
 8005ff8:	9e04      	ldr	r6, [sp, #16]
 8005ffa:	0028      	movs	r0, r5
 8005ffc:	0039      	movs	r1, r7
 8005ffe:	f7fa f925 	bl	800024c <__aeabi_uidivmod>
 8006002:	9b03      	ldr	r3, [sp, #12]
 8006004:	3e01      	subs	r6, #1
 8006006:	5c5b      	ldrb	r3, [r3, r1]
 8006008:	7033      	strb	r3, [r6, #0]
 800600a:	002b      	movs	r3, r5
 800600c:	0005      	movs	r5, r0
 800600e:	429f      	cmp	r7, r3
 8006010:	d9f3      	bls.n	8005ffa <_printf_i+0xf6>
 8006012:	2f08      	cmp	r7, #8
 8006014:	d109      	bne.n	800602a <_printf_i+0x126>
 8006016:	6823      	ldr	r3, [r4, #0]
 8006018:	07db      	lsls	r3, r3, #31
 800601a:	d506      	bpl.n	800602a <_printf_i+0x126>
 800601c:	6862      	ldr	r2, [r4, #4]
 800601e:	6923      	ldr	r3, [r4, #16]
 8006020:	429a      	cmp	r2, r3
 8006022:	dc02      	bgt.n	800602a <_printf_i+0x126>
 8006024:	2330      	movs	r3, #48	; 0x30
 8006026:	3e01      	subs	r6, #1
 8006028:	7033      	strb	r3, [r6, #0]
 800602a:	9b04      	ldr	r3, [sp, #16]
 800602c:	1b9b      	subs	r3, r3, r6
 800602e:	6123      	str	r3, [r4, #16]
 8006030:	9b07      	ldr	r3, [sp, #28]
 8006032:	0021      	movs	r1, r4
 8006034:	9300      	str	r3, [sp, #0]
 8006036:	9805      	ldr	r0, [sp, #20]
 8006038:	9b06      	ldr	r3, [sp, #24]
 800603a:	aa09      	add	r2, sp, #36	; 0x24
 800603c:	f7ff fef2 	bl	8005e24 <_printf_common>
 8006040:	3001      	adds	r0, #1
 8006042:	d147      	bne.n	80060d4 <_printf_i+0x1d0>
 8006044:	2001      	movs	r0, #1
 8006046:	4240      	negs	r0, r0
 8006048:	b00b      	add	sp, #44	; 0x2c
 800604a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800604c:	2220      	movs	r2, #32
 800604e:	6809      	ldr	r1, [r1, #0]
 8006050:	430a      	orrs	r2, r1
 8006052:	6022      	str	r2, [r4, #0]
 8006054:	2278      	movs	r2, #120	; 0x78
 8006056:	4932      	ldr	r1, [pc, #200]	; (8006120 <_printf_i+0x21c>)
 8006058:	9103      	str	r1, [sp, #12]
 800605a:	0021      	movs	r1, r4
 800605c:	3145      	adds	r1, #69	; 0x45
 800605e:	700a      	strb	r2, [r1, #0]
 8006060:	6819      	ldr	r1, [r3, #0]
 8006062:	6822      	ldr	r2, [r4, #0]
 8006064:	c920      	ldmia	r1!, {r5}
 8006066:	0610      	lsls	r0, r2, #24
 8006068:	d402      	bmi.n	8006070 <_printf_i+0x16c>
 800606a:	0650      	lsls	r0, r2, #25
 800606c:	d500      	bpl.n	8006070 <_printf_i+0x16c>
 800606e:	b2ad      	uxth	r5, r5
 8006070:	6019      	str	r1, [r3, #0]
 8006072:	07d3      	lsls	r3, r2, #31
 8006074:	d502      	bpl.n	800607c <_printf_i+0x178>
 8006076:	2320      	movs	r3, #32
 8006078:	4313      	orrs	r3, r2
 800607a:	6023      	str	r3, [r4, #0]
 800607c:	2710      	movs	r7, #16
 800607e:	2d00      	cmp	r5, #0
 8006080:	d1a9      	bne.n	8005fd6 <_printf_i+0xd2>
 8006082:	2220      	movs	r2, #32
 8006084:	6823      	ldr	r3, [r4, #0]
 8006086:	4393      	bics	r3, r2
 8006088:	6023      	str	r3, [r4, #0]
 800608a:	e7a4      	b.n	8005fd6 <_printf_i+0xd2>
 800608c:	681a      	ldr	r2, [r3, #0]
 800608e:	680d      	ldr	r5, [r1, #0]
 8006090:	1d10      	adds	r0, r2, #4
 8006092:	6949      	ldr	r1, [r1, #20]
 8006094:	6018      	str	r0, [r3, #0]
 8006096:	6813      	ldr	r3, [r2, #0]
 8006098:	062e      	lsls	r6, r5, #24
 800609a:	d501      	bpl.n	80060a0 <_printf_i+0x19c>
 800609c:	6019      	str	r1, [r3, #0]
 800609e:	e002      	b.n	80060a6 <_printf_i+0x1a2>
 80060a0:	066d      	lsls	r5, r5, #25
 80060a2:	d5fb      	bpl.n	800609c <_printf_i+0x198>
 80060a4:	8019      	strh	r1, [r3, #0]
 80060a6:	2300      	movs	r3, #0
 80060a8:	9e04      	ldr	r6, [sp, #16]
 80060aa:	6123      	str	r3, [r4, #16]
 80060ac:	e7c0      	b.n	8006030 <_printf_i+0x12c>
 80060ae:	681a      	ldr	r2, [r3, #0]
 80060b0:	1d11      	adds	r1, r2, #4
 80060b2:	6019      	str	r1, [r3, #0]
 80060b4:	6816      	ldr	r6, [r2, #0]
 80060b6:	2100      	movs	r1, #0
 80060b8:	0030      	movs	r0, r6
 80060ba:	6862      	ldr	r2, [r4, #4]
 80060bc:	f000 f9b1 	bl	8006422 <memchr>
 80060c0:	2800      	cmp	r0, #0
 80060c2:	d001      	beq.n	80060c8 <_printf_i+0x1c4>
 80060c4:	1b80      	subs	r0, r0, r6
 80060c6:	6060      	str	r0, [r4, #4]
 80060c8:	6863      	ldr	r3, [r4, #4]
 80060ca:	6123      	str	r3, [r4, #16]
 80060cc:	2300      	movs	r3, #0
 80060ce:	9a04      	ldr	r2, [sp, #16]
 80060d0:	7013      	strb	r3, [r2, #0]
 80060d2:	e7ad      	b.n	8006030 <_printf_i+0x12c>
 80060d4:	0032      	movs	r2, r6
 80060d6:	6923      	ldr	r3, [r4, #16]
 80060d8:	9906      	ldr	r1, [sp, #24]
 80060da:	9805      	ldr	r0, [sp, #20]
 80060dc:	9d07      	ldr	r5, [sp, #28]
 80060de:	47a8      	blx	r5
 80060e0:	3001      	adds	r0, #1
 80060e2:	d0af      	beq.n	8006044 <_printf_i+0x140>
 80060e4:	6823      	ldr	r3, [r4, #0]
 80060e6:	079b      	lsls	r3, r3, #30
 80060e8:	d415      	bmi.n	8006116 <_printf_i+0x212>
 80060ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80060ec:	68e0      	ldr	r0, [r4, #12]
 80060ee:	4298      	cmp	r0, r3
 80060f0:	daaa      	bge.n	8006048 <_printf_i+0x144>
 80060f2:	0018      	movs	r0, r3
 80060f4:	e7a8      	b.n	8006048 <_printf_i+0x144>
 80060f6:	0022      	movs	r2, r4
 80060f8:	2301      	movs	r3, #1
 80060fa:	9906      	ldr	r1, [sp, #24]
 80060fc:	9805      	ldr	r0, [sp, #20]
 80060fe:	9e07      	ldr	r6, [sp, #28]
 8006100:	3219      	adds	r2, #25
 8006102:	47b0      	blx	r6
 8006104:	3001      	adds	r0, #1
 8006106:	d09d      	beq.n	8006044 <_printf_i+0x140>
 8006108:	3501      	adds	r5, #1
 800610a:	68e3      	ldr	r3, [r4, #12]
 800610c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800610e:	1a9b      	subs	r3, r3, r2
 8006110:	42ab      	cmp	r3, r5
 8006112:	dcf0      	bgt.n	80060f6 <_printf_i+0x1f2>
 8006114:	e7e9      	b.n	80060ea <_printf_i+0x1e6>
 8006116:	2500      	movs	r5, #0
 8006118:	e7f7      	b.n	800610a <_printf_i+0x206>
 800611a:	46c0      	nop			; (mov r8, r8)
 800611c:	080069df 	.word	0x080069df
 8006120:	080069f0 	.word	0x080069f0

08006124 <__sflush_r>:
 8006124:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006126:	898b      	ldrh	r3, [r1, #12]
 8006128:	0005      	movs	r5, r0
 800612a:	000c      	movs	r4, r1
 800612c:	071a      	lsls	r2, r3, #28
 800612e:	d45c      	bmi.n	80061ea <__sflush_r+0xc6>
 8006130:	684a      	ldr	r2, [r1, #4]
 8006132:	2a00      	cmp	r2, #0
 8006134:	dc04      	bgt.n	8006140 <__sflush_r+0x1c>
 8006136:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8006138:	2a00      	cmp	r2, #0
 800613a:	dc01      	bgt.n	8006140 <__sflush_r+0x1c>
 800613c:	2000      	movs	r0, #0
 800613e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006140:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8006142:	2f00      	cmp	r7, #0
 8006144:	d0fa      	beq.n	800613c <__sflush_r+0x18>
 8006146:	2200      	movs	r2, #0
 8006148:	2080      	movs	r0, #128	; 0x80
 800614a:	682e      	ldr	r6, [r5, #0]
 800614c:	602a      	str	r2, [r5, #0]
 800614e:	001a      	movs	r2, r3
 8006150:	0140      	lsls	r0, r0, #5
 8006152:	6a21      	ldr	r1, [r4, #32]
 8006154:	4002      	ands	r2, r0
 8006156:	4203      	tst	r3, r0
 8006158:	d034      	beq.n	80061c4 <__sflush_r+0xa0>
 800615a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800615c:	89a3      	ldrh	r3, [r4, #12]
 800615e:	075b      	lsls	r3, r3, #29
 8006160:	d506      	bpl.n	8006170 <__sflush_r+0x4c>
 8006162:	6863      	ldr	r3, [r4, #4]
 8006164:	1ac0      	subs	r0, r0, r3
 8006166:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006168:	2b00      	cmp	r3, #0
 800616a:	d001      	beq.n	8006170 <__sflush_r+0x4c>
 800616c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800616e:	1ac0      	subs	r0, r0, r3
 8006170:	0002      	movs	r2, r0
 8006172:	2300      	movs	r3, #0
 8006174:	0028      	movs	r0, r5
 8006176:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8006178:	6a21      	ldr	r1, [r4, #32]
 800617a:	47b8      	blx	r7
 800617c:	89a2      	ldrh	r2, [r4, #12]
 800617e:	1c43      	adds	r3, r0, #1
 8006180:	d106      	bne.n	8006190 <__sflush_r+0x6c>
 8006182:	6829      	ldr	r1, [r5, #0]
 8006184:	291d      	cmp	r1, #29
 8006186:	d82c      	bhi.n	80061e2 <__sflush_r+0xbe>
 8006188:	4b2a      	ldr	r3, [pc, #168]	; (8006234 <__sflush_r+0x110>)
 800618a:	410b      	asrs	r3, r1
 800618c:	07db      	lsls	r3, r3, #31
 800618e:	d428      	bmi.n	80061e2 <__sflush_r+0xbe>
 8006190:	2300      	movs	r3, #0
 8006192:	6063      	str	r3, [r4, #4]
 8006194:	6923      	ldr	r3, [r4, #16]
 8006196:	6023      	str	r3, [r4, #0]
 8006198:	04d2      	lsls	r2, r2, #19
 800619a:	d505      	bpl.n	80061a8 <__sflush_r+0x84>
 800619c:	1c43      	adds	r3, r0, #1
 800619e:	d102      	bne.n	80061a6 <__sflush_r+0x82>
 80061a0:	682b      	ldr	r3, [r5, #0]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d100      	bne.n	80061a8 <__sflush_r+0x84>
 80061a6:	6560      	str	r0, [r4, #84]	; 0x54
 80061a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80061aa:	602e      	str	r6, [r5, #0]
 80061ac:	2900      	cmp	r1, #0
 80061ae:	d0c5      	beq.n	800613c <__sflush_r+0x18>
 80061b0:	0023      	movs	r3, r4
 80061b2:	3344      	adds	r3, #68	; 0x44
 80061b4:	4299      	cmp	r1, r3
 80061b6:	d002      	beq.n	80061be <__sflush_r+0x9a>
 80061b8:	0028      	movs	r0, r5
 80061ba:	f7ff fb43 	bl	8005844 <_free_r>
 80061be:	2000      	movs	r0, #0
 80061c0:	6360      	str	r0, [r4, #52]	; 0x34
 80061c2:	e7bc      	b.n	800613e <__sflush_r+0x1a>
 80061c4:	2301      	movs	r3, #1
 80061c6:	0028      	movs	r0, r5
 80061c8:	47b8      	blx	r7
 80061ca:	1c43      	adds	r3, r0, #1
 80061cc:	d1c6      	bne.n	800615c <__sflush_r+0x38>
 80061ce:	682b      	ldr	r3, [r5, #0]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d0c3      	beq.n	800615c <__sflush_r+0x38>
 80061d4:	2b1d      	cmp	r3, #29
 80061d6:	d001      	beq.n	80061dc <__sflush_r+0xb8>
 80061d8:	2b16      	cmp	r3, #22
 80061da:	d101      	bne.n	80061e0 <__sflush_r+0xbc>
 80061dc:	602e      	str	r6, [r5, #0]
 80061de:	e7ad      	b.n	800613c <__sflush_r+0x18>
 80061e0:	89a2      	ldrh	r2, [r4, #12]
 80061e2:	2340      	movs	r3, #64	; 0x40
 80061e4:	4313      	orrs	r3, r2
 80061e6:	81a3      	strh	r3, [r4, #12]
 80061e8:	e7a9      	b.n	800613e <__sflush_r+0x1a>
 80061ea:	690e      	ldr	r6, [r1, #16]
 80061ec:	2e00      	cmp	r6, #0
 80061ee:	d0a5      	beq.n	800613c <__sflush_r+0x18>
 80061f0:	680f      	ldr	r7, [r1, #0]
 80061f2:	600e      	str	r6, [r1, #0]
 80061f4:	1bba      	subs	r2, r7, r6
 80061f6:	9201      	str	r2, [sp, #4]
 80061f8:	2200      	movs	r2, #0
 80061fa:	079b      	lsls	r3, r3, #30
 80061fc:	d100      	bne.n	8006200 <__sflush_r+0xdc>
 80061fe:	694a      	ldr	r2, [r1, #20]
 8006200:	60a2      	str	r2, [r4, #8]
 8006202:	9b01      	ldr	r3, [sp, #4]
 8006204:	2b00      	cmp	r3, #0
 8006206:	dd99      	ble.n	800613c <__sflush_r+0x18>
 8006208:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800620a:	0032      	movs	r2, r6
 800620c:	001f      	movs	r7, r3
 800620e:	0028      	movs	r0, r5
 8006210:	9b01      	ldr	r3, [sp, #4]
 8006212:	6a21      	ldr	r1, [r4, #32]
 8006214:	47b8      	blx	r7
 8006216:	2800      	cmp	r0, #0
 8006218:	dc06      	bgt.n	8006228 <__sflush_r+0x104>
 800621a:	2340      	movs	r3, #64	; 0x40
 800621c:	2001      	movs	r0, #1
 800621e:	89a2      	ldrh	r2, [r4, #12]
 8006220:	4240      	negs	r0, r0
 8006222:	4313      	orrs	r3, r2
 8006224:	81a3      	strh	r3, [r4, #12]
 8006226:	e78a      	b.n	800613e <__sflush_r+0x1a>
 8006228:	9b01      	ldr	r3, [sp, #4]
 800622a:	1836      	adds	r6, r6, r0
 800622c:	1a1b      	subs	r3, r3, r0
 800622e:	9301      	str	r3, [sp, #4]
 8006230:	e7e7      	b.n	8006202 <__sflush_r+0xde>
 8006232:	46c0      	nop			; (mov r8, r8)
 8006234:	dfbffffe 	.word	0xdfbffffe

08006238 <_fflush_r>:
 8006238:	690b      	ldr	r3, [r1, #16]
 800623a:	b570      	push	{r4, r5, r6, lr}
 800623c:	0005      	movs	r5, r0
 800623e:	000c      	movs	r4, r1
 8006240:	2b00      	cmp	r3, #0
 8006242:	d102      	bne.n	800624a <_fflush_r+0x12>
 8006244:	2500      	movs	r5, #0
 8006246:	0028      	movs	r0, r5
 8006248:	bd70      	pop	{r4, r5, r6, pc}
 800624a:	2800      	cmp	r0, #0
 800624c:	d004      	beq.n	8006258 <_fflush_r+0x20>
 800624e:	6a03      	ldr	r3, [r0, #32]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d101      	bne.n	8006258 <_fflush_r+0x20>
 8006254:	f7ff f8d2 	bl	80053fc <__sinit>
 8006258:	220c      	movs	r2, #12
 800625a:	5ea3      	ldrsh	r3, [r4, r2]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d0f1      	beq.n	8006244 <_fflush_r+0xc>
 8006260:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006262:	07d2      	lsls	r2, r2, #31
 8006264:	d404      	bmi.n	8006270 <_fflush_r+0x38>
 8006266:	059b      	lsls	r3, r3, #22
 8006268:	d402      	bmi.n	8006270 <_fflush_r+0x38>
 800626a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800626c:	f7ff fab4 	bl	80057d8 <__retarget_lock_acquire_recursive>
 8006270:	0028      	movs	r0, r5
 8006272:	0021      	movs	r1, r4
 8006274:	f7ff ff56 	bl	8006124 <__sflush_r>
 8006278:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800627a:	0005      	movs	r5, r0
 800627c:	07db      	lsls	r3, r3, #31
 800627e:	d4e2      	bmi.n	8006246 <_fflush_r+0xe>
 8006280:	89a3      	ldrh	r3, [r4, #12]
 8006282:	059b      	lsls	r3, r3, #22
 8006284:	d4df      	bmi.n	8006246 <_fflush_r+0xe>
 8006286:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006288:	f7ff faa7 	bl	80057da <__retarget_lock_release_recursive>
 800628c:	e7db      	b.n	8006246 <_fflush_r+0xe>
	...

08006290 <fiprintf>:
 8006290:	b40e      	push	{r1, r2, r3}
 8006292:	b517      	push	{r0, r1, r2, r4, lr}
 8006294:	4c05      	ldr	r4, [pc, #20]	; (80062ac <fiprintf+0x1c>)
 8006296:	ab05      	add	r3, sp, #20
 8006298:	cb04      	ldmia	r3!, {r2}
 800629a:	0001      	movs	r1, r0
 800629c:	6820      	ldr	r0, [r4, #0]
 800629e:	9301      	str	r3, [sp, #4]
 80062a0:	f7ff fca4 	bl	8005bec <_vfiprintf_r>
 80062a4:	bc1e      	pop	{r1, r2, r3, r4}
 80062a6:	bc08      	pop	{r3}
 80062a8:	b003      	add	sp, #12
 80062aa:	4718      	bx	r3
 80062ac:	200001f4 	.word	0x200001f4

080062b0 <__swbuf_r>:
 80062b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062b2:	0006      	movs	r6, r0
 80062b4:	000d      	movs	r5, r1
 80062b6:	0014      	movs	r4, r2
 80062b8:	2800      	cmp	r0, #0
 80062ba:	d004      	beq.n	80062c6 <__swbuf_r+0x16>
 80062bc:	6a03      	ldr	r3, [r0, #32]
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d101      	bne.n	80062c6 <__swbuf_r+0x16>
 80062c2:	f7ff f89b 	bl	80053fc <__sinit>
 80062c6:	69a3      	ldr	r3, [r4, #24]
 80062c8:	60a3      	str	r3, [r4, #8]
 80062ca:	89a3      	ldrh	r3, [r4, #12]
 80062cc:	071b      	lsls	r3, r3, #28
 80062ce:	d528      	bpl.n	8006322 <__swbuf_r+0x72>
 80062d0:	6923      	ldr	r3, [r4, #16]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d025      	beq.n	8006322 <__swbuf_r+0x72>
 80062d6:	6923      	ldr	r3, [r4, #16]
 80062d8:	6820      	ldr	r0, [r4, #0]
 80062da:	b2ef      	uxtb	r7, r5
 80062dc:	1ac0      	subs	r0, r0, r3
 80062de:	6963      	ldr	r3, [r4, #20]
 80062e0:	b2ed      	uxtb	r5, r5
 80062e2:	4283      	cmp	r3, r0
 80062e4:	dc05      	bgt.n	80062f2 <__swbuf_r+0x42>
 80062e6:	0021      	movs	r1, r4
 80062e8:	0030      	movs	r0, r6
 80062ea:	f7ff ffa5 	bl	8006238 <_fflush_r>
 80062ee:	2800      	cmp	r0, #0
 80062f0:	d11d      	bne.n	800632e <__swbuf_r+0x7e>
 80062f2:	68a3      	ldr	r3, [r4, #8]
 80062f4:	3001      	adds	r0, #1
 80062f6:	3b01      	subs	r3, #1
 80062f8:	60a3      	str	r3, [r4, #8]
 80062fa:	6823      	ldr	r3, [r4, #0]
 80062fc:	1c5a      	adds	r2, r3, #1
 80062fe:	6022      	str	r2, [r4, #0]
 8006300:	701f      	strb	r7, [r3, #0]
 8006302:	6963      	ldr	r3, [r4, #20]
 8006304:	4283      	cmp	r3, r0
 8006306:	d004      	beq.n	8006312 <__swbuf_r+0x62>
 8006308:	89a3      	ldrh	r3, [r4, #12]
 800630a:	07db      	lsls	r3, r3, #31
 800630c:	d507      	bpl.n	800631e <__swbuf_r+0x6e>
 800630e:	2d0a      	cmp	r5, #10
 8006310:	d105      	bne.n	800631e <__swbuf_r+0x6e>
 8006312:	0021      	movs	r1, r4
 8006314:	0030      	movs	r0, r6
 8006316:	f7ff ff8f 	bl	8006238 <_fflush_r>
 800631a:	2800      	cmp	r0, #0
 800631c:	d107      	bne.n	800632e <__swbuf_r+0x7e>
 800631e:	0028      	movs	r0, r5
 8006320:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006322:	0021      	movs	r1, r4
 8006324:	0030      	movs	r0, r6
 8006326:	f000 f805 	bl	8006334 <__swsetup_r>
 800632a:	2800      	cmp	r0, #0
 800632c:	d0d3      	beq.n	80062d6 <__swbuf_r+0x26>
 800632e:	2501      	movs	r5, #1
 8006330:	426d      	negs	r5, r5
 8006332:	e7f4      	b.n	800631e <__swbuf_r+0x6e>

08006334 <__swsetup_r>:
 8006334:	4b30      	ldr	r3, [pc, #192]	; (80063f8 <__swsetup_r+0xc4>)
 8006336:	b570      	push	{r4, r5, r6, lr}
 8006338:	0005      	movs	r5, r0
 800633a:	6818      	ldr	r0, [r3, #0]
 800633c:	000c      	movs	r4, r1
 800633e:	2800      	cmp	r0, #0
 8006340:	d004      	beq.n	800634c <__swsetup_r+0x18>
 8006342:	6a03      	ldr	r3, [r0, #32]
 8006344:	2b00      	cmp	r3, #0
 8006346:	d101      	bne.n	800634c <__swsetup_r+0x18>
 8006348:	f7ff f858 	bl	80053fc <__sinit>
 800634c:	230c      	movs	r3, #12
 800634e:	5ee2      	ldrsh	r2, [r4, r3]
 8006350:	b293      	uxth	r3, r2
 8006352:	0711      	lsls	r1, r2, #28
 8006354:	d423      	bmi.n	800639e <__swsetup_r+0x6a>
 8006356:	06d9      	lsls	r1, r3, #27
 8006358:	d407      	bmi.n	800636a <__swsetup_r+0x36>
 800635a:	2309      	movs	r3, #9
 800635c:	2001      	movs	r0, #1
 800635e:	602b      	str	r3, [r5, #0]
 8006360:	3337      	adds	r3, #55	; 0x37
 8006362:	4313      	orrs	r3, r2
 8006364:	81a3      	strh	r3, [r4, #12]
 8006366:	4240      	negs	r0, r0
 8006368:	bd70      	pop	{r4, r5, r6, pc}
 800636a:	075b      	lsls	r3, r3, #29
 800636c:	d513      	bpl.n	8006396 <__swsetup_r+0x62>
 800636e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006370:	2900      	cmp	r1, #0
 8006372:	d008      	beq.n	8006386 <__swsetup_r+0x52>
 8006374:	0023      	movs	r3, r4
 8006376:	3344      	adds	r3, #68	; 0x44
 8006378:	4299      	cmp	r1, r3
 800637a:	d002      	beq.n	8006382 <__swsetup_r+0x4e>
 800637c:	0028      	movs	r0, r5
 800637e:	f7ff fa61 	bl	8005844 <_free_r>
 8006382:	2300      	movs	r3, #0
 8006384:	6363      	str	r3, [r4, #52]	; 0x34
 8006386:	2224      	movs	r2, #36	; 0x24
 8006388:	89a3      	ldrh	r3, [r4, #12]
 800638a:	4393      	bics	r3, r2
 800638c:	81a3      	strh	r3, [r4, #12]
 800638e:	2300      	movs	r3, #0
 8006390:	6063      	str	r3, [r4, #4]
 8006392:	6923      	ldr	r3, [r4, #16]
 8006394:	6023      	str	r3, [r4, #0]
 8006396:	2308      	movs	r3, #8
 8006398:	89a2      	ldrh	r2, [r4, #12]
 800639a:	4313      	orrs	r3, r2
 800639c:	81a3      	strh	r3, [r4, #12]
 800639e:	6923      	ldr	r3, [r4, #16]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d10b      	bne.n	80063bc <__swsetup_r+0x88>
 80063a4:	21a0      	movs	r1, #160	; 0xa0
 80063a6:	2280      	movs	r2, #128	; 0x80
 80063a8:	89a3      	ldrh	r3, [r4, #12]
 80063aa:	0089      	lsls	r1, r1, #2
 80063ac:	0092      	lsls	r2, r2, #2
 80063ae:	400b      	ands	r3, r1
 80063b0:	4293      	cmp	r3, r2
 80063b2:	d003      	beq.n	80063bc <__swsetup_r+0x88>
 80063b4:	0021      	movs	r1, r4
 80063b6:	0028      	movs	r0, r5
 80063b8:	f000 f89c 	bl	80064f4 <__smakebuf_r>
 80063bc:	220c      	movs	r2, #12
 80063be:	5ea3      	ldrsh	r3, [r4, r2]
 80063c0:	2001      	movs	r0, #1
 80063c2:	001a      	movs	r2, r3
 80063c4:	b299      	uxth	r1, r3
 80063c6:	4002      	ands	r2, r0
 80063c8:	4203      	tst	r3, r0
 80063ca:	d00f      	beq.n	80063ec <__swsetup_r+0xb8>
 80063cc:	2200      	movs	r2, #0
 80063ce:	60a2      	str	r2, [r4, #8]
 80063d0:	6962      	ldr	r2, [r4, #20]
 80063d2:	4252      	negs	r2, r2
 80063d4:	61a2      	str	r2, [r4, #24]
 80063d6:	2000      	movs	r0, #0
 80063d8:	6922      	ldr	r2, [r4, #16]
 80063da:	4282      	cmp	r2, r0
 80063dc:	d1c4      	bne.n	8006368 <__swsetup_r+0x34>
 80063de:	0609      	lsls	r1, r1, #24
 80063e0:	d5c2      	bpl.n	8006368 <__swsetup_r+0x34>
 80063e2:	2240      	movs	r2, #64	; 0x40
 80063e4:	4313      	orrs	r3, r2
 80063e6:	81a3      	strh	r3, [r4, #12]
 80063e8:	3801      	subs	r0, #1
 80063ea:	e7bd      	b.n	8006368 <__swsetup_r+0x34>
 80063ec:	0788      	lsls	r0, r1, #30
 80063ee:	d400      	bmi.n	80063f2 <__swsetup_r+0xbe>
 80063f0:	6962      	ldr	r2, [r4, #20]
 80063f2:	60a2      	str	r2, [r4, #8]
 80063f4:	e7ef      	b.n	80063d6 <__swsetup_r+0xa2>
 80063f6:	46c0      	nop			; (mov r8, r8)
 80063f8:	200001f4 	.word	0x200001f4

080063fc <memmove>:
 80063fc:	b510      	push	{r4, lr}
 80063fe:	4288      	cmp	r0, r1
 8006400:	d902      	bls.n	8006408 <memmove+0xc>
 8006402:	188b      	adds	r3, r1, r2
 8006404:	4298      	cmp	r0, r3
 8006406:	d303      	bcc.n	8006410 <memmove+0x14>
 8006408:	2300      	movs	r3, #0
 800640a:	e007      	b.n	800641c <memmove+0x20>
 800640c:	5c8b      	ldrb	r3, [r1, r2]
 800640e:	5483      	strb	r3, [r0, r2]
 8006410:	3a01      	subs	r2, #1
 8006412:	d2fb      	bcs.n	800640c <memmove+0x10>
 8006414:	bd10      	pop	{r4, pc}
 8006416:	5ccc      	ldrb	r4, [r1, r3]
 8006418:	54c4      	strb	r4, [r0, r3]
 800641a:	3301      	adds	r3, #1
 800641c:	429a      	cmp	r2, r3
 800641e:	d1fa      	bne.n	8006416 <memmove+0x1a>
 8006420:	e7f8      	b.n	8006414 <memmove+0x18>

08006422 <memchr>:
 8006422:	b2c9      	uxtb	r1, r1
 8006424:	1882      	adds	r2, r0, r2
 8006426:	4290      	cmp	r0, r2
 8006428:	d101      	bne.n	800642e <memchr+0xc>
 800642a:	2000      	movs	r0, #0
 800642c:	4770      	bx	lr
 800642e:	7803      	ldrb	r3, [r0, #0]
 8006430:	428b      	cmp	r3, r1
 8006432:	d0fb      	beq.n	800642c <memchr+0xa>
 8006434:	3001      	adds	r0, #1
 8006436:	e7f6      	b.n	8006426 <memchr+0x4>

08006438 <abort>:
 8006438:	2006      	movs	r0, #6
 800643a:	b510      	push	{r4, lr}
 800643c:	f000 f8c2 	bl	80065c4 <raise>
 8006440:	2001      	movs	r0, #1
 8006442:	f7fb fb2b 	bl	8001a9c <_exit>

08006446 <_realloc_r>:
 8006446:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006448:	0007      	movs	r7, r0
 800644a:	000e      	movs	r6, r1
 800644c:	0014      	movs	r4, r2
 800644e:	2900      	cmp	r1, #0
 8006450:	d105      	bne.n	800645e <_realloc_r+0x18>
 8006452:	0011      	movs	r1, r2
 8006454:	f7fe fec2 	bl	80051dc <_malloc_r>
 8006458:	0005      	movs	r5, r0
 800645a:	0028      	movs	r0, r5
 800645c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800645e:	2a00      	cmp	r2, #0
 8006460:	d103      	bne.n	800646a <_realloc_r+0x24>
 8006462:	f7ff f9ef 	bl	8005844 <_free_r>
 8006466:	0025      	movs	r5, r4
 8006468:	e7f7      	b.n	800645a <_realloc_r+0x14>
 800646a:	f000 f8ef 	bl	800664c <_malloc_usable_size_r>
 800646e:	9001      	str	r0, [sp, #4]
 8006470:	4284      	cmp	r4, r0
 8006472:	d803      	bhi.n	800647c <_realloc_r+0x36>
 8006474:	0035      	movs	r5, r6
 8006476:	0843      	lsrs	r3, r0, #1
 8006478:	42a3      	cmp	r3, r4
 800647a:	d3ee      	bcc.n	800645a <_realloc_r+0x14>
 800647c:	0021      	movs	r1, r4
 800647e:	0038      	movs	r0, r7
 8006480:	f7fe feac 	bl	80051dc <_malloc_r>
 8006484:	1e05      	subs	r5, r0, #0
 8006486:	d0e8      	beq.n	800645a <_realloc_r+0x14>
 8006488:	9b01      	ldr	r3, [sp, #4]
 800648a:	0022      	movs	r2, r4
 800648c:	429c      	cmp	r4, r3
 800648e:	d900      	bls.n	8006492 <_realloc_r+0x4c>
 8006490:	001a      	movs	r2, r3
 8006492:	0031      	movs	r1, r6
 8006494:	0028      	movs	r0, r5
 8006496:	f7ff f9ad 	bl	80057f4 <memcpy>
 800649a:	0031      	movs	r1, r6
 800649c:	0038      	movs	r0, r7
 800649e:	f7ff f9d1 	bl	8005844 <_free_r>
 80064a2:	e7da      	b.n	800645a <_realloc_r+0x14>

080064a4 <__swhatbuf_r>:
 80064a4:	b570      	push	{r4, r5, r6, lr}
 80064a6:	000e      	movs	r6, r1
 80064a8:	001d      	movs	r5, r3
 80064aa:	230e      	movs	r3, #14
 80064ac:	5ec9      	ldrsh	r1, [r1, r3]
 80064ae:	0014      	movs	r4, r2
 80064b0:	b096      	sub	sp, #88	; 0x58
 80064b2:	2900      	cmp	r1, #0
 80064b4:	da0c      	bge.n	80064d0 <__swhatbuf_r+0x2c>
 80064b6:	89b2      	ldrh	r2, [r6, #12]
 80064b8:	2380      	movs	r3, #128	; 0x80
 80064ba:	0011      	movs	r1, r2
 80064bc:	4019      	ands	r1, r3
 80064be:	421a      	tst	r2, r3
 80064c0:	d013      	beq.n	80064ea <__swhatbuf_r+0x46>
 80064c2:	2100      	movs	r1, #0
 80064c4:	3b40      	subs	r3, #64	; 0x40
 80064c6:	2000      	movs	r0, #0
 80064c8:	6029      	str	r1, [r5, #0]
 80064ca:	6023      	str	r3, [r4, #0]
 80064cc:	b016      	add	sp, #88	; 0x58
 80064ce:	bd70      	pop	{r4, r5, r6, pc}
 80064d0:	466a      	mov	r2, sp
 80064d2:	f000 f881 	bl	80065d8 <_fstat_r>
 80064d6:	2800      	cmp	r0, #0
 80064d8:	dbed      	blt.n	80064b6 <__swhatbuf_r+0x12>
 80064da:	23f0      	movs	r3, #240	; 0xf0
 80064dc:	9901      	ldr	r1, [sp, #4]
 80064de:	021b      	lsls	r3, r3, #8
 80064e0:	4019      	ands	r1, r3
 80064e2:	4b03      	ldr	r3, [pc, #12]	; (80064f0 <__swhatbuf_r+0x4c>)
 80064e4:	18c9      	adds	r1, r1, r3
 80064e6:	424b      	negs	r3, r1
 80064e8:	4159      	adcs	r1, r3
 80064ea:	2380      	movs	r3, #128	; 0x80
 80064ec:	00db      	lsls	r3, r3, #3
 80064ee:	e7ea      	b.n	80064c6 <__swhatbuf_r+0x22>
 80064f0:	ffffe000 	.word	0xffffe000

080064f4 <__smakebuf_r>:
 80064f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80064f6:	2602      	movs	r6, #2
 80064f8:	898b      	ldrh	r3, [r1, #12]
 80064fa:	0005      	movs	r5, r0
 80064fc:	000c      	movs	r4, r1
 80064fe:	4233      	tst	r3, r6
 8006500:	d006      	beq.n	8006510 <__smakebuf_r+0x1c>
 8006502:	0023      	movs	r3, r4
 8006504:	3347      	adds	r3, #71	; 0x47
 8006506:	6023      	str	r3, [r4, #0]
 8006508:	6123      	str	r3, [r4, #16]
 800650a:	2301      	movs	r3, #1
 800650c:	6163      	str	r3, [r4, #20]
 800650e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8006510:	466a      	mov	r2, sp
 8006512:	ab01      	add	r3, sp, #4
 8006514:	f7ff ffc6 	bl	80064a4 <__swhatbuf_r>
 8006518:	9900      	ldr	r1, [sp, #0]
 800651a:	0007      	movs	r7, r0
 800651c:	0028      	movs	r0, r5
 800651e:	f7fe fe5d 	bl	80051dc <_malloc_r>
 8006522:	2800      	cmp	r0, #0
 8006524:	d108      	bne.n	8006538 <__smakebuf_r+0x44>
 8006526:	220c      	movs	r2, #12
 8006528:	5ea3      	ldrsh	r3, [r4, r2]
 800652a:	059a      	lsls	r2, r3, #22
 800652c:	d4ef      	bmi.n	800650e <__smakebuf_r+0x1a>
 800652e:	2203      	movs	r2, #3
 8006530:	4393      	bics	r3, r2
 8006532:	431e      	orrs	r6, r3
 8006534:	81a6      	strh	r6, [r4, #12]
 8006536:	e7e4      	b.n	8006502 <__smakebuf_r+0xe>
 8006538:	2380      	movs	r3, #128	; 0x80
 800653a:	89a2      	ldrh	r2, [r4, #12]
 800653c:	6020      	str	r0, [r4, #0]
 800653e:	4313      	orrs	r3, r2
 8006540:	81a3      	strh	r3, [r4, #12]
 8006542:	9b00      	ldr	r3, [sp, #0]
 8006544:	6120      	str	r0, [r4, #16]
 8006546:	6163      	str	r3, [r4, #20]
 8006548:	9b01      	ldr	r3, [sp, #4]
 800654a:	2b00      	cmp	r3, #0
 800654c:	d00c      	beq.n	8006568 <__smakebuf_r+0x74>
 800654e:	0028      	movs	r0, r5
 8006550:	230e      	movs	r3, #14
 8006552:	5ee1      	ldrsh	r1, [r4, r3]
 8006554:	f000 f852 	bl	80065fc <_isatty_r>
 8006558:	2800      	cmp	r0, #0
 800655a:	d005      	beq.n	8006568 <__smakebuf_r+0x74>
 800655c:	2303      	movs	r3, #3
 800655e:	89a2      	ldrh	r2, [r4, #12]
 8006560:	439a      	bics	r2, r3
 8006562:	3b02      	subs	r3, #2
 8006564:	4313      	orrs	r3, r2
 8006566:	81a3      	strh	r3, [r4, #12]
 8006568:	89a3      	ldrh	r3, [r4, #12]
 800656a:	433b      	orrs	r3, r7
 800656c:	81a3      	strh	r3, [r4, #12]
 800656e:	e7ce      	b.n	800650e <__smakebuf_r+0x1a>

08006570 <_raise_r>:
 8006570:	b570      	push	{r4, r5, r6, lr}
 8006572:	0004      	movs	r4, r0
 8006574:	000d      	movs	r5, r1
 8006576:	291f      	cmp	r1, #31
 8006578:	d904      	bls.n	8006584 <_raise_r+0x14>
 800657a:	2316      	movs	r3, #22
 800657c:	6003      	str	r3, [r0, #0]
 800657e:	2001      	movs	r0, #1
 8006580:	4240      	negs	r0, r0
 8006582:	bd70      	pop	{r4, r5, r6, pc}
 8006584:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8006586:	2b00      	cmp	r3, #0
 8006588:	d004      	beq.n	8006594 <_raise_r+0x24>
 800658a:	008a      	lsls	r2, r1, #2
 800658c:	189b      	adds	r3, r3, r2
 800658e:	681a      	ldr	r2, [r3, #0]
 8006590:	2a00      	cmp	r2, #0
 8006592:	d108      	bne.n	80065a6 <_raise_r+0x36>
 8006594:	0020      	movs	r0, r4
 8006596:	f000 f855 	bl	8006644 <_getpid_r>
 800659a:	002a      	movs	r2, r5
 800659c:	0001      	movs	r1, r0
 800659e:	0020      	movs	r0, r4
 80065a0:	f000 f83e 	bl	8006620 <_kill_r>
 80065a4:	e7ed      	b.n	8006582 <_raise_r+0x12>
 80065a6:	2000      	movs	r0, #0
 80065a8:	2a01      	cmp	r2, #1
 80065aa:	d0ea      	beq.n	8006582 <_raise_r+0x12>
 80065ac:	1c51      	adds	r1, r2, #1
 80065ae:	d103      	bne.n	80065b8 <_raise_r+0x48>
 80065b0:	2316      	movs	r3, #22
 80065b2:	3001      	adds	r0, #1
 80065b4:	6023      	str	r3, [r4, #0]
 80065b6:	e7e4      	b.n	8006582 <_raise_r+0x12>
 80065b8:	2400      	movs	r4, #0
 80065ba:	0028      	movs	r0, r5
 80065bc:	601c      	str	r4, [r3, #0]
 80065be:	4790      	blx	r2
 80065c0:	0020      	movs	r0, r4
 80065c2:	e7de      	b.n	8006582 <_raise_r+0x12>

080065c4 <raise>:
 80065c4:	b510      	push	{r4, lr}
 80065c6:	4b03      	ldr	r3, [pc, #12]	; (80065d4 <raise+0x10>)
 80065c8:	0001      	movs	r1, r0
 80065ca:	6818      	ldr	r0, [r3, #0]
 80065cc:	f7ff ffd0 	bl	8006570 <_raise_r>
 80065d0:	bd10      	pop	{r4, pc}
 80065d2:	46c0      	nop			; (mov r8, r8)
 80065d4:	200001f4 	.word	0x200001f4

080065d8 <_fstat_r>:
 80065d8:	2300      	movs	r3, #0
 80065da:	b570      	push	{r4, r5, r6, lr}
 80065dc:	4d06      	ldr	r5, [pc, #24]	; (80065f8 <_fstat_r+0x20>)
 80065de:	0004      	movs	r4, r0
 80065e0:	0008      	movs	r0, r1
 80065e2:	0011      	movs	r1, r2
 80065e4:	602b      	str	r3, [r5, #0]
 80065e6:	f7fb faa8 	bl	8001b3a <_fstat>
 80065ea:	1c43      	adds	r3, r0, #1
 80065ec:	d103      	bne.n	80065f6 <_fstat_r+0x1e>
 80065ee:	682b      	ldr	r3, [r5, #0]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d000      	beq.n	80065f6 <_fstat_r+0x1e>
 80065f4:	6023      	str	r3, [r4, #0]
 80065f6:	bd70      	pop	{r4, r5, r6, pc}
 80065f8:	200004e4 	.word	0x200004e4

080065fc <_isatty_r>:
 80065fc:	2300      	movs	r3, #0
 80065fe:	b570      	push	{r4, r5, r6, lr}
 8006600:	4d06      	ldr	r5, [pc, #24]	; (800661c <_isatty_r+0x20>)
 8006602:	0004      	movs	r4, r0
 8006604:	0008      	movs	r0, r1
 8006606:	602b      	str	r3, [r5, #0]
 8006608:	f7fb faa5 	bl	8001b56 <_isatty>
 800660c:	1c43      	adds	r3, r0, #1
 800660e:	d103      	bne.n	8006618 <_isatty_r+0x1c>
 8006610:	682b      	ldr	r3, [r5, #0]
 8006612:	2b00      	cmp	r3, #0
 8006614:	d000      	beq.n	8006618 <_isatty_r+0x1c>
 8006616:	6023      	str	r3, [r4, #0]
 8006618:	bd70      	pop	{r4, r5, r6, pc}
 800661a:	46c0      	nop			; (mov r8, r8)
 800661c:	200004e4 	.word	0x200004e4

08006620 <_kill_r>:
 8006620:	2300      	movs	r3, #0
 8006622:	b570      	push	{r4, r5, r6, lr}
 8006624:	4d06      	ldr	r5, [pc, #24]	; (8006640 <_kill_r+0x20>)
 8006626:	0004      	movs	r4, r0
 8006628:	0008      	movs	r0, r1
 800662a:	0011      	movs	r1, r2
 800662c:	602b      	str	r3, [r5, #0]
 800662e:	f7fb fa25 	bl	8001a7c <_kill>
 8006632:	1c43      	adds	r3, r0, #1
 8006634:	d103      	bne.n	800663e <_kill_r+0x1e>
 8006636:	682b      	ldr	r3, [r5, #0]
 8006638:	2b00      	cmp	r3, #0
 800663a:	d000      	beq.n	800663e <_kill_r+0x1e>
 800663c:	6023      	str	r3, [r4, #0]
 800663e:	bd70      	pop	{r4, r5, r6, pc}
 8006640:	200004e4 	.word	0x200004e4

08006644 <_getpid_r>:
 8006644:	b510      	push	{r4, lr}
 8006646:	f7fb fa13 	bl	8001a70 <_getpid>
 800664a:	bd10      	pop	{r4, pc}

0800664c <_malloc_usable_size_r>:
 800664c:	1f0b      	subs	r3, r1, #4
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	1f18      	subs	r0, r3, #4
 8006652:	2b00      	cmp	r3, #0
 8006654:	da01      	bge.n	800665a <_malloc_usable_size_r+0xe>
 8006656:	580b      	ldr	r3, [r1, r0]
 8006658:	18c0      	adds	r0, r0, r3
 800665a:	4770      	bx	lr

0800665c <_init>:
 800665c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800665e:	46c0      	nop			; (mov r8, r8)
 8006660:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006662:	bc08      	pop	{r3}
 8006664:	469e      	mov	lr, r3
 8006666:	4770      	bx	lr

08006668 <_fini>:
 8006668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800666a:	46c0      	nop			; (mov r8, r8)
 800666c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800666e:	bc08      	pop	{r3}
 8006670:	469e      	mov	lr, r3
 8006672:	4770      	bx	lr
